# id;timestamp;commentText;codeText;commentWords;codeWords
SharedStateRegistry -> public Result obtainReference(SharedStateRegistryKey registrationKey);1494762590;Obtains one reference to the given shared state in the registry. This increases the_reference count by one.__@param registrationKey the shared state for which we obtain a reference._@return the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle.;public Result obtainReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		synchronized (registeredStates) {_			SharedStateRegistry.SharedStateEntry entry =_				Preconditions.checkNotNull(registeredStates.get(registrationKey),_					"Could not find a state for the given registration key!")__			entry.increaseReferenceCount()__			return new Result(entry)__		}_	};obtains,one,reference,to,the,given,shared,state,in,the,registry,this,increases,the,reference,count,by,one,param,registration,key,the,shared,state,for,which,we,obtain,a,reference,return,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle;public,result,obtain,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,synchronized,registered,states,shared,state,registry,shared,state,entry,entry,preconditions,check,not,null,registered,states,get,registration,key,could,not,find,a,state,for,the,given,registration,key,entry,increase,reference,count,return,new,result,entry
SharedStateRegistry -> public Result obtainReference(SharedStateRegistryKey registrationKey);1494762590;Obtains one reference to the given shared state in the registry. This increases the_reference count by one.__@param registrationKey the shared state for which we obtain a reference._@return the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle.;public Result obtainReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		synchronized (registeredStates) {_			SharedStateRegistry.SharedStateEntry entry =_				Preconditions.checkNotNull(registeredStates.get(registrationKey),_					"Could not find a state for the given registration key!")__			entry.increaseReferenceCount()__			return new Result(entry)__		}_	};obtains,one,reference,to,the,given,shared,state,in,the,registry,this,increases,the,reference,count,by,one,param,registration,key,the,shared,state,for,which,we,obtain,a,reference,return,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle;public,result,obtain,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,synchronized,registered,states,shared,state,registry,shared,state,entry,entry,preconditions,check,not,null,registered,states,get,registration,key,could,not,find,a,state,for,the,given,registration,key,entry,increase,reference,count,return,new,result,entry
SharedStateRegistry -> public Result obtainReference(SharedStateRegistryKey registrationKey);1494762590;Obtains one reference to the given shared state in the registry. This increases the_reference count by one.__@param registrationKey the shared state for which we obtain a reference._@return the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle.;public Result obtainReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		synchronized (registeredStates) {_			SharedStateRegistry.SharedStateEntry entry =_				Preconditions.checkNotNull(registeredStates.get(registrationKey),_					"Could not find a state for the given registration key!")__			entry.increaseReferenceCount()__			return new Result(entry)__		}_	};obtains,one,reference,to,the,given,shared,state,in,the,registry,this,increases,the,reference,count,by,one,param,registration,key,the,shared,state,for,which,we,obtain,a,reference,return,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle;public,result,obtain,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,synchronized,registered,states,shared,state,registry,shared,state,entry,entry,preconditions,check,not,null,registered,states,get,registration,key,could,not,find,a,state,for,the,given,registration,key,entry,increase,reference,count,return,new,result,entry
SharedStateRegistry -> public Result releaseReference(SharedStateRegistryKey registrationKey);1494762590;Releases one reference to the given shared state in the registry. This decreases the_reference count by one. Once the count reaches zero, the shared state is deleted.__@param registrationKey the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle, or null if the state handle was deleted through this request.;public Result releaseReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		final Result result__		final StreamStateHandle scheduledStateDeletion___		synchronized (registeredStates) {_			SharedStateRegistry.SharedStateEntry entry = registeredStates.get(registrationKey)___			Preconditions.checkState(entry != null,_				"Cannot unregister a state that is not registered.")___			entry.decreaseReferenceCount()___			_			if (entry.getReferenceCount() <= 0) {_				registeredStates.remove(registrationKey)__				scheduledStateDeletion = entry.getState()__				result = new Result(null, 0)__			} else {_				scheduledStateDeletion = null__				result = new Result(entry)__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		return result__	};releases,one,reference,to,the,given,shared,state,in,the,registry,this,decreases,the,reference,count,by,one,once,the,count,reaches,zero,the,shared,state,is,deleted,param,registration,key,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle,or,null,if,the,state,handle,was,deleted,through,this,request;public,result,release,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,final,result,result,final,stream,state,handle,scheduled,state,deletion,synchronized,registered,states,shared,state,registry,shared,state,entry,entry,registered,states,get,registration,key,preconditions,check,state,entry,null,cannot,unregister,a,state,that,is,not,registered,entry,decrease,reference,count,if,entry,get,reference,count,0,registered,states,remove,registration,key,scheduled,state,deletion,entry,get,state,result,new,result,null,0,else,scheduled,state,deletion,null,result,new,result,entry,schedule,async,delete,scheduled,state,deletion,return,result
SharedStateRegistry -> public Result releaseReference(SharedStateRegistryKey registrationKey);1494762590;Releases one reference to the given shared state in the registry. This decreases the_reference count by one. Once the count reaches zero, the shared state is deleted.__@param registrationKey the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle, or null if the state handle was deleted through this request.;public Result releaseReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		final Result result__		final StreamStateHandle scheduledStateDeletion___		synchronized (registeredStates) {_			SharedStateRegistry.SharedStateEntry entry = registeredStates.get(registrationKey)___			Preconditions.checkState(entry != null,_				"Cannot unregister a state that is not registered.")___			entry.decreaseReferenceCount()___			_			if (entry.getReferenceCount() <= 0) {_				registeredStates.remove(registrationKey)__				scheduledStateDeletion = entry.getState()__				result = new Result(null, 0)__			} else {_				scheduledStateDeletion = null__				result = new Result(entry)__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		return result__	};releases,one,reference,to,the,given,shared,state,in,the,registry,this,decreases,the,reference,count,by,one,once,the,count,reaches,zero,the,shared,state,is,deleted,param,registration,key,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle,or,null,if,the,state,handle,was,deleted,through,this,request;public,result,release,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,final,result,result,final,stream,state,handle,scheduled,state,deletion,synchronized,registered,states,shared,state,registry,shared,state,entry,entry,registered,states,get,registration,key,preconditions,check,state,entry,null,cannot,unregister,a,state,that,is,not,registered,entry,decrease,reference,count,if,entry,get,reference,count,0,registered,states,remove,registration,key,scheduled,state,deletion,entry,get,state,result,new,result,null,0,else,scheduled,state,deletion,null,result,new,result,entry,schedule,async,delete,scheduled,state,deletion,return,result
SharedStateRegistry -> public Result releaseReference(SharedStateRegistryKey registrationKey);1494762590;Releases one reference to the given shared state in the registry. This decreases the_reference count by one. Once the count reaches zero, the shared state is deleted.__@param registrationKey the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle, or null if the state handle was deleted through this request.;public Result releaseReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		final Result result__		final StreamStateHandle scheduledStateDeletion___		synchronized (registeredStates) {_			SharedStateRegistry.SharedStateEntry entry = registeredStates.get(registrationKey)___			Preconditions.checkState(entry != null,_				"Cannot unregister a state that is not registered.")___			entry.decreaseReferenceCount()___			_			if (entry.getReferenceCount() <= 0) {_				registeredStates.remove(registrationKey)__				scheduledStateDeletion = entry.getState()__				result = new Result(null, 0)__			} else {_				scheduledStateDeletion = null__				result = new Result(entry)__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		return result__	};releases,one,reference,to,the,given,shared,state,in,the,registry,this,decreases,the,reference,count,by,one,once,the,count,reaches,zero,the,shared,state,is,deleted,param,registration,key,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle,or,null,if,the,state,handle,was,deleted,through,this,request;public,result,release,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,final,result,result,final,stream,state,handle,scheduled,state,deletion,synchronized,registered,states,shared,state,registry,shared,state,entry,entry,registered,states,get,registration,key,preconditions,check,state,entry,null,cannot,unregister,a,state,that,is,not,registered,entry,decrease,reference,count,if,entry,get,reference,count,0,registered,states,remove,registration,key,scheduled,state,deletion,entry,get,state,result,new,result,null,0,else,scheduled,state,deletion,null,result,new,result,entry,schedule,async,delete,scheduled,state,deletion,return,result
SharedStateRegistry -> public SharedStateRegistry();1500040329;Default uses direct executor to delete unreferenced state;public SharedStateRegistry() {_		this(Executors.directExecutor())__	};default,uses,direct,executor,to,delete,unreferenced,state;public,shared,state,registry,this,executors,direct,executor
SharedStateRegistry -> public SharedStateRegistry();1502801814;Default uses direct executor to delete unreferenced state;public SharedStateRegistry() {_		this(Executors.directExecutor())__	};default,uses,direct,executor,to,delete,unreferenced,state;public,shared,state,registry,this,executors,direct,executor
SharedStateRegistry -> public SharedStateRegistry();1509118643;Default uses direct executor to delete unreferenced state;public SharedStateRegistry() {_		this(Executors.directExecutor())__	};default,uses,direct,executor,to,delete,unreferenced,state;public,shared,state,registry,this,executors,direct,executor
SharedStateRegistry -> public SharedStateRegistry();1515177485;Default uses direct executor to delete unreferenced state;public SharedStateRegistry() {_		this(Executors.directExecutor())__	};default,uses,direct,executor,to,delete,unreferenced,state;public,shared,state,registry,this,executors,direct,executor
SharedStateRegistry -> public SharedStateRegistry();1515507454;Default uses direct executor to delete unreferenced state;public SharedStateRegistry() {_		this(Executors.directExecutor())__	};default,uses,direct,executor,to,delete,unreferenced,state;public,shared,state,registry,this,executors,direct,executor
SharedStateRegistry -> public Result registerNewReference(SharedStateRegistryKey registrationKey, StreamStateHandle state);1494762590;Register a reference to the given (supposedly new) shared state in the registry._This does the following: We check if the state handle is actually new by the_registrationKey. If it is new, we register it with a reference count of 1. If there is_already a state handle registered under the given key, we dispose the given "new" state_handle, uptick the reference count of the previously existing state handle and return it as_a replacement with the result.__<p>IMPORTANT: caller should check the state handle returned by the result, because the_registry is performing deduplication and could potentially return a handle that is supposed_to replace the one from the registration request.__@param state the shared state for which we register a reference._@return the result of this registration request, consisting of the state handle that is_registered under the key by the end of the oepration and its current reference count.;public Result registerNewReference(SharedStateRegistryKey registrationKey, StreamStateHandle state) {__		Preconditions.checkNotNull(state)___		StreamStateHandle scheduledStateDeletion = null__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {_			entry = registeredStates.get(registrationKey)___			if (entry == null) {_				entry = new SharedStateRegistry.SharedStateEntry(state)__				registeredStates.put(registrationKey, entry)__			} else {_				_				if (!Objects.equals(state, entry.state)) {_					scheduledStateDeletion = state__				}_				entry.increaseReferenceCount()__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		return new Result(entry)__	};register,a,reference,to,the,given,supposedly,new,shared,state,in,the,registry,this,does,the,following,we,check,if,the,state,handle,is,actually,new,by,the,registration,key,if,it,is,new,we,register,it,with,a,reference,count,of,1,if,there,is,already,a,state,handle,registered,under,the,given,key,we,dispose,the,given,new,state,handle,uptick,the,reference,count,of,the,previously,existing,state,handle,and,return,it,as,a,replacement,with,the,result,p,important,caller,should,check,the,state,handle,returned,by,the,result,because,the,registry,is,performing,deduplication,and,could,potentially,return,a,handle,that,is,supposed,to,replace,the,one,from,the,registration,request,param,state,the,shared,state,for,which,we,register,a,reference,return,the,result,of,this,registration,request,consisting,of,the,state,handle,that,is,registered,under,the,key,by,the,end,of,the,oepration,and,its,current,reference,count;public,result,register,new,reference,shared,state,registry,key,registration,key,stream,state,handle,state,preconditions,check,not,null,state,stream,state,handle,scheduled,state,deletion,null,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,entry,registered,states,get,registration,key,if,entry,null,entry,new,shared,state,registry,shared,state,entry,state,registered,states,put,registration,key,entry,else,if,objects,equals,state,entry,state,scheduled,state,deletion,state,entry,increase,reference,count,schedule,async,delete,scheduled,state,deletion,return,new,result,entry
SharedStateRegistry -> public Result registerNewReference(SharedStateRegistryKey registrationKey, StreamStateHandle state);1494762590;Register a reference to the given (supposedly new) shared state in the registry._This does the following: We check if the state handle is actually new by the_registrationKey. If it is new, we register it with a reference count of 1. If there is_already a state handle registered under the given key, we dispose the given "new" state_handle, uptick the reference count of the previously existing state handle and return it as_a replacement with the result.__<p>IMPORTANT: caller should check the state handle returned by the result, because the_registry is performing deduplication and could potentially return a handle that is supposed_to replace the one from the registration request.__@param state the shared state for which we register a reference._@return the result of this registration request, consisting of the state handle that is_registered under the key by the end of the oepration and its current reference count.;public Result registerNewReference(SharedStateRegistryKey registrationKey, StreamStateHandle state) {__		Preconditions.checkNotNull(state)___		StreamStateHandle scheduledStateDeletion = null__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {_			entry = registeredStates.get(registrationKey)___			if (entry == null) {_				entry = new SharedStateRegistry.SharedStateEntry(state)__				registeredStates.put(registrationKey, entry)__			} else {_				_				if (!Objects.equals(state, entry.state)) {_					scheduledStateDeletion = state__				}_				entry.increaseReferenceCount()__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		return new Result(entry)__	};register,a,reference,to,the,given,supposedly,new,shared,state,in,the,registry,this,does,the,following,we,check,if,the,state,handle,is,actually,new,by,the,registration,key,if,it,is,new,we,register,it,with,a,reference,count,of,1,if,there,is,already,a,state,handle,registered,under,the,given,key,we,dispose,the,given,new,state,handle,uptick,the,reference,count,of,the,previously,existing,state,handle,and,return,it,as,a,replacement,with,the,result,p,important,caller,should,check,the,state,handle,returned,by,the,result,because,the,registry,is,performing,deduplication,and,could,potentially,return,a,handle,that,is,supposed,to,replace,the,one,from,the,registration,request,param,state,the,shared,state,for,which,we,register,a,reference,return,the,result,of,this,registration,request,consisting,of,the,state,handle,that,is,registered,under,the,key,by,the,end,of,the,oepration,and,its,current,reference,count;public,result,register,new,reference,shared,state,registry,key,registration,key,stream,state,handle,state,preconditions,check,not,null,state,stream,state,handle,scheduled,state,deletion,null,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,entry,registered,states,get,registration,key,if,entry,null,entry,new,shared,state,registry,shared,state,entry,state,registered,states,put,registration,key,entry,else,if,objects,equals,state,entry,state,scheduled,state,deletion,state,entry,increase,reference,count,schedule,async,delete,scheduled,state,deletion,return,new,result,entry
SharedStateRegistry -> public Result registerNewReference(SharedStateRegistryKey registrationKey, StreamStateHandle state);1494762590;Register a reference to the given (supposedly new) shared state in the registry._This does the following: We check if the state handle is actually new by the_registrationKey. If it is new, we register it with a reference count of 1. If there is_already a state handle registered under the given key, we dispose the given "new" state_handle, uptick the reference count of the previously existing state handle and return it as_a replacement with the result.__<p>IMPORTANT: caller should check the state handle returned by the result, because the_registry is performing deduplication and could potentially return a handle that is supposed_to replace the one from the registration request.__@param state the shared state for which we register a reference._@return the result of this registration request, consisting of the state handle that is_registered under the key by the end of the oepration and its current reference count.;public Result registerNewReference(SharedStateRegistryKey registrationKey, StreamStateHandle state) {__		Preconditions.checkNotNull(state)___		StreamStateHandle scheduledStateDeletion = null__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {_			entry = registeredStates.get(registrationKey)___			if (entry == null) {_				entry = new SharedStateRegistry.SharedStateEntry(state)__				registeredStates.put(registrationKey, entry)__			} else {_				_				if (!Objects.equals(state, entry.state)) {_					scheduledStateDeletion = state__				}_				entry.increaseReferenceCount()__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		return new Result(entry)__	};register,a,reference,to,the,given,supposedly,new,shared,state,in,the,registry,this,does,the,following,we,check,if,the,state,handle,is,actually,new,by,the,registration,key,if,it,is,new,we,register,it,with,a,reference,count,of,1,if,there,is,already,a,state,handle,registered,under,the,given,key,we,dispose,the,given,new,state,handle,uptick,the,reference,count,of,the,previously,existing,state,handle,and,return,it,as,a,replacement,with,the,result,p,important,caller,should,check,the,state,handle,returned,by,the,result,because,the,registry,is,performing,deduplication,and,could,potentially,return,a,handle,that,is,supposed,to,replace,the,one,from,the,registration,request,param,state,the,shared,state,for,which,we,register,a,reference,return,the,result,of,this,registration,request,consisting,of,the,state,handle,that,is,registered,under,the,key,by,the,end,of,the,oepration,and,its,current,reference,count;public,result,register,new,reference,shared,state,registry,key,registration,key,stream,state,handle,state,preconditions,check,not,null,state,stream,state,handle,scheduled,state,deletion,null,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,entry,registered,states,get,registration,key,if,entry,null,entry,new,shared,state,registry,shared,state,entry,state,registered,states,put,registration,key,entry,else,if,objects,equals,state,entry,state,scheduled,state,deletion,state,entry,increase,reference,count,schedule,async,delete,scheduled,state,deletion,return,new,result,entry
SharedStateRegistry -> public void clear();1495287945;Clears the registry.;public void clear() {_		registeredStates.clear()__	};clears,the,registry;public,void,clear,registered,states,clear
SharedStateRegistry -> public void clear();1495441800;Clears the registry.;public void clear() {_		synchronized (registeredStates) {_			registeredStates.clear()__		}_	};clears,the,registry;public,void,clear,synchronized,registered,states,registered,states,clear
SharedStateRegistry -> public void clear();1500040329;Clears the registry.;public void clear() {_		synchronized (registeredStates) {_			registeredStates.clear()__		}_	};clears,the,registry;public,void,clear,synchronized,registered,states,registered,states,clear
SharedStateRegistry -> public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state);1495184252;Register a reference to the given shared state in the registry._This does the following: We check if the state handle is actually new by the_registrationKey. If it is new, we register it with a reference count of 1. If there is_already a state handle registered under the given key, we dispose the given "new" state_handle, uptick the reference count of the previously existing state handle and return it as_a replacement with the result.__<p>IMPORTANT: caller should check the state handle returned by the result, because the_registry is performing de-duplication and could potentially return a handle that is supposed_to replace the one from the registration request.__@param state the shared state for which we register a reference._@return the result of this registration request, consisting of the state handle that is_registered under the key by the end of the oepration and its current reference count.;public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state) {__		Preconditions.checkNotNull(state)___		StreamStateHandle scheduledStateDeletion = null__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {_			entry = registeredStates.get(registrationKey)___			if (entry == null) {_				entry = new SharedStateRegistry.SharedStateEntry(state)__				registeredStates.put(registrationKey, entry)__			} else {_				_				if (!Objects.equals(state, entry.state)) {_					scheduledStateDeletion = state__				}_				entry.increaseReferenceCount()__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		return new Result(entry)__	};register,a,reference,to,the,given,shared,state,in,the,registry,this,does,the,following,we,check,if,the,state,handle,is,actually,new,by,the,registration,key,if,it,is,new,we,register,it,with,a,reference,count,of,1,if,there,is,already,a,state,handle,registered,under,the,given,key,we,dispose,the,given,new,state,handle,uptick,the,reference,count,of,the,previously,existing,state,handle,and,return,it,as,a,replacement,with,the,result,p,important,caller,should,check,the,state,handle,returned,by,the,result,because,the,registry,is,performing,de,duplication,and,could,potentially,return,a,handle,that,is,supposed,to,replace,the,one,from,the,registration,request,param,state,the,shared,state,for,which,we,register,a,reference,return,the,result,of,this,registration,request,consisting,of,the,state,handle,that,is,registered,under,the,key,by,the,end,of,the,oepration,and,its,current,reference,count;public,result,register,reference,shared,state,registry,key,registration,key,stream,state,handle,state,preconditions,check,not,null,state,stream,state,handle,scheduled,state,deletion,null,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,entry,registered,states,get,registration,key,if,entry,null,entry,new,shared,state,registry,shared,state,entry,state,registered,states,put,registration,key,entry,else,if,objects,equals,state,entry,state,scheduled,state,deletion,state,entry,increase,reference,count,schedule,async,delete,scheduled,state,deletion,return,new,result,entry
SharedStateRegistry -> public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state);1495287945;Register a reference to the given shared state in the registry._This does the following: We check if the state handle is actually new by the_registrationKey. If it is new, we register it with a reference count of 1. If there is_already a state handle registered under the given key, we dispose the given "new" state_handle, uptick the reference count of the previously existing state handle and return it as_a replacement with the result.__<p>IMPORTANT: caller should check the state handle returned by the result, because the_registry is performing de-duplication and could potentially return a handle that is supposed_to replace the one from the registration request.__@param state the shared state for which we register a reference._@return the result of this registration request, consisting of the state handle that is_registered under the key by the end of the oepration and its current reference count.;public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state) {__		Preconditions.checkNotNull(state)___		StreamStateHandle scheduledStateDeletion = null__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {_			entry = registeredStates.get(registrationKey)___			if (entry == null) {_				entry = new SharedStateRegistry.SharedStateEntry(state)__				registeredStates.put(registrationKey, entry)__			} else {_				_				if (!Objects.equals(state, entry.state)) {_					scheduledStateDeletion = state__				}_				entry.increaseReferenceCount()__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		return new Result(entry)__	};register,a,reference,to,the,given,shared,state,in,the,registry,this,does,the,following,we,check,if,the,state,handle,is,actually,new,by,the,registration,key,if,it,is,new,we,register,it,with,a,reference,count,of,1,if,there,is,already,a,state,handle,registered,under,the,given,key,we,dispose,the,given,new,state,handle,uptick,the,reference,count,of,the,previously,existing,state,handle,and,return,it,as,a,replacement,with,the,result,p,important,caller,should,check,the,state,handle,returned,by,the,result,because,the,registry,is,performing,de,duplication,and,could,potentially,return,a,handle,that,is,supposed,to,replace,the,one,from,the,registration,request,param,state,the,shared,state,for,which,we,register,a,reference,return,the,result,of,this,registration,request,consisting,of,the,state,handle,that,is,registered,under,the,key,by,the,end,of,the,oepration,and,its,current,reference,count;public,result,register,reference,shared,state,registry,key,registration,key,stream,state,handle,state,preconditions,check,not,null,state,stream,state,handle,scheduled,state,deletion,null,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,entry,registered,states,get,registration,key,if,entry,null,entry,new,shared,state,registry,shared,state,entry,state,registered,states,put,registration,key,entry,else,if,objects,equals,state,entry,state,scheduled,state,deletion,state,entry,increase,reference,count,schedule,async,delete,scheduled,state,deletion,return,new,result,entry
SharedStateRegistry -> public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state);1495441800;Register a reference to the given shared state in the registry._This does the following: We check if the state handle is actually new by the_registrationKey. If it is new, we register it with a reference count of 1. If there is_already a state handle registered under the given key, we dispose the given "new" state_handle, uptick the reference count of the previously existing state handle and return it as_a replacement with the result.__<p>IMPORTANT: caller should check the state handle returned by the result, because the_registry is performing de-duplication and could potentially return a handle that is supposed_to replace the one from the registration request.__@param state the shared state for which we register a reference._@return the result of this registration request, consisting of the state handle that is_registered under the key by the end of the oepration and its current reference count.;public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state) {__		Preconditions.checkNotNull(state)___		StreamStateHandle scheduledStateDeletion = null__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {_			entry = registeredStates.get(registrationKey)___			if (entry == null) {_				entry = new SharedStateRegistry.SharedStateEntry(state)__				registeredStates.put(registrationKey, entry)__			} else {_				_				if (!Objects.equals(state, entry.state)) {_					scheduledStateDeletion = state__				}_				entry.increaseReferenceCount()__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		return new Result(entry)__	};register,a,reference,to,the,given,shared,state,in,the,registry,this,does,the,following,we,check,if,the,state,handle,is,actually,new,by,the,registration,key,if,it,is,new,we,register,it,with,a,reference,count,of,1,if,there,is,already,a,state,handle,registered,under,the,given,key,we,dispose,the,given,new,state,handle,uptick,the,reference,count,of,the,previously,existing,state,handle,and,return,it,as,a,replacement,with,the,result,p,important,caller,should,check,the,state,handle,returned,by,the,result,because,the,registry,is,performing,de,duplication,and,could,potentially,return,a,handle,that,is,supposed,to,replace,the,one,from,the,registration,request,param,state,the,shared,state,for,which,we,register,a,reference,return,the,result,of,this,registration,request,consisting,of,the,state,handle,that,is,registered,under,the,key,by,the,end,of,the,oepration,and,its,current,reference,count;public,result,register,reference,shared,state,registry,key,registration,key,stream,state,handle,state,preconditions,check,not,null,state,stream,state,handle,scheduled,state,deletion,null,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,entry,registered,states,get,registration,key,if,entry,null,entry,new,shared,state,registry,shared,state,entry,state,registered,states,put,registration,key,entry,else,if,objects,equals,state,entry,state,scheduled,state,deletion,state,entry,increase,reference,count,schedule,async,delete,scheduled,state,deletion,return,new,result,entry
SharedStateRegistry -> public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state);1500040329;Register a reference to the given shared state in the registry._This does the following: We check if the state handle is actually new by the_registrationKey. If it is new, we register it with a reference count of 1. If there is_already a state handle registered under the given key, we dispose the given "new" state_handle, uptick the reference count of the previously existing state handle and return it as_a replacement with the result.__<p>IMPORTANT: caller should check the state handle returned by the result, because the_registry is performing de-duplication and could potentially return a handle that is supposed_to replace the one from the registration request.__@param state the shared state for which we register a reference._@return the result of this registration request, consisting of the state handle that is_registered under the key by the end of the oepration and its current reference count.;public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state) {__		Preconditions.checkNotNull(state)___		StreamStateHandle scheduledStateDeletion = null__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {_			entry = registeredStates.get(registrationKey)___			if (entry == null) {__				_				_				Preconditions.checkState(!isPlaceholder(state), "Attempt to reference unknown state: " + registrationKey)___				entry = new SharedStateRegistry.SharedStateEntry(state)__				registeredStates.put(registrationKey, entry)__			} else {_				_				if (!Objects.equals(state, entry.stateHandle)) {_					scheduledStateDeletion = state__				}_				entry.increaseReferenceCount()__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		LOG.trace("Registered shared state {} under key {}.", entry, registrationKey)__		return new Result(entry)__	};register,a,reference,to,the,given,shared,state,in,the,registry,this,does,the,following,we,check,if,the,state,handle,is,actually,new,by,the,registration,key,if,it,is,new,we,register,it,with,a,reference,count,of,1,if,there,is,already,a,state,handle,registered,under,the,given,key,we,dispose,the,given,new,state,handle,uptick,the,reference,count,of,the,previously,existing,state,handle,and,return,it,as,a,replacement,with,the,result,p,important,caller,should,check,the,state,handle,returned,by,the,result,because,the,registry,is,performing,de,duplication,and,could,potentially,return,a,handle,that,is,supposed,to,replace,the,one,from,the,registration,request,param,state,the,shared,state,for,which,we,register,a,reference,return,the,result,of,this,registration,request,consisting,of,the,state,handle,that,is,registered,under,the,key,by,the,end,of,the,oepration,and,its,current,reference,count;public,result,register,reference,shared,state,registry,key,registration,key,stream,state,handle,state,preconditions,check,not,null,state,stream,state,handle,scheduled,state,deletion,null,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,entry,registered,states,get,registration,key,if,entry,null,preconditions,check,state,is,placeholder,state,attempt,to,reference,unknown,state,registration,key,entry,new,shared,state,registry,shared,state,entry,state,registered,states,put,registration,key,entry,else,if,objects,equals,state,entry,state,handle,scheduled,state,deletion,state,entry,increase,reference,count,schedule,async,delete,scheduled,state,deletion,log,trace,registered,shared,state,under,key,entry,registration,key,return,new,result,entry
SharedStateRegistry -> public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state);1502801814;Register a reference to the given shared state in the registry._This does the following: We check if the state handle is actually new by the_registrationKey. If it is new, we register it with a reference count of 1. If there is_already a state handle registered under the given key, we dispose the given "new" state_handle, uptick the reference count of the previously existing state handle and return it as_a replacement with the result.__<p>IMPORTANT: caller should check the state handle returned by the result, because the_registry is performing de-duplication and could potentially return a handle that is supposed_to replace the one from the registration request.__@param state the shared state for which we register a reference._@return the result of this registration request, consisting of the state handle that is_registered under the key by the end of the oepration and its current reference count.;public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state) {__		Preconditions.checkNotNull(state)___		StreamStateHandle scheduledStateDeletion = null__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {__			Preconditions.checkState(open, "Attempt to register state to closed SharedStateRegistry.")___			entry = registeredStates.get(registrationKey)___			if (entry == null) {__				_				_				Preconditions.checkState(!isPlaceholder(state), "Attempt to reference unknown state: " + registrationKey)___				entry = new SharedStateRegistry.SharedStateEntry(state)__				registeredStates.put(registrationKey, entry)__			} else {_				_				if (!Objects.equals(state, entry.stateHandle)) {_					scheduledStateDeletion = state__					LOG.trace("Identified duplicate state registration under key {}. New state {} was determined to " +_							"be an unnecessary copy of existing state {} and will be dropped.",_						registrationKey,_						state,_						entry.stateHandle)__				}_				entry.increaseReferenceCount()__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		LOG.trace("Registered shared state {} under key {}.", entry, registrationKey)__		return new Result(entry)__	};register,a,reference,to,the,given,shared,state,in,the,registry,this,does,the,following,we,check,if,the,state,handle,is,actually,new,by,the,registration,key,if,it,is,new,we,register,it,with,a,reference,count,of,1,if,there,is,already,a,state,handle,registered,under,the,given,key,we,dispose,the,given,new,state,handle,uptick,the,reference,count,of,the,previously,existing,state,handle,and,return,it,as,a,replacement,with,the,result,p,important,caller,should,check,the,state,handle,returned,by,the,result,because,the,registry,is,performing,de,duplication,and,could,potentially,return,a,handle,that,is,supposed,to,replace,the,one,from,the,registration,request,param,state,the,shared,state,for,which,we,register,a,reference,return,the,result,of,this,registration,request,consisting,of,the,state,handle,that,is,registered,under,the,key,by,the,end,of,the,oepration,and,its,current,reference,count;public,result,register,reference,shared,state,registry,key,registration,key,stream,state,handle,state,preconditions,check,not,null,state,stream,state,handle,scheduled,state,deletion,null,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,preconditions,check,state,open,attempt,to,register,state,to,closed,shared,state,registry,entry,registered,states,get,registration,key,if,entry,null,preconditions,check,state,is,placeholder,state,attempt,to,reference,unknown,state,registration,key,entry,new,shared,state,registry,shared,state,entry,state,registered,states,put,registration,key,entry,else,if,objects,equals,state,entry,state,handle,scheduled,state,deletion,state,log,trace,identified,duplicate,state,registration,under,key,new,state,was,determined,to,be,an,unnecessary,copy,of,existing,state,and,will,be,dropped,registration,key,state,entry,state,handle,entry,increase,reference,count,schedule,async,delete,scheduled,state,deletion,log,trace,registered,shared,state,under,key,entry,registration,key,return,new,result,entry
SharedStateRegistry -> public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state);1509118643;Register a reference to the given shared state in the registry._This does the following: We check if the state handle is actually new by the_registrationKey. If it is new, we register it with a reference count of 1. If there is_already a state handle registered under the given key, we dispose the given "new" state_handle, uptick the reference count of the previously existing state handle and return it as_a replacement with the result.__<p>IMPORTANT: caller should check the state handle returned by the result, because the_registry is performing de-duplication and could potentially return a handle that is supposed_to replace the one from the registration request.__@param state the shared state for which we register a reference._@return the result of this registration request, consisting of the state handle that is_registered under the key by the end of the oepration and its current reference count.;public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state) {__		Preconditions.checkNotNull(state)___		StreamStateHandle scheduledStateDeletion = null__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {__			Preconditions.checkState(open, "Attempt to register state to closed SharedStateRegistry.")___			entry = registeredStates.get(registrationKey)___			if (entry == null) {__				_				_				Preconditions.checkState(!isPlaceholder(state), "Attempt to reference unknown state: " + registrationKey)___				entry = new SharedStateRegistry.SharedStateEntry(state)__				registeredStates.put(registrationKey, entry)__			} else {_				_				if (!Objects.equals(state, entry.stateHandle)) {_					scheduledStateDeletion = state__					LOG.trace("Identified duplicate state registration under key {}. New state {} was determined to " +_							"be an unnecessary copy of existing state {} and will be dropped.",_						registrationKey,_						state,_						entry.stateHandle)__				}_				entry.increaseReferenceCount()__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		LOG.trace("Registered shared state {} under key {}.", entry, registrationKey)__		return new Result(entry)__	};register,a,reference,to,the,given,shared,state,in,the,registry,this,does,the,following,we,check,if,the,state,handle,is,actually,new,by,the,registration,key,if,it,is,new,we,register,it,with,a,reference,count,of,1,if,there,is,already,a,state,handle,registered,under,the,given,key,we,dispose,the,given,new,state,handle,uptick,the,reference,count,of,the,previously,existing,state,handle,and,return,it,as,a,replacement,with,the,result,p,important,caller,should,check,the,state,handle,returned,by,the,result,because,the,registry,is,performing,de,duplication,and,could,potentially,return,a,handle,that,is,supposed,to,replace,the,one,from,the,registration,request,param,state,the,shared,state,for,which,we,register,a,reference,return,the,result,of,this,registration,request,consisting,of,the,state,handle,that,is,registered,under,the,key,by,the,end,of,the,oepration,and,its,current,reference,count;public,result,register,reference,shared,state,registry,key,registration,key,stream,state,handle,state,preconditions,check,not,null,state,stream,state,handle,scheduled,state,deletion,null,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,preconditions,check,state,open,attempt,to,register,state,to,closed,shared,state,registry,entry,registered,states,get,registration,key,if,entry,null,preconditions,check,state,is,placeholder,state,attempt,to,reference,unknown,state,registration,key,entry,new,shared,state,registry,shared,state,entry,state,registered,states,put,registration,key,entry,else,if,objects,equals,state,entry,state,handle,scheduled,state,deletion,state,log,trace,identified,duplicate,state,registration,under,key,new,state,was,determined,to,be,an,unnecessary,copy,of,existing,state,and,will,be,dropped,registration,key,state,entry,state,handle,entry,increase,reference,count,schedule,async,delete,scheduled,state,deletion,log,trace,registered,shared,state,under,key,entry,registration,key,return,new,result,entry
SharedStateRegistry -> public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state);1515177485;Register a reference to the given shared state in the registry._This does the following: We check if the state handle is actually new by the_registrationKey. If it is new, we register it with a reference count of 1. If there is_already a state handle registered under the given key, we dispose the given "new" state_handle, uptick the reference count of the previously existing state handle and return it as_a replacement with the result.__<p>IMPORTANT: caller should check the state handle returned by the result, because the_registry is performing de-duplication and could potentially return a handle that is supposed_to replace the one from the registration request.__@param state the shared state for which we register a reference._@return the result of this registration request, consisting of the state handle that is_registered under the key by the end of the operation and its current reference count.;public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state) {__		Preconditions.checkNotNull(state)___		StreamStateHandle scheduledStateDeletion = null__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {__			Preconditions.checkState(open, "Attempt to register state to closed SharedStateRegistry.")___			entry = registeredStates.get(registrationKey)___			if (entry == null) {__				_				_				Preconditions.checkState(!isPlaceholder(state), "Attempt to reference unknown state: " + registrationKey)___				entry = new SharedStateRegistry.SharedStateEntry(state)__				registeredStates.put(registrationKey, entry)__			} else {_				_				if (!Objects.equals(state, entry.stateHandle)) {_					scheduledStateDeletion = state__					LOG.trace("Identified duplicate state registration under key {}. New state {} was determined to " +_							"be an unnecessary copy of existing state {} and will be dropped.",_						registrationKey,_						state,_						entry.stateHandle)__				}_				entry.increaseReferenceCount()__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		LOG.trace("Registered shared state {} under key {}.", entry, registrationKey)__		return new Result(entry)__	};register,a,reference,to,the,given,shared,state,in,the,registry,this,does,the,following,we,check,if,the,state,handle,is,actually,new,by,the,registration,key,if,it,is,new,we,register,it,with,a,reference,count,of,1,if,there,is,already,a,state,handle,registered,under,the,given,key,we,dispose,the,given,new,state,handle,uptick,the,reference,count,of,the,previously,existing,state,handle,and,return,it,as,a,replacement,with,the,result,p,important,caller,should,check,the,state,handle,returned,by,the,result,because,the,registry,is,performing,de,duplication,and,could,potentially,return,a,handle,that,is,supposed,to,replace,the,one,from,the,registration,request,param,state,the,shared,state,for,which,we,register,a,reference,return,the,result,of,this,registration,request,consisting,of,the,state,handle,that,is,registered,under,the,key,by,the,end,of,the,operation,and,its,current,reference,count;public,result,register,reference,shared,state,registry,key,registration,key,stream,state,handle,state,preconditions,check,not,null,state,stream,state,handle,scheduled,state,deletion,null,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,preconditions,check,state,open,attempt,to,register,state,to,closed,shared,state,registry,entry,registered,states,get,registration,key,if,entry,null,preconditions,check,state,is,placeholder,state,attempt,to,reference,unknown,state,registration,key,entry,new,shared,state,registry,shared,state,entry,state,registered,states,put,registration,key,entry,else,if,objects,equals,state,entry,state,handle,scheduled,state,deletion,state,log,trace,identified,duplicate,state,registration,under,key,new,state,was,determined,to,be,an,unnecessary,copy,of,existing,state,and,will,be,dropped,registration,key,state,entry,state,handle,entry,increase,reference,count,schedule,async,delete,scheduled,state,deletion,log,trace,registered,shared,state,under,key,entry,registration,key,return,new,result,entry
SharedStateRegistry -> public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state);1515507454;Register a reference to the given shared state in the registry._This does the following: We check if the state handle is actually new by the_registrationKey. If it is new, we register it with a reference count of 1. If there is_already a state handle registered under the given key, we dispose the given "new" state_handle, uptick the reference count of the previously existing state handle and return it as_a replacement with the result.__<p>IMPORTANT: caller should check the state handle returned by the result, because the_registry is performing de-duplication and could potentially return a handle that is supposed_to replace the one from the registration request.__@param state the shared state for which we register a reference._@return the result of this registration request, consisting of the state handle that is_registered under the key by the end of the operation and its current reference count.;public Result registerReference(SharedStateRegistryKey registrationKey, StreamStateHandle state) {__		Preconditions.checkNotNull(state)___		StreamStateHandle scheduledStateDeletion = null__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {__			Preconditions.checkState(open, "Attempt to register state to closed SharedStateRegistry.")___			entry = registeredStates.get(registrationKey)___			if (entry == null) {__				_				_				Preconditions.checkState(!isPlaceholder(state), "Attempt to reference unknown state: " + registrationKey)___				entry = new SharedStateRegistry.SharedStateEntry(state)__				registeredStates.put(registrationKey, entry)__			} else {_				_				if (!Objects.equals(state, entry.stateHandle)) {_					scheduledStateDeletion = state__					LOG.trace("Identified duplicate state registration under key {}. New state {} was determined to " +_							"be an unnecessary copy of existing state {} and will be dropped.",_						registrationKey,_						state,_						entry.stateHandle)__				}_				entry.increaseReferenceCount()__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		LOG.trace("Registered shared state {} under key {}.", entry, registrationKey)__		return new Result(entry)__	};register,a,reference,to,the,given,shared,state,in,the,registry,this,does,the,following,we,check,if,the,state,handle,is,actually,new,by,the,registration,key,if,it,is,new,we,register,it,with,a,reference,count,of,1,if,there,is,already,a,state,handle,registered,under,the,given,key,we,dispose,the,given,new,state,handle,uptick,the,reference,count,of,the,previously,existing,state,handle,and,return,it,as,a,replacement,with,the,result,p,important,caller,should,check,the,state,handle,returned,by,the,result,because,the,registry,is,performing,de,duplication,and,could,potentially,return,a,handle,that,is,supposed,to,replace,the,one,from,the,registration,request,param,state,the,shared,state,for,which,we,register,a,reference,return,the,result,of,this,registration,request,consisting,of,the,state,handle,that,is,registered,under,the,key,by,the,end,of,the,operation,and,its,current,reference,count;public,result,register,reference,shared,state,registry,key,registration,key,stream,state,handle,state,preconditions,check,not,null,state,stream,state,handle,scheduled,state,deletion,null,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,preconditions,check,state,open,attempt,to,register,state,to,closed,shared,state,registry,entry,registered,states,get,registration,key,if,entry,null,preconditions,check,state,is,placeholder,state,attempt,to,reference,unknown,state,registration,key,entry,new,shared,state,registry,shared,state,entry,state,registered,states,put,registration,key,entry,else,if,objects,equals,state,entry,state,handle,scheduled,state,deletion,state,log,trace,identified,duplicate,state,registration,under,key,new,state,was,determined,to,be,an,unnecessary,copy,of,existing,state,and,will,be,dropped,registration,key,state,entry,state,handle,entry,increase,reference,count,schedule,async,delete,scheduled,state,deletion,log,trace,registered,shared,state,under,key,entry,registration,key,return,new,result,entry
SharedStateRegistry -> public void unregisterAll(Iterable<? extends CompositeStateHandle> stateHandles);1492867556;Unregister all the shared states referenced by the given.__@param stateHandles The shared states to unregister.;public void unregisterAll(Iterable<? extends CompositeStateHandle> stateHandles) {_		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.unregisterSharedStates(this)__			}_		}_	};unregister,all,the,shared,states,referenced,by,the,given,param,state,handles,the,shared,states,to,unregister;public,void,unregister,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,unregister,shared,states,this
SharedStateRegistry -> public void unregisterAll(Iterable<? extends CompositeStateHandle> stateHandles);1494762590;Unregister all the shared states referenced by the given.__@param stateHandles The shared states to unregister.;public void unregisterAll(Iterable<? extends CompositeStateHandle> stateHandles) {_		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.unregisterSharedStates(this)__			}_		}_	};unregister,all,the,shared,states,referenced,by,the,given,param,state,handles,the,shared,states,to,unregister;public,void,unregister,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,unregister,shared,states,this
SharedStateRegistry -> public void unregisterAll(Iterable<? extends CompositeStateHandle> stateHandles);1494762590;Unregister all the shared states referenced by the given.__@param stateHandles The shared states to unregister.;public void unregisterAll(Iterable<? extends CompositeStateHandle> stateHandles) {_		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.unregisterSharedStates(this)__			}_		}_	};unregister,all,the,shared,states,referenced,by,the,given,param,state,handles,the,shared,states,to,unregister;public,void,unregister,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,unregister,shared,states,this
SharedStateRegistry -> public void unregisterAll(Iterable<? extends CompositeStateHandle> stateHandles);1494762590;Unregister all the shared states referenced by the given.__@param stateHandles The shared states to unregister.;public void unregisterAll(Iterable<? extends CompositeStateHandle> stateHandles) {_		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.unregisterSharedStates(this)__			}_		}_	};unregister,all,the,shared,states,referenced,by,the,given,param,state,handles,the,shared,states,to,unregister;public,void,unregister,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,unregister,shared,states,this
SharedStateRegistry -> public Result unregisterReference(SharedStateRegistryKey registrationKey);1495184252;Releases one reference to the given shared state in the registry. This decreases the_reference count by one. Once the count reaches zero, the shared state is deleted.__@param registrationKey the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle, or null if the state handle was deleted through this request.;public Result unregisterReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		final Result result__		final StreamStateHandle scheduledStateDeletion___		synchronized (registeredStates) {_			SharedStateRegistry.SharedStateEntry entry = registeredStates.get(registrationKey)___			Preconditions.checkState(entry != null,_				"Cannot unregister a state that is not registered.")___			entry.decreaseReferenceCount()___			_			if (entry.getReferenceCount() <= 0) {_				registeredStates.remove(registrationKey)__				scheduledStateDeletion = entry.getState()__				result = new Result(null, 0)__			} else {_				scheduledStateDeletion = null__				result = new Result(entry)__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		return result__	};releases,one,reference,to,the,given,shared,state,in,the,registry,this,decreases,the,reference,count,by,one,once,the,count,reaches,zero,the,shared,state,is,deleted,param,registration,key,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle,or,null,if,the,state,handle,was,deleted,through,this,request;public,result,unregister,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,final,result,result,final,stream,state,handle,scheduled,state,deletion,synchronized,registered,states,shared,state,registry,shared,state,entry,entry,registered,states,get,registration,key,preconditions,check,state,entry,null,cannot,unregister,a,state,that,is,not,registered,entry,decrease,reference,count,if,entry,get,reference,count,0,registered,states,remove,registration,key,scheduled,state,deletion,entry,get,state,result,new,result,null,0,else,scheduled,state,deletion,null,result,new,result,entry,schedule,async,delete,scheduled,state,deletion,return,result
SharedStateRegistry -> public Result unregisterReference(SharedStateRegistryKey registrationKey);1495287945;Releases one reference to the given shared state in the registry. This decreases the_reference count by one. Once the count reaches zero, the shared state is deleted.__@param registrationKey the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle, or null if the state handle was deleted through this request.;public Result unregisterReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		final Result result__		final StreamStateHandle scheduledStateDeletion___		synchronized (registeredStates) {_			SharedStateRegistry.SharedStateEntry entry = registeredStates.get(registrationKey)___			Preconditions.checkState(entry != null,_				"Cannot unregister a state that is not registered.")___			entry.decreaseReferenceCount()___			_			if (entry.getReferenceCount() <= 0) {_				registeredStates.remove(registrationKey)__				scheduledStateDeletion = entry.getState()__				result = new Result(null, 0)__			} else {_				scheduledStateDeletion = null__				result = new Result(entry)__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		return result__	};releases,one,reference,to,the,given,shared,state,in,the,registry,this,decreases,the,reference,count,by,one,once,the,count,reaches,zero,the,shared,state,is,deleted,param,registration,key,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle,or,null,if,the,state,handle,was,deleted,through,this,request;public,result,unregister,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,final,result,result,final,stream,state,handle,scheduled,state,deletion,synchronized,registered,states,shared,state,registry,shared,state,entry,entry,registered,states,get,registration,key,preconditions,check,state,entry,null,cannot,unregister,a,state,that,is,not,registered,entry,decrease,reference,count,if,entry,get,reference,count,0,registered,states,remove,registration,key,scheduled,state,deletion,entry,get,state,result,new,result,null,0,else,scheduled,state,deletion,null,result,new,result,entry,schedule,async,delete,scheduled,state,deletion,return,result
SharedStateRegistry -> public Result unregisterReference(SharedStateRegistryKey registrationKey);1495441800;Releases one reference to the given shared state in the registry. This decreases the_reference count by one. Once the count reaches zero, the shared state is deleted.__@param registrationKey the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle, or null if the state handle was deleted through this request.;public Result unregisterReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		final Result result__		final StreamStateHandle scheduledStateDeletion___		synchronized (registeredStates) {_			SharedStateRegistry.SharedStateEntry entry = registeredStates.get(registrationKey)___			Preconditions.checkState(entry != null,_				"Cannot unregister a state that is not registered.")___			entry.decreaseReferenceCount()___			_			if (entry.getReferenceCount() <= 0) {_				registeredStates.remove(registrationKey)__				scheduledStateDeletion = entry.getState()__				result = new Result(null, 0)__			} else {_				scheduledStateDeletion = null__				result = new Result(entry)__			}_		}__		scheduleAsyncDelete(scheduledStateDeletion)__		return result__	};releases,one,reference,to,the,given,shared,state,in,the,registry,this,decreases,the,reference,count,by,one,once,the,count,reaches,zero,the,shared,state,is,deleted,param,registration,key,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle,or,null,if,the,state,handle,was,deleted,through,this,request;public,result,unregister,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,final,result,result,final,stream,state,handle,scheduled,state,deletion,synchronized,registered,states,shared,state,registry,shared,state,entry,entry,registered,states,get,registration,key,preconditions,check,state,entry,null,cannot,unregister,a,state,that,is,not,registered,entry,decrease,reference,count,if,entry,get,reference,count,0,registered,states,remove,registration,key,scheduled,state,deletion,entry,get,state,result,new,result,null,0,else,scheduled,state,deletion,null,result,new,result,entry,schedule,async,delete,scheduled,state,deletion,return,result
SharedStateRegistry -> public Result unregisterReference(SharedStateRegistryKey registrationKey);1500040329;Releases one reference to the given shared state in the registry. This decreases the_reference count by one. Once the count reaches zero, the shared state is deleted.__@param registrationKey the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle, or null if the state handle was deleted through this request.;public Result unregisterReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		final Result result__		final StreamStateHandle scheduledStateDeletion__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {_			entry = registeredStates.get(registrationKey)___			Preconditions.checkState(entry != null,_				"Cannot unregister a state that is not registered.")___			entry.decreaseReferenceCount()___			_			if (entry.getReferenceCount() <= 0) {_				registeredStates.remove(registrationKey)__				scheduledStateDeletion = entry.getStateHandle()__				result = new Result(null, 0)__			} else {_				scheduledStateDeletion = null__				result = new Result(entry)__			}_		}__		LOG.trace("Unregistered shared state {} under key {}.", entry, registrationKey)__		scheduleAsyncDelete(scheduledStateDeletion)__		return result__	};releases,one,reference,to,the,given,shared,state,in,the,registry,this,decreases,the,reference,count,by,one,once,the,count,reaches,zero,the,shared,state,is,deleted,param,registration,key,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle,or,null,if,the,state,handle,was,deleted,through,this,request;public,result,unregister,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,final,result,result,final,stream,state,handle,scheduled,state,deletion,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,entry,registered,states,get,registration,key,preconditions,check,state,entry,null,cannot,unregister,a,state,that,is,not,registered,entry,decrease,reference,count,if,entry,get,reference,count,0,registered,states,remove,registration,key,scheduled,state,deletion,entry,get,state,handle,result,new,result,null,0,else,scheduled,state,deletion,null,result,new,result,entry,log,trace,unregistered,shared,state,under,key,entry,registration,key,schedule,async,delete,scheduled,state,deletion,return,result
SharedStateRegistry -> public Result unregisterReference(SharedStateRegistryKey registrationKey);1502801814;Releases one reference to the given shared state in the registry. This decreases the_reference count by one. Once the count reaches zero, the shared state is deleted.__@param registrationKey the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle, or null if the state handle was deleted through this request. Returns null if the registry_was previously closed.;public Result unregisterReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		final Result result__		final StreamStateHandle scheduledStateDeletion__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {__			entry = registeredStates.get(registrationKey)___			Preconditions.checkState(entry != null,_				"Cannot unregister a state that is not registered.")___			entry.decreaseReferenceCount()___			_			if (entry.getReferenceCount() <= 0) {_				registeredStates.remove(registrationKey)__				scheduledStateDeletion = entry.getStateHandle()__				result = new Result(null, 0)__			} else {_				scheduledStateDeletion = null__				result = new Result(entry)__			}_		}__		LOG.trace("Unregistered shared state {} under key {}.", entry, registrationKey)__		scheduleAsyncDelete(scheduledStateDeletion)__		return result__	};releases,one,reference,to,the,given,shared,state,in,the,registry,this,decreases,the,reference,count,by,one,once,the,count,reaches,zero,the,shared,state,is,deleted,param,registration,key,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle,or,null,if,the,state,handle,was,deleted,through,this,request,returns,null,if,the,registry,was,previously,closed;public,result,unregister,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,final,result,result,final,stream,state,handle,scheduled,state,deletion,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,entry,registered,states,get,registration,key,preconditions,check,state,entry,null,cannot,unregister,a,state,that,is,not,registered,entry,decrease,reference,count,if,entry,get,reference,count,0,registered,states,remove,registration,key,scheduled,state,deletion,entry,get,state,handle,result,new,result,null,0,else,scheduled,state,deletion,null,result,new,result,entry,log,trace,unregistered,shared,state,under,key,entry,registration,key,schedule,async,delete,scheduled,state,deletion,return,result
SharedStateRegistry -> public Result unregisterReference(SharedStateRegistryKey registrationKey);1509118643;Releases one reference to the given shared state in the registry. This decreases the_reference count by one. Once the count reaches zero, the shared state is deleted.__@param registrationKey the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle, or null if the state handle was deleted through this request. Returns null if the registry_was previously closed.;public Result unregisterReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		final Result result__		final StreamStateHandle scheduledStateDeletion__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {__			entry = registeredStates.get(registrationKey)___			Preconditions.checkState(entry != null,_				"Cannot unregister a state that is not registered.")___			entry.decreaseReferenceCount()___			_			if (entry.getReferenceCount() <= 0) {_				registeredStates.remove(registrationKey)__				scheduledStateDeletion = entry.getStateHandle()__				result = new Result(null, 0)__			} else {_				scheduledStateDeletion = null__				result = new Result(entry)__			}_		}__		LOG.trace("Unregistered shared state {} under key {}.", entry, registrationKey)__		scheduleAsyncDelete(scheduledStateDeletion)__		return result__	};releases,one,reference,to,the,given,shared,state,in,the,registry,this,decreases,the,reference,count,by,one,once,the,count,reaches,zero,the,shared,state,is,deleted,param,registration,key,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle,or,null,if,the,state,handle,was,deleted,through,this,request,returns,null,if,the,registry,was,previously,closed;public,result,unregister,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,final,result,result,final,stream,state,handle,scheduled,state,deletion,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,entry,registered,states,get,registration,key,preconditions,check,state,entry,null,cannot,unregister,a,state,that,is,not,registered,entry,decrease,reference,count,if,entry,get,reference,count,0,registered,states,remove,registration,key,scheduled,state,deletion,entry,get,state,handle,result,new,result,null,0,else,scheduled,state,deletion,null,result,new,result,entry,log,trace,unregistered,shared,state,under,key,entry,registration,key,schedule,async,delete,scheduled,state,deletion,return,result
SharedStateRegistry -> public Result unregisterReference(SharedStateRegistryKey registrationKey);1515177485;Releases one reference to the given shared state in the registry. This decreases the_reference count by one. Once the count reaches zero, the shared state is deleted.__@param registrationKey the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle, or null if the state handle was deleted through this request. Returns null if the registry_was previously closed.;public Result unregisterReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		final Result result__		final StreamStateHandle scheduledStateDeletion__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {__			entry = registeredStates.get(registrationKey)___			Preconditions.checkState(entry != null,_				"Cannot unregister a state that is not registered.")___			entry.decreaseReferenceCount()___			_			if (entry.getReferenceCount() <= 0) {_				registeredStates.remove(registrationKey)__				scheduledStateDeletion = entry.getStateHandle()__				result = new Result(null, 0)__			} else {_				scheduledStateDeletion = null__				result = new Result(entry)__			}_		}__		LOG.trace("Unregistered shared state {} under key {}.", entry, registrationKey)__		scheduleAsyncDelete(scheduledStateDeletion)__		return result__	};releases,one,reference,to,the,given,shared,state,in,the,registry,this,decreases,the,reference,count,by,one,once,the,count,reaches,zero,the,shared,state,is,deleted,param,registration,key,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle,or,null,if,the,state,handle,was,deleted,through,this,request,returns,null,if,the,registry,was,previously,closed;public,result,unregister,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,final,result,result,final,stream,state,handle,scheduled,state,deletion,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,entry,registered,states,get,registration,key,preconditions,check,state,entry,null,cannot,unregister,a,state,that,is,not,registered,entry,decrease,reference,count,if,entry,get,reference,count,0,registered,states,remove,registration,key,scheduled,state,deletion,entry,get,state,handle,result,new,result,null,0,else,scheduled,state,deletion,null,result,new,result,entry,log,trace,unregistered,shared,state,under,key,entry,registration,key,schedule,async,delete,scheduled,state,deletion,return,result
SharedStateRegistry -> public Result unregisterReference(SharedStateRegistryKey registrationKey);1515507454;Releases one reference to the given shared state in the registry. This decreases the_reference count by one. Once the count reaches zero, the shared state is deleted.__@param registrationKey the shared state for which we release a reference._@return the result of the request, consisting of the reference count after this operation_and the state handle, or null if the state handle was deleted through this request. Returns null if the registry_was previously closed.;public Result unregisterReference(SharedStateRegistryKey registrationKey) {__		Preconditions.checkNotNull(registrationKey)___		final Result result__		final StreamStateHandle scheduledStateDeletion__		SharedStateRegistry.SharedStateEntry entry___		synchronized (registeredStates) {__			entry = registeredStates.get(registrationKey)___			Preconditions.checkState(entry != null,_				"Cannot unregister a state that is not registered.")___			entry.decreaseReferenceCount()___			_			if (entry.getReferenceCount() <= 0) {_				registeredStates.remove(registrationKey)__				scheduledStateDeletion = entry.getStateHandle()__				result = new Result(null, 0)__			} else {_				scheduledStateDeletion = null__				result = new Result(entry)__			}_		}__		LOG.trace("Unregistered shared state {} under key {}.", entry, registrationKey)__		scheduleAsyncDelete(scheduledStateDeletion)__		return result__	};releases,one,reference,to,the,given,shared,state,in,the,registry,this,decreases,the,reference,count,by,one,once,the,count,reaches,zero,the,shared,state,is,deleted,param,registration,key,the,shared,state,for,which,we,release,a,reference,return,the,result,of,the,request,consisting,of,the,reference,count,after,this,operation,and,the,state,handle,or,null,if,the,state,handle,was,deleted,through,this,request,returns,null,if,the,registry,was,previously,closed;public,result,unregister,reference,shared,state,registry,key,registration,key,preconditions,check,not,null,registration,key,final,result,result,final,stream,state,handle,scheduled,state,deletion,shared,state,registry,shared,state,entry,entry,synchronized,registered,states,entry,registered,states,get,registration,key,preconditions,check,state,entry,null,cannot,unregister,a,state,that,is,not,registered,entry,decrease,reference,count,if,entry,get,reference,count,0,registered,states,remove,registration,key,scheduled,state,deletion,entry,get,state,handle,result,new,result,null,0,else,scheduled,state,deletion,null,result,new,result,entry,log,trace,unregistered,shared,state,under,key,entry,registration,key,schedule,async,delete,scheduled,state,deletion,return,result
SharedStateRegistry -> public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles);1492867556;Register given shared states in the registry.__@param stateHandles The shared states to register.;public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles) {_		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.registerSharedStates(this)__			}_		}_	};register,given,shared,states,in,the,registry,param,state,handles,the,shared,states,to,register;public,void,register,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,register,shared,states,this
SharedStateRegistry -> public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles);1494762590;Register given shared states in the registry.__@param stateHandles The shared states to register.;public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles) {_		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.registerSharedStates(this)__			}_		}_	};register,given,shared,states,in,the,registry,param,state,handles,the,shared,states,to,register;public,void,register,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,register,shared,states,this
SharedStateRegistry -> public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles);1494762590;Register given shared states in the registry.__@param stateHandles The shared states to register.;public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles) {_		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.registerSharedStates(this)__			}_		}_	};register,given,shared,states,in,the,registry,param,state,handles,the,shared,states,to,register;public,void,register,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,register,shared,states,this
SharedStateRegistry -> public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles);1494762590;Register given shared states in the registry.__@param stateHandles The shared states to register.;public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles) {_		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.registerSharedStates(this)__			}_		}_	};register,given,shared,states,in,the,registry,param,state,handles,the,shared,states,to,register;public,void,register,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,register,shared,states,this
SharedStateRegistry -> public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles);1495184252;Register given shared states in the registry.__@param stateHandles The shared states to register.;public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles) {_		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.registerSharedStates(this)__			}_		}_	};register,given,shared,states,in,the,registry,param,state,handles,the,shared,states,to,register;public,void,register,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,register,shared,states,this
SharedStateRegistry -> public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles);1495287945;Register given shared states in the registry.__@param stateHandles The shared states to register.;public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles) {_		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.registerSharedStates(this)__			}_		}_	};register,given,shared,states,in,the,registry,param,state,handles,the,shared,states,to,register;public,void,register,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,register,shared,states,this
SharedStateRegistry -> public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles);1495441800;Register given shared states in the registry.__@param stateHandles The shared states to register.;public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles) {_		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.registerSharedStates(this)__			}_		}_	};register,given,shared,states,in,the,registry,param,state,handles,the,shared,states,to,register;public,void,register,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,register,shared,states,this
SharedStateRegistry -> public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles);1500040329;Register given shared states in the registry.__@param stateHandles The shared states to register.;public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles) {__		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.registerSharedStates(this)__			}_		}_	};register,given,shared,states,in,the,registry,param,state,handles,the,shared,states,to,register;public,void,register,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,register,shared,states,this
SharedStateRegistry -> public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles);1502801814;Register given shared states in the registry.__@param stateHandles The shared states to register.;public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles) {__		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.registerSharedStates(this)__			}_		}_	};register,given,shared,states,in,the,registry,param,state,handles,the,shared,states,to,register;public,void,register,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,register,shared,states,this
SharedStateRegistry -> public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles);1509118643;Register given shared states in the registry.__@param stateHandles The shared states to register.;public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles) {__		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.registerSharedStates(this)__			}_		}_	};register,given,shared,states,in,the,registry,param,state,handles,the,shared,states,to,register;public,void,register,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,register,shared,states,this
SharedStateRegistry -> public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles);1515177485;Register given shared states in the registry.__@param stateHandles The shared states to register.;public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles) {__		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.registerSharedStates(this)__			}_		}_	};register,given,shared,states,in,the,registry,param,state,handles,the,shared,states,to,register;public,void,register,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,register,shared,states,this
SharedStateRegistry -> public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles);1515507454;Register given shared states in the registry.__@param stateHandles The shared states to register.;public void registerAll(Iterable<? extends CompositeStateHandle> stateHandles) {__		if (stateHandles == null) {_			return__		}__		synchronized (registeredStates) {_			for (CompositeStateHandle stateHandle : stateHandles) {_				stateHandle.registerSharedStates(this)__			}_		}_	};register,given,shared,states,in,the,registry,param,state,handles,the,shared,states,to,register;public,void,register,all,iterable,extends,composite,state,handle,state,handles,if,state,handles,null,return,synchronized,registered,states,for,composite,state,handle,state,handle,state,handles,state,handle,register,shared,states,this
