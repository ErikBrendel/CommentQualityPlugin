# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMergeOuterJoinIterator -> @Override 	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) throws Exception;1438725087;Calls the <code>JoinFunction#join()</code> method for all two key-value pairs that share the same key and come_from different inputs. Furthermore, depending on the outer join type (LEFT, RIGHT, FULL), all key-value pairs where no_matching partner from the other input exists are joined with null._The output of the <code>join()</code> method is forwarded.__@throws Exception Forwards all exceptions from the user code and the I/O system._@see org.apache.flink.runtime.operators.util.JoinTaskIterator#callWithNextKey(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.util.Collector);@Override_	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) throws Exception {_		if (!initialized) {_			_			it1Empty = !this.iterator1.nextKey()__			it2Empty = !this.iterator2.nextKey()__			initialized = true__		}__		if (it1Empty && it2Empty) {_			return false__		} else if (it2Empty) {_			if (outerJoinType == OuterJoinType.LEFT || outerJoinType == OuterJoinType.FULL) {_				joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__				it1Empty = !iterator1.nextKey()__				return true__			} else {_				_				while (iterator1.nextKey()) __				it1Empty = true__				return false__			}_		} else if (it1Empty) {_			if (outerJoinType == OuterJoinType.RIGHT || outerJoinType == OuterJoinType.FULL) {_				joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__				it2Empty = !iterator2.nextKey()__				return true__			} else {_				_				while (iterator2.nextKey()) __				it2Empty = true__				return false__			}_		} else {_			final TypePairComparator<T1, T2> comparator = super.pairComparator__			comparator.setReference(this.iterator1.getCurrent())__			T2 current2 = this.iterator2.getCurrent()___			_			while (true) {_				_				final int comp = comparator.compareToReference(current2)___				if (comp == 0) {_					break__				}__				if (comp < 0) {_					_					if (outerJoinType == OuterJoinType.RIGHT || outerJoinType == OuterJoinType.FULL) {_						_						joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__						it2Empty = !iterator2.nextKey()__						return true__					} else {_						_						if (!this.iterator2.nextKey()) {_							_							joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__							it1Empty = !iterator1.nextKey()__							it2Empty = true__							return true__						}_						current2 = this.iterator2.getCurrent()__					}_				} else {_					_					if (outerJoinType == OuterJoinType.LEFT || outerJoinType == OuterJoinType.FULL) {_						_						joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__						it1Empty = !iterator1.nextKey()__						return true__					} else {_						_						if (!this.iterator1.nextKey()) {_							_							joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__							it1Empty = true__							it2Empty = !iterator2.nextKey()__							return true__						}_						comparator.setReference(this.iterator1.getCurrent())__					}_				}_			}__			_			_			final Iterator<T1> values1 = this.iterator1.getValues()__			final Iterator<T2> values2 = this.iterator2.getValues()___			crossMatchingGroup(values1, values2, joinFunction, collector)__			it1Empty = !iterator1.nextKey()__			it2Empty = !iterator2.nextKey()__			return true__		}_	};calls,the,code,join,function,join,code,method,for,all,two,key,value,pairs,that,share,the,same,key,and,come,from,different,inputs,furthermore,depending,on,the,outer,join,type,left,right,full,all,key,value,pairs,where,no,matching,partner,from,the,other,input,exists,are,joined,with,null,the,output,of,the,code,join,code,method,is,forwarded,throws,exception,forwards,all,exceptions,from,the,user,code,and,the,i,o,system,see,org,apache,flink,runtime,operators,util,join,task,iterator,call,with,next,key,org,apache,flink,api,common,functions,flat,join,function,org,apache,flink,util,collector;override,public,boolean,call,with,next,key,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception,if,initialized,it1empty,this,iterator1,next,key,it2empty,this,iterator2,next,key,initialized,true,if,it1empty,it2empty,return,false,else,if,it2empty,if,outer,join,type,outer,join,type,left,outer,join,type,outer,join,type,full,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,return,true,else,while,iterator1,next,key,it1empty,true,return,false,else,if,it1empty,if,outer,join,type,outer,join,type,right,outer,join,type,outer,join,type,full,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it2empty,iterator2,next,key,return,true,else,while,iterator2,next,key,it2empty,true,return,false,else,final,type,pair,comparator,t1,t2,comparator,super,pair,comparator,comparator,set,reference,this,iterator1,get,current,t2,current2,this,iterator2,get,current,while,true,final,int,comp,comparator,compare,to,reference,current2,if,comp,0,break,if,comp,0,if,outer,join,type,outer,join,type,right,outer,join,type,outer,join,type,full,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it2empty,iterator2,next,key,return,true,else,if,this,iterator2,next,key,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,it2empty,true,return,true,current2,this,iterator2,get,current,else,if,outer,join,type,outer,join,type,left,outer,join,type,outer,join,type,full,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,return,true,else,if,this,iterator1,next,key,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it1empty,true,it2empty,iterator2,next,key,return,true,comparator,set,reference,this,iterator1,get,current,final,iterator,t1,values1,this,iterator1,get,values,final,iterator,t2,values2,this,iterator2,get,values,cross,matching,group,values1,values2,join,function,collector,it1empty,iterator1,next,key,it2empty,iterator2,next,key,return,true
AbstractMergeOuterJoinIterator -> @Override 	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) throws Exception;1441724271;Calls the <code>JoinFunction#join()</code> method for all two key-value pairs that share the same key and come_from different inputs. Furthermore, depending on the outer join type (LEFT, RIGHT, FULL), all key-value pairs where no_matching partner from the other input exists are joined with null._The output of the <code>join()</code> method is forwarded.__@throws Exception Forwards all exceptions from the user code and the I/O system._@see org.apache.flink.runtime.operators.util.JoinTaskIterator#callWithNextKey(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.util.Collector);@Override_	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) throws Exception {_		if (!initialized) {_			_			it1Empty = !this.iterator1.nextKey()__			it2Empty = !this.iterator2.nextKey()__			initialized = true__		}__		if (it1Empty && it2Empty) {_			return false__		} else if (it2Empty) {_			if (outerJoinType == OuterJoinType.LEFT || outerJoinType == OuterJoinType.FULL) {_				joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__				it1Empty = !iterator1.nextKey()__				return true__			} else {_				_				while (iterator1.nextKey()) __				it1Empty = true__				return false__			}_		} else if (it1Empty) {_			if (outerJoinType == OuterJoinType.RIGHT || outerJoinType == OuterJoinType.FULL) {_				joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__				it2Empty = !iterator2.nextKey()__				return true__			} else {_				_				while (iterator2.nextKey()) __				it2Empty = true__				return false__			}_		} else {_			final TypePairComparator<T1, T2> comparator = super.pairComparator__			comparator.setReference(this.iterator1.getCurrent())__			T2 current2 = this.iterator2.getCurrent()___			_			while (true) {_				_				final int comp = comparator.compareToReference(current2)___				if (comp == 0) {_					break__				}__				if (comp < 0) {_					_					if (outerJoinType == OuterJoinType.RIGHT || outerJoinType == OuterJoinType.FULL) {_						_						joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__						it2Empty = !iterator2.nextKey()__						return true__					} else {_						_						if (!this.iterator2.nextKey()) {_							_							joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__							it1Empty = !iterator1.nextKey()__							it2Empty = true__							return true__						}_						current2 = this.iterator2.getCurrent()__					}_				} else {_					_					if (outerJoinType == OuterJoinType.LEFT || outerJoinType == OuterJoinType.FULL) {_						_						joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__						it1Empty = !iterator1.nextKey()__						return true__					} else {_						_						if (!this.iterator1.nextKey()) {_							_							joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__							it1Empty = true__							it2Empty = !iterator2.nextKey()__							return true__						}_						comparator.setReference(this.iterator1.getCurrent())__					}_				}_			}__			_			_			final Iterator<T1> values1 = this.iterator1.getValues()__			final Iterator<T2> values2 = this.iterator2.getValues()___			crossMatchingGroup(values1, values2, joinFunction, collector)__			it1Empty = !iterator1.nextKey()__			it2Empty = !iterator2.nextKey()__			return true__		}_	};calls,the,code,join,function,join,code,method,for,all,two,key,value,pairs,that,share,the,same,key,and,come,from,different,inputs,furthermore,depending,on,the,outer,join,type,left,right,full,all,key,value,pairs,where,no,matching,partner,from,the,other,input,exists,are,joined,with,null,the,output,of,the,code,join,code,method,is,forwarded,throws,exception,forwards,all,exceptions,from,the,user,code,and,the,i,o,system,see,org,apache,flink,runtime,operators,util,join,task,iterator,call,with,next,key,org,apache,flink,api,common,functions,flat,join,function,org,apache,flink,util,collector;override,public,boolean,call,with,next,key,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception,if,initialized,it1empty,this,iterator1,next,key,it2empty,this,iterator2,next,key,initialized,true,if,it1empty,it2empty,return,false,else,if,it2empty,if,outer,join,type,outer,join,type,left,outer,join,type,outer,join,type,full,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,return,true,else,while,iterator1,next,key,it1empty,true,return,false,else,if,it1empty,if,outer,join,type,outer,join,type,right,outer,join,type,outer,join,type,full,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it2empty,iterator2,next,key,return,true,else,while,iterator2,next,key,it2empty,true,return,false,else,final,type,pair,comparator,t1,t2,comparator,super,pair,comparator,comparator,set,reference,this,iterator1,get,current,t2,current2,this,iterator2,get,current,while,true,final,int,comp,comparator,compare,to,reference,current2,if,comp,0,break,if,comp,0,if,outer,join,type,outer,join,type,right,outer,join,type,outer,join,type,full,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it2empty,iterator2,next,key,return,true,else,if,this,iterator2,next,key,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,it2empty,true,return,true,current2,this,iterator2,get,current,else,if,outer,join,type,outer,join,type,left,outer,join,type,outer,join,type,full,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,return,true,else,if,this,iterator1,next,key,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it1empty,true,it2empty,iterator2,next,key,return,true,comparator,set,reference,this,iterator1,get,current,final,iterator,t1,values1,this,iterator1,get,values,final,iterator,t2,values2,this,iterator2,get,values,cross,matching,group,values1,values2,join,function,collector,it1empty,iterator1,next,key,it2empty,iterator2,next,key,return,true
AbstractMergeOuterJoinIterator -> @Override 	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) throws Exception;1441738685;Calls the <code>JoinFunction#join()</code> method for all two key-value pairs that share the same key and come_from different inputs. Furthermore, depending on the outer join type (LEFT, RIGHT, FULL), all key-value pairs where no_matching partner from the other input exists are joined with null._The output of the <code>join()</code> method is forwarded.__@throws Exception Forwards all exceptions from the user code and the I/O system._@see org.apache.flink.runtime.operators.util.JoinTaskIterator#callWithNextKey(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.util.Collector);@Override_	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) throws Exception {_		if (!initialized) {_			_			it1Empty = !this.iterator1.nextKey()__			it2Empty = !this.iterator2.nextKey()__			initialized = true__		}__		if (it1Empty && it2Empty) {_			return false__		} else if (it2Empty) {_			if (outerJoinType == OuterJoinType.LEFT || outerJoinType == OuterJoinType.FULL) {_				joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__				it1Empty = !iterator1.nextKey()__				return true__			} else {_				_				while (iterator1.nextKey()) __				it1Empty = true__				return false__			}_		} else if (it1Empty) {_			if (outerJoinType == OuterJoinType.RIGHT || outerJoinType == OuterJoinType.FULL) {_				joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__				it2Empty = !iterator2.nextKey()__				return true__			} else {_				_				while (iterator2.nextKey()) __				it2Empty = true__				return false__			}_		} else {_			final TypePairComparator<T1, T2> comparator = super.pairComparator__			comparator.setReference(this.iterator1.getCurrent())__			T2 current2 = this.iterator2.getCurrent()___			_			while (true) {_				_				final int comp = comparator.compareToReference(current2)___				if (comp == 0) {_					break__				}__				if (comp < 0) {_					_					if (outerJoinType == OuterJoinType.RIGHT || outerJoinType == OuterJoinType.FULL) {_						_						joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__						it2Empty = !iterator2.nextKey()__						return true__					} else {_						_						if (!this.iterator2.nextKey()) {_							_							joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__							it1Empty = !iterator1.nextKey()__							it2Empty = true__							return true__						}_						current2 = this.iterator2.getCurrent()__					}_				} else {_					_					if (outerJoinType == OuterJoinType.LEFT || outerJoinType == OuterJoinType.FULL) {_						_						joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__						it1Empty = !iterator1.nextKey()__						return true__					} else {_						_						if (!this.iterator1.nextKey()) {_							_							joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__							it1Empty = true__							it2Empty = !iterator2.nextKey()__							return true__						}_						comparator.setReference(this.iterator1.getCurrent())__					}_				}_			}__			_			_			final Iterator<T1> values1 = this.iterator1.getValues()__			final Iterator<T2> values2 = this.iterator2.getValues()___			crossMatchingGroup(values1, values2, joinFunction, collector)__			it1Empty = !iterator1.nextKey()__			it2Empty = !iterator2.nextKey()__			return true__		}_	};calls,the,code,join,function,join,code,method,for,all,two,key,value,pairs,that,share,the,same,key,and,come,from,different,inputs,furthermore,depending,on,the,outer,join,type,left,right,full,all,key,value,pairs,where,no,matching,partner,from,the,other,input,exists,are,joined,with,null,the,output,of,the,code,join,code,method,is,forwarded,throws,exception,forwards,all,exceptions,from,the,user,code,and,the,i,o,system,see,org,apache,flink,runtime,operators,util,join,task,iterator,call,with,next,key,org,apache,flink,api,common,functions,flat,join,function,org,apache,flink,util,collector;override,public,boolean,call,with,next,key,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception,if,initialized,it1empty,this,iterator1,next,key,it2empty,this,iterator2,next,key,initialized,true,if,it1empty,it2empty,return,false,else,if,it2empty,if,outer,join,type,outer,join,type,left,outer,join,type,outer,join,type,full,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,return,true,else,while,iterator1,next,key,it1empty,true,return,false,else,if,it1empty,if,outer,join,type,outer,join,type,right,outer,join,type,outer,join,type,full,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it2empty,iterator2,next,key,return,true,else,while,iterator2,next,key,it2empty,true,return,false,else,final,type,pair,comparator,t1,t2,comparator,super,pair,comparator,comparator,set,reference,this,iterator1,get,current,t2,current2,this,iterator2,get,current,while,true,final,int,comp,comparator,compare,to,reference,current2,if,comp,0,break,if,comp,0,if,outer,join,type,outer,join,type,right,outer,join,type,outer,join,type,full,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it2empty,iterator2,next,key,return,true,else,if,this,iterator2,next,key,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,it2empty,true,return,true,current2,this,iterator2,get,current,else,if,outer,join,type,outer,join,type,left,outer,join,type,outer,join,type,full,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,return,true,else,if,this,iterator1,next,key,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it1empty,true,it2empty,iterator2,next,key,return,true,comparator,set,reference,this,iterator1,get,current,final,iterator,t1,values1,this,iterator1,get,values,final,iterator,t2,values2,this,iterator2,get,values,cross,matching,group,values1,values2,join,function,collector,it1empty,iterator1,next,key,it2empty,iterator2,next,key,return,true
AbstractMergeOuterJoinIterator -> @Override 	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) throws Exception;1444400361;Calls the <code>JoinFunction#join()</code> method for all two key-value pairs that share the same key and come_from different inputs. Furthermore, depending on the outer join type (LEFT, RIGHT, FULL), all key-value pairs where no_matching partner from the other input exists are joined with null._The output of the <code>join()</code> method is forwarded.__@throws Exception Forwards all exceptions from the user code and the I/O system._@see org.apache.flink.runtime.operators.util.JoinTaskIterator#callWithNextKey(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.util.Collector);@Override_	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) throws Exception {_		if (!initialized) {_			_			it1Empty = !this.iterator1.nextKey()__			it2Empty = !this.iterator2.nextKey()__			initialized = true__		}__		if (it1Empty && it2Empty) {_			return false__		} else if (it2Empty) {_			if (outerJoinType == OuterJoinType.LEFT || outerJoinType == OuterJoinType.FULL) {_				joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__				it1Empty = !iterator1.nextKey()__				return true__			} else {_				_				while (iterator1.nextKey()) __				it1Empty = true__				return false__			}_		} else if (it1Empty) {_			if (outerJoinType == OuterJoinType.RIGHT || outerJoinType == OuterJoinType.FULL) {_				joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__				it2Empty = !iterator2.nextKey()__				return true__			} else {_				_				while (iterator2.nextKey()) __				it2Empty = true__				return false__			}_		} else {_			final TypePairComparator<T1, T2> comparator = super.pairComparator__			comparator.setReference(this.iterator1.getCurrent())__			T2 current2 = this.iterator2.getCurrent()___			_			while (true) {_				_				final int comp = comparator.compareToReference(current2)___				if (comp == 0) {_					break__				}__				if (comp < 0) {_					_					if (outerJoinType == OuterJoinType.RIGHT || outerJoinType == OuterJoinType.FULL) {_						_						joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__						it2Empty = !iterator2.nextKey()__						return true__					} else {_						_						if (!this.iterator2.nextKey()) {_							_							joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__							it1Empty = !iterator1.nextKey()__							it2Empty = true__							return true__						}_						current2 = this.iterator2.getCurrent()__					}_				} else {_					_					if (outerJoinType == OuterJoinType.LEFT || outerJoinType == OuterJoinType.FULL) {_						_						joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__						it1Empty = !iterator1.nextKey()__						return true__					} else {_						_						if (!this.iterator1.nextKey()) {_							_							joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__							it1Empty = true__							it2Empty = !iterator2.nextKey()__							return true__						}_						comparator.setReference(this.iterator1.getCurrent())__					}_				}_			}__			_			_			final Iterator<T1> values1 = this.iterator1.getValues()__			final Iterator<T2> values2 = this.iterator2.getValues()___			crossMatchingGroup(values1, values2, joinFunction, collector)__			it1Empty = !iterator1.nextKey()__			it2Empty = !iterator2.nextKey()__			return true__		}_	};calls,the,code,join,function,join,code,method,for,all,two,key,value,pairs,that,share,the,same,key,and,come,from,different,inputs,furthermore,depending,on,the,outer,join,type,left,right,full,all,key,value,pairs,where,no,matching,partner,from,the,other,input,exists,are,joined,with,null,the,output,of,the,code,join,code,method,is,forwarded,throws,exception,forwards,all,exceptions,from,the,user,code,and,the,i,o,system,see,org,apache,flink,runtime,operators,util,join,task,iterator,call,with,next,key,org,apache,flink,api,common,functions,flat,join,function,org,apache,flink,util,collector;override,public,boolean,call,with,next,key,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception,if,initialized,it1empty,this,iterator1,next,key,it2empty,this,iterator2,next,key,initialized,true,if,it1empty,it2empty,return,false,else,if,it2empty,if,outer,join,type,outer,join,type,left,outer,join,type,outer,join,type,full,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,return,true,else,while,iterator1,next,key,it1empty,true,return,false,else,if,it1empty,if,outer,join,type,outer,join,type,right,outer,join,type,outer,join,type,full,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it2empty,iterator2,next,key,return,true,else,while,iterator2,next,key,it2empty,true,return,false,else,final,type,pair,comparator,t1,t2,comparator,super,pair,comparator,comparator,set,reference,this,iterator1,get,current,t2,current2,this,iterator2,get,current,while,true,final,int,comp,comparator,compare,to,reference,current2,if,comp,0,break,if,comp,0,if,outer,join,type,outer,join,type,right,outer,join,type,outer,join,type,full,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it2empty,iterator2,next,key,return,true,else,if,this,iterator2,next,key,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,it2empty,true,return,true,current2,this,iterator2,get,current,else,if,outer,join,type,outer,join,type,left,outer,join,type,outer,join,type,full,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,return,true,else,if,this,iterator1,next,key,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it1empty,true,it2empty,iterator2,next,key,return,true,comparator,set,reference,this,iterator1,get,current,final,iterator,t1,values1,this,iterator1,get,values,final,iterator,t2,values2,this,iterator2,get,values,cross,matching,group,values1,values2,join,function,collector,it1empty,iterator1,next,key,it2empty,iterator2,next,key,return,true
AbstractMergeOuterJoinIterator -> @Override 	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) throws Exception;1499939555;Calls the <code>JoinFunction#join()</code> method for all two key-value pairs that share the same key and come_from different inputs. Furthermore, depending on the outer join type (LEFT, RIGHT, FULL), all key-value pairs where no_matching partner from the other input exists are joined with null._The output of the <code>join()</code> method is forwarded.__@throws Exception Forwards all exceptions from the user code and the I/O system._@see org.apache.flink.runtime.operators.util.JoinTaskIterator#callWithNextKey(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.util.Collector);@Override_	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) throws Exception {_		if (!initialized) {_			_			it1Empty = !this.iterator1.nextKey()__			it2Empty = !this.iterator2.nextKey()__			initialized = true__		}__		if (it1Empty && it2Empty) {_			return false__		} else if (it2Empty) {_			if (outerJoinType == OuterJoinType.LEFT || outerJoinType == OuterJoinType.FULL) {_				joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__				it1Empty = !iterator1.nextKey()__				return true__			} else {_				_				while (iterator1.nextKey()) {_				}_				it1Empty = true__				return false__			}_		} else if (it1Empty) {_			if (outerJoinType == OuterJoinType.RIGHT || outerJoinType == OuterJoinType.FULL) {_				joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__				it2Empty = !iterator2.nextKey()__				return true__			} else {_				_				while (iterator2.nextKey()) {_				}_				it2Empty = true__				return false__			}_		} else {_			final TypePairComparator<T1, T2> comparator = super.pairComparator__			comparator.setReference(this.iterator1.getCurrent())__			T2 current2 = this.iterator2.getCurrent()___			_			while (true) {_				_				final int comp = comparator.compareToReference(current2)___				if (comp == 0) {_					break__				}__				if (comp < 0) {_					_					if (outerJoinType == OuterJoinType.RIGHT || outerJoinType == OuterJoinType.FULL) {_						_						joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__						it2Empty = !iterator2.nextKey()__						return true__					} else {_						_						if (!this.iterator2.nextKey()) {_							_							joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__							it1Empty = !iterator1.nextKey()__							it2Empty = true__							return true__						}_						current2 = this.iterator2.getCurrent()__					}_				} else {_					_					if (outerJoinType == OuterJoinType.LEFT || outerJoinType == OuterJoinType.FULL) {_						_						joinLeftKeyValuesWithNull(iterator1.getValues(), joinFunction, collector)__						it1Empty = !iterator1.nextKey()__						return true__					} else {_						_						if (!this.iterator1.nextKey()) {_							_							joinRightKeyValuesWithNull(iterator2.getValues(), joinFunction, collector)__							it1Empty = true__							it2Empty = !iterator2.nextKey()__							return true__						}_						comparator.setReference(this.iterator1.getCurrent())__					}_				}_			}__			_			_			final Iterator<T1> values1 = this.iterator1.getValues()__			final Iterator<T2> values2 = this.iterator2.getValues()___			crossMatchingGroup(values1, values2, joinFunction, collector)__			it1Empty = !iterator1.nextKey()__			it2Empty = !iterator2.nextKey()__			return true__		}_	};calls,the,code,join,function,join,code,method,for,all,two,key,value,pairs,that,share,the,same,key,and,come,from,different,inputs,furthermore,depending,on,the,outer,join,type,left,right,full,all,key,value,pairs,where,no,matching,partner,from,the,other,input,exists,are,joined,with,null,the,output,of,the,code,join,code,method,is,forwarded,throws,exception,forwards,all,exceptions,from,the,user,code,and,the,i,o,system,see,org,apache,flink,runtime,operators,util,join,task,iterator,call,with,next,key,org,apache,flink,api,common,functions,flat,join,function,org,apache,flink,util,collector;override,public,boolean,call,with,next,key,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception,if,initialized,it1empty,this,iterator1,next,key,it2empty,this,iterator2,next,key,initialized,true,if,it1empty,it2empty,return,false,else,if,it2empty,if,outer,join,type,outer,join,type,left,outer,join,type,outer,join,type,full,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,return,true,else,while,iterator1,next,key,it1empty,true,return,false,else,if,it1empty,if,outer,join,type,outer,join,type,right,outer,join,type,outer,join,type,full,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it2empty,iterator2,next,key,return,true,else,while,iterator2,next,key,it2empty,true,return,false,else,final,type,pair,comparator,t1,t2,comparator,super,pair,comparator,comparator,set,reference,this,iterator1,get,current,t2,current2,this,iterator2,get,current,while,true,final,int,comp,comparator,compare,to,reference,current2,if,comp,0,break,if,comp,0,if,outer,join,type,outer,join,type,right,outer,join,type,outer,join,type,full,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it2empty,iterator2,next,key,return,true,else,if,this,iterator2,next,key,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,it2empty,true,return,true,current2,this,iterator2,get,current,else,if,outer,join,type,outer,join,type,left,outer,join,type,outer,join,type,full,join,left,key,values,with,null,iterator1,get,values,join,function,collector,it1empty,iterator1,next,key,return,true,else,if,this,iterator1,next,key,join,right,key,values,with,null,iterator2,get,values,join,function,collector,it1empty,true,it2empty,iterator2,next,key,return,true,comparator,set,reference,this,iterator1,get,current,final,iterator,t1,values1,this,iterator1,get,values,final,iterator,t2,values2,this,iterator2,get,values,cross,matching,group,values1,values2,join,function,collector,it1empty,iterator1,next,key,it2empty,iterator2,next,key,return,true
