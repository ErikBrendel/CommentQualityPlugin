# id;timestamp;commentText;codeText;commentWords;codeWords
RestartIndividualStrategy -> public RestartIndividualStrategy(ExecutionGraph executionGraph);1493831843;Creates a new failover strategy that recovers from failures by restarting all tasks_of the execution graph.__<p>The strategy will use the ExecutionGraph's future executor for callbacks.__@param executionGraph The execution graph to handle.;public RestartIndividualStrategy(ExecutionGraph executionGraph) {_		this(executionGraph, executionGraph.getFutureExecutor())__	};creates,a,new,failover,strategy,that,recovers,from,failures,by,restarting,all,tasks,of,the,execution,graph,p,the,strategy,will,use,the,execution,graph,s,future,executor,for,callbacks,param,execution,graph,the,execution,graph,to,handle;public,restart,individual,strategy,execution,graph,execution,graph,this,execution,graph,execution,graph,get,future,executor
RestartIndividualStrategy -> public RestartIndividualStrategy(ExecutionGraph executionGraph);1494099605;Creates a new failover strategy that recovers from failures by restarting only the failed task_of the execution graph.__<p>The strategy will use the ExecutionGraph's future executor for callbacks.__@param executionGraph The execution graph to handle.;public RestartIndividualStrategy(ExecutionGraph executionGraph) {_		this(executionGraph, executionGraph.getFutureExecutor())__	};creates,a,new,failover,strategy,that,recovers,from,failures,by,restarting,only,the,failed,task,of,the,execution,graph,p,the,strategy,will,use,the,execution,graph,s,future,executor,for,callbacks,param,execution,graph,the,execution,graph,to,handle;public,restart,individual,strategy,execution,graph,execution,graph,this,execution,graph,execution,graph,get,future,executor
RestartIndividualStrategy -> public RestartIndividualStrategy(ExecutionGraph executionGraph);1501622876;Creates a new failover strategy that recovers from failures by restarting only the failed task_of the execution graph.__<p>The strategy will use the ExecutionGraph's future executor for callbacks.__@param executionGraph The execution graph to handle.;public RestartIndividualStrategy(ExecutionGraph executionGraph) {_		this(executionGraph, executionGraph.getFutureExecutor())__	};creates,a,new,failover,strategy,that,recovers,from,failures,by,restarting,only,the,failed,task,of,the,execution,graph,p,the,strategy,will,use,the,execution,graph,s,future,executor,for,callbacks,param,execution,graph,the,execution,graph,to,handle;public,restart,individual,strategy,execution,graph,execution,graph,this,execution,graph,execution,graph,get,future,executor
RestartIndividualStrategy -> public RestartIndividualStrategy(ExecutionGraph executionGraph);1513201070;Creates a new failover strategy that recovers from failures by restarting only the failed task_of the execution graph.__<p>The strategy will use the ExecutionGraph's future executor for callbacks.__@param executionGraph The execution graph to handle.;public RestartIndividualStrategy(ExecutionGraph executionGraph) {_		this(executionGraph, executionGraph.getFutureExecutor())__	};creates,a,new,failover,strategy,that,recovers,from,failures,by,restarting,only,the,failed,task,of,the,execution,graph,p,the,strategy,will,use,the,execution,graph,s,future,executor,for,callbacks,param,execution,graph,the,execution,graph,to,handle;public,restart,individual,strategy,execution,graph,execution,graph,this,execution,graph,execution,graph,get,future,executor
RestartIndividualStrategy -> public RestartIndividualStrategy(ExecutionGraph executionGraph);1549365080;Creates a new failover strategy that recovers from failures by restarting only the failed task_of the execution graph.__@param executionGraph The execution graph to handle.;public RestartIndividualStrategy(ExecutionGraph executionGraph) {_		this.executionGraph = checkNotNull(executionGraph)__		this.numTaskFailures = new SimpleCounter()__	};creates,a,new,failover,strategy,that,recovers,from,failures,by,restarting,only,the,failed,task,of,the,execution,graph,param,execution,graph,the,execution,graph,to,handle;public,restart,individual,strategy,execution,graph,execution,graph,this,execution,graph,check,not,null,execution,graph,this,num,task,failures,new,simple,counter
RestartIndividualStrategy -> public RestartIndividualStrategy(ExecutionGraph executionGraph, Executor callbackExecutor);1493831843;Creates a new failover strategy that recovers from failures by restarting all tasks_of the execution graph.__@param executionGraph The execution graph to handle._@param callbackExecutor The executor that executes restart callbacks;public RestartIndividualStrategy(ExecutionGraph executionGraph, Executor callbackExecutor) {_		this.executionGraph = checkNotNull(executionGraph)__		this.callbackExecutor = checkNotNull(callbackExecutor)___		this.numTaskFailures = new SimpleCounter()__	};creates,a,new,failover,strategy,that,recovers,from,failures,by,restarting,all,tasks,of,the,execution,graph,param,execution,graph,the,execution,graph,to,handle,param,callback,executor,the,executor,that,executes,restart,callbacks;public,restart,individual,strategy,execution,graph,execution,graph,executor,callback,executor,this,execution,graph,check,not,null,execution,graph,this,callback,executor,check,not,null,callback,executor,this,num,task,failures,new,simple,counter
RestartIndividualStrategy -> public RestartIndividualStrategy(ExecutionGraph executionGraph, Executor callbackExecutor);1494099605;Creates a new failover strategy that recovers from failures by restarting only the failed task_of the execution graph.__@param executionGraph The execution graph to handle._@param callbackExecutor The executor that executes restart callbacks;public RestartIndividualStrategy(ExecutionGraph executionGraph, Executor callbackExecutor) {_		this.executionGraph = checkNotNull(executionGraph)__		this.callbackExecutor = checkNotNull(callbackExecutor)___		this.numTaskFailures = new SimpleCounter()__	};creates,a,new,failover,strategy,that,recovers,from,failures,by,restarting,only,the,failed,task,of,the,execution,graph,param,execution,graph,the,execution,graph,to,handle,param,callback,executor,the,executor,that,executes,restart,callbacks;public,restart,individual,strategy,execution,graph,execution,graph,executor,callback,executor,this,execution,graph,check,not,null,execution,graph,this,callback,executor,check,not,null,callback,executor,this,num,task,failures,new,simple,counter
RestartIndividualStrategy -> public RestartIndividualStrategy(ExecutionGraph executionGraph, Executor callbackExecutor);1501622876;Creates a new failover strategy that recovers from failures by restarting only the failed task_of the execution graph.__@param executionGraph The execution graph to handle._@param callbackExecutor The executor that executes restart callbacks;public RestartIndividualStrategy(ExecutionGraph executionGraph, Executor callbackExecutor) {_		this.executionGraph = checkNotNull(executionGraph)__		this.callbackExecutor = checkNotNull(callbackExecutor)___		this.numTaskFailures = new SimpleCounter()__	};creates,a,new,failover,strategy,that,recovers,from,failures,by,restarting,only,the,failed,task,of,the,execution,graph,param,execution,graph,the,execution,graph,to,handle,param,callback,executor,the,executor,that,executes,restart,callbacks;public,restart,individual,strategy,execution,graph,execution,graph,executor,callback,executor,this,execution,graph,check,not,null,execution,graph,this,callback,executor,check,not,null,callback,executor,this,num,task,failures,new,simple,counter
RestartIndividualStrategy -> public RestartIndividualStrategy(ExecutionGraph executionGraph, Executor callbackExecutor);1513201070;Creates a new failover strategy that recovers from failures by restarting only the failed task_of the execution graph.__@param executionGraph The execution graph to handle._@param callbackExecutor The executor that executes restart callbacks;public RestartIndividualStrategy(ExecutionGraph executionGraph, Executor callbackExecutor) {_		this.executionGraph = checkNotNull(executionGraph)__		this.callbackExecutor = checkNotNull(callbackExecutor)___		this.numTaskFailures = new SimpleCounter()__	};creates,a,new,failover,strategy,that,recovers,from,failures,by,restarting,only,the,failed,task,of,the,execution,graph,param,execution,graph,the,execution,graph,to,handle,param,callback,executor,the,executor,that,executes,restart,callbacks;public,restart,individual,strategy,execution,graph,execution,graph,executor,callback,executor,this,execution,graph,check,not,null,execution,graph,this,callback,executor,check,not,null,callback,executor,this,num,task,failures,new,simple,counter
