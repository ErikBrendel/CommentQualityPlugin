commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the job plan as a JSON string.  *  * @return job plan as a JSON string  */ ;/**  * Returns the job plan as a JSON string.  *  * @return job plan as a JSON string  */ String getJsonPlan().
true;;0;1;/**  * Returns the {@link JobID} for this execution graph.  *  * @return job ID for this execution graph  */ ;/**  * Returns the {@link JobID} for this execution graph.  *  * @return job ID for this execution graph  */ JobID getJobID().
true;;0;1;/**  * Returns the job name for the execution graph.  *  * @return job name for this execution graph  */ ;/**  * Returns the job name for the execution graph.  *  * @return job name for this execution graph  */ String getJobName().
true;;0;1;/**  * Returns the current {@link JobStatus} for this execution graph.  *  * @return job status for this execution graph  */ ;/**  * Returns the current {@link JobStatus} for this execution graph.  *  * @return job status for this execution graph  */ JobStatus getState().
true;;0;2;/**  * Returns the exception that caused the job to fail. This is the first root exception  * that was not recoverable and triggered job failure.  *  * @return failure causing exception, or null  */ ;/**  * Returns the exception that caused the job to fail. This is the first root exception  * that was not recoverable and triggered job failure.  *  * @return failure causing exception, or null  */ @Nullable ErrorInfo getFailureInfo().
true;;1;2;/**  * Returns the job vertex for the given {@link JobVertexID}.  *  * @param id id of job vertex to be returned  * @return job vertex for the given id, or {@code null}  */ ;/**  * Returns the job vertex for the given {@link JobVertexID}.  *  * @param id id of job vertex to be returned  * @return job vertex for the given id, or {@code null}  */ @Nullable AccessExecutionJobVertex getJobVertex(JobVertexID id).
true;;0;1;/**  * Returns a map containing all job vertices for this execution graph.  *  * @return map containing all job vertices for this execution graph  */ ;/**  * Returns a map containing all job vertices for this execution graph.  *  * @return map containing all job vertices for this execution graph  */ Map<JobVertexID, ? extends AccessExecutionJobVertex> getAllVertices().
true;;0;1;/**  * Returns an iterable containing all job vertices for this execution graph in the order they were created.  *  * @return iterable containing all job vertices for this execution graph in the order they were created  */ ;/**  * Returns an iterable containing all job vertices for this execution graph in the order they were created.  *  * @return iterable containing all job vertices for this execution graph in the order they were created  */ Iterable<? extends AccessExecutionJobVertex> getVerticesTopologically().
true;;0;1;/**  * Returns an iterable containing all execution vertices for this execution graph.  *  * @return iterable containing all execution vertices for this execution graph  */ ;/**  * Returns an iterable containing all execution vertices for this execution graph.  *  * @return iterable containing all execution vertices for this execution graph  */ Iterable<? extends AccessExecutionVertex> getAllExecutionVertices().
true;;1;1;/**  * Returns the timestamp for the given {@link JobStatus}.  *  * @param status status for which the timestamp should be returned  * @return timestamp for the given job status  */ ;/**  * Returns the timestamp for the given {@link JobStatus}.  *  * @param status status for which the timestamp should be returned  * @return timestamp for the given job status  */ long getStatusTimestamp(JobStatus status).
true;;0;2;/**  * Returns the {@link CheckpointCoordinatorConfiguration} or <code>null</code> if  * checkpointing is disabled.  *  * @return JobCheckpointingConfiguration for this execution graph  */ ;/**  * Returns the {@link CheckpointCoordinatorConfiguration} or <code>null</code> if  * checkpointing is disabled.  *  * @return JobCheckpointingConfiguration for this execution graph  */ @Nullable CheckpointCoordinatorConfiguration getCheckpointCoordinatorConfiguration().
true;;0;2;/**  * Returns a snapshot of the checkpoint statistics or <code>null</code> if  * checkpointing is disabled.  *  * @return Snapshot of the checkpoint statistics for this execution graph  */ ;/**  * Returns a snapshot of the checkpoint statistics or <code>null</code> if  * checkpointing is disabled.  *  * @return Snapshot of the checkpoint statistics for this execution graph  */ @Nullable CheckpointStatsSnapshot getCheckpointStatsSnapshot().
true;;0;2;/**  * Returns the {@link ArchivedExecutionConfig} for this execution graph.  *  * @return execution config summary for this execution graph, or null in case of errors  */ ;/**  * Returns the {@link ArchivedExecutionConfig} for this execution graph.  *  * @return execution config summary for this execution graph, or null in case of errors  */ @Nullable ArchivedExecutionConfig getArchivedExecutionConfig().
true;;0;1;/**  * Returns whether the job for this execution graph is stoppable.  *  * @return true, if all sources tasks are stoppable, false otherwise  */ ;/**  * Returns whether the job for this execution graph is stoppable.  *  * @return true, if all sources tasks are stoppable, false otherwise  */ boolean isStoppable().
true;;0;1;/**  * Returns the aggregated user-defined accumulators as strings.  *  * @return aggregated user-defined accumulators as strings.  */ ;/**  * Returns the aggregated user-defined accumulators as strings.  *  * @return aggregated user-defined accumulators as strings.  */ StringifiedAccumulatorResult[] getAccumulatorResultsStringified().
true;;0;1;/**  * Returns a map containing the serialized values of user-defined accumulators.  *  * @return map containing serialized values of user-defined accumulators  */ ;/**  * Returns a map containing the serialized values of user-defined accumulators.  *  * @return map containing serialized values of user-defined accumulators  */ Map<String, SerializedValue<OptionalFailure<Object>>> getAccumulatorsSerialized().
true;;0;1;/**  * Returns whether this execution graph was archived.  *  * @return true, if the execution graph was archived, false otherwise  */ ;/**  * Returns whether this execution graph was archived.  *  * @return true, if the execution graph was archived, false otherwise  */ boolean isArchived().
