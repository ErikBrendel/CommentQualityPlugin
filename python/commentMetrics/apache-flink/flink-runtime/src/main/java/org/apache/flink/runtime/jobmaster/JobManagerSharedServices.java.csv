commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ScheduledExecutorService getScheduledExecutorService() {     return scheduledExecutorService. }
false;public;0;3;;public LibraryCacheManager getLibraryCacheManager() {     return libraryCacheManager. }
false;public;0;3;;public RestartStrategyFactory getRestartStrategyFactory() {     return restartStrategyFactory. }
false;public;0;3;;public BackPressureStatsTracker getBackPressureStatsTracker() {     return backPressureStatsTracker. }
false;public;0;4;;@Nonnull public BlobWriter getBlobWriter() {     return blobWriter. }
true;public;0;17;/**  * Shutdown the {@link JobMaster} services.  *  * <p>This method makes sure all services are closed or shut down, even when an exception occurred  * in the shutdown of one component. The first encountered exception is thrown, with successive  * exceptions added as suppressed exceptions.  *  * @throws Exception The first Exception encountered during shutdown.  */ ;/**  * Shutdown the {@link JobMaster} services.  *  * <p>This method makes sure all services are closed or shut down, even when an exception occurred  * in the shutdown of one component. The first encountered exception is thrown, with successive  * exceptions added as suppressed exceptions.  *  * @throws Exception The first Exception encountered during shutdown.  */ public void shutdown() throws Exception {     Throwable firstException = null.     try {         scheduledExecutorService.shutdownNow().     } catch (Throwable t) {         firstException = t.     }     libraryCacheManager.shutdown().     stackTraceSampleCoordinator.shutDown().     backPressureStatsTracker.shutDown().     if (firstException != null) {         ExceptionUtils.rethrowException(firstException, "Error while shutting down JobManager services").     } }
false;public,static;2;53;;// ------------------------------------------------------------------------ // Creating the components from a configuration // ------------------------------------------------------------------------ public static JobManagerSharedServices fromConfiguration(Configuration config, BlobServer blobServer) throws Exception {     checkNotNull(config).     checkNotNull(blobServer).     final String classLoaderResolveOrder = config.getString(CoreOptions.CLASSLOADER_RESOLVE_ORDER).     final String[] alwaysParentFirstLoaderPatterns = CoreOptions.getParentFirstLoaderPatterns(config).     final BlobLibraryCacheManager libraryCacheManager = new BlobLibraryCacheManager(blobServer, FlinkUserCodeClassLoaders.ResolveOrder.fromString(classLoaderResolveOrder), alwaysParentFirstLoaderPatterns).     final FiniteDuration timeout.     try {         timeout = AkkaUtils.getTimeout(config).     } catch (NumberFormatException e) {         throw new IllegalConfigurationException(AkkaUtils.formatDurationParsingErrorMessage()).     }     final ScheduledExecutorService futureExecutor = Executors.newScheduledThreadPool(Hardware.getNumberCPUCores(), new ExecutorThreadFactory("jobmanager-future")).     final StackTraceSampleCoordinator stackTraceSampleCoordinator = new StackTraceSampleCoordinator(futureExecutor, timeout.toMillis()).     final int cleanUpInterval = config.getInteger(WebOptions.BACKPRESSURE_CLEANUP_INTERVAL).     final BackPressureStatsTrackerImpl backPressureStatsTracker = new BackPressureStatsTrackerImpl(stackTraceSampleCoordinator, cleanUpInterval, config.getInteger(WebOptions.BACKPRESSURE_NUM_SAMPLES), config.getInteger(WebOptions.BACKPRESSURE_REFRESH_INTERVAL), Time.milliseconds(config.getInteger(WebOptions.BACKPRESSURE_DELAY))).     futureExecutor.scheduleWithFixedDelay(backPressureStatsTracker::cleanUpOperatorStatsCache, cleanUpInterval, cleanUpInterval, TimeUnit.MILLISECONDS).     return new JobManagerSharedServices(futureExecutor, libraryCacheManager, RestartStrategyFactory.createRestartStrategyFactory(config), stackTraceSampleCoordinator, backPressureStatsTracker, blobServer). }
