commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public void setJobRunning(JobID jobID) throws IOException {     checkNotNull(jobID).     try {         writeEnumToZooKeeper(jobID, JobSchedulingStatus.RUNNING).     } catch (Exception e) {         throw new IOException("Failed to set RUNNING state in ZooKeeper for job " + jobID, e).     } }
false;public;1;11;;@Override public void setJobFinished(JobID jobID) throws IOException {     checkNotNull(jobID).     try {         writeEnumToZooKeeper(jobID, JobSchedulingStatus.DONE).     } catch (Exception e) {         throw new IOException("Failed to set DONE state in ZooKeeper for job " + jobID, e).     } }
false;public;1;29;;@Override public JobSchedulingStatus getJobSchedulingStatus(JobID jobID) throws IOException {     checkNotNull(jobID).     try {         final String zkPath = createZkPath(jobID).         final Stat stat = client.checkExists().forPath(zkPath).         if (stat != null) {             // found some data, try to parse it             final byte[] data = client.getData().forPath(zkPath).             if (data != null) {                 try {                     final String name = new String(data, ENCODING).                     return JobSchedulingStatus.valueOf(name).                 } catch (IllegalArgumentException e) {                     throw new IOException("Found corrupt data in ZooKeeper: " + Arrays.toString(data) + " is no valid job status").                 }             }         }         // nothing found, yet, must be in status 'PENDING'         return JobSchedulingStatus.PENDING.     } catch (Exception e) {         throw new IOException("Get finished state from zk fail for job " + jobID.toString(), e).     } }
false;public;1;13;;@Override public void clearJob(JobID jobID) throws IOException {     checkNotNull(jobID).     try {         final String zkPath = createZkPath(jobID).         this.client.newNamespaceAwareEnsurePath(zkPath).ensure(client.getZookeeperClient()).         this.client.delete().forPath(zkPath).     } catch (Exception e) {         throw new IOException("Failed to clear job state from ZooKeeper for job " + jobID, e).     } }
false;private;1;3;;private String createZkPath(JobID jobID) {     return runningJobPath + jobID.toString(). }
false;private;2;5;;private void writeEnumToZooKeeper(JobID jobID, JobSchedulingStatus status) throws Exception {     final String zkPath = createZkPath(jobID).     this.client.newNamespaceAwareEnsurePath(zkPath).ensure(client.getZookeeperClient()).     this.client.setData().forPath(zkPath, status.name().getBytes(ENCODING)). }
