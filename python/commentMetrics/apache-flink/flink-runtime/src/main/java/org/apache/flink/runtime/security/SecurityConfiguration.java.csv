commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean isZkSaslDisable() {     return isZkSaslDisable. }
false;public;0;3;;public String getKeytab() {     return keytab. }
false;public;0;3;;public String getPrincipal() {     return principal. }
false;public;0;3;;public boolean useTicketCache() {     return useTicketCache. }
false;public;0;3;;public Configuration getFlinkConfig() {     return flinkConfig. }
false;public;0;3;;public List<SecurityModuleFactory> getSecurityModuleFactories() {     return securityModuleFactories. }
false;public;0;3;;public List<String> getLoginContextNames() {     return loginContextNames. }
false;public;0;3;;public String getZooKeeperServiceName() {     return zkServiceName. }
false;public;0;3;;public String getZooKeeperLoginContextName() {     return zkLoginContextName. }
false;private;0;14;;private void validate() {     if (!StringUtils.isBlank(keytab)) {         // principal is required         if (StringUtils.isBlank(principal)) {             throw new IllegalConfigurationException("Kerberos login configuration is invalid. keytab requires a principal.").         }         // check the keytab is readable         File keytabFile = new File(keytab).         if (!keytabFile.exists() || !keytabFile.isFile() || !keytabFile.canRead()) {             throw new IllegalConfigurationException("Kerberos login configuration is invalid. keytab is unreadable").         }     } }
false;private,static;1;10;;private static List<String> parseList(String value) {     if (value == null || value.isEmpty()) {         return Collections.emptyList().     }     return Arrays.asList(value.trim().replaceAll("(\\s*,+\\s*)+", ",").split(",")). }
