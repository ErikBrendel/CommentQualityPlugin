# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMergeIterator -> private void crossSecond1withNValues(T2 val1, T1 firstValN, 										Iterator<T1> valsN, FlatJoinFunction<T1, T2, O> joinFunction, Collector<O> collector) throws Exception;1438725087;Crosses a single value from the second side with N values, all sharing a common key._Effectively realizes a <i>N:1</i> join.__@param val1      The value form the <i>1</i> side._@param firstValN The first of the values from the <i>N</i> side._@param valsN     Iterator over remaining <i>N</i> side values._@throws Exception Forwards all exceptions thrown by the stub.;private void crossSecond1withNValues(T2 val1, T1 firstValN,_										Iterator<T1> valsN, FlatJoinFunction<T1, T2, O> joinFunction, Collector<O> collector) throws Exception {_		T2 copy2 = createCopy(serializer2, val1, this.copy2)__		joinFunction.join(firstValN, copy2, collector)___		_		boolean more = true__		do {_			final T1 nRec = valsN.next()___			if (valsN.hasNext()) {_				copy2 = createCopy(serializer2, val1, this.copy2)__				joinFunction.join(nRec, copy2, collector)__			} else {_				joinFunction.join(nRec, val1, collector)__				more = false__			}_		}_		while (more)__	};crosses,a,single,value,from,the,second,side,with,n,values,all,sharing,a,common,key,effectively,realizes,a,i,n,1,i,join,param,val1,the,value,form,the,i,1,i,side,param,first,val,n,the,first,of,the,values,from,the,i,n,i,side,param,vals,n,iterator,over,remaining,i,n,i,side,values,throws,exception,forwards,all,exceptions,thrown,by,the,stub;private,void,cross,second1with,nvalues,t2,val1,t1,first,val,n,iterator,t1,vals,n,flat,join,function,t1,t2,o,join,function,collector,o,collector,throws,exception,t2,copy2,create,copy,serializer2,val1,this,copy2,join,function,join,first,val,n,copy2,collector,boolean,more,true,do,final,t1,n,rec,vals,n,next,if,vals,n,has,next,copy2,create,copy,serializer2,val1,this,copy2,join,function,join,n,rec,copy2,collector,else,join,function,join,n,rec,val1,collector,more,false,while,more
AbstractMergeIterator -> private void crossSecond1withNValues(T2 val1, T1 firstValN, 										Iterator<T1> valsN, FlatJoinFunction<T1, T2, O> joinFunction, Collector<O> collector) throws Exception;1441724271;Crosses a single value from the second side with N values, all sharing a common key._Effectively realizes a <i>N:1</i> join.__@param val1      The value form the <i>1</i> side._@param firstValN The first of the values from the <i>N</i> side._@param valsN     Iterator over remaining <i>N</i> side values._@throws Exception Forwards all exceptions thrown by the stub.;private void crossSecond1withNValues(T2 val1, T1 firstValN,_										Iterator<T1> valsN, FlatJoinFunction<T1, T2, O> joinFunction, Collector<O> collector) throws Exception {_		T2 copy2 = createCopy(serializer2, val1, this.copy2)__		joinFunction.join(firstValN, copy2, collector)___		_		boolean more = true__		do {_			final T1 nRec = valsN.next()___			if (valsN.hasNext()) {_				copy2 = createCopy(serializer2, val1, this.copy2)__				joinFunction.join(nRec, copy2, collector)__			} else {_				joinFunction.join(nRec, val1, collector)__				more = false__			}_		}_		while (more)__	};crosses,a,single,value,from,the,second,side,with,n,values,all,sharing,a,common,key,effectively,realizes,a,i,n,1,i,join,param,val1,the,value,form,the,i,1,i,side,param,first,val,n,the,first,of,the,values,from,the,i,n,i,side,param,vals,n,iterator,over,remaining,i,n,i,side,values,throws,exception,forwards,all,exceptions,thrown,by,the,stub;private,void,cross,second1with,nvalues,t2,val1,t1,first,val,n,iterator,t1,vals,n,flat,join,function,t1,t2,o,join,function,collector,o,collector,throws,exception,t2,copy2,create,copy,serializer2,val1,this,copy2,join,function,join,first,val,n,copy2,collector,boolean,more,true,do,final,t1,n,rec,vals,n,next,if,vals,n,has,next,copy2,create,copy,serializer2,val1,this,copy2,join,function,join,n,rec,copy2,collector,else,join,function,join,n,rec,val1,collector,more,false,while,more
AbstractMergeIterator -> private void crossSecond1withNValues(T2 val1, T1 firstValN, 										Iterator<T1> valsN, FlatJoinFunction<T1, T2, O> joinFunction, Collector<O> collector) throws Exception;1441738685;Crosses a single value from the second side with N values, all sharing a common key._Effectively realizes a <i>N:1</i> join.__@param val1      The value form the <i>1</i> side._@param firstValN The first of the values from the <i>N</i> side._@param valsN     Iterator over remaining <i>N</i> side values._@throws Exception Forwards all exceptions thrown by the stub.;private void crossSecond1withNValues(T2 val1, T1 firstValN,_										Iterator<T1> valsN, FlatJoinFunction<T1, T2, O> joinFunction, Collector<O> collector) throws Exception {_		T2 copy2 = createCopy(serializer2, val1, this.copy2)__		joinFunction.join(firstValN, copy2, collector)___		_		boolean more = true__		do {_			final T1 nRec = valsN.next()___			if (valsN.hasNext()) {_				copy2 = createCopy(serializer2, val1, this.copy2)__				joinFunction.join(nRec, copy2, collector)__			} else {_				joinFunction.join(nRec, val1, collector)__				more = false__			}_		}_		while (more)__	};crosses,a,single,value,from,the,second,side,with,n,values,all,sharing,a,common,key,effectively,realizes,a,i,n,1,i,join,param,val1,the,value,form,the,i,1,i,side,param,first,val,n,the,first,of,the,values,from,the,i,n,i,side,param,vals,n,iterator,over,remaining,i,n,i,side,values,throws,exception,forwards,all,exceptions,thrown,by,the,stub;private,void,cross,second1with,nvalues,t2,val1,t1,first,val,n,iterator,t1,vals,n,flat,join,function,t1,t2,o,join,function,collector,o,collector,throws,exception,t2,copy2,create,copy,serializer2,val1,this,copy2,join,function,join,first,val,n,copy2,collector,boolean,more,true,do,final,t1,n,rec,vals,n,next,if,vals,n,has,next,copy2,create,copy,serializer2,val1,this,copy2,join,function,join,n,rec,copy2,collector,else,join,function,join,n,rec,val1,collector,more,false,while,more
AbstractMergeIterator -> @Override 	public abstract boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) 			throws Exception_;1438725087;Calls the <code>JoinFunction#join()</code> method for all two key-value pairs that share the same key and come_from different inputs. The output of the <code>join()</code> method is forwarded._<p>_This method first zig-zags between the two sorted inputs in order to find a common_key, and then calls the join stub with the cross product of the values.__@throws Exception Forwards all exceptions from the user code and the I/O system._@see org.apache.flink.runtime.operators.util.JoinTaskIterator#callWithNextKey(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.util.Collector);@Override_	public abstract boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector)_			throws Exception_;calls,the,code,join,function,join,code,method,for,all,two,key,value,pairs,that,share,the,same,key,and,come,from,different,inputs,the,output,of,the,code,join,code,method,is,forwarded,p,this,method,first,zig,zags,between,the,two,sorted,inputs,in,order,to,find,a,common,key,and,then,calls,the,join,stub,with,the,cross,product,of,the,values,throws,exception,forwards,all,exceptions,from,the,user,code,and,the,i,o,system,see,org,apache,flink,runtime,operators,util,join,task,iterator,call,with,next,key,org,apache,flink,api,common,functions,flat,join,function,org,apache,flink,util,collector;override,public,abstract,boolean,call,with,next,key,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception
AbstractMergeIterator -> @Override 	public abstract boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) 			throws Exception_;1441724271;Calls the <code>JoinFunction#join()</code> method for all two key-value pairs that share the same key and come_from different inputs. The output of the <code>join()</code> method is forwarded._<p>_This method first zig-zags between the two sorted inputs in order to find a common_key, and then calls the join stub with the cross product of the values.__@throws Exception Forwards all exceptions from the user code and the I/O system._@see org.apache.flink.runtime.operators.util.JoinTaskIterator#callWithNextKey(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.util.Collector);@Override_	public abstract boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector)_			throws Exception_;calls,the,code,join,function,join,code,method,for,all,two,key,value,pairs,that,share,the,same,key,and,come,from,different,inputs,the,output,of,the,code,join,code,method,is,forwarded,p,this,method,first,zig,zags,between,the,two,sorted,inputs,in,order,to,find,a,common,key,and,then,calls,the,join,stub,with,the,cross,product,of,the,values,throws,exception,forwards,all,exceptions,from,the,user,code,and,the,i,o,system,see,org,apache,flink,runtime,operators,util,join,task,iterator,call,with,next,key,org,apache,flink,api,common,functions,flat,join,function,org,apache,flink,util,collector;override,public,abstract,boolean,call,with,next,key,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception
AbstractMergeIterator -> @Override 	public abstract boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) 			throws Exception_;1441738685;Calls the <code>JoinFunction#join()</code> method for all two key-value pairs that share the same key and come_from different inputs. The output of the <code>join()</code> method is forwarded._<p>_This method first zig-zags between the two sorted inputs in order to find a common_key, and then calls the join stub with the cross product of the values.__@throws Exception Forwards all exceptions from the user code and the I/O system._@see org.apache.flink.runtime.operators.util.JoinTaskIterator#callWithNextKey(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.util.Collector);@Override_	public abstract boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector)_			throws Exception_;calls,the,code,join,function,join,code,method,for,all,two,key,value,pairs,that,share,the,same,key,and,come,from,different,inputs,the,output,of,the,code,join,code,method,is,forwarded,p,this,method,first,zig,zags,between,the,two,sorted,inputs,in,order,to,find,a,common,key,and,then,calls,the,join,stub,with,the,cross,product,of,the,values,throws,exception,forwards,all,exceptions,from,the,user,code,and,the,i,o,system,see,org,apache,flink,runtime,operators,util,join,task,iterator,call,with,next,key,org,apache,flink,api,common,functions,flat,join,function,org,apache,flink,util,collector;override,public,abstract,boolean,call,with,next,key,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception
AbstractMergeIterator -> private void crossFirst1withNValues(final T1 val1, final T2 firstValN, 										final Iterator<T2> valsN, final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) 			throws Exception;1438725087;Crosses a single value from the first input with N values, all sharing a common key._Effectively realizes a <i>1:N</i> join.__@param val1      The value form the <i>1</i> side._@param firstValN The first of the values from the <i>N</i> side._@param valsN     Iterator over remaining <i>N</i> side values._@throws Exception Forwards all exceptions thrown by the stub.;private void crossFirst1withNValues(final T1 val1, final T2 firstValN,_										final Iterator<T2> valsN, final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector)_			throws Exception {_		T1 copy1 = createCopy(serializer1, val1, this.copy1)__		joinFunction.join(copy1, firstValN, collector)___		_		boolean more = true__		do {_			final T2 nRec = valsN.next()___			if (valsN.hasNext()) {_				copy1 = createCopy(serializer1, val1, this.copy1)__				joinFunction.join(copy1, nRec, collector)__			} else {_				joinFunction.join(val1, nRec, collector)__				more = false__			}_		}_		while (more)__	};crosses,a,single,value,from,the,first,input,with,n,values,all,sharing,a,common,key,effectively,realizes,a,i,1,n,i,join,param,val1,the,value,form,the,i,1,i,side,param,first,val,n,the,first,of,the,values,from,the,i,n,i,side,param,vals,n,iterator,over,remaining,i,n,i,side,values,throws,exception,forwards,all,exceptions,thrown,by,the,stub;private,void,cross,first1with,nvalues,final,t1,val1,final,t2,first,val,n,final,iterator,t2,vals,n,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception,t1,copy1,create,copy,serializer1,val1,this,copy1,join,function,join,copy1,first,val,n,collector,boolean,more,true,do,final,t2,n,rec,vals,n,next,if,vals,n,has,next,copy1,create,copy,serializer1,val1,this,copy1,join,function,join,copy1,n,rec,collector,else,join,function,join,val1,n,rec,collector,more,false,while,more
AbstractMergeIterator -> private void crossFirst1withNValues(final T1 val1, final T2 firstValN, 										final Iterator<T2> valsN, final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) 			throws Exception;1441724271;Crosses a single value from the first input with N values, all sharing a common key._Effectively realizes a <i>1:N</i> join.__@param val1      The value form the <i>1</i> side._@param firstValN The first of the values from the <i>N</i> side._@param valsN     Iterator over remaining <i>N</i> side values._@throws Exception Forwards all exceptions thrown by the stub.;private void crossFirst1withNValues(final T1 val1, final T2 firstValN,_										final Iterator<T2> valsN, final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector)_			throws Exception {_		T1 copy1 = createCopy(serializer1, val1, this.copy1)__		joinFunction.join(copy1, firstValN, collector)___		_		boolean more = true__		do {_			final T2 nRec = valsN.next()___			if (valsN.hasNext()) {_				copy1 = createCopy(serializer1, val1, this.copy1)__				joinFunction.join(copy1, nRec, collector)__			} else {_				joinFunction.join(val1, nRec, collector)__				more = false__			}_		}_		while (more)__	};crosses,a,single,value,from,the,first,input,with,n,values,all,sharing,a,common,key,effectively,realizes,a,i,1,n,i,join,param,val1,the,value,form,the,i,1,i,side,param,first,val,n,the,first,of,the,values,from,the,i,n,i,side,param,vals,n,iterator,over,remaining,i,n,i,side,values,throws,exception,forwards,all,exceptions,thrown,by,the,stub;private,void,cross,first1with,nvalues,final,t1,val1,final,t2,first,val,n,final,iterator,t2,vals,n,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception,t1,copy1,create,copy,serializer1,val1,this,copy1,join,function,join,copy1,first,val,n,collector,boolean,more,true,do,final,t2,n,rec,vals,n,next,if,vals,n,has,next,copy1,create,copy,serializer1,val1,this,copy1,join,function,join,copy1,n,rec,collector,else,join,function,join,val1,n,rec,collector,more,false,while,more
AbstractMergeIterator -> private void crossFirst1withNValues(final T1 val1, final T2 firstValN, 										final Iterator<T2> valsN, final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) 			throws Exception;1441738685;Crosses a single value from the first input with N values, all sharing a common key._Effectively realizes a <i>1:N</i> join.__@param val1      The value form the <i>1</i> side._@param firstValN The first of the values from the <i>N</i> side._@param valsN     Iterator over remaining <i>N</i> side values._@throws Exception Forwards all exceptions thrown by the stub.;private void crossFirst1withNValues(final T1 val1, final T2 firstValN,_										final Iterator<T2> valsN, final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector)_			throws Exception {_		T1 copy1 = createCopy(serializer1, val1, this.copy1)__		joinFunction.join(copy1, firstValN, collector)___		_		boolean more = true__		do {_			final T2 nRec = valsN.next()___			if (valsN.hasNext()) {_				copy1 = createCopy(serializer1, val1, this.copy1)__				joinFunction.join(copy1, nRec, collector)__			} else {_				joinFunction.join(val1, nRec, collector)__				more = false__			}_		}_		while (more)__	};crosses,a,single,value,from,the,first,input,with,n,values,all,sharing,a,common,key,effectively,realizes,a,i,1,n,i,join,param,val1,the,value,form,the,i,1,i,side,param,first,val,n,the,first,of,the,values,from,the,i,n,i,side,param,vals,n,iterator,over,remaining,i,n,i,side,values,throws,exception,forwards,all,exceptions,thrown,by,the,stub;private,void,cross,first1with,nvalues,final,t1,val1,final,t2,first,val,n,final,iterator,t2,vals,n,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception,t1,copy1,create,copy,serializer1,val1,this,copy1,join,function,join,copy1,first,val,n,collector,boolean,more,true,do,final,t2,n,rec,vals,n,next,if,vals,n,has,next,copy1,create,copy,serializer1,val1,this,copy1,join,function,join,copy1,n,rec,collector,else,join,function,join,val1,n,rec,collector,more,false,while,more
AbstractMergeIterator -> protected abstract <T> T createCopy(TypeSerializer<T> serializer, T value, T reuse)_;1438716926;Copies an instance of the given type, potentially reusing the object passed as the reuse parameter, which may be null.;protected abstract <T> T createCopy(TypeSerializer<T> serializer, T value, T reuse)_;copies,an,instance,of,the,given,type,potentially,reusing,the,object,passed,as,the,reuse,parameter,which,may,be,null;protected,abstract,t,t,create,copy,type,serializer,t,serializer,t,value,t,reuse
AbstractMergeIterator -> protected abstract <T> T createCopy(TypeSerializer<T> serializer, T value, T reuse)_;1438725087;Copies an instance of the given type, potentially reusing the object passed as the reuse parameter, which may be null.;protected abstract <T> T createCopy(TypeSerializer<T> serializer, T value, T reuse)_;copies,an,instance,of,the,given,type,potentially,reusing,the,object,passed,as,the,reuse,parameter,which,may,be,null;protected,abstract,t,t,create,copy,type,serializer,t,serializer,t,value,t,reuse
AbstractMergeIterator -> protected abstract <T> T createCopy(TypeSerializer<T> serializer, T value, T reuse)_;1441724271;Copies an instance of the given type, potentially reusing the object passed as the reuse parameter, which may be null.;protected abstract <T> T createCopy(TypeSerializer<T> serializer, T value, T reuse)_;copies,an,instance,of,the,given,type,potentially,reusing,the,object,passed,as,the,reuse,parameter,which,may,be,null;protected,abstract,t,t,create,copy,type,serializer,t,serializer,t,value,t,reuse
AbstractMergeIterator -> protected abstract <T> T createCopy(TypeSerializer<T> serializer, T value, T reuse)_;1441738685;Copies an instance of the given type, potentially reusing the object passed as the reuse parameter, which may be null.;protected abstract <T> T createCopy(TypeSerializer<T> serializer, T value, T reuse)_;copies,an,instance,of,the,given,type,potentially,reusing,the,object,passed,as,the,reuse,parameter,which,may,be,null;protected,abstract,t,t,create,copy,type,serializer,t,serializer,t,value,t,reuse
