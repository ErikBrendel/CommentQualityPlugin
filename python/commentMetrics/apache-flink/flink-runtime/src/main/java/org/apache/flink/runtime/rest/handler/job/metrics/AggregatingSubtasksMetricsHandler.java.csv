commented;modifiers;parameterAmount;loc;comment;code
false;;2;26;;@Nonnull @Override Collection<? extends MetricStore.ComponentMetricStore> getStores(MetricStore store, HandlerRequest<EmptyRequestBody, AggregatedSubtaskMetricsParameters> request) {     JobID jobID = request.getPathParameter(JobIDPathParameter.class).     JobVertexID taskID = request.getPathParameter(JobVertexIdPathParameter.class).     Collection<String> subtaskRanges = request.getQueryParameter(SubtasksFilterQueryParameter.class).     if (subtaskRanges.isEmpty()) {         MetricStore.TaskMetricStore taskMetricStore = store.getTaskMetricStore(jobID.toString(), taskID.toString()).         if (taskMetricStore != null) {             return taskMetricStore.getAllSubtaskMetricStores().         } else {             return Collections.emptyList().         }     } else {         Iterable<Integer> subtasks = getIntegerRangeFromString(subtaskRanges).         Collection<MetricStore.ComponentMetricStore> subtaskStores = new ArrayList<>(8).         for (int subtask : subtasks) {             MetricStore.ComponentMetricStore subtaskMetricStore = store.getSubtaskMetricStore(jobID.toString(), taskID.toString(), subtask).             if (subtaskMetricStore != null) {                 subtaskStores.add(subtaskMetricStore).             }         }         return subtaskStores.     } }
false;private;1;25;;private Iterable<Integer> getIntegerRangeFromString(Collection<String> ranges) {     UnionIterator<Integer> iterators = new UnionIterator<>().     for (String rawRange : ranges) {         try {             Iterator<Integer> rangeIterator.             String range = rawRange.trim().             int dashIdx = range.indexOf('-').             if (dashIdx == -1) {                 // only one value in range:                 rangeIterator = Collections.singleton(Integer.valueOf(range)).iterator().             } else {                 // evaluate range                 final int start = Integer.valueOf(range.substring(0, dashIdx)).                 final int end = Integer.valueOf(range.substring(dashIdx + 1, range.length())).                 rangeIterator = IntStream.rangeClosed(start, end).iterator().             }             iterators.add(rangeIterator).         } catch (NumberFormatException nfe) {             log.warn("Invalid value {} specified for integer range. Not a number.", rawRange, nfe).         }     }     return iterators. }
