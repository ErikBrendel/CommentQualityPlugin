commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Closes this output, writing pending data and releasing the memory.  *  * @throws IOException Thrown, if the pending data could not be written.  */ ;// -------------------------------------------------------------------------------------------- /**  * Closes this output, writing pending data and releasing the memory.  *  * @throws IOException Thrown, if the pending data could not be written.  */ public void close() throws IOException {     close(false). }
true;public;0;3;/**  * Closes this output, writing pending data and releasing the memory.  *  * @throws IOException Thrown, if the pending data could not be written.  */ ;/**  * Closes this output, writing pending data and releasing the memory.  *  * @throws IOException Thrown, if the pending data could not be written.  */ public void closeAndDelete() throws IOException {     close(true). }
false;private;1;19;;private void close(boolean delete) throws IOException {     try {         // send off set last segment, if we have not been closed before         MemorySegment current = getCurrentSegment().         if (current != null) {             writeSegment(current, getCurrentPositionInSegment()).         }         clear().         if (delete) {             writer.closeAndDelete().         } else {             writer.close().         }     } finally {         memManager.release(memory).     } }
true;public;0;3;/**  * Gets the number of blocks written by this output view.  *  * @return The number of blocks written by this output view.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the number of blocks written by this output view.  *  * @return The number of blocks written by this output view.  */ public int getBlockCount() {     return numBlocksWritten. }
true;public;0;3;/**  * Gets the number of bytes written in the latest memory segment.  *  * @return The number of bytes written in the latest memory segment.  */ ;/**  * Gets the number of bytes written in the latest memory segment.  *  * @return The number of bytes written in the latest memory segment.  */ public int getBytesInLatestSegment() {     return bytesInLatestSegment. }
false;public;0;3;;public long getWriteOffset() {     return ((long) numBlocksWritten) * segmentSize + getCurrentPositionInSegment(). }
false;protected;2;7;;@Override protected MemorySegment nextSegment(MemorySegment current, int posInSegment) throws IOException {     if (current != null) {         writeSegment(current, posInSegment).     }     return writer.getNextReturnedBlock(). }
false;private;2;5;;private void writeSegment(MemorySegment segment, int writePosition) throws IOException {     writer.writeBlock(segment).     numBlocksWritten++.     bytesInLatestSegment = writePosition. }
