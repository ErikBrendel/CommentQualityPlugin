commented;modifiers;parameterAmount;loc;comment;code
true;public;1;8;/**  * Gets the attached exception, which is in serialized form. Returns null,  * if the status update is no failure with an associated exception.  *  * @param userCodeClassloader The classloader that can resolve user-defined exceptions.  * @return The attached exception, or null, if none.  */ ;// -------------------------------------------------------------------------------------------- /**  * Gets the attached exception, which is in serialized form. Returns null,  * if the status update is no failure with an associated exception.  *  * @param userCodeClassloader The classloader that can resolve user-defined exceptions.  * @return The attached exception, or null, if none.  */ public Throwable getError(ClassLoader userCodeClassloader) {     if (this.throwable == null) {         return null.     } else {         return this.throwable.deserializeError(userCodeClassloader).     } }
true;public;0;3;/**  * Returns the ID of the task this result belongs to  *  * @return the ID of the task this result belongs to  */ ;/**  * Returns the ID of the task this result belongs to  *  * @return the ID of the task this result belongs to  */ public ExecutionAttemptID getID() {     return this.executionId. }
true;public;0;3;/**  * Returns the new execution state of the task.  *  * @return the new execution state of the task  */ ;/**  * Returns the new execution state of the task.  *  * @return the new execution state of the task  */ public ExecutionState getExecutionState() {     return this.executionState. }
true;public;0;3;/**  * The ID of the job the task belongs to  *  * @return the ID of the job the task belongs to  */ ;/**  * The ID of the job the task belongs to  *  * @return the ID of the job the task belongs to  */ public JobID getJobID() {     return this.jobID. }
true;public;0;3;/**  * Gets flink and user-defined accumulators in serialized form.  */ ;/**  * Gets flink and user-defined accumulators in serialized form.  */ public AccumulatorSnapshot getAccumulators() {     return accumulators. }
false;public;0;3;;public IOMetrics getIOMetrics() {     return ioMetrics. }
false;public;1;13;;// -------------------------------------------------------------------------------------------- @Override public boolean equals(Object obj) {     if (obj instanceof TaskExecutionState) {         TaskExecutionState other = (TaskExecutionState) obj.         return other.jobID.equals(this.jobID) && other.executionId.equals(this.executionId) && other.executionState == this.executionState && (other.throwable == null) == (this.throwable == null).     } else {         return false.     } }
false;public;0;4;;@Override public int hashCode() {     return jobID.hashCode() + executionId.hashCode() + executionState.ordinal(). }
false;public;0;6;;@Override public String toString() {     return String.format("TaskExecutionState jobId=%s, executionId=%s, state=%s, error=%s", jobID, executionId, executionState, throwable == null ? "(null)" : throwable.toString()). }
