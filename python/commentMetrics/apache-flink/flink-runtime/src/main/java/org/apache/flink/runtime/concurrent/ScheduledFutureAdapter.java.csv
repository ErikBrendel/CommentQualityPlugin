commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public long getDelay(@Nonnull TimeUnit unit) {     return unit.convert(scheduleTimeNanos - System.nanoTime(), TimeUnit.NANOSECONDS). }
false;public;1;16;;@Override public int compareTo(@Nonnull Delayed o) {     if (o == this) {         return 0.     }     // tie breaking for ScheduledFutureAdapter objects     if (o instanceof ScheduledFutureAdapter) {         ScheduledFutureAdapter<?> typedOther = (ScheduledFutureAdapter<?>) o.         int cmp = Long.compare(scheduleTimeNanos, typedOther.scheduleTimeNanos).         return cmp != 0 ? cmp : Long.compare(tieBreakerUid, typedOther.tieBreakerUid).     }     return Long.compare(getDelay(NANOSECONDS), o.getDelay(NANOSECONDS)). }
false;public;1;4;;@Override public boolean cancel(boolean mayInterruptIfRunning) {     return delegate.cancel(mayInterruptIfRunning). }
false;public;0;4;;@Override public boolean isCancelled() {     return delegate.isCancelled(). }
false;public;0;4;;@Override public boolean isDone() {     return delegate.isDone(). }
false;public;0;4;;@Override public V get() throws InterruptedException, ExecutionException {     return delegate.get(). }
false;public;2;5;;@Override public V get(long timeout, @Nonnull TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {     return delegate.get(timeout, unit). }
false;;0;4;;@VisibleForTesting long getTieBreakerUid() {     return tieBreakerUid. }
false;;0;4;;@VisibleForTesting long getScheduleTimeNanos() {     return scheduleTimeNanos. }
false;public;1;14;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     ScheduledFutureAdapter<?> that = (ScheduledFutureAdapter<?>) o.     return tieBreakerUid == that.tieBreakerUid && scheduleTimeNanos == that.scheduleTimeNanos. }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(tieBreakerUid, scheduleTimeNanos). }
