commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Nonnull public StateDescriptor.Type getStateType() {     return stateType. }
false;public;0;4;;@Nonnull public TypeSerializer<N> getNamespaceSerializer() {     return namespaceSerializerProvider.currentSchemaSerializer(). }
false;public;1;4;;@Nonnull public TypeSerializerSchemaCompatibility<N> updateNamespaceSerializer(TypeSerializer<N> newNamespaceSerializer) {     return namespaceSerializerProvider.registerNewSerializerForRestoredState(newNamespaceSerializer). }
false;public;0;4;;@Nullable public TypeSerializer<N> getPreviousNamespaceSerializer() {     return namespaceSerializerProvider.previousSchemaSerializer(). }
false;public;0;4;;@Nonnull public TypeSerializer<S> getStateSerializer() {     return stateSerializerProvider.currentSchemaSerializer(). }
false;public;1;4;;@Nonnull public TypeSerializerSchemaCompatibility<S> updateStateSerializer(TypeSerializer<S> newStateSerializer) {     return stateSerializerProvider.registerNewSerializerForRestoredState(newStateSerializer). }
false;public;0;4;;@Nullable public TypeSerializer<S> getPreviousStateSerializer() {     return stateSerializerProvider.previousSchemaSerializer(). }
false;public;0;4;;@Nonnull public StateSnapshotTransformFactory<S> getStateSnapshotTransformFactory() {     return stateSnapshotTransformFactory. }
false;public;1;3;;public void updateSnapshotTransformFactory(StateSnapshotTransformFactory<S> stateSnapshotTransformFactory) {     this.stateSnapshotTransformFactory = stateSnapshotTransformFactory. }
false;public;1;23;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     RegisteredKeyValueStateBackendMetaInfo<?, ?> that = (RegisteredKeyValueStateBackendMetaInfo<?, ?>) o.     if (!stateType.equals(that.stateType)) {         return false.     }     if (!getName().equals(that.getName())) {         return false.     }     return getStateSerializer().equals(that.getStateSerializer()) && getNamespaceSerializer().equals(that.getNamespaceSerializer()). }
false;public;0;9;;@Override public String toString() {     return "RegisteredKeyedBackendStateMetaInfo{" + "stateType=" + stateType + ", name='" + name + '\'' + ", namespaceSerializer=" + getNamespaceSerializer() + ", stateSerializer=" + getStateSerializer() + '}'. }
false;public;0;8;;@Override public int hashCode() {     int result = getName().hashCode().     result = 31 * result + getStateType().hashCode().     result = 31 * result + getNamespaceSerializer().hashCode().     result = 31 * result + getStateSerializer().hashCode().     return result. }
false;public;0;5;;@Nonnull @Override public StateMetaInfoSnapshot snapshot() {     return computeSnapshot(). }
false;public;1;16;;public void checkStateMetaInfo(StateDescriptor<?, ?> stateDesc) {     Preconditions.checkState(Objects.equals(stateDesc.getName(), getName()), "Incompatible state names. " + "Was [" + getName() + "], " + "registered with [" + stateDesc.getName() + "].").     if (stateDesc.getType() != StateDescriptor.Type.UNKNOWN && getStateType() != StateDescriptor.Type.UNKNOWN) {         Preconditions.checkState(stateDesc.getType() == getStateType(), "Incompatible key/value state types. " + "Was [" + getStateType() + "], " + "registered with [" + stateDesc.getType() + "].").     } }
false;private;0;25;;@Nonnull private StateMetaInfoSnapshot computeSnapshot() {     Map<String, String> optionsMap = Collections.singletonMap(StateMetaInfoSnapshot.CommonOptionsKeys.KEYED_STATE_TYPE.toString(), stateType.toString()).     Map<String, TypeSerializer<?>> serializerMap = new HashMap<>(2).     Map<String, TypeSerializerSnapshot<?>> serializerConfigSnapshotsMap = new HashMap<>(2).     String namespaceSerializerKey = StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER.toString().     String valueSerializerKey = StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER.toString().     TypeSerializer<N> namespaceSerializer = getNamespaceSerializer().     serializerMap.put(namespaceSerializerKey, namespaceSerializer.duplicate()).     serializerConfigSnapshotsMap.put(namespaceSerializerKey, namespaceSerializer.snapshotConfiguration()).     TypeSerializer<S> stateSerializer = getStateSerializer().     serializerMap.put(valueSerializerKey, stateSerializer.duplicate()).     serializerConfigSnapshotsMap.put(valueSerializerKey, stateSerializer.snapshotConfiguration()).     return new StateMetaInfoSnapshot(name, StateMetaInfoSnapshot.BackendStateType.KEY_VALUE, optionsMap, serializerConfigSnapshotsMap, serializerMap). }
