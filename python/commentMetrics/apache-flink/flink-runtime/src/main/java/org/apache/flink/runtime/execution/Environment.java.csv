commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the job specific {@link ExecutionConfig}.  *  * @return The execution configuration associated with the current job.  */ ;/**  * Returns the job specific {@link ExecutionConfig}.  *  * @return The execution configuration associated with the current job.  */ ExecutionConfig getExecutionConfig().
true;;0;1;/**  * Returns the ID of the job that the task belongs to.  *  * @return the ID of the job from the original job graph  */ ;/**  * Returns the ID of the job that the task belongs to.  *  * @return the ID of the job from the original job graph  */ JobID getJobID().
true;;0;1;/**  * Gets the ID of the JobVertex for which this task executes a parallel subtask.  *  * @return The JobVertexID of this task.  */ ;/**  * Gets the ID of the JobVertex for which this task executes a parallel subtask.  *  * @return The JobVertexID of this task.  */ JobVertexID getJobVertexId().
true;;0;1;/**  * Gets the ID of the task execution attempt.  *  * @return The ID of the task execution attempt.  */ ;/**  * Gets the ID of the task execution attempt.  *  * @return The ID of the task execution attempt.  */ ExecutionAttemptID getExecutionId().
true;;0;1;/**  * Returns the task-wide configuration object, originally attached to the job vertex.  *  * @return The task-wide configuration  */ ;/**  * Returns the task-wide configuration object, originally attached to the job vertex.  *  * @return The task-wide configuration  */ Configuration getTaskConfiguration().
true;;0;1;/**  * Gets the task manager info, with configuration and hostname.  *  * @return The task manager info, with configuration and hostname.  */ ;/**  * Gets the task manager info, with configuration and hostname.  *  * @return The task manager info, with configuration and hostname.  */ TaskManagerRuntimeInfo getTaskManagerInfo().
true;;0;1;/**  * Returns the task specific metric group.  *  * @return The MetricGroup of this task.  */ ;/**  * Returns the task specific metric group.  *  * @return The MetricGroup of this task.  */ TaskMetricGroup getMetricGroup().
true;;0;1;/**  * Returns the job-wide configuration object that was attached to the JobGraph.  *  * @return The job-wide configuration  */ ;/**  * Returns the job-wide configuration object that was attached to the JobGraph.  *  * @return The job-wide configuration  */ Configuration getJobConfiguration().
true;;0;1;/**  * Returns the {@link TaskInfo} object associated with this subtask  *  * @return TaskInfo for this subtask  */ ;/**  * Returns the {@link TaskInfo} object associated with this subtask  *  * @return TaskInfo for this subtask  */ TaskInfo getTaskInfo().
true;;0;1;/**  * Returns the input split provider assigned to this environment.  *  * @return The input split provider or {@code null} if no such  *         provider has been assigned to this environment.  */ ;/**  * Returns the input split provider assigned to this environment.  *  * @return The input split provider or {@code null} if no such  *         provider has been assigned to this environment.  */ InputSplitProvider getInputSplitProvider().
true;;0;1;/**  * Returns the current {@link IOManager}.  *  * @return the current {@link IOManager}.  */ ;/**  * Returns the current {@link IOManager}.  *  * @return the current {@link IOManager}.  */ IOManager getIOManager().
true;;0;1;/**  * Returns the current {@link MemoryManager}.  *  * @return the current {@link MemoryManager}.  */ ;/**  * Returns the current {@link MemoryManager}.  *  * @return the current {@link MemoryManager}.  */ MemoryManager getMemoryManager().
true;;0;1;/**  * Returns the user code class loader  */ ;/**  * Returns the user code class loader  */ ClassLoader getUserClassLoader().
false;;0;1;;Map<String, Future<Path>> getDistributedCacheEntries().
false;;0;1;;BroadcastVariableManager getBroadcastVariableManager().
false;;0;1;;TaskStateManager getTaskStateManager().
false;;0;1;;GlobalAggregateManager getGlobalAggregateManager().
true;;0;1;/**  * Return the registry for accumulators which are periodically sent to the job manager.  * @return the registry  */ ;/**  * Return the registry for accumulators which are periodically sent to the job manager.  * @return the registry  */ AccumulatorRegistry getAccumulatorRegistry().
true;;0;1;/**  * Returns the registry for {@link InternalKvState} instances.  *  * @return KvState registry  */ ;/**  * Returns the registry for {@link InternalKvState} instances.  *  * @return KvState registry  */ TaskKvStateRegistry getTaskKvStateRegistry().
true;;2;1;/**  * Confirms that the invokable has successfully completed all steps it needed to  * to for the checkpoint with the give checkpoint-ID. This method does not include  * any state in the checkpoint.  *  * @param checkpointId ID of this checkpoint  * @param checkpointMetrics metrics for this checkpoint  */ ;/**  * Confirms that the invokable has successfully completed all steps it needed to  * to for the checkpoint with the give checkpoint-ID. This method does not include  * any state in the checkpoint.  *  * @param checkpointId ID of this checkpoint  * @param checkpointMetrics metrics for this checkpoint  */ void acknowledgeCheckpoint(long checkpointId, CheckpointMetrics checkpointMetrics).
true;;3;1;/**  * Confirms that the invokable has successfully completed all required steps for  * the checkpoint with the give checkpoint-ID. This method does include  * the given state in the checkpoint.  *  * @param checkpointId ID of this checkpoint  * @param checkpointMetrics metrics for this checkpoint  * @param subtaskState All state handles for the checkpointed state  */ ;/**  * Confirms that the invokable has successfully completed all required steps for  * the checkpoint with the give checkpoint-ID. This method does include  * the given state in the checkpoint.  *  * @param checkpointId ID of this checkpoint  * @param checkpointMetrics metrics for this checkpoint  * @param subtaskState All state handles for the checkpointed state  */ void acknowledgeCheckpoint(long checkpointId, CheckpointMetrics checkpointMetrics, TaskStateSnapshot subtaskState).
true;;2;1;/**  * Declines a checkpoint. This tells the checkpoint coordinator that this task will  * not be able to successfully complete a certain checkpoint.  *  * @param checkpointId The ID of the declined checkpoint.  * @param cause An optional reason why the checkpoint was declined.  */ ;/**  * Declines a checkpoint. This tells the checkpoint coordinator that this task will  * not be able to successfully complete a certain checkpoint.  *  * @param checkpointId The ID of the declined checkpoint.  * @param cause An optional reason why the checkpoint was declined.  */ void declineCheckpoint(long checkpointId, Throwable cause).
true;;1;1;/**  * Marks task execution failed for an external reason (a reason other than the task code itself  * throwing an exception). If the task is already in a terminal state  * (such as FINISHED, CANCELED, FAILED), or if the task is already canceling this does nothing.  * Otherwise it sets the state to FAILED, and, if the invokable code is running,  * starts an asynchronous thread that aborts that code.  *  * <p>This method never blocks.  */ ;/**  * Marks task execution failed for an external reason (a reason other than the task code itself  * throwing an exception). If the task is already in a terminal state  * (such as FINISHED, CANCELED, FAILED), or if the task is already canceling this does nothing.  * Otherwise it sets the state to FAILED, and, if the invokable code is running,  * starts an asynchronous thread that aborts that code.  *  * <p>This method never blocks.  */ void failExternally(Throwable cause).
false;;1;1;;// -------------------------------------------------------------------------------------------- // Fields relevant to the I/O system. Should go into Task // -------------------------------------------------------------------------------------------- ResultPartitionWriter getWriter(int index).
false;;0;1;;ResultPartitionWriter[] getAllWriters().
false;;1;1;;InputGate getInputGate(int index).
false;;0;1;;InputGate[] getAllInputGates().
false;;0;1;;TaskEventDispatcher getTaskEventDispatcher().
