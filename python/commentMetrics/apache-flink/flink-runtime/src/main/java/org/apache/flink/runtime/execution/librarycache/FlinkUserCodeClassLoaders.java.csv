commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;3;;public static URLClassLoader parentFirst(URL[] urls, ClassLoader parent) {     return new ParentFirstClassLoader(urls, parent). }
false;public,static;3;6;;public static URLClassLoader childFirst(URL[] urls, ClassLoader parent, String[] alwaysParentFirstPatterns) {     return new ChildFirstClassLoader(urls, parent, alwaysParentFirstPatterns). }
false;public,static;4;12;;public static URLClassLoader create(ResolveOrder resolveOrder, URL[] urls, ClassLoader parent, String[] alwaysParentFirstPatterns) {     switch(resolveOrder) {         case CHILD_FIRST:             return childFirst(urls, parent, alwaysParentFirstPatterns).         case PARENT_FIRST:             return parentFirst(urls, parent).         default:             throw new IllegalArgumentException("Unknown class resolution order: " + resolveOrder).     } }
false;public,static;1;9;;public static ResolveOrder fromString(String resolveOrder) {     if (resolveOrder.equalsIgnoreCase("parent-first")) {         return PARENT_FIRST.     } else if (resolveOrder.equalsIgnoreCase("child-first")) {         return CHILD_FIRST.     } else {         throw new IllegalArgumentException("Unknown resolve order: " + resolveOrder).     } }
false;protected,synchronized;2;30;;@Override protected synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {     // First, check if the class has already been loaded     Class<?> c = findLoadedClass(name).     if (c == null) {         // check whether the class should go parent-first         for (String alwaysParentFirstPattern : alwaysParentFirstPatterns) {             if (name.startsWith(alwaysParentFirstPattern)) {                 return super.loadClass(name, resolve).             }         }         try {             // check the URLs             c = findClass(name).         } catch (ClassNotFoundException e) {             // let URLClassLoader do it, which will eventually call the parent             c = super.loadClass(name, resolve).         }     }     if (resolve) {         resolveClass(c).     }     return c. }
false;public;1;12;;@Override public URL getResource(String name) {     // first, try and find it via the URLClassloader     URL urlClassLoaderResource = findResource(name).     if (urlClassLoaderResource != null) {         return urlClassLoaderResource.     }     // delegate to super     return super.getResource(name). }
false;public;0;3;;public boolean hasMoreElements() {     return iter.hasNext(). }
false;public;0;3;;public URL nextElement() {     return iter.next(). }
false;public;1;30;;@Override public Enumeration<URL> getResources(String name) throws IOException {     // first get resources from URLClassloader     Enumeration<URL> urlClassLoaderResources = findResources(name).     final List<URL> result = new ArrayList<>().     while (urlClassLoaderResources.hasMoreElements()) {         result.add(urlClassLoaderResources.nextElement()).     }     // get parent urls     Enumeration<URL> parentResources = getParent().getResources(name).     while (parentResources.hasMoreElements()) {         result.add(parentResources.nextElement()).     }     return new Enumeration<URL>() {          Iterator<URL> iter = result.iterator().          public boolean hasMoreElements() {             return iter.hasNext().         }          public URL nextElement() {             return iter.next().         }     }. }
