commented;modifiers;parameterAmount;loc;comment;code
true;;0;2;/**  * This method returns {@link StateKeyGroupWriter} and should be called in the asynchronous part of the snapshot.  */ ;/**  * This method returns {@link StateKeyGroupWriter} and should be called in the asynchronous part of the snapshot.  */ @Nonnull StateKeyGroupWriter getKeyGroupWriter().
true;;0;2;/**  * Returns a snapshot of the state's meta data.  */ ;/**  * Returns a snapshot of the state's meta data.  */ @Nonnull StateMetaInfoSnapshot getMetaInfoSnapshot().
true;;0;1;/**  * Release the snapshot. All snapshots should be released when they are no longer used because some implementation  * can only release resources after a release. Produced {@link StateKeyGroupWriter} should no longer be used  * after calling this method.  */ ;/**  * Release the snapshot. All snapshots should be released when they are no longer used because some implementation  * can only release resources after a release. Produced {@link StateKeyGroupWriter} should no longer be used  * after calling this method.  */ void release().
true;;2;1;/**  * Writes the data for the specified key-group to the output. You must call {@link #getKeyGroupWriter()} once  * before first calling this method.  *  * @param dov        the output.  * @param keyGroupId the key-group to write.  * @throws IOException on write-related problems.  */ ;/**  * Writes the data for the specified key-group to the output. You must call {@link #getKeyGroupWriter()} once  * before first calling this method.  *  * @param dov        the output.  * @param keyGroupId the key-group to write.  * @throws IOException on write-related problems.  */ void writeStateInKeyGroup(@Nonnull DataOutputView dov, @Nonnegative int keyGroupId) throws IOException.
