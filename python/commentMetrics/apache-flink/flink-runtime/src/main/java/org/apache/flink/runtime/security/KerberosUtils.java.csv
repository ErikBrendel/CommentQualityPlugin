commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;5;/* Return the Kerberos login module name */ ;/* Return the Kerberos login module name */ public static String getKrb5LoginModuleName() {     return System.getProperty("java.vendor").contains("IBM") ? "com.ibm.security.auth.module.Krb5LoginModule" : "com.sun.security.auth.module.Krb5LoginModule". }
false;public,static;0;3;;public static AppConfigurationEntry ticketCacheEntry() {     return userKerberosAce. }
false;public,static;2;28;;public static AppConfigurationEntry keytabEntry(String keytab, String principal) {     checkNotNull(keytab, "keytab").     checkNotNull(principal, "principal").     Map<String, String> keytabKerberosOptions = new HashMap<>().     if (IBM_JAVA) {         keytabKerberosOptions.put("useKeytab", prependFileUri(keytab)).         keytabKerberosOptions.put("credsType", "both").     } else {         keytabKerberosOptions.put("keyTab", keytab).         keytabKerberosOptions.put("doNotPrompt", "true").         keytabKerberosOptions.put("useKeyTab", "true").         keytabKerberosOptions.put("storeKey", "true").     }     keytabKerberosOptions.put("principal", principal).     keytabKerberosOptions.put("refreshKrb5Config", "true").     keytabKerberosOptions.putAll(debugOptions).     AppConfigurationEntry keytabKerberosAce = new AppConfigurationEntry(getKrb5LoginModuleName(), AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, keytabKerberosOptions).     return keytabKerberosAce. }
false;private,static;1;4;;private static String prependFileUri(String keytabPath) {     File f = new File(keytabPath).     return f.toURI().toString(). }
