commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * Closes the stream after all metadata was written and finalizes the checkpoint location.  *  * @return An object representing a finalized checkpoint storage location.  *  * @throws IOException Thrown, if the stream cannot be closed or the finalization fails.  */ ;/**  * Closes the stream after all metadata was written and finalizes the checkpoint location.  *  * @return An object representing a finalized checkpoint storage location.  *  * @throws IOException Thrown, if the stream cannot be closed or the finalization fails.  */ public abstract CompletedCheckpointStorageLocation closeAndFinalizeCheckpoint() throws IOException.
true;public,abstract;0;2;/**  * This method should close the stream, if has not been closed before.  * If this method actually closes the stream, it should delete/release the  * resource behind the stream, such as the file that the stream writes to.  *  * <p>The above implies that this method is intended to be the "unsuccessful close",  * such as when cancelling the stream writing, or when an exception occurs.  * Closing the stream for the successful case must go through {@link #closeAndFinalizeCheckpoint()}.  *  * @throws IOException Thrown, if the stream cannot be closed.  */ ;/**  * This method should close the stream, if has not been closed before.  * If this method actually closes the stream, it should delete/release the  * resource behind the stream, such as the file that the stream writes to.  *  * <p>The above implies that this method is intended to be the "unsuccessful close",  * such as when cancelling the stream writing, or when an exception occurs.  * Closing the stream for the successful case must go through {@link #closeAndFinalizeCheckpoint()}.  *  * @throws IOException Thrown, if the stream cannot be closed.  */ @Override public abstract void close() throws IOException.
