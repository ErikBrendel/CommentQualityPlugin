commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Starts the leader election service. This method can only be called once.  *  * @param contender LeaderContender which applies for the leadership  * @throws Exception  */ ;/**  * Starts the leader election service. This method can only be called once.  *  * @param contender LeaderContender which applies for the leadership  * @throws Exception  */ void start(LeaderContender contender) throws Exception.
true;;0;1;/**  * Stops the leader election service.  * @throws Exception  */ ;/**  * Stops the leader election service.  * @throws Exception  */ void stop() throws Exception.
true;;1;1;/**  * Confirms that the new leader session ID has been successfully received by the new leader.  * This method is usually called by the newly appointed {@link LeaderContender}.  *  * The rational behind this method is to establish an order between setting the new leader  * session ID in the {@link LeaderContender} and publishing the new leader session ID to the  * leader retrieval services.  *  * @param leaderSessionID The new leader session ID  */ ;/**  * Confirms that the new leader session ID has been successfully received by the new leader.  * This method is usually called by the newly appointed {@link LeaderContender}.  *  * The rational behind this method is to establish an order between setting the new leader  * session ID in the {@link LeaderContender} and publishing the new leader session ID to the  * leader retrieval services.  *  * @param leaderSessionID The new leader session ID  */ void confirmLeaderSessionID(UUID leaderSessionID).
true;;1;1;/**  * Returns true if the {@link LeaderContender} with which the service has been started owns  * currently the leadership under the given leader session id.  *  * @param leaderSessionId identifying the current leader  *  * @return true if the associated {@link LeaderContender} is the leader, otherwise false  */ ;/**  * Returns true if the {@link LeaderContender} with which the service has been started owns  * currently the leadership under the given leader session id.  *  * @param leaderSessionId identifying the current leader  *  * @return true if the associated {@link LeaderContender} is the leader, otherwise false  */ boolean hasLeadership(@Nonnull UUID leaderSessionId).
