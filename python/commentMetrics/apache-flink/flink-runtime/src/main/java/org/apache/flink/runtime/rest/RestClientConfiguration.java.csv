commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Returns the {@link SSLEngine} that the REST client endpoint should use.  *  * @return SSLEngine that the REST client endpoint should use, or null if SSL was disabled  */ ;/**  * Returns the {@link SSLEngine} that the REST client endpoint should use.  *  * @return SSLEngine that the REST client endpoint should use, or null if SSL was disabled  */ @Nullable public SSLHandlerFactory getSslHandlerFactory() {     return sslHandlerFactory. }
true;public;0;3;/**  * {@see RestOptions#CONNECTION_TIMEOUT}.  */ ;/**  * {@see RestOptions#CONNECTION_TIMEOUT}.  */ public long getConnectionTimeout() {     return connectionTimeout. }
true;public;0;3;/**  * {@see RestOptions#IDLENESS_TIMEOUT}.  */ ;/**  * {@see RestOptions#IDLENESS_TIMEOUT}.  */ public long getIdlenessTimeout() {     return idlenessTimeout. }
true;public;0;3;/**  * Returns the max content length that the REST client endpoint could handle.  *  * @return max content length that the REST client endpoint could handle  */ ;/**  * Returns the max content length that the REST client endpoint could handle.  *  * @return max content length that the REST client endpoint could handle  */ public int getMaxContentLength() {     return maxContentLength. }
false;public,static;1;22;;/**  * Creates and returns a new {@link RestClientConfiguration} from the given {@link Configuration}.  *  * @param config configuration from which the REST client endpoint configuration should be created from  * @return REST client endpoint configuration  * @throws ConfigurationException if SSL was configured incorrectly  */ public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException {     Preconditions.checkNotNull(config).     final SSLHandlerFactory sslHandlerFactory.     if (SSLUtils.isRestSSLEnabled(config)) {         try {             sslHandlerFactory = SSLUtils.createRestClientSSLEngineFactory(config).         } catch (Exception e) {             throw new ConfigurationException("Failed to initialize SSLContext for the REST client", e).         }     } else {         sslHandlerFactory = null.     }     final long connectionTimeout = config.getLong(RestOptions.CONNECTION_TIMEOUT).     final long idlenessTimeout = config.getLong(RestOptions.IDLENESS_TIMEOUT).     int maxContentLength = config.getInteger(RestOptions.CLIENT_MAX_CONTENT_LENGTH).     return new RestClientConfiguration(sslHandlerFactory, connectionTimeout, idlenessTimeout, maxContentLength). }
