# id;timestamp;commentText;codeText;commentWords;codeWords
RestClientConfiguration -> public SSLEngine getSslEngine();1503738660;Returns the {@link SSLEngine} that the REST client endpoint should use.__@return SSLEngine that the REST client endpoint should use, or null if SSL was disabled;public SSLEngine getSslEngine() {_		return sslEngine__	};returns,the,link,sslengine,that,the,rest,client,endpoint,should,use,return,sslengine,that,the,rest,client,endpoint,should,use,or,null,if,ssl,was,disabled;public,sslengine,get,ssl,engine,return,ssl,engine
RestClientConfiguration -> public SSLEngine getSslEngine();1516971025;Returns the {@link SSLEngine} that the REST client endpoint should use.__@return SSLEngine that the REST client endpoint should use, or null if SSL was disabled;public SSLEngine getSslEngine() {_		return sslEngine__	};returns,the,link,sslengine,that,the,rest,client,endpoint,should,use,return,sslengine,that,the,rest,client,endpoint,should,use,or,null,if,ssl,was,disabled;public,sslengine,get,ssl,engine,return,ssl,engine
RestClientConfiguration -> public SSLEngine getSslEngine();1521016670;Returns the {@link SSLEngine} that the REST client endpoint should use.__@return SSLEngine that the REST client endpoint should use, or null if SSL was disabled;public SSLEngine getSslEngine() {_		return sslEngine__	};returns,the,link,sslengine,that,the,rest,client,endpoint,should,use,return,sslengine,that,the,rest,client,endpoint,should,use,or,null,if,ssl,was,disabled;public,sslengine,get,ssl,engine,return,ssl,engine
RestClientConfiguration -> public SSLEngine getSslEngine();1521016671;Returns the {@link SSLEngine} that the REST client endpoint should use.__@return SSLEngine that the REST client endpoint should use, or null if SSL was disabled;public SSLEngine getSslEngine() {_		return sslEngine__	};returns,the,link,sslengine,that,the,rest,client,endpoint,should,use,return,sslengine,that,the,rest,client,endpoint,should,use,or,null,if,ssl,was,disabled;public,sslengine,get,ssl,engine,return,ssl,engine
RestClientConfiguration -> public SSLEngine getSslEngine();1524124694;Returns the {@link SSLEngine} that the REST client endpoint should use.__@return SSLEngine that the REST client endpoint should use, or null if SSL was disabled;public SSLEngine getSslEngine() {_		return sslEngine__	};returns,the,link,sslengine,that,the,rest,client,endpoint,should,use,return,sslengine,that,the,rest,client,endpoint,should,use,or,null,if,ssl,was,disabled;public,sslengine,get,ssl,engine,return,ssl,engine
RestClientConfiguration -> public long getConnectionTimeout();1516971025;@see RestOptions#CONNECTION_TIMEOUT;public long getConnectionTimeout() {_		return connectionTimeout__	};see,rest,options;public,long,get,connection,timeout,return,connection,timeout
RestClientConfiguration -> public long getConnectionTimeout();1521016670;@see RestOptions#CONNECTION_TIMEOUT;public long getConnectionTimeout() {_		return connectionTimeout__	};see,rest,options;public,long,get,connection,timeout,return,connection,timeout
RestClientConfiguration -> public long getConnectionTimeout();1521016671;@see RestOptions#CONNECTION_TIMEOUT;public long getConnectionTimeout() {_		return connectionTimeout__	};see,rest,options;public,long,get,connection,timeout,return,connection,timeout
RestClientConfiguration -> public long getConnectionTimeout();1524124694;@see RestOptions#CONNECTION_TIMEOUT;public long getConnectionTimeout() {_		return connectionTimeout__	};see,rest,options;public,long,get,connection,timeout,return,connection,timeout
RestClientConfiguration -> public long getConnectionTimeout();1525904579;@see RestOptions#CONNECTION_TIMEOUT;public long getConnectionTimeout() {_		return connectionTimeout__	};see,rest,options;public,long,get,connection,timeout,return,connection,timeout
RestClientConfiguration -> public long getConnectionTimeout();1531721446;@see RestOptions#CONNECTION_TIMEOUT;public long getConnectionTimeout() {_		return connectionTimeout__	};see,rest,options;public,long,get,connection,timeout,return,connection,timeout
RestClientConfiguration -> public long getConnectionTimeout();1533747688;@see RestOptions#CONNECTION_TIMEOUT;public long getConnectionTimeout() {_		return connectionTimeout__	};see,rest,options;public,long,get,connection,timeout,return,connection,timeout
RestClientConfiguration -> public long getConnectionTimeout();1538064457;{@see RestOptions#CONNECTION_TIMEOUT}.;public long getConnectionTimeout() {_		return connectionTimeout__	};see,rest,options;public,long,get,connection,timeout,return,connection,timeout
RestClientConfiguration -> public long getConnectionTimeout();1540215410;{@see RestOptions#CONNECTION_TIMEOUT}.;public long getConnectionTimeout() {_		return connectionTimeout__	};see,rest,options;public,long,get,connection,timeout,return,connection,timeout
RestClientConfiguration -> @Nullable 	public SSLEngineFactory getSslEngineFactory();1525904579;Returns the {@link SSLEngine} that the REST client endpoint should use.__@return SSLEngine that the REST client endpoint should use, or null if SSL was disabled;@Nullable_	public SSLEngineFactory getSslEngineFactory() {_		return sslEngineFactory__	};returns,the,link,sslengine,that,the,rest,client,endpoint,should,use,return,sslengine,that,the,rest,client,endpoint,should,use,or,null,if,ssl,was,disabled;nullable,public,sslengine,factory,get,ssl,engine,factory,return,ssl,engine,factory
RestClientConfiguration -> @Nullable 	public SSLEngineFactory getSslEngineFactory();1531721446;Returns the {@link SSLEngine} that the REST client endpoint should use.__@return SSLEngine that the REST client endpoint should use, or null if SSL was disabled;@Nullable_	public SSLEngineFactory getSslEngineFactory() {_		return sslEngineFactory__	};returns,the,link,sslengine,that,the,rest,client,endpoint,should,use,return,sslengine,that,the,rest,client,endpoint,should,use,or,null,if,ssl,was,disabled;nullable,public,sslengine,factory,get,ssl,engine,factory,return,ssl,engine,factory
RestClientConfiguration -> @Nullable 	public SSLEngineFactory getSslEngineFactory();1533747688;Returns the {@link SSLEngine} that the REST client endpoint should use.__@return SSLEngine that the REST client endpoint should use, or null if SSL was disabled;@Nullable_	public SSLEngineFactory getSslEngineFactory() {_		return sslEngineFactory__	};returns,the,link,sslengine,that,the,rest,client,endpoint,should,use,return,sslengine,that,the,rest,client,endpoint,should,use,or,null,if,ssl,was,disabled;nullable,public,sslengine,factory,get,ssl,engine,factory,return,ssl,engine,factory
RestClientConfiguration -> @Nullable 	public SSLEngineFactory getSslEngineFactory();1538064457;Returns the {@link SSLEngine} that the REST client endpoint should use.__@return SSLEngine that the REST client endpoint should use, or null if SSL was disabled;@Nullable_	public SSLEngineFactory getSslEngineFactory() {_		return sslEngineFactory__	};returns,the,link,sslengine,that,the,rest,client,endpoint,should,use,return,sslengine,that,the,rest,client,endpoint,should,use,or,null,if,ssl,was,disabled;nullable,public,sslengine,factory,get,ssl,engine,factory,return,ssl,engine,factory
RestClientConfiguration -> public long getIdlenessTimeout();1538064457;{@see RestOptions#IDLENESS_TIMEOUT}.;public long getIdlenessTimeout() {_		return idlenessTimeout__	};see,rest,options;public,long,get,idleness,timeout,return,idleness,timeout
RestClientConfiguration -> public long getIdlenessTimeout();1540215410;{@see RestOptions#IDLENESS_TIMEOUT}.;public long getIdlenessTimeout() {_		return idlenessTimeout__	};see,rest,options;public,long,get,idleness,timeout,return,idleness,timeout
RestClientConfiguration -> public int getMaxContentLength();1521016670;Returns the max content length that the REST client endpoint could handle.__@return max content length that the REST client endpoint could handle;public int getMaxContentLength() {_		return maxContentLength__	};returns,the,max,content,length,that,the,rest,client,endpoint,could,handle,return,max,content,length,that,the,rest,client,endpoint,could,handle;public,int,get,max,content,length,return,max,content,length
RestClientConfiguration -> public int getMaxContentLength();1521016671;Returns the max content length that the REST client endpoint could handle.__@return max content length that the REST client endpoint could handle;public int getMaxContentLength() {_		return maxContentLength__	};returns,the,max,content,length,that,the,rest,client,endpoint,could,handle,return,max,content,length,that,the,rest,client,endpoint,could,handle;public,int,get,max,content,length,return,max,content,length
RestClientConfiguration -> public int getMaxContentLength();1524124694;Returns the max content length that the REST client endpoint could handle.__@return max content length that the REST client endpoint could handle;public int getMaxContentLength() {_		return maxContentLength__	};returns,the,max,content,length,that,the,rest,client,endpoint,could,handle,return,max,content,length,that,the,rest,client,endpoint,could,handle;public,int,get,max,content,length,return,max,content,length
RestClientConfiguration -> public int getMaxContentLength();1525904579;Returns the max content length that the REST client endpoint could handle.__@return max content length that the REST client endpoint could handle;public int getMaxContentLength() {_		return maxContentLength__	};returns,the,max,content,length,that,the,rest,client,endpoint,could,handle,return,max,content,length,that,the,rest,client,endpoint,could,handle;public,int,get,max,content,length,return,max,content,length
RestClientConfiguration -> public int getMaxContentLength();1531721446;Returns the max content length that the REST client endpoint could handle.__@return max content length that the REST client endpoint could handle;public int getMaxContentLength() {_		return maxContentLength__	};returns,the,max,content,length,that,the,rest,client,endpoint,could,handle,return,max,content,length,that,the,rest,client,endpoint,could,handle;public,int,get,max,content,length,return,max,content,length
RestClientConfiguration -> public int getMaxContentLength();1533747688;Returns the max content length that the REST client endpoint could handle.__@return max content length that the REST client endpoint could handle;public int getMaxContentLength() {_		return maxContentLength__	};returns,the,max,content,length,that,the,rest,client,endpoint,could,handle,return,max,content,length,that,the,rest,client,endpoint,could,handle;public,int,get,max,content,length,return,max,content,length
RestClientConfiguration -> public int getMaxContentLength();1538064457;Returns the max content length that the REST client endpoint could handle.__@return max content length that the REST client endpoint could handle;public int getMaxContentLength() {_		return maxContentLength__	};returns,the,max,content,length,that,the,rest,client,endpoint,could,handle,return,max,content,length,that,the,rest,client,endpoint,could,handle;public,int,get,max,content,length,return,max,content,length
RestClientConfiguration -> public int getMaxContentLength();1540215410;Returns the max content length that the REST client endpoint could handle.__@return max content length that the REST client endpoint could handle;public int getMaxContentLength() {_		return maxContentLength__	};returns,the,max,content,length,that,the,rest,client,endpoint,could,handle,return,max,content,length,that,the,rest,client,endpoint,could,handle;public,int,get,max,content,length,return,max,content,length
RestClientConfiguration -> public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException;1503738660;Creates and returns a new {@link RestClientConfiguration} from the given {@link Configuration}.__@param config configuration from which the REST client endpoint configuration should be created from_@return REST client endpoint configuration_@throws ConfigurationException if SSL was configured incorrectly;public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException {_		Preconditions.checkNotNull(config)___		SSLEngine sslEngine = null__		boolean enableSSL = config.getBoolean(SecurityOptions.SSL_ENABLED)__		if (enableSSL) {_			try {_				SSLContext sslContext = SSLUtils.createSSLServerContext(config)__				if (sslContext != null) {_					sslEngine = sslContext.createSSLEngine()__					SSLUtils.setSSLVerAndCipherSuites(sslEngine, config)__					sslEngine.setUseClientMode(false)__				}_			} catch (Exception e) {_				throw new ConfigurationException("Failed to initialize SSLContext for the web frontend", e)__			}_		}__		return new RestClientConfiguration(sslEngine)__	};creates,and,returns,a,new,link,rest,client,configuration,from,the,given,link,configuration,param,config,configuration,from,which,the,rest,client,endpoint,configuration,should,be,created,from,return,rest,client,endpoint,configuration,throws,configuration,exception,if,ssl,was,configured,incorrectly;public,static,rest,client,configuration,from,configuration,configuration,config,throws,configuration,exception,preconditions,check,not,null,config,sslengine,ssl,engine,null,boolean,enable,ssl,config,get,boolean,security,options,if,enable,ssl,try,sslcontext,ssl,context,sslutils,create,sslserver,context,config,if,ssl,context,null,ssl,engine,ssl,context,create,sslengine,sslutils,set,sslver,and,cipher,suites,ssl,engine,config,ssl,engine,set,use,client,mode,false,catch,exception,e,throw,new,configuration,exception,failed,to,initialize,sslcontext,for,the,web,frontend,e,return,new,rest,client,configuration,ssl,engine
RestClientConfiguration -> public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException;1516971025;Creates and returns a new {@link RestClientConfiguration} from the given {@link Configuration}.__@param config configuration from which the REST client endpoint configuration should be created from_@return REST client endpoint configuration_@throws ConfigurationException if SSL was configured incorrectly;public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException {_		Preconditions.checkNotNull(config)___		SSLEngine sslEngine = null__		boolean enableSSL = config.getBoolean(SecurityOptions.SSL_ENABLED)__		if (enableSSL) {_			try {_				SSLContext sslContext = SSLUtils.createSSLServerContext(config)__				if (sslContext != null) {_					sslEngine = sslContext.createSSLEngine()__					SSLUtils.setSSLVerAndCipherSuites(sslEngine, config)__					sslEngine.setUseClientMode(false)__				}_			} catch (Exception e) {_				throw new ConfigurationException("Failed to initialize SSLContext for the web frontend", e)__			}_		}__		final long connectionTimeout = config.getLong(RestOptions.CONNECTION_TIMEOUT)___		return new RestClientConfiguration(sslEngine, connectionTimeout)__	};creates,and,returns,a,new,link,rest,client,configuration,from,the,given,link,configuration,param,config,configuration,from,which,the,rest,client,endpoint,configuration,should,be,created,from,return,rest,client,endpoint,configuration,throws,configuration,exception,if,ssl,was,configured,incorrectly;public,static,rest,client,configuration,from,configuration,configuration,config,throws,configuration,exception,preconditions,check,not,null,config,sslengine,ssl,engine,null,boolean,enable,ssl,config,get,boolean,security,options,if,enable,ssl,try,sslcontext,ssl,context,sslutils,create,sslserver,context,config,if,ssl,context,null,ssl,engine,ssl,context,create,sslengine,sslutils,set,sslver,and,cipher,suites,ssl,engine,config,ssl,engine,set,use,client,mode,false,catch,exception,e,throw,new,configuration,exception,failed,to,initialize,sslcontext,for,the,web,frontend,e,final,long,connection,timeout,config,get,long,rest,options,return,new,rest,client,configuration,ssl,engine,connection,timeout
RestClientConfiguration -> public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException;1521016670;Creates and returns a new {@link RestClientConfiguration} from the given {@link Configuration}.__@param config configuration from which the REST client endpoint configuration should be created from_@return REST client endpoint configuration_@throws ConfigurationException if SSL was configured incorrectly;public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException {_		Preconditions.checkNotNull(config)___		SSLEngine sslEngine = null__		boolean enableSSL = config.getBoolean(SecurityOptions.SSL_ENABLED)__		if (enableSSL) {_			try {_				SSLContext sslContext = SSLUtils.createSSLServerContext(config)__				if (sslContext != null) {_					sslEngine = sslContext.createSSLEngine()__					SSLUtils.setSSLVerAndCipherSuites(sslEngine, config)__					sslEngine.setUseClientMode(false)__				}_			} catch (Exception e) {_				throw new ConfigurationException("Failed to initialize SSLContext for the web frontend", e)__			}_		}__		final long connectionTimeout = config.getLong(RestOptions.CONNECTION_TIMEOUT)___		int maxContentLength = config.getInteger(RestOptions.REST_CLIENT_CONTENT_MAX_MB) * 1024 * 1024__		if (maxContentLength <= 0) {_			throw new ConfigurationException("Max content length for client must be a positive integer: " + maxContentLength)__		}__		return new RestClientConfiguration(sslEngine, connectionTimeout, maxContentLength)__	};creates,and,returns,a,new,link,rest,client,configuration,from,the,given,link,configuration,param,config,configuration,from,which,the,rest,client,endpoint,configuration,should,be,created,from,return,rest,client,endpoint,configuration,throws,configuration,exception,if,ssl,was,configured,incorrectly;public,static,rest,client,configuration,from,configuration,configuration,config,throws,configuration,exception,preconditions,check,not,null,config,sslengine,ssl,engine,null,boolean,enable,ssl,config,get,boolean,security,options,if,enable,ssl,try,sslcontext,ssl,context,sslutils,create,sslserver,context,config,if,ssl,context,null,ssl,engine,ssl,context,create,sslengine,sslutils,set,sslver,and,cipher,suites,ssl,engine,config,ssl,engine,set,use,client,mode,false,catch,exception,e,throw,new,configuration,exception,failed,to,initialize,sslcontext,for,the,web,frontend,e,final,long,connection,timeout,config,get,long,rest,options,int,max,content,length,config,get,integer,rest,options,1024,1024,if,max,content,length,0,throw,new,configuration,exception,max,content,length,for,client,must,be,a,positive,integer,max,content,length,return,new,rest,client,configuration,ssl,engine,connection,timeout,max,content,length
RestClientConfiguration -> public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException;1521016671;Creates and returns a new {@link RestClientConfiguration} from the given {@link Configuration}.__@param config configuration from which the REST client endpoint configuration should be created from_@return REST client endpoint configuration_@throws ConfigurationException if SSL was configured incorrectly;public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException {_		Preconditions.checkNotNull(config)___		SSLEngine sslEngine = null__		boolean enableSSL = config.getBoolean(SecurityOptions.SSL_ENABLED)__		if (enableSSL) {_			try {_				SSLContext sslContext = SSLUtils.createSSLServerContext(config)__				if (sslContext != null) {_					sslEngine = sslContext.createSSLEngine()__					SSLUtils.setSSLVerAndCipherSuites(sslEngine, config)__					sslEngine.setUseClientMode(false)__				}_			} catch (Exception e) {_				throw new ConfigurationException("Failed to initialize SSLContext for the web frontend", e)__			}_		}__		final long connectionTimeout = config.getLong(RestOptions.CONNECTION_TIMEOUT)___		int maxContentLength = config.getInteger(RestOptions.REST_CLIENT_MAX_CONTENT_LENGTH)___		return new RestClientConfiguration(sslEngine, connectionTimeout, maxContentLength)__	};creates,and,returns,a,new,link,rest,client,configuration,from,the,given,link,configuration,param,config,configuration,from,which,the,rest,client,endpoint,configuration,should,be,created,from,return,rest,client,endpoint,configuration,throws,configuration,exception,if,ssl,was,configured,incorrectly;public,static,rest,client,configuration,from,configuration,configuration,config,throws,configuration,exception,preconditions,check,not,null,config,sslengine,ssl,engine,null,boolean,enable,ssl,config,get,boolean,security,options,if,enable,ssl,try,sslcontext,ssl,context,sslutils,create,sslserver,context,config,if,ssl,context,null,ssl,engine,ssl,context,create,sslengine,sslutils,set,sslver,and,cipher,suites,ssl,engine,config,ssl,engine,set,use,client,mode,false,catch,exception,e,throw,new,configuration,exception,failed,to,initialize,sslcontext,for,the,web,frontend,e,final,long,connection,timeout,config,get,long,rest,options,int,max,content,length,config,get,integer,rest,options,return,new,rest,client,configuration,ssl,engine,connection,timeout,max,content,length
RestClientConfiguration -> public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException;1524124694;Creates and returns a new {@link RestClientConfiguration} from the given {@link Configuration}.__@param config configuration from which the REST client endpoint configuration should be created from_@return REST client endpoint configuration_@throws ConfigurationException if SSL was configured incorrectly;public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException {_		Preconditions.checkNotNull(config)___		SSLEngine sslEngine = null__		boolean enableSSL = config.getBoolean(SecurityOptions.SSL_ENABLED)__		if (enableSSL) {_			try {_				SSLContext sslContext = SSLUtils.createSSLServerContext(config)__				if (sslContext != null) {_					sslEngine = sslContext.createSSLEngine()__					SSLUtils.setSSLVerAndCipherSuites(sslEngine, config)__					sslEngine.setUseClientMode(false)__				}_			} catch (Exception e) {_				throw new ConfigurationException("Failed to initialize SSLContext for the web frontend", e)__			}_		}__		final long connectionTimeout = config.getLong(RestOptions.CONNECTION_TIMEOUT)___		int maxContentLength = config.getInteger(RestOptions.CLIENT_MAX_CONTENT_LENGTH)___		return new RestClientConfiguration(sslEngine, connectionTimeout, maxContentLength)__	};creates,and,returns,a,new,link,rest,client,configuration,from,the,given,link,configuration,param,config,configuration,from,which,the,rest,client,endpoint,configuration,should,be,created,from,return,rest,client,endpoint,configuration,throws,configuration,exception,if,ssl,was,configured,incorrectly;public,static,rest,client,configuration,from,configuration,configuration,config,throws,configuration,exception,preconditions,check,not,null,config,sslengine,ssl,engine,null,boolean,enable,ssl,config,get,boolean,security,options,if,enable,ssl,try,sslcontext,ssl,context,sslutils,create,sslserver,context,config,if,ssl,context,null,ssl,engine,ssl,context,create,sslengine,sslutils,set,sslver,and,cipher,suites,ssl,engine,config,ssl,engine,set,use,client,mode,false,catch,exception,e,throw,new,configuration,exception,failed,to,initialize,sslcontext,for,the,web,frontend,e,final,long,connection,timeout,config,get,long,rest,options,int,max,content,length,config,get,integer,rest,options,return,new,rest,client,configuration,ssl,engine,connection,timeout,max,content,length
RestClientConfiguration -> public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException;1525904579;Creates and returns a new {@link RestClientConfiguration} from the given {@link Configuration}.__@param config configuration from which the REST client endpoint configuration should be created from_@return REST client endpoint configuration_@throws ConfigurationException if SSL was configured incorrectly;public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException {_		Preconditions.checkNotNull(config)___		final SSLEngineFactory sslEngineFactory__		final boolean enableSSL = config.getBoolean(SecurityOptions.SSL_ENABLED)__		if (enableSSL) {_			try {_				sslEngineFactory = SSLUtils.createClientSSLEngineFactory(config)__			} catch (Exception e) {_				throw new ConfigurationException("Failed to initialize SSLContext for the web frontend", e)__			}_		} else {_			sslEngineFactory = null__		}__		final long connectionTimeout = config.getLong(RestOptions.CONNECTION_TIMEOUT)___		int maxContentLength = config.getInteger(RestOptions.CLIENT_MAX_CONTENT_LENGTH)___		return new RestClientConfiguration(sslEngineFactory, connectionTimeout, maxContentLength)__	};creates,and,returns,a,new,link,rest,client,configuration,from,the,given,link,configuration,param,config,configuration,from,which,the,rest,client,endpoint,configuration,should,be,created,from,return,rest,client,endpoint,configuration,throws,configuration,exception,if,ssl,was,configured,incorrectly;public,static,rest,client,configuration,from,configuration,configuration,config,throws,configuration,exception,preconditions,check,not,null,config,final,sslengine,factory,ssl,engine,factory,final,boolean,enable,ssl,config,get,boolean,security,options,if,enable,ssl,try,ssl,engine,factory,sslutils,create,client,sslengine,factory,config,catch,exception,e,throw,new,configuration,exception,failed,to,initialize,sslcontext,for,the,web,frontend,e,else,ssl,engine,factory,null,final,long,connection,timeout,config,get,long,rest,options,int,max,content,length,config,get,integer,rest,options,return,new,rest,client,configuration,ssl,engine,factory,connection,timeout,max,content,length
RestClientConfiguration -> public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException;1531721446;Creates and returns a new {@link RestClientConfiguration} from the given {@link Configuration}.__@param config configuration from which the REST client endpoint configuration should be created from_@return REST client endpoint configuration_@throws ConfigurationException if SSL was configured incorrectly;public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException {_		Preconditions.checkNotNull(config)___		final SSLEngineFactory sslEngineFactory__		if (SSLUtils.isRestSSLEnabled(config)) {_			try {_				sslEngineFactory = SSLUtils.createRestClientSSLEngineFactory(config)__			} catch (Exception e) {_				throw new ConfigurationException("Failed to initialize SSLContext for the web frontend", e)__			}_		} else {_			sslEngineFactory = null__		}__		final long connectionTimeout = config.getLong(RestOptions.CONNECTION_TIMEOUT)___		int maxContentLength = config.getInteger(RestOptions.CLIENT_MAX_CONTENT_LENGTH)___		return new RestClientConfiguration(sslEngineFactory, connectionTimeout, maxContentLength)__	};creates,and,returns,a,new,link,rest,client,configuration,from,the,given,link,configuration,param,config,configuration,from,which,the,rest,client,endpoint,configuration,should,be,created,from,return,rest,client,endpoint,configuration,throws,configuration,exception,if,ssl,was,configured,incorrectly;public,static,rest,client,configuration,from,configuration,configuration,config,throws,configuration,exception,preconditions,check,not,null,config,final,sslengine,factory,ssl,engine,factory,if,sslutils,is,rest,sslenabled,config,try,ssl,engine,factory,sslutils,create,rest,client,sslengine,factory,config,catch,exception,e,throw,new,configuration,exception,failed,to,initialize,sslcontext,for,the,web,frontend,e,else,ssl,engine,factory,null,final,long,connection,timeout,config,get,long,rest,options,int,max,content,length,config,get,integer,rest,options,return,new,rest,client,configuration,ssl,engine,factory,connection,timeout,max,content,length
RestClientConfiguration -> public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException;1533747688;Creates and returns a new {@link RestClientConfiguration} from the given {@link Configuration}.__@param config configuration from which the REST client endpoint configuration should be created from_@return REST client endpoint configuration_@throws ConfigurationException if SSL was configured incorrectly;public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException {_		Preconditions.checkNotNull(config)___		final SSLEngineFactory sslEngineFactory__		if (SSLUtils.isRestSSLEnabled(config)) {_			try {_				sslEngineFactory = SSLUtils.createRestClientSSLEngineFactory(config)__			} catch (Exception e) {_				throw new ConfigurationException("Failed to initialize SSLContext for the REST client", e)__			}_		} else {_			sslEngineFactory = null__		}__		final long connectionTimeout = config.getLong(RestOptions.CONNECTION_TIMEOUT)___		int maxContentLength = config.getInteger(RestOptions.CLIENT_MAX_CONTENT_LENGTH)___		return new RestClientConfiguration(sslEngineFactory, connectionTimeout, maxContentLength)__	};creates,and,returns,a,new,link,rest,client,configuration,from,the,given,link,configuration,param,config,configuration,from,which,the,rest,client,endpoint,configuration,should,be,created,from,return,rest,client,endpoint,configuration,throws,configuration,exception,if,ssl,was,configured,incorrectly;public,static,rest,client,configuration,from,configuration,configuration,config,throws,configuration,exception,preconditions,check,not,null,config,final,sslengine,factory,ssl,engine,factory,if,sslutils,is,rest,sslenabled,config,try,ssl,engine,factory,sslutils,create,rest,client,sslengine,factory,config,catch,exception,e,throw,new,configuration,exception,failed,to,initialize,sslcontext,for,the,rest,client,e,else,ssl,engine,factory,null,final,long,connection,timeout,config,get,long,rest,options,int,max,content,length,config,get,integer,rest,options,return,new,rest,client,configuration,ssl,engine,factory,connection,timeout,max,content,length
RestClientConfiguration -> public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException;1538064457;Creates and returns a new {@link RestClientConfiguration} from the given {@link Configuration}.__@param config configuration from which the REST client endpoint configuration should be created from_@return REST client endpoint configuration_@throws ConfigurationException if SSL was configured incorrectly;public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException {_		Preconditions.checkNotNull(config)___		final SSLEngineFactory sslEngineFactory__		if (SSLUtils.isRestSSLEnabled(config)) {_			try {_				sslEngineFactory = SSLUtils.createRestClientSSLEngineFactory(config)__			} catch (Exception e) {_				throw new ConfigurationException("Failed to initialize SSLContext for the REST client", e)__			}_		} else {_			sslEngineFactory = null__		}__		final long connectionTimeout = config.getLong(RestOptions.CONNECTION_TIMEOUT)___		final long idlenessTimeout = config.getLong(RestOptions.IDLENESS_TIMEOUT)___		int maxContentLength = config.getInteger(RestOptions.CLIENT_MAX_CONTENT_LENGTH)___		return new RestClientConfiguration(sslEngineFactory, connectionTimeout, idlenessTimeout, maxContentLength)__	};creates,and,returns,a,new,link,rest,client,configuration,from,the,given,link,configuration,param,config,configuration,from,which,the,rest,client,endpoint,configuration,should,be,created,from,return,rest,client,endpoint,configuration,throws,configuration,exception,if,ssl,was,configured,incorrectly;public,static,rest,client,configuration,from,configuration,configuration,config,throws,configuration,exception,preconditions,check,not,null,config,final,sslengine,factory,ssl,engine,factory,if,sslutils,is,rest,sslenabled,config,try,ssl,engine,factory,sslutils,create,rest,client,sslengine,factory,config,catch,exception,e,throw,new,configuration,exception,failed,to,initialize,sslcontext,for,the,rest,client,e,else,ssl,engine,factory,null,final,long,connection,timeout,config,get,long,rest,options,final,long,idleness,timeout,config,get,long,rest,options,int,max,content,length,config,get,integer,rest,options,return,new,rest,client,configuration,ssl,engine,factory,connection,timeout,idleness,timeout,max,content,length
RestClientConfiguration -> public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException;1540215410;Creates and returns a new {@link RestClientConfiguration} from the given {@link Configuration}.__@param config configuration from which the REST client endpoint configuration should be created from_@return REST client endpoint configuration_@throws ConfigurationException if SSL was configured incorrectly;public static RestClientConfiguration fromConfiguration(Configuration config) throws ConfigurationException {_		Preconditions.checkNotNull(config)___		final SSLHandlerFactory sslHandlerFactory__		if (SSLUtils.isRestSSLEnabled(config)) {_			try {_				sslHandlerFactory = SSLUtils.createRestClientSSLEngineFactory(config)__			} catch (Exception e) {_				throw new ConfigurationException("Failed to initialize SSLContext for the REST client", e)__			}_		} else {_			sslHandlerFactory = null__		}__		final long connectionTimeout = config.getLong(RestOptions.CONNECTION_TIMEOUT)___		final long idlenessTimeout = config.getLong(RestOptions.IDLENESS_TIMEOUT)___		int maxContentLength = config.getInteger(RestOptions.CLIENT_MAX_CONTENT_LENGTH)___		return new RestClientConfiguration(sslHandlerFactory, connectionTimeout, idlenessTimeout, maxContentLength)__	};creates,and,returns,a,new,link,rest,client,configuration,from,the,given,link,configuration,param,config,configuration,from,which,the,rest,client,endpoint,configuration,should,be,created,from,return,rest,client,endpoint,configuration,throws,configuration,exception,if,ssl,was,configured,incorrectly;public,static,rest,client,configuration,from,configuration,configuration,config,throws,configuration,exception,preconditions,check,not,null,config,final,sslhandler,factory,ssl,handler,factory,if,sslutils,is,rest,sslenabled,config,try,ssl,handler,factory,sslutils,create,rest,client,sslengine,factory,config,catch,exception,e,throw,new,configuration,exception,failed,to,initialize,sslcontext,for,the,rest,client,e,else,ssl,handler,factory,null,final,long,connection,timeout,config,get,long,rest,options,final,long,idleness,timeout,config,get,long,rest,options,int,max,content,length,config,get,integer,rest,options,return,new,rest,client,configuration,ssl,handler,factory,connection,timeout,idleness,timeout,max,content,length
