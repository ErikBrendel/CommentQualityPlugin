commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the hostname or host address under which the rpc service can be reached.  * If the rpc service cannot be contacted remotely, then it will return an empty string.  *  * @return Address of the rpc service or empty string if local rpc service  */ ;/**  * Return the hostname or host address under which the rpc service can be reached.  * If the rpc service cannot be contacted remotely, then it will return an empty string.  *  * @return Address of the rpc service or empty string if local rpc service  */ String getAddress().
true;;0;1;/**  * Return the port under which the rpc service is reachable. If the rpc service cannot be  * contacted remotely, then it will return -1.  *  * @return Port of the rpc service or -1 if local rpc service  */ ;/**  * Return the port under which the rpc service is reachable. If the rpc service cannot be  * contacted remotely, then it will return -1.  *  * @return Port of the rpc service or -1 if local rpc service  */ int getPort().
true;;2;3;/**  * Connect to a remote rpc server under the provided address. Returns a rpc gateway which can  * be used to communicate with the rpc server. If the connection failed, then the returned  * future is failed with a {@link RpcConnectionException}.  *  * @param address Address of the remote rpc server  * @param clazz Class of the rpc gateway to return  * @param <C> Type of the rpc gateway to return  * @return Future containing the rpc gateway or an {@link RpcConnectionException} if the  * connection attempt failed  */ ;/**  * Connect to a remote rpc server under the provided address. Returns a rpc gateway which can  * be used to communicate with the rpc server. If the connection failed, then the returned  * future is failed with a {@link RpcConnectionException}.  *  * @param address Address of the remote rpc server  * @param clazz Class of the rpc gateway to return  * @param <C> Type of the rpc gateway to return  * @return Future containing the rpc gateway or an {@link RpcConnectionException} if the  * connection attempt failed  */ <C extends RpcGateway> CompletableFuture<C> connect(String address, Class<C> clazz).
true;;3;4;/**  * Connect to a remote fenced rpc server under the provided address. Returns a fenced rpc gateway  * which can be used to communicate with the rpc server. If the connection failed, then the  * returned future is failed with a {@link RpcConnectionException}.  *  * @param address Address of the remote rpc server  * @param fencingToken Fencing token to be used when communicating with the server  * @param clazz Class of the rpc gateway to return  * @param <F> Type of the fencing token  * @param <C> Type of the rpc gateway to return  * @return Future containing the fenced rpc gateway or an {@link RpcConnectionException} if the  * connection attempt failed  */ ;/**  * Connect to a remote fenced rpc server under the provided address. Returns a fenced rpc gateway  * which can be used to communicate with the rpc server. If the connection failed, then the  * returned future is failed with a {@link RpcConnectionException}.  *  * @param address Address of the remote rpc server  * @param fencingToken Fencing token to be used when communicating with the server  * @param clazz Class of the rpc gateway to return  * @param <F> Type of the fencing token  * @param <C> Type of the rpc gateway to return  * @return Future containing the fenced rpc gateway or an {@link RpcConnectionException} if the  * connection attempt failed  */ <F extends Serializable, C extends FencedRpcGateway<F>> CompletableFuture<C> connect(String address, F fencingToken, Class<C> clazz).
true;;1;1;/**  * Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.  *  * @param rpcEndpoint Rpc protocol to dispatch the rpcs to  * @param <C> Type of the rpc endpoint  * @return Self gateway to dispatch remote procedure calls to oneself  */ ;/**  * Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.  *  * @param rpcEndpoint Rpc protocol to dispatch the rpcs to  * @param <C> Type of the rpc endpoint  * @return Self gateway to dispatch remote procedure calls to oneself  */ <C extends RpcEndpoint & RpcGateway> RpcServer startServer(C rpcEndpoint).
true;;2;1;/**  * Fence the given RpcServer with the given fencing token.  *  * <p>Fencing the RpcServer means that we fix the fencing token to the provided value.  * All RPCs will then be enriched with this fencing token. This expects that the receiving  * RPC endpoint extends {@link FencedRpcEndpoint}.  *  * @param rpcServer to fence with the given fencing token  * @param fencingToken to fence the RpcServer with  * @param <F> type of the fencing token  * @return Fenced RpcServer  */ ;/**  * Fence the given RpcServer with the given fencing token.  *  * <p>Fencing the RpcServer means that we fix the fencing token to the provided value.  * All RPCs will then be enriched with this fencing token. This expects that the receiving  * RPC endpoint extends {@link FencedRpcEndpoint}.  *  * @param rpcServer to fence with the given fencing token  * @param fencingToken to fence the RpcServer with  * @param <F> type of the fencing token  * @return Fenced RpcServer  */ <F extends Serializable> RpcServer fenceRpcServer(RpcServer rpcServer, F fencingToken).
true;;1;1;/**  * Stop the underlying rpc server of the provided self gateway.  *  * @param selfGateway Self gateway describing the underlying rpc server  */ ;/**  * Stop the underlying rpc server of the provided self gateway.  *  * @param selfGateway Self gateway describing the underlying rpc server  */ void stopServer(RpcServer selfGateway).
true;;0;1;/**  * Trigger the asynchronous stopping of the {@link RpcService}.  *  * @return Future which is completed once the {@link RpcService} has been  * fully stopped.  */ ;/**  * Trigger the asynchronous stopping of the {@link RpcService}.  *  * @return Future which is completed once the {@link RpcService} has been  * fully stopped.  */ CompletableFuture<Void> stopService().
true;;0;1;/**  * Returns a future indicating when the RPC service has been shut down.  *  * @return Termination future  */ ;/**  * Returns a future indicating when the RPC service has been shut down.  *  * @return Termination future  */ CompletableFuture<Void> getTerminationFuture().
true;;0;1;/**  * Gets the executor, provided by this RPC service. This executor can be used for example for  * the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.  *  * <p><b>IMPORTANT:</b> This executor does not isolate the method invocations against  * any concurrent invocations and is therefore not suitable to run completion methods of futures  * that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the  * {@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that  * {@code RpcEndpoint}.  *  * @return The execution context provided by the RPC service  */ ;/**  * Gets the executor, provided by this RPC service. This executor can be used for example for  * the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.  *  * <p><b>IMPORTANT:</b> This executor does not isolate the method invocations against  * any concurrent invocations and is therefore not suitable to run completion methods of futures  * that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the  * {@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that  * {@code RpcEndpoint}.  *  * @return The execution context provided by the RPC service  */ Executor getExecutor().
true;;0;1;/**  * Gets a scheduled executor from the RPC service. This executor can be used to schedule  * tasks to be executed in the future.  *  * <p><b>IMPORTANT:</b> This executor does not isolate the method invocations against  * any concurrent invocations and is therefore not suitable to run completion methods of futures  * that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the  * {@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that  * {@code RpcEndpoint}.  *  * @return The RPC service provided scheduled executor  */ ;/**  * Gets a scheduled executor from the RPC service. This executor can be used to schedule  * tasks to be executed in the future.  *  * <p><b>IMPORTANT:</b> This executor does not isolate the method invocations against  * any concurrent invocations and is therefore not suitable to run completion methods of futures  * that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the  * {@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that  * {@code RpcEndpoint}.  *  * @return The RPC service provided scheduled executor  */ ScheduledExecutor getScheduledExecutor().
true;;3;1;/**  * Execute the runnable in the execution context of this RPC Service, as returned by  * {@link #getExecutor()}, after a scheduled delay.  *  * @param runnable Runnable to be executed  * @param delay    The delay after which the runnable will be executed  */ ;/**  * Execute the runnable in the execution context of this RPC Service, as returned by  * {@link #getExecutor()}, after a scheduled delay.  *  * @param runnable Runnable to be executed  * @param delay    The delay after which the runnable will be executed  */ ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit).
true;;1;1;/**  * Execute the given runnable in the executor of the RPC service. This method can be used to run  * code outside of the main thread of a {@link RpcEndpoint}.  *  * <p><b>IMPORTANT:</b> This executor does not isolate the method invocations against  * any concurrent invocations and is therefore not suitable to run completion methods of futures  * that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the  * {@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that  * {@code RpcEndpoint}.  *  * @param runnable to execute  */ ;/**  * Execute the given runnable in the executor of the RPC service. This method can be used to run  * code outside of the main thread of a {@link RpcEndpoint}.  *  * <p><b>IMPORTANT:</b> This executor does not isolate the method invocations against  * any concurrent invocations and is therefore not suitable to run completion methods of futures  * that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the  * {@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that  * {@code RpcEndpoint}.  *  * @param runnable to execute  */ void execute(Runnable runnable).
true;;1;1;/**  * Execute the given callable and return its result as a {@link CompletableFuture}. This method can be used  * to run code outside of the main thread of a {@link RpcEndpoint}.  *  * <p><b>IMPORTANT:</b> This executor does not isolate the method invocations against  * any concurrent invocations and is therefore not suitable to run completion methods of futures  * that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the  * {@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that  * {@code RpcEndpoint}.  *  * @param callable to execute  * @param <T> is the return value type  * @return Future containing the callable's future result  */ ;/**  * Execute the given callable and return its result as a {@link CompletableFuture}. This method can be used  * to run code outside of the main thread of a {@link RpcEndpoint}.  *  * <p><b>IMPORTANT:</b> This executor does not isolate the method invocations against  * any concurrent invocations and is therefore not suitable to run completion methods of futures  * that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the  * {@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that  * {@code RpcEndpoint}.  *  * @param callable to execute  * @param <T> is the return value type  * @return Future containing the callable's future result  */ <T> CompletableFuture<T> execute(Callable<T> callable).
