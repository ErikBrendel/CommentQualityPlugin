# id;timestamp;commentText;codeText;commentWords;codeWords
RpcService -> <C extends RpcEndpoint & RpcGateway> RpcServer startServer(C rpcEndpoint)_;1502452184;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocol to dispatch the rpcs to_@param <C> Type of the rpc endpoint_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcEndpoint & RpcGateway> RpcServer startServer(C rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocol,to,dispatch,the,rpcs,to,param,c,type,of,the,rpc,endpoint,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,endpoint,rpc,gateway,rpc,server,start,server,c,rpc,endpoint
RpcService -> <C extends RpcEndpoint & RpcGateway> RpcServer startServer(C rpcEndpoint)_;1504474506;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocol to dispatch the rpcs to_@param <C> Type of the rpc endpoint_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcEndpoint & RpcGateway> RpcServer startServer(C rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocol,to,dispatch,the,rpcs,to,param,c,type,of,the,rpc,endpoint,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,endpoint,rpc,gateway,rpc,server,start,server,c,rpc,endpoint
RpcService -> <C extends RpcEndpoint & RpcGateway> RpcServer startServer(C rpcEndpoint)_;1518945172;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocol to dispatch the rpcs to_@param <C> Type of the rpc endpoint_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcEndpoint & RpcGateway> RpcServer startServer(C rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocol,to,dispatch,the,rpcs,to,param,c,type,of,the,rpc,endpoint,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,endpoint,rpc,gateway,rpc,server,start,server,c,rpc,endpoint
RpcService -> <C extends RpcEndpoint & RpcGateway> RpcServer startServer(C rpcEndpoint)_;1519406526;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocol to dispatch the rpcs to_@param <C> Type of the rpc endpoint_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcEndpoint & RpcGateway> RpcServer startServer(C rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocol,to,dispatch,the,rpcs,to,param,c,type,of,the,rpc,endpoint,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,endpoint,rpc,gateway,rpc,server,start,server,c,rpc,endpoint
RpcService -> <C extends RpcEndpoint & RpcGateway> RpcServer startServer(C rpcEndpoint)_;1548860009;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocol to dispatch the rpcs to_@param <C> Type of the rpc endpoint_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcEndpoint & RpcGateway> RpcServer startServer(C rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocol,to,dispatch,the,rpcs,to,param,c,type,of,the,rpc,endpoint,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,endpoint,rpc,gateway,rpc,server,start,server,c,rpc,endpoint
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1482522855;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1482522856;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1482522856;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1482522857;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1482522858;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1482522859;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1482522859;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1482522860;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1482522861;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1482522862;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1487944132;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1487944132;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;1499378241;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> Future<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,future,c,connect,string,address,class,c,clazz
RpcService -> Future<Void> getTerminationFuture()_;1482522861;Returns a future indicating when the RPC service has been shut down.__@return Termination future;Future<Void> getTerminationFuture()_;returns,a,future,indicating,when,the,rpc,service,has,been,shut,down,return,termination,future;future,void,get,termination,future
RpcService -> Future<Void> getTerminationFuture()_;1482522862;Returns a future indicating when the RPC service has been shut down.__@return Termination future;Future<Void> getTerminationFuture()_;returns,a,future,indicating,when,the,rpc,service,has,been,shut,down,return,termination,future;future,void,get,termination,future
RpcService -> Future<Void> getTerminationFuture()_;1487944132;Returns a future indicating when the RPC service has been shut down.__@return Termination future;Future<Void> getTerminationFuture()_;returns,a,future,indicating,when,the,rpc,service,has,been,shut,down,return,termination,future;future,void,get,termination,future
RpcService -> Future<Void> getTerminationFuture()_;1487944132;Returns a future indicating when the RPC service has been shut down.__@return Termination future;Future<Void> getTerminationFuture()_;returns,a,future,indicating,when,the,rpc,service,has,been,shut,down,return,termination,future;future,void,get,termination,future
RpcService -> Future<Void> getTerminationFuture()_;1499378241;Returns a future indicating when the RPC service has been shut down.__@return Termination future;Future<Void> getTerminationFuture()_;returns,a,future,indicating,when,the,rpc,service,has,been,shut,down,return,termination,future;future,void,get,termination,future
RpcService -> <F extends Serializable, C extends FencedRpcGateway<F>> CompletableFuture<C> connect( 		String address, 		F fencingToken, 		Class<C> clazz)_;1504474506;Connect to ta remote fenced rpc server under the provided address. Returns a fenced rpc gateway_which can be used to communicate with the rpc server. If the connection failed, then the_returned future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param fencingToken Fencing token to be used when communicating with the server_@param clazz Class of the rpc gateway to return_@param <F> Type of the fencing token_@param <C> Type of the rpc gateway to return_@return Future containing the fenced rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<F extends Serializable, C extends FencedRpcGateway<F>> CompletableFuture<C> connect(_		String address,_		F fencingToken,_		Class<C> clazz)_;connect,to,ta,remote,fenced,rpc,server,under,the,provided,address,returns,a,fenced,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,fencing,token,fencing,token,to,be,used,when,communicating,with,the,server,param,clazz,class,of,the,rpc,gateway,to,return,param,f,type,of,the,fencing,token,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,fenced,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;f,extends,serializable,c,extends,fenced,rpc,gateway,f,completable,future,c,connect,string,address,f,fencing,token,class,c,clazz
RpcService -> <F extends Serializable, C extends FencedRpcGateway<F>> CompletableFuture<C> connect( 		String address, 		F fencingToken, 		Class<C> clazz)_;1518945172;Connect to ta remote fenced rpc server under the provided address. Returns a fenced rpc gateway_which can be used to communicate with the rpc server. If the connection failed, then the_returned future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param fencingToken Fencing token to be used when communicating with the server_@param clazz Class of the rpc gateway to return_@param <F> Type of the fencing token_@param <C> Type of the rpc gateway to return_@return Future containing the fenced rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<F extends Serializable, C extends FencedRpcGateway<F>> CompletableFuture<C> connect(_		String address,_		F fencingToken,_		Class<C> clazz)_;connect,to,ta,remote,fenced,rpc,server,under,the,provided,address,returns,a,fenced,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,fencing,token,fencing,token,to,be,used,when,communicating,with,the,server,param,clazz,class,of,the,rpc,gateway,to,return,param,f,type,of,the,fencing,token,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,fenced,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;f,extends,serializable,c,extends,fenced,rpc,gateway,f,completable,future,c,connect,string,address,f,fencing,token,class,c,clazz
RpcService -> <F extends Serializable, C extends FencedRpcGateway<F>> CompletableFuture<C> connect( 		String address, 		F fencingToken, 		Class<C> clazz)_;1519406526;Connect to ta remote fenced rpc server under the provided address. Returns a fenced rpc gateway_which can be used to communicate with the rpc server. If the connection failed, then the_returned future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param fencingToken Fencing token to be used when communicating with the server_@param clazz Class of the rpc gateway to return_@param <F> Type of the fencing token_@param <C> Type of the rpc gateway to return_@return Future containing the fenced rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<F extends Serializable, C extends FencedRpcGateway<F>> CompletableFuture<C> connect(_		String address,_		F fencingToken,_		Class<C> clazz)_;connect,to,ta,remote,fenced,rpc,server,under,the,provided,address,returns,a,fenced,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,fencing,token,fencing,token,to,be,used,when,communicating,with,the,server,param,clazz,class,of,the,rpc,gateway,to,return,param,f,type,of,the,fencing,token,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,fenced,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;f,extends,serializable,c,extends,fenced,rpc,gateway,f,completable,future,c,connect,string,address,f,fencing,token,class,c,clazz
RpcService -> <F extends Serializable, C extends FencedRpcGateway<F>> CompletableFuture<C> connect( 		String address, 		F fencingToken, 		Class<C> clazz)_;1548860009;Connect to a remote fenced rpc server under the provided address. Returns a fenced rpc gateway_which can be used to communicate with the rpc server. If the connection failed, then the_returned future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param fencingToken Fencing token to be used when communicating with the server_@param clazz Class of the rpc gateway to return_@param <F> Type of the fencing token_@param <C> Type of the rpc gateway to return_@return Future containing the fenced rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<F extends Serializable, C extends FencedRpcGateway<F>> CompletableFuture<C> connect(_		String address,_		F fencingToken,_		Class<C> clazz)_;connect,to,a,remote,fenced,rpc,server,under,the,provided,address,returns,a,fenced,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,fencing,token,fencing,token,to,be,used,when,communicating,with,the,server,param,clazz,class,of,the,rpc,gateway,to,return,param,f,type,of,the,fencing,token,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,fenced,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;f,extends,serializable,c,extends,fenced,rpc,gateway,f,completable,future,c,connect,string,address,f,fencing,token,class,c,clazz
RpcService -> void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1482522856;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutionContext()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,execution,context,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;void,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1482522857;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutionContext()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,execution,context,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;void,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1482522858;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutionContext()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,execution,context,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;void,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1482522859;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;void,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1482522859;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;void,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1482522860;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;void,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1482522861;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;void,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1482522862;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;void,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1487944132;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;void scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;void,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> CompletableFuture<Void> getTerminationFuture()_;1501760738;Returns a future indicating when the RPC service has been shut down.__@return Termination future;CompletableFuture<Void> getTerminationFuture()_;returns,a,future,indicating,when,the,rpc,service,has,been,shut,down,return,termination,future;completable,future,void,get,termination,future
RpcService -> CompletableFuture<Void> getTerminationFuture()_;1502452184;Returns a future indicating when the RPC service has been shut down.__@return Termination future;CompletableFuture<Void> getTerminationFuture()_;returns,a,future,indicating,when,the,rpc,service,has,been,shut,down,return,termination,future;completable,future,void,get,termination,future
RpcService -> CompletableFuture<Void> getTerminationFuture()_;1504474506;Returns a future indicating when the RPC service has been shut down.__@return Termination future;CompletableFuture<Void> getTerminationFuture()_;returns,a,future,indicating,when,the,rpc,service,has,been,shut,down,return,termination,future;completable,future,void,get,termination,future
RpcService -> CompletableFuture<Void> getTerminationFuture()_;1518945172;Returns a future indicating when the RPC service has been shut down.__@return Termination future;CompletableFuture<Void> getTerminationFuture()_;returns,a,future,indicating,when,the,rpc,service,has,been,shut,down,return,termination,future;completable,future,void,get,termination,future
RpcService -> CompletableFuture<Void> getTerminationFuture()_;1519406526;Returns a future indicating when the RPC service has been shut down.__@return Termination future;CompletableFuture<Void> getTerminationFuture()_;returns,a,future,indicating,when,the,rpc,service,has,been,shut,down,return,termination,future;completable,future,void,get,termination,future
RpcService -> CompletableFuture<Void> getTerminationFuture()_;1548860009;Returns a future indicating when the RPC service has been shut down.__@return Termination future;CompletableFuture<Void> getTerminationFuture()_;returns,a,future,indicating,when,the,rpc,service,has,been,shut,down,return,termination,future;completable,future,void,get,termination,future
RpcService -> void execute(Runnable runnable)_;1482522859;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> void execute(Runnable runnable)_;1482522860;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> void execute(Runnable runnable)_;1482522861;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> void execute(Runnable runnable)_;1482522862;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> void execute(Runnable runnable)_;1487944132;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> void execute(Runnable runnable)_;1487944132;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> void execute(Runnable runnable)_;1499378241;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> void execute(Runnable runnable)_;1501760738;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> void execute(Runnable runnable)_;1502452184;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> void execute(Runnable runnable)_;1504474506;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> void execute(Runnable runnable)_;1518945172;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> void execute(Runnable runnable)_;1519406526;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> void execute(Runnable runnable)_;1548860009;Execute the given runnable in the executor of the RPC service. This method can be used to run_code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param runnable to execute;void execute(Runnable runnable)_;execute,the,given,runnable,in,the,executor,of,the,rpc,service,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,runnable,to,execute;void,execute,runnable,runnable
RpcService -> <C extends RpcGateway> CompletableFuture<C> connect(String address, Class<C> clazz)_;1501760738;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> CompletableFuture<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,completable,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> CompletableFuture<C> connect(String address, Class<C> clazz)_;1502452184;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> CompletableFuture<C> connect(String address, Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,completable,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1482522856;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1482522856;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1482522857;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1482522858;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1482522859;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1482522859;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1482522860;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1482522861;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1482522862;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1487944132;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1487944132;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1499378241;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> <C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;1501760738;Start a rpc server which forwards the remote procedure calls to the provided rpc endpoint.__@param rpcEndpoint Rpc protocl to dispath the rpcs to_@param <S> Type of the rpc endpoint_@param <C> Type of the self rpc gateway associated with the rpc server_@return Self gateway to dispatch remote procedure calls to oneself;<C extends RpcGateway, S extends RpcEndpoint<C>> C startServer(S rpcEndpoint)_;start,a,rpc,server,which,forwards,the,remote,procedure,calls,to,the,provided,rpc,endpoint,param,rpc,endpoint,rpc,protocl,to,dispath,the,rpcs,to,param,s,type,of,the,rpc,endpoint,param,c,type,of,the,self,rpc,gateway,associated,with,the,rpc,server,return,self,gateway,to,dispatch,remote,procedure,calls,to,oneself;c,extends,rpc,gateway,s,extends,rpc,endpoint,c,c,start,server,s,rpc,endpoint
RpcService -> ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1487944132;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;scheduled,future,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1499378241;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;scheduled,future,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1501760738;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;scheduled,future,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1502452184;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;scheduled,future,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1504474506;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;scheduled,future,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1518945172;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;scheduled,future,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1519406526;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;scheduled,future,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;1548860009;Execute the runnable in the execution context of this RPC Service, as returned by_{@link #getExecutor()}, after a scheduled delay.__@param runnable Runnable to be executed_@param delay    The delay after which the runnable will be executed;ScheduledFuture<?> scheduleRunnable(Runnable runnable, long delay, TimeUnit unit)_;execute,the,runnable,in,the,execution,context,of,this,rpc,service,as,returned,by,link,get,executor,after,a,scheduled,delay,param,runnable,runnable,to,be,executed,param,delay,the,delay,after,which,the,runnable,will,be,executed;scheduled,future,schedule,runnable,runnable,runnable,long,delay,time,unit,unit
RpcService -> int getPort()_;1499378241;Return the port under which the rpc service is reachable. If the rpc service cannot be_contacted remotely, then it will return -1.__@return Port of the rpc service or -1 if local rpc service;int getPort()_;return,the,port,under,which,the,rpc,service,is,reachable,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,1,return,port,of,the,rpc,service,or,1,if,local,rpc,service;int,get,port
RpcService -> int getPort()_;1501760738;Return the port under which the rpc service is reachable. If the rpc service cannot be_contacted remotely, then it will return -1.__@return Port of the rpc service or -1 if local rpc service;int getPort()_;return,the,port,under,which,the,rpc,service,is,reachable,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,1,return,port,of,the,rpc,service,or,1,if,local,rpc,service;int,get,port
RpcService -> int getPort()_;1502452184;Return the port under which the rpc service is reachable. If the rpc service cannot be_contacted remotely, then it will return -1.__@return Port of the rpc service or -1 if local rpc service;int getPort()_;return,the,port,under,which,the,rpc,service,is,reachable,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,1,return,port,of,the,rpc,service,or,1,if,local,rpc,service;int,get,port
RpcService -> int getPort()_;1504474506;Return the port under which the rpc service is reachable. If the rpc service cannot be_contacted remotely, then it will return -1.__@return Port of the rpc service or -1 if local rpc service;int getPort()_;return,the,port,under,which,the,rpc,service,is,reachable,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,1,return,port,of,the,rpc,service,or,1,if,local,rpc,service;int,get,port
RpcService -> int getPort()_;1518945172;Return the port under which the rpc service is reachable. If the rpc service cannot be_contacted remotely, then it will return -1.__@return Port of the rpc service or -1 if local rpc service;int getPort()_;return,the,port,under,which,the,rpc,service,is,reachable,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,1,return,port,of,the,rpc,service,or,1,if,local,rpc,service;int,get,port
RpcService -> int getPort()_;1519406526;Return the port under which the rpc service is reachable. If the rpc service cannot be_contacted remotely, then it will return -1.__@return Port of the rpc service or -1 if local rpc service;int getPort()_;return,the,port,under,which,the,rpc,service,is,reachable,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,1,return,port,of,the,rpc,service,or,1,if,local,rpc,service;int,get,port
RpcService -> int getPort()_;1548860009;Return the port under which the rpc service is reachable. If the rpc service cannot be_contacted remotely, then it will return -1.__@return Port of the rpc service or -1 if local rpc service;int getPort()_;return,the,port,under,which,the,rpc,service,is,reachable,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,1,return,port,of,the,rpc,service,or,1,if,local,rpc,service;int,get,port
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1482522855;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1482522856;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1482522856;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1482522857;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1482522858;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1482522859;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1482522859;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1482522860;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1482522861;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1482522862;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1487944132;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1487944132;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1499378241;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> <C extends RpcGateway> void stopServer(C selfGateway)_;1501760738;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server_@param <C> Type of the rpc gateway;<C extends RpcGateway> void stopServer(C selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway;c,extends,rpc,gateway,void,stop,server,c,self,gateway
RpcService -> Executor getExecutor()_;1482522859;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1482522859;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1482522860;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1482522861;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1482522862;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1487944132;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1487944132;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1499378241;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1501760738;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1502452184;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1504474506;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1518945172;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1519406526;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> Executor getExecutor()_;1548860009;Gets the executor, provided by this RPC service. This executor can be used for example for_the {@code handleAsync(...)} or {@code thenAcceptAsync(...)} methods of futures.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;Executor getExecutor()_;gets,the,executor,provided,by,this,rpc,service,this,executor,can,be,used,for,example,for,the,code,handle,async,or,code,then,accept,async,methods,of,futures,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;executor,get,executor
RpcService -> <C extends RpcGateway> String getAddress(C selfGateway)_;1482522855;Get the fully qualified address of the underlying rpc server represented by the self gateway._It must be possible to connect from a remote host to the rpc server via the returned fully_qualified address.__@param selfGateway Self gateway associated with the underlying rpc server_@param <C> Type of the rpc gateway_@return Fully qualified address;<C extends RpcGateway> String getAddress(C selfGateway)_;get,the,fully,qualified,address,of,the,underlying,rpc,server,represented,by,the,self,gateway,it,must,be,possible,to,connect,from,a,remote,host,to,the,rpc,server,via,the,returned,fully,qualified,address,param,self,gateway,self,gateway,associated,with,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway,return,fully,qualified,address;c,extends,rpc,gateway,string,get,address,c,self,gateway
RpcService -> <C extends RpcGateway> String getAddress(C selfGateway)_;1482522856;Get the fully qualified address of the underlying rpc server represented by the self gateway._It must be possible to connect from a remote host to the rpc server via the returned fully_qualified address.__@param selfGateway Self gateway associated with the underlying rpc server_@param <C> Type of the rpc gateway_@return Fully qualified address;<C extends RpcGateway> String getAddress(C selfGateway)_;get,the,fully,qualified,address,of,the,underlying,rpc,server,represented,by,the,self,gateway,it,must,be,possible,to,connect,from,a,remote,host,to,the,rpc,server,via,the,returned,fully,qualified,address,param,self,gateway,self,gateway,associated,with,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway,return,fully,qualified,address;c,extends,rpc,gateway,string,get,address,c,self,gateway
RpcService -> <C extends RpcGateway> String getAddress(C selfGateway)_;1482522856;Get the fully qualified address of the underlying rpc server represented by the self gateway._It must be possible to connect from a remote host to the rpc server via the returned fully_qualified address.__@param selfGateway Self gateway associated with the underlying rpc server_@param <C> Type of the rpc gateway_@return Fully qualified address;<C extends RpcGateway> String getAddress(C selfGateway)_;get,the,fully,qualified,address,of,the,underlying,rpc,server,represented,by,the,self,gateway,it,must,be,possible,to,connect,from,a,remote,host,to,the,rpc,server,via,the,returned,fully,qualified,address,param,self,gateway,self,gateway,associated,with,the,underlying,rpc,server,param,c,type,of,the,rpc,gateway,return,fully,qualified,address;c,extends,rpc,gateway,string,get,address,c,self,gateway
RpcService -> String getAddress()_;1482522860;Return the address under which the rpc service can be reached. If the rpc service cannot be_contacted remotely, then it will return an empty string.__@return Address of the rpc service or empty string if local rpc service;String getAddress()_;return,the,address,under,which,the,rpc,service,can,be,reached,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,an,empty,string,return,address,of,the,rpc,service,or,empty,string,if,local,rpc,service;string,get,address
RpcService -> String getAddress()_;1482522861;Return the address under which the rpc service can be reached. If the rpc service cannot be_contacted remotely, then it will return an empty string.__@return Address of the rpc service or empty string if local rpc service;String getAddress()_;return,the,address,under,which,the,rpc,service,can,be,reached,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,an,empty,string,return,address,of,the,rpc,service,or,empty,string,if,local,rpc,service;string,get,address
RpcService -> String getAddress()_;1482522862;Return the hostname or host address under which the rpc service can be reached._If the rpc service cannot be contacted remotely, then it will return an empty string.__@return Address of the rpc service or empty string if local rpc service;String getAddress()_;return,the,hostname,or,host,address,under,which,the,rpc,service,can,be,reached,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,an,empty,string,return,address,of,the,rpc,service,or,empty,string,if,local,rpc,service;string,get,address
RpcService -> String getAddress()_;1487944132;Return the hostname or host address under which the rpc service can be reached._If the rpc service cannot be contacted remotely, then it will return an empty string.__@return Address of the rpc service or empty string if local rpc service;String getAddress()_;return,the,hostname,or,host,address,under,which,the,rpc,service,can,be,reached,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,an,empty,string,return,address,of,the,rpc,service,or,empty,string,if,local,rpc,service;string,get,address
RpcService -> String getAddress()_;1487944132;Return the hostname or host address under which the rpc service can be reached._If the rpc service cannot be contacted remotely, then it will return an empty string.__@return Address of the rpc service or empty string if local rpc service;String getAddress()_;return,the,hostname,or,host,address,under,which,the,rpc,service,can,be,reached,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,an,empty,string,return,address,of,the,rpc,service,or,empty,string,if,local,rpc,service;string,get,address
RpcService -> String getAddress()_;1499378241;Return the hostname or host address under which the rpc service can be reached._If the rpc service cannot be contacted remotely, then it will return an empty string.__@return Address of the rpc service or empty string if local rpc service;String getAddress()_;return,the,hostname,or,host,address,under,which,the,rpc,service,can,be,reached,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,an,empty,string,return,address,of,the,rpc,service,or,empty,string,if,local,rpc,service;string,get,address
RpcService -> String getAddress()_;1501760738;Return the hostname or host address under which the rpc service can be reached._If the rpc service cannot be contacted remotely, then it will return an empty string.__@return Address of the rpc service or empty string if local rpc service;String getAddress()_;return,the,hostname,or,host,address,under,which,the,rpc,service,can,be,reached,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,an,empty,string,return,address,of,the,rpc,service,or,empty,string,if,local,rpc,service;string,get,address
RpcService -> String getAddress()_;1502452184;Return the hostname or host address under which the rpc service can be reached._If the rpc service cannot be contacted remotely, then it will return an empty string.__@return Address of the rpc service or empty string if local rpc service;String getAddress()_;return,the,hostname,or,host,address,under,which,the,rpc,service,can,be,reached,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,an,empty,string,return,address,of,the,rpc,service,or,empty,string,if,local,rpc,service;string,get,address
RpcService -> String getAddress()_;1504474506;Return the hostname or host address under which the rpc service can be reached._If the rpc service cannot be contacted remotely, then it will return an empty string.__@return Address of the rpc service or empty string if local rpc service;String getAddress()_;return,the,hostname,or,host,address,under,which,the,rpc,service,can,be,reached,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,an,empty,string,return,address,of,the,rpc,service,or,empty,string,if,local,rpc,service;string,get,address
RpcService -> String getAddress()_;1518945172;Return the hostname or host address under which the rpc service can be reached._If the rpc service cannot be contacted remotely, then it will return an empty string.__@return Address of the rpc service or empty string if local rpc service;String getAddress()_;return,the,hostname,or,host,address,under,which,the,rpc,service,can,be,reached,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,an,empty,string,return,address,of,the,rpc,service,or,empty,string,if,local,rpc,service;string,get,address
RpcService -> String getAddress()_;1519406526;Return the hostname or host address under which the rpc service can be reached._If the rpc service cannot be contacted remotely, then it will return an empty string.__@return Address of the rpc service or empty string if local rpc service;String getAddress()_;return,the,hostname,or,host,address,under,which,the,rpc,service,can,be,reached,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,an,empty,string,return,address,of,the,rpc,service,or,empty,string,if,local,rpc,service;string,get,address
RpcService -> String getAddress()_;1548860009;Return the hostname or host address under which the rpc service can be reached._If the rpc service cannot be contacted remotely, then it will return an empty string.__@return Address of the rpc service or empty string if local rpc service;String getAddress()_;return,the,hostname,or,host,address,under,which,the,rpc,service,can,be,reached,if,the,rpc,service,cannot,be,contacted,remotely,then,it,will,return,an,empty,string,return,address,of,the,rpc,service,or,empty,string,if,local,rpc,service;string,get,address
RpcService -> <T> CompletableFuture<T> execute(Callable<T> callable)_;1501760738;Execute the given callable and return its result as a {@link CompletableFuture}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> CompletableFuture<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,completable,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,completable,future,t,execute,callable,t,callable
RpcService -> <T> CompletableFuture<T> execute(Callable<T> callable)_;1502452184;Execute the given callable and return its result as a {@link CompletableFuture}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> CompletableFuture<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,completable,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,completable,future,t,execute,callable,t,callable
RpcService -> <T> CompletableFuture<T> execute(Callable<T> callable)_;1504474506;Execute the given callable and return its result as a {@link CompletableFuture}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> CompletableFuture<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,completable,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,completable,future,t,execute,callable,t,callable
RpcService -> <T> CompletableFuture<T> execute(Callable<T> callable)_;1518945172;Execute the given callable and return its result as a {@link CompletableFuture}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> CompletableFuture<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,completable,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,completable,future,t,execute,callable,t,callable
RpcService -> <T> CompletableFuture<T> execute(Callable<T> callable)_;1519406526;Execute the given callable and return its result as a {@link CompletableFuture}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> CompletableFuture<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,completable,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,completable,future,t,execute,callable,t,callable
RpcService -> <T> CompletableFuture<T> execute(Callable<T> callable)_;1548860009;Execute the given callable and return its result as a {@link CompletableFuture}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> CompletableFuture<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,completable,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,completable,future,t,execute,callable,t,callable
RpcService -> <T> Future<T> execute(Callable<T> callable)_;1482522859;Execute the given callable and return its result as a {@link Future}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> Future<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,future,t,execute,callable,t,callable
RpcService -> <T> Future<T> execute(Callable<T> callable)_;1482522860;Execute the given callable and return its result as a {@link Future}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> Future<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,future,t,execute,callable,t,callable
RpcService -> <T> Future<T> execute(Callable<T> callable)_;1482522861;Execute the given callable and return its result as a {@link Future}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> Future<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,future,t,execute,callable,t,callable
RpcService -> <T> Future<T> execute(Callable<T> callable)_;1482522862;Execute the given callable and return its result as a {@link Future}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> Future<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,future,t,execute,callable,t,callable
RpcService -> <T> Future<T> execute(Callable<T> callable)_;1487944132;Execute the given callable and return its result as a {@link Future}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> Future<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,future,t,execute,callable,t,callable
RpcService -> <T> Future<T> execute(Callable<T> callable)_;1487944132;Execute the given callable and return its result as a {@link Future}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> Future<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,future,t,execute,callable,t,callable
RpcService -> <T> Future<T> execute(Callable<T> callable)_;1499378241;Execute the given callable and return its result as a {@link Future}. This method can be used_to run code outside of the main thread of a {@link RpcEndpoint}.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@param callable to execute_@param <T> is the return value type_@return Future containing the callable's future result;<T> Future<T> execute(Callable<T> callable)_;execute,the,given,callable,and,return,its,result,as,a,link,future,this,method,can,be,used,to,run,code,outside,of,the,main,thread,of,a,link,rpc,endpoint,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,param,callable,to,execute,param,t,is,the,return,value,type,return,future,containing,the,callable,s,future,result;t,future,t,execute,callable,t,callable
RpcService -> ScheduledExecutor getScheduledExecutor()_;1487944132;Gets a scheduled executor from the RPC service. This executor can be used to schedule_tasks to be executed in the future.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The RPC service provided scheduled executor;ScheduledExecutor getScheduledExecutor()_;gets,a,scheduled,executor,from,the,rpc,service,this,executor,can,be,used,to,schedule,tasks,to,be,executed,in,the,future,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,rpc,service,provided,scheduled,executor;scheduled,executor,get,scheduled,executor
RpcService -> ScheduledExecutor getScheduledExecutor()_;1487944132;Gets a scheduled executor from the RPC service. This executor can be used to schedule_tasks to be executed in the future.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The RPC service provided scheduled executor;ScheduledExecutor getScheduledExecutor()_;gets,a,scheduled,executor,from,the,rpc,service,this,executor,can,be,used,to,schedule,tasks,to,be,executed,in,the,future,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,rpc,service,provided,scheduled,executor;scheduled,executor,get,scheduled,executor
RpcService -> ScheduledExecutor getScheduledExecutor()_;1499378241;Gets a scheduled executor from the RPC service. This executor can be used to schedule_tasks to be executed in the future.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The RPC service provided scheduled executor;ScheduledExecutor getScheduledExecutor()_;gets,a,scheduled,executor,from,the,rpc,service,this,executor,can,be,used,to,schedule,tasks,to,be,executed,in,the,future,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,rpc,service,provided,scheduled,executor;scheduled,executor,get,scheduled,executor
RpcService -> ScheduledExecutor getScheduledExecutor()_;1501760738;Gets a scheduled executor from the RPC service. This executor can be used to schedule_tasks to be executed in the future.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The RPC service provided scheduled executor;ScheduledExecutor getScheduledExecutor()_;gets,a,scheduled,executor,from,the,rpc,service,this,executor,can,be,used,to,schedule,tasks,to,be,executed,in,the,future,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,rpc,service,provided,scheduled,executor;scheduled,executor,get,scheduled,executor
RpcService -> ScheduledExecutor getScheduledExecutor()_;1502452184;Gets a scheduled executor from the RPC service. This executor can be used to schedule_tasks to be executed in the future.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The RPC service provided scheduled executor;ScheduledExecutor getScheduledExecutor()_;gets,a,scheduled,executor,from,the,rpc,service,this,executor,can,be,used,to,schedule,tasks,to,be,executed,in,the,future,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,rpc,service,provided,scheduled,executor;scheduled,executor,get,scheduled,executor
RpcService -> ScheduledExecutor getScheduledExecutor()_;1504474506;Gets a scheduled executor from the RPC service. This executor can be used to schedule_tasks to be executed in the future.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The RPC service provided scheduled executor;ScheduledExecutor getScheduledExecutor()_;gets,a,scheduled,executor,from,the,rpc,service,this,executor,can,be,used,to,schedule,tasks,to,be,executed,in,the,future,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,rpc,service,provided,scheduled,executor;scheduled,executor,get,scheduled,executor
RpcService -> ScheduledExecutor getScheduledExecutor()_;1518945172;Gets a scheduled executor from the RPC service. This executor can be used to schedule_tasks to be executed in the future.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The RPC service provided scheduled executor;ScheduledExecutor getScheduledExecutor()_;gets,a,scheduled,executor,from,the,rpc,service,this,executor,can,be,used,to,schedule,tasks,to,be,executed,in,the,future,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,rpc,service,provided,scheduled,executor;scheduled,executor,get,scheduled,executor
RpcService -> ScheduledExecutor getScheduledExecutor()_;1519406526;Gets a scheduled executor from the RPC service. This executor can be used to schedule_tasks to be executed in the future.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The RPC service provided scheduled executor;ScheduledExecutor getScheduledExecutor()_;gets,a,scheduled,executor,from,the,rpc,service,this,executor,can,be,used,to,schedule,tasks,to,be,executed,in,the,future,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,rpc,service,provided,scheduled,executor;scheduled,executor,get,scheduled,executor
RpcService -> ScheduledExecutor getScheduledExecutor()_;1548860009;Gets a scheduled executor from the RPC service. This executor can be used to schedule_tasks to be executed in the future.__<p><b>IMPORTANT:</b> This executor does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutor() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The RPC service provided scheduled executor;ScheduledExecutor getScheduledExecutor()_;gets,a,scheduled,executor,from,the,rpc,service,this,executor,can,be,used,to,schedule,tasks,to,be,executed,in,the,future,p,b,important,b,this,executor,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,executor,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,rpc,service,provided,scheduled,executor;scheduled,executor,get,scheduled,executor
RpcService -> <C extends RpcGateway> CompletableFuture<C> connect( 		String address, 		Class<C> clazz)_;1504474506;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> CompletableFuture<C> connect(_		String address,_		Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,completable,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> CompletableFuture<C> connect( 		String address, 		Class<C> clazz)_;1518945172;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> CompletableFuture<C> connect(_		String address,_		Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,completable,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> CompletableFuture<C> connect( 		String address, 		Class<C> clazz)_;1519406526;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> CompletableFuture<C> connect(_		String address,_		Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,completable,future,c,connect,string,address,class,c,clazz
RpcService -> <C extends RpcGateway> CompletableFuture<C> connect( 		String address, 		Class<C> clazz)_;1548860009;Connect to a remote rpc server under the provided address. Returns a rpc gateway which can_be used to communicate with the rpc server. If the connection failed, then the returned_future is failed with a {@link RpcConnectionException}.__@param address Address of the remote rpc server_@param clazz Class of the rpc gateway to return_@param <C> Type of the rpc gateway to return_@return Future containing the rpc gateway or an {@link RpcConnectionException} if the_connection attempt failed;<C extends RpcGateway> CompletableFuture<C> connect(_		String address,_		Class<C> clazz)_;connect,to,a,remote,rpc,server,under,the,provided,address,returns,a,rpc,gateway,which,can,be,used,to,communicate,with,the,rpc,server,if,the,connection,failed,then,the,returned,future,is,failed,with,a,link,rpc,connection,exception,param,address,address,of,the,remote,rpc,server,param,clazz,class,of,the,rpc,gateway,to,return,param,c,type,of,the,rpc,gateway,to,return,return,future,containing,the,rpc,gateway,or,an,link,rpc,connection,exception,if,the,connection,attempt,failed;c,extends,rpc,gateway,completable,future,c,connect,string,address,class,c,clazz
RpcService -> <F extends Serializable> RpcServer fenceRpcServer(RpcServer rpcServer, F fencingToken)_;1504474506;Fence the given RpcServer with the given fencing token.__<p>Fencing the RpcServer means that we fix the fencing token to the provided value._All RPCs will then be enriched with this fencing token. This expects that the receiving_RPC endpoint extends {@link FencedRpcEndpoint}.__@param rpcServer to fence with the given fencing token_@param fencingToken to fence the RpcServer with_@param <F> type of the fencing token_@return Fenced RpcServer;<F extends Serializable> RpcServer fenceRpcServer(RpcServer rpcServer, F fencingToken)_;fence,the,given,rpc,server,with,the,given,fencing,token,p,fencing,the,rpc,server,means,that,we,fix,the,fencing,token,to,the,provided,value,all,rpcs,will,then,be,enriched,with,this,fencing,token,this,expects,that,the,receiving,rpc,endpoint,extends,link,fenced,rpc,endpoint,param,rpc,server,to,fence,with,the,given,fencing,token,param,fencing,token,to,fence,the,rpc,server,with,param,f,type,of,the,fencing,token,return,fenced,rpc,server;f,extends,serializable,rpc,server,fence,rpc,server,rpc,server,rpc,server,f,fencing,token
RpcService -> <F extends Serializable> RpcServer fenceRpcServer(RpcServer rpcServer, F fencingToken)_;1518945172;Fence the given RpcServer with the given fencing token.__<p>Fencing the RpcServer means that we fix the fencing token to the provided value._All RPCs will then be enriched with this fencing token. This expects that the receiving_RPC endpoint extends {@link FencedRpcEndpoint}.__@param rpcServer to fence with the given fencing token_@param fencingToken to fence the RpcServer with_@param <F> type of the fencing token_@return Fenced RpcServer;<F extends Serializable> RpcServer fenceRpcServer(RpcServer rpcServer, F fencingToken)_;fence,the,given,rpc,server,with,the,given,fencing,token,p,fencing,the,rpc,server,means,that,we,fix,the,fencing,token,to,the,provided,value,all,rpcs,will,then,be,enriched,with,this,fencing,token,this,expects,that,the,receiving,rpc,endpoint,extends,link,fenced,rpc,endpoint,param,rpc,server,to,fence,with,the,given,fencing,token,param,fencing,token,to,fence,the,rpc,server,with,param,f,type,of,the,fencing,token,return,fenced,rpc,server;f,extends,serializable,rpc,server,fence,rpc,server,rpc,server,rpc,server,f,fencing,token
RpcService -> <F extends Serializable> RpcServer fenceRpcServer(RpcServer rpcServer, F fencingToken)_;1519406526;Fence the given RpcServer with the given fencing token.__<p>Fencing the RpcServer means that we fix the fencing token to the provided value._All RPCs will then be enriched with this fencing token. This expects that the receiving_RPC endpoint extends {@link FencedRpcEndpoint}.__@param rpcServer to fence with the given fencing token_@param fencingToken to fence the RpcServer with_@param <F> type of the fencing token_@return Fenced RpcServer;<F extends Serializable> RpcServer fenceRpcServer(RpcServer rpcServer, F fencingToken)_;fence,the,given,rpc,server,with,the,given,fencing,token,p,fencing,the,rpc,server,means,that,we,fix,the,fencing,token,to,the,provided,value,all,rpcs,will,then,be,enriched,with,this,fencing,token,this,expects,that,the,receiving,rpc,endpoint,extends,link,fenced,rpc,endpoint,param,rpc,server,to,fence,with,the,given,fencing,token,param,fencing,token,to,fence,the,rpc,server,with,param,f,type,of,the,fencing,token,return,fenced,rpc,server;f,extends,serializable,rpc,server,fence,rpc,server,rpc,server,rpc,server,f,fencing,token
RpcService -> <F extends Serializable> RpcServer fenceRpcServer(RpcServer rpcServer, F fencingToken)_;1548860009;Fence the given RpcServer with the given fencing token.__<p>Fencing the RpcServer means that we fix the fencing token to the provided value._All RPCs will then be enriched with this fencing token. This expects that the receiving_RPC endpoint extends {@link FencedRpcEndpoint}.__@param rpcServer to fence with the given fencing token_@param fencingToken to fence the RpcServer with_@param <F> type of the fencing token_@return Fenced RpcServer;<F extends Serializable> RpcServer fenceRpcServer(RpcServer rpcServer, F fencingToken)_;fence,the,given,rpc,server,with,the,given,fencing,token,p,fencing,the,rpc,server,means,that,we,fix,the,fencing,token,to,the,provided,value,all,rpcs,will,then,be,enriched,with,this,fencing,token,this,expects,that,the,receiving,rpc,endpoint,extends,link,fenced,rpc,endpoint,param,rpc,server,to,fence,with,the,given,fencing,token,param,fencing,token,to,fence,the,rpc,server,with,param,f,type,of,the,fencing,token,return,fenced,rpc,server;f,extends,serializable,rpc,server,fence,rpc,server,rpc,server,rpc,server,f,fencing,token
RpcService -> void stopServer(RpcServer selfGateway)_;1502452184;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server;void stopServer(RpcServer selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server;void,stop,server,rpc,server,self,gateway
RpcService -> void stopServer(RpcServer selfGateway)_;1504474506;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server;void stopServer(RpcServer selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server;void,stop,server,rpc,server,self,gateway
RpcService -> void stopServer(RpcServer selfGateway)_;1518945172;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server;void stopServer(RpcServer selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server;void,stop,server,rpc,server,self,gateway
RpcService -> void stopServer(RpcServer selfGateway)_;1519406526;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server;void stopServer(RpcServer selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server;void,stop,server,rpc,server,self,gateway
RpcService -> void stopServer(RpcServer selfGateway)_;1548860009;Stop the underlying rpc server of the provided self gateway.__@param selfGateway Self gateway describing the underlying rpc server;void stopServer(RpcServer selfGateway)_;stop,the,underlying,rpc,server,of,the,provided,self,gateway,param,self,gateway,self,gateway,describing,the,underlying,rpc,server;void,stop,server,rpc,server,self,gateway
RpcService -> void stopService()_;1482522855;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1482522856;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1482522856;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1482522857;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1482522858;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1482522859;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1482522859;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1482522860;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1482522861;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1482522862;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1487944132;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1487944132;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1499378241;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1501760738;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1502452184;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1504474506;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> void stopService()_;1518945172;Stop the rpc service shutting down all started rpc servers.;void stopService()_;stop,the,rpc,service,shutting,down,all,started,rpc,servers;void,stop,service
RpcService -> CompletableFuture<Void> stopService()_;1519406526;Trigger the asynchronous stopping of the {@link RpcService}.__@return Future which is completed once the {@link RpcService} has been_fully stopped.;CompletableFuture<Void> stopService()_;trigger,the,asynchronous,stopping,of,the,link,rpc,service,return,future,which,is,completed,once,the,link,rpc,service,has,been,fully,stopped;completable,future,void,stop,service
RpcService -> CompletableFuture<Void> stopService()_;1548860009;Trigger the asynchronous stopping of the {@link RpcService}.__@return Future which is completed once the {@link RpcService} has been_fully stopped.;CompletableFuture<Void> stopService()_;trigger,the,asynchronous,stopping,of,the,link,rpc,service,return,future,which,is,completed,once,the,link,rpc,service,has,been,fully,stopped;completable,future,void,stop,service
RpcService -> ExecutionContext getExecutionContext()_;1482522856;Gets the execution context, provided by this RPC service. This execution_context can be used for example for the {@code onComplete(...)} or {@code onSuccess(...)}_methods of Futures.__<p><b>IMPORTANT:</b> This execution context does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutionContext() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;ExecutionContext getExecutionContext()_;gets,the,execution,context,provided,by,this,rpc,service,this,execution,context,can,be,used,for,example,for,the,code,on,complete,or,code,on,success,methods,of,futures,p,b,important,b,this,execution,context,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,execution,context,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;execution,context,get,execution,context
RpcService -> ExecutionContext getExecutionContext()_;1482522857;Gets the execution context, provided by this RPC service. This execution_context can be used for example for the {@code onComplete(...)} or {@code onSuccess(...)}_methods of Futures.__<p><b>IMPORTANT:</b> This execution context does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutionContext() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;ExecutionContext getExecutionContext()_;gets,the,execution,context,provided,by,this,rpc,service,this,execution,context,can,be,used,for,example,for,the,code,on,complete,or,code,on,success,methods,of,futures,p,b,important,b,this,execution,context,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,execution,context,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;execution,context,get,execution,context
RpcService -> ExecutionContext getExecutionContext()_;1482522858;Gets the execution context, provided by this RPC service. This execution_context can be used for example for the {@code onComplete(...)} or {@code onSuccess(...)}_methods of Futures.__<p><b>IMPORTANT:</b> This execution context does not isolate the method invocations against_any concurrent invocations and is therefore not suitable to run completion methods of futures_that modify state of an {@link RpcEndpoint}. For such operations, one needs to use the_{@link RpcEndpoint#getMainThreadExecutionContext() MainThreadExecutionContext} of that_{@code RpcEndpoint}.__@return The execution context provided by the RPC service;ExecutionContext getExecutionContext()_;gets,the,execution,context,provided,by,this,rpc,service,this,execution,context,can,be,used,for,example,for,the,code,on,complete,or,code,on,success,methods,of,futures,p,b,important,b,this,execution,context,does,not,isolate,the,method,invocations,against,any,concurrent,invocations,and,is,therefore,not,suitable,to,run,completion,methods,of,futures,that,modify,state,of,an,link,rpc,endpoint,for,such,operations,one,needs,to,use,the,link,rpc,endpoint,get,main,thread,execution,context,main,thread,execution,context,of,that,code,rpc,endpoint,return,the,execution,context,provided,by,the,rpc,service;execution,context,get,execution,context
