commented;modifiers;parameterAmount;loc;comment;code
true;public;4;14;/**  * Creates a heartbeat manager which does not actively send heartbeats.  *  * @param resourceId Resource Id which identifies the owner of the heartbeat manager  * @param heartbeatListener Listener which will be notified upon heartbeat timeouts for registered  *                          targets  * @param scheduledExecutor Scheduled executor to be used for scheduling heartbeat timeouts  * @param log Logger to be used for the logging  * @param <I> Type of the incoming payload  * @param <O> Type of the outgoing payload  * @return A new HeartbeatManager instance  */ ;/**  * Creates a heartbeat manager which does not actively send heartbeats.  *  * @param resourceId Resource Id which identifies the owner of the heartbeat manager  * @param heartbeatListener Listener which will be notified upon heartbeat timeouts for registered  *                          targets  * @param scheduledExecutor Scheduled executor to be used for scheduling heartbeat timeouts  * @param log Logger to be used for the logging  * @param <I> Type of the incoming payload  * @param <O> Type of the outgoing payload  * @return A new HeartbeatManager instance  */ public <I, O> HeartbeatManager<I, O> createHeartbeatManager(ResourceID resourceId, HeartbeatListener<I, O> heartbeatListener, ScheduledExecutor scheduledExecutor, Logger log) {     return new HeartbeatManagerImpl<>(heartbeatTimeout, resourceId, heartbeatListener, scheduledExecutor, scheduledExecutor, log). }
true;public;4;15;/**  * Creates a heartbeat manager which actively sends heartbeats to monitoring targets.  *  * @param resourceId Resource Id which identifies the owner of the heartbeat manager  * @param heartbeatListener Listener which will be notified upon heartbeat timeouts for registered  *                          targets  * @param scheduledExecutor Scheduled executor to be used for scheduling heartbeat timeouts  * @param log Logger to be used for the logging  * @param <I> Type of the incoming payload  * @param <O> Type of the outgoing payload  * @return A new HeartbeatManager instance which actively sends heartbeats  */ ;/**  * Creates a heartbeat manager which actively sends heartbeats to monitoring targets.  *  * @param resourceId Resource Id which identifies the owner of the heartbeat manager  * @param heartbeatListener Listener which will be notified upon heartbeat timeouts for registered  *                          targets  * @param scheduledExecutor Scheduled executor to be used for scheduling heartbeat timeouts  * @param log Logger to be used for the logging  * @param <I> Type of the incoming payload  * @param <O> Type of the outgoing payload  * @return A new HeartbeatManager instance which actively sends heartbeats  */ public <I, O> HeartbeatManager<I, O> createHeartbeatManagerSender(ResourceID resourceId, HeartbeatListener<I, O> heartbeatListener, ScheduledExecutor scheduledExecutor, Logger log) {     return new HeartbeatManagerSenderImpl<>(heartbeatInterval, heartbeatTimeout, resourceId, heartbeatListener, scheduledExecutor, scheduledExecutor, log). }
true;public,static;1;7;/**  * Creates an HeartbeatServices instance from a {@link Configuration}.  *  * @param configuration Configuration to be used for the HeartbeatServices creation  * @return An HeartbeatServices instance created from the given configuration  */ ;/**  * Creates an HeartbeatServices instance from a {@link Configuration}.  *  * @param configuration Configuration to be used for the HeartbeatServices creation  * @return An HeartbeatServices instance created from the given configuration  */ public static HeartbeatServices fromConfiguration(Configuration configuration) {     long heartbeatInterval = configuration.getLong(HeartbeatManagerOptions.HEARTBEAT_INTERVAL).     long heartbeatTimeout = configuration.getLong(HeartbeatManagerOptions.HEARTBEAT_TIMEOUT).     return new HeartbeatServices(heartbeatInterval, heartbeatTimeout). }
