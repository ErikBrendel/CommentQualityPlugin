commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ------------------------------------------------------------------------ public long taskManagerTotalMemoryMB() {     return totalContainerMemoryMB. }
false;public;0;3;;public long taskManagerHeapSizeMB() {     return taskManagerHeapSizeMB. }
false;public;0;3;;public long taskManagerDirectMemoryLimitMB() {     return taskManagerDirectMemoryLimitMB. }
false;public;0;3;;public int numSlots() {     return numSlots. }
false;public;0;3;;public Map<String, String> taskManagerEnv() {     return taskManagerEnv. }
false;public;0;10;;// ------------------------------------------------------------------------ @Override public String toString() {     return "TaskManagerParameters {" + "totalContainerMemory=" + totalContainerMemoryMB + ", taskManagerHeapSize=" + taskManagerHeapSizeMB + ", taskManagerDirectMemoryLimit=" + taskManagerDirectMemoryLimitMB + ", numSlots=" + numSlots + ", taskManagerEnv=" + taskManagerEnv + '}'. }
true;public,static;2;30;/**  * Calcuate cutoff memory size used by container, it will throw an {@link IllegalArgumentException}  * if the config is invalid or return the cutoff value if valid.  *  * @param config The Flink configuration.  * @param containerMemoryMB The size of the complete container, in megabytes.  *  * @return cutoff memory size used by container.  */ ;// ------------------------------------------------------------------------ // Factory // ------------------------------------------------------------------------ /**  * Calcuate cutoff memory size used by container, it will throw an {@link IllegalArgumentException}  * if the config is invalid or return the cutoff value if valid.  *  * @param config The Flink configuration.  * @param containerMemoryMB The size of the complete container, in megabytes.  *  * @return cutoff memory size used by container.  */ public static long calculateCutoffMB(Configuration config, long containerMemoryMB) {     Preconditions.checkArgument(containerMemoryMB > 0).     // (1) check cutoff ratio     final float memoryCutoffRatio = config.getFloat(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO).     if (memoryCutoffRatio >= 1 || memoryCutoffRatio <= 0) {         throw new IllegalArgumentException("The configuration value '" + ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_RATIO.key() + "' must be between 0 and 1. Value given=" + memoryCutoffRatio).     }     // (2) check min cutoff value     final int minCutoff = config.getInteger(ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN).     if (minCutoff >= containerMemoryMB) {         throw new IllegalArgumentException("The configuration value '" + ResourceManagerOptions.CONTAINERIZED_HEAP_CUTOFF_MIN.key() + "'='" + minCutoff + "' is larger than the total container memory " + containerMemoryMB).     }     // (3) check between heap and off-heap     long cutoff = (long) (containerMemoryMB * memoryCutoffRatio).     if (cutoff < minCutoff) {         cutoff = minCutoff.     }     return cutoff. }
true;public,static;3;28;/**  * Computes the parameters to be used to start a TaskManager Java process.  *  * @param config The Flink configuration.  * @param containerMemoryMB The size of the complete container, in megabytes.  * @return The parameters to start the TaskManager processes with.  */ ;/**  * Computes the parameters to be used to start a TaskManager Java process.  *  * @param config The Flink configuration.  * @param containerMemoryMB The size of the complete container, in megabytes.  * @return The parameters to start the TaskManager processes with.  */ public static ContaineredTaskManagerParameters create(Configuration config, long containerMemoryMB, int numSlots) {     // (1) try to compute how much memory used by container     final long cutoffMB = calculateCutoffMB(config, containerMemoryMB).     // (2) split the remaining Java memory between heap and off-heap     final long heapSizeMB = TaskManagerServices.calculateHeapSizeMB(containerMemoryMB - cutoffMB, config).     // use the cut-off memory for off-heap (that was its intention)     final long offHeapSizeMB = containerMemoryMB - heapSizeMB.     // (3) obtain the additional environment variables from the configuration     final HashMap<String, String> envVars = new HashMap<>().     final String prefix = ResourceManagerOptions.CONTAINERIZED_TASK_MANAGER_ENV_PREFIX.     for (String key : config.keySet()) {         if (key.startsWith(prefix) && key.length() > prefix.length()) {             // remove prefix             String envVarKey = key.substring(prefix.length()).             envVars.put(envVarKey, config.getString(key, null)).         }     }     // done     return new ContaineredTaskManagerParameters(containerMemoryMB, heapSizeMB, offHeapSizeMB, numSlots, envVars). }
