commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TypeSerializer<K> getKeySerializer() {     return keySerializer. }
false;public;0;4;;@Override public TypeSerializer<N> getNamespaceSerializer() {     return namespaceSerializer. }
false;public;0;4;;@Override public TypeSerializer<List<V>> getValueSerializer() {     return valueSerializer. }
false;public;0;4;;// ------------------------------------------------------------------------ // state access // ------------------------------------------------------------------------ @Override public Iterable<V> get() {     return getInternal(). }
false;public;1;15;;@Override public void add(V value) {     Preconditions.checkNotNull(value, "You cannot add null to a ListState.").     final N namespace = currentNamespace.     final StateTable<K, N, List<V>> map = stateTable.     List<V> list = map.get(namespace).     if (list == null) {         list = new ArrayList<>().         map.put(namespace, list).     }     list.add(value). }
false;public;4;37;;@Override public byte[] getSerializedValue(final byte[] serializedKeyAndNamespace, final TypeSerializer<K> safeKeySerializer, final TypeSerializer<N> safeNamespaceSerializer, final TypeSerializer<List<V>> safeValueSerializer) throws Exception {     Preconditions.checkNotNull(serializedKeyAndNamespace).     Preconditions.checkNotNull(safeKeySerializer).     Preconditions.checkNotNull(safeNamespaceSerializer).     Preconditions.checkNotNull(safeValueSerializer).     Tuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(serializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer).     List<V> result = stateTable.get(keyAndNamespace.f0, keyAndNamespace.f1).     if (result == null) {         return null.     }     final TypeSerializer<V> dupSerializer = ((ListSerializer<V>) safeValueSerializer).getElementSerializer().     ByteArrayOutputStream baos = new ByteArrayOutputStream().     DataOutputViewStreamWrapper view = new DataOutputViewStreamWrapper(baos).     // write the same as RocksDB writes lists, with one ',' separator     for (int i = 0. i < result.size(). i++) {         dupSerializer.serialize(result.get(i), view).         if (i < result.size() - 1) {             view.writeByte(',').         }     }     view.flush().     return baos.toByteArray(). }
false;protected;2;5;;// ------------------------------------------------------------------------ // state merging // ------------------------------------------------------------------------ @Override protected List<V> mergeState(List<V> a, List<V> b) {     a.addAll(b).     return a. }
false;public;1;17;;@Override public void update(List<V> values) throws Exception {     Preconditions.checkNotNull(values, "List of values to add cannot be null.").     if (values.isEmpty()) {         clear().         return.     }     List<V> newStateList = new ArrayList<>().     for (V v : values) {         Preconditions.checkNotNull(v, "You cannot add null to a ListState.").         newStateList.add(v).     }     stateTable.put(currentNamespace, newStateList). }
false;public;1;17;;@Override public void addAll(List<V> values) throws Exception {     Preconditions.checkNotNull(values, "List of values to add cannot be null.").     if (!values.isEmpty()) {         stateTable.transform(currentNamespace, values, (previousState, value) -> {             if (previousState == null) {                 previousState = new ArrayList<>().             }             for (V v : value) {                 Preconditions.checkNotNull(v, "You cannot add null to a ListState.").                 previousState.add(v).             }             return previousState.         }).     } }
false;static;3;12;;@SuppressWarnings("unchecked") static <E, K, N, SV, S extends State, IS extends S> IS create(StateDescriptor<S, SV> stateDesc, StateTable<K, N, SV> stateTable, TypeSerializer<K> keySerializer) {     return (IS) new HeapListState<>((StateTable<K, N, List<E>>) stateTable, keySerializer, (TypeSerializer<List<E>>) stateTable.getStateSerializer(), stateTable.getNamespaceSerializer(), (List<E>) stateDesc.getDefaultValue()). }
