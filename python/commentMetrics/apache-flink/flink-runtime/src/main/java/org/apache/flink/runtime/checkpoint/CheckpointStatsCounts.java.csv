commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the number of restored checkpoints.  *  * @return Number of restored checkpoints.  */ ;/**  * Returns the number of restored checkpoints.  *  * @return Number of restored checkpoints.  */ public long getNumberOfRestoredCheckpoints() {     return numRestoredCheckpoints. }
true;public;0;3;/**  * Returns the total number of checkpoints (in progress, completed, failed).  *  * @return Total number of checkpoints.  */ ;/**  * Returns the total number of checkpoints (in progress, completed, failed).  *  * @return Total number of checkpoints.  */ public long getTotalNumberOfCheckpoints() {     return numTotalCheckpoints. }
true;public;0;3;/**  * Returns the number of in progress checkpoints.  *  * @return Number of in progress checkpoints.  */ ;/**  * Returns the number of in progress checkpoints.  *  * @return Number of in progress checkpoints.  */ public int getNumberOfInProgressCheckpoints() {     return numInProgressCheckpoints. }
true;public;0;3;/**  * Returns the number of completed checkpoints.  *  * @return Number of completed checkpoints.  */ ;/**  * Returns the number of completed checkpoints.  *  * @return Number of completed checkpoints.  */ public long getNumberOfCompletedCheckpoints() {     return numCompletedCheckpoints. }
true;public;0;3;/**  * Returns the number of failed checkpoints.  *  * @return Number of failed checkpoints.  */ ;/**  * Returns the number of failed checkpoints.  *  * @return Number of failed checkpoints.  */ public long getNumberOfFailedCheckpoints() {     return numFailedCheckpoints. }
true;;0;3;/**  * Increments the number of restored checkpoints.  */ ;/**  * Increments the number of restored checkpoints.  */ void incrementRestoredCheckpoints() {     numRestoredCheckpoints++. }
true;;0;4;/**  * Increments the number of total and in progress checkpoints.  */ ;/**  * Increments the number of total and in progress checkpoints.  */ void incrementInProgressCheckpoints() {     numInProgressCheckpoints++.     numTotalCheckpoints++. }
true;;0;6;/**  * Increments the number of successfully completed checkpoints.  *  * <p>It is expected that this follows a previous call to  * {@link #incrementInProgressCheckpoints()}.  */ ;/**  * Increments the number of successfully completed checkpoints.  *  * <p>It is expected that this follows a previous call to  * {@link #incrementInProgressCheckpoints()}.  */ void incrementCompletedCheckpoints() {     if (canDecrementOfInProgressCheckpointsNumber()) {         numInProgressCheckpoints--.     }     numCompletedCheckpoints++. }
true;;0;6;/**  * Increments the number of failed checkpoints.  *  * <p>It is expected that this follows a previous call to  * {@link #incrementInProgressCheckpoints()}.  */ ;/**  * Increments the number of failed checkpoints.  *  * <p>It is expected that this follows a previous call to  * {@link #incrementInProgressCheckpoints()}.  */ void incrementFailedCheckpoints() {     if (canDecrementOfInProgressCheckpointsNumber()) {         numInProgressCheckpoints--.     }     numFailedCheckpoints++. }
true;;0;8;/**  * Creates a snapshot of the current state.  *  * @return Snapshot of the current state.  */ ;/**  * Creates a snapshot of the current state.  *  * @return Snapshot of the current state.  */ CheckpointStatsCounts createSnapshot() {     return new CheckpointStatsCounts(numRestoredCheckpoints, numTotalCheckpoints, numInProgressCheckpoints, numCompletedCheckpoints, numFailedCheckpoints). }
false;private;0;9;;private boolean canDecrementOfInProgressCheckpointsNumber() {     boolean decrementLeadsToNegativeNumber = numInProgressCheckpoints - 1 < 0.     if (decrementLeadsToNegativeNumber) {         String errorMessage = "Incremented the completed number of checkpoints " + "without incrementing the in progress checkpoints before.".         LOG.warn(errorMessage).     }     return !decrementLeadsToNegativeNumber. }
