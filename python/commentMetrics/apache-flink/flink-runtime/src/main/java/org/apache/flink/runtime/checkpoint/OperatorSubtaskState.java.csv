commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;3;;private static <T extends StateObject> StateObjectCollection<T> singletonOrEmptyOnNull(T element) {     return element != null ? StateObjectCollection.singleton(element) : StateObjectCollection.empty(). }
true;public;0;4;/**  * Returns a handle to the managed operator state.  */ ;// -------------------------------------------------------------------------------------------- /**  * Returns a handle to the managed operator state.  */ @Nonnull public StateObjectCollection<OperatorStateHandle> getManagedOperatorState() {     return managedOperatorState. }
true;public;0;4;/**  * Returns a handle to the raw operator state.  */ ;/**  * Returns a handle to the raw operator state.  */ @Nonnull public StateObjectCollection<OperatorStateHandle> getRawOperatorState() {     return rawOperatorState. }
true;public;0;4;/**  * Returns a handle to the managed keyed state.  */ ;/**  * Returns a handle to the managed keyed state.  */ @Nonnull public StateObjectCollection<KeyedStateHandle> getManagedKeyedState() {     return managedKeyedState. }
true;public;0;4;/**  * Returns a handle to the raw keyed state.  */ ;/**  * Returns a handle to the raw keyed state.  */ @Nonnull public StateObjectCollection<KeyedStateHandle> getRawKeyedState() {     return rawKeyedState. }
false;public;0;18;;@Override public void discardState() {     try {         List<StateObject> toDispose = new ArrayList<>(managedOperatorState.size() + rawOperatorState.size() + managedKeyedState.size() + rawKeyedState.size()).         toDispose.addAll(managedOperatorState).         toDispose.addAll(rawOperatorState).         toDispose.addAll(managedKeyedState).         toDispose.addAll(rawKeyedState).         StateUtil.bestEffortDiscardAllStateObjects(toDispose).     } catch (Exception e) {         LOG.warn("Error while discarding operator states.", e).     } }
false;public;1;5;;@Override public void registerSharedStates(SharedStateRegistry sharedStateRegistry) {     registerSharedState(sharedStateRegistry, managedKeyedState).     registerSharedState(sharedStateRegistry, rawKeyedState). }
false;private,static;2;9;;private static void registerSharedState(SharedStateRegistry sharedStateRegistry, Iterable<KeyedStateHandle> stateHandles) {     for (KeyedStateHandle stateHandle : stateHandles) {         if (stateHandle != null) {             stateHandle.registerSharedStates(sharedStateRegistry).         }     } }
false;public;0;4;;@Override public long getStateSize() {     return stateSize. }
false;public;1;25;;// -------------------------------------------------------------------------------------------- @Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     OperatorSubtaskState that = (OperatorSubtaskState) o.     if (getStateSize() != that.getStateSize()) {         return false.     }     if (!getManagedOperatorState().equals(that.getManagedOperatorState())) {         return false.     }     if (!getRawOperatorState().equals(that.getRawOperatorState())) {         return false.     }     if (!getManagedKeyedState().equals(that.getManagedKeyedState())) {         return false.     }     return getRawKeyedState().equals(that.getRawKeyedState()). }
false;public;0;9;;@Override public int hashCode() {     int result = getManagedOperatorState().hashCode().     result = 31 * result + getRawOperatorState().hashCode().     result = 31 * result + getManagedKeyedState().hashCode().     result = 31 * result + getRawKeyedState().hashCode().     result = 31 * result + (int) (getStateSize() ^ (getStateSize() >>> 32)).     return result. }
false;public;0;10;;@Override public String toString() {     return "SubtaskState{" + "operatorStateFromBackend=" + managedOperatorState + ", operatorStateFromStream=" + rawOperatorState + ", keyedStateFromBackend=" + managedKeyedState + ", keyedStateFromStream=" + rawKeyedState + ", stateSize=" + stateSize + '}'. }
false;public;0;6;;public boolean hasState() {     return managedOperatorState.hasState() || rawOperatorState.hasState() || managedKeyedState.hasState() || rawKeyedState.hasState(). }
