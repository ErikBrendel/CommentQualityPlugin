commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int size() {     return size. }
false;public;1;5;;public boolean add(long number) {     grow(size + 1).     array[size++] = number.     return true. }
false;public;1;11;;public long removeLong(int index) {     if (index >= size) {         throw new IndexOutOfBoundsException("Index (" + index + ") is greater than or equal to list size (" + size + ")").     }     final long old = array[index].     size--.     if (index != size) {         System.arraycopy(array, index + 1, array, index, size - index).     }     return old. }
false;public;0;3;;public void clear() {     size = 0. }
false;public;0;3;;public boolean isEmpty() {     return (size == 0). }
false;public;0;3;;public long[] toArray() {     return Arrays.copyOf(array, size). }
false;private;1;8;;private void grow(int length) {     if (length > array.length) {         final int newLength = (int) Math.max(Math.min(2L * array.length, Integer.MAX_VALUE - 8), length).         final long[] t = new long[newLength].         System.arraycopy(array, 0, t, 0, size).         array = t.     } }
