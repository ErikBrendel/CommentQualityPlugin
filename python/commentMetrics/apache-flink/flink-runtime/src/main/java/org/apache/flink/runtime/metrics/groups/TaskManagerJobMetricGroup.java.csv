commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;3;;public final TaskManagerMetricGroup parent() {     return parent. }
false;public;5;32;;// ------------------------------------------------------------------------ // adding / removing tasks // ------------------------------------------------------------------------ public TaskMetricGroup addTask(final JobVertexID jobVertexId, final ExecutionAttemptID executionAttemptID, final String taskName, final int subtaskIndex, final int attemptNumber) {     checkNotNull(jobVertexId).     checkNotNull(executionAttemptID).     checkNotNull(taskName).     synchronized (this) {         if (!isClosed()) {             TaskMetricGroup prior = tasks.get(executionAttemptID).             if (prior != null) {                 return prior.             } else {                 TaskMetricGroup task = new TaskMetricGroup(registry, this, jobVertexId, executionAttemptID, taskName, subtaskIndex, attemptNumber).                 tasks.put(executionAttemptID, task).                 return task.             }         } else {             return null.         }     } }
false;public;1;18;;public void removeTaskMetricGroup(AbstractID executionId) {     checkNotNull(executionId).     boolean removeFromParent = false.     synchronized (this) {         if (!isClosed() && tasks.remove(executionId) != null && tasks.isEmpty()) {             // this call removed the last task. close this group.             removeFromParent = true.             close().         }     }     // because it would violate the "first parent then subgroup" lock acquisition order     if (removeFromParent) {         parent.removeJobMetricsGroup(jobId, this).     } }
false;protected;0;4;;// ------------------------------------------------------------------------ // Component Metric Group Specifics // ------------------------------------------------------------------------ @Override protected Iterable<? extends ComponentMetricGroup> subComponents() {     return tasks.values(). }
