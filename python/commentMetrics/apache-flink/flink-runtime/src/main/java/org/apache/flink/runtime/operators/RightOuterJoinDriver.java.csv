commented;modifiers;parameterAmount;loc;comment;code
false;protected;11;57;;@Override protected JoinTaskIterator<IT1, IT2, OT> getReusingOuterJoinIterator(DriverStrategy driverStrategy, MutableObjectIterator<IT1> in1, MutableObjectIterator<IT2> in2, TypeSerializer<IT1> serializer1, TypeComparator<IT1> comparator1, TypeSerializer<IT2> serializer2, TypeComparator<IT2> comparator2, TypePairComparatorFactory<IT1, IT2> pairComparatorFactory, MemoryManager memoryManager, IOManager ioManager, double driverMemFraction) throws Exception {     switch(driverStrategy) {         case RIGHT_OUTER_MERGE:             int numPages = memoryManager.computeNumberOfPages(driverMemFraction).             return new ReusingMergeOuterJoinIterator<>(OuterJoinType.RIGHT, in1, in2, serializer1, comparator1, serializer2, comparator2, pairComparatorFactory.createComparator12(comparator1, comparator2), memoryManager, ioManager, numPages, super.taskContext.getContainingTask()).         case RIGHT_HYBRIDHASH_BUILD_FIRST:             return new ReusingBuildFirstHashJoinIterator<>(in1, in2, serializer1, comparator1, serializer2, comparator2, pairComparatorFactory.createComparator21(comparator1, comparator2), memoryManager, ioManager, this.taskContext.getContainingTask(), driverMemFraction, true, false, false).         case RIGHT_HYBRIDHASH_BUILD_SECOND:             return new ReusingBuildSecondHashJoinIterator<>(in1, in2, serializer1, comparator1, serializer2, comparator2, pairComparatorFactory.createComparator12(comparator1, comparator2), memoryManager, ioManager, this.taskContext.getContainingTask(), driverMemFraction, false, true, false).         default:             throw new Exception("Unsupported driver strategy for right outer join driver: " + driverStrategy.name()).     } }
false;protected;11;57;;@Override protected JoinTaskIterator<IT1, IT2, OT> getNonReusingOuterJoinIterator(DriverStrategy driverStrategy, MutableObjectIterator<IT1> in1, MutableObjectIterator<IT2> in2, TypeSerializer<IT1> serializer1, TypeComparator<IT1> comparator1, TypeSerializer<IT2> serializer2, TypeComparator<IT2> comparator2, TypePairComparatorFactory<IT1, IT2> pairComparatorFactory, MemoryManager memoryManager, IOManager ioManager, double driverMemFraction) throws Exception {     switch(driverStrategy) {         case RIGHT_OUTER_MERGE:             int numPages = memoryManager.computeNumberOfPages(driverMemFraction).             return new NonReusingMergeOuterJoinIterator<>(OuterJoinType.RIGHT, in1, in2, serializer1, comparator1, serializer2, comparator2, pairComparatorFactory.createComparator12(comparator1, comparator2), memoryManager, ioManager, numPages, super.taskContext.getContainingTask()).         case RIGHT_HYBRIDHASH_BUILD_FIRST:             return new NonReusingBuildFirstHashJoinIterator<>(in1, in2, serializer1, comparator1, serializer2, comparator2, pairComparatorFactory.createComparator21(comparator1, comparator2), memoryManager, ioManager, this.taskContext.getContainingTask(), driverMemFraction, true, false, false).         case RIGHT_HYBRIDHASH_BUILD_SECOND:             return new NonReusingBuildSecondHashJoinIterator<>(in1, in2, serializer1, comparator1, serializer2, comparator2, pairComparatorFactory.createComparator12(comparator1, comparator2), memoryManager, ioManager, this.taskContext.getContainingTask(), driverMemFraction, false, true, false).         default:             throw new Exception("Unsupported driver strategy for right outer join driver: " + driverStrategy.name()).     } }
