commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;/**  * Returns the number of arenas.  *  * @return Number of arenas.  */ ;/**  * Returns the number of arenas.  *  * @return Number of arenas.  */ int getNumberOfArenas() {     return numberOfArenas. }
true;;0;3;/**  * Returns the chunk size.  *  * @return Chunk size.  */ ;/**  * Returns the chunk size.  *  * @return Chunk size.  */ int getChunkSize() {     return chunkSize. }
true;public;0;20;/**  * Returns the number of currently allocated bytes.  *  * <p>The stats are gathered via Reflection and are mostly relevant for  * debugging purposes.  *  * @return Number of currently allocated bytes.  *  * @throws NoSuchFieldException   Error getting the statistics (should not  *                                happen when the Netty version stays the  *                                same).  * @throws IllegalAccessException Error getting the statistics (should not  *                                happen when the Netty version stays the  *                                same).  */ ;// ------------------------------------------------------------------------ // Direct pool arena stats via Reflection. This is not safe when upgrading // Netty versions, but we are currently bound to the version we have (see // commit d92e422). In newer Netty versions these statistics are exposed. // ------------------------------------------------------------------------ /**  * Returns the number of currently allocated bytes.  *  * <p>The stats are gathered via Reflection and are mostly relevant for  * debugging purposes.  *  * @return Number of currently allocated bytes.  *  * @throws NoSuchFieldException   Error getting the statistics (should not  *                                happen when the Netty version stays the  *                                same).  * @throws IllegalAccessException Error getting the statistics (should not  *                                happen when the Netty version stays the  *                                same).  */ public Option<Long> getNumberOfAllocatedBytes() throws NoSuchFieldException, IllegalAccessException {     if (directArenas != null) {         long numChunks = 0.         for (Object arena : directArenas) {             numChunks += getNumberOfAllocatedChunks(arena, "qInit").             numChunks += getNumberOfAllocatedChunks(arena, "q000").             numChunks += getNumberOfAllocatedChunks(arena, "q025").             numChunks += getNumberOfAllocatedChunks(arena, "q050").             numChunks += getNumberOfAllocatedChunks(arena, "q075").             numChunks += getNumberOfAllocatedChunks(arena, "q100").         }         long allocatedBytes = numChunks * chunkSize.         return Option.apply(allocatedBytes).     } else {         return Option.empty().     } }
true;private;2;36;/**  * Returns the number of allocated bytes of the given arena and chunk list.  *  * @param arena              Arena to gather statistics about.  * @param chunkListFieldName Chunk list to check.  *  * @return Number of total allocated bytes by this arena.  *  * @throws NoSuchFieldException   Error getting the statistics (should not  *                                happen when the Netty version stays the  *                                same).  * @throws IllegalAccessException Error getting the statistics (should not  *                                happen when the Netty version stays the  *                                same).  */ ;/**  * Returns the number of allocated bytes of the given arena and chunk list.  *  * @param arena              Arena to gather statistics about.  * @param chunkListFieldName Chunk list to check.  *  * @return Number of total allocated bytes by this arena.  *  * @throws NoSuchFieldException   Error getting the statistics (should not  *                                happen when the Netty version stays the  *                                same).  * @throws IllegalAccessException Error getting the statistics (should not  *                                happen when the Netty version stays the  *                                same).  */ private long getNumberOfAllocatedChunks(Object arena, String chunkListFieldName) throws NoSuchFieldException, IllegalAccessException {     // Each PoolArena<ByteBuffer> stores its allocated PoolChunk<ByteBuffer>     // instances grouped by usage (field qInit, q000, q025, etc.) in     // PoolChunkList<ByteBuffer> lists. Each list has zero or more     // PoolChunk<ByteBuffer> instances.     // Chunk list of arena     Field chunkListField = arena.getClass().getSuperclass().getDeclaredField(chunkListFieldName).     chunkListField.setAccessible(true).     Object chunkList = chunkListField.get(arena).     // Count the chunks in the list     Field headChunkField = chunkList.getClass().getDeclaredField("head").     headChunkField.setAccessible(true).     Object headChunk = headChunkField.get(chunkList).     if (headChunk == null) {         return 0.     } else {         int numChunks = 0.         Object current = headChunk.         while (current != null) {             Field nextChunkField = headChunk.getClass().getDeclaredField("next").             nextChunkField.setAccessible(true).             current = nextChunkField.get(current).             numChunks++.         }         return numChunks.     } }
false;public;0;4;;// ------------------------------------------------------------------------ // Prohibit heap buffer allocations // ------------------------------------------------------------------------ @Override public ByteBuf heapBuffer() {     throw new UnsupportedOperationException("Heap buffer"). }
false;public;1;4;;@Override public ByteBuf heapBuffer(int initialCapacity) {     throw new UnsupportedOperationException("Heap buffer"). }
false;public;2;4;;@Override public ByteBuf heapBuffer(int initialCapacity, int maxCapacity) {     throw new UnsupportedOperationException("Heap buffer"). }
false;public;0;4;;@Override public CompositeByteBuf compositeHeapBuffer() {     throw new UnsupportedOperationException("Heap buffer"). }
false;public;1;4;;@Override public CompositeByteBuf compositeHeapBuffer(int maxNumComponents) {     throw new UnsupportedOperationException("Heap buffer"). }
