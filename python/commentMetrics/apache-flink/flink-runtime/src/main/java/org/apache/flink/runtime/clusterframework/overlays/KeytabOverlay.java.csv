commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public void configure(ContainerSpecification container) throws IOException {     if (keytab != null) {         container.getArtifacts().add(ContainerSpecification.Artifact.newBuilder().setSource(keytab).setDest(TARGET_PATH).setCachable(false).build()).         container.getDynamicConfiguration().setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, TARGET_PATH.getPath()).     } }
false;public,static;0;3;;public static Builder newBuilder() {     return new Builder(). }
true;public;1;13;/**  * Configures the overlay using the current environment (and global configuration).  *  * The following Flink configuration settings are checked for a keytab:  *  - security.kerberos.login.keytab  */ ;/**  * Configures the overlay using the current environment (and global configuration).  *  * The following Flink configuration settings are checked for a keytab:  *  - security.kerberos.login.keytab  */ public Builder fromEnvironment(Configuration globalConfiguration) {     String keytab = globalConfiguration.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB).     if (keytab != null) {         keytabPath = new File(keytab).         if (!keytabPath.exists()) {             throw new IllegalStateException("Invalid configuration for " + SecurityOptions.KERBEROS_LOGIN_KEYTAB + ". '" + keytab + "' not found.").         }     }     return this. }
false;public;0;3;;public KeytabOverlay build() {     return new KeytabOverlay(keytabPath). }
