commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;1;1;/**  * Create a copy of this QueryScopeInfo and append the given scope.  *  * @param userScope scope to append  * @return modified copy of this QueryScopeInfo  */ ;/**  * Create a copy of this QueryScopeInfo and append the given scope.  *  * @param userScope scope to append  * @return modified copy of this QueryScopeInfo  */ public abstract QueryScopeInfo copy(String userScope).
true;public,abstract;0;1;/**  * Returns the category for this QueryScopeInfo.  *  * @return category  */ ;/**  * Returns the category for this QueryScopeInfo.  *  * @return category  */ public abstract byte getCategory().
false;public;0;7;;@Override public String toString() {     return "QueryScopeInfo{" + "scope='" + scope + '\'' + ", category='" + getCategory() + '\'' + '}'. }
false;protected;1;5;;protected String concatScopes(String additionalScope) {     return scope.isEmpty() ? additionalScope : scope + "." + additionalScope. }
false;public;1;4;;@Override public JobManagerQueryScopeInfo copy(String additionalScope) {     return new JobManagerQueryScopeInfo(concatScopes(additionalScope)). }
false;public;0;4;;@Override public byte getCategory() {     return INFO_CATEGORY_JM. }
false;public;1;4;;@Override public TaskManagerQueryScopeInfo copy(String additionalScope) {     return new TaskManagerQueryScopeInfo(this.taskManagerID, concatScopes(additionalScope)). }
false;public;0;4;;@Override public byte getCategory() {     return INFO_CATEGORY_TM. }
false;public;1;4;;@Override public JobQueryScopeInfo copy(String additionalScope) {     return new JobQueryScopeInfo(this.jobID, concatScopes(additionalScope)). }
false;public;0;4;;@Override public byte getCategory() {     return INFO_CATEGORY_JOB. }
false;public;1;4;;@Override public TaskQueryScopeInfo copy(String additionalScope) {     return new TaskQueryScopeInfo(this.jobID, this.vertexID, this.subtaskIndex, concatScopes(additionalScope)). }
false;public;0;4;;@Override public byte getCategory() {     return INFO_CATEGORY_TASK. }
false;public;1;4;;@Override public OperatorQueryScopeInfo copy(String additionalScope) {     return new OperatorQueryScopeInfo(this.jobID, this.vertexID, this.subtaskIndex, this.operatorName, concatScopes(additionalScope)). }
false;public;0;4;;@Override public byte getCategory() {     return INFO_CATEGORY_OPERATOR. }
