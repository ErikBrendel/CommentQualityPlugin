commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the path where this handle's state is stored.  *  * @return The path where this handle's state is stored.  */ ;/**  * Gets the path where this handle's state is stored.  *  * @return The path where this handle's state is stored.  */ public Path getFilePath() {     return filePath. }
false;public;0;4;;@Override public FSDataInputStream openInputStream() throws IOException {     return getFileSystem().open(filePath). }
true;public;0;5;/**  * Discard the state by deleting the file that stores the state. If the parent directory  * of the state is empty after deleting the state file, it is also deleted.  *  * @throws Exception Thrown, if the file deletion (not the directory deletion) fails.  */ ;/**  * Discard the state by deleting the file that stores the state. If the parent directory  * of the state is empty after deleting the state file, it is also deleted.  *  * @throws Exception Thrown, if the file deletion (not the directory deletion) fails.  */ @Override public void discardState() throws Exception {     FileSystem fs = getFileSystem().     fs.delete(filePath, false). }
true;public;0;4;/**  * Returns the file size in bytes.  *  * @return The file size in bytes.  */ ;/**  * Returns the file size in bytes.  *  * @return The file size in bytes.  */ @Override public long getStateSize() {     return stateSize. }
true;private;0;3;/**  * Gets the file system that stores the file state.  *  * @return The file system that stores the file state.  * @throws IOException Thrown if the file system cannot be accessed.  */ ;/**  * Gets the file system that stores the file state.  *  * @return The file system that stores the file state.  * @throws IOException Thrown if the file system cannot be accessed.  */ private FileSystem getFileSystem() throws IOException {     return FileSystem.get(filePath.toUri()). }
false;public;1;13;;// ------------------------------------------------------------------------ @Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (!(o instanceof FileStateHandle)) {         return false.     }     FileStateHandle that = (FileStateHandle) o.     return filePath.equals(that.filePath). }
false;public;0;4;;@Override public int hashCode() {     return filePath.hashCode(). }
false;public;0;4;;@Override public String toString() {     return String.format("File State: %s [%d bytes]", filePath, stateSize). }
