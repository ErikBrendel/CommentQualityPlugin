commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public IOMetrics createSnapshot() {     return new IOMetrics(numRecordsInRate, numRecordsOutRate, numBytesInRateLocal, numBytesInRateRemote, numBytesOutRate). }
true;public;0;3;// ============================================================================================ ;// ============================================================================================ // Getters // ============================================================================================ public Counter getNumBytesOutCounter() {     return numBytesOut. }
false;public;0;3;;public Counter getNumBytesInLocalCounter() {     return numBytesInLocal. }
false;public;0;3;;public Counter getNumBytesInRemoteCounter() {     return numBytesInRemote. }
false;public;0;3;;public Counter getNumRecordsInCounter() {     return numRecordsIn. }
false;public;0;3;;public Counter getNumRecordsOutCounter() {     return numRecordsOut. }
false;public;0;3;;public Counter getNumBuffersOutCounter() {     return numBuffersOut. }
false;public;0;3;;public Counter getNumBuffersInLocalCounter() {     return numBuffersInLocal. }
false;public;0;3;;public Counter getNumBuffersInRemoteCounter() {     return numBuffersInRemote. }
false;public;0;3;;public Meter getNumBytesInLocalRateMeter() {     return numBytesInRateLocal. }
false;public;0;3;;public Meter getNumBytesInRemoteRateMeter() {     return numBytesInRateRemote. }
false;public;0;3;;public Meter getNumBytesOutRateMeter() {     return numBytesOutRate. }
true;public;1;7;/**  * Initialize Buffer Metrics for a task.  */ ;// ============================================================================================ // Buffer metrics // ============================================================================================ /**  * Initialize Buffer Metrics for a task.  */ public void initializeBufferMetrics(Task task) {     final MetricGroup buffers = addGroup("buffers").     buffers.gauge("inputQueueLength", new InputBuffersGauge(task)).     buffers.gauge("outputQueueLength", new OutputBuffersGauge(task)).     buffers.gauge("inPoolUsage", new InputBufferPoolUsageGauge(task)).     buffers.gauge("outPoolUsage", new OutputBufferPoolUsageGauge(task)). }
false;public;0;10;;@Override public Integer getValue() {     int totalBuffers = 0.     for (SingleInputGate inputGate : task.getAllInputGates()) {         totalBuffers += inputGate.getNumberOfQueuedBuffers().     }     return totalBuffers. }
false;public;0;10;;@Override public Integer getValue() {     int totalBuffers = 0.     for (ResultPartition producedPartition : task.getProducedPartitions()) {         totalBuffers += producedPartition.getNumberOfQueuedBuffers().     }     return totalBuffers. }
false;public;0;16;;@Override public Float getValue() {     int usedBuffers = 0.     int bufferPoolSize = 0.     for (SingleInputGate inputGate : task.getAllInputGates()) {         usedBuffers += inputGate.getBufferPool().bestEffortGetNumOfUsedBuffers().         bufferPoolSize += inputGate.getBufferPool().getNumBuffers().     }     if (bufferPoolSize != 0) {         return ((float) usedBuffers) / bufferPoolSize.     } else {         return 0.0f.     } }
false;public;0;16;;@Override public Float getValue() {     int usedBuffers = 0.     int bufferPoolSize = 0.     for (ResultPartition resultPartition : task.getProducedPartitions()) {         usedBuffers += resultPartition.getBufferPool().bestEffortGetNumOfUsedBuffers().         bufferPoolSize += resultPartition.getBufferPool().getNumBuffers().     }     if (bufferPoolSize != 0) {         return ((float) usedBuffers) / bufferPoolSize.     } else {         return 0.0f.     } }
true;public;1;3;// ============================================================================================ ;// ============================================================================================ // Metric Reuse // ============================================================================================ public void reuseRecordsInputCounter(Counter numRecordsInCounter) {     this.numRecordsIn.addCounter(numRecordsInCounter). }
false;public;1;3;;public void reuseRecordsOutputCounter(Counter numRecordsOutCounter) {     this.numRecordsOut.addCounter(numRecordsOutCounter). }
false;public;1;3;;public void addCounter(Counter toAdd) {     internalCounters.add(toAdd). }
false;public;0;8;;@Override public long getCount() {     long sum = super.getCount().     for (Counter counter : internalCounters) {         sum += counter.getCount().     }     return sum. }
