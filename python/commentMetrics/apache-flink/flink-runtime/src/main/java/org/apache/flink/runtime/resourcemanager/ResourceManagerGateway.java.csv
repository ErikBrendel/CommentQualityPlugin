commented;modifiers;parameterAmount;loc;comment;code
true;;5;6;/**  * Register a {@link JobMaster} at the resource manager.  *  * @param jobMasterId The fencing token for the JobMaster leader  * @param jobMasterResourceId The resource ID of the JobMaster that registers  * @param jobMasterAddress The address of the JobMaster that registers  * @param jobId The Job ID of the JobMaster that registers  * @param timeout Timeout for the future to complete  * @return Future registration response  */ ;/**  * Register a {@link JobMaster} at the resource manager.  *  * @param jobMasterId The fencing token for the JobMaster leader  * @param jobMasterResourceId The resource ID of the JobMaster that registers  * @param jobMasterAddress The address of the JobMaster that registers  * @param jobId The Job ID of the JobMaster that registers  * @param timeout Timeout for the future to complete  * @return Future registration response  */ CompletableFuture<RegistrationResponse> registerJobManager(JobMasterId jobMasterId, ResourceID jobMasterResourceId, String jobMasterAddress, JobID jobId, @RpcTimeout Time timeout).
true;;3;4;/**  * Requests a slot from the resource manager.  *  * @param jobMasterId id of the JobMaster  * @param slotRequest The slot to request  * @return The confirmation that the slot gets allocated  */ ;/**  * Requests a slot from the resource manager.  *  * @param jobMasterId id of the JobMaster  * @param slotRequest The slot to request  * @return The confirmation that the slot gets allocated  */ CompletableFuture<Acknowledge> requestSlot(JobMasterId jobMasterId, SlotRequest slotRequest, @RpcTimeout Time timeout).
true;;1;1;/**  * Cancel the slot allocation requests from the resource manager.  *  * @param allocationID The slot to request  */ ;/**  * Cancel the slot allocation requests from the resource manager.  *  * @param allocationID The slot to request  */ void cancelSlotRequest(AllocationID allocationID).
true;;5;6;/**  * Register a {@link TaskExecutor} at the resource manager.  *  * @param taskExecutorAddress The address of the TaskExecutor that registers  * @param resourceId The resource ID of the TaskExecutor that registers  * @param dataPort port used for data communication between TaskExecutors  * @param hardwareDescription of the registering TaskExecutor  * @param timeout The timeout for the response.  *  * @return The future to the response by the ResourceManager.  */ ;/**  * Register a {@link TaskExecutor} at the resource manager.  *  * @param taskExecutorAddress The address of the TaskExecutor that registers  * @param resourceId The resource ID of the TaskExecutor that registers  * @param dataPort port used for data communication between TaskExecutors  * @param hardwareDescription of the registering TaskExecutor  * @param timeout The timeout for the response.  *  * @return The future to the response by the ResourceManager.  */ CompletableFuture<RegistrationResponse> registerTaskExecutor(String taskExecutorAddress, ResourceID resourceId, int dataPort, HardwareDescription hardwareDescription, @RpcTimeout Time timeout).
true;;4;5;/**  * Sends the given {@link SlotReport} to the ResourceManager.  *  * @param taskManagerRegistrationId id identifying the sending TaskManager  * @param slotReport which is sent to the ResourceManager  * @param timeout for the operation  * @return Future which is completed with {@link Acknowledge} once the slot report has been received.  */ ;/**  * Sends the given {@link SlotReport} to the ResourceManager.  *  * @param taskManagerRegistrationId id identifying the sending TaskManager  * @param slotReport which is sent to the ResourceManager  * @param timeout for the operation  * @return Future which is completed with {@link Acknowledge} once the slot report has been received.  */ CompletableFuture<Acknowledge> sendSlotReport(ResourceID taskManagerResourceId, InstanceID taskManagerRegistrationId, SlotReport slotReport, @RpcTimeout Time timeout).
true;;3;4;/**  * Sent by the TaskExecutor to notify the ResourceManager that a slot has become available.  *  * @param instanceId TaskExecutor's instance id  * @param slotID The SlotID of the freed slot  * @param oldAllocationId to which the slot has been allocated  */ ;/**  * Sent by the TaskExecutor to notify the ResourceManager that a slot has become available.  *  * @param instanceId TaskExecutor's instance id  * @param slotID The SlotID of the freed slot  * @param oldAllocationId to which the slot has been allocated  */ void notifySlotAvailable(InstanceID instanceId, SlotID slotID, AllocationID oldAllocationId).
true;;1;1;/**  * Registers an infoMessage listener  *  * @param infoMessageListenerAddress address of infoMessage listener to register to this resource manager  */ ;/**  * Registers an infoMessage listener  *  * @param infoMessageListenerAddress address of infoMessage listener to register to this resource manager  */ void registerInfoMessageListener(String infoMessageListenerAddress).
true;;1;1;/**  * Unregisters an infoMessage listener  *  * @param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager  */ ;/**  * Unregisters an infoMessage listener  *  * @param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager  */ void unRegisterInfoMessageListener(String infoMessageListenerAddress).
true;;2;1;/**  * Deregister Flink from the underlying resource management system.  *  * @param finalStatus final status with which to deregister the Flink application  * @param diagnostics additional information for the resource management system, can be {@code null}  */ ;/**  * Deregister Flink from the underlying resource management system.  *  * @param finalStatus final status with which to deregister the Flink application  * @param diagnostics additional information for the resource management system, can be {@code null}  */ CompletableFuture<Acknowledge> deregisterApplication(final ApplicationStatus finalStatus, @Nullable final String diagnostics).
true;;0;1;/**  * Gets the currently registered number of TaskManagers.  *  * @return The future to the number of registered TaskManagers.  */ ;/**  * Gets the currently registered number of TaskManagers.  *  * @return The future to the number of registered TaskManagers.  */ CompletableFuture<Integer> getNumberOfRegisteredTaskManagers().
true;;2;1;/**  * Sends the heartbeat to resource manager from task manager  *  * @param heartbeatOrigin unique id of the task manager  * @param slotReport Current slot allocation on the originating TaskManager  */ ;/**  * Sends the heartbeat to resource manager from task manager  *  * @param heartbeatOrigin unique id of the task manager  * @param slotReport Current slot allocation on the originating TaskManager  */ void heartbeatFromTaskManager(final ResourceID heartbeatOrigin, final SlotReport slotReport).
true;;1;1;/**  * Sends the heartbeat to resource manager from job manager  *  * @param heartbeatOrigin unique id of the job manager  */ ;/**  * Sends the heartbeat to resource manager from job manager  *  * @param heartbeatOrigin unique id of the job manager  */ void heartbeatFromJobManager(final ResourceID heartbeatOrigin).
true;;2;1;/**  * Disconnects a TaskManager specified by the given resourceID from the {@link ResourceManager}.  *  * @param resourceID identifying the TaskManager to disconnect  * @param cause for the disconnection of the TaskManager  */ ;/**  * Disconnects a TaskManager specified by the given resourceID from the {@link ResourceManager}.  *  * @param resourceID identifying the TaskManager to disconnect  * @param cause for the disconnection of the TaskManager  */ void disconnectTaskManager(ResourceID resourceID, Exception cause).
true;;2;1;/**  * Disconnects a JobManager specified by the given resourceID from the {@link ResourceManager}.  *  * @param jobId JobID for which the JobManager was the leader  * @param cause for the disconnection of the JobManager  */ ;/**  * Disconnects a JobManager specified by the given resourceID from the {@link ResourceManager}.  *  * @param jobId JobID for which the JobManager was the leader  * @param cause for the disconnection of the JobManager  */ void disconnectJobManager(JobID jobId, Exception cause).
true;;1;1;/**  * Requests information about the registered {@link TaskExecutor}.  *  * @param timeout of the request  * @return Future collection of TaskManager information  */ ;/**  * Requests information about the registered {@link TaskExecutor}.  *  * @param timeout of the request  * @return Future collection of TaskManager information  */ CompletableFuture<Collection<TaskManagerInfo>> requestTaskManagerInfo(@RpcTimeout Time timeout).
true;;2;1;/**  * Requests information about the given {@link TaskExecutor}.  *  * @param taskManagerId identifying the TaskExecutor for which to return information  * @param timeout of the request  * @return Future TaskManager information  */ ;/**  * Requests information about the given {@link TaskExecutor}.  *  * @param taskManagerId identifying the TaskExecutor for which to return information  * @param timeout of the request  * @return Future TaskManager information  */ CompletableFuture<TaskManagerInfo> requestTaskManagerInfo(ResourceID taskManagerId, @RpcTimeout Time timeout).
true;;1;1;/**  * Requests the resource overview. The resource overview provides information about the  * connected TaskManagers, the total number of slots and the number of available slots.  *  * @param timeout of the request  * @return Future containing the resource overview  */ ;/**  * Requests the resource overview. The resource overview provides information about the  * connected TaskManagers, the total number of slots and the number of available slots.  *  * @param timeout of the request  * @return Future containing the resource overview  */ CompletableFuture<ResourceOverview> requestResourceOverview(@RpcTimeout Time timeout).
true;;1;1;/**  * Requests the paths for the TaskManager's {@link MetricQueryService} to query.  *  * @param timeout for the asynchronous operation  * @return Future containing the collection of resource ids and the corresponding metric query service path  */ ;/**  * Requests the paths for the TaskManager's {@link MetricQueryService} to query.  *  * @param timeout for the asynchronous operation  * @return Future containing the collection of resource ids and the corresponding metric query service path  */ CompletableFuture<Collection<Tuple2<ResourceID, String>>> requestTaskManagerMetricQueryServicePaths(@RpcTimeout Time timeout).
true;;3;1;/**  * Request the file upload from the given {@link TaskExecutor} to the cluster's {@link BlobServer}. The  * corresponding {@link TransientBlobKey} is returned.  *  * @param taskManagerId identifying the {@link TaskExecutor} to upload the specified file  * @param fileType type of the file to upload  * @param timeout for the asynchronous operation  * @return Future which is completed with the {@link TransientBlobKey} after uploading the file to the  * {@link BlobServer}.  */ ;/**  * Request the file upload from the given {@link TaskExecutor} to the cluster's {@link BlobServer}. The  * corresponding {@link TransientBlobKey} is returned.  *  * @param taskManagerId identifying the {@link TaskExecutor} to upload the specified file  * @param fileType type of the file to upload  * @param timeout for the asynchronous operation  * @return Future which is completed with the {@link TransientBlobKey} after uploading the file to the  * {@link BlobServer}.  */ CompletableFuture<TransientBlobKey> requestTaskManagerFileUpload(ResourceID taskManagerId, FileType fileType, @RpcTimeout Time timeout).
