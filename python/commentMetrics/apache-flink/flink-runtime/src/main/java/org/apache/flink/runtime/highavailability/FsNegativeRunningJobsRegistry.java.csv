commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;// ------------------------------------------------------------------------ @Override public void setJobRunning(JobID jobID) throws IOException {     checkNotNull(jobID, "jobID").     final Path filePath = createMarkerFilePath(RUNNING_PREFIX, jobID).     // create the file     // to avoid an exception if the job already exists, set overwrite=true     createFile(filePath, true). }
false;public;1;9;;@Override public void setJobFinished(JobID jobID) throws IOException {     checkNotNull(jobID, "jobID").     final Path filePath = createMarkerFilePath(DONE_PREFIX, jobID).     // create the file     // to avoid an exception if the job already exists, set overwrite=true     createFile(filePath, true). }
false;public;1;19;;@Override public JobSchedulingStatus getJobSchedulingStatus(JobID jobID) throws IOException {     checkNotNull(jobID, "jobID").     // first check for the existence of the complete file     if (fileSystem.exists(createMarkerFilePath(DONE_PREFIX, jobID))) {         // complete file was found --> job is terminated         return JobSchedulingStatus.DONE.     } else // check for the existence of the running file     if (fileSystem.exists(createMarkerFilePath(RUNNING_PREFIX, jobID))) {         // running file was found --> job is terminated         return JobSchedulingStatus.RUNNING.     } else {         // file does not exist, job is not scheduled         return JobSchedulingStatus.PENDING.     } }
false;public;1;18;;@Override public void clearJob(JobID jobID) throws IOException {     checkNotNull(jobID, "jobID").     final Path runningFilePath = createMarkerFilePath(RUNNING_PREFIX, jobID).     final Path doneFilePath = createMarkerFilePath(DONE_PREFIX, jobID).     // delete the running marker file, if it exists     try {         fileSystem.delete(runningFilePath, false).     } catch (FileNotFoundException ignored) {     }     // delete the finished marker file, if it exists     try {         fileSystem.delete(doneFilePath, false).     } catch (FileNotFoundException ignored) {     } }
false;private;2;3;;private Path createMarkerFilePath(String prefix, JobID jobId) {     return new Path(basePath, prefix + jobId.toString()). }
false;private;2;7;;private void createFile(Path path, boolean overwrite) throws IOException {     final WriteMode writeMode = overwrite ? WriteMode.OVERWRITE : WriteMode.NO_OVERWRITE.     try (FSDataOutputStream out = fileSystem.create(path, writeMode)) {         out.write(42).     } }
