# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMergeInnerJoinIterator -> @Override 	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) 			throws Exception;1438716927;Calls the <code>JoinFunction#join()</code> method for all two key-value pairs that share the same key and come_from different inputs. The output of the <code>join()</code> method is forwarded._<p/>_This method first zig-zags between the two sorted inputs in order to find a common_key, and then calls the join stub with the cross product of the values.__@throws Exception Forwards all exceptions from the user code and the I/O system._@see org.apache.flink.runtime.operators.util.JoinTaskIterator#callWithNextKey(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.util.Collector);@Override_	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector)_			throws Exception {_		if (!this.iterator1.nextKey() || !this.iterator2.nextKey()) {_			_			while (this.iterator1.nextKey()) __			while (this.iterator2.nextKey()) ___			return false__		}__		final TypePairComparator<T1, T2> comparator = this.pairComparator__		comparator.setReference(this.iterator1.getCurrent())__		T2 current2 = this.iterator2.getCurrent()___		_		while (true) {_			_			final int comp = comparator.compareToReference(current2)___			if (comp == 0) {_				break__			}__			if (comp < 0) {_				if (!this.iterator2.nextKey()) {_					return false__				}_				current2 = this.iterator2.getCurrent()__			} else {_				if (!this.iterator1.nextKey()) {_					return false__				}_				comparator.setReference(this.iterator1.getCurrent())__			}_		}__		_		_		final Iterator<T1> values1 = this.iterator1.getValues()__		final Iterator<T2> values2 = this.iterator2.getValues()___		crossMatchingGroup(values1, values2, joinFunction, collector)__		return true__	};calls,the,code,join,function,join,code,method,for,all,two,key,value,pairs,that,share,the,same,key,and,come,from,different,inputs,the,output,of,the,code,join,code,method,is,forwarded,p,this,method,first,zig,zags,between,the,two,sorted,inputs,in,order,to,find,a,common,key,and,then,calls,the,join,stub,with,the,cross,product,of,the,values,throws,exception,forwards,all,exceptions,from,the,user,code,and,the,i,o,system,see,org,apache,flink,runtime,operators,util,join,task,iterator,call,with,next,key,org,apache,flink,api,common,functions,flat,join,function,org,apache,flink,util,collector;override,public,boolean,call,with,next,key,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception,if,this,iterator1,next,key,this,iterator2,next,key,while,this,iterator1,next,key,while,this,iterator2,next,key,return,false,final,type,pair,comparator,t1,t2,comparator,this,pair,comparator,comparator,set,reference,this,iterator1,get,current,t2,current2,this,iterator2,get,current,while,true,final,int,comp,comparator,compare,to,reference,current2,if,comp,0,break,if,comp,0,if,this,iterator2,next,key,return,false,current2,this,iterator2,get,current,else,if,this,iterator1,next,key,return,false,comparator,set,reference,this,iterator1,get,current,final,iterator,t1,values1,this,iterator1,get,values,final,iterator,t2,values2,this,iterator2,get,values,cross,matching,group,values1,values2,join,function,collector,return,true
AbstractMergeInnerJoinIterator -> @Override 	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) 			throws Exception;1441738685;Calls the <code>JoinFunction#join()</code> method for all two key-value pairs that share the same key and come_from different inputs. The output of the <code>join()</code> method is forwarded._<p/>_This method first zig-zags between the two sorted inputs in order to find a common_key, and then calls the join stub with the cross product of the values.__@throws Exception Forwards all exceptions from the user code and the I/O system._@see org.apache.flink.runtime.operators.util.JoinTaskIterator#callWithNextKey(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.util.Collector);@Override_	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector)_			throws Exception {_		if (!this.iterator1.nextKey() || !this.iterator2.nextKey()) {_			_			while (this.iterator1.nextKey()) __			while (this.iterator2.nextKey()) ___			return false__		}__		final TypePairComparator<T1, T2> comparator = this.pairComparator__		comparator.setReference(this.iterator1.getCurrent())__		T2 current2 = this.iterator2.getCurrent()___		_		while (true) {_			_			final int comp = comparator.compareToReference(current2)___			if (comp == 0) {_				break__			}__			if (comp < 0) {_				if (!this.iterator2.nextKey()) {_					return false__				}_				current2 = this.iterator2.getCurrent()__			} else {_				if (!this.iterator1.nextKey()) {_					return false__				}_				comparator.setReference(this.iterator1.getCurrent())__			}_		}__		_		_		final Iterator<T1> values1 = this.iterator1.getValues()__		final Iterator<T2> values2 = this.iterator2.getValues()___		crossMatchingGroup(values1, values2, joinFunction, collector)__		return true__	};calls,the,code,join,function,join,code,method,for,all,two,key,value,pairs,that,share,the,same,key,and,come,from,different,inputs,the,output,of,the,code,join,code,method,is,forwarded,p,this,method,first,zig,zags,between,the,two,sorted,inputs,in,order,to,find,a,common,key,and,then,calls,the,join,stub,with,the,cross,product,of,the,values,throws,exception,forwards,all,exceptions,from,the,user,code,and,the,i,o,system,see,org,apache,flink,runtime,operators,util,join,task,iterator,call,with,next,key,org,apache,flink,api,common,functions,flat,join,function,org,apache,flink,util,collector;override,public,boolean,call,with,next,key,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception,if,this,iterator1,next,key,this,iterator2,next,key,while,this,iterator1,next,key,while,this,iterator2,next,key,return,false,final,type,pair,comparator,t1,t2,comparator,this,pair,comparator,comparator,set,reference,this,iterator1,get,current,t2,current2,this,iterator2,get,current,while,true,final,int,comp,comparator,compare,to,reference,current2,if,comp,0,break,if,comp,0,if,this,iterator2,next,key,return,false,current2,this,iterator2,get,current,else,if,this,iterator1,next,key,return,false,comparator,set,reference,this,iterator1,get,current,final,iterator,t1,values1,this,iterator1,get,values,final,iterator,t2,values2,this,iterator2,get,values,cross,matching,group,values1,values2,join,function,collector,return,true
AbstractMergeInnerJoinIterator -> @Override 	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) 			throws Exception;1446112342;Calls the <code>JoinFunction#join()</code> method for all two key-value pairs that share the same key and come_from different inputs. The output of the <code>join()</code> method is forwarded._<p>_This method first zig-zags between the two sorted inputs in order to find a common_key, and then calls the join stub with the cross product of the values.__@throws Exception Forwards all exceptions from the user code and the I/O system._@see org.apache.flink.runtime.operators.util.JoinTaskIterator#callWithNextKey(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.util.Collector);@Override_	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector)_			throws Exception {_		if (!this.iterator1.nextKey() || !this.iterator2.nextKey()) {_			_			while (this.iterator1.nextKey()) __			while (this.iterator2.nextKey()) ___			return false__		}__		final TypePairComparator<T1, T2> comparator = this.pairComparator__		comparator.setReference(this.iterator1.getCurrent())__		T2 current2 = this.iterator2.getCurrent()___		_		while (true) {_			_			final int comp = comparator.compareToReference(current2)___			if (comp == 0) {_				break__			}__			if (comp < 0) {_				if (!this.iterator2.nextKey()) {_					return false__				}_				current2 = this.iterator2.getCurrent()__			} else {_				if (!this.iterator1.nextKey()) {_					return false__				}_				comparator.setReference(this.iterator1.getCurrent())__			}_		}__		_		_		final Iterator<T1> values1 = this.iterator1.getValues()__		final Iterator<T2> values2 = this.iterator2.getValues()___		crossMatchingGroup(values1, values2, joinFunction, collector)__		return true__	};calls,the,code,join,function,join,code,method,for,all,two,key,value,pairs,that,share,the,same,key,and,come,from,different,inputs,the,output,of,the,code,join,code,method,is,forwarded,p,this,method,first,zig,zags,between,the,two,sorted,inputs,in,order,to,find,a,common,key,and,then,calls,the,join,stub,with,the,cross,product,of,the,values,throws,exception,forwards,all,exceptions,from,the,user,code,and,the,i,o,system,see,org,apache,flink,runtime,operators,util,join,task,iterator,call,with,next,key,org,apache,flink,api,common,functions,flat,join,function,org,apache,flink,util,collector;override,public,boolean,call,with,next,key,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception,if,this,iterator1,next,key,this,iterator2,next,key,while,this,iterator1,next,key,while,this,iterator2,next,key,return,false,final,type,pair,comparator,t1,t2,comparator,this,pair,comparator,comparator,set,reference,this,iterator1,get,current,t2,current2,this,iterator2,get,current,while,true,final,int,comp,comparator,compare,to,reference,current2,if,comp,0,break,if,comp,0,if,this,iterator2,next,key,return,false,current2,this,iterator2,get,current,else,if,this,iterator1,next,key,return,false,comparator,set,reference,this,iterator1,get,current,final,iterator,t1,values1,this,iterator1,get,values,final,iterator,t2,values2,this,iterator2,get,values,cross,matching,group,values1,values2,join,function,collector,return,true
AbstractMergeInnerJoinIterator -> @Override 	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector) 			throws Exception;1499939555;Calls the <code>JoinFunction#join()</code> method for all two key-value pairs that share the same key and come_from different inputs. The output of the <code>join()</code> method is forwarded._<p>_This method first zig-zags between the two sorted inputs in order to find a common_key, and then calls the join stub with the cross product of the values.__@throws Exception Forwards all exceptions from the user code and the I/O system._@see org.apache.flink.runtime.operators.util.JoinTaskIterator#callWithNextKey(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.util.Collector);@Override_	public boolean callWithNextKey(final FlatJoinFunction<T1, T2, O> joinFunction, final Collector<O> collector)_			throws Exception {_		if (!this.iterator1.nextKey() || !this.iterator2.nextKey()) {_			_			while (this.iterator1.nextKey()) {_			}_			while (this.iterator2.nextKey()) {_			}__			return false__		}__		final TypePairComparator<T1, T2> comparator = this.pairComparator__		comparator.setReference(this.iterator1.getCurrent())__		T2 current2 = this.iterator2.getCurrent()___		_		while (true) {_			_			final int comp = comparator.compareToReference(current2)___			if (comp == 0) {_				break__			}__			if (comp < 0) {_				if (!this.iterator2.nextKey()) {_					return false__				}_				current2 = this.iterator2.getCurrent()__			} else {_				if (!this.iterator1.nextKey()) {_					return false__				}_				comparator.setReference(this.iterator1.getCurrent())__			}_		}__		_		_		final Iterator<T1> values1 = this.iterator1.getValues()__		final Iterator<T2> values2 = this.iterator2.getValues()___		crossMatchingGroup(values1, values2, joinFunction, collector)__		return true__	};calls,the,code,join,function,join,code,method,for,all,two,key,value,pairs,that,share,the,same,key,and,come,from,different,inputs,the,output,of,the,code,join,code,method,is,forwarded,p,this,method,first,zig,zags,between,the,two,sorted,inputs,in,order,to,find,a,common,key,and,then,calls,the,join,stub,with,the,cross,product,of,the,values,throws,exception,forwards,all,exceptions,from,the,user,code,and,the,i,o,system,see,org,apache,flink,runtime,operators,util,join,task,iterator,call,with,next,key,org,apache,flink,api,common,functions,flat,join,function,org,apache,flink,util,collector;override,public,boolean,call,with,next,key,final,flat,join,function,t1,t2,o,join,function,final,collector,o,collector,throws,exception,if,this,iterator1,next,key,this,iterator2,next,key,while,this,iterator1,next,key,while,this,iterator2,next,key,return,false,final,type,pair,comparator,t1,t2,comparator,this,pair,comparator,comparator,set,reference,this,iterator1,get,current,t2,current2,this,iterator2,get,current,while,true,final,int,comp,comparator,compare,to,reference,current2,if,comp,0,break,if,comp,0,if,this,iterator2,next,key,return,false,current2,this,iterator2,get,current,else,if,this,iterator1,next,key,return,false,comparator,set,reference,this,iterator1,get,current,final,iterator,t1,values1,this,iterator1,get,values,final,iterator,t2,values2,this,iterator2,get,values,cross,matching,group,values1,values2,join,function,collector,return,true
