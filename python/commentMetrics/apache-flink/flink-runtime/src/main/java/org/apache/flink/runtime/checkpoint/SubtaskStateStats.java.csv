commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the subtask index.  *  * @return Subtask index.  */ ;/**  * Returns the subtask index.  *  * @return Subtask index.  */ public int getSubtaskIndex() {     return subtaskIndex. }
true;public;0;3;/**  * Returns the size of the checkpointed state at this subtask.  *  * @return Checkpoint state size of the sub task.  */ ;/**  * Returns the size of the checkpointed state at this subtask.  *  * @return Checkpoint state size of the sub task.  */ public long getStateSize() {     return stateSize. }
true;public;0;3;/**  * Returns the timestamp when the acknowledgement of this subtask was  * received at the coordinator.  *  * @return ACK timestamp at the coordinator.  */ ;/**  * Returns the timestamp when the acknowledgement of this subtask was  * received at the coordinator.  *  * @return ACK timestamp at the coordinator.  */ public long getAckTimestamp() {     return ackTimestamp. }
true;public;1;3;/**  * Computes the duration since the given trigger timestamp.  *  * <p>If the trigger timestamp is greater than the ACK timestamp, this  * returns <code>0</code>.  *  * @param triggerTimestamp Trigger timestamp of the checkpoint.  * @return Duration since the given trigger timestamp.  */ ;/**  * Computes the duration since the given trigger timestamp.  *  * <p>If the trigger timestamp is greater than the ACK timestamp, this  * returns <code>0</code>.  *  * @param triggerTimestamp Trigger timestamp of the checkpoint.  * @return Duration since the given trigger timestamp.  */ public long getEndToEndDuration(long triggerTimestamp) {     return Math.max(0, ackTimestamp - triggerTimestamp). }
true;public;0;3;/**  * Returns the duration of the synchronous part of the checkpoint.  *  * <p>Can return <code>-1</code> if the runtime did not report this.  *  * @return Duration of the synchronous part of the checkpoint or <code>-1</code>.  */ ;/**  * Returns the duration of the synchronous part of the checkpoint.  *  * <p>Can return <code>-1</code> if the runtime did not report this.  *  * @return Duration of the synchronous part of the checkpoint or <code>-1</code>.  */ public long getSyncCheckpointDuration() {     return syncCheckpointDuration. }
true;public;0;3;/**  * Returns the duration of the asynchronous part of the checkpoint.  *  * <p>Can return <code>-1</code> if the runtime did not report this.  *  * @return Duration of the asynchronous part of the checkpoint or <code>-1</code>.  */ ;/**  * Returns the duration of the asynchronous part of the checkpoint.  *  * <p>Can return <code>-1</code> if the runtime did not report this.  *  * @return Duration of the asynchronous part of the checkpoint or <code>-1</code>.  */ public long getAsyncCheckpointDuration() {     return asyncCheckpointDuration. }
true;public;0;3;/**  * Returns the number of bytes buffered during stream alignment (for  * exactly-once only).  *  * <p>Can return <code>-1</code> if the runtime did not report this.  *  * @return Number of bytes buffered during stream alignment or <code>-1</code>.  */ ;/**  * Returns the number of bytes buffered during stream alignment (for  * exactly-once only).  *  * <p>Can return <code>-1</code> if the runtime did not report this.  *  * @return Number of bytes buffered during stream alignment or <code>-1</code>.  */ public long getAlignmentBuffered() {     return alignmentBuffered. }
true;public;0;3;/**  * Returns the duration of the stream alignment (for exactly-once only).  *  * <p>Can return <code>-1</code> if the runtime did not report this.  *  * @return Duration of the stream alignment or <code>-1</code>.  */ ;/**  * Returns the duration of the stream alignment (for exactly-once only).  *  * <p>Can return <code>-1</code> if the runtime did not report this.  *  * @return Duration of the stream alignment or <code>-1</code>.  */ public long getAlignmentDuration() {     return alignmentDuration. }
