commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the address of the task manager with which the gateway is associated.  *  * @return Address of the task manager with which this gateway is associated.  */ ;/**  * Return the address of the task manager with which the gateway is associated.  *  * @return Address of the task manager with which this gateway is associated.  */ String getAddress().
true;;6;7;/**  * Request a stack trace sample from the given task.  *  * @param executionAttemptID identifying the task to sample  * @param sampleId of the sample  * @param numSamples to take from the given task  * @param delayBetweenSamples to wait for  * @param maxStackTraceDepth of the returned sample  * @param timeout of the request  * @return Future of stack trace sample response  */ ;/**  * Request a stack trace sample from the given task.  *  * @param executionAttemptID identifying the task to sample  * @param sampleId of the sample  * @param numSamples to take from the given task  * @param delayBetweenSamples to wait for  * @param maxStackTraceDepth of the returned sample  * @param timeout of the request  * @return Future of stack trace sample response  */ CompletableFuture<StackTraceSampleResponse> requestStackTraceSample(final ExecutionAttemptID executionAttemptID, final int sampleId, final int numSamples, final Time delayBetweenSamples, final int maxStackTraceDepth, final Time timeout).
true;;2;3;/**  * Submit a task to the task manager.  *  * @param tdd describing the task to submit  * @param timeout of the submit operation  * @return Future acknowledge of the successful operation  */ ;/**  * Submit a task to the task manager.  *  * @param tdd describing the task to submit  * @param timeout of the submit operation  * @return Future acknowledge of the successful operation  */ CompletableFuture<Acknowledge> submitTask(TaskDeploymentDescriptor tdd, Time timeout).
true;;2;3;/**  * Stop the given task.  *  * @param executionAttemptID identifying the task  * @param timeout of the submit operation  * @return Future acknowledge if the task is successfully stopped  */ ;/**  * Stop the given task.  *  * @param executionAttemptID identifying the task  * @param timeout of the submit operation  * @return Future acknowledge if the task is successfully stopped  */ CompletableFuture<Acknowledge> stopTask(ExecutionAttemptID executionAttemptID, Time timeout).
true;;2;3;/**  * Cancel the given task.  *  * @param executionAttemptID identifying the task  * @param timeout of the submit operation  * @return Future acknowledge if the task is successfully canceled  */ ;/**  * Cancel the given task.  *  * @param executionAttemptID identifying the task  * @param timeout of the submit operation  * @return Future acknowledge if the task is successfully canceled  */ CompletableFuture<Acknowledge> cancelTask(ExecutionAttemptID executionAttemptID, Time timeout).
true;;3;4;/**  * Update the task where the given partitions can be found.  *  * @param executionAttemptID identifying the task  * @param partitionInfos telling where the partition can be retrieved from  * @param timeout of the submit operation  * @return Future acknowledge if the partitions have been successfully updated  */ ;/**  * Update the task where the given partitions can be found.  *  * @param executionAttemptID identifying the task  * @param partitionInfos telling where the partition can be retrieved from  * @param timeout of the submit operation  * @return Future acknowledge if the partitions have been successfully updated  */ CompletableFuture<Acknowledge> updatePartitions(ExecutionAttemptID executionAttemptID, Iterable<PartitionInfo> partitionInfos, Time timeout).
true;;1;1;/**  * Fail all intermediate result partitions of the given task.  *  * @param executionAttemptID identifying the task  */ ;/**  * Fail all intermediate result partitions of the given task.  *  * @param executionAttemptID identifying the task  */ void failPartition(ExecutionAttemptID executionAttemptID).
true;;4;5;/**  * Notify the given task about a completed checkpoint.  *  * @param executionAttemptID identifying the task  * @param jobId identifying the job to which the task belongs  * @param checkpointId of the completed checkpoint  * @param timestamp of the completed checkpoint  */ ;/**  * Notify the given task about a completed checkpoint.  *  * @param executionAttemptID identifying the task  * @param jobId identifying the job to which the task belongs  * @param checkpointId of the completed checkpoint  * @param timestamp of the completed checkpoint  */ void notifyCheckpointComplete(ExecutionAttemptID executionAttemptID, JobID jobId, long checkpointId, long timestamp).
true;;5;6;/**  * Trigger for the given task a checkpoint.  *  * @param executionAttemptID identifying the task  * @param jobId identifying the job to which the task belongs  * @param checkpointId of the checkpoint to trigger  * @param timestamp of the checkpoint to trigger  * @param checkpointOptions of the checkpoint to trigger  */ ;/**  * Trigger for the given task a checkpoint.  *  * @param executionAttemptID identifying the task  * @param jobId identifying the job to which the task belongs  * @param checkpointId of the checkpoint to trigger  * @param timestamp of the checkpoint to trigger  * @param checkpointOptions of the checkpoint to trigger  */ void triggerCheckpoint(ExecutionAttemptID executionAttemptID, JobID jobId, long checkpointId, long timestamp, CheckpointOptions checkpointOptions).
true;;3;4;/**  * Frees the slot with the given allocation ID.  *  * @param allocationId identifying the slot to free  * @param cause of the freeing operation  * @param timeout for the operation  * @return Future acknowledge which is returned once the slot has been freed  */ ;/**  * Frees the slot with the given allocation ID.  *  * @param allocationId identifying the slot to free  * @param cause of the freeing operation  * @param timeout for the operation  * @return Future acknowledge which is returned once the slot has been freed  */ CompletableFuture<Acknowledge> freeSlot(final AllocationID allocationId, final Throwable cause, @RpcTimeout final Time timeout).
