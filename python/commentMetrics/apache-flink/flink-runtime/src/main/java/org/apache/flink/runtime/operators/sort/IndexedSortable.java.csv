commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Compare items at the given addresses consistent with the semantics of  * {@link java.util.Comparator#compare(Object, Object)}.  */ ;/**  * Compare items at the given addresses consistent with the semantics of  * {@link java.util.Comparator#compare(Object, Object)}.  */ int compare(int i, int j).
true;;4;1;/**  * Compare records at the given addresses consistent with the semantics of  * {@link java.util.Comparator#compare(Object, Object)}.  *  * @param segmentNumberI index of memory segment containing first record  * @param segmentOffsetI offset into memory segment containing first record  * @param segmentNumberJ index of memory segment containing second record  * @param segmentOffsetJ offset into memory segment containing second record  * @return a negative integer, zero, or a positive integer as the  *         first argument is less than, equal to, or greater than the  *         second.  */ ;/**  * Compare records at the given addresses consistent with the semantics of  * {@link java.util.Comparator#compare(Object, Object)}.  *  * @param segmentNumberI index of memory segment containing first record  * @param segmentOffsetI offset into memory segment containing first record  * @param segmentNumberJ index of memory segment containing second record  * @param segmentOffsetJ offset into memory segment containing second record  * @return a negative integer, zero, or a positive integer as the  *         first argument is less than, equal to, or greater than the  *         second.  */ int compare(int segmentNumberI, int segmentOffsetI, int segmentNumberJ, int segmentOffsetJ).
true;;2;1;/**  * Swap items at the given addresses.  */ ;/**  * Swap items at the given addresses.  */ void swap(int i, int j).
true;;4;1;/**  * Swap records at the given addresses.  *  * @param segmentNumberI index of memory segment containing first record  * @param segmentOffsetI offset into memory segment containing first record  * @param segmentNumberJ index of memory segment containing second record  * @param segmentOffsetJ offset into memory segment containing second record  */ ;/**  * Swap records at the given addresses.  *  * @param segmentNumberI index of memory segment containing first record  * @param segmentOffsetI offset into memory segment containing first record  * @param segmentNumberJ index of memory segment containing second record  * @param segmentOffsetJ offset into memory segment containing second record  */ void swap(int segmentNumberI, int segmentOffsetI, int segmentNumberJ, int segmentOffsetJ).
true;;0;1;/**  * Gets the number of elements in the sortable.  *  * @return The number of elements.  */ ;/**  * Gets the number of elements in the sortable.  *  * @return The number of elements.  */ int size().
true;;0;1;/**  * Gets the size of each record, the number of bytes separating the head  * of successive records.  *  * @return The record size  */ ;/**  * Gets the size of each record, the number of bytes separating the head  * of successive records.  *  * @return The record size  */ int recordSize().
true;;0;1;/**  * Gets the number of elements in each memory segment.  *  * @return The number of records per segment  */ ;/**  * Gets the number of elements in each memory segment.  *  * @return The number of records per segment  */ int recordsPerSegment().
