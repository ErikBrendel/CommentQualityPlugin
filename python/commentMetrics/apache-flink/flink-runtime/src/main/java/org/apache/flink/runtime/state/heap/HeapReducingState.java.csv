commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TypeSerializer<K> getKeySerializer() {     return keySerializer. }
false;public;0;4;;@Override public TypeSerializer<N> getNamespaceSerializer() {     return namespaceSerializer. }
false;public;0;4;;@Override public TypeSerializer<V> getValueSerializer() {     return valueSerializer. }
false;public;0;4;;// ------------------------------------------------------------------------ // state access // ------------------------------------------------------------------------ @Override public V get() {     return getInternal(). }
false;public;1;14;;@Override public void add(V value) throws IOException {     if (value == null) {         clear().         return.     }     try {         stateTable.transform(currentNamespace, value, reduceTransformation).     } catch (Exception e) {         throw new IOException("Exception while applying ReduceFunction in reducing state", e).     } }
false;protected;2;4;;// ------------------------------------------------------------------------ // state merging // ------------------------------------------------------------------------ @Override protected V mergeState(V a, V b) throws Exception {     return reduceTransformation.apply(a, b). }
false;public;2;4;;@Override public V apply(V previousState, V value) throws Exception {     return previousState != null ? reduceFunction.reduce(previousState, value) : value. }
false;static;3;13;;@SuppressWarnings("unchecked") static <K, N, SV, S extends State, IS extends S> IS create(StateDescriptor<S, SV> stateDesc, StateTable<K, N, SV> stateTable, TypeSerializer<K> keySerializer) {     return (IS) new HeapReducingState<>(stateTable, keySerializer, stateTable.getStateSerializer(), stateTable.getNamespaceSerializer(), stateDesc.getDefaultValue(), ((ReducingStateDescriptor<SV>) stateDesc).getReduceFunction()). }
