commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getCurrentRestartAttempt() {     return currentRestartAttempt. }
false;public;0;4;;@Override public boolean canRestart() {     return currentRestartAttempt < maxNumberRestartAttempts. }
false;public;2;5;;@Override public void restart(final RestartCallback restarter, ScheduledExecutor executor) {     currentRestartAttempt++.     executor.schedule(restarter::triggerFullRecovery, delayBetweenRestartAttempts, TimeUnit.MILLISECONDS). }
true;public,static;1;17;/**  * Creates a FixedDelayRestartStrategy from the given Configuration.  *  * @param configuration Configuration containing the parameter values for the restart strategy  * @return Initialized instance of FixedDelayRestartStrategy  * @throws Exception  */ ;/**  * Creates a FixedDelayRestartStrategy from the given Configuration.  *  * @param configuration Configuration containing the parameter values for the restart strategy  * @return Initialized instance of FixedDelayRestartStrategy  * @throws Exception  */ public static FixedDelayRestartStrategyFactory createFactory(Configuration configuration) throws Exception {     int maxAttempts = configuration.getInteger(ConfigConstants.RESTART_STRATEGY_FIXED_DELAY_ATTEMPTS, 1).     String delayString = configuration.getString(ConfigConstants.RESTART_STRATEGY_FIXED_DELAY_DELAY).     long delay.     try {         delay = Duration.apply(delayString).toMillis().     } catch (NumberFormatException nfe) {         throw new Exception("Invalid config value for " + ConfigConstants.RESTART_STRATEGY_FIXED_DELAY_DELAY + ": " + delayString + ". Value must be a valid duration (such as '100 milli' or '10 s')").     }     return new FixedDelayRestartStrategyFactory(maxAttempts, delay). }
false;public;0;7;;@Override public String toString() {     return "FixedDelayRestartStrategy(" + "maxNumberRestartAttempts=" + maxNumberRestartAttempts + ", delayBetweenRestartAttempts=" + delayBetweenRestartAttempts + ')'. }
false;public;0;4;;@Override public RestartStrategy createRestartStrategy() {     return new FixedDelayRestartStrategy(maxAttempts, delay). }
