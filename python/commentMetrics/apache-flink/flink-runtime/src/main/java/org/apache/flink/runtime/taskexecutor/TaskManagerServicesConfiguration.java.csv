# id;timestamp;commentText;codeText;commentWords;codeWords
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1494092429;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1494189318;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1507316227;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1507728810;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1507728812;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1508308828;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1508308828;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1509547920;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1510060074;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1511516912;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1516265158;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1516265159;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1517914184;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1518607727;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1519568061;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1524570317;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1526313052;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1530798894;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1533555608;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1537794187;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1547115122;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> protected static void checkNetworkBufferConfig( 			final int pageSize, final float networkBufFraction, final long networkBufMin, 			final long networkBufMax) throws IllegalConfigurationException;1549360056;Validates the (new) network buffer configuration.__@param pageSize 				size of memory buffers_@param networkBufFraction	fraction of JVM memory to use for network buffers_@param networkBufMin 		minimum memory size for network buffers (in bytes)_@param networkBufMax 		maximum memory size for network buffers (in bytes)__@throws IllegalConfigurationException if the condition does not hold;protected static void checkNetworkBufferConfig(_			final int pageSize, final float networkBufFraction, final long networkBufMin,_			final long networkBufMax) throws IllegalConfigurationException {__		checkConfigParameter(networkBufFraction > 0.0f && networkBufFraction < 1.0f, networkBufFraction,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION.key(),_			"Network buffer memory fraction of the free memory must be between 0.0 and 1.0")___		checkConfigParameter(networkBufMin >= pageSize, networkBufMin,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN.key(),_			"Minimum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= pageSize, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must allow at least one network " +_				"buffer with respect to the memory segment size")___		checkConfigParameter(networkBufMax >= networkBufMin, networkBufMax,_			TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key(),_			"Maximum memory for network buffers must not be smaller than minimum memory (" +_				TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX.key() + ": " + networkBufMin + ")")__	};validates,the,new,network,buffer,configuration,param,page,size,size,of,memory,buffers,param,network,buf,fraction,fraction,of,jvm,memory,to,use,for,network,buffers,param,network,buf,min,minimum,memory,size,for,network,buffers,in,bytes,param,network,buf,max,maximum,memory,size,for,network,buffers,in,bytes,throws,illegal,configuration,exception,if,the,condition,does,not,hold;protected,static,void,check,network,buffer,config,final,int,page,size,final,float,network,buf,fraction,final,long,network,buf,min,final,long,network,buf,max,throws,illegal,configuration,exception,check,config,parameter,network,buf,fraction,0,0f,network,buf,fraction,1,0f,network,buf,fraction,task,manager,options,key,network,buffer,memory,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,check,config,parameter,network,buf,min,page,size,network,buf,min,task,manager,options,key,minimum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,page,size,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,allow,at,least,one,network,buffer,with,respect,to,the,memory,segment,size,check,config,parameter,network,buf,max,network,buf,min,network,buf,max,task,manager,options,key,maximum,memory,for,network,buffers,must,not,be,smaller,than,minimum,memory,task,manager,options,key,network,buf,min
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1494092429;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = numNetworkBuffers * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			memType,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,mem,type,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1494189318;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long)numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			memType,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,mem,type,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1507316227;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long)numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			memType,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,mem,type,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1507728810;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			memType,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,mem,type,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1507728812;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			memType,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,mem,type,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1508308828;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			memType,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,mem,type,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1508308828;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			memType,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,mem,type,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1509547920;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			memType,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,mem,type,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1510060074;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			memType,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,mem,type,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1511516912;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1516265158;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1516265159;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1517914184;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1518607727;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(TaskManagerOptions.DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, TaskManagerOptions.DATA_PORT.key(),_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,task,manager,options,check,config,parameter,dataport,0,dataport,task,manager,options,key,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1519568061;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(TaskManagerOptions.DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, TaskManagerOptions.DATA_PORT.key(),_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,task,manager,options,check,config,parameter,dataport,0,dataport,task,manager,options,key,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1524570317;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(TaskManagerOptions.DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, TaskManagerOptions.DATA_PORT.key(),_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, TaskManagerOptions.NUM_TASK_SLOTS.key(),_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,task,manager,options,check,config,parameter,dataport,0,dataport,task,manager,options,key,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,task,manager,options,key,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1526313052;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(TaskManagerOptions.DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, TaskManagerOptions.DATA_PORT.key(),_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, TaskManagerOptions.NUM_TASK_SLOTS.key(),_			"Number of task slots must be at least one.")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)__		long networkBufMax = configuration.getLong(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,task,manager,options,check,config,parameter,dataport,0,dataport,task,manager,options,key,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,task,manager,options,key,number,of,task,slots,must,be,at,least,one,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,configuration,get,long,task,manager,options,long,network,buf,max,configuration,get,long,task,manager,options,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1530798894;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(TaskManagerOptions.DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, TaskManagerOptions.DATA_PORT.key(),_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, TaskManagerOptions.NUM_TASK_SLOTS.key(),_			"Number of task slots must be at least one.")___		final int pageSize = checkedDownCast(MemorySize.parse(configuration.getString(TaskManagerOptions.MEMORY_SEGMENT_SIZE)).getBytes())___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = MemorySize.parse(configuration.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)).getBytes()__		long networkBufMax = MemorySize.parse(configuration.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)).getBytes()__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,task,manager,options,check,config,parameter,dataport,0,dataport,task,manager,options,key,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,task,manager,options,key,number,of,task,slots,must,be,at,least,one,final,int,page,size,checked,down,cast,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,long,network,buf,max,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1533555608;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(TaskManagerOptions.DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, TaskManagerOptions.DATA_PORT.key(),_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, TaskManagerOptions.NUM_TASK_SLOTS.key(),_			"Number of task slots must be at least one.")___		final int pageSize = checkedDownCast(MemorySize.parse(configuration.getString(TaskManagerOptions.MEMORY_SEGMENT_SIZE)).getBytes())___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = MemorySize.parse(configuration.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)).getBytes()__		long networkBufMax = MemorySize.parse(configuration.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)).getBytes()__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,task,manager,options,check,config,parameter,dataport,0,dataport,task,manager,options,key,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,task,manager,options,key,number,of,task,slots,must,be,at,least,one,final,int,page,size,checked,down,cast,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,long,network,buf,max,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1537794187;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(TaskManagerOptions.DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, TaskManagerOptions.DATA_PORT.key(),_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, TaskManagerOptions.NUM_TASK_SLOTS.key(),_			"Number of task slots must be at least one.")___		final int pageSize = checkedDownCast(MemorySize.parse(configuration.getString(TaskManagerOptions.MEMORY_SEGMENT_SIZE)).getBytes())___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = MemorySize.parse(configuration.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)).getBytes()__		long networkBufMax = MemorySize.parse(configuration.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)).getBytes()__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,task,manager,options,check,config,parameter,dataport,0,dataport,task,manager,options,key,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,task,manager,options,key,number,of,task,slots,must,be,at,least,one,final,int,page,size,checked,down,cast,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,long,network,buf,max,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1547115122;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(TaskManagerOptions.DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, TaskManagerOptions.DATA_PORT.key(),_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, TaskManagerOptions.NUM_TASK_SLOTS.key(),_			"Number of task slots must be at least one.")___		final int pageSize = checkedDownCast(MemorySize.parse(configuration.getString(TaskManagerOptions.MEMORY_SEGMENT_SIZE)).getBytes())___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = MemorySize.parse(configuration.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)).getBytes()__		long networkBufMax = MemorySize.parse(configuration.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)).getBytes()__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,task,manager,options,check,config,parameter,dataport,0,dataport,task,manager,options,key,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,task,manager,options,key,number,of,task,slots,must,be,at,least,one,final,int,page,size,checked,down,cast,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,long,network,buf,max,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1549360056;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;@SuppressWarnings("deprecation")_	private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(TaskManagerOptions.DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, TaskManagerOptions.DATA_PORT.key(),_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, TaskManagerOptions.NUM_TASK_SLOTS.key(),_			"Number of task slots must be at least one.")___		final int pageSize = checkedDownCast(MemorySize.parse(configuration.getString(TaskManagerOptions.MEMORY_SEGMENT_SIZE)).getBytes())___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		__		float networkBufFraction = configuration.getFloat(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION)__		long networkBufMin = MemorySize.parse(configuration.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN)).getBytes()__		long networkBufMax = MemorySize.parse(configuration.getString(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX)).getBytes()__		checkNetworkBufferConfig(pageSize, networkBufFraction, networkBufMin, networkBufMax)___		_		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)__		checkNetworkConfigOld(numNetworkBuffers)___		if (!hasNewNetworkBufConf(configuration)) {_			_			networkBufMin = networkBufMax = ((long) numNetworkBuffers) * pageSize__		} else {_			if (configuration.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)) {_				LOG.info("Ignoring old (but still present) network buffer configuration via {}.",_					TaskManagerOptions.NETWORK_NUM_BUFFERS.key())__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			networkBufFraction,_			networkBufMin,_			networkBufMax,_			pageSize,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;suppress,warnings,deprecation,private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,task,manager,options,check,config,parameter,dataport,0,dataport,task,manager,options,key,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,task,manager,options,key,number,of,task,slots,must,be,at,least,one,final,int,page,size,checked,down,cast,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,float,network,buf,fraction,configuration,get,float,task,manager,options,long,network,buf,min,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,long,network,buf,max,memory,size,parse,configuration,get,string,task,manager,options,get,bytes,check,network,buffer,config,page,size,network,buf,fraction,network,buf,min,network,buf,max,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,network,config,old,num,network,buffers,if,has,new,network,buf,conf,configuration,network,buf,min,network,buf,max,long,num,network,buffers,page,size,else,if,configuration,contains,task,manager,options,log,info,ignoring,old,but,still,present,network,buffer,configuration,via,task,manager,options,key,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,network,buf,fraction,network,buf,min,network,buf,max,page,size,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1511516912;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1516265158;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1516265159;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1517914184;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1518607727;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1519568061;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1524570317;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1526313052;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1530798894;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1533555608;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1537794187;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1547115122;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> public MemoryType getMemoryType();1549360056;Returns the memory type to use.__@return on-heap or off-heap memory;public MemoryType getMemoryType() {_		return memoryType__	};returns,the,memory,type,to,use,return,on,heap,or,off,heap,memory;public,memory,type,get,memory,type,return,memory,type
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1494092429;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + _					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1494189318;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + _					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1507316227;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + _					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1507728810;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1507728812;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1508308828;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1508308828;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1509547920;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1510060074;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1511516912;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1516265158;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1516265159;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1517914184;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1518607727;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1519568061;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1524570317;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1526313052;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1530798894;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1533555608;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1537794187;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1547115122;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) 			throws IllegalConfigurationException;1549360056;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.__@throws IllegalConfigurationException if the condition does not hold;static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage)_			throws IllegalConfigurationException {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " +_					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message,throws,illegal,configuration,exception,if,the,condition,does,not,hold;static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,throws,illegal,configuration,exception,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> private static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage);1482522860;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.;private static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + _					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> private static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage);1482522861;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.;private static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + _					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> private static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage);1482522862;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.;private static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + _					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> private static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage);1482522866;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.;private static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + _					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> private static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage);1489149058;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.;private static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + _					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> private static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage);1491500150;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition             The condition that must hold. If the condition is false, an exception is thrown._@param parameter         The parameter value. Will be shown in the exception message._@param name              The name of the config parameter. Will be shown in the exception message._@param errorMessage  The optional custom error message to append to the exception message.;private static void checkConfigParameter(boolean condition, Object parameter, String name, String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + _					name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1494092429;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1494189318;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1507316227;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1507728810;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1507728812;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1508308828;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1508308828;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1509547920;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1510060074;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1511516912;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1516265158;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1516265159;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1517914184;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1518607727;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1519568061;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1524570317;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1526313052;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1530798894;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1533555608;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1537794187;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1547115122;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	public static boolean hasNewNetworkBufConf(final Configuration config);1549360056;Returns whether the new network buffer memory configuration is present in the configuration_object, i.e. at least one new parameter is given or the old one is not present.__@param config configuration object_@return <tt>true</tt> if the new configuration method is used, <tt>false</tt> otherwise;@SuppressWarnings("deprecation")_	public static boolean hasNewNetworkBufConf(final Configuration config) {_		return config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_FRACTION) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MIN) ||_			config.contains(TaskManagerOptions.NETWORK_BUFFERS_MEMORY_MAX) ||_			!config.contains(TaskManagerOptions.NETWORK_NUM_BUFFERS)__	};returns,whether,the,new,network,buffer,memory,configuration,is,present,in,the,configuration,object,i,e,at,least,one,new,parameter,is,given,or,the,old,one,is,not,present,param,config,configuration,object,return,tt,true,tt,if,the,new,configuration,method,is,used,tt,false,tt,otherwise;suppress,warnings,deprecation,public,static,boolean,has,new,network,buf,conf,final,configuration,config,return,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options,config,contains,task,manager,options
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1494092429;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1494189318;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1507316227;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1507728810;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1507728812;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1508308828;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1508308828;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1509547920;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1510060074;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1511516912;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1516265158;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1516265159;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1517914184;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1518607727;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1519568061;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1524570317;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1526313052;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1530798894;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1533555608;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1537794187;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1547115122;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> @SuppressWarnings("deprecation") 	protected static void checkNetworkConfigOld(final int numNetworkBuffers);1549360056;Validates the (old) network buffer configuration.__@param numNetworkBuffers		number of buffers used in the network stack__@throws IllegalConfigurationException if the condition does not hold;@SuppressWarnings("deprecation")_	protected static void checkNetworkConfigOld(final int numNetworkBuffers) {_		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(),_			"Must have at least one network buffer")__	};validates,the,old,network,buffer,configuration,param,num,network,buffers,number,of,buffers,used,in,the,network,stack,throws,illegal,configuration,exception,if,the,condition,does,not,hold;suppress,warnings,deprecation,protected,static,void,check,network,config,old,final,int,num,network,buffers,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,must,have,at,least,one,network,buffer
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1482522860;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			int port = config.getInteger(QueryableStateOptions.SERVER_PORT)__			int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, port, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,int,port,config,get,integer,queryable,state,options,int,num,network,threads,config,get,integer,queryable,state,options,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,port,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1482522861;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			int port = config.getInteger(QueryableStateOptions.SERVER_PORT)__			int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, port, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,int,port,config,get,integer,queryable,state,options,int,num,network,threads,config,get,integer,queryable,state,options,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,port,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1482522862;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			int port = config.getInteger(QueryableStateOptions.SERVER_PORT)__			int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, port, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,int,port,config,get,integer,queryable,state,options,int,num,network,threads,config,get,integer,queryable,state,options,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,port,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1482522866;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			int port = config.getInteger(QueryableStateOptions.SERVER_PORT)__			int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, port, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,int,port,config,get,integer,queryable,state,options,int,num,network,threads,config,get,integer,queryable,state,options,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,port,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1489149058;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			int port = config.getInteger(QueryableStateOptions.SERVER_PORT)__			int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, port, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,int,port,config,get,integer,queryable,state,options,int,num,network,threads,config,get,integer,queryable,state,options,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,port,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1491500150;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			int port = config.getInteger(QueryableStateOptions.SERVER_PORT)__			int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, port, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,int,port,config,get,integer,queryable,state,options,int,num,network,threads,config,get,integer,queryable,state,options,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,port,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1494092429;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			int port = config.getInteger(QueryableStateOptions.SERVER_PORT)__			int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, port, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,int,port,config,get,integer,queryable,state,options,int,num,network,threads,config,get,integer,queryable,state,options,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,port,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1494189318;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			int port = config.getInteger(QueryableStateOptions.SERVER_PORT)__			int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, port, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,int,port,config,get,integer,queryable,state,options,int,num,network,threads,config,get,integer,queryable,state,options,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,port,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1507316227;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			int port = config.getInteger(QueryableStateOptions.SERVER_PORT)__			int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, port, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,int,port,config,get,integer,queryable,state,options,int,num,network,threads,config,get,integer,queryable,state,options,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,port,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1507728810;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			int port = config.getInteger(QueryableStateOptions.SERVER_PORT)__			int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, port, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,int,port,config,get,integer,queryable,state,options,int,num,network,threads,config,get,integer,queryable,state,options,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,port,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1507728812;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			int port = config.getInteger(QueryableStateOptions.SERVER_PORT)__			int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, port, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,int,port,config,get,integer,queryable,state,options,int,num,network,threads,config,get,integer,queryable,state,options,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,port,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1508308828;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			final Iterator<Integer> ports = NetUtils.getPortRangeFromString(_					config.getString(QueryableStateOptions.PROXY_PORT_RANGE, "9069"))__			final int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			final int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, ports, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,final,iterator,integer,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,9069,final,int,num,network,threads,config,get,integer,queryable,state,options,final,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,ports,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1508308828;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_					config.getString(QueryableStateOptions.PROXY_PORT_RANGE,_							QueryableStateOptions.PROXY_PORT_RANGE.defaultValue()))__			final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_					config.getString(QueryableStateOptions.SERVER_PORT_RANGE,_							QueryableStateOptions.SERVER_PORT_RANGE.defaultValue()))___			final int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			final int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, proxyPorts, serverPorts, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,queryable,state,options,default,value,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,queryable,state,options,default,value,final,int,num,network,threads,config,get,integer,queryable,state,options,final,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,proxy,ports,server,ports,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1509547920;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		final boolean enabled = config.getBoolean(QueryableStateOptions.SERVER_ENABLE)___		if (enabled) {_			final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_					config.getString(QueryableStateOptions.PROXY_PORT_RANGE,_							QueryableStateOptions.PROXY_PORT_RANGE.defaultValue()))__			final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_					config.getString(QueryableStateOptions.SERVER_PORT_RANGE,_							QueryableStateOptions.SERVER_PORT_RANGE.defaultValue()))___			final int numNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__			final int numQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)__			return new QueryableStateConfiguration(true, proxyPorts, serverPorts, numNetworkThreads, numQueryThreads)__		}_		else {_			return QueryableStateConfiguration.disabled()__		}_	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,boolean,enabled,config,get,boolean,queryable,state,options,if,enabled,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,queryable,state,options,default,value,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,queryable,state,options,default,value,final,int,num,network,threads,config,get,integer,queryable,state,options,final,int,num,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,true,proxy,ports,server,ports,num,network,threads,num,query,threads,else,return,queryable,state,configuration,disabled
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1510060074;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE,_						QueryableStateOptions.PROXY_PORT_RANGE.defaultValue()))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE,_						QueryableStateOptions.SERVER_PORT_RANGE.defaultValue()))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,queryable,state,options,default,value,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,queryable,state,options,default,value,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1511516912;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE,_						QueryableStateOptions.PROXY_PORT_RANGE.defaultValue()))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE,_						QueryableStateOptions.SERVER_PORT_RANGE.defaultValue()))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,queryable,state,options,default,value,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,queryable,state,options,default,value,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1516265158;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE,_						QueryableStateOptions.PROXY_PORT_RANGE.defaultValue()))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE,_						QueryableStateOptions.SERVER_PORT_RANGE.defaultValue()))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,queryable,state,options,default,value,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,queryable,state,options,default,value,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1516265159;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE,_						QueryableStateOptions.PROXY_PORT_RANGE.defaultValue()))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE,_						QueryableStateOptions.SERVER_PORT_RANGE.defaultValue()))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,queryable,state,options,default,value,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,queryable,state,options,default,value,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1517914184;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1518607727;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1519568061;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1524570317;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1526313052;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1530798894;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1533555608;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1537794187;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1547115122;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		if (!config.getBoolean(QueryableStateOptions.ENABLE_QUERYABLE_STATE_PROXY_SERVER)) {_			return null__		}__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,if,config,get,boolean,queryable,state,options,return,null,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config);1549360056;Creates the {@link QueryableStateConfiguration} from the given Configuration.;private static QueryableStateConfiguration parseQueryableStateConfiguration(Configuration config) {_		if (!config.getBoolean(QueryableStateOptions.ENABLE_QUERYABLE_STATE_PROXY_SERVER)) {_			return null__		}__		final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.PROXY_PORT_RANGE))__		final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(_				config.getString(QueryableStateOptions.SERVER_PORT_RANGE))___		final int numProxyServerNetworkThreads = config.getInteger(QueryableStateOptions.PROXY_NETWORK_THREADS)__		final int numProxyServerQueryThreads = config.getInteger(QueryableStateOptions.PROXY_ASYNC_QUERY_THREADS)___		final int numStateServerNetworkThreads = config.getInteger(QueryableStateOptions.SERVER_NETWORK_THREADS)__		final int numStateServerQueryThreads = config.getInteger(QueryableStateOptions.SERVER_ASYNC_QUERY_THREADS)___		return new QueryableStateConfiguration(_				proxyPorts,_				serverPorts,_				numProxyServerNetworkThreads,_				numProxyServerQueryThreads,_				numStateServerNetworkThreads,_				numStateServerQueryThreads)__	};creates,the,link,queryable,state,configuration,from,the,given,configuration;private,static,queryable,state,configuration,parse,queryable,state,configuration,configuration,config,if,config,get,boolean,queryable,state,options,return,null,final,iterator,integer,proxy,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,iterator,integer,server,ports,net,utils,get,port,range,from,string,config,get,string,queryable,state,options,final,int,num,proxy,server,network,threads,config,get,integer,queryable,state,options,final,int,num,proxy,server,query,threads,config,get,integer,queryable,state,options,final,int,num,state,server,network,threads,config,get,integer,queryable,state,options,final,int,num,state,server,query,threads,config,get,integer,queryable,state,options,return,new,queryable,state,configuration,proxy,ports,server,ports,num,proxy,server,network,threads,num,proxy,server,query,threads,num,state,server,network,threads,num,state,server,query,threads
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1494092429;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1494189318;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1507316227;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1507728810;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1507728812;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1508308828;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1508308828;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1509547920;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1510060074;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1511516912;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1516265158;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1516265159;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1517914184;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1518607727;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1519568061;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1524570317;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1526313052;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1530798894;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1533555608;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1537794187;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1547115122;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public long getConfiguredMemory();1549360056;Returns the size of the managed memory (in megabytes), if configured.__@return managed memory or a default value (currently <tt>-1</tt>) if not configured__@see TaskManagerOptions#MANAGED_MEMORY_SIZE;public long getConfiguredMemory() {_		return configuredMemory__	};returns,the,size,of,the,managed,memory,in,megabytes,if,configured,return,managed,memory,or,a,default,value,currently,tt,1,tt,if,not,configured,see,task,manager,options;public,long,get,configured,memory,return,configured,memory
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1482522860;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig = localCommunication ?_				QueryableStateConfiguration.disabled() :_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(_			ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_			ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,local,communication,queryable,state,configuration,disabled,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,float,memory,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1482522861;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig = localCommunication ?_				QueryableStateConfiguration.disabled() :_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(_			ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_			ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,local,communication,queryable,state,configuration,disabled,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,float,memory,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1482522862;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig = localCommunication ?_				QueryableStateConfiguration.disabled() :_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(_			ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_			ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)_____		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,local,communication,queryable,state,configuration,disabled,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,float,memory,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1482522866;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig = localCommunication ?_				QueryableStateConfiguration.disabled() :_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(_			ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_			ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,local,communication,queryable,state,configuration,disabled,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,float,memory,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1489149058;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig = localCommunication ?_				QueryableStateConfiguration.disabled() :_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(_			ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_			ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,local,communication,queryable,state,configuration,disabled,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,float,memory,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1491500150;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig = localCommunication ?_				QueryableStateConfiguration.disabled() :_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,local,communication,queryable,state,configuration,disabled,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1494092429;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig = localCommunication ?_				QueryableStateConfiguration.disabled() :_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,local,communication,queryable,state,configuration,disabled,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1494189318;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig = localCommunication ?_				QueryableStateConfiguration.disabled() :_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,local,communication,queryable,state,configuration,disabled,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1507316227;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig = localCommunication ?_				QueryableStateConfiguration.disabled() :_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,local,communication,queryable,state,configuration,disabled,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1507728810;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig = localCommunication ?_				QueryableStateConfiguration.disabled() :_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,local,communication,queryable,state,configuration,disabled,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1507728812;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		_		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1508308828;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1508308828;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		final MetricRegistryConfiguration metricRegistryConfiguration = MetricRegistryConfiguration.fromConfiguration(configuration)___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			metricRegistryConfiguration,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,final,metric,registry,configuration,metric,registry,configuration,metric,registry,configuration,from,configuration,configuration,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,metric,registry,configuration,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1509547920;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1510060074;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1511516912;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1516265158;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = parseTempDirectories(configuration)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,parse,temp,directories,configuration,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1516265159;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = ConfigurationUtils.parseTempDirectories(configuration)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,utils,parse,temp,directories,configuration,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1517914184;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = ConfigurationUtils.parseTempDirectories(configuration)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,utils,parse,temp,directories,configuration,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1518607727;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = ConfigurationUtils.parseTempDirectories(configuration)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,utils,parse,temp,directories,configuration,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1519568061;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = ConfigurationUtils.parseTempDirectories(configuration)__		String[] localStateRootDir = ConfigurationUtils.parseLocalStateDirectories(configuration)___		if (localStateRootDir.length == 0) {_			_			localStateRootDir = tmpDirs__		}__		LocalRecoveryConfig.LocalRecoveryMode localRecoveryMode =_			LocalRecoveryConfig.LocalRecoveryMode.fromConfig(configuration)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			localStateRootDir,_			localRecoveryMode,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,utils,parse,temp,directories,configuration,string,local,state,root,dir,configuration,utils,parse,local,state,directories,configuration,if,local,state,root,dir,length,0,local,state,root,dir,tmp,dirs,local,recovery,config,local,recovery,mode,local,recovery,mode,local,recovery,config,local,recovery,mode,from,config,configuration,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,local,state,root,dir,local,recovery,mode,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1524570317;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(TaskManagerOptions.NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = ConfigurationUtils.parseTempDirectories(configuration)__		String[] localStateRootDir = ConfigurationUtils.parseLocalStateDirectories(configuration)___		if (localStateRootDir.length == 0) {_			_			localStateRootDir = tmpDirs__		}__		LocalRecoveryConfig.LocalRecoveryMode localRecoveryMode =_			LocalRecoveryConfig.LocalRecoveryMode.fromConfig(configuration)___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			localStateRootDir,_			localRecoveryMode,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,task,manager,options,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,utils,parse,temp,directories,configuration,string,local,state,root,dir,configuration,utils,parse,local,state,directories,configuration,if,local,state,root,dir,length,0,local,state,root,dir,tmp,dirs,local,recovery,config,local,recovery,mode,local,recovery,mode,local,recovery,config,local,recovery,mode,from,config,configuration,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,local,state,root,dir,local,recovery,mode,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1526313052;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(TaskManagerOptions.NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = ConfigurationUtils.parseTempDirectories(configuration)__		String[] localStateRootDir = ConfigurationUtils.parseLocalStateDirectories(configuration)___		if (localStateRootDir.length == 0) {_			_			localStateRootDir = tmpDirs__		}__		boolean localRecoveryMode = configuration.getBoolean(_			CheckpointingOptions.LOCAL_RECOVERY.key(),_			CheckpointingOptions.LOCAL_RECOVERY.defaultValue())___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory = configuration.getLong(TaskManagerOptions.MANAGED_MEMORY_SIZE)__		checkConfigParameter(_			configuredMemory == TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue() ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			localStateRootDir,_			localRecoveryMode,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,task,manager,options,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,utils,parse,temp,directories,configuration,string,local,state,root,dir,configuration,utils,parse,local,state,directories,configuration,if,local,state,root,dir,length,0,local,state,root,dir,tmp,dirs,boolean,local,recovery,mode,configuration,get,boolean,checkpointing,options,key,checkpointing,options,default,value,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,configuration,get,long,task,manager,options,check,config,parameter,configured,memory,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,local,state,root,dir,local,recovery,mode,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1530798894;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(TaskManagerOptions.NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = ConfigurationUtils.parseTempDirectories(configuration)__		String[] localStateRootDir = ConfigurationUtils.parseLocalStateDirectories(configuration)___		if (localStateRootDir.length == 0) {_			_			localStateRootDir = tmpDirs__		}__		boolean localRecoveryMode = configuration.getBoolean(_			CheckpointingOptions.LOCAL_RECOVERY.key(),_			CheckpointingOptions.LOCAL_RECOVERY.defaultValue())___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory__		String managedMemorySizeDefaultVal = TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()__		if (!configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(managedMemorySizeDefaultVal)) {_			try {_				configuredMemory = MemorySize.parse(configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE), MEGA_BYTES).getMebiBytes()__			} catch (IllegalArgumentException e) {_				throw new IllegalConfigurationException(_					"Could not read " + TaskManagerOptions.MANAGED_MEMORY_SIZE.key(), e)__			}_		} else {_			configuredMemory = Long.valueOf(managedMemorySizeDefaultVal)__		}__		checkConfigParameter(_			configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()) ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			localStateRootDir,_			localRecoveryMode,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,task,manager,options,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,utils,parse,temp,directories,configuration,string,local,state,root,dir,configuration,utils,parse,local,state,directories,configuration,if,local,state,root,dir,length,0,local,state,root,dir,tmp,dirs,boolean,local,recovery,mode,configuration,get,boolean,checkpointing,options,key,checkpointing,options,default,value,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,string,managed,memory,size,default,val,task,manager,options,default,value,if,configuration,get,string,task,manager,options,equals,managed,memory,size,default,val,try,configured,memory,memory,size,parse,configuration,get,string,task,manager,options,get,mebi,bytes,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,could,not,read,task,manager,options,key,e,else,configured,memory,long,value,of,managed,memory,size,default,val,check,config,parameter,configuration,get,string,task,manager,options,equals,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,local,state,root,dir,local,recovery,mode,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1533555608;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(TaskManagerOptions.NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = ConfigurationUtils.parseTempDirectories(configuration)__		String[] localStateRootDir = ConfigurationUtils.parseLocalStateDirectories(configuration)___		if (localStateRootDir.length == 0) {_			_			localStateRootDir = tmpDirs__		}__		boolean localRecoveryMode = configuration.getBoolean(_			CheckpointingOptions.LOCAL_RECOVERY.key(),_			CheckpointingOptions.LOCAL_RECOVERY.defaultValue())___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory__		String managedMemorySizeDefaultVal = TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()__		if (!configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(managedMemorySizeDefaultVal)) {_			try {_				configuredMemory = MemorySize.parse(configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE), MEGA_BYTES).getMebiBytes()__			} catch (IllegalArgumentException e) {_				throw new IllegalConfigurationException(_					"Could not read " + TaskManagerOptions.MANAGED_MEMORY_SIZE.key(), e)__			}_		} else {_			configuredMemory = Long.valueOf(managedMemorySizeDefaultVal)__		}__		checkConfigParameter(_			configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()) ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			localStateRootDir,_			localRecoveryMode,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout,_			ConfigurationUtils.getSystemResourceMetricsProbingInterval(configuration))__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,task,manager,options,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,utils,parse,temp,directories,configuration,string,local,state,root,dir,configuration,utils,parse,local,state,directories,configuration,if,local,state,root,dir,length,0,local,state,root,dir,tmp,dirs,boolean,local,recovery,mode,configuration,get,boolean,checkpointing,options,key,checkpointing,options,default,value,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,string,managed,memory,size,default,val,task,manager,options,default,value,if,configuration,get,string,task,manager,options,equals,managed,memory,size,default,val,try,configured,memory,memory,size,parse,configuration,get,string,task,manager,options,get,mebi,bytes,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,could,not,read,task,manager,options,key,e,else,configured,memory,long,value,of,managed,memory,size,default,val,check,config,parameter,configuration,get,string,task,manager,options,equals,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,local,state,root,dir,local,recovery,mode,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout,configuration,utils,get,system,resource,metrics,probing,interval,configuration
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1537794187;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(TaskManagerOptions.NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = ConfigurationUtils.parseTempDirectories(configuration)__		String[] localStateRootDir = ConfigurationUtils.parseLocalStateDirectories(configuration)___		if (localStateRootDir.length == 0) {_			_			localStateRootDir = tmpDirs__		}__		boolean localRecoveryMode = configuration.getBoolean(_			CheckpointingOptions.LOCAL_RECOVERY.key(),_			CheckpointingOptions.LOCAL_RECOVERY.defaultValue())___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory__		String managedMemorySizeDefaultVal = TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()__		if (!configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(managedMemorySizeDefaultVal)) {_			try {_				configuredMemory = MemorySize.parse(configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE), MEGA_BYTES).getMebiBytes()__			} catch (IllegalArgumentException e) {_				throw new IllegalConfigurationException(_					"Could not read " + TaskManagerOptions.MANAGED_MEMORY_SIZE.key(), e)__			}_		} else {_			configuredMemory = Long.valueOf(managedMemorySizeDefaultVal)__		}__		checkConfigParameter(_			configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()) ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			localStateRootDir,_			localRecoveryMode,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout,_			ConfigurationUtils.getSystemResourceMetricsProbingInterval(configuration))__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,task,manager,options,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,utils,parse,temp,directories,configuration,string,local,state,root,dir,configuration,utils,parse,local,state,directories,configuration,if,local,state,root,dir,length,0,local,state,root,dir,tmp,dirs,boolean,local,recovery,mode,configuration,get,boolean,checkpointing,options,key,checkpointing,options,default,value,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,string,managed,memory,size,default,val,task,manager,options,default,value,if,configuration,get,string,task,manager,options,equals,managed,memory,size,default,val,try,configured,memory,memory,size,parse,configuration,get,string,task,manager,options,get,mebi,bytes,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,could,not,read,task,manager,options,key,e,else,configured,memory,long,value,of,managed,memory,size,default,val,check,config,parameter,configuration,get,string,task,manager,options,equals,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,local,state,root,dir,local,recovery,mode,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout,configuration,utils,get,system,resource,metrics,probing,interval,configuration
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1547115122;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(TaskManagerOptions.NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = ConfigurationUtils.parseTempDirectories(configuration)__		String[] localStateRootDir = ConfigurationUtils.parseLocalStateDirectories(configuration)___		if (localStateRootDir.length == 0) {_			_			localStateRootDir = tmpDirs__		}__		boolean localRecoveryMode = configuration.getBoolean(_			CheckpointingOptions.LOCAL_RECOVERY.key(),_			CheckpointingOptions.LOCAL_RECOVERY.defaultValue())___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory__		String managedMemorySizeDefaultVal = TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()__		if (!configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(managedMemorySizeDefaultVal)) {_			try {_				configuredMemory = MemorySize.parse(configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE), MEGA_BYTES).getMebiBytes()__			} catch (IllegalArgumentException e) {_				throw new IllegalConfigurationException(_					"Could not read " + TaskManagerOptions.MANAGED_MEMORY_SIZE.key(), e)__			}_		} else {_			configuredMemory = Long.valueOf(managedMemorySizeDefaultVal)__		}__		checkConfigParameter(_			configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()) ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			localStateRootDir,_			localRecoveryMode,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout,_			ConfigurationUtils.getSystemResourceMetricsProbingInterval(configuration))__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,task,manager,options,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,utils,parse,temp,directories,configuration,string,local,state,root,dir,configuration,utils,parse,local,state,directories,configuration,if,local,state,root,dir,length,0,local,state,root,dir,tmp,dirs,boolean,local,recovery,mode,configuration,get,boolean,checkpointing,options,key,checkpointing,options,default,value,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,string,managed,memory,size,default,val,task,manager,options,default,value,if,configuration,get,string,task,manager,options,equals,managed,memory,size,default,val,try,configured,memory,memory,size,parse,configuration,get,string,task,manager,options,get,mebi,bytes,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,could,not,read,task,manager,options,key,e,else,configured,memory,long,value,of,managed,memory,size,default,val,check,config,parameter,configuration,get,string,task,manager,options,equals,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,return,new,task,manager,services,configuration,remote,address,tmp,dirs,local,state,root,dir,local,recovery,mode,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout,configuration,utils,get,system,resource,metrics,probing,interval,configuration
TaskManagerServicesConfiguration -> public static TaskManagerServicesConfiguration fromConfiguration( 			Configuration configuration, 			InetAddress remoteAddress, 			boolean localCommunication) throws Exception;1549360056;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration The configuration._@param remoteAddress identifying the IP address under which the TaskManager will be accessible_@param localCommunication True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;public static TaskManagerServicesConfiguration fromConfiguration(_			Configuration configuration,_			InetAddress remoteAddress,_			boolean localCommunication) throws Exception {__		_		int slots = configuration.getInteger(TaskManagerOptions.NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}__		final String[] tmpDirs = ConfigurationUtils.parseTempDirectories(configuration)__		String[] localStateRootDir = ConfigurationUtils.parseLocalStateDirectories(configuration)___		if (localStateRootDir.length == 0) {_			_			localStateRootDir = tmpDirs__		}__		boolean localRecoveryMode = configuration.getBoolean(_			CheckpointingOptions.LOCAL_RECOVERY.key(),_			CheckpointingOptions.LOCAL_RECOVERY.defaultValue())___		final NetworkEnvironmentConfiguration networkConfig = parseNetworkEnvironmentConfiguration(_			configuration,_			localCommunication,_			remoteAddress,_			slots)___		final QueryableStateConfiguration queryableStateConfig =_				parseQueryableStateConfiguration(configuration)___		_		long configuredMemory__		String managedMemorySizeDefaultVal = TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()__		if (!configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(managedMemorySizeDefaultVal)) {_			try {_				configuredMemory = MemorySize.parse(configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE), MEGA_BYTES).getMebiBytes()__			} catch (IllegalArgumentException e) {_				throw new IllegalConfigurationException(_					"Could not read " + TaskManagerOptions.MANAGED_MEMORY_SIZE.key(), e)__			}_		} else {_			configuredMemory = Long.valueOf(managedMemorySizeDefaultVal)__		}__		checkConfigParameter(_			configuration.getString(TaskManagerOptions.MANAGED_MEMORY_SIZE).equals(TaskManagerOptions.MANAGED_MEMORY_SIZE.defaultValue()) ||_				configuredMemory > 0, configuredMemory,_			TaskManagerOptions.MANAGED_MEMORY_SIZE.key(),_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		boolean preAllocateMemory = configuration.getBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE)___		float memoryFraction = configuration.getFloat(TaskManagerOptions.MANAGED_MEMORY_FRACTION)__		checkConfigParameter(memoryFraction > 0.0f && memoryFraction < 1.0f, memoryFraction,_			TaskManagerOptions.MANAGED_MEMORY_FRACTION.key(),_			"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___		long timerServiceShutdownTimeout = AkkaUtils.getTimeout(configuration).toMillis()___		final RetryingRegistrationConfiguration retryingRegistrationConfiguration = RetryingRegistrationConfiguration.fromConfiguration(configuration)___		return new TaskManagerServicesConfiguration(_			remoteAddress,_			tmpDirs,_			localStateRootDir,_			localRecoveryMode,_			networkConfig,_			queryableStateConfig,_			slots,_			configuredMemory,_			memType,_			preAllocateMemory,_			memoryFraction,_			timerServiceShutdownTimeout,_			retryingRegistrationConfiguration,_			ConfigurationUtils.getSystemResourceMetricsProbingInterval(configuration))__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,remote,address,identifying,the,ip,address,under,which,the,task,manager,will,be,accessible,param,local,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;public,static,task,manager,services,configuration,from,configuration,configuration,configuration,inet,address,remote,address,boolean,local,communication,throws,exception,int,slots,configuration,get,integer,task,manager,options,1,if,slots,1,slots,1,final,string,tmp,dirs,configuration,utils,parse,temp,directories,configuration,string,local,state,root,dir,configuration,utils,parse,local,state,directories,configuration,if,local,state,root,dir,length,0,local,state,root,dir,tmp,dirs,boolean,local,recovery,mode,configuration,get,boolean,checkpointing,options,key,checkpointing,options,default,value,final,network,environment,configuration,network,config,parse,network,environment,configuration,configuration,local,communication,remote,address,slots,final,queryable,state,configuration,queryable,state,config,parse,queryable,state,configuration,configuration,long,configured,memory,string,managed,memory,size,default,val,task,manager,options,default,value,if,configuration,get,string,task,manager,options,equals,managed,memory,size,default,val,try,configured,memory,memory,size,parse,configuration,get,string,task,manager,options,get,mebi,bytes,catch,illegal,argument,exception,e,throw,new,illegal,configuration,exception,could,not,read,task,manager,options,key,e,else,configured,memory,long,value,of,managed,memory,size,default,val,check,config,parameter,configuration,get,string,task,manager,options,equals,task,manager,options,default,value,configured,memory,0,configured,memory,task,manager,options,key,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,boolean,pre,allocate,memory,configuration,get,boolean,task,manager,options,float,memory,fraction,configuration,get,float,task,manager,options,check,config,parameter,memory,fraction,0,0f,memory,fraction,1,0f,memory,fraction,task,manager,options,key,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,long,timer,service,shutdown,timeout,akka,utils,get,timeout,configuration,to,millis,final,retrying,registration,configuration,retrying,registration,configuration,retrying,registration,configuration,from,configuration,configuration,return,new,task,manager,services,configuration,remote,address,tmp,dirs,local,state,root,dir,local,recovery,mode,network,config,queryable,state,config,slots,configured,memory,mem,type,pre,allocate,memory,memory,fraction,timer,service,shutdown,timeout,retrying,registration,configuration,configuration,utils,get,system,resource,metrics,probing,interval,configuration
TaskManagerServicesConfiguration -> private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1482522860;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport > 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)___		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		return new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			500,_			3000,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,return,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,500,3000,netty,config
TaskManagerServicesConfiguration -> private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1482522861;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)___		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		return new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			500,_			3000,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,return,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,500,3000,netty,config
TaskManagerServicesConfiguration -> private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1482522862;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)___		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		return new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			500,_			3000,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,return,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,500,3000,netty,config
TaskManagerServicesConfiguration -> private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1482522866;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)___		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		return new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			500,_			3000,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,return,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,500,3000,netty,config
TaskManagerServicesConfiguration -> private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1489149058;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)___		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
TaskManagerServicesConfiguration -> private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration( 		Configuration configuration, 		boolean localTaskManagerCommunication, 		InetAddress taskManagerAddress, 		int slots) throws Exception;1491500150;Creates the {@link NetworkEnvironmentConfiguration} from the given {@link Configuration}.__@param configuration to create the network environment configuration from_@param localTaskManagerCommunication true if task manager communication is local_@param taskManagerAddress address of the task manager_@param slots to start the task manager with_@return Network environment configuration;private static NetworkEnvironmentConfiguration parseNetworkEnvironmentConfiguration(_		Configuration configuration,_		boolean localTaskManagerCommunication,_		InetAddress taskManagerAddress,_		int slots) throws Exception {__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)___		checkConfigParameter(dataport >= 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(TaskManagerOptions.NETWORK_NUM_BUFFERS)___		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			TaskManagerOptions.NETWORK_NUM_BUFFERS.key(), "")___		final int pageSize = configuration.getInteger(TaskManagerOptions.MEMORY_SEGMENT_SIZE)___		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)___		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			TaskManagerOptions.MEMORY_SEGMENT_SIZE.key(),_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(TaskManagerOptions.MEMORY_OFF_HEAP)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___			nettyConfig = new NettyConfig(taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOManager.IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		int initialRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL)__		int maxRequestBackoff = configuration.getInteger(_			TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX)___		int buffersPerChannel = configuration.getInteger(_			TaskManagerOptions.NETWORK_BUFFERS_PER_CHANNEL)__		int extraBuffersPerGate = configuration.getInteger(_			TaskManagerOptions.NETWORK_EXTRA_BUFFERS_PER_GATE)___		return new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			initialRequestBackoff,_			maxRequestBackoff,_			buffersPerChannel,_			extraBuffersPerGate,_			nettyConfig)__	};creates,the,link,network,environment,configuration,from,the,given,link,configuration,param,configuration,to,create,the,network,environment,configuration,from,param,local,task,manager,communication,true,if,task,manager,communication,is,local,param,task,manager,address,address,of,the,task,manager,param,slots,to,start,the,task,manager,with,return,network,environment,configuration;private,static,network,environment,configuration,parse,network,environment,configuration,configuration,configuration,boolean,local,task,manager,communication,inet,address,task,manager,address,int,slots,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,task,manager,options,check,config,parameter,num,network,buffers,0,num,network,buffers,task,manager,options,key,final,int,page,size,configuration,get,integer,task,manager,options,check,config,parameter,page,size,memory,manager,page,size,task,manager,options,key,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,task,manager,options,key,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,task,manager,options,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,netty,config,netty,config,if,local,task,manager,communication,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomanager,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,int,initial,request,backoff,configuration,get,integer,task,manager,options,int,max,request,backoff,configuration,get,integer,task,manager,options,int,buffers,per,channel,configuration,get,integer,task,manager,options,int,extra,buffers,per,gate,configuration,get,integer,task,manager,options,return,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,initial,request,backoff,max,request,backoff,buffers,per,channel,extra,buffers,per,gate,netty,config
