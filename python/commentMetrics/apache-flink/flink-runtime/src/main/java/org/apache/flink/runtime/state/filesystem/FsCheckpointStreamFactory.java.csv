# id;timestamp;commentText;codeText;commentWords;codeWords
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> public boolean isClosed();1480678620;Checks whether the stream is closed._@return True if the stream was closed, false if it is still open.;public boolean isClosed() {_			return closed__		};checks,whether,the,stream,is,closed,return,true,if,the,stream,was,closed,false,if,it,is,still,open;public,boolean,is,closed,return,closed
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> public boolean isClosed();1481644337;Checks whether the stream is closed._@return True if the stream was closed, false if it is still open.;public boolean isClosed() {_			return closed__		};checks,whether,the,stream,is,closed,return,true,if,the,stream,was,closed,false,if,it,is,still,open;public,boolean,is,closed,return,closed
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> public boolean isClosed();1485189169;Checks whether the stream is closed._@return True if the stream was closed, false if it is still open.;public boolean isClosed() {_			return closed__		};checks,whether,the,stream,is,closed,return,true,if,the,stream,was,closed,false,if,it,is,still,open;public,boolean,is,closed,return,closed
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> public boolean isClosed();1487871589;Checks whether the stream is closed._@return True if the stream was closed, false if it is still open.;public boolean isClosed() {_			return closed__		};checks,whether,the,stream,is,closed,return,true,if,the,stream,was,closed,false,if,it,is,still,open;public,boolean,is,closed,return,closed
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> public boolean isClosed();1498220069;Checks whether the stream is closed._@return True if the stream was closed, false if it is still open.;public boolean isClosed() {_			return closed__		};checks,whether,the,stream,is,closed,return,true,if,the,stream,was,closed,false,if,it,is,still,open;public,boolean,is,closed,return,closed
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> public boolean isClosed();1515177486;Checks whether the stream is closed._@return True if the stream was closed, false if it is still open.;public boolean isClosed() {_			return closed__		};checks,whether,the,stream,is,closed,return,true,if,the,stream,was,closed,false,if,it,is,still,open;public,boolean,is,closed,return,closed
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> public boolean isClosed();1517489695;Checks whether the stream is closed._@return True if the stream was closed, false if it is still open.;public boolean isClosed() {_			return closed__		};checks,whether,the,stream,is,closed,return,true,if,the,stream,was,closed,false,if,it,is,still,open;public,boolean,is,closed,return,closed
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> public boolean isClosed();1517489695;Checks whether the stream is closed._@return True if the stream was closed, false if it is still open.;public boolean isClosed() {_			return closed__		};checks,whether,the,stream,is,closed,return,true,if,the,stream,was,closed,false,if,it,is,still,open;public,boolean,is,closed,return,closed
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> public boolean isClosed();1517489697;Checks whether the stream is closed._@return True if the stream was closed, false if it is still open.;public boolean isClosed() {_			return closed__		};checks,whether,the,stream,is,closed,return,true,if,the,stream,was,closed,false,if,it,is,still,open;public,boolean,is,closed,return,closed
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> public boolean isClosed();1519568061;Checks whether the stream is closed._@return True if the stream was closed, false if it is still open.;public boolean isClosed() {_			return closed__		};checks,whether,the,stream,is,closed,return,true,if,the,stream,was,closed,false,if,it,is,still,open;public,boolean,is,closed,return,closed
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> public boolean isClosed();1537815112;Checks whether the stream is closed._@return True if the stream was closed, false if it is still open.;public boolean isClosed() {_			return closed__		};checks,whether,the,stream,is,closed,return,true,if,the,stream,was,closed,false,if,it,is,still,open;public,boolean,is,closed,return,closed
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> public boolean isClosed();1537815170;Checks whether the stream is closed._@return True if the stream was closed, false if it is still open.;public boolean isClosed() {_			return closed__		};checks,whether,the,stream,is,closed,return,true,if,the,stream,was,closed,false,if,it,is,still,open;public,boolean,is,closed,return,closed
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			Path checkpointDataUri, 			JobID jobId, 			int fileStateSizeThreshold) throws IOException;1472663401;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsCheckpointStreamFactory(_			Path checkpointDataUri,_			JobID jobId,_			int fileStateSizeThreshold) throws IOException {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		Path basePath = checkpointDataUri___		Path dir = new Path(basePath, jobId.toString())___		LOG.info("Initializing file stream factory to URI {}.", dir)___		filesystem = basePath.getFileSystem()__		filesystem.mkdirs(dir)___		checkpointDirectory = dir__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,checkpoint,stream,factory,path,checkpoint,data,uri,job,id,job,id,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,path,base,path,checkpoint,data,uri,path,dir,new,path,base,path,job,id,to,string,log,info,initializing,file,stream,factory,to,uri,dir,filesystem,base,path,get,file,system,filesystem,mkdirs,dir,checkpoint,directory,dir
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			Path checkpointDataUri, 			JobID jobId, 			int fileStateSizeThreshold) throws IOException;1472663402;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsCheckpointStreamFactory(_			Path checkpointDataUri,_			JobID jobId,_			int fileStateSizeThreshold) throws IOException {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		Path basePath = checkpointDataUri___		Path dir = new Path(basePath, jobId.toString())___		if (LOG.isDebugEnabled()) {_			LOG.debug("Initializing file stream factory to URI {}.", dir)__		}__		filesystem = basePath.getFileSystem()__		filesystem.mkdirs(dir)___		checkpointDirectory = dir__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,checkpoint,stream,factory,path,checkpoint,data,uri,job,id,job,id,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,path,base,path,checkpoint,data,uri,path,dir,new,path,base,path,job,id,to,string,if,log,is,debug,enabled,log,debug,initializing,file,stream,factory,to,uri,dir,filesystem,base,path,get,file,system,filesystem,mkdirs,dir,checkpoint,directory,dir
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			Path checkpointDataUri, 			JobID jobId, 			int fileStateSizeThreshold) throws IOException;1474891865;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsCheckpointStreamFactory(_			Path checkpointDataUri,_			JobID jobId,_			int fileStateSizeThreshold) throws IOException {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		Path basePath = checkpointDataUri___		Path dir = new Path(basePath, jobId.toString())___		if (LOG.isDebugEnabled()) {_			LOG.debug("Initializing file stream factory to URI {}.", dir)__		}__		filesystem = basePath.getFileSystem()__		filesystem.mkdirs(dir)___		checkpointDirectory = dir__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,checkpoint,stream,factory,path,checkpoint,data,uri,job,id,job,id,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,path,base,path,checkpoint,data,uri,path,dir,new,path,base,path,job,id,to,string,if,log,is,debug,enabled,log,debug,initializing,file,stream,factory,to,uri,dir,filesystem,base,path,get,file,system,filesystem,mkdirs,dir,checkpoint,directory,dir
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			Path checkpointDataUri, 			JobID jobId, 			int fileStateSizeThreshold) throws IOException;1475842467;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsCheckpointStreamFactory(_			Path checkpointDataUri,_			JobID jobId,_			int fileStateSizeThreshold) throws IOException {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		Path basePath = checkpointDataUri___		Path dir = new Path(basePath, jobId.toString())___		if (LOG.isDebugEnabled()) {_			LOG.debug("Initializing file stream factory to URI {}.", dir)__		}__		filesystem = basePath.getFileSystem()__		filesystem.mkdirs(dir)___		checkpointDirectory = dir__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,checkpoint,stream,factory,path,checkpoint,data,uri,job,id,job,id,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,path,base,path,checkpoint,data,uri,path,dir,new,path,base,path,job,id,to,string,if,log,is,debug,enabled,log,debug,initializing,file,stream,factory,to,uri,dir,filesystem,base,path,get,file,system,filesystem,mkdirs,dir,checkpoint,directory,dir
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			Path checkpointDataUri, 			JobID jobId, 			int fileStateSizeThreshold) throws IOException;1480678620;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsCheckpointStreamFactory(_			Path checkpointDataUri,_			JobID jobId,_			int fileStateSizeThreshold) throws IOException {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		Path basePath = checkpointDataUri___		Path dir = new Path(basePath, jobId.toString())___		if (LOG.isDebugEnabled()) {_			LOG.debug("Initializing file stream factory to URI {}.", dir)__		}__		filesystem = basePath.getFileSystem()__		filesystem.mkdirs(dir)___		checkpointDirectory = dir__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,checkpoint,stream,factory,path,checkpoint,data,uri,job,id,job,id,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,path,base,path,checkpoint,data,uri,path,dir,new,path,base,path,job,id,to,string,if,log,is,debug,enabled,log,debug,initializing,file,stream,factory,to,uri,dir,filesystem,base,path,get,file,system,filesystem,mkdirs,dir,checkpoint,directory,dir
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			Path checkpointDataUri, 			JobID jobId, 			int fileStateSizeThreshold) throws IOException;1481644337;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsCheckpointStreamFactory(_			Path checkpointDataUri,_			JobID jobId,_			int fileStateSizeThreshold) throws IOException {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		Path basePath = checkpointDataUri___		Path dir = new Path(basePath, jobId.toString())___		if (LOG.isDebugEnabled()) {_			LOG.debug("Initializing file stream factory to URI {}.", dir)__		}__		filesystem = basePath.getFileSystem()__		filesystem.mkdirs(dir)___		checkpointDirectory = dir__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,checkpoint,stream,factory,path,checkpoint,data,uri,job,id,job,id,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,path,base,path,checkpoint,data,uri,path,dir,new,path,base,path,job,id,to,string,if,log,is,debug,enabled,log,debug,initializing,file,stream,factory,to,uri,dir,filesystem,base,path,get,file,system,filesystem,mkdirs,dir,checkpoint,directory,dir
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			Path checkpointDataUri, 			JobID jobId, 			int fileStateSizeThreshold) throws IOException;1485189169;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsCheckpointStreamFactory(_			Path checkpointDataUri,_			JobID jobId,_			int fileStateSizeThreshold) throws IOException {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold__		Path basePath = checkpointDataUri___		Path dir = new Path(basePath, jobId.toString())___		if (LOG.isDebugEnabled()) {_			LOG.debug("Initializing file stream factory to URI {}.", dir)__		}__		filesystem = basePath.getFileSystem()__		filesystem.mkdirs(dir)___		checkpointDirectory = dir__	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,checkpoint,stream,factory,path,checkpoint,data,uri,job,id,job,id,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,path,base,path,checkpoint,data,uri,path,dir,new,path,base,path,job,id,to,string,if,log,is,debug,enabled,log,debug,initializing,file,stream,factory,to,uri,dir,filesystem,base,path,get,file,system,filesystem,mkdirs,dir,checkpoint,directory,dir
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			Path checkpointDataUri, 			JobID jobId, 			int fileStateSizeThreshold) throws IOException;1487871589;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsCheckpointStreamFactory(_			Path checkpointDataUri,_			JobID jobId,_			int fileStateSizeThreshold) throws IOException {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold___		Path basePath = checkpointDataUri__		filesystem = basePath.getFileSystem()___		checkpointDirectory = createBasePath(filesystem, basePath, jobId)___		if (LOG.isDebugEnabled()) {_			LOG.debug("Initialed file stream factory to URI {}.", checkpointDirectory)__		}_	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,checkpoint,stream,factory,path,checkpoint,data,uri,job,id,job,id,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,path,base,path,checkpoint,data,uri,filesystem,base,path,get,file,system,checkpoint,directory,create,base,path,filesystem,base,path,job,id,if,log,is,debug,enabled,log,debug,initialed,file,stream,factory,to,uri,checkpoint,directory
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			Path checkpointDataUri, 			JobID jobId, 			int fileStateSizeThreshold) throws IOException;1498220069;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsCheckpointStreamFactory(_			Path checkpointDataUri,_			JobID jobId,_			int fileStateSizeThreshold) throws IOException {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold___		Path basePath = checkpointDataUri__		filesystem = basePath.getFileSystem()___		checkpointDirectory = createBasePath(filesystem, basePath, jobId)___		if (LOG.isDebugEnabled()) {_			LOG.debug("Initialed file stream factory to URI {}.", checkpointDirectory)__		}_	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,checkpoint,stream,factory,path,checkpoint,data,uri,job,id,job,id,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,path,base,path,checkpoint,data,uri,filesystem,base,path,get,file,system,checkpoint,directory,create,base,path,filesystem,base,path,job,id,if,log,is,debug,enabled,log,debug,initialed,file,stream,factory,to,uri,checkpoint,directory
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			Path checkpointDataUri, 			JobID jobId, 			int fileStateSizeThreshold) throws IOException;1515177486;Creates a new state backend that stores its checkpoint data in the file system and location_defined by the given URI.__<p>A file system for the file system scheme in the URI (e.g., 'file://', 'hdfs://', or 'S3://')_must be accessible via {@link FileSystem#get(URI)}.__<p>For a state backend targeting HDFS, this means that the URI must either specify the authority_(host and port), or that the Hadoop configuration that describes that information must be in the_classpath.__@param checkpointDataUri The URI describing the filesystem (scheme and optionally authority),_and the path to the checkpoint data directory._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files__@throws IOException Thrown, if no file system can be found for the scheme in the URI.;public FsCheckpointStreamFactory(_			Path checkpointDataUri,_			JobID jobId,_			int fileStateSizeThreshold) throws IOException {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}_		this.fileStateThreshold = fileStateSizeThreshold___		Path basePath = checkpointDataUri__		filesystem = basePath.getFileSystem()___		checkpointDirectory = createBasePath(filesystem, basePath, jobId)___		if (LOG.isDebugEnabled()) {_			LOG.debug("Initialed file stream factory to URI {}.", checkpointDirectory)__		}_	};creates,a,new,state,backend,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,uri,p,a,file,system,for,the,file,system,scheme,in,the,uri,e,g,file,hdfs,or,s3,must,be,accessible,via,link,file,system,get,uri,p,for,a,state,backend,targeting,hdfs,this,means,that,the,uri,must,either,specify,the,authority,host,and,port,or,that,the,hadoop,configuration,that,describes,that,information,must,be,in,the,classpath,param,checkpoint,data,uri,the,uri,describing,the,filesystem,scheme,and,optionally,authority,and,the,path,to,the,checkpoint,data,directory,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files,throws,ioexception,thrown,if,no,file,system,can,be,found,for,the,scheme,in,the,uri;public,fs,checkpoint,stream,factory,path,checkpoint,data,uri,job,id,job,id,int,file,state,size,threshold,throws,ioexception,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,file,state,threshold,file,state,size,threshold,path,base,path,checkpoint,data,uri,filesystem,base,path,get,file,system,checkpoint,directory,create,base,path,filesystem,base,path,job,id,if,log,is,debug,enabled,log,debug,initialed,file,stream,factory,to,uri,checkpoint,directory
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1472663401;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1472663402;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1474891865;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1475842467;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true__				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1480678620;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true___				_				_				pos = writeBuffer.length___				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						_						try {_							fs.delete(basePath, false)__						} catch (IOException ignored) {}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,pos,write,buffer,length,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,fs,delete,base,path,false,catch,ioexception,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1481644337;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true___				_				_				pos = writeBuffer.length___				if (outStream != null) {_					try {_						outStream.close()__						fs.delete(statePath, false)___						try {_							FileUtils.deletePathIfEmpty(fs, basePath)__						} catch (Exception ignored) {_							LOG.debug("Could not delete the parent directory {}.", basePath, ignored)__						}_					}_					catch (Exception e) {_						LOG.warn("Cannot delete closed and discarded state stream for " + statePath, e)__					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,pos,write,buffer,length,if,out,stream,null,try,out,stream,close,fs,delete,state,path,false,try,file,utils,delete,path,if,empty,fs,base,path,catch,exception,ignored,log,debug,could,not,delete,the,parent,directory,base,path,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1485189169;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true___				_				_				pos = writeBuffer.length___				if (outStream != null) {_					try {_						outStream.close()__					} catch (Throwable throwable) {_						LOG.warn("Could not close the state stream for {}.", statePath, throwable)__					} finally {_						try {_							fs.delete(statePath, false)___							try {_								FileUtils.deletePathIfEmpty(fs, basePath)__							} catch (Exception ignored) {_								LOG.debug("Could not delete the parent directory {}.", basePath, ignored)__							}_						} catch (Exception e) {_							LOG.warn("Cannot delete closed and discarded state stream for {}.", statePath, e)__						}_					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,pos,write,buffer,length,if,out,stream,null,try,out,stream,close,catch,throwable,throwable,log,warn,could,not,close,the,state,stream,for,state,path,throwable,finally,try,fs,delete,state,path,false,try,file,utils,delete,path,if,empty,fs,base,path,catch,exception,ignored,log,debug,could,not,delete,the,parent,directory,base,path,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1487871589;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true___				_				_				pos = writeBuffer.length___				if (outStream != null) {_					try {_						outStream.close()__					} catch (Throwable throwable) {_						LOG.warn("Could not close the state stream for {}.", statePath, throwable)__					} finally {_						try {_							fs.delete(statePath, false)___							try {_								FileUtils.deletePathIfEmpty(fs, basePath)__							} catch (Exception ignored) {_								LOG.debug("Could not delete the parent directory {}.", basePath, ignored)__							}_						} catch (Exception e) {_							LOG.warn("Cannot delete closed and discarded state stream for {}.", statePath, e)__						}_					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,pos,write,buffer,length,if,out,stream,null,try,out,stream,close,catch,throwable,throwable,log,warn,could,not,close,the,state,stream,for,state,path,throwable,finally,try,fs,delete,state,path,false,try,file,utils,delete,path,if,empty,fs,base,path,catch,exception,ignored,log,debug,could,not,delete,the,parent,directory,base,path,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1498220069;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true___				_				_				pos = writeBuffer.length___				if (outStream != null) {_					try {_						outStream.close()__					} catch (Throwable throwable) {_						LOG.warn("Could not close the state stream for {}.", statePath, throwable)__					} finally {_						try {_							fs.delete(statePath, false)___							try {_								FileUtils.deletePathIfEmpty(fs, basePath)__							} catch (Exception ignored) {_								LOG.debug("Could not delete the parent directory {}.", basePath, ignored)__							}_						} catch (Exception e) {_							LOG.warn("Cannot delete closed and discarded state stream for {}.", statePath, e)__						}_					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,pos,write,buffer,length,if,out,stream,null,try,out,stream,close,catch,throwable,throwable,log,warn,could,not,close,the,state,stream,for,state,path,throwable,finally,try,fs,delete,state,path,false,try,file,utils,delete,path,if,empty,fs,base,path,catch,exception,ignored,log,debug,could,not,delete,the,parent,directory,base,path,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1515177486;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true___				_				_				pos = writeBuffer.length___				if (outStream != null) {_					try {_						outStream.close()__					} catch (Throwable throwable) {_						LOG.warn("Could not close the state stream for {}.", statePath, throwable)__					} finally {_						try {_							fs.delete(statePath, false)___							try {_								FileUtils.deletePathIfEmpty(fs, basePath)__							} catch (Exception ignored) {_								LOG.debug("Could not delete the parent directory {}.", basePath, ignored)__							}_						} catch (Exception e) {_							LOG.warn("Cannot delete closed and discarded state stream for {}.", statePath, e)__						}_					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,pos,write,buffer,length,if,out,stream,null,try,out,stream,close,catch,throwable,throwable,log,warn,could,not,close,the,state,stream,for,state,path,throwable,finally,try,fs,delete,state,path,false,try,file,utils,delete,path,if,empty,fs,base,path,catch,exception,ignored,log,debug,could,not,delete,the,parent,directory,base,path,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1517489695;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true___				_				_				pos = writeBuffer.length___				if (outStream != null) {_					try {_						outStream.close()__					} catch (Throwable throwable) {_						LOG.warn("Could not close the state stream for {}.", statePath, throwable)__					} finally {_						try {_							fs.delete(statePath, false)___							try {_								FileUtils.deletePathIfEmpty(fs, basePath)__							} catch (Exception ignored) {_								LOG.debug("Could not delete the parent directory {}.", basePath, ignored)__							}_						} catch (Exception e) {_							LOG.warn("Cannot delete closed and discarded state stream for {}.", statePath, e)__						}_					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,pos,write,buffer,length,if,out,stream,null,try,out,stream,close,catch,throwable,throwable,log,warn,could,not,close,the,state,stream,for,state,path,throwable,finally,try,fs,delete,state,path,false,try,file,utils,delete,path,if,empty,fs,base,path,catch,exception,ignored,log,debug,could,not,delete,the,parent,directory,base,path,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1517489695;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true___				_				_				pos = writeBuffer.length___				if (outStream != null) {_					try {_						outStream.close()__					} catch (Throwable throwable) {_						LOG.warn("Could not close the state stream for {}.", statePath, throwable)__					} finally {_						try {_							fs.delete(statePath, false)___							try {_								FileUtils.deletePathIfEmpty(fs, basePath)__							} catch (Exception ignored) {_								LOG.debug("Could not delete the parent directory {}.", basePath, ignored)__							}_						} catch (Exception e) {_							LOG.warn("Cannot delete closed and discarded state stream for {}.", statePath, e)__						}_					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,pos,write,buffer,length,if,out,stream,null,try,out,stream,close,catch,throwable,throwable,log,warn,could,not,close,the,state,stream,for,state,path,throwable,finally,try,fs,delete,state,path,false,try,file,utils,delete,path,if,empty,fs,base,path,catch,exception,ignored,log,debug,could,not,delete,the,parent,directory,base,path,ignored,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1517489697;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true___				_				_				pos = writeBuffer.length___				if (outStream != null) {_					try {_						outStream.close()__					} catch (Throwable throwable) {_						LOG.warn("Could not close the state stream for {}.", statePath, throwable)__					} finally {_						try {_							fs.delete(statePath, false)__						} catch (Exception e) {_							LOG.warn("Cannot delete closed and discarded state stream for {}.", statePath, e)__						}_					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,pos,write,buffer,length,if,out,stream,null,try,out,stream,close,catch,throwable,throwable,log,warn,could,not,close,the,state,stream,for,state,path,throwable,finally,try,fs,delete,state,path,false,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1519568061;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true___				_				_				pos = writeBuffer.length___				if (outStream != null) {_					try {_						outStream.close()__					} catch (Throwable throwable) {_						LOG.warn("Could not close the state stream for {}.", statePath, throwable)__					} finally {_						try {_							fs.delete(statePath, false)__						} catch (Exception e) {_							LOG.warn("Cannot delete closed and discarded state stream for {}.", statePath, e)__						}_					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,pos,write,buffer,length,if,out,stream,null,try,out,stream,close,catch,throwable,throwable,log,warn,could,not,close,the,state,stream,for,state,path,throwable,finally,try,fs,delete,state,path,false,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1537815112;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true___				_				_				pos = writeBuffer.length___				if (outStream != null) {_					try {_						outStream.close()__					} catch (Throwable throwable) {_						LOG.warn("Could not close the state stream for {}.", statePath, throwable)__					} finally {_						try {_							fs.delete(statePath, false)__						} catch (Exception e) {_							LOG.warn("Cannot delete closed and discarded state stream for {}.", statePath, e)__						}_					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,pos,write,buffer,length,if,out,stream,null,try,out,stream,close,catch,throwable,throwable,log,warn,could,not,close,the,state,stream,for,state,path,throwable,finally,try,fs,delete,state,path,false,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> FsCheckpointStateOutputStream -> @Override 		public void close();1537815170;If the stream is only closed, we remove the produced file (cleanup through the auto close_feature, for example). This method throws no exception if the deletion fails, but only_logs the error.;@Override_		public void close() {_			if (!closed) {_				closed = true___				_				_				pos = writeBuffer.length___				if (outStream != null) {_					try {_						outStream.close()__					} catch (Throwable throwable) {_						LOG.warn("Could not close the state stream for {}.", statePath, throwable)__					} finally {_						try {_							fs.delete(statePath, false)__						} catch (Exception e) {_							LOG.warn("Cannot delete closed and discarded state stream for {}.", statePath, e)__						}_					}_				}_			}_		};if,the,stream,is,only,closed,we,remove,the,produced,file,cleanup,through,the,auto,close,feature,for,example,this,method,throws,no,exception,if,the,deletion,fails,but,only,logs,the,error;override,public,void,close,if,closed,closed,true,pos,write,buffer,length,if,out,stream,null,try,out,stream,close,catch,throwable,throwable,log,warn,could,not,close,the,state,stream,for,state,path,throwable,finally,try,fs,delete,state,path,false,catch,exception,e,log,warn,cannot,delete,closed,and,discarded,state,stream,for,state,path,e
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			FileSystem fileSystem, 			Path checkpointDirectory, 			Path sharedStateDirectory, 			int fileStateSizeThreshold);1517489695;Creates a new stream factory that stores its checkpoint data in the file system and location_defined by the given Path.__<p><b>Important:</b> The given checkpoint directory must already exist. Refer to the class-level_JavaDocs for an explanation why this factory must not try and create the checkpoints.__@param fileSystem The filesystem to write to._@param checkpointDirectory The directory for checkpoint exclusive state data._@param sharedStateDirectory The directory for shared checkpoint data._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsCheckpointStreamFactory(_			FileSystem fileSystem,_			Path checkpointDirectory,_			Path sharedStateDirectory,_			int fileStateSizeThreshold) {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}__		this.filesystem = checkNotNull(fileSystem)__		this.checkpointDirectory = checkNotNull(checkpointDirectory)__		this.sharedStateDirectory = checkNotNull(sharedStateDirectory)__		this.fileStateThreshold = fileStateSizeThreshold__	};creates,a,new,stream,factory,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,path,p,b,important,b,the,given,checkpoint,directory,must,already,exist,refer,to,the,class,level,java,docs,for,an,explanation,why,this,factory,must,not,try,and,create,the,checkpoints,param,file,system,the,filesystem,to,write,to,param,checkpoint,directory,the,directory,for,checkpoint,exclusive,state,data,param,shared,state,directory,the,directory,for,shared,checkpoint,data,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,checkpoint,stream,factory,file,system,file,system,path,checkpoint,directory,path,shared,state,directory,int,file,state,size,threshold,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,filesystem,check,not,null,file,system,this,checkpoint,directory,check,not,null,checkpoint,directory,this,shared,state,directory,check,not,null,shared,state,directory,this,file,state,threshold,file,state,size,threshold
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			FileSystem fileSystem, 			Path checkpointDirectory, 			Path sharedStateDirectory, 			int fileStateSizeThreshold);1517489697;Creates a new stream factory that stores its checkpoint data in the file system and location_defined by the given Path.__<p><b>Important:</b> The given checkpoint directory must already exist. Refer to the class-level_JavaDocs for an explanation why this factory must not try and create the checkpoints.__@param fileSystem The filesystem to write to._@param checkpointDirectory The directory for checkpoint exclusive state data._@param sharedStateDirectory The directory for shared checkpoint data._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsCheckpointStreamFactory(_			FileSystem fileSystem,_			Path checkpointDirectory,_			Path sharedStateDirectory,_			int fileStateSizeThreshold) {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}__		this.filesystem = checkNotNull(fileSystem)__		this.checkpointDirectory = checkNotNull(checkpointDirectory)__		this.sharedStateDirectory = checkNotNull(sharedStateDirectory)__		this.fileStateThreshold = fileStateSizeThreshold__	};creates,a,new,stream,factory,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,path,p,b,important,b,the,given,checkpoint,directory,must,already,exist,refer,to,the,class,level,java,docs,for,an,explanation,why,this,factory,must,not,try,and,create,the,checkpoints,param,file,system,the,filesystem,to,write,to,param,checkpoint,directory,the,directory,for,checkpoint,exclusive,state,data,param,shared,state,directory,the,directory,for,shared,checkpoint,data,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,checkpoint,stream,factory,file,system,file,system,path,checkpoint,directory,path,shared,state,directory,int,file,state,size,threshold,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,filesystem,check,not,null,file,system,this,checkpoint,directory,check,not,null,checkpoint,directory,this,shared,state,directory,check,not,null,shared,state,directory,this,file,state,threshold,file,state,size,threshold
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			FileSystem fileSystem, 			Path checkpointDirectory, 			Path sharedStateDirectory, 			int fileStateSizeThreshold);1519568061;Creates a new stream factory that stores its checkpoint data in the file system and location_defined by the given Path.__<p><b>Important:</b> The given checkpoint directory must already exist. Refer to the class-level_JavaDocs for an explanation why this factory must not try and create the checkpoints.__@param fileSystem The filesystem to write to._@param checkpointDirectory The directory for checkpoint exclusive state data._@param sharedStateDirectory The directory for shared checkpoint data._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsCheckpointStreamFactory(_			FileSystem fileSystem,_			Path checkpointDirectory,_			Path sharedStateDirectory,_			int fileStateSizeThreshold) {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}__		this.filesystem = checkNotNull(fileSystem)__		this.checkpointDirectory = checkNotNull(checkpointDirectory)__		this.sharedStateDirectory = checkNotNull(sharedStateDirectory)__		this.fileStateThreshold = fileStateSizeThreshold__	};creates,a,new,stream,factory,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,path,p,b,important,b,the,given,checkpoint,directory,must,already,exist,refer,to,the,class,level,java,docs,for,an,explanation,why,this,factory,must,not,try,and,create,the,checkpoints,param,file,system,the,filesystem,to,write,to,param,checkpoint,directory,the,directory,for,checkpoint,exclusive,state,data,param,shared,state,directory,the,directory,for,shared,checkpoint,data,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,checkpoint,stream,factory,file,system,file,system,path,checkpoint,directory,path,shared,state,directory,int,file,state,size,threshold,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,filesystem,check,not,null,file,system,this,checkpoint,directory,check,not,null,checkpoint,directory,this,shared,state,directory,check,not,null,shared,state,directory,this,file,state,threshold,file,state,size,threshold
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			FileSystem fileSystem, 			Path checkpointDirectory, 			Path sharedStateDirectory, 			int fileStateSizeThreshold);1537815112;Creates a new stream factory that stores its checkpoint data in the file system and location_defined by the given Path.__<p><b>Important:</b> The given checkpoint directory must already exist. Refer to the class-level_JavaDocs for an explanation why this factory must not try and create the checkpoints.__@param fileSystem The filesystem to write to._@param checkpointDirectory The directory for checkpoint exclusive state data._@param sharedStateDirectory The directory for shared checkpoint data._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsCheckpointStreamFactory(_			FileSystem fileSystem,_			Path checkpointDirectory,_			Path sharedStateDirectory,_			int fileStateSizeThreshold) {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}__		this.filesystem = checkNotNull(fileSystem)__		this.checkpointDirectory = checkNotNull(checkpointDirectory)__		this.sharedStateDirectory = checkNotNull(sharedStateDirectory)__		this.fileStateThreshold = fileStateSizeThreshold__	};creates,a,new,stream,factory,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,path,p,b,important,b,the,given,checkpoint,directory,must,already,exist,refer,to,the,class,level,java,docs,for,an,explanation,why,this,factory,must,not,try,and,create,the,checkpoints,param,file,system,the,filesystem,to,write,to,param,checkpoint,directory,the,directory,for,checkpoint,exclusive,state,data,param,shared,state,directory,the,directory,for,shared,checkpoint,data,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,checkpoint,stream,factory,file,system,file,system,path,checkpoint,directory,path,shared,state,directory,int,file,state,size,threshold,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,filesystem,check,not,null,file,system,this,checkpoint,directory,check,not,null,checkpoint,directory,this,shared,state,directory,check,not,null,shared,state,directory,this,file,state,threshold,file,state,size,threshold
FsCheckpointStreamFactory -> public FsCheckpointStreamFactory( 			FileSystem fileSystem, 			Path checkpointDirectory, 			Path sharedStateDirectory, 			int fileStateSizeThreshold);1537815170;Creates a new stream factory that stores its checkpoint data in the file system and location_defined by the given Path.__<p><b>Important:</b> The given checkpoint directory must already exist. Refer to the class-level_JavaDocs for an explanation why this factory must not try and create the checkpoints.__@param fileSystem The filesystem to write to._@param checkpointDirectory The directory for checkpoint exclusive state data._@param sharedStateDirectory The directory for shared checkpoint data._@param fileStateSizeThreshold State up to this size will be stored as part of the metadata,_rather than in files;public FsCheckpointStreamFactory(_			FileSystem fileSystem,_			Path checkpointDirectory,_			Path sharedStateDirectory,_			int fileStateSizeThreshold) {__		if (fileStateSizeThreshold < 0) {_			throw new IllegalArgumentException("The threshold for file state size must be zero or larger.")__		}_		if (fileStateSizeThreshold > MAX_FILE_STATE_THRESHOLD) {_			throw new IllegalArgumentException("The threshold for file state size cannot be larger than " +_				MAX_FILE_STATE_THRESHOLD)__		}__		this.filesystem = checkNotNull(fileSystem)__		this.checkpointDirectory = checkNotNull(checkpointDirectory)__		this.sharedStateDirectory = checkNotNull(sharedStateDirectory)__		this.fileStateThreshold = fileStateSizeThreshold__	};creates,a,new,stream,factory,that,stores,its,checkpoint,data,in,the,file,system,and,location,defined,by,the,given,path,p,b,important,b,the,given,checkpoint,directory,must,already,exist,refer,to,the,class,level,java,docs,for,an,explanation,why,this,factory,must,not,try,and,create,the,checkpoints,param,file,system,the,filesystem,to,write,to,param,checkpoint,directory,the,directory,for,checkpoint,exclusive,state,data,param,shared,state,directory,the,directory,for,shared,checkpoint,data,param,file,state,size,threshold,state,up,to,this,size,will,be,stored,as,part,of,the,metadata,rather,than,in,files;public,fs,checkpoint,stream,factory,file,system,file,system,path,checkpoint,directory,path,shared,state,directory,int,file,state,size,threshold,if,file,state,size,threshold,0,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,must,be,zero,or,larger,if,file,state,size,threshold,throw,new,illegal,argument,exception,the,threshold,for,file,state,size,cannot,be,larger,than,this,filesystem,check,not,null,file,system,this,checkpoint,directory,check,not,null,checkpoint,directory,this,shared,state,directory,check,not,null,shared,state,directory,this,file,state,threshold,file,state,size,threshold
