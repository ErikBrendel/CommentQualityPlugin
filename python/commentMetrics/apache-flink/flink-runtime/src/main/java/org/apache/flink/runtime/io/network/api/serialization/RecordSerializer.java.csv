commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Whether the full record was serialized and completely written to  * a target buffer.  *  * @return <tt>true</tt> if the complete record was written  */ ;/**  * Whether the full record was serialized and completely written to  * a target buffer.  *  * @return <tt>true</tt> if the complete record was written  */ public boolean isFullRecord() {     return this.isFullRecord. }
true;public;0;3;/**  * Whether the target buffer is full after the serialization process.  *  * @return <tt>true</tt> if the target buffer is full  */ ;/**  * Whether the target buffer is full after the serialization process.  *  * @return <tt>true</tt> if the target buffer is full  */ public boolean isFullBuffer() {     return this.isFullBuffer. }
true;;1;1;/**  * Starts serializing the given record to an intermediate data buffer.  *  * @param record the record to serialize  */ ;/**  * Starts serializing the given record to an intermediate data buffer.  *  * @param record the record to serialize  */ void serializeRecord(T record) throws IOException.
true;;1;1;/**  * Copies the intermediate data serialization buffer to the given target buffer.  *  * @param bufferBuilder the new target buffer to use  * @return how much information was written to the target buffer and  *         whether this buffer is full  */ ;/**  * Copies the intermediate data serialization buffer to the given target buffer.  *  * @param bufferBuilder the new target buffer to use  * @return how much information was written to the target buffer and  *         whether this buffer is full  */ SerializationResult copyToBufferBuilder(BufferBuilder bufferBuilder).
true;;0;1;/**  * Clears the buffer and checks to decrease the size of intermediate data serialization buffer  * after finishing the whole serialization process including  * {@link #serializeRecord(IOReadableWritable)} and {@link #copyToBufferBuilder(BufferBuilder)}.  */ ;/**  * Clears the buffer and checks to decrease the size of intermediate data serialization buffer  * after finishing the whole serialization process including  * {@link #serializeRecord(IOReadableWritable)} and {@link #copyToBufferBuilder(BufferBuilder)}.  */ void prune().
true;;0;1;/**  * Supports copying an intermediate data serialization buffer to multiple target buffers  * by resetting its initial position before each copying.  */ ;/**  * Supports copying an intermediate data serialization buffer to multiple target buffers  * by resetting its initial position before each copying.  */ void reset().
true;;0;1;/**  * @return <tt>true</tt> if has some serialized data pending copying to the result {@link BufferBuilder}.  */ ;/**  * @return <tt>true</tt> if has some serialized data pending copying to the result {@link BufferBuilder}.  */ boolean hasSerializedData().
