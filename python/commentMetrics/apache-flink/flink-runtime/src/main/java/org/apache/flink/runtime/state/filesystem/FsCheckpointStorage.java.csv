commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// ------------------------------------------------------------------------ public Path getCheckpointsDirectory() {     return checkpointsDirectory. }
false;public;0;4;;// ------------------------------------------------------------------------ // CheckpointStorage implementation // ------------------------------------------------------------------------ @Override public boolean supportsHighlyAvailableStorage() {     return true. }
false;public;1;18;;@Override public CheckpointStorageLocation initializeLocationForCheckpoint(long checkpointId) throws IOException {     checkArgument(checkpointId >= 0).     // prepare all the paths needed for the checkpoints     final Path checkpointDir = createCheckpointDirectory(checkpointsDirectory, checkpointId).     // create the checkpoint exclusive directory     fileSystem.mkdirs(checkpointDir).     return new FsCheckpointStorageLocation(fileSystem, checkpointDir, sharedStateDirectory, taskOwnedStateDirectory, CheckpointStorageLocationReference.getDefault(), fileSizeThreshold). }
false;public;2;30;;@Override public CheckpointStreamFactory resolveCheckpointStorageLocation(long checkpointId, CheckpointStorageLocationReference reference) throws IOException {     if (reference.isDefaultReference()) {         // default reference, construct the default location for that particular checkpoint         final Path checkpointDir = createCheckpointDirectory(checkpointsDirectory, checkpointId).         return new FsCheckpointStorageLocation(fileSystem, checkpointDir, sharedStateDirectory, taskOwnedStateDirectory, reference, fileSizeThreshold).     } else {         // location encoded in the reference         final Path path = decodePathFromReference(reference).         return new FsCheckpointStorageLocation(path.getFileSystem(), path, path, path, reference, fileSizeThreshold).     } }
false;public;0;8;;@Override public CheckpointStateOutputStream createTaskOwnedStateStream() throws IOException {     return new FsCheckpointStateOutputStream(taskOwnedStateDirectory, fileSystem, FsCheckpointStreamFactory.DEFAULT_WRITE_BUFFER_SIZE, fileSizeThreshold). }
false;protected;2;5;;@Override protected CheckpointStorageLocation createSavepointLocation(FileSystem fs, Path location) throws IOException {     final CheckpointStorageLocationReference reference = encodePathAsReference(location).     return new FsCheckpointStorageLocation(fs, location, location, location, reference, fileSizeThreshold). }
