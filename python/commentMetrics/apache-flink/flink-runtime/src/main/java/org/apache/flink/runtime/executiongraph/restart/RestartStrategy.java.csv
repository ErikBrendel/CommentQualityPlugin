commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * True if the restart strategy can be applied to restart the {@link ExecutionGraph}.  *  * @return true if restart is possible, otherwise false  */ ;/**  * True if the restart strategy can be applied to restart the {@link ExecutionGraph}.  *  * @return true if restart is possible, otherwise false  */ boolean canRestart().
true;;2;1;/**  * Called by the ExecutionGraph to eventually trigger a full recovery.  * The recovery must be triggered on the given callback object, and may be delayed  * with the help of the given scheduled executor.  *  * <p>The thread that calls this method is not supposed to block/sleep.  *  * @param restarter The hook to restart the ExecutionGraph  * @param executor An scheduled executor to delay the restart  */ ;/**  * Called by the ExecutionGraph to eventually trigger a full recovery.  * The recovery must be triggered on the given callback object, and may be delayed  * with the help of the given scheduled executor.  *  * <p>The thread that calls this method is not supposed to block/sleep.  *  * @param restarter The hook to restart the ExecutionGraph  * @param executor An scheduled executor to delay the restart  */ void restart(RestartCallback restarter, ScheduledExecutor executor).
