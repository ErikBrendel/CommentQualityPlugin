commented;modifiers;parameterAmount;loc;comment;code
true;;2;3;/**  * Stores the local state for the given checkpoint id.  *  * @param checkpointId id for the checkpoint that created the local state that will be stored.  * @param localState the local state to store.  */ ;/**  * Stores the local state for the given checkpoint id.  *  * @param checkpointId id for the checkpoint that created the local state that will be stored.  * @param localState the local state to store.  */ void storeLocalState(@Nonnegative long checkpointId, @Nullable TaskStateSnapshot localState).
true;;1;2;/**  * Returns the local state that is stored under the given checkpoint id or null if nothing was stored under the id.  *  * @param checkpointID the checkpoint id by which we search for local state.  * @return the local state found for the given checkpoint id. Can be null  */ ;/**  * Returns the local state that is stored under the given checkpoint id or null if nothing was stored under the id.  *  * @param checkpointID the checkpoint id by which we search for local state.  * @return the local state found for the given checkpoint id. Can be null  */ @Nullable TaskStateSnapshot retrieveLocalState(long checkpointID).
true;;0;2;/**  * Returns the {@link LocalRecoveryConfig} for this task local state store.  */ ;/**  * Returns the {@link LocalRecoveryConfig} for this task local state store.  */ @Nonnull LocalRecoveryConfig getLocalRecoveryConfig().
true;;1;1;/**  * Notifies that the checkpoint with the given id was confirmed as complete. This prunes the checkpoint history  * and removes all local states with a checkpoint id that is smaller than the newly confirmed checkpoint id.  */ ;/**  * Notifies that the checkpoint with the given id was confirmed as complete. This prunes the checkpoint history  * and removes all local states with a checkpoint id that is smaller than the newly confirmed checkpoint id.  */ void confirmCheckpoint(long confirmedCheckpointId).
true;;1;1;/**  * Remove all checkpoints from the store that match the given predicate.  * @param matcher the predicate that selects the checkpoints for pruning.  */ ;/**  * Remove all checkpoints from the store that match the given predicate.  * @param matcher the predicate that selects the checkpoints for pruning.  */ void pruneMatchingCheckpoints(LongPredicate matcher).
