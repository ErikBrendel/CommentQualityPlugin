commented;modifiers;parameterAmount;loc;comment;code
false;;0;1;;BufferProvider getBufferProvider().
false;;0;1;;ResultPartitionID getPartitionId().
false;;0;1;;int getNumberOfSubpartitions().
false;;0;1;;int getNumTargetKeyGroups().
true;;2;1;/**  * Adds the bufferConsumer to the subpartition with the given index.  *  * <p>For PIPELINED {@link org.apache.flink.runtime.io.network.partition.ResultPartitionType}s,  * this will trigger the deployment of consuming tasks after the first buffer has been added.  *  * <p>This method takes the ownership of the passed {@code bufferConsumer} and thus is responsible for releasing  * it's resources.  *  * <p>To avoid problems with data re-ordering, before adding new {@link BufferConsumer} the previously added one  * the given {@code subpartitionIndex} must be marked as {@link BufferConsumer#isFinished()}.  */ ;/**  * Adds the bufferConsumer to the subpartition with the given index.  *  * <p>For PIPELINED {@link org.apache.flink.runtime.io.network.partition.ResultPartitionType}s,  * this will trigger the deployment of consuming tasks after the first buffer has been added.  *  * <p>This method takes the ownership of the passed {@code bufferConsumer} and thus is responsible for releasing  * it's resources.  *  * <p>To avoid problems with data re-ordering, before adding new {@link BufferConsumer} the previously added one  * the given {@code subpartitionIndex} must be marked as {@link BufferConsumer#isFinished()}.  */ void addBufferConsumer(BufferConsumer bufferConsumer, int subpartitionIndex) throws IOException.
true;;0;1;/**  * Manually trigger consumption from enqueued {@link BufferConsumer BufferConsumers} in all subpartitions.  */ ;/**  * Manually trigger consumption from enqueued {@link BufferConsumer BufferConsumers} in all subpartitions.  */ void flushAll().
true;;1;1;/**  * Manually trigger consumption from enqueued {@link BufferConsumer BufferConsumers} in one specified subpartition.  */ ;/**  * Manually trigger consumption from enqueued {@link BufferConsumer BufferConsumers} in one specified subpartition.  */ void flush(int subpartitionIndex).
