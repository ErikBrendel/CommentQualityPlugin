commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;// ------------------------------------------------------------------------ @Override public void setup(TaskContext<GroupCombineFunction<IN, OUT>, OUT> context) {     this.taskContext = context. }
false;public;0;4;;@Override public int getNumberOfInputs() {     return 1. }
false;public;0;6;;@Override public Class<GroupCombineFunction<IN, OUT>> getStubType() {     @SuppressWarnings("unchecked")     final Class<GroupCombineFunction<IN, OUT>> clazz = (Class<GroupCombineFunction<IN, OUT>>) (Class<?>) GroupCombineFunction.class.     return clazz. }
false;public;0;4;;@Override public int getNumberOfDriverComparators() {     return 0. }
false;public;0;15;;@Override public void prepare() throws Exception {     final DriverStrategy driverStrategy = this.taskContext.getTaskConfig().getDriverStrategy().     if (driverStrategy != DriverStrategy.ALL_GROUP_COMBINE) {         throw new Exception("Invalid strategy " + driverStrategy + " for " + "GroupCombine.").     }     ExecutionConfig executionConfig = taskContext.getExecutionConfig().     this.objectReuseEnabled = executionConfig.isObjectReuseEnabled().     if (LOG.isDebugEnabled()) {         LOG.debug("GroupCombineDriver object reuse: " + (this.objectReuseEnabled ? "ENABLED" : "DISABLED") + ".").     } }
false;public;0;33;;@Override public void run() throws Exception {     if (LOG.isDebugEnabled()) {         LOG.debug("AllGroupCombine starting.").     }     final Counter numRecordsIn = this.taskContext.getMetricGroup().getIOMetricGroup().getNumRecordsInCounter().     final Counter numRecordsOut = this.taskContext.getMetricGroup().getIOMetricGroup().getNumRecordsOutCounter().     final TypeSerializerFactory<IN> serializerFactory = this.taskContext.getInputSerializer(0).     TypeSerializer<IN> serializer = serializerFactory.getSerializer().     final MutableObjectIterator<IN> in = new CountingMutableObjectIterator<>(this.taskContext.<IN>getInput(0), numRecordsIn).     final GroupCombineFunction<IN, OUT> reducer = this.taskContext.getStub().     final Collector<OUT> output = new CountingCollector<>(this.taskContext.getOutputCollector(), numRecordsOut).     if (objectReuseEnabled) {         final ReusingMutableToRegularIteratorWrapper<IN> inIter = new ReusingMutableToRegularIteratorWrapper<IN>(in, serializer).         if (inIter.hasNext()) {             reducer.combine(inIter, output).         }     } else {         final NonReusingMutableToRegularIteratorWrapper<IN> inIter = new NonReusingMutableToRegularIteratorWrapper<IN>(in, serializer).         if (inIter.hasNext()) {             reducer.combine(inIter, output).         }     } }
false;public;0;3;;@Override public void cleanup() throws Exception { }
false;public;0;3;;@Override public void cancel() { }
