# id;timestamp;commentText;codeText;commentWords;codeWords
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction, 			boolean handleLargeRecords, boolean objectReuseEnabled) 	throws IOException, MemoryAllocationException;1466529056;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction,_			boolean handleLargeRecords, boolean objectReuseEnabled)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction, handleLargeRecords, objectReuseEnabled)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,group,combine,function,e,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,boolean,handle,large,records,boolean,object,reuse,enabled,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction,handle,large,records,object,reuse,enabled
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction, 			boolean handleLargeRecords, boolean objectReuseEnabled) 	throws IOException, MemoryAllocationException;1494245028;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction,_			boolean handleLargeRecords, boolean objectReuseEnabled)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction, handleLargeRecords, objectReuseEnabled)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,group,combine,function,e,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,boolean,handle,large,records,boolean,object,reuse,enabled,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction,handle,large,records,object,reuse,enabled
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(GenericCombine<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1405024514;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(GenericCombine<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,generic,combine,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(GenericCombine<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1405090423;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(GenericCombine<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,generic,combine,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1405024514;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators,	this.serializer, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final GenericCombine<E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig_ _				combineStub.open(conf == null ? new Configuration() : conf)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final Channel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				Channel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(_																channel, this.numWriteBuffersToCluster)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				combineStub.close()__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxNumFileHandles) {_				channelIDs = mergeChannelList(channelIDs, this.sortReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.sortReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<BlockChannelAccess<?, ?>>(channelIDs.size()))__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,serializer,this,comparator,set,result,iterator,res,iter,return,final,generic,combine,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,combine,stub,open,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,channel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,channel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,channel,this,num,write,buffers,to,cluster,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,combine,stub,close,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,num,file,handles,channel,ids,merge,channel,list,channel,ids,this,sort,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,sort,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,block,channel,access,channel,ids,size,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1405090423;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators,	this.serializer, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final GenericCombine<E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig_ _				combineStub.open(conf == null ? new Configuration() : conf)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final Channel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				Channel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(_																channel, this.numWriteBuffersToCluster)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				combineStub.close()__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxNumFileHandles) {_				channelIDs = mergeChannelList(channelIDs, this.sortReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.sortReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<BlockChannelAccess<?, ?>>(channelIDs.size()))__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,serializer,this,comparator,set,result,iterator,res,iter,return,final,generic,combine,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,combine,stub,open,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,channel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,channel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,channel,this,num,write,buffers,to,cluster,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,combine,stub,close,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,num,file,handles,channel,ids,merge,channel,list,channel,ids,this,sort,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,sort,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,block,channel,access,channel,ids,size,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1406821655;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators,	this.serializer, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final Channel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				Channel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(_																channel, this.numWriteBuffersToCluster)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxNumFileHandles) {_				channelIDs = mergeChannelList(channelIDs, this.sortReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.sortReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<BlockChannelAccess<?, ?>>(channelIDs.size()))__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,serializer,this,comparator,set,result,iterator,res,iter,return,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,channel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,channel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,channel,this,num,write,buffers,to,cluster,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,num,file,handles,channel,ids,merge,channel,list,channel,ids,this,sort,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,sort,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,block,channel,access,channel,ids,size,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1406853229;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators,	this.serializer, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final Channel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				Channel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(_																channel, this.numWriteBuffersToCluster)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxNumFileHandles) {_				channelIDs = mergeChannelList(channelIDs, this.sortReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.sortReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<BlockChannelAccess<?, ?>>(channelIDs.size()))__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,serializer,this,comparator,set,result,iterator,res,iter,return,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,channel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,channel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,channel,this,num,write,buffers,to,cluster,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,num,file,handles,channel,ids,merge,channel,list,channel,ids,this,sort,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,sort,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,block,channel,access,channel,ids,size,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1409911022;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators,	this.serializer, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final Channel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				Channel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(_																channel, this.numWriteBuffersToCluster)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxNumFileHandles) {_				channelIDs = mergeChannelList(channelIDs, this.sortReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.sortReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<BlockChannelAccess<?, ?>>(channelIDs.size()))__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,serializer,this,comparator,set,result,iterator,res,iter,return,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,channel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,channel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,channel,this,num,write,buffers,to,cluster,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,num,file,handles,channel,ids,merge,channel,list,channel,ids,this,sort,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,sort,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,block,channel,access,channel,ids,size,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1411473593;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators,	this.serializer, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final Channel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				Channel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(_																channel, this.numWriteBuffersToCluster)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxNumFileHandles) {_				channelIDs = mergeChannelList(channelIDs, this.sortReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.sortReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<BlockChannelAccess<?, ?>>(channelIDs.size()))__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,serializer,this,comparator,set,result,iterator,res,iter,return,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,channel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,channel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,channel,this,num,write,buffers,to,cluster,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,num,file,handles,channel,ids,merge,channel,list,channel,ids,this,sort,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,sort,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,block,channel,access,channel,ids,size,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1415702894;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators,	this.serializer, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final FileIOChannel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				FileIOChannel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(channel)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxNumFileHandles) {_				channelIDs = mergeChannelList(channelIDs, this.sortReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.sortReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<FileIOChannel>(channelIDs.size()))__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,serializer,this,comparator,set,result,iterator,res,iter,return,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,file,iochannel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,file,iochannel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,channel,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,num,file,handles,channel,ids,merge,channel,list,channel,ids,this,sort,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,sort,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,file,iochannel,channel,ids,size,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1420654570;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators,	this.serializer, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final FileIOChannel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				FileIOChannel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(channel)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxNumFileHandles) {_				channelIDs = mergeChannelList(channelIDs, this.sortReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.sortReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<FileIOChannel>(channelIDs.size()))__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,serializer,this,comparator,set,result,iterator,res,iter,return,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,file,iochannel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,file,iochannel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,channel,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,num,file,handles,channel,ids,merge,channel,list,channel,ids,this,sort,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,sort,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,file,iochannel,channel,ids,size,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1420663430;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final FileIOChannel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				FileIOChannel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(channel)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxNumFileHandles) {_				channelIDs = mergeChannelList(channelIDs, this.sortReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.sortReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<FileIOChannel>(channelIDs.size()))__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,comparator,set,result,iterator,res,iter,return,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,file,iochannel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,file,iochannel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,channel,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,num,file,handles,channel,ids,merge,channel,list,channel,ids,this,sort,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,sort,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,file,iochannel,channel,ids,size,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1421838095;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final FileIOChannel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				FileIOChannel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(channel)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxFanIn) {_				channelIDs = mergeChannelList(channelIDs, this.mergeReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.mergeReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<FileIOChannel>(channelIDs.size()))__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,comparator,set,result,iterator,res,iter,return,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,file,iochannel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,file,iochannel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,channel,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,fan,in,channel,ids,merge,channel,list,channel,ids,this,merge,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,merge,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,file,iochannel,channel,ids,size,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1421838119;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final FileIOChannel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				FileIOChannel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(channel)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxFanIn) {_				channelIDs = mergeChannelList(channelIDs, this.mergeReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.mergeReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<FileIOChannel>(channelIDs.size()), null)__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,comparator,set,result,iterator,res,iter,return,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,file,iochannel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,file,iochannel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,channel,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,fan,in,channel,ids,merge,channel,list,channel,ids,this,merge,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,merge,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,file,iochannel,channel,ids,size,null,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1426697080;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final FileIOChannel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				FileIOChannel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(channel)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxFanIn) {_				channelIDs = mergeChannelList(channelIDs, this.mergeReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.mergeReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<FileIOChannel>(channelIDs.size()), null)__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,comparator,set,result,iterator,res,iter,return,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,file,iochannel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,file,iochannel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,channel,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,fan,in,channel,ids,merge,channel,list,channel,ids,this,merge,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,merge,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,file,iochannel,channel,ids,size,null,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1426698965;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element = null__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final FlatCombineFunction<E, E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final FileIOChannel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				FileIOChannel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(channel)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxFanIn) {_				channelIDs = mergeChannelList(channelIDs, this.mergeReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.mergeReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<FileIOChannel>(channelIDs.size()), null)__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,null,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,comparator,set,result,iterator,res,iter,return,final,flat,combine,function,e,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,file,iochannel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,file,iochannel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,channel,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,fan,in,channel,ids,merge,channel,list,channel,ids,this,merge,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,merge,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,file,iochannel,channel,ids,size,null,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1427300031;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final GroupCombineFunction<E, E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final FileIOChannel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				FileIOChannel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(channel)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxFanIn) {_				channelIDs = mergeChannelList(channelIDs, this.mergeReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.mergeReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<FileIOChannel>(channelIDs.size()), null)__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,comparator,set,result,iterator,res,iter,return,final,group,combine,function,e,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,file,iochannel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,file,iochannel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,channel,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,fan,in,channel,ids,merge,channel,list,channel,ids,this,merge,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,merge,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,file,iochannel,channel,ids,size,null,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1441738685;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final GroupCombineFunction<E, E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final FileIOChannel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				FileIOChannel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(channel)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxFanIn) {_				channelIDs = mergeChannelList(channelIDs, this.mergeReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.mergeReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<FileIOChannel>(channelIDs.size()), null)__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,comparator,set,result,iterator,res,iter,return,final,group,combine,function,e,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,file,iochannel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,file,iochannel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,channel,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,fan,in,channel,ids,merge,channel,list,channel,ids,this,merge,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,merge,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,file,iochannel,channel,ids,size,null,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1443522094;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final GroupCombineFunction<E, E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final FileIOChannel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				FileIOChannel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(channel)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxFanIn) {_				channelIDs = mergeChannelList(channelIDs, this.mergeReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.mergeReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<FileIOChannel>(channelIDs.size()), null)__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,comparator,set,result,iterator,res,iter,return,final,group,combine,function,e,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,file,iochannel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,file,iochannel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,channel,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,fan,in,channel,ids,merge,channel,list,channel,ids,this,merge,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,merge,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,file,iochannel,channel,ids,size,null,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1466529056;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final GroupCombineFunction<E, E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final FileIOChannel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				FileIOChannel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(channel)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(buffer, this.serializer.createInstance())__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxFanIn) {_				channelIDs = mergeChannelList(channelIDs, this.mergeReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.mergeReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<FileIOChannel>(channelIDs.size()), null)__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,comparator,set,result,iterator,res,iter,return,final,group,combine,function,e,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,file,iochannel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,file,iochannel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,channel,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,fan,in,channel,ids,merge,channel,list,channel,ids,this,merge,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,merge,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,file,iochannel,channel,ids,size,null,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> CombiningSpillingThread -> public void go() throws IOException;1494245028;Entry point of the thread.;public void go() throws IOException {_			_			_			final Queue<CircularElement<E>> cache = new ArrayDeque<CircularElement<E>>()__			CircularElement<E> element__			boolean cacheOnly = false__			_			_			while (isRunning()) {_				_				try {_					element = this.queues.spill.take()__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				if (element == spillingMarker()) {_					break__				}_				else if (element == endMarker()) {_					cacheOnly = true__					break__				}_				cache.add(element)__			}_			_			_			if (!isRunning()) {_				return__			}_			_			_			if (cacheOnly) {_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Initiating in memory merge.")__				}_				_				List<MutableObjectIterator<E>> iterators = new ArrayList<MutableObjectIterator<E>>(cache.size())__								_				_				for (CircularElement<E> cached : cache) {_					iterators.add(cached.buffer.getIterator())__				}_				_				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Releasing unused sort-buffer memory.")__				}_				disposeSortBuffers(true)__				_				_				MutableObjectIterator<E> resIter = iterators.isEmpty() ? EmptyMutableObjectIterator.<E>get() :_						iterators.size() == 1 ? iterators.get(0) : _						new MergeIterator<E>(iterators, this.comparator)__				_				setResultIterator(resIter)__				return__			}_			_			_			_			final GroupCombineFunction<E, E> combineStub = CombiningUnilateralSortMerger.this.combineStub__			_			_			try {_				Configuration conf = CombiningUnilateralSortMerger.this.udfConfig__				FunctionUtils.openFunction (combineStub, (conf == null ? new Configuration() : conf))__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'open()' method.", t)__			}_			_			final FileIOChannel.Enumerator enumerator = this.ioManager.createChannelEnumerator()__			List<ChannelWithBlockCount> channelIDs = new ArrayList<ChannelWithBlockCount>()___			_			_			while (isRunning())	{_				try {_					element = takeNext(this.queues.spill, cache)__				}_				catch (InterruptedException iex) {_					if (isRunning()) {_						LOG.error("Sorting thread was interrupted (without being shut down) while grabbing a buffer. " +_								"Retrying to grab buffer...")__						continue__					} else {_						return__					}_				}_				_				_				if (!isRunning()) {_					return__				}_				_				if (element == endMarker()) {_					break__				}_				_				_				FileIOChannel.ID channel = enumerator.next()__				registerChannelToBeRemovedAtShudown(channel)__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Creating temp file " + channel.toString() + '.')__				}__				_				final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(channel)__				registerOpenChannelToBeRemovedAtShudown(writer)__				final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, this.writeMemory,_																			this.memManager.getPageSize())___				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combining buffer " + element.id + '.')__				}__				_				final InMemorySorter<E> buffer = element.buffer__				final CombineValueIterator<E> iter = new CombineValueIterator<E>(_						buffer, this.serializer.createInstance(), this.objectReuseEnabled)__				final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)___				int i = 0__				int stop = buffer.size() - 1___				try {_					while (i < stop) {_						int seqStart = i__						while (i < stop && 0 == buffer.compare(i, i + 1)) {_							i++__						}_	_						if (i == seqStart) {_							_							buffer.writeToOutput(output, seqStart, 1)__						} else {_							_							iter.set(seqStart, i)__							_							combineStub.combine(iter, collector)__						}_						i++__					}_				}_				catch (Exception ex) {_					throw new IOException("An error occurred in the combiner user code.", ex)__				}__				_				if (i == stop) {_					buffer.writeToOutput(output, stop, 1)__				}__				_				if (LOG.isDebugEnabled()) {_					LOG.debug("Combined and spilled buffer " + element.id + ".")__				}__				output.close()__				unregisterOpenChannelToBeRemovedAtShudown(writer)__				_				channelIDs.add(new ChannelWithBlockCount(channel, output.getBlockCount()))___				_				element.buffer.reset()__				this.queues.empty.add(element)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling done.")__				LOG.debug("Releasing sort-buffer memory.")__			}_			_			_			disposeSortBuffers(false)__			_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Closing combiner user code.")__			}_			_			_			try {_				FunctionUtils.closeFunction(combineStub)__			}_			catch (Throwable t) {_				throw new IOException("The user-defined combiner failed in its 'close()' method.", t)__			}_			_			if (LOG.isDebugEnabled()) {_				LOG.debug("User code closed.")__			}__			__			_			while (isRunning() && channelIDs.size() > this.maxFanIn) {_				channelIDs = mergeChannelList(channelIDs, this.mergeReadMemory, this.writeMemory)__			}_			_			_			this.memManager.release(this.writeMemory)__			this.writeMemory.clear()__			_			_			if (channelIDs.isEmpty()) {_				setResultIterator(EmptyMutableObjectIterator.<E>get())__			}_			else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Beginning final merge.")__				}_				_				_				List<List<MemorySegment>> readBuffers = new ArrayList<List<MemorySegment>>(channelIDs.size())__				_				_				getSegmentsForReaders(readBuffers, this.mergeReadMemory, channelIDs.size())__				_				_				final MergeIterator<E> mergeIterator = getMergingIterator(_						channelIDs, readBuffers, new ArrayList<FileIOChannel>(channelIDs.size()), null)__				_				_				_				_				setResultIterator(mergeIterator)__			}__			_			if (LOG.isDebugEnabled()) {_				LOG.debug("Spilling and merging thread done.")__			}_		};entry,point,of,the,thread;public,void,go,throws,ioexception,final,queue,circular,element,e,cache,new,array,deque,circular,element,e,circular,element,e,element,boolean,cache,only,false,while,is,running,try,element,this,queues,spill,take,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,element,spilling,marker,break,else,if,element,end,marker,cache,only,true,break,cache,add,element,if,is,running,return,if,cache,only,if,log,is,debug,enabled,log,debug,initiating,in,memory,merge,list,mutable,object,iterator,e,iterators,new,array,list,mutable,object,iterator,e,cache,size,for,circular,element,e,cached,cache,iterators,add,cached,buffer,get,iterator,if,log,is,debug,enabled,log,debug,releasing,unused,sort,buffer,memory,dispose,sort,buffers,true,mutable,object,iterator,e,res,iter,iterators,is,empty,empty,mutable,object,iterator,e,get,iterators,size,1,iterators,get,0,new,merge,iterator,e,iterators,this,comparator,set,result,iterator,res,iter,return,final,group,combine,function,e,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,configuration,conf,combining,unilateral,sort,merger,this,udf,config,function,utils,open,function,combine,stub,conf,null,new,configuration,conf,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,open,method,t,final,file,iochannel,enumerator,enumerator,this,io,manager,create,channel,enumerator,list,channel,with,block,count,channel,ids,new,array,list,channel,with,block,count,while,is,running,try,element,take,next,this,queues,spill,cache,catch,interrupted,exception,iex,if,is,running,log,error,sorting,thread,was,interrupted,without,being,shut,down,while,grabbing,a,buffer,retrying,to,grab,buffer,continue,else,return,if,is,running,return,if,element,end,marker,break,file,iochannel,id,channel,enumerator,next,register,channel,to,be,removed,at,shudown,channel,if,log,is,debug,enabled,log,debug,creating,temp,file,channel,to,string,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,channel,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,this,write,memory,this,mem,manager,get,page,size,if,log,is,debug,enabled,log,debug,combining,buffer,element,id,final,in,memory,sorter,e,buffer,element,buffer,final,combine,value,iterator,e,iter,new,combine,value,iterator,e,buffer,this,serializer,create,instance,this,object,reuse,enabled,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,int,i,0,int,stop,buffer,size,1,try,while,i,stop,int,seq,start,i,while,i,stop,0,buffer,compare,i,i,1,i,if,i,seq,start,buffer,write,to,output,output,seq,start,1,else,iter,set,seq,start,i,combine,stub,combine,iter,collector,i,catch,exception,ex,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,ex,if,i,stop,buffer,write,to,output,output,stop,1,if,log,is,debug,enabled,log,debug,combined,and,spilled,buffer,element,id,output,close,unregister,open,channel,to,be,removed,at,shudown,writer,channel,ids,add,new,channel,with,block,count,channel,output,get,block,count,element,buffer,reset,this,queues,empty,add,element,if,log,is,debug,enabled,log,debug,spilling,done,log,debug,releasing,sort,buffer,memory,dispose,sort,buffers,false,if,log,is,debug,enabled,log,debug,closing,combiner,user,code,try,function,utils,close,function,combine,stub,catch,throwable,t,throw,new,ioexception,the,user,defined,combiner,failed,in,its,close,method,t,if,log,is,debug,enabled,log,debug,user,code,closed,while,is,running,channel,ids,size,this,max,fan,in,channel,ids,merge,channel,list,channel,ids,this,merge,read,memory,this,write,memory,this,mem,manager,release,this,write,memory,this,write,memory,clear,if,channel,ids,is,empty,set,result,iterator,empty,mutable,object,iterator,e,get,else,if,log,is,debug,enabled,log,debug,beginning,final,merge,list,list,memory,segment,read,buffers,new,array,list,list,memory,segment,channel,ids,size,get,segments,for,readers,read,buffers,this,merge,read,memory,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,new,array,list,file,iochannel,channel,ids,size,null,set,result,iterator,merge,iterator,if,log,is,debug,enabled,log,debug,spilling,and,merging,thread,done
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1405024514;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1405090423;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1406821655;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1406853229;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1409911022;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1411473593;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1415702894;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1420654570;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1420663430;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1421838095;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1421838119;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1426697080;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1426698965;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1427300031;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1441738685;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1443522094;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1466529056;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> WriterCollector -> private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer);1494245028;Creates a new writer collector that writes to the given writer.__@param output The writer output view to write to.;private WriterCollector(ChannelWriterOutputView output, TypeSerializer<E> serializer) {_			this.output = output__			this.serializer = serializer__		};creates,a,new,writer,collector,that,writes,to,the,given,writer,param,output,the,writer,output,view,to,write,to;private,writer,collector,channel,writer,output,view,output,type,serializer,e,serializer,this,output,output,this,serializer,serializer
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1405024514;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1405090423;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1406821655;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1406853229;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1409911022;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1411473593;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1415702894;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1420654570;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1420663430;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1421838095;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1421838119;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1426697080;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1426698965;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1427300031;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1441738685;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1443522094;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> CombineValueIterator -> public CombineValueIterator(InMemorySorter<E> buffer, E instance);1466529056;Creates an iterator over the values in a <tt>BufferSortable</tt>.__@param buffer_The buffer to get the values from.;public CombineValueIterator(InMemorySorter<E> buffer, E instance) {_			this.buffer = buffer__			this.record = instance__		};creates,an,iterator,over,the,values,in,a,tt,buffer,sortable,tt,param,buffer,the,buffer,to,get,the,values,from;public,combine,value,iterator,in,memory,sorter,e,buffer,e,instance,this,buffer,buffer,this,record,instance
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1406821655;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1406853229;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1409911022;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1411473593;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1415702894;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1420654570;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1420663430;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1421838095;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false, true)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,true,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1421838119;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false, true)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,true,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1426697080;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false, true)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,true,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1405024514;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1405090423;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1406821655;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1406853229;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1409911022;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1411473593;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1415702894;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1420654570;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1420663430;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1421838095;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1421838119;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1426697080;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1426698965;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1427300031;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1441738685;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1443522094;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1466529056;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> CombineValueIterator -> public void set(int first, int last);1494245028;Sets the interval for the values that are to be returned by this iterator.__@param first_The position of the first value to be returned._@param last_The position of the last value to be returned.;public void set(int first, int last) {_			this.last = last__			this.position = first__			this.iteratorAvailable = true__		};sets,the,interval,for,the,values,that,are,to,be,returned,by,this,iterator,param,first,the,position,of,the,first,value,to,be,returned,param,last,the,position,of,the,last,value,to,be,returned;public,void,set,int,first,int,last,this,last,last,this,position,first,this,iterator,available,true
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1427300031;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false, true)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,group,combine,function,e,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,true,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1441738685;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false, true)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,group,combine,function,e,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,true,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1405024514;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<BlockChannelAccess<?, ?>> channelAccesses = new ArrayList<BlockChannelAccess<?, ?>>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses)__			final KeyGroupedIterator<E> groupedIter = new KeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final Channel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(_															mergedChannelID, this.numWriteBuffersToCluster)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final GenericCombine<E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				BlockChannelAccess<?, ?> access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,block,channel,access,channel,accesses,new,array,list,block,channel,access,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,final,key,grouped,iterator,e,grouped,iter,new,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,channel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,merged,channel,id,this,num,write,buffers,to,cluster,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,generic,combine,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,block,channel,access,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1405090423;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<BlockChannelAccess<?, ?>> channelAccesses = new ArrayList<BlockChannelAccess<?, ?>>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses)__			final KeyGroupedIterator<E> groupedIter = new KeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final Channel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(_															mergedChannelID, this.numWriteBuffersToCluster)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final GenericCombine<E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				BlockChannelAccess<?, ?> access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,block,channel,access,channel,accesses,new,array,list,block,channel,access,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,final,key,grouped,iterator,e,grouped,iter,new,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,channel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,merged,channel,id,this,num,write,buffers,to,cluster,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,generic,combine,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,block,channel,access,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1406821655;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<BlockChannelAccess<?, ?>> channelAccesses = new ArrayList<BlockChannelAccess<?, ?>>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses)__			final KeyGroupedIterator<E> groupedIter = new KeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final Channel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(_															mergedChannelID, this.numWriteBuffersToCluster)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				BlockChannelAccess<?, ?> access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,block,channel,access,channel,accesses,new,array,list,block,channel,access,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,final,key,grouped,iterator,e,grouped,iter,new,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,channel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,merged,channel,id,this,num,write,buffers,to,cluster,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,block,channel,access,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1406853229;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<BlockChannelAccess<?, ?>> channelAccesses = new ArrayList<BlockChannelAccess<?, ?>>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses)__			final KeyGroupedIterator<E> groupedIter = new KeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final Channel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(_															mergedChannelID, this.numWriteBuffersToCluster)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				BlockChannelAccess<?, ?> access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,block,channel,access,channel,accesses,new,array,list,block,channel,access,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,final,key,grouped,iterator,e,grouped,iter,new,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,channel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,merged,channel,id,this,num,write,buffers,to,cluster,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,block,channel,access,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1409911022;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<BlockChannelAccess<?, ?>> channelAccesses = new ArrayList<BlockChannelAccess<?, ?>>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses)__			final KeyGroupedIterator<E> groupedIter = new KeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final Channel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(_															mergedChannelID, this.numWriteBuffersToCluster)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				BlockChannelAccess<?, ?> access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,block,channel,access,channel,accesses,new,array,list,block,channel,access,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,final,key,grouped,iterator,e,grouped,iter,new,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,channel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,merged,channel,id,this,num,write,buffers,to,cluster,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,block,channel,access,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1411473593;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<BlockChannelAccess<?, ?>> channelAccesses = new ArrayList<BlockChannelAccess<?, ?>>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses)__			final KeyGroupedIterator<E> groupedIter = new KeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final Channel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(_															mergedChannelID, this.numWriteBuffersToCluster)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				BlockChannelAccess<?, ?> access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,block,channel,access,channel,accesses,new,array,list,block,channel,access,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,final,key,grouped,iterator,e,grouped,iter,new,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,channel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,merged,channel,id,this,num,write,buffers,to,cluster,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,block,channel,access,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1415702894;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<FileIOChannel> channelAccesses = new ArrayList<FileIOChannel>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses)__			final KeyGroupedIterator<E> groupedIter = new KeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final FileIOChannel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(mergedChannelID)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				FileIOChannel access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,file,iochannel,channel,accesses,new,array,list,file,iochannel,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,final,key,grouped,iterator,e,grouped,iter,new,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,file,iochannel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,merged,channel,id,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,file,iochannel,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1420654570;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<FileIOChannel> channelAccesses = new ArrayList<FileIOChannel>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses)__			final ReusingKeyGroupedIterator<E> groupedIter = new ReusingKeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final FileIOChannel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(mergedChannelID)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				FileIOChannel access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,file,iochannel,channel,accesses,new,array,list,file,iochannel,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,final,reusing,key,grouped,iterator,e,grouped,iter,new,reusing,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,file,iochannel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,merged,channel,id,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,file,iochannel,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1420663430;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<FileIOChannel> channelAccesses = new ArrayList<FileIOChannel>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses)__			final ReusingKeyGroupedIterator<E> groupedIter = new ReusingKeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final FileIOChannel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(mergedChannelID)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				FileIOChannel access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,file,iochannel,channel,accesses,new,array,list,file,iochannel,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,final,reusing,key,grouped,iterator,e,grouped,iter,new,reusing,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,file,iochannel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,merged,channel,id,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,file,iochannel,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1421838095;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<FileIOChannel> channelAccesses = new ArrayList<FileIOChannel>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses, null)__			final ReusingKeyGroupedIterator<E> groupedIter = new ReusingKeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final FileIOChannel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(mergedChannelID)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				FileIOChannel access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,file,iochannel,channel,accesses,new,array,list,file,iochannel,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,null,final,reusing,key,grouped,iterator,e,grouped,iter,new,reusing,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,file,iochannel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,merged,channel,id,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,file,iochannel,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1421838119;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<FileIOChannel> channelAccesses = new ArrayList<FileIOChannel>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses, null)__			final ReusingKeyGroupedIterator<E> groupedIter = new ReusingKeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final FileIOChannel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter writer = this.ioManager.createBlockChannelWriter(mergedChannelID)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				FileIOChannel access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,file,iochannel,channel,accesses,new,array,list,file,iochannel,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,null,final,reusing,key,grouped,iterator,e,grouped,iter,new,reusing,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,file,iochannel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,writer,this,io,manager,create,block,channel,writer,merged,channel,id,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,file,iochannel,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1426697080;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<FileIOChannel> channelAccesses = new ArrayList<FileIOChannel>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses, null)__			final ReusingKeyGroupedIterator<E> groupedIter = new ReusingKeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final FileIOChannel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(mergedChannelID)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final FlatCombineFunction<E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				FileIOChannel access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,file,iochannel,channel,accesses,new,array,list,file,iochannel,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,null,final,reusing,key,grouped,iterator,e,grouped,iter,new,reusing,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,file,iochannel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,merged,channel,id,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,flat,combine,function,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,file,iochannel,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1426698965;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<FileIOChannel> channelAccesses = new ArrayList<FileIOChannel>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses, null)__			final ReusingKeyGroupedIterator<E> groupedIter = new ReusingKeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final FileIOChannel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(mergedChannelID)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final FlatCombineFunction<E, E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				FileIOChannel access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,file,iochannel,channel,accesses,new,array,list,file,iochannel,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,null,final,reusing,key,grouped,iterator,e,grouped,iter,new,reusing,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,file,iochannel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,merged,channel,id,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,flat,combine,function,e,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,file,iochannel,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1427300031;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<FileIOChannel> channelAccesses = new ArrayList<FileIOChannel>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses, null)__			final ReusingKeyGroupedIterator<E> groupedIter = new ReusingKeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final FileIOChannel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(mergedChannelID)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final GroupCombineFunction<E, E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				FileIOChannel access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,file,iochannel,channel,accesses,new,array,list,file,iochannel,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,null,final,reusing,key,grouped,iterator,e,grouped,iter,new,reusing,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,file,iochannel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,merged,channel,id,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,group,combine,function,e,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,file,iochannel,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1441738685;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<FileIOChannel> channelAccesses = new ArrayList<FileIOChannel>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses, null)__			final ReusingKeyGroupedIterator<E> groupedIter = new ReusingKeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final FileIOChannel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(mergedChannelID)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final GroupCombineFunction<E, E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				FileIOChannel access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,file,iochannel,channel,accesses,new,array,list,file,iochannel,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,null,final,reusing,key,grouped,iterator,e,grouped,iter,new,reusing,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,file,iochannel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,merged,channel,id,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,group,combine,function,e,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,file,iochannel,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1443522094;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<FileIOChannel> channelAccesses = new ArrayList<FileIOChannel>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses, null)__			final ReusingKeyGroupedIterator<E> groupedIter = new ReusingKeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final FileIOChannel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(mergedChannelID)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final GroupCombineFunction<E, E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				FileIOChannel access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,file,iochannel,channel,accesses,new,array,list,file,iochannel,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,null,final,reusing,key,grouped,iterator,e,grouped,iter,new,reusing,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,file,iochannel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,merged,channel,id,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,group,combine,function,e,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,file,iochannel,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1466529056;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<FileIOChannel> channelAccesses = new ArrayList<FileIOChannel>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses, null)__			final ReusingKeyGroupedIterator<E> groupedIter = new ReusingKeyGroupedIterator<E>(mergeIterator, this.serializer, this.comparator2)___			_			final FileIOChannel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(mergedChannelID)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final GroupCombineFunction<E, E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				while (groupedIter.nextKey()) {_					combineStub.combine(groupedIter.getValues(), collector)__				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				FileIOChannel access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,file,iochannel,channel,accesses,new,array,list,file,iochannel,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,null,final,reusing,key,grouped,iterator,e,grouped,iter,new,reusing,key,grouped,iterator,e,merge,iterator,this,serializer,this,comparator2,final,file,iochannel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,merged,channel,id,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,group,combine,function,e,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,file,iochannel,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> CombiningSpillingThread -> @Override 		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers, 				List<MemorySegment> writeBuffers) 		throws IOException;1494245028;Merges the sorted runs described by the given Channel IDs into a single sorted run. The merging process_uses the given read and write buffers. During the merging process, the combiner is used to reduce the_number of values with identical key.__@param channelIDs The IDs of the runs' channels._@param readBuffers The buffers for the readers that read the sorted runs._@param writeBuffers The buffers for the writer that writes the merged channel._@return The ID of the channel that describes the merged run.;@Override_		protected ChannelWithBlockCount mergeChannels(List<ChannelWithBlockCount> channelIDs, List<List<MemorySegment>> readBuffers,_				List<MemorySegment> writeBuffers)_		throws IOException_		{_			_			final List<FileIOChannel> channelAccesses = new ArrayList<FileIOChannel>(channelIDs.size())___			_			final MergeIterator<E> mergeIterator = getMergingIterator(channelIDs, readBuffers, channelAccesses, null)___			_			final FileIOChannel.ID mergedChannelID = this.ioManager.createChannel()__			registerChannelToBeRemovedAtShudown(mergedChannelID)__			final BlockChannelWriter<MemorySegment> writer = this.ioManager.createBlockChannelWriter(mergedChannelID)__			registerOpenChannelToBeRemovedAtShudown(writer)__			final ChannelWriterOutputView output = new ChannelWriterOutputView(writer, writeBuffers, _																			this.memManager.getPageSize())__			_			final WriterCollector<E> collector = new WriterCollector<E>(output, this.serializer)__			final GroupCombineFunction<E, E> combineStub = CombiningUnilateralSortMerger.this.combineStub___			_			try {_				if (objectReuseEnabled) {_					final ReusingKeyGroupedIterator<E> groupedIter = new ReusingKeyGroupedIterator<>(_							mergeIterator, this.serializer, this.comparator2)__					while (groupedIter.nextKey()) {_						combineStub.combine(groupedIter.getValues(), collector)__					}_				} else {_					final NonReusingKeyGroupedIterator<E> groupedIter = new NonReusingKeyGroupedIterator<>(_							mergeIterator, this.comparator2)__					while (groupedIter.nextKey()) {_						combineStub.combine(groupedIter.getValues(), collector)__					}_				}_			}_			catch (Exception e) {_				throw new IOException("An error occurred in the combiner user code.")__			}_			output.close()_ _			_			final int numBlocksWritten = output.getBlockCount()__			_			_			unregisterOpenChannelToBeRemovedAtShudown(writer)__			_			_			for (int i = 0_ i < channelAccesses.size()_ i++) {_				FileIOChannel access = channelAccesses.get(i)__				access.closeAndDelete()__				unregisterOpenChannelToBeRemovedAtShudown(access)__			}__			return new ChannelWithBlockCount(mergedChannelID, numBlocksWritten)__		};merges,the,sorted,runs,described,by,the,given,channel,ids,into,a,single,sorted,run,the,merging,process,uses,the,given,read,and,write,buffers,during,the,merging,process,the,combiner,is,used,to,reduce,the,number,of,values,with,identical,key,param,channel,ids,the,ids,of,the,runs,channels,param,read,buffers,the,buffers,for,the,readers,that,read,the,sorted,runs,param,write,buffers,the,buffers,for,the,writer,that,writes,the,merged,channel,return,the,id,of,the,channel,that,describes,the,merged,run;override,protected,channel,with,block,count,merge,channels,list,channel,with,block,count,channel,ids,list,list,memory,segment,read,buffers,list,memory,segment,write,buffers,throws,ioexception,final,list,file,iochannel,channel,accesses,new,array,list,file,iochannel,channel,ids,size,final,merge,iterator,e,merge,iterator,get,merging,iterator,channel,ids,read,buffers,channel,accesses,null,final,file,iochannel,id,merged,channel,id,this,io,manager,create,channel,register,channel,to,be,removed,at,shudown,merged,channel,id,final,block,channel,writer,memory,segment,writer,this,io,manager,create,block,channel,writer,merged,channel,id,register,open,channel,to,be,removed,at,shudown,writer,final,channel,writer,output,view,output,new,channel,writer,output,view,writer,write,buffers,this,mem,manager,get,page,size,final,writer,collector,e,collector,new,writer,collector,e,output,this,serializer,final,group,combine,function,e,e,combine,stub,combining,unilateral,sort,merger,this,combine,stub,try,if,object,reuse,enabled,final,reusing,key,grouped,iterator,e,grouped,iter,new,reusing,key,grouped,iterator,merge,iterator,this,serializer,this,comparator2,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,else,final,non,reusing,key,grouped,iterator,e,grouped,iter,new,non,reusing,key,grouped,iterator,merge,iterator,this,comparator2,while,grouped,iter,next,key,combine,stub,combine,grouped,iter,get,values,collector,catch,exception,e,throw,new,ioexception,an,error,occurred,in,the,combiner,user,code,output,close,final,int,num,blocks,written,output,get,block,count,unregister,open,channel,to,be,removed,at,shudown,writer,for,int,i,0,i,channel,accesses,size,i,file,iochannel,access,channel,accesses,get,i,access,close,and,delete,unregister,open,channel,to,be,removed,at,shudown,access,return,new,channel,with,block,count,merged,channel,id,num,blocks,written
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(GenericCombine<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1405024514;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(GenericCombine<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,generic,combine,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(GenericCombine<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction) 	throws IOException, MemoryAllocationException;1405090423;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(GenericCombine<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,generic,combine,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1406821655;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1406853229;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1409911022;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1411473593;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1415702894;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1420654570;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1420663430;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1421838095;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1421838119;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1426697080;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(FlatCombineFunction<E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,flat,combine,function,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction, boolean handleLargeRecords, boolean objectReuseEnabled) 	throws IOException, MemoryAllocationException;1466529056;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction, boolean handleLargeRecords, boolean objectReuseEnabled)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false,_			handleLargeRecords, objectReuseEnabled)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,group,combine,function,e,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,boolean,handle,large,records,boolean,object,reuse,enabled,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,handle,large,records,object,reuse,enabled,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int numSortBuffers, int maxNumFileHandles, 			float startSpillingFraction, boolean handleLargeRecords, boolean objectReuseEnabled) 	throws IOException, MemoryAllocationException;1494245028;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param numSortBuffers The number of distinct buffers to use creation of the initial runs._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int numSortBuffers, int maxNumFileHandles,_			float startSpillingFraction, boolean handleLargeRecords, boolean objectReuseEnabled)_	throws IOException, MemoryAllocationException_	{_		super(memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, numSortBuffers, maxNumFileHandles, startSpillingFraction, false,_			handleLargeRecords, objectReuseEnabled)__		_		this.combineStub = combineStub__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,num,sort,buffers,the,number,of,distinct,buffers,to,use,creation,of,the,initial,runs,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,group,combine,function,e,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,num,sort,buffers,int,max,num,file,handles,float,start,spilling,fraction,boolean,handle,large,records,boolean,object,reuse,enabled,throws,ioexception,memory,allocation,exception,super,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,num,sort,buffers,max,num,file,handles,start,spilling,fraction,false,handle,large,records,object,reuse,enabled,this,combine,stub,combine,stub
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1427300031;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,group,combine,function,e,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
CombiningUnilateralSortMerger -> public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager, 			MutableObjectIterator<E> input, AbstractInvokable parentTask,  			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator, 			double memoryFraction, int maxNumFileHandles, float startSpillingFraction) 	throws IOException, MemoryAllocationException;1441738685;Creates a new sorter that reads the data from a given reader and provides an iterator returning that_data in a sorted manner. The memory is divided among sort buffers, write buffers and read buffers_automatically.__@param combineStub The stub used to combine values with the same key._@param memoryManager The memory manager from which to allocate the memory._@param ioManager The I/O manager, which is used to write temporary files to disk._@param input The input that is sorted by this sorter._@param parentTask The parent task, which owns all resources used by this sorter._@param serializerFactory The type serializer._@param comparator The type comparator establishing the order relation._@param memoryFraction The fraction of memory dedicated to sorting, merging and I/O._@param maxNumFileHandles The maximum number of files to be merged at once._@param startSpillingFraction The faction of the buffers that have to be filled before the spilling thread_actually begins spilling data to disk.__@throws IOException Thrown, if an error occurs initializing the resources for external sorting._@throws MemoryAllocationException Thrown, if not enough memory can be obtained from the memory manager to_perform the sort.;public CombiningUnilateralSortMerger(GroupCombineFunction<E, E> combineStub, MemoryManager memoryManager, IOManager ioManager,_			MutableObjectIterator<E> input, AbstractInvokable parentTask, _			TypeSerializerFactory<E> serializerFactory, TypeComparator<E> comparator,_			double memoryFraction, int maxNumFileHandles, float startSpillingFraction)_	throws IOException, MemoryAllocationException_	{_		this(combineStub, memoryManager, ioManager, input, parentTask, serializerFactory, comparator,_			memoryFraction, -1, maxNumFileHandles, startSpillingFraction)__	};creates,a,new,sorter,that,reads,the,data,from,a,given,reader,and,provides,an,iterator,returning,that,data,in,a,sorted,manner,the,memory,is,divided,among,sort,buffers,write,buffers,and,read,buffers,automatically,param,combine,stub,the,stub,used,to,combine,values,with,the,same,key,param,memory,manager,the,memory,manager,from,which,to,allocate,the,memory,param,io,manager,the,i,o,manager,which,is,used,to,write,temporary,files,to,disk,param,input,the,input,that,is,sorted,by,this,sorter,param,parent,task,the,parent,task,which,owns,all,resources,used,by,this,sorter,param,serializer,factory,the,type,serializer,param,comparator,the,type,comparator,establishing,the,order,relation,param,memory,fraction,the,fraction,of,memory,dedicated,to,sorting,merging,and,i,o,param,max,num,file,handles,the,maximum,number,of,files,to,be,merged,at,once,param,start,spilling,fraction,the,faction,of,the,buffers,that,have,to,be,filled,before,the,spilling,thread,actually,begins,spilling,data,to,disk,throws,ioexception,thrown,if,an,error,occurs,initializing,the,resources,for,external,sorting,throws,memory,allocation,exception,thrown,if,not,enough,memory,can,be,obtained,from,the,memory,manager,to,perform,the,sort;public,combining,unilateral,sort,merger,group,combine,function,e,e,combine,stub,memory,manager,memory,manager,iomanager,io,manager,mutable,object,iterator,e,input,abstract,invokable,parent,task,type,serializer,factory,e,serializer,factory,type,comparator,e,comparator,double,memory,fraction,int,max,num,file,handles,float,start,spilling,fraction,throws,ioexception,memory,allocation,exception,this,combine,stub,memory,manager,io,manager,input,parent,task,serializer,factory,comparator,memory,fraction,1,max,num,file,handles,start,spilling,fraction
