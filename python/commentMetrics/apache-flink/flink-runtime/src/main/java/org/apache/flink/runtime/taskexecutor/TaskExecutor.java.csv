# id;timestamp;commentText;codeText;commentWords;codeWords
TaskExecutor -> public static void selectNetworkInterfaceAndRunTaskManager( 		Configuration configuration, 		ResourceID resourceID) throws Exception;1482522858;Starts and runs the TaskManager._<p/>_This method first tries to select the network interface to use for the TaskManager_communication. The network interface is used both for the actor communication_(coordination) as well as for the data exchange between task managers. Unless_the hostname/interface is explicitly configured in the configuration, this_method will try out various interfaces and methods to connect to the JobManager_and select the one where the connection attempt is successful._<p/>_After selecting the network interface, this method brings up an actor system_for the TaskManager and its actors, starts the TaskManager's services_(library cache, shuffle network stack, ...), and starts the TaskManager itself.__@param configuration    The configuration for the TaskManager._@param resourceID       The id of the resource which the task manager will run on.;public static void selectNetworkInterfaceAndRunTaskManager(_		Configuration configuration,_		ResourceID resourceID) throws Exception {__		final InetSocketAddress taskManagerAddress = selectNetworkInterfaceAndPort(configuration)___		runTaskManager(taskManagerAddress.getHostName(), resourceID, taskManagerAddress.getPort(), configuration)__	};starts,and,runs,the,task,manager,p,this,method,first,tries,to,select,the,network,interface,to,use,for,the,task,manager,communication,the,network,interface,is,used,both,for,the,actor,communication,coordination,as,well,as,for,the,data,exchange,between,task,managers,unless,the,hostname,interface,is,explicitly,configured,in,the,configuration,this,method,will,try,out,various,interfaces,and,methods,to,connect,to,the,job,manager,and,select,the,one,where,the,connection,attempt,is,successful,p,after,selecting,the,network,interface,this,method,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on;public,static,void,select,network,interface,and,run,task,manager,configuration,configuration,resource,id,resource,id,throws,exception,final,inet,socket,address,task,manager,address,select,network,interface,and,port,configuration,run,task,manager,task,manager,address,get,host,name,resource,id,task,manager,address,get,port,configuration
TaskExecutor -> public static void selectNetworkInterfaceAndRunTaskManager( 		Configuration configuration, 		ResourceID resourceID) throws Exception;1482522858;Starts and runs the TaskManager._<p/>_This method first tries to select the network interface to use for the TaskManager_communication. The network interface is used both for the actor communication_(coordination) as well as for the data exchange between task managers. Unless_the hostname/interface is explicitly configured in the configuration, this_method will try out various interfaces and methods to connect to the JobManager_and select the one where the connection attempt is successful._<p/>_After selecting the network interface, this method brings up an actor system_for the TaskManager and its actors, starts the TaskManager's services_(library cache, shuffle network stack, ...), and starts the TaskManager itself.__@param configuration    The configuration for the TaskManager._@param resourceID       The id of the resource which the task manager will run on.;public static void selectNetworkInterfaceAndRunTaskManager(_		Configuration configuration,_		ResourceID resourceID) throws Exception {__		final InetSocketAddress taskManagerAddress = selectNetworkInterfaceAndPort(configuration)___		runTaskManager(taskManagerAddress.getHostName(), resourceID, taskManagerAddress.getPort(), configuration)__	};starts,and,runs,the,task,manager,p,this,method,first,tries,to,select,the,network,interface,to,use,for,the,task,manager,communication,the,network,interface,is,used,both,for,the,actor,communication,coordination,as,well,as,for,the,data,exchange,between,task,managers,unless,the,hostname,interface,is,explicitly,configured,in,the,configuration,this,method,will,try,out,various,interfaces,and,methods,to,connect,to,the,job,manager,and,select,the,one,where,the,connection,attempt,is,successful,p,after,selecting,the,network,interface,this,method,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on;public,static,void,select,network,interface,and,run,task,manager,configuration,configuration,resource,id,resource,id,throws,exception,final,inet,socket,address,task,manager,address,select,network,interface,and,port,configuration,run,task,manager,task,manager,address,get,host,name,resource,id,task,manager,address,get,port,configuration
TaskExecutor -> public static void selectNetworkInterfaceAndRunTaskManager( 		Configuration configuration, 		ResourceID resourceID) throws Exception;1482522858;Starts and runs the TaskManager._<p/>_This method first tries to select the network interface to use for the TaskManager_communication. The network interface is used both for the actor communication_(coordination) as well as for the data exchange between task managers. Unless_the hostname/interface is explicitly configured in the configuration, this_method will try out various interfaces and methods to connect to the JobManager_and select the one where the connection attempt is successful._<p/>_After selecting the network interface, this method brings up an actor system_for the TaskManager and its actors, starts the TaskManager's services_(library cache, shuffle network stack, ...), and starts the TaskManager itself.__@param configuration    The configuration for the TaskManager._@param resourceID       The id of the resource which the task manager will run on.;public static void selectNetworkInterfaceAndRunTaskManager(_		Configuration configuration,_		ResourceID resourceID) throws Exception {__		final InetSocketAddress taskManagerAddress = selectNetworkInterfaceAndPort(configuration)___		runTaskManager(taskManagerAddress.getHostName(), resourceID, taskManagerAddress.getPort(), configuration)__	};starts,and,runs,the,task,manager,p,this,method,first,tries,to,select,the,network,interface,to,use,for,the,task,manager,communication,the,network,interface,is,used,both,for,the,actor,communication,coordination,as,well,as,for,the,data,exchange,between,task,managers,unless,the,hostname,interface,is,explicitly,configured,in,the,configuration,this,method,will,try,out,various,interfaces,and,methods,to,connect,to,the,job,manager,and,select,the,one,where,the,connection,attempt,is,successful,p,after,selecting,the,network,interface,this,method,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on;public,static,void,select,network,interface,and,run,task,manager,configuration,configuration,resource,id,resource,id,throws,exception,final,inet,socket,address,task,manager,address,select,network,interface,and,port,configuration,run,task,manager,task,manager,address,get,host,name,resource,id,task,manager,address,get,port,configuration
TaskExecutor -> public static void selectNetworkInterfaceAndRunTaskManager( 		Configuration configuration, 		ResourceID resourceID) throws Exception;1482522859;Starts and runs the TaskManager._<p/>_This method first tries to select the network interface to use for the TaskManager_communication. The network interface is used both for the actor communication_(coordination) as well as for the data exchange between task managers. Unless_the hostname/interface is explicitly configured in the configuration, this_method will try out various interfaces and methods to connect to the JobManager_and select the one where the connection attempt is successful._<p/>_After selecting the network interface, this method brings up an actor system_for the TaskManager and its actors, starts the TaskManager's services_(library cache, shuffle network stack, ...), and starts the TaskManager itself.__@param configuration    The configuration for the TaskManager._@param resourceID       The id of the resource which the task manager will run on.;public static void selectNetworkInterfaceAndRunTaskManager(_		Configuration configuration,_		ResourceID resourceID) throws Exception {__		final InetSocketAddress taskManagerAddress = selectNetworkInterfaceAndPort(configuration)___		runTaskManager(taskManagerAddress.getHostName(), resourceID, taskManagerAddress.getPort(), configuration)__	};starts,and,runs,the,task,manager,p,this,method,first,tries,to,select,the,network,interface,to,use,for,the,task,manager,communication,the,network,interface,is,used,both,for,the,actor,communication,coordination,as,well,as,for,the,data,exchange,between,task,managers,unless,the,hostname,interface,is,explicitly,configured,in,the,configuration,this,method,will,try,out,various,interfaces,and,methods,to,connect,to,the,job,manager,and,select,the,one,where,the,connection,attempt,is,successful,p,after,selecting,the,network,interface,this,method,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on;public,static,void,select,network,interface,and,run,task,manager,configuration,configuration,resource,id,resource,id,throws,exception,final,inet,socket,address,task,manager,address,select,network,interface,and,port,configuration,run,task,manager,task,manager,address,get,host,name,resource,id,task,manager,address,get,port,configuration
TaskExecutor -> public static void selectNetworkInterfaceAndRunTaskManager( 		Configuration configuration, 		ResourceID resourceID) throws Exception;1482522859;Starts and runs the TaskManager._<p/>_This method first tries to select the network interface to use for the TaskManager_communication. The network interface is used both for the actor communication_(coordination) as well as for the data exchange between task managers. Unless_the hostname/interface is explicitly configured in the configuration, this_method will try out various interfaces and methods to connect to the JobManager_and select the one where the connection attempt is successful._<p/>_After selecting the network interface, this method brings up an actor system_for the TaskManager and its actors, starts the TaskManager's services_(library cache, shuffle network stack, ...), and starts the TaskManager itself.__@param configuration    The configuration for the TaskManager._@param resourceID       The id of the resource which the task manager will run on.;public static void selectNetworkInterfaceAndRunTaskManager(_		Configuration configuration,_		ResourceID resourceID) throws Exception {__		final InetSocketAddress taskManagerAddress = selectNetworkInterfaceAndPort(configuration)___		runTaskManager(taskManagerAddress.getHostName(), resourceID, taskManagerAddress.getPort(), configuration)__	};starts,and,runs,the,task,manager,p,this,method,first,tries,to,select,the,network,interface,to,use,for,the,task,manager,communication,the,network,interface,is,used,both,for,the,actor,communication,coordination,as,well,as,for,the,data,exchange,between,task,managers,unless,the,hostname,interface,is,explicitly,configured,in,the,configuration,this,method,will,try,out,various,interfaces,and,methods,to,connect,to,the,job,manager,and,select,the,one,where,the,connection,attempt,is,successful,p,after,selecting,the,network,interface,this,method,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on;public,static,void,select,network,interface,and,run,task,manager,configuration,configuration,resource,id,resource,id,throws,exception,final,inet,socket,address,task,manager,address,select,network,interface,and,port,configuration,run,task,manager,task,manager,address,get,host,name,resource,id,task,manager,address,get,port,configuration
TaskExecutor -> public static void selectNetworkInterfaceAndRunTaskManager( 		Configuration configuration, 		ResourceID resourceID) throws Exception;1482522859;Starts and runs the TaskManager._<p/>_This method first tries to select the network interface to use for the TaskManager_communication. The network interface is used both for the actor communication_(coordination) as well as for the data exchange between task managers. Unless_the hostname/interface is explicitly configured in the configuration, this_method will try out various interfaces and methods to connect to the JobManager_and select the one where the connection attempt is successful._<p/>_After selecting the network interface, this method brings up an actor system_for the TaskManager and its actors, starts the TaskManager's services_(library cache, shuffle network stack, ...), and starts the TaskManager itself.__@param configuration    The configuration for the TaskManager._@param resourceID       The id of the resource which the task manager will run on.;public static void selectNetworkInterfaceAndRunTaskManager(_		Configuration configuration,_		ResourceID resourceID) throws Exception {__		final InetSocketAddress taskManagerAddress = selectNetworkInterfaceAndPort(configuration)___		runTaskManager(taskManagerAddress.getHostName(), resourceID, taskManagerAddress.getPort(), configuration)__	};starts,and,runs,the,task,manager,p,this,method,first,tries,to,select,the,network,interface,to,use,for,the,task,manager,communication,the,network,interface,is,used,both,for,the,actor,communication,coordination,as,well,as,for,the,data,exchange,between,task,managers,unless,the,hostname,interface,is,explicitly,configured,in,the,configuration,this,method,will,try,out,various,interfaces,and,methods,to,connect,to,the,job,manager,and,select,the,one,where,the,connection,attempt,is,successful,p,after,selecting,the,network,interface,this,method,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on;public,static,void,select,network,interface,and,run,task,manager,configuration,configuration,resource,id,resource,id,throws,exception,final,inet,socket,address,task,manager,address,select,network,interface,and,port,configuration,run,task,manager,task,manager,address,get,host,name,resource,id,task,manager,address,get,port,configuration
TaskExecutor -> public static void selectNetworkInterfaceAndRunTaskManager( 		Configuration configuration, 		ResourceID resourceID) throws Exception;1482522860;Starts and runs the TaskManager._<p/>_This method first tries to select the network interface to use for the TaskManager_communication. The network interface is used both for the actor communication_(coordination) as well as for the data exchange between task managers. Unless_the hostname/interface is explicitly configured in the configuration, this_method will try out various interfaces and methods to connect to the JobManager_and select the one where the connection attempt is successful._<p/>_After selecting the network interface, this method brings up an actor system_for the TaskManager and its actors, starts the TaskManager's services_(library cache, shuffle network stack, ...), and starts the TaskManager itself.__@param configuration    The configuration for the TaskManager._@param resourceID       The id of the resource which the task manager will run on.;public static void selectNetworkInterfaceAndRunTaskManager(_		Configuration configuration,_		ResourceID resourceID) throws Exception {__		final InetSocketAddress taskManagerAddress = selectNetworkInterfaceAndPort(configuration)___		runTaskManager(taskManagerAddress.getHostName(), resourceID, taskManagerAddress.getPort(), configuration)__	};starts,and,runs,the,task,manager,p,this,method,first,tries,to,select,the,network,interface,to,use,for,the,task,manager,communication,the,network,interface,is,used,both,for,the,actor,communication,coordination,as,well,as,for,the,data,exchange,between,task,managers,unless,the,hostname,interface,is,explicitly,configured,in,the,configuration,this,method,will,try,out,various,interfaces,and,methods,to,connect,to,the,job,manager,and,select,the,one,where,the,connection,attempt,is,successful,p,after,selecting,the,network,interface,this,method,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on;public,static,void,select,network,interface,and,run,task,manager,configuration,configuration,resource,id,resource,id,throws,exception,final,inet,socket,address,task,manager,address,select,network,interface,and,port,configuration,run,task,manager,task,manager,address,get,host,name,resource,id,task,manager,address,get,port,configuration
TaskExecutor -> public static void selectNetworkInterfaceAndRunTaskManager( 		Configuration configuration, 		ResourceID resourceID) throws Exception;1482522860;Starts and runs the TaskManager._<p/>_This method first tries to select the network interface to use for the TaskManager_communication. The network interface is used both for the actor communication_(coordination) as well as for the data exchange between task managers. Unless_the hostname/interface is explicitly configured in the configuration, this_method will try out various interfaces and methods to connect to the JobManager_and select the one where the connection attempt is successful._<p/>_After selecting the network interface, this method brings up an actor system_for the TaskManager and its actors, starts the TaskManager's services_(library cache, shuffle network stack, ...), and starts the TaskManager itself.__@param configuration    The configuration for the TaskManager._@param resourceID       The id of the resource which the task manager will run on.;public static void selectNetworkInterfaceAndRunTaskManager(_		Configuration configuration,_		ResourceID resourceID) throws Exception {__		final InetSocketAddress taskManagerAddress = selectNetworkInterfaceAndPort(configuration)___		runTaskManager(taskManagerAddress.getHostName(), resourceID, taskManagerAddress.getPort(), configuration)__	};starts,and,runs,the,task,manager,p,this,method,first,tries,to,select,the,network,interface,to,use,for,the,task,manager,communication,the,network,interface,is,used,both,for,the,actor,communication,coordination,as,well,as,for,the,data,exchange,between,task,managers,unless,the,hostname,interface,is,explicitly,configured,in,the,configuration,this,method,will,try,out,various,interfaces,and,methods,to,connect,to,the,job,manager,and,select,the,one,where,the,connection,attempt,is,successful,p,after,selecting,the,network,interface,this,method,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on;public,static,void,select,network,interface,and,run,task,manager,configuration,configuration,resource,id,resource,id,throws,exception,final,inet,socket,address,task,manager,address,select,network,interface,and,port,configuration,run,task,manager,task,manager,address,get,host,name,resource,id,task,manager,address,get,port,configuration
TaskExecutor -> @Override 	public void postStop() throws Exception;1501485811;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1501620216;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1501622036;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1501760738;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1502452184;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1503041372;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1504477043;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1504507095;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1504525441;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1504608225;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1505998908;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1507212387;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1507212387;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1508861310;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1508939746;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1509547920;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1509547921;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1510063662;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1515588319;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1515600854;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1516626377;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1516626397;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1516643356;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1517317681;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1517333417;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1517333417;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1517914184;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1517915730;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1517920461;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1517920615;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void postStop() throws Exception;1518433169;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void postStop() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			taskExecutorServices.shutDown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		try {_			super.postStop()__		} catch (Throwable e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,post,stop,throws,exception,log,info,stopping,task,manager,get,address,throwable,throwable,null,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,task,executor,services,shut,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,try,super,post,stop,catch,throwable,e,throwable,exception,utils,first,or,suppressed,e,throwable,if,throwable,null,exception,utils,rethrow,exception,throwable,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522858;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522858;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522858;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522859;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522859;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522859;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522860;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522860;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522860;public LeaderRetrievalService getJobMasterLeaderRetriever(JobID jobID) throws Exception {_return null____@Override_return null____@Override_public CheckpointRecoveryFactory getCheckpointRecoveryFactory() throws Exception {_return null____@Override_public SubmittedJobGraphStore getSubmittedJobGraphStore() throws Exception {_// ------------------------------------------------------------------------_//  Properties_// ------------------------------------------------------------------------__public ResourceID getResourceID() {_return taskManagerLocation.getResourceID()____// ------------------------------------------------------------------------_//  Error Handling_// ------------------------------------------------------------------------__/**_Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};public,leader,retrieval,service,get,job,master,leader,retriever,job,id,job,id,throws,exception,return,null,override,return,null,override,public,checkpoint,recovery,factory,get,checkpoint,recovery,factory,throws,exception,return,null,override,public,submitted,job,graph,store,get,submitted,job,graph,store,throws,exception,properties,public,resource,id,get,resource,id,return,task,manager,location,get,resource,id,error,handling,notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522860;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522861;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522862;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522862;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522862;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522862;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522862;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522863;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522863;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522863;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522864;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522864;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522865;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1482522865;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1487441974;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1487769938;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1487871589;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1489657719;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1489766404;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1489766405;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1490090124;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1490273924;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1490273924;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1490347056;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1493146240;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1493386068;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1493975155;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1495001929;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1499250208;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1501437265;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1501485811;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1501620216;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1501622036;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1501760738;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1502452184;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> void onFatalErrorAsync(final Throwable t);1503041372;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_TaskExecutor of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,task,executor,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
TaskExecutor -> @Override 	public void shutDown();1482522862;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() {_		log.info("Stopping TaskManager {}.", getAddress())___		if (resourceManagerConnection.isConnected()) {_			try {_				resourceManagerConnection.close()__			} catch (Exception e) {_				log.error("Could not cleanly close the ResourceManager connection.", e)__			}_		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			log.error("IOManager did not shut down properly.", e)__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			log.error("MemoryManager did not shut down properly.", e)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			log.error("Network environment did not shut down properly.", e)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			log.error("File cache did not shut down properly.", e)__		}__		try {_			metricRegistry.shutdown()__		} catch (Exception e) {_			log.error("MetricRegistry did not shut down properly.", e)__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,log,info,stopping,task,manager,get,address,if,resource,manager,connection,is,connected,try,resource,manager,connection,close,catch,exception,e,log,error,could,not,cleanly,close,the,resource,manager,connection,e,try,io,manager,shutdown,catch,exception,e,log,error,iomanager,did,not,shut,down,properly,e,try,memory,manager,shutdown,catch,exception,e,log,error,memory,manager,did,not,shut,down,properly,e,try,network,environment,shutdown,catch,exception,e,log,error,network,environment,did,not,shut,down,properly,e,try,file,cache,shutdown,catch,exception,e,log,error,file,cache,did,not,shut,down,properly,e,try,metric,registry,shutdown,catch,exception,e,log,error,metric,registry,did,not,shut,down,properly,e,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown();1482522862;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() {_		log.info("Stopping TaskManager {}.", getAddress())___		if (resourceManagerConnection.isConnected()) {_			try {_				resourceManagerConnection.close()__			} catch (Exception e) {_				log.error("Could not cleanly close the ResourceManager connection.", e)__			}_		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			log.error("IOManager did not shut down properly.", e)__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			log.error("MemoryManager did not shut down properly.", e)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			log.error("Network environment did not shut down properly.", e)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			log.error("File cache did not shut down properly.", e)__		}__		try {_			metricRegistry.shutdown()__		} catch (Exception e) {_			log.error("MetricRegistry did not shut down properly.", e)__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,log,info,stopping,task,manager,get,address,if,resource,manager,connection,is,connected,try,resource,manager,connection,close,catch,exception,e,log,error,could,not,cleanly,close,the,resource,manager,connection,e,try,io,manager,shutdown,catch,exception,e,log,error,iomanager,did,not,shut,down,properly,e,try,memory,manager,shutdown,catch,exception,e,log,error,memory,manager,did,not,shut,down,properly,e,try,network,environment,shutdown,catch,exception,e,log,error,network,environment,did,not,shut,down,properly,e,try,file,cache,shutdown,catch,exception,e,log,error,file,cache,did,not,shut,down,properly,e,try,metric,registry,shutdown,catch,exception,e,log,error,metric,registry,did,not,shut,down,properly,e,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown();1482522862;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() {_		log.info("Stopping TaskManager {}.", getAddress())___		if (resourceManagerConnection.isConnected()) {_			try {_				resourceManagerConnection.close()__			} catch (Exception e) {_				log.error("Could not cleanly close the ResourceManager connection.", e)__			}_		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			log.error("IOManager did not shut down properly.", e)__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			log.error("MemoryManager did not shut down properly.", e)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			log.error("Network environment did not shut down properly.", e)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			log.error("File cache did not shut down properly.", e)__		}__		try {_			metricRegistry.shutdown()__		} catch (Exception e) {_			log.error("MetricRegistry did not shut down properly.", e)__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,log,info,stopping,task,manager,get,address,if,resource,manager,connection,is,connected,try,resource,manager,connection,close,catch,exception,e,log,error,could,not,cleanly,close,the,resource,manager,connection,e,try,io,manager,shutdown,catch,exception,e,log,error,iomanager,did,not,shut,down,properly,e,try,memory,manager,shutdown,catch,exception,e,log,error,memory,manager,did,not,shut,down,properly,e,try,network,environment,shutdown,catch,exception,e,log,error,network,environment,did,not,shut,down,properly,e,try,file,cache,shutdown,catch,exception,e,log,error,file,cache,did,not,shut,down,properly,e,try,metric,registry,shutdown,catch,exception,e,log,error,metric,registry,did,not,shut,down,properly,e,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown();1482522862;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() {_		log.info("Stopping TaskManager {}.", getAddress())___		if (resourceManagerConnection.isConnected()) {_			try {_				resourceManagerConnection.close()__			} catch (Exception e) {_				log.error("Could not cleanly close the ResourceManager connection.", e)__			}_		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			log.error("IOManager did not shut down properly.", e)__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			log.error("MemoryManager did not shut down properly.", e)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			log.error("Network environment did not shut down properly.", e)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			log.error("File cache did not shut down properly.", e)__		}__		try {_			metricRegistry.shutdown()__		} catch (Exception e) {_			log.error("MetricRegistry did not shut down properly.", e)__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,log,info,stopping,task,manager,get,address,if,resource,manager,connection,is,connected,try,resource,manager,connection,close,catch,exception,e,log,error,could,not,cleanly,close,the,resource,manager,connection,e,try,io,manager,shutdown,catch,exception,e,log,error,iomanager,did,not,shut,down,properly,e,try,memory,manager,shutdown,catch,exception,e,log,error,memory,manager,did,not,shut,down,properly,e,try,network,environment,shutdown,catch,exception,e,log,error,network,environment,did,not,shut,down,properly,e,try,file,cache,shutdown,catch,exception,e,log,error,file,cache,did,not,shut,down,properly,e,try,metric,registry,shutdown,catch,exception,e,log,error,metric,registry,did,not,shut,down,properly,e,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown();1482522862;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() {_		log.info("Stopping TaskManager {}.", getAddress())___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			try {_				resourceManagerConnection.close()__			} catch (Exception e) {_				log.error("Could not cleanly close the ResourceManager connection.", e)__			}_		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			log.error("IOManager did not shut down properly.", e)__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			log.error("MemoryManager did not shut down properly.", e)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			log.error("Network environment did not shut down properly.", e)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			log.error("File cache did not shut down properly.", e)__		}__		try {_			metricRegistry.shutdown()__		} catch (Exception e) {_			log.error("MetricRegistry did not shut down properly.", e)__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,log,info,stopping,task,manager,get,address,task,slot,table,stop,if,is,connected,to,resource,manager,try,resource,manager,connection,close,catch,exception,e,log,error,could,not,cleanly,close,the,resource,manager,connection,e,try,io,manager,shutdown,catch,exception,e,log,error,iomanager,did,not,shut,down,properly,e,try,memory,manager,shutdown,catch,exception,e,log,error,memory,manager,did,not,shut,down,properly,e,try,network,environment,shutdown,catch,exception,e,log,error,network,environment,did,not,shut,down,properly,e,try,file,cache,shutdown,catch,exception,e,log,error,file,cache,did,not,shut,down,properly,e,try,metric,registry,shutdown,catch,exception,e,log,error,metric,registry,did,not,shut,down,properly,e,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown();1482522863;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() {_		log.info("Stopping TaskManager {}.", getAddress())___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			try {_				resourceManagerConnection.close()__			} catch (Exception e) {_				log.error("Could not cleanly close the ResourceManager connection.", e)__			}_		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			log.error("IOManager did not shut down properly.", e)__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			log.error("MemoryManager did not shut down properly.", e)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			log.error("Network environment did not shut down properly.", e)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			log.error("File cache did not shut down properly.", e)__		}__		try {_			metricRegistry.shutdown()__		} catch (Exception e) {_			log.error("MetricRegistry did not shut down properly.", e)__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,log,info,stopping,task,manager,get,address,task,slot,table,stop,if,is,connected,to,resource,manager,try,resource,manager,connection,close,catch,exception,e,log,error,could,not,cleanly,close,the,resource,manager,connection,e,try,io,manager,shutdown,catch,exception,e,log,error,iomanager,did,not,shut,down,properly,e,try,memory,manager,shutdown,catch,exception,e,log,error,memory,manager,did,not,shut,down,properly,e,try,network,environment,shutdown,catch,exception,e,log,error,network,environment,did,not,shut,down,properly,e,try,file,cache,shutdown,catch,exception,e,log,error,file,cache,did,not,shut,down,properly,e,try,metric,registry,shutdown,catch,exception,e,log,error,metric,registry,did,not,shut,down,properly,e,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown();1482522863;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() {_		log.info("Stopping TaskManager {}.", getAddress())___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			try {_				resourceManagerConnection.close()__			} catch (Exception e) {_				log.error("Could not cleanly close the ResourceManager connection.", e)__			}_		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			log.error("IOManager did not shut down properly.", e)__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			log.error("MemoryManager did not shut down properly.", e)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			log.error("Network environment did not shut down properly.", e)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			log.error("File cache did not shut down properly.", e)__		}__		try {_			metricRegistry.shutdown()__		} catch (Exception e) {_			log.error("MetricRegistry did not shut down properly.", e)__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,log,info,stopping,task,manager,get,address,task,slot,table,stop,if,is,connected,to,resource,manager,try,resource,manager,connection,close,catch,exception,e,log,error,could,not,cleanly,close,the,resource,manager,connection,e,try,io,manager,shutdown,catch,exception,e,log,error,iomanager,did,not,shut,down,properly,e,try,memory,manager,shutdown,catch,exception,e,log,error,memory,manager,did,not,shut,down,properly,e,try,network,environment,shutdown,catch,exception,e,log,error,network,environment,did,not,shut,down,properly,e,try,file,cache,shutdown,catch,exception,e,log,error,file,cache,did,not,shut,down,properly,e,try,metric,registry,shutdown,catch,exception,e,log,error,metric,registry,did,not,shut,down,properly,e,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown();1482522863;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() {_		log.info("Stopping TaskManager {}.", getAddress())___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			try {_				resourceManagerConnection.close()__			} catch (Exception e) {_				log.error("Could not cleanly close the ResourceManager connection.", e)__			}_		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			log.error("IOManager did not shut down properly.", e)__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			log.error("MemoryManager did not shut down properly.", e)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			log.error("Network environment did not shut down properly.", e)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			log.error("File cache did not shut down properly.", e)__		}__		try {_			metricRegistry.shutdown()__		} catch (Exception e) {_			log.error("MetricRegistry did not shut down properly.", e)__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,log,info,stopping,task,manager,get,address,task,slot,table,stop,if,is,connected,to,resource,manager,try,resource,manager,connection,close,catch,exception,e,log,error,could,not,cleanly,close,the,resource,manager,connection,e,try,io,manager,shutdown,catch,exception,e,log,error,iomanager,did,not,shut,down,properly,e,try,memory,manager,shutdown,catch,exception,e,log,error,memory,manager,did,not,shut,down,properly,e,try,network,environment,shutdown,catch,exception,e,log,error,network,environment,did,not,shut,down,properly,e,try,file,cache,shutdown,catch,exception,e,log,error,file,cache,did,not,shut,down,properly,e,try,metric,registry,shutdown,catch,exception,e,log,error,metric,registry,did,not,shut,down,properly,e,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown();1482522864;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() {_		log.info("Stopping TaskManager {}.", getAddress())___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			try {_				resourceManagerConnection.close()__			} catch (Exception e) {_				log.error("Could not cleanly close the ResourceManager connection.", e)__			}_		}__		try {_			ioManager.shutdown()__		} catch (Exception e) {_			log.error("IOManager did not shut down properly.", e)__		}__		try {_			memoryManager.shutdown()__		} catch (Exception e) {_			log.error("MemoryManager did not shut down properly.", e)__		}__		try {_			networkEnvironment.shutdown()__		} catch (Exception e) {_			log.error("Network environment did not shut down properly.", e)__		}__		try {_			fileCache.shutdown()__		} catch (Exception e) {_			log.error("File cache did not shut down properly.", e)__		}__		try {_			metricRegistry.shutdown()__		} catch (Exception e) {_			log.error("MetricRegistry did not shut down properly.", e)__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,log,info,stopping,task,manager,get,address,task,slot,table,stop,if,is,connected,to,resource,manager,try,resource,manager,connection,close,catch,exception,e,log,error,could,not,cleanly,close,the,resource,manager,connection,e,try,io,manager,shutdown,catch,exception,e,log,error,iomanager,did,not,shut,down,properly,e,try,memory,manager,shutdown,catch,exception,e,log,error,memory,manager,did,not,shut,down,properly,e,try,network,environment,shutdown,catch,exception,e,log,error,network,environment,did,not,shut,down,properly,e,try,file,cache,shutdown,catch,exception,e,log,error,file,cache,did,not,shut,down,properly,e,try,metric,registry,shutdown,catch,exception,e,log,error,metric,registry,did,not,shut,down,properly,e,log,info,stopped,task,manager,get,address
TaskExecutor -> private static TaskExecutorConfiguration parseTaskManagerConfiguration( 		Configuration configuration, 		String taskManagerHostname, 		boolean localTaskManagerCommunication) throws Exception;1482522858;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration                 The configuration._@param taskManagerHostname           The host name under which the TaskManager communicates._@param localTaskManagerCommunication             True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;private static TaskExecutorConfiguration parseTaskManagerConfiguration(_		Configuration configuration,_		String taskManagerHostname,_		boolean localTaskManagerCommunication) throws Exception {__		_		__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)__		if (dataport == 0) {_			dataport = NetUtils.getAvailablePort()__		}_		checkConfigParameter(dataport > 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		InetAddress taskManagerAddress = InetAddress.getByName(taskManagerHostname)__		final InstanceConnectionInfo connectionInfo = new InstanceConnectionInfo(taskManagerAddress, dataport)___		__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}_		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)__		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)__		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)__		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			nettyConfig = new NettyConfig(connectionInfo.address(), connectionInfo.dataPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		final int queryServerPort =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_PORT,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_PORT)___		final int queryServerNetworkThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_NETWORK_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_NETWORK_THREADS)___		final int queryServerQueryThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_QUERY_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_QUERY_THREADS)___		final NetworkEnvironmentConfiguration networkConfig = new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			queryServerPort,_			queryServerNetworkThreads,_			queryServerQueryThreads,_			localTaskManagerCommunication ? Option.<NettyConfig>empty() : new Some<>(nettyConfig),_			new Tuple2<>(500, 3000))___		__		final FiniteDuration timeout__		try {_			timeout = AkkaUtils.getTimeout(configuration)__		} catch (Exception e) {_			throw new IllegalArgumentException(_				"Invalid format for '" + ConfigConstants.AKKA_ASK_TIMEOUT +_					"'.Use formats like '50 s' or '1 min' to specify the timeout.")__		}_		LOG.info("Messages between TaskManager and JobManager have a max timeout of " + timeout)___		final long cleanupInterval = configuration.getLong(_			ConfigConstants.LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL,_			ConfigConstants.DEFAULT_LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL) * 1000___		final FiniteDuration finiteRegistrationDuration__		try {_			Duration maxRegistrationDuration = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_DURATION))__			if (maxRegistrationDuration.isFinite()) {_				finiteRegistrationDuration = new FiniteDuration(maxRegistrationDuration.toSeconds(), TimeUnit.SECONDS)__			} else {_				finiteRegistrationDuration = null__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, e)__		}__		final FiniteDuration initialRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_INITIAL_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				initialRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The initial registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration maxRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTARTION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				maxRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The maximum registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration refusedRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_REFUSED_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_REFUSED_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				refusedRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The refused registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		return new TaskExecutorConfiguration(_			tmpDirs,_			cleanupInterval,_			connectionInfo,_			networkConfig,_			timeout,_			finiteRegistrationDuration,_			slots,_			configuration,_			initialRegistrationPause,_			maxRegistrationPause,_			refusedRegistrationPause)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,task,manager,hostname,the,host,name,under,which,the,task,manager,communicates,param,local,task,manager,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;private,static,task,executor,configuration,parse,task,manager,configuration,configuration,configuration,string,task,manager,hostname,boolean,local,task,manager,communication,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,if,dataport,0,dataport,net,utils,get,available,port,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,inet,address,task,manager,address,inet,address,get,by,name,task,manager,hostname,final,instance,connection,info,connection,info,new,instance,connection,info,task,manager,address,dataport,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,netty,config,netty,config,if,local,task,manager,communication,netty,config,new,netty,config,connection,info,address,connection,info,data,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,final,int,query,server,port,configuration,get,integer,config,constants,config,constants,final,int,query,server,network,threads,configuration,get,integer,config,constants,config,constants,final,int,query,server,query,threads,configuration,get,integer,config,constants,config,constants,final,network,environment,configuration,network,config,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,query,server,port,query,server,network,threads,query,server,query,threads,local,task,manager,communication,option,netty,config,empty,new,some,netty,config,new,tuple2,500,3000,final,finite,duration,timeout,try,timeout,akka,utils,get,timeout,configuration,catch,exception,e,throw,new,illegal,argument,exception,invalid,format,for,config,constants,use,formats,like,50,s,or,1,min,to,specify,the,timeout,log,info,messages,between,task,manager,and,job,manager,have,a,max,timeout,of,timeout,final,long,cleanup,interval,configuration,get,long,config,constants,config,constants,1000,final,finite,duration,finite,registration,duration,try,duration,max,registration,duration,duration,create,configuration,get,string,config,constants,config,constants,if,max,registration,duration,is,finite,finite,registration,duration,new,finite,duration,max,registration,duration,to,seconds,time,unit,seconds,else,finite,registration,duration,null,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,initial,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,initial,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,initial,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,max,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,max,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,maximum,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,refused,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,refused,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,refused,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,return,new,task,executor,configuration,tmp,dirs,cleanup,interval,connection,info,network,config,timeout,finite,registration,duration,slots,configuration,initial,registration,pause,max,registration,pause,refused,registration,pause
TaskExecutor -> private static TaskExecutorConfiguration parseTaskManagerConfiguration( 		Configuration configuration, 		String taskManagerHostname, 		boolean localTaskManagerCommunication) throws Exception;1482522858;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration                 The configuration._@param taskManagerHostname           The host name under which the TaskManager communicates._@param localTaskManagerCommunication             True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;private static TaskExecutorConfiguration parseTaskManagerConfiguration(_		Configuration configuration,_		String taskManagerHostname,_		boolean localTaskManagerCommunication) throws Exception {__		_		__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)__		if (dataport == 0) {_			dataport = NetUtils.getAvailablePort()__		}_		checkConfigParameter(dataport > 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		InetAddress taskManagerAddress = InetAddress.getByName(taskManagerHostname)__		final InstanceConnectionInfo connectionInfo = new InstanceConnectionInfo(taskManagerAddress, dataport)___		__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}_		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)__		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)__		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)__		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			nettyConfig = new NettyConfig(connectionInfo.address(), connectionInfo.dataPort(), pageSize, slots, configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		final int queryServerPort =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_PORT,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_PORT)___		final int queryServerNetworkThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_NETWORK_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_NETWORK_THREADS)___		final int queryServerQueryThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_QUERY_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_QUERY_THREADS)___		final NetworkEnvironmentConfiguration networkConfig = new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			queryServerPort,_			queryServerNetworkThreads,_			queryServerQueryThreads,_			localTaskManagerCommunication ? Option.<NettyConfig>empty() : new Some<>(nettyConfig),_			new Tuple2<>(500, 3000))___		__		final FiniteDuration timeout__		try {_			timeout = AkkaUtils.getTimeout(configuration)__		} catch (Exception e) {_			throw new IllegalArgumentException(_				"Invalid format for '" + ConfigConstants.AKKA_ASK_TIMEOUT +_					"'.Use formats like '50 s' or '1 min' to specify the timeout.")__		}_		LOG.info("Messages between TaskManager and JobManager have a max timeout of " + timeout)___		final long cleanupInterval = configuration.getLong(_			ConfigConstants.LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL,_			ConfigConstants.DEFAULT_LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL) * 1000___		final FiniteDuration finiteRegistrationDuration__		try {_			Duration maxRegistrationDuration = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_DURATION))__			if (maxRegistrationDuration.isFinite()) {_				finiteRegistrationDuration = new FiniteDuration(maxRegistrationDuration.toSeconds(), TimeUnit.SECONDS)__			} else {_				finiteRegistrationDuration = null__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, e)__		}__		final FiniteDuration initialRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_INITIAL_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				initialRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The initial registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration maxRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTARTION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				maxRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The maximum registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration refusedRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_REFUSED_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_REFUSED_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				refusedRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The refused registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		return new TaskExecutorConfiguration(_			tmpDirs,_			cleanupInterval,_			connectionInfo,_			networkConfig,_			timeout,_			finiteRegistrationDuration,_			slots,_			configuration,_			initialRegistrationPause,_			maxRegistrationPause,_			refusedRegistrationPause)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,task,manager,hostname,the,host,name,under,which,the,task,manager,communicates,param,local,task,manager,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;private,static,task,executor,configuration,parse,task,manager,configuration,configuration,configuration,string,task,manager,hostname,boolean,local,task,manager,communication,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,if,dataport,0,dataport,net,utils,get,available,port,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,inet,address,task,manager,address,inet,address,get,by,name,task,manager,hostname,final,instance,connection,info,connection,info,new,instance,connection,info,task,manager,address,dataport,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,netty,config,netty,config,if,local,task,manager,communication,netty,config,new,netty,config,connection,info,address,connection,info,data,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,final,int,query,server,port,configuration,get,integer,config,constants,config,constants,final,int,query,server,network,threads,configuration,get,integer,config,constants,config,constants,final,int,query,server,query,threads,configuration,get,integer,config,constants,config,constants,final,network,environment,configuration,network,config,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,query,server,port,query,server,network,threads,query,server,query,threads,local,task,manager,communication,option,netty,config,empty,new,some,netty,config,new,tuple2,500,3000,final,finite,duration,timeout,try,timeout,akka,utils,get,timeout,configuration,catch,exception,e,throw,new,illegal,argument,exception,invalid,format,for,config,constants,use,formats,like,50,s,or,1,min,to,specify,the,timeout,log,info,messages,between,task,manager,and,job,manager,have,a,max,timeout,of,timeout,final,long,cleanup,interval,configuration,get,long,config,constants,config,constants,1000,final,finite,duration,finite,registration,duration,try,duration,max,registration,duration,duration,create,configuration,get,string,config,constants,config,constants,if,max,registration,duration,is,finite,finite,registration,duration,new,finite,duration,max,registration,duration,to,seconds,time,unit,seconds,else,finite,registration,duration,null,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,initial,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,initial,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,initial,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,max,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,max,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,maximum,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,refused,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,refused,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,refused,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,return,new,task,executor,configuration,tmp,dirs,cleanup,interval,connection,info,network,config,timeout,finite,registration,duration,slots,configuration,initial,registration,pause,max,registration,pause,refused,registration,pause
TaskExecutor -> private static TaskExecutorConfiguration parseTaskManagerConfiguration( 		Configuration configuration, 		String taskManagerHostname, 		boolean localTaskManagerCommunication) throws Exception;1482522858;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration                 The configuration._@param taskManagerHostname           The host name under which the TaskManager communicates._@param localTaskManagerCommunication             True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;private static TaskExecutorConfiguration parseTaskManagerConfiguration(_		Configuration configuration,_		String taskManagerHostname,_		boolean localTaskManagerCommunication) throws Exception {__		_		__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)__		if (dataport == 0) {_			dataport = NetUtils.getAvailablePort()__		}_		checkConfigParameter(dataport > 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		InetAddress taskManagerAddress = InetAddress.getByName(taskManagerHostname)__		final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___		__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}_		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)__		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)__		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)__		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			nettyConfig = new NettyConfig(_				taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(),_				pageSize,_				slots,_				configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		final int queryServerPort =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_PORT,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_PORT)___		final int queryServerNetworkThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_NETWORK_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_NETWORK_THREADS)___		final int queryServerQueryThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_QUERY_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_QUERY_THREADS)___		final NetworkEnvironmentConfiguration networkConfig = new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			queryServerPort,_			queryServerNetworkThreads,_			queryServerQueryThreads,_			Option.apply(nettyConfig),_			500,_			30000)___		__		final FiniteDuration timeout__		try {_			timeout = AkkaUtils.getTimeout(configuration)__		} catch (Exception e) {_			throw new IllegalArgumentException(_				"Invalid format for '" + ConfigConstants.AKKA_ASK_TIMEOUT +_					"'.Use formats like '50 s' or '1 min' to specify the timeout.")__		}_		LOG.info("Messages between TaskManager and JobManager have a max timeout of " + timeout)___		final long cleanupInterval = configuration.getLong(_			ConfigConstants.LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL,_			ConfigConstants.DEFAULT_LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL) * 1000___		final FiniteDuration finiteRegistrationDuration__		try {_			Duration maxRegistrationDuration = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_DURATION))__			if (maxRegistrationDuration.isFinite()) {_				finiteRegistrationDuration = new FiniteDuration(maxRegistrationDuration.toSeconds(), TimeUnit.SECONDS)__			} else {_				finiteRegistrationDuration = null__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, e)__		}__		final FiniteDuration initialRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_INITIAL_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				initialRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The initial registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration maxRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTARTION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				maxRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The maximum registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration refusedRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_REFUSED_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_REFUSED_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				refusedRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The refused registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		return new TaskExecutorConfiguration(_			tmpDirs,_			cleanupInterval,_			networkConfig,_			timeout,_			finiteRegistrationDuration,_			slots,_			configuration,_			initialRegistrationPause,_			maxRegistrationPause,_			refusedRegistrationPause)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,task,manager,hostname,the,host,name,under,which,the,task,manager,communicates,param,local,task,manager,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;private,static,task,executor,configuration,parse,task,manager,configuration,configuration,configuration,string,task,manager,hostname,boolean,local,task,manager,communication,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,if,dataport,0,dataport,net,utils,get,available,port,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,inet,address,task,manager,address,inet,address,get,by,name,task,manager,hostname,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,netty,config,netty,config,if,local,task,manager,communication,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,final,int,query,server,port,configuration,get,integer,config,constants,config,constants,final,int,query,server,network,threads,configuration,get,integer,config,constants,config,constants,final,int,query,server,query,threads,configuration,get,integer,config,constants,config,constants,final,network,environment,configuration,network,config,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,query,server,port,query,server,network,threads,query,server,query,threads,option,apply,netty,config,500,30000,final,finite,duration,timeout,try,timeout,akka,utils,get,timeout,configuration,catch,exception,e,throw,new,illegal,argument,exception,invalid,format,for,config,constants,use,formats,like,50,s,or,1,min,to,specify,the,timeout,log,info,messages,between,task,manager,and,job,manager,have,a,max,timeout,of,timeout,final,long,cleanup,interval,configuration,get,long,config,constants,config,constants,1000,final,finite,duration,finite,registration,duration,try,duration,max,registration,duration,duration,create,configuration,get,string,config,constants,config,constants,if,max,registration,duration,is,finite,finite,registration,duration,new,finite,duration,max,registration,duration,to,seconds,time,unit,seconds,else,finite,registration,duration,null,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,initial,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,initial,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,initial,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,max,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,max,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,maximum,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,refused,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,refused,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,refused,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,return,new,task,executor,configuration,tmp,dirs,cleanup,interval,network,config,timeout,finite,registration,duration,slots,configuration,initial,registration,pause,max,registration,pause,refused,registration,pause
TaskExecutor -> private static TaskExecutorConfiguration parseTaskManagerConfiguration( 		Configuration configuration, 		String taskManagerHostname, 		boolean localTaskManagerCommunication) throws Exception;1482522859;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration                 The configuration._@param taskManagerHostname           The host name under which the TaskManager communicates._@param localTaskManagerCommunication             True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;private static TaskExecutorConfiguration parseTaskManagerConfiguration(_		Configuration configuration,_		String taskManagerHostname,_		boolean localTaskManagerCommunication) throws Exception {__		_		__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)__		if (dataport == 0) {_			dataport = NetUtils.getAvailablePort()__		}_		checkConfigParameter(dataport > 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		InetAddress taskManagerAddress = InetAddress.getByName(taskManagerHostname)__		final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___		__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}_		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)__		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)__		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)__		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			nettyConfig = new NettyConfig(_				taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(),_				pageSize,_				slots,_				configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		final int queryServerPort =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_PORT,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_PORT)___		final int queryServerNetworkThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_NETWORK_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_NETWORK_THREADS)___		final int queryServerQueryThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_QUERY_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_QUERY_THREADS)___		final NetworkEnvironmentConfiguration networkConfig = new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			queryServerPort,_			queryServerNetworkThreads,_			queryServerQueryThreads,_			Option.apply(nettyConfig),_			500,_			30000)___		__		final FiniteDuration timeout__		try {_			timeout = AkkaUtils.getTimeout(configuration)__		} catch (Exception e) {_			throw new IllegalArgumentException(_				"Invalid format for '" + ConfigConstants.AKKA_ASK_TIMEOUT +_					"'.Use formats like '50 s' or '1 min' to specify the timeout.")__		}_		LOG.info("Messages between TaskManager and JobManager have a max timeout of " + timeout)___		final long cleanupInterval = configuration.getLong(_			ConfigConstants.LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL,_			ConfigConstants.DEFAULT_LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL) * 1000___		final FiniteDuration finiteRegistrationDuration__		try {_			Duration maxRegistrationDuration = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_DURATION))__			if (maxRegistrationDuration.isFinite()) {_				finiteRegistrationDuration = new FiniteDuration(maxRegistrationDuration.toSeconds(), TimeUnit.SECONDS)__			} else {_				finiteRegistrationDuration = null__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, e)__		}__		final FiniteDuration initialRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_INITIAL_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				initialRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The initial registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration maxRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTARTION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				maxRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The maximum registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration refusedRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_REFUSED_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_REFUSED_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				refusedRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The refused registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		return new TaskExecutorConfiguration(_			tmpDirs,_			cleanupInterval,_			networkConfig,_			timeout,_			finiteRegistrationDuration,_			slots,_			configuration,_			initialRegistrationPause,_			maxRegistrationPause,_			refusedRegistrationPause)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,task,manager,hostname,the,host,name,under,which,the,task,manager,communicates,param,local,task,manager,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;private,static,task,executor,configuration,parse,task,manager,configuration,configuration,configuration,string,task,manager,hostname,boolean,local,task,manager,communication,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,if,dataport,0,dataport,net,utils,get,available,port,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,inet,address,task,manager,address,inet,address,get,by,name,task,manager,hostname,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,netty,config,netty,config,if,local,task,manager,communication,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,final,int,query,server,port,configuration,get,integer,config,constants,config,constants,final,int,query,server,network,threads,configuration,get,integer,config,constants,config,constants,final,int,query,server,query,threads,configuration,get,integer,config,constants,config,constants,final,network,environment,configuration,network,config,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,query,server,port,query,server,network,threads,query,server,query,threads,option,apply,netty,config,500,30000,final,finite,duration,timeout,try,timeout,akka,utils,get,timeout,configuration,catch,exception,e,throw,new,illegal,argument,exception,invalid,format,for,config,constants,use,formats,like,50,s,or,1,min,to,specify,the,timeout,log,info,messages,between,task,manager,and,job,manager,have,a,max,timeout,of,timeout,final,long,cleanup,interval,configuration,get,long,config,constants,config,constants,1000,final,finite,duration,finite,registration,duration,try,duration,max,registration,duration,duration,create,configuration,get,string,config,constants,config,constants,if,max,registration,duration,is,finite,finite,registration,duration,new,finite,duration,max,registration,duration,to,seconds,time,unit,seconds,else,finite,registration,duration,null,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,initial,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,initial,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,initial,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,max,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,max,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,maximum,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,refused,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,refused,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,refused,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,return,new,task,executor,configuration,tmp,dirs,cleanup,interval,network,config,timeout,finite,registration,duration,slots,configuration,initial,registration,pause,max,registration,pause,refused,registration,pause
TaskExecutor -> private static TaskExecutorConfiguration parseTaskManagerConfiguration( 		Configuration configuration, 		String taskManagerHostname, 		boolean localTaskManagerCommunication) throws Exception;1482522859;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration                 The configuration._@param taskManagerHostname           The host name under which the TaskManager communicates._@param localTaskManagerCommunication             True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;private static TaskExecutorConfiguration parseTaskManagerConfiguration(_		Configuration configuration,_		String taskManagerHostname,_		boolean localTaskManagerCommunication) throws Exception {__		_		__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)__		if (dataport == 0) {_			dataport = NetUtils.getAvailablePort()__		}_		checkConfigParameter(dataport > 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		InetAddress taskManagerAddress = InetAddress.getByName(taskManagerHostname)__		final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___		__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}_		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)__		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)__		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)__		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			nettyConfig = new NettyConfig(_				taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(),_				pageSize,_				slots,_				configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		final int queryServerPort =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_PORT,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_PORT)___		final int queryServerNetworkThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_NETWORK_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_NETWORK_THREADS)___		final int queryServerQueryThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_QUERY_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_QUERY_THREADS)___		final NetworkEnvironmentConfiguration networkConfig = new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			queryServerPort,_			queryServerNetworkThreads,_			queryServerQueryThreads,_			Option.apply(nettyConfig),_			500,_			30000)___		__		final FiniteDuration timeout__		try {_			timeout = AkkaUtils.getTimeout(configuration)__		} catch (Exception e) {_			throw new IllegalArgumentException(_				"Invalid format for '" + ConfigConstants.AKKA_ASK_TIMEOUT +_					"'.Use formats like '50 s' or '1 min' to specify the timeout.")__		}_		LOG.info("Messages between TaskManager and JobManager have a max timeout of " + timeout)___		final long cleanupInterval = configuration.getLong(_			ConfigConstants.LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL,_			ConfigConstants.DEFAULT_LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL) * 1000___		final FiniteDuration finiteRegistrationDuration__		try {_			Duration maxRegistrationDuration = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_DURATION))__			if (maxRegistrationDuration.isFinite()) {_				finiteRegistrationDuration = new FiniteDuration(maxRegistrationDuration.toSeconds(), TimeUnit.SECONDS)__			} else {_				finiteRegistrationDuration = null__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, e)__		}__		final FiniteDuration initialRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_INITIAL_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				initialRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The initial registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration maxRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTARTION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				maxRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The maximum registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration refusedRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_REFUSED_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_REFUSED_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				refusedRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The refused registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		return new TaskExecutorConfiguration(_			tmpDirs,_			cleanupInterval,_			networkConfig,_			timeout,_			finiteRegistrationDuration,_			slots,_			configuration,_			initialRegistrationPause,_			maxRegistrationPause,_			refusedRegistrationPause)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,task,manager,hostname,the,host,name,under,which,the,task,manager,communicates,param,local,task,manager,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;private,static,task,executor,configuration,parse,task,manager,configuration,configuration,configuration,string,task,manager,hostname,boolean,local,task,manager,communication,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,if,dataport,0,dataport,net,utils,get,available,port,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,inet,address,task,manager,address,inet,address,get,by,name,task,manager,hostname,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,netty,config,netty,config,if,local,task,manager,communication,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,final,int,query,server,port,configuration,get,integer,config,constants,config,constants,final,int,query,server,network,threads,configuration,get,integer,config,constants,config,constants,final,int,query,server,query,threads,configuration,get,integer,config,constants,config,constants,final,network,environment,configuration,network,config,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,query,server,port,query,server,network,threads,query,server,query,threads,option,apply,netty,config,500,30000,final,finite,duration,timeout,try,timeout,akka,utils,get,timeout,configuration,catch,exception,e,throw,new,illegal,argument,exception,invalid,format,for,config,constants,use,formats,like,50,s,or,1,min,to,specify,the,timeout,log,info,messages,between,task,manager,and,job,manager,have,a,max,timeout,of,timeout,final,long,cleanup,interval,configuration,get,long,config,constants,config,constants,1000,final,finite,duration,finite,registration,duration,try,duration,max,registration,duration,duration,create,configuration,get,string,config,constants,config,constants,if,max,registration,duration,is,finite,finite,registration,duration,new,finite,duration,max,registration,duration,to,seconds,time,unit,seconds,else,finite,registration,duration,null,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,initial,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,initial,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,initial,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,max,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,max,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,maximum,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,refused,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,refused,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,refused,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,return,new,task,executor,configuration,tmp,dirs,cleanup,interval,network,config,timeout,finite,registration,duration,slots,configuration,initial,registration,pause,max,registration,pause,refused,registration,pause
TaskExecutor -> private static TaskExecutorConfiguration parseTaskManagerConfiguration( 		Configuration configuration, 		String taskManagerHostname, 		boolean localTaskManagerCommunication) throws Exception;1482522859;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration                 The configuration._@param taskManagerHostname           The host name under which the TaskManager communicates._@param localTaskManagerCommunication             True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;private static TaskExecutorConfiguration parseTaskManagerConfiguration(_		Configuration configuration,_		String taskManagerHostname,_		boolean localTaskManagerCommunication) throws Exception {__		_		__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)__		if (dataport == 0) {_			dataport = NetUtils.getAvailablePort()__		}_		checkConfigParameter(dataport > 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		InetAddress taskManagerAddress = InetAddress.getByName(taskManagerHostname)__		final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___		__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}_		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)__		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)__		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)__		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			nettyConfig = new NettyConfig(_				taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(),_				pageSize,_				slots,_				configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		final int queryServerPort =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_PORT,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_PORT)___		final int queryServerNetworkThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_NETWORK_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_NETWORK_THREADS)___		final int queryServerQueryThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_QUERY_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_QUERY_THREADS)___		final NetworkEnvironmentConfiguration networkConfig = new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			queryServerPort,_			queryServerNetworkThreads,_			queryServerQueryThreads,_			Option.apply(nettyConfig),_			500,_			30000)___		__		final FiniteDuration timeout__		try {_			timeout = AkkaUtils.getTimeout(configuration)__		} catch (Exception e) {_			throw new IllegalArgumentException(_				"Invalid format for '" + ConfigConstants.AKKA_ASK_TIMEOUT +_					"'.Use formats like '50 s' or '1 min' to specify the timeout.")__		}_		LOG.info("Messages between TaskManager and JobManager have a max timeout of " + timeout)___		final long cleanupInterval = configuration.getLong(_			ConfigConstants.LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL,_			ConfigConstants.DEFAULT_LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL) * 1000___		final FiniteDuration finiteRegistrationDuration__		try {_			Duration maxRegistrationDuration = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_DURATION))__			if (maxRegistrationDuration.isFinite()) {_				finiteRegistrationDuration = new FiniteDuration(maxRegistrationDuration.toSeconds(), TimeUnit.SECONDS)__			} else {_				finiteRegistrationDuration = null__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, e)__		}__		final FiniteDuration initialRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_INITIAL_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				initialRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The initial registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration maxRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTARTION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				maxRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The maximum registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration refusedRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_REFUSED_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_REFUSED_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				refusedRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The refused registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		return new TaskExecutorConfiguration(_			tmpDirs,_			cleanupInterval,_			networkConfig,_			timeout,_			finiteRegistrationDuration,_			slots,_			configuration,_			initialRegistrationPause,_			maxRegistrationPause,_			refusedRegistrationPause)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,task,manager,hostname,the,host,name,under,which,the,task,manager,communicates,param,local,task,manager,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;private,static,task,executor,configuration,parse,task,manager,configuration,configuration,configuration,string,task,manager,hostname,boolean,local,task,manager,communication,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,if,dataport,0,dataport,net,utils,get,available,port,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,inet,address,task,manager,address,inet,address,get,by,name,task,manager,hostname,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,netty,config,netty,config,if,local,task,manager,communication,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,final,int,query,server,port,configuration,get,integer,config,constants,config,constants,final,int,query,server,network,threads,configuration,get,integer,config,constants,config,constants,final,int,query,server,query,threads,configuration,get,integer,config,constants,config,constants,final,network,environment,configuration,network,config,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,query,server,port,query,server,network,threads,query,server,query,threads,option,apply,netty,config,500,30000,final,finite,duration,timeout,try,timeout,akka,utils,get,timeout,configuration,catch,exception,e,throw,new,illegal,argument,exception,invalid,format,for,config,constants,use,formats,like,50,s,or,1,min,to,specify,the,timeout,log,info,messages,between,task,manager,and,job,manager,have,a,max,timeout,of,timeout,final,long,cleanup,interval,configuration,get,long,config,constants,config,constants,1000,final,finite,duration,finite,registration,duration,try,duration,max,registration,duration,duration,create,configuration,get,string,config,constants,config,constants,if,max,registration,duration,is,finite,finite,registration,duration,new,finite,duration,max,registration,duration,to,seconds,time,unit,seconds,else,finite,registration,duration,null,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,initial,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,initial,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,initial,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,max,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,max,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,maximum,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,refused,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,refused,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,refused,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,return,new,task,executor,configuration,tmp,dirs,cleanup,interval,network,config,timeout,finite,registration,duration,slots,configuration,initial,registration,pause,max,registration,pause,refused,registration,pause
TaskExecutor -> private static TaskExecutorConfiguration parseTaskManagerConfiguration( 		Configuration configuration, 		String taskManagerHostname, 		boolean localTaskManagerCommunication) throws Exception;1482522860;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration                 The configuration._@param taskManagerHostname           The host name under which the TaskManager communicates._@param localTaskManagerCommunication             True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;private static TaskExecutorConfiguration parseTaskManagerConfiguration(_		Configuration configuration,_		String taskManagerHostname,_		boolean localTaskManagerCommunication) throws Exception {__		_		__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)__		if (dataport == 0) {_			dataport = NetUtils.getAvailablePort()__		}_		checkConfigParameter(dataport > 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		InetAddress taskManagerAddress = InetAddress.getByName(taskManagerHostname)__		final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___		__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}_		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)__		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)__		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)__		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			nettyConfig = new NettyConfig(_				taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(),_				pageSize,_				slots,_				configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		final int queryServerPort =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_PORT,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_PORT)___		final int queryServerNetworkThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_NETWORK_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_NETWORK_THREADS)___		final int queryServerQueryThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_QUERY_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_QUERY_THREADS)___		final NetworkEnvironmentConfiguration networkConfig = new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			queryServerPort,_			queryServerNetworkThreads,_			queryServerQueryThreads,_			Option.apply(nettyConfig),_			500,_			30000)___		__		final FiniteDuration timeout__		try {_			timeout = AkkaUtils.getTimeout(configuration)__		} catch (Exception e) {_			throw new IllegalArgumentException(_				"Invalid format for '" + ConfigConstants.AKKA_ASK_TIMEOUT +_					"'.Use formats like '50 s' or '1 min' to specify the timeout.")__		}_		LOG.info("Messages between TaskManager and JobManager have a max timeout of " + timeout)___		final long cleanupInterval = configuration.getLong(_			ConfigConstants.LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL,_			ConfigConstants.DEFAULT_LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL) * 1000___		final FiniteDuration finiteRegistrationDuration__		try {_			Duration maxRegistrationDuration = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_DURATION))__			if (maxRegistrationDuration.isFinite()) {_				finiteRegistrationDuration = new FiniteDuration(maxRegistrationDuration.toSeconds(), TimeUnit.SECONDS)__			} else {_				finiteRegistrationDuration = null__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, e)__		}__		final FiniteDuration initialRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_INITIAL_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				initialRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The initial registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration maxRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTARTION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				maxRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The maximum registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration refusedRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_REFUSED_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_REFUSED_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				refusedRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The refused registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		return new TaskExecutorConfiguration(_			tmpDirs,_			cleanupInterval,_			networkConfig,_			timeout,_			finiteRegistrationDuration,_			slots,_			configuration,_			initialRegistrationPause,_			maxRegistrationPause,_			refusedRegistrationPause)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,task,manager,hostname,the,host,name,under,which,the,task,manager,communicates,param,local,task,manager,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;private,static,task,executor,configuration,parse,task,manager,configuration,configuration,configuration,string,task,manager,hostname,boolean,local,task,manager,communication,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,if,dataport,0,dataport,net,utils,get,available,port,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,inet,address,task,manager,address,inet,address,get,by,name,task,manager,hostname,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,netty,config,netty,config,if,local,task,manager,communication,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,final,int,query,server,port,configuration,get,integer,config,constants,config,constants,final,int,query,server,network,threads,configuration,get,integer,config,constants,config,constants,final,int,query,server,query,threads,configuration,get,integer,config,constants,config,constants,final,network,environment,configuration,network,config,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,query,server,port,query,server,network,threads,query,server,query,threads,option,apply,netty,config,500,30000,final,finite,duration,timeout,try,timeout,akka,utils,get,timeout,configuration,catch,exception,e,throw,new,illegal,argument,exception,invalid,format,for,config,constants,use,formats,like,50,s,or,1,min,to,specify,the,timeout,log,info,messages,between,task,manager,and,job,manager,have,a,max,timeout,of,timeout,final,long,cleanup,interval,configuration,get,long,config,constants,config,constants,1000,final,finite,duration,finite,registration,duration,try,duration,max,registration,duration,duration,create,configuration,get,string,config,constants,config,constants,if,max,registration,duration,is,finite,finite,registration,duration,new,finite,duration,max,registration,duration,to,seconds,time,unit,seconds,else,finite,registration,duration,null,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,initial,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,initial,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,initial,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,max,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,max,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,maximum,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,refused,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,refused,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,refused,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,return,new,task,executor,configuration,tmp,dirs,cleanup,interval,network,config,timeout,finite,registration,duration,slots,configuration,initial,registration,pause,max,registration,pause,refused,registration,pause
TaskExecutor -> private static TaskExecutorConfiguration parseTaskManagerConfiguration( 		Configuration configuration, 		String taskManagerHostname, 		boolean localTaskManagerCommunication) throws Exception;1482522860;Utility method to extract TaskManager config parameters from the configuration and to_sanity check them.__@param configuration                 The configuration._@param taskManagerHostname           The host name under which the TaskManager communicates._@param localTaskManagerCommunication             True, to skip initializing the network stack._Use only in cases where only one task manager runs._@return TaskExecutorConfiguration that wrappers InstanceConnectionInfo, NetworkEnvironmentConfiguration, etc.;private static TaskExecutorConfiguration parseTaskManagerConfiguration(_		Configuration configuration,_		String taskManagerHostname,_		boolean localTaskManagerCommunication) throws Exception {__		_		__		__		int dataport = configuration.getInteger(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT)__		if (dataport == 0) {_			dataport = NetUtils.getAvailablePort()__		}_		checkConfigParameter(dataport > 0, dataport, ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,_			"Leave config parameter empty or use 0 to let the system choose a port automatically.")___		InetAddress taskManagerAddress = InetAddress.getByName(taskManagerHostname)__		final InetSocketAddress taskManagerInetSocketAddress = new InetSocketAddress(taskManagerAddress, dataport)___		__		_		int slots = configuration.getInteger(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1)__		if (slots == -1) {_			slots = 1__		}_		checkConfigParameter(slots >= 1, slots, ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,_			"Number of task slots must be at least one.")___		final int numNetworkBuffers = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS)__		checkConfigParameter(numNetworkBuffers > 0, numNetworkBuffers,_			ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, "")___		final int pageSize = configuration.getInteger(_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_SEGMENT_SIZE)__		_		checkConfigParameter(pageSize >= MemoryManager.MIN_PAGE_SIZE, pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Minimum memory segment size is " + MemoryManager.MIN_PAGE_SIZE)__		_		checkConfigParameter(MathUtils.isPowerOf2(pageSize), pageSize,_			ConfigConstants.TASK_MANAGER_MEMORY_SEGMENT_SIZE_KEY,_			"Memory segment size must be a power of 2.")___		_		final MemoryType memType__		if (configuration.getBoolean(ConfigConstants.TASK_MANAGER_MEMORY_OFF_HEAP_KEY, false)) {_			memType = MemoryType.OFF_HEAP__		} else {_			memType = MemoryType.HEAP__		}__		_		if (memType == MemoryType.HEAP) {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HeapMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to heap memory, but memory segment " +_					"factory has been initialized for off-heap memory segments")__			}_		} else {_			if (!MemorySegmentFactory.initializeIfNotInitialized(HybridMemorySegment.FACTORY)) {_				throw new Exception("Memory type is set to off-heap memory, but memory segment " +_					"factory has been initialized for heap memory segments")__			}_		}__		final String[] tmpDirs = configuration.getString(_			ConfigConstants.TASK_MANAGER_TMP_DIR_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH).split(",|" + File.pathSeparator)___		final NettyConfig nettyConfig__		if (!localTaskManagerCommunication) {_			nettyConfig = new NettyConfig(_				taskManagerInetSocketAddress.getAddress(),_				taskManagerInetSocketAddress.getPort(),_				pageSize,_				slots,_				configuration)__		} else {_			nettyConfig = null__		}__		_		final String syncOrAsync = configuration.getString(_			ConfigConstants.TASK_MANAGER_NETWORK_DEFAULT_IO_MODE,_			ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_DEFAULT_IO_MODE)___		final IOMode ioMode__		if (syncOrAsync.equals("async")) {_			ioMode = IOManager.IOMode.ASYNC__		} else {_			ioMode = IOManager.IOMode.SYNC__		}__		final int queryServerPort =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_PORT,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_PORT)___		final int queryServerNetworkThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_NETWORK_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_NETWORK_THREADS)___		final int queryServerQueryThreads =  configuration.getInteger(_			ConfigConstants.QUERYABLE_STATE_SERVER_QUERY_THREADS,_			ConfigConstants.DEFAULT_QUERYABLE_STATE_SERVER_QUERY_THREADS)___		final NetworkEnvironmentConfiguration networkConfig = new NetworkEnvironmentConfiguration(_			numNetworkBuffers,_			pageSize,_			memType,_			ioMode,_			queryServerPort,_			queryServerNetworkThreads,_			queryServerQueryThreads,_			Option.apply(nettyConfig),_			500,_			30000)___		__		final FiniteDuration timeout__		try {_			timeout = AkkaUtils.getTimeout(configuration)__		} catch (Exception e) {_			throw new IllegalArgumentException(_				"Invalid format for '" + ConfigConstants.AKKA_ASK_TIMEOUT +_					"'.Use formats like '50 s' or '1 min' to specify the timeout.")__		}_		LOG.info("Messages between TaskManager and JobManager have a max timeout of " + timeout)___		final long cleanupInterval = configuration.getLong(_			ConfigConstants.LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL,_			ConfigConstants.DEFAULT_LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL) * 1000___		final FiniteDuration finiteRegistrationDuration__		try {_			Duration maxRegistrationDuration = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_DURATION))__			if (maxRegistrationDuration.isFinite()) {_				finiteRegistrationDuration = new FiniteDuration(maxRegistrationDuration.toSeconds(), TimeUnit.SECONDS)__			} else {_				finiteRegistrationDuration = null__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, e)__		}__		final FiniteDuration initialRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_INITIAL_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				initialRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The initial registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration maxRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_MAX_REGISTARTION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				maxRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The maximum registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		final FiniteDuration refusedRegistrationPause__		try {_			Duration pause = Duration.create(configuration.getString(_				ConfigConstants.TASK_MANAGER_REFUSED_REGISTRATION_PAUSE,_				ConfigConstants.DEFAULT_TASK_MANAGER_REFUSED_REGISTRATION_PAUSE))__			if (pause.isFinite()) {_				refusedRegistrationPause = new FiniteDuration(pause.toSeconds(), TimeUnit.SECONDS)__			} else {_				throw new IllegalArgumentException("The refused registration pause must be finite: " + pause)__			}_		} catch (NumberFormatException e) {_			throw new IllegalArgumentException("Invalid format for parameter " +_				ConfigConstants.TASK_MANAGER_INITIAL_REGISTRATION_PAUSE, e)__		}__		return new TaskExecutorConfiguration(_			tmpDirs,_			cleanupInterval,_			networkConfig,_			timeout,_			finiteRegistrationDuration,_			slots,_			configuration,_			initialRegistrationPause,_			maxRegistrationPause,_			refusedRegistrationPause)__	};utility,method,to,extract,task,manager,config,parameters,from,the,configuration,and,to,sanity,check,them,param,configuration,the,configuration,param,task,manager,hostname,the,host,name,under,which,the,task,manager,communicates,param,local,task,manager,communication,true,to,skip,initializing,the,network,stack,use,only,in,cases,where,only,one,task,manager,runs,return,task,executor,configuration,that,wrappers,instance,connection,info,network,environment,configuration,etc;private,static,task,executor,configuration,parse,task,manager,configuration,configuration,configuration,string,task,manager,hostname,boolean,local,task,manager,communication,throws,exception,int,dataport,configuration,get,integer,config,constants,config,constants,if,dataport,0,dataport,net,utils,get,available,port,check,config,parameter,dataport,0,dataport,config,constants,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,a,port,automatically,inet,address,task,manager,address,inet,address,get,by,name,task,manager,hostname,final,inet,socket,address,task,manager,inet,socket,address,new,inet,socket,address,task,manager,address,dataport,int,slots,configuration,get,integer,config,constants,1,if,slots,1,slots,1,check,config,parameter,slots,1,slots,config,constants,number,of,task,slots,must,be,at,least,one,final,int,num,network,buffers,configuration,get,integer,config,constants,config,constants,check,config,parameter,num,network,buffers,0,num,network,buffers,config,constants,final,int,page,size,configuration,get,integer,config,constants,config,constants,check,config,parameter,page,size,memory,manager,page,size,config,constants,minimum,memory,segment,size,is,memory,manager,check,config,parameter,math,utils,is,power,of2,page,size,page,size,config,constants,memory,segment,size,must,be,a,power,of,2,final,memory,type,mem,type,if,configuration,get,boolean,config,constants,false,mem,type,memory,type,else,mem,type,memory,type,heap,if,mem,type,memory,type,heap,if,memory,segment,factory,initialize,if,not,initialized,heap,memory,segment,factory,throw,new,exception,memory,type,is,set,to,heap,memory,but,memory,segment,factory,has,been,initialized,for,off,heap,memory,segments,else,if,memory,segment,factory,initialize,if,not,initialized,hybrid,memory,segment,factory,throw,new,exception,memory,type,is,set,to,off,heap,memory,but,memory,segment,factory,has,been,initialized,for,heap,memory,segments,final,string,tmp,dirs,configuration,get,string,config,constants,config,constants,split,file,path,separator,final,netty,config,netty,config,if,local,task,manager,communication,netty,config,new,netty,config,task,manager,inet,socket,address,get,address,task,manager,inet,socket,address,get,port,page,size,slots,configuration,else,netty,config,null,final,string,sync,or,async,configuration,get,string,config,constants,config,constants,final,iomode,io,mode,if,sync,or,async,equals,async,io,mode,iomanager,iomode,async,else,io,mode,iomanager,iomode,sync,final,int,query,server,port,configuration,get,integer,config,constants,config,constants,final,int,query,server,network,threads,configuration,get,integer,config,constants,config,constants,final,int,query,server,query,threads,configuration,get,integer,config,constants,config,constants,final,network,environment,configuration,network,config,new,network,environment,configuration,num,network,buffers,page,size,mem,type,io,mode,query,server,port,query,server,network,threads,query,server,query,threads,option,apply,netty,config,500,30000,final,finite,duration,timeout,try,timeout,akka,utils,get,timeout,configuration,catch,exception,e,throw,new,illegal,argument,exception,invalid,format,for,config,constants,use,formats,like,50,s,or,1,min,to,specify,the,timeout,log,info,messages,between,task,manager,and,job,manager,have,a,max,timeout,of,timeout,final,long,cleanup,interval,configuration,get,long,config,constants,config,constants,1000,final,finite,duration,finite,registration,duration,try,duration,max,registration,duration,duration,create,configuration,get,string,config,constants,config,constants,if,max,registration,duration,is,finite,finite,registration,duration,new,finite,duration,max,registration,duration,to,seconds,time,unit,seconds,else,finite,registration,duration,null,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,initial,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,initial,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,initial,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,max,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,max,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,maximum,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,final,finite,duration,refused,registration,pause,try,duration,pause,duration,create,configuration,get,string,config,constants,config,constants,if,pause,is,finite,refused,registration,pause,new,finite,duration,pause,to,seconds,time,unit,seconds,else,throw,new,illegal,argument,exception,the,refused,registration,pause,must,be,finite,pause,catch,number,format,exception,e,throw,new,illegal,argument,exception,invalid,format,for,parameter,config,constants,e,return,new,task,executor,configuration,tmp,dirs,cleanup,interval,network,config,timeout,finite,registration,duration,slots,configuration,initial,registration,pause,max,registration,pause,refused,registration,pause
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1519406528;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			taskExecutorServices.shutDown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,manager,get,address,throwable,throwable,null,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,task,executor,services,shut,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1519568061;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			taskExecutorServices.shutDown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,manager,get,address,throwable,throwable,null,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,task,executor,services,shut,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1519977154;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskManager {}.", getAddress())___		Throwable throwable = null___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,manager,get,address,throwable,throwable,null,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1519977155;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1520248954;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1521554023;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1521555504;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1521804757;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1522246852;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1525420604;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1525452496;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,is,connected,to,resource,manager,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1526579384;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (resourceManagerConnection != null) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,resource,manager,connection,null,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1527173115;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (resourceManagerConnection != null) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,resource,manager,connection,null,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1530472204;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (resourceManagerConnection != null) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,resource,manager,connection,null,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1539073077;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (resourceManagerConnection != null) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,resource,manager,connection,null,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1539073098;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (resourceManagerConnection != null) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,resource,manager,connection,null,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1539176686;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (resourceManagerConnection != null) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,resource,manager,connection,null,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1539176686;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (resourceManagerConnection != null) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,resource,manager,connection,null,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1539634004;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (resourceManagerConnection != null) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,resource,manager,connection,null,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> postStop();1549360056;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> postStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (resourceManagerConnection != null) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,post,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,resource,manager,connection,null,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> void onFatalError(final Throwable t);1501437265;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		log.error("Fatal error occurred.", t)__		_		getRpcService().execute(new Runnable() {_			@Override_			public void run() {_				fatalErrorHandler.onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,log,error,fatal,error,occurred,t,get,rpc,service,execute,new,runnable,override,public,void,run,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1501485811;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		log.error("Fatal error occurred.", t)__		_		getRpcService().execute(new Runnable() {_			@Override_			public void run() {_				fatalErrorHandler.onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,log,error,fatal,error,occurred,t,get,rpc,service,execute,new,runnable,override,public,void,run,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1501620216;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		log.error("Fatal error occurred.", t)__		_		getRpcService().execute(new Runnable() {_			@Override_			public void run() {_				fatalErrorHandler.onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,log,error,fatal,error,occurred,t,get,rpc,service,execute,new,runnable,override,public,void,run,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1501622036;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		log.error("Fatal error occurred.", t)__		_		getRpcService().execute(new Runnable() {_			@Override_			public void run() {_				fatalErrorHandler.onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,log,error,fatal,error,occurred,t,get,rpc,service,execute,new,runnable,override,public,void,run,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1501760738;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		log.error("Fatal error occurred.", t)__		_		getRpcService().execute(new Runnable() {_			@Override_			public void run() {_				fatalErrorHandler.onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,log,error,fatal,error,occurred,t,get,rpc,service,execute,new,runnable,override,public,void,run,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1502452184;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		log.error("Fatal error occurred.", t)__		_		getRpcService().execute(new Runnable() {_			@Override_			public void run() {_				fatalErrorHandler.onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,log,error,fatal,error,occurred,t,get,rpc,service,execute,new,runnable,override,public,void,run,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1503041372;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		log.error("Fatal error occurred.", t)__		_		getRpcService().execute(new Runnable() {_			@Override_			public void run() {_				fatalErrorHandler.onFatalError(t)__			}_		})__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,log,error,fatal,error,occurred,t,get,rpc,service,execute,new,runnable,override,public,void,run,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1504477043;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1504507095;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1504525441;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1504608225;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1505998908;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1507212387;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1507212387;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1508861310;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1508939746;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1509547920;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1509547921;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1510063662;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1515588319;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1515600854;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1516626377;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1516626397;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1516643356;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1517317681;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1517333417;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1517333417;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1517914184;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1517915730;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1517920461;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1517920615;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1518433169;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1519406528;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1519568061;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1519977154;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1519977155;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1520248954;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1521554023;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1521555504;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1521804757;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1522246852;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1525420604;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1525452496;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1526579384;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1527173115;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1530472204;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1539073077;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1539073098;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1539176686;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1539176686;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1539634004;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1549360056;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1550005039;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1550312315;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(final Throwable t);1550366933;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;void onFatalError(final Throwable t) {_		try {_			log.error("Fatal error occurred in TaskExecutor {}.", getAddress(), t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,final,throwable,t,try,log,error,fatal,error,occurred,in,task,executor,get,address,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
TaskExecutor -> private static TaskExecutor.TaskManagerComponents createTaskManagerComponents( 		ResourceID resourceID, 		InetAddress taskManagerAddress, 		TaskExecutorConfiguration taskExecutorConfig, 		Configuration configuration) throws Exception;1482522858;Creates and returns the task manager components.__@param resourceID resource ID of the task manager_@param taskManagerAddress address of the task manager_@param taskExecutorConfig task manager configuration_@param configuration of Flink_@return task manager components_@throws Exception;private static TaskExecutor.TaskManagerComponents createTaskManagerComponents(_		ResourceID resourceID,_		InetAddress taskManagerAddress,_		TaskExecutorConfiguration taskExecutorConfig,_		Configuration configuration) throws Exception {_		MemoryType memType = taskExecutorConfig.getNetworkConfig().memoryType()___		_		checkTempDirs(taskExecutorConfig.getTmpDirPaths())___		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskExecutorConfig.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig().isDefined()) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig().get())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		KvStateServer kvStateServer___		if (networkEnvironmentConfiguration.nettyConfig().isDefined()) {_			NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig().get()___			int numNetworkThreads = networkEnvironmentConfiguration.queryServerNetworkThreads() == 0 ?_				nettyConfig.getNumberOfSlots() : networkEnvironmentConfiguration.queryServerNetworkThreads()___			int numQueryThreads = networkEnvironmentConfiguration.queryServerQueryThreads() == 0 ?_				nettyConfig.getNumberOfSlots() : networkEnvironmentConfiguration.queryServerQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerAddress,_				networkEnvironmentConfiguration.queryServerPort(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		final NetworkEnvironment network = new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitinRequestMaxBackoff())___		network.start()___		TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerAddress,_			network.getConnectionManager().getDataPort())___		_		__		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		final long memorySize__		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)__		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float fraction = configuration.getFloat(_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__			checkConfigParameter(fraction > 0.0f && fraction < 1.0f, fraction,_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						fraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , fraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - fraction) * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						fraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", fraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskExecutorConfig.getNumberOfSlots(),_				taskExecutorConfig.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}__		_		final IOManager ioManager = new IOManagerAsync(taskExecutorConfig.getTmpDirPaths())___		return new TaskExecutor.TaskManagerComponents(taskManagerLocation, memoryManager, ioManager, network)__	};creates,and,returns,the,task,manager,components,param,resource,id,resource,id,of,the,task,manager,param,task,manager,address,address,of,the,task,manager,param,task,executor,config,task,manager,configuration,param,configuration,of,flink,return,task,manager,components,throws,exception;private,static,task,executor,task,manager,components,create,task,manager,components,resource,id,resource,id,inet,address,task,manager,address,task,executor,configuration,task,executor,config,configuration,configuration,throws,exception,memory,type,mem,type,task,executor,config,get,network,config,memory,type,check,temp,dirs,task,executor,config,get,tmp,dir,paths,network,environment,configuration,network,environment,configuration,task,executor,config,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,is,defined,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,get,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,network,environment,configuration,netty,config,is,defined,netty,config,netty,config,network,environment,configuration,netty,config,get,int,num,network,threads,network,environment,configuration,query,server,network,threads,0,netty,config,get,number,of,slots,network,environment,configuration,query,server,network,threads,int,num,query,threads,network,environment,configuration,query,server,query,threads,0,netty,config,get,number,of,slots,network,environment,configuration,query,server,query,threads,kv,state,server,new,kv,state,server,task,manager,address,network,environment,configuration,query,server,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,final,network,environment,network,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partitin,request,max,backoff,network,start,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,address,network,get,connection,manager,get,data,port,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,long,memory,size,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,fraction,0,0f,fraction,1,0f,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,fraction,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,executor,config,get,number,of,slots,task,executor,config,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,final,iomanager,io,manager,new,iomanager,async,task,executor,config,get,tmp,dir,paths,return,new,task,executor,task,manager,components,task,manager,location,memory,manager,io,manager,network
TaskExecutor -> private static TaskExecutor.TaskManagerComponents createTaskManagerComponents( 		ResourceID resourceID, 		InetAddress taskManagerAddress, 		TaskExecutorConfiguration taskExecutorConfig, 		Configuration configuration) throws Exception;1482522859;Creates and returns the task manager components.__@param resourceID resource ID of the task manager_@param taskManagerAddress address of the task manager_@param taskExecutorConfig task manager configuration_@param configuration of Flink_@return task manager components_@throws Exception;private static TaskExecutor.TaskManagerComponents createTaskManagerComponents(_		ResourceID resourceID,_		InetAddress taskManagerAddress,_		TaskExecutorConfiguration taskExecutorConfig,_		Configuration configuration) throws Exception {_		MemoryType memType = taskExecutorConfig.getNetworkConfig().memoryType()___		_		checkTempDirs(taskExecutorConfig.getTmpDirPaths())___		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskExecutorConfig.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig().isDefined()) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig().get())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		KvStateServer kvStateServer___		if (networkEnvironmentConfiguration.nettyConfig().isDefined()) {_			NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig().get()___			int numNetworkThreads = networkEnvironmentConfiguration.queryServerNetworkThreads() == 0 ?_				nettyConfig.getNumberOfSlots() : networkEnvironmentConfiguration.queryServerNetworkThreads()___			int numQueryThreads = networkEnvironmentConfiguration.queryServerQueryThreads() == 0 ?_				nettyConfig.getNumberOfSlots() : networkEnvironmentConfiguration.queryServerQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerAddress,_				networkEnvironmentConfiguration.queryServerPort(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		final NetworkEnvironment network = new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitinRequestMaxBackoff())___		network.start()___		TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerAddress,_			network.getConnectionManager().getDataPort())___		_		__		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		final long memorySize__		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)__		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float fraction = configuration.getFloat(_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__			checkConfigParameter(fraction > 0.0f && fraction < 1.0f, fraction,_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						fraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , fraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - fraction) * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						fraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", fraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskExecutorConfig.getNumberOfSlots(),_				taskExecutorConfig.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}__		_		final IOManager ioManager = new IOManagerAsync(taskExecutorConfig.getTmpDirPaths())___		return new TaskExecutor.TaskManagerComponents(taskManagerLocation, memoryManager, ioManager, network)__	};creates,and,returns,the,task,manager,components,param,resource,id,resource,id,of,the,task,manager,param,task,manager,address,address,of,the,task,manager,param,task,executor,config,task,manager,configuration,param,configuration,of,flink,return,task,manager,components,throws,exception;private,static,task,executor,task,manager,components,create,task,manager,components,resource,id,resource,id,inet,address,task,manager,address,task,executor,configuration,task,executor,config,configuration,configuration,throws,exception,memory,type,mem,type,task,executor,config,get,network,config,memory,type,check,temp,dirs,task,executor,config,get,tmp,dir,paths,network,environment,configuration,network,environment,configuration,task,executor,config,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,is,defined,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,get,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,network,environment,configuration,netty,config,is,defined,netty,config,netty,config,network,environment,configuration,netty,config,get,int,num,network,threads,network,environment,configuration,query,server,network,threads,0,netty,config,get,number,of,slots,network,environment,configuration,query,server,network,threads,int,num,query,threads,network,environment,configuration,query,server,query,threads,0,netty,config,get,number,of,slots,network,environment,configuration,query,server,query,threads,kv,state,server,new,kv,state,server,task,manager,address,network,environment,configuration,query,server,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,final,network,environment,network,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partitin,request,max,backoff,network,start,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,address,network,get,connection,manager,get,data,port,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,long,memory,size,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,fraction,0,0f,fraction,1,0f,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,fraction,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,executor,config,get,number,of,slots,task,executor,config,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,final,iomanager,io,manager,new,iomanager,async,task,executor,config,get,tmp,dir,paths,return,new,task,executor,task,manager,components,task,manager,location,memory,manager,io,manager,network
TaskExecutor -> private static TaskExecutor.TaskManagerComponents createTaskManagerComponents( 		ResourceID resourceID, 		InetAddress taskManagerAddress, 		TaskExecutorConfiguration taskExecutorConfig, 		Configuration configuration) throws Exception;1482522859;Creates and returns the task manager components.__@param resourceID resource ID of the task manager_@param taskManagerAddress address of the task manager_@param taskExecutorConfig task manager configuration_@param configuration of Flink_@return task manager components_@throws Exception;private static TaskExecutor.TaskManagerComponents createTaskManagerComponents(_		ResourceID resourceID,_		InetAddress taskManagerAddress,_		TaskExecutorConfiguration taskExecutorConfig,_		Configuration configuration) throws Exception {_		MemoryType memType = taskExecutorConfig.getNetworkConfig().memoryType()___		_		checkTempDirs(taskExecutorConfig.getTmpDirPaths())___		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskExecutorConfig.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig().isDefined()) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig().get())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		KvStateServer kvStateServer___		if (networkEnvironmentConfiguration.nettyConfig().isDefined()) {_			NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig().get()___			int numNetworkThreads = networkEnvironmentConfiguration.queryServerNetworkThreads() == 0 ?_				nettyConfig.getNumberOfSlots() : networkEnvironmentConfiguration.queryServerNetworkThreads()___			int numQueryThreads = networkEnvironmentConfiguration.queryServerQueryThreads() == 0 ?_				nettyConfig.getNumberOfSlots() : networkEnvironmentConfiguration.queryServerQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerAddress,_				networkEnvironmentConfiguration.queryServerPort(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		final NetworkEnvironment network = new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitinRequestMaxBackoff())___		network.start()___		TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerAddress,_			network.getConnectionManager().getDataPort())___		_		__		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		final long memorySize__		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)__		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float fraction = configuration.getFloat(_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__			checkConfigParameter(fraction > 0.0f && fraction < 1.0f, fraction,_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						fraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , fraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - fraction) * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						fraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", fraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskExecutorConfig.getNumberOfSlots(),_				taskExecutorConfig.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}__		_		final IOManager ioManager = new IOManagerAsync(taskExecutorConfig.getTmpDirPaths())___		return new TaskExecutor.TaskManagerComponents(taskManagerLocation, memoryManager, ioManager, network)__	};creates,and,returns,the,task,manager,components,param,resource,id,resource,id,of,the,task,manager,param,task,manager,address,address,of,the,task,manager,param,task,executor,config,task,manager,configuration,param,configuration,of,flink,return,task,manager,components,throws,exception;private,static,task,executor,task,manager,components,create,task,manager,components,resource,id,resource,id,inet,address,task,manager,address,task,executor,configuration,task,executor,config,configuration,configuration,throws,exception,memory,type,mem,type,task,executor,config,get,network,config,memory,type,check,temp,dirs,task,executor,config,get,tmp,dir,paths,network,environment,configuration,network,environment,configuration,task,executor,config,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,is,defined,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,get,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,network,environment,configuration,netty,config,is,defined,netty,config,netty,config,network,environment,configuration,netty,config,get,int,num,network,threads,network,environment,configuration,query,server,network,threads,0,netty,config,get,number,of,slots,network,environment,configuration,query,server,network,threads,int,num,query,threads,network,environment,configuration,query,server,query,threads,0,netty,config,get,number,of,slots,network,environment,configuration,query,server,query,threads,kv,state,server,new,kv,state,server,task,manager,address,network,environment,configuration,query,server,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,final,network,environment,network,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partitin,request,max,backoff,network,start,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,address,network,get,connection,manager,get,data,port,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,long,memory,size,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,fraction,0,0f,fraction,1,0f,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,fraction,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,executor,config,get,number,of,slots,task,executor,config,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,final,iomanager,io,manager,new,iomanager,async,task,executor,config,get,tmp,dir,paths,return,new,task,executor,task,manager,components,task,manager,location,memory,manager,io,manager,network
TaskExecutor -> private static TaskExecutor.TaskManagerComponents createTaskManagerComponents( 		ResourceID resourceID, 		InetAddress taskManagerAddress, 		TaskExecutorConfiguration taskExecutorConfig, 		Configuration configuration) throws Exception;1482522859;Creates and returns the task manager components.__@param resourceID resource ID of the task manager_@param taskManagerAddress address of the task manager_@param taskExecutorConfig task manager configuration_@param configuration of Flink_@return task manager components_@throws Exception;private static TaskExecutor.TaskManagerComponents createTaskManagerComponents(_		ResourceID resourceID,_		InetAddress taskManagerAddress,_		TaskExecutorConfiguration taskExecutorConfig,_		Configuration configuration) throws Exception {_		MemoryType memType = taskExecutorConfig.getNetworkConfig().memoryType()___		_		checkTempDirs(taskExecutorConfig.getTmpDirPaths())___		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskExecutorConfig.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig().isDefined()) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig().get())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		KvStateServer kvStateServer___		if (networkEnvironmentConfiguration.nettyConfig().isDefined()) {_			NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig().get()___			int numNetworkThreads = networkEnvironmentConfiguration.queryServerNetworkThreads() == 0 ?_				nettyConfig.getNumberOfSlots() : networkEnvironmentConfiguration.queryServerNetworkThreads()___			int numQueryThreads = networkEnvironmentConfiguration.queryServerQueryThreads() == 0 ?_				nettyConfig.getNumberOfSlots() : networkEnvironmentConfiguration.queryServerQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerAddress,_				networkEnvironmentConfiguration.queryServerPort(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		final NetworkEnvironment network = new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitinRequestMaxBackoff())___		network.start()___		TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerAddress,_			network.getConnectionManager().getDataPort())___		_		__		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		final long memorySize__		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)__		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float fraction = configuration.getFloat(_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__			checkConfigParameter(fraction > 0.0f && fraction < 1.0f, fraction,_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						fraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , fraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - fraction) * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						fraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", fraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskExecutorConfig.getNumberOfSlots(),_				taskExecutorConfig.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}__		_		final IOManager ioManager = new IOManagerAsync(taskExecutorConfig.getTmpDirPaths())___		return new TaskExecutor.TaskManagerComponents(taskManagerLocation, memoryManager, ioManager, network)__	};creates,and,returns,the,task,manager,components,param,resource,id,resource,id,of,the,task,manager,param,task,manager,address,address,of,the,task,manager,param,task,executor,config,task,manager,configuration,param,configuration,of,flink,return,task,manager,components,throws,exception;private,static,task,executor,task,manager,components,create,task,manager,components,resource,id,resource,id,inet,address,task,manager,address,task,executor,configuration,task,executor,config,configuration,configuration,throws,exception,memory,type,mem,type,task,executor,config,get,network,config,memory,type,check,temp,dirs,task,executor,config,get,tmp,dir,paths,network,environment,configuration,network,environment,configuration,task,executor,config,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,is,defined,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,get,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,network,environment,configuration,netty,config,is,defined,netty,config,netty,config,network,environment,configuration,netty,config,get,int,num,network,threads,network,environment,configuration,query,server,network,threads,0,netty,config,get,number,of,slots,network,environment,configuration,query,server,network,threads,int,num,query,threads,network,environment,configuration,query,server,query,threads,0,netty,config,get,number,of,slots,network,environment,configuration,query,server,query,threads,kv,state,server,new,kv,state,server,task,manager,address,network,environment,configuration,query,server,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,final,network,environment,network,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partitin,request,max,backoff,network,start,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,address,network,get,connection,manager,get,data,port,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,long,memory,size,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,fraction,0,0f,fraction,1,0f,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,fraction,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,executor,config,get,number,of,slots,task,executor,config,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,final,iomanager,io,manager,new,iomanager,async,task,executor,config,get,tmp,dir,paths,return,new,task,executor,task,manager,components,task,manager,location,memory,manager,io,manager,network
TaskExecutor -> private static TaskExecutor.TaskManagerComponents createTaskManagerComponents( 		ResourceID resourceID, 		InetAddress taskManagerAddress, 		TaskExecutorConfiguration taskExecutorConfig, 		Configuration configuration) throws Exception;1482522860;Creates and returns the task manager components.__@param resourceID resource ID of the task manager_@param taskManagerAddress address of the task manager_@param taskExecutorConfig task manager configuration_@param configuration of Flink_@return task manager components_@throws Exception;private static TaskExecutor.TaskManagerComponents createTaskManagerComponents(_		ResourceID resourceID,_		InetAddress taskManagerAddress,_		TaskExecutorConfiguration taskExecutorConfig,_		Configuration configuration) throws Exception {_		MemoryType memType = taskExecutorConfig.getNetworkConfig().memoryType()___		_		checkTempDirs(taskExecutorConfig.getTmpDirPaths())___		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskExecutorConfig.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig().isDefined()) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig().get())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		KvStateServer kvStateServer___		if (networkEnvironmentConfiguration.nettyConfig().isDefined()) {_			NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig().get()___			int numNetworkThreads = networkEnvironmentConfiguration.queryServerNetworkThreads() == 0 ?_				nettyConfig.getNumberOfSlots() : networkEnvironmentConfiguration.queryServerNetworkThreads()___			int numQueryThreads = networkEnvironmentConfiguration.queryServerQueryThreads() == 0 ?_				nettyConfig.getNumberOfSlots() : networkEnvironmentConfiguration.queryServerQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerAddress,_				networkEnvironmentConfiguration.queryServerPort(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		final NetworkEnvironment network = new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitinRequestMaxBackoff())___		network.start()___		TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerAddress,_			network.getConnectionManager().getDataPort())___		_		__		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		final long memorySize__		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)__		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float fraction = configuration.getFloat(_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__			checkConfigParameter(fraction > 0.0f && fraction < 1.0f, fraction,_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						fraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , fraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - fraction) * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						fraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", fraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskExecutorConfig.getNumberOfSlots(),_				taskExecutorConfig.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}__		_		final IOManager ioManager = new IOManagerAsync(taskExecutorConfig.getTmpDirPaths())___		return new TaskExecutor.TaskManagerComponents(taskManagerLocation, memoryManager, ioManager, network)__	};creates,and,returns,the,task,manager,components,param,resource,id,resource,id,of,the,task,manager,param,task,manager,address,address,of,the,task,manager,param,task,executor,config,task,manager,configuration,param,configuration,of,flink,return,task,manager,components,throws,exception;private,static,task,executor,task,manager,components,create,task,manager,components,resource,id,resource,id,inet,address,task,manager,address,task,executor,configuration,task,executor,config,configuration,configuration,throws,exception,memory,type,mem,type,task,executor,config,get,network,config,memory,type,check,temp,dirs,task,executor,config,get,tmp,dir,paths,network,environment,configuration,network,environment,configuration,task,executor,config,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,is,defined,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,get,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,network,environment,configuration,netty,config,is,defined,netty,config,netty,config,network,environment,configuration,netty,config,get,int,num,network,threads,network,environment,configuration,query,server,network,threads,0,netty,config,get,number,of,slots,network,environment,configuration,query,server,network,threads,int,num,query,threads,network,environment,configuration,query,server,query,threads,0,netty,config,get,number,of,slots,network,environment,configuration,query,server,query,threads,kv,state,server,new,kv,state,server,task,manager,address,network,environment,configuration,query,server,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,final,network,environment,network,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partitin,request,max,backoff,network,start,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,address,network,get,connection,manager,get,data,port,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,long,memory,size,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,fraction,0,0f,fraction,1,0f,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,fraction,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,executor,config,get,number,of,slots,task,executor,config,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,final,iomanager,io,manager,new,iomanager,async,task,executor,config,get,tmp,dir,paths,return,new,task,executor,task,manager,components,task,manager,location,memory,manager,io,manager,network
TaskExecutor -> private static TaskExecutor.TaskManagerComponents createTaskManagerComponents( 		ResourceID resourceID, 		InetAddress taskManagerAddress, 		TaskExecutorConfiguration taskExecutorConfig, 		Configuration configuration) throws Exception;1482522860;Creates and returns the task manager components.__@param resourceID resource ID of the task manager_@param taskManagerAddress address of the task manager_@param taskExecutorConfig task manager configuration_@param configuration of Flink_@return task manager components_@throws Exception;private static TaskExecutor.TaskManagerComponents createTaskManagerComponents(_		ResourceID resourceID,_		InetAddress taskManagerAddress,_		TaskExecutorConfiguration taskExecutorConfig,_		Configuration configuration) throws Exception {_		MemoryType memType = taskExecutorConfig.getNetworkConfig().memoryType()___		_		checkTempDirs(taskExecutorConfig.getTmpDirPaths())___		NetworkEnvironmentConfiguration networkEnvironmentConfiguration = taskExecutorConfig.getNetworkConfig()___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			networkEnvironmentConfiguration.numNetworkBuffers(),_			networkEnvironmentConfiguration.networkBufferSize(),_			networkEnvironmentConfiguration.memoryType())___		ConnectionManager connectionManager___		if (networkEnvironmentConfiguration.nettyConfig().isDefined()) {_			connectionManager = new NettyConnectionManager(networkEnvironmentConfiguration.nettyConfig().get())__		} else {_			connectionManager = new LocalConnectionManager()__		}__		ResultPartitionManager resultPartitionManager = new ResultPartitionManager()__		TaskEventDispatcher taskEventDispatcher = new TaskEventDispatcher()___		KvStateRegistry kvStateRegistry = new KvStateRegistry()___		KvStateServer kvStateServer___		if (networkEnvironmentConfiguration.nettyConfig().isDefined()) {_			NettyConfig nettyConfig = networkEnvironmentConfiguration.nettyConfig().get()___			int numNetworkThreads = networkEnvironmentConfiguration.queryServerNetworkThreads() == 0 ?_				nettyConfig.getNumberOfSlots() : networkEnvironmentConfiguration.queryServerNetworkThreads()___			int numQueryThreads = networkEnvironmentConfiguration.queryServerQueryThreads() == 0 ?_				nettyConfig.getNumberOfSlots() : networkEnvironmentConfiguration.queryServerQueryThreads()___			kvStateServer = new KvStateServer(_				taskManagerAddress,_				networkEnvironmentConfiguration.queryServerPort(),_				numNetworkThreads,_				numQueryThreads,_				kvStateRegistry,_				new DisabledKvStateRequestStats())__		} else {_			kvStateServer = null__		}__		_		final NetworkEnvironment network = new NetworkEnvironment(_			networkBufferPool,_			connectionManager,_			resultPartitionManager,_			taskEventDispatcher,_			kvStateRegistry,_			kvStateServer,_			networkEnvironmentConfiguration.ioMode(),_			networkEnvironmentConfiguration.partitionRequestInitialBackoff(),_			networkEnvironmentConfiguration.partitinRequestMaxBackoff())___		network.start()___		TaskManagerLocation taskManagerLocation = new TaskManagerLocation(_			resourceID,_			taskManagerAddress,_			network.getConnectionManager().getDataPort())___		_		__		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		final long memorySize__		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)__		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float fraction = configuration.getFloat(_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__			checkConfigParameter(fraction > 0.0f && fraction < 1.0f, fraction,_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						fraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , fraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - fraction) * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						fraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", fraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskExecutorConfig.getNumberOfSlots(),_				taskExecutorConfig.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}__		_		final IOManager ioManager = new IOManagerAsync(taskExecutorConfig.getTmpDirPaths())___		return new TaskExecutor.TaskManagerComponents(taskManagerLocation, memoryManager, ioManager, network)__	};creates,and,returns,the,task,manager,components,param,resource,id,resource,id,of,the,task,manager,param,task,manager,address,address,of,the,task,manager,param,task,executor,config,task,manager,configuration,param,configuration,of,flink,return,task,manager,components,throws,exception;private,static,task,executor,task,manager,components,create,task,manager,components,resource,id,resource,id,inet,address,task,manager,address,task,executor,configuration,task,executor,config,configuration,configuration,throws,exception,memory,type,mem,type,task,executor,config,get,network,config,memory,type,check,temp,dirs,task,executor,config,get,tmp,dir,paths,network,environment,configuration,network,environment,configuration,task,executor,config,get,network,config,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,network,environment,configuration,num,network,buffers,network,environment,configuration,network,buffer,size,network,environment,configuration,memory,type,connection,manager,connection,manager,if,network,environment,configuration,netty,config,is,defined,connection,manager,new,netty,connection,manager,network,environment,configuration,netty,config,get,else,connection,manager,new,local,connection,manager,result,partition,manager,result,partition,manager,new,result,partition,manager,task,event,dispatcher,task,event,dispatcher,new,task,event,dispatcher,kv,state,registry,kv,state,registry,new,kv,state,registry,kv,state,server,kv,state,server,if,network,environment,configuration,netty,config,is,defined,netty,config,netty,config,network,environment,configuration,netty,config,get,int,num,network,threads,network,environment,configuration,query,server,network,threads,0,netty,config,get,number,of,slots,network,environment,configuration,query,server,network,threads,int,num,query,threads,network,environment,configuration,query,server,query,threads,0,netty,config,get,number,of,slots,network,environment,configuration,query,server,query,threads,kv,state,server,new,kv,state,server,task,manager,address,network,environment,configuration,query,server,port,num,network,threads,num,query,threads,kv,state,registry,new,disabled,kv,state,request,stats,else,kv,state,server,null,final,network,environment,network,new,network,environment,network,buffer,pool,connection,manager,result,partition,manager,task,event,dispatcher,kv,state,registry,kv,state,server,network,environment,configuration,io,mode,network,environment,configuration,partition,request,initial,backoff,network,environment,configuration,partitin,request,max,backoff,network,start,task,manager,location,task,manager,location,new,task,manager,location,resource,id,task,manager,address,network,get,connection,manager,get,data,port,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,long,memory,size,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,fraction,0,0f,fraction,1,0f,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,fraction,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,executor,config,get,number,of,slots,task,executor,config,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,final,iomanager,io,manager,new,iomanager,async,task,executor,config,get,tmp,dir,paths,return,new,task,executor,task,manager,components,task,manager,location,memory,manager,io,manager,network
TaskExecutor -> private static void checkConfigParameter( 		boolean condition, 		Object parameter, 		String name, 		String errorMessage);1482522858;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition    The condition that must hold. If the condition is false, an exception is thrown._@param parameter    The parameter value. Will be shown in the exception message._@param name         The name of the config parameter. Will be shown in the exception message._@param errorMessage The optional custom error message to append to the exception message.;private static void checkConfigParameter(_		boolean condition,_		Object parameter,_		String name,_		String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskExecutor -> private static void checkConfigParameter( 		boolean condition, 		Object parameter, 		String name, 		String errorMessage);1482522858;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition    The condition that must hold. If the condition is false, an exception is thrown._@param parameter    The parameter value. Will be shown in the exception message._@param name         The name of the config parameter. Will be shown in the exception message._@param errorMessage The optional custom error message to append to the exception message.;private static void checkConfigParameter(_		boolean condition,_		Object parameter,_		String name,_		String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskExecutor -> private static void checkConfigParameter( 		boolean condition, 		Object parameter, 		String name, 		String errorMessage);1482522858;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition    The condition that must hold. If the condition is false, an exception is thrown._@param parameter    The parameter value. Will be shown in the exception message._@param name         The name of the config parameter. Will be shown in the exception message._@param errorMessage The optional custom error message to append to the exception message.;private static void checkConfigParameter(_		boolean condition,_		Object parameter,_		String name,_		String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskExecutor -> private static void checkConfigParameter( 		boolean condition, 		Object parameter, 		String name, 		String errorMessage);1482522859;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition    The condition that must hold. If the condition is false, an exception is thrown._@param parameter    The parameter value. Will be shown in the exception message._@param name         The name of the config parameter. Will be shown in the exception message._@param errorMessage The optional custom error message to append to the exception message.;private static void checkConfigParameter(_		boolean condition,_		Object parameter,_		String name,_		String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskExecutor -> private static void checkConfigParameter( 		boolean condition, 		Object parameter, 		String name, 		String errorMessage);1482522859;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition    The condition that must hold. If the condition is false, an exception is thrown._@param parameter    The parameter value. Will be shown in the exception message._@param name         The name of the config parameter. Will be shown in the exception message._@param errorMessage The optional custom error message to append to the exception message.;private static void checkConfigParameter(_		boolean condition,_		Object parameter,_		String name,_		String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskExecutor -> private static void checkConfigParameter( 		boolean condition, 		Object parameter, 		String name, 		String errorMessage);1482522859;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition    The condition that must hold. If the condition is false, an exception is thrown._@param parameter    The parameter value. Will be shown in the exception message._@param name         The name of the config parameter. Will be shown in the exception message._@param errorMessage The optional custom error message to append to the exception message.;private static void checkConfigParameter(_		boolean condition,_		Object parameter,_		String name,_		String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskExecutor -> private static void checkConfigParameter( 		boolean condition, 		Object parameter, 		String name, 		String errorMessage);1482522860;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition    The condition that must hold. If the condition is false, an exception is thrown._@param parameter    The parameter value. Will be shown in the exception message._@param name         The name of the config parameter. Will be shown in the exception message._@param errorMessage The optional custom error message to append to the exception message.;private static void checkConfigParameter(_		boolean condition,_		Object parameter,_		String name,_		String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskExecutor -> private static void checkConfigParameter( 		boolean condition, 		Object parameter, 		String name, 		String errorMessage);1482522860;Validates a condition for a config parameter and displays a standard exception, if the_the condition does not hold.__@param condition    The condition that must hold. If the condition is false, an exception is thrown._@param parameter    The parameter value. Will be shown in the exception message._@param name         The name of the config parameter. Will be shown in the exception message._@param errorMessage The optional custom error message to append to the exception message.;private static void checkConfigParameter(_		boolean condition,_		Object parameter,_		String name,_		String errorMessage) {_		if (!condition) {_			throw new IllegalConfigurationException("Invalid configuration value for " + name + " : " + parameter + " - " + errorMessage)__		}_	};validates,a,condition,for,a,config,parameter,and,displays,a,standard,exception,if,the,the,condition,does,not,hold,param,condition,the,condition,that,must,hold,if,the,condition,is,false,an,exception,is,thrown,param,parameter,the,parameter,value,will,be,shown,in,the,exception,message,param,name,the,name,of,the,config,parameter,will,be,shown,in,the,exception,message,param,error,message,the,optional,custom,error,message,to,append,to,the,exception,message;private,static,void,check,config,parameter,boolean,condition,object,parameter,string,name,string,error,message,if,condition,throw,new,illegal,configuration,exception,invalid,configuration,value,for,name,parameter,error,message
TaskExecutor -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522858;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws Exception Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,exception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskExecutor -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522858;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws Exception Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,exception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskExecutor -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522858;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws Exception Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,exception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskExecutor -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522859;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws Exception Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,exception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskExecutor -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522859;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws Exception Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,exception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskExecutor -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522859;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws Exception Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,exception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskExecutor -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522860;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws Exception Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,exception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskExecutor -> private static void checkTempDirs(String[] tmpDirs) throws IOException;1482522860;Validates that all the directories denoted by the strings do actually exist, are proper_directories (not files), and are writable.__@param tmpDirs The array of directory paths to check._@throws Exception Thrown if any of the directories does not exist or is not writable_or is a file, rather than a directory.;private static void checkTempDirs(String[] tmpDirs) throws IOException {_		for (String dir : tmpDirs) {_			if (dir != null && !dir.equals("")) {_				File file = new File(dir)__				if (!file.exists()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " does not exist.")__				}_				if (!file.isDirectory()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not a directory.")__				}_				if (!file.canWrite()) {_					throw new IOException("Temporary file directory " + file.getAbsolutePath() + " is not writable.")__				}__				if (LOG.isInfoEnabled()) {_					long totalSpaceGb = file.getTotalSpace() >> 30__					long usableSpaceGb = file.getUsableSpace() >> 30__					double usablePercentage = (double)usableSpaceGb / totalSpaceGb * 100__					String path = file.getAbsolutePath()__					LOG.info(String.format("Temporary file directory '%s': total %d GB, " + "usable %d GB (%.2f%% usable)",_						path, totalSpaceGb, usableSpaceGb, usablePercentage))__				}_			} else {_				throw new IllegalArgumentException("Temporary file directory #$id is null.")__			}_		}_	};validates,that,all,the,directories,denoted,by,the,strings,do,actually,exist,are,proper,directories,not,files,and,are,writable,param,tmp,dirs,the,array,of,directory,paths,to,check,throws,exception,thrown,if,any,of,the,directories,does,not,exist,or,is,not,writable,or,is,a,file,rather,than,a,directory;private,static,void,check,temp,dirs,string,tmp,dirs,throws,ioexception,for,string,dir,tmp,dirs,if,dir,null,dir,equals,file,file,new,file,dir,if,file,exists,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,does,not,exist,if,file,is,directory,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,a,directory,if,file,can,write,throw,new,ioexception,temporary,file,directory,file,get,absolute,path,is,not,writable,if,log,is,info,enabled,long,total,space,gb,file,get,total,space,30,long,usable,space,gb,file,get,usable,space,30,double,usable,percentage,double,usable,space,gb,total,space,gb,100,string,path,file,get,absolute,path,log,info,string,format,temporary,file,directory,s,total,d,gb,usable,d,gb,2f,usable,path,total,space,gb,usable,space,gb,usable,percentage,else,throw,new,illegal,argument,exception,temporary,file,directory,id,is,null
TaskExecutor -> private static void runTaskManager( 		String taskManagerHostname, 		ResourceID resourceID, 		int actorSystemPort, 		final Configuration configuration) throws Exception;1482522858;Starts and runs the TaskManager. Brings up an actor system for the TaskManager and its_actors, starts the TaskManager's services (library cache, shuffle network stack, ...),_and starts the TaskManager itself._<p/>_This method will also spawn a process reaper for the TaskManager (kill the process if_the actor fails) and optionally start the JVM memory logging thread.__@param taskManagerHostname The hostname/address of the interface where the actor system_will communicate._@param resourceID          The id of the resource which the task manager will run on._@param actorSystemPort   The port at which the actor system will communicate._@param configuration       The configuration for the TaskManager.;private static void runTaskManager(_		String taskManagerHostname,_		ResourceID resourceID,_		int actorSystemPort,_		final Configuration configuration) throws Exception {__		LOG.info("Starting TaskManager")___		__		LOG.info("Starting TaskManager actor system at " +_			NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort))___		final ActorSystem taskManagerSystem__		try {_			Tuple2<String, Object> address = new Tuple2<String, Object>(taskManagerHostname, actorSystemPort)__			Config akkaConfig = AkkaUtils.getAkkaConfig(configuration, new Some<>(address))__			LOG.debug("Using akka configuration\n " + akkaConfig)__			taskManagerSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort)__					throw new IOException("Unable to bind TaskManager actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		_		final Timeout timeout = new Timeout(AkkaUtils.getTimeout(configuration).toMillis(), TimeUnit.MILLISECONDS)__		final AkkaRpcService akkaRpcService = new AkkaRpcService(taskManagerSystem, timeout)___		_		final HighAvailabilityServices haServices = new HighAvailabilityServices() {_			@Override_			public LeaderRetrievalService getResourceManagerLeaderRetriever() throws Exception {_				return LeaderRetrievalUtils.createLeaderRetrievalService(configuration)__			}__			@Override_			public LeaderElectionService getResourceManagerLeaderElectionService() throws Exception {_				return null__			}__			@Override_			public LeaderElectionService getJobMasterLeaderElectionService(JobID jobID) throws Exception {_				return null__			}_		}___		_		_		try {_			LOG.info("Starting TaskManager actor")__			TaskExecutor taskExecutor = startTaskManagerComponentsAndActor(_				configuration,_				resourceID,_				akkaRpcService,_				taskManagerHostname,_				haServices,_				false)___			taskExecutor.start()___			_			if (LOG.isInfoEnabled() && configuration.getBoolean(_				ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD,_				ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD)) {_				LOG.info("Starting periodic memory usage logger")___				long interval = configuration.getLong(_					ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS,_					ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS)___				MemoryLogger logger = new MemoryLogger(LOG, interval, taskManagerSystem)__				logger.start()__			}__			_			taskManagerSystem.awaitTermination()__		} catch (Throwable t) {_			LOG.error("Error while starting up taskManager", t)__			try {_				taskManagerSystem.shutdown()__			} catch (Throwable tt) {_				LOG.warn("Could not cleanly shut down actor system", tt)__			}_			throw t__		}_	};starts,and,runs,the,task,manager,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,p,this,method,will,also,spawn,a,process,reaper,for,the,task,manager,kill,the,process,if,the,actor,fails,and,optionally,start,the,jvm,memory,logging,thread,param,task,manager,hostname,the,hostname,address,of,the,interface,where,the,actor,system,will,communicate,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,actor,system,port,the,port,at,which,the,actor,system,will,communicate,param,configuration,the,configuration,for,the,task,manager;private,static,void,run,task,manager,string,task,manager,hostname,resource,id,resource,id,int,actor,system,port,final,configuration,configuration,throws,exception,log,info,starting,task,manager,log,info,starting,task,manager,actor,system,at,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,final,actor,system,task,manager,system,try,tuple2,string,object,address,new,tuple2,string,object,task,manager,hostname,actor,system,port,config,akka,config,akka,utils,get,akka,config,configuration,new,some,address,log,debug,using,akka,configuration,n,akka,config,task,manager,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,throw,new,ioexception,unable,to,bind,task,manager,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,timeout,timeout,new,timeout,akka,utils,get,timeout,configuration,to,millis,time,unit,milliseconds,final,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,task,manager,system,timeout,final,high,availability,services,ha,services,new,high,availability,services,override,public,leader,retrieval,service,get,resource,manager,leader,retriever,throws,exception,return,leader,retrieval,utils,create,leader,retrieval,service,configuration,override,public,leader,election,service,get,resource,manager,leader,election,service,throws,exception,return,null,override,public,leader,election,service,get,job,master,leader,election,service,job,id,job,id,throws,exception,return,null,try,log,info,starting,task,manager,actor,task,executor,task,executor,start,task,manager,components,and,actor,configuration,resource,id,akka,rpc,service,task,manager,hostname,ha,services,false,task,executor,start,if,log,is,info,enabled,configuration,get,boolean,config,constants,config,constants,log,info,starting,periodic,memory,usage,logger,long,interval,configuration,get,long,config,constants,config,constants,memory,logger,logger,new,memory,logger,log,interval,task,manager,system,logger,start,task,manager,system,await,termination,catch,throwable,t,log,error,error,while,starting,up,task,manager,t,try,task,manager,system,shutdown,catch,throwable,tt,log,warn,could,not,cleanly,shut,down,actor,system,tt,throw,t
TaskExecutor -> private static void runTaskManager( 		String taskManagerHostname, 		ResourceID resourceID, 		int actorSystemPort, 		final Configuration configuration) throws Exception;1482522858;Starts and runs the TaskManager. Brings up an actor system for the TaskManager and its_actors, starts the TaskManager's services (library cache, shuffle network stack, ...),_and starts the TaskManager itself._<p/>_This method will also spawn a process reaper for the TaskManager (kill the process if_the actor fails) and optionally start the JVM memory logging thread.__@param taskManagerHostname The hostname/address of the interface where the actor system_will communicate._@param resourceID          The id of the resource which the task manager will run on._@param actorSystemPort   The port at which the actor system will communicate._@param configuration       The configuration for the TaskManager.;private static void runTaskManager(_		String taskManagerHostname,_		ResourceID resourceID,_		int actorSystemPort,_		final Configuration configuration) throws Exception {__		LOG.info("Starting TaskManager")___		__		LOG.info("Starting TaskManager actor system at " +_			NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort))___		final ActorSystem taskManagerSystem__		try {_			Tuple2<String, Object> address = new Tuple2<String, Object>(taskManagerHostname, actorSystemPort)__			Config akkaConfig = AkkaUtils.getAkkaConfig(configuration, new Some<>(address))__			LOG.debug("Using akka configuration\n " + akkaConfig)__			taskManagerSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort)__					throw new IOException("Unable to bind TaskManager actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		_		final Timeout timeout = new Timeout(AkkaUtils.getTimeout(configuration).toMillis(), TimeUnit.MILLISECONDS)__		final AkkaRpcService akkaRpcService = new AkkaRpcService(taskManagerSystem, timeout)___		_		final HighAvailabilityServices haServices = new HighAvailabilityServices() {_			@Override_			public LeaderRetrievalService getResourceManagerLeaderRetriever() throws Exception {_				return LeaderRetrievalUtils.createLeaderRetrievalService(configuration)__			}__			@Override_			public LeaderElectionService getResourceManagerLeaderElectionService() throws Exception {_				return null__			}__			@Override_			public LeaderElectionService getJobMasterLeaderElectionService(JobID jobID) throws Exception {_				return null__			}_		}___		_		_		try {_			LOG.info("Starting TaskManager actor")__			TaskExecutor taskExecutor = startTaskManagerComponentsAndActor(_				configuration,_				resourceID,_				akkaRpcService,_				taskManagerHostname,_				haServices,_				false)___			taskExecutor.start()___			_			if (LOG.isInfoEnabled() && configuration.getBoolean(_				ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD,_				ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD)) {_				LOG.info("Starting periodic memory usage logger")___				long interval = configuration.getLong(_					ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS,_					ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS)___				MemoryLogger logger = new MemoryLogger(LOG, interval, taskManagerSystem)__				logger.start()__			}__			_			taskManagerSystem.awaitTermination()__		} catch (Throwable t) {_			LOG.error("Error while starting up taskManager", t)__			try {_				taskManagerSystem.shutdown()__			} catch (Throwable tt) {_				LOG.warn("Could not cleanly shut down actor system", tt)__			}_			throw t__		}_	};starts,and,runs,the,task,manager,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,p,this,method,will,also,spawn,a,process,reaper,for,the,task,manager,kill,the,process,if,the,actor,fails,and,optionally,start,the,jvm,memory,logging,thread,param,task,manager,hostname,the,hostname,address,of,the,interface,where,the,actor,system,will,communicate,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,actor,system,port,the,port,at,which,the,actor,system,will,communicate,param,configuration,the,configuration,for,the,task,manager;private,static,void,run,task,manager,string,task,manager,hostname,resource,id,resource,id,int,actor,system,port,final,configuration,configuration,throws,exception,log,info,starting,task,manager,log,info,starting,task,manager,actor,system,at,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,final,actor,system,task,manager,system,try,tuple2,string,object,address,new,tuple2,string,object,task,manager,hostname,actor,system,port,config,akka,config,akka,utils,get,akka,config,configuration,new,some,address,log,debug,using,akka,configuration,n,akka,config,task,manager,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,throw,new,ioexception,unable,to,bind,task,manager,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,timeout,timeout,new,timeout,akka,utils,get,timeout,configuration,to,millis,time,unit,milliseconds,final,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,task,manager,system,timeout,final,high,availability,services,ha,services,new,high,availability,services,override,public,leader,retrieval,service,get,resource,manager,leader,retriever,throws,exception,return,leader,retrieval,utils,create,leader,retrieval,service,configuration,override,public,leader,election,service,get,resource,manager,leader,election,service,throws,exception,return,null,override,public,leader,election,service,get,job,master,leader,election,service,job,id,job,id,throws,exception,return,null,try,log,info,starting,task,manager,actor,task,executor,task,executor,start,task,manager,components,and,actor,configuration,resource,id,akka,rpc,service,task,manager,hostname,ha,services,false,task,executor,start,if,log,is,info,enabled,configuration,get,boolean,config,constants,config,constants,log,info,starting,periodic,memory,usage,logger,long,interval,configuration,get,long,config,constants,config,constants,memory,logger,logger,new,memory,logger,log,interval,task,manager,system,logger,start,task,manager,system,await,termination,catch,throwable,t,log,error,error,while,starting,up,task,manager,t,try,task,manager,system,shutdown,catch,throwable,tt,log,warn,could,not,cleanly,shut,down,actor,system,tt,throw,t
TaskExecutor -> private static void runTaskManager( 		String taskManagerHostname, 		ResourceID resourceID, 		int actorSystemPort, 		final Configuration configuration) throws Exception;1482522858;Starts and runs the TaskManager. Brings up an actor system for the TaskManager and its_actors, starts the TaskManager's services (library cache, shuffle network stack, ...),_and starts the TaskManager itself._<p/>_This method will also spawn a process reaper for the TaskManager (kill the process if_the actor fails) and optionally start the JVM memory logging thread.__@param taskManagerHostname The hostname/address of the interface where the actor system_will communicate._@param resourceID          The id of the resource which the task manager will run on._@param actorSystemPort   The port at which the actor system will communicate._@param configuration       The configuration for the TaskManager.;private static void runTaskManager(_		String taskManagerHostname,_		ResourceID resourceID,_		int actorSystemPort,_		final Configuration configuration) throws Exception {__		LOG.info("Starting TaskManager")___		__		LOG.info("Starting TaskManager actor system at " +_			NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort))___		final ActorSystem taskManagerSystem__		try {_			Tuple2<String, Object> address = new Tuple2<String, Object>(taskManagerHostname, actorSystemPort)__			Config akkaConfig = AkkaUtils.getAkkaConfig(configuration, new Some<>(address))__			LOG.debug("Using akka configuration\n " + akkaConfig)__			taskManagerSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort)__					throw new IOException("Unable to bind TaskManager actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		_		final Timeout timeout = new Timeout(AkkaUtils.getTimeout(configuration).toMillis(), TimeUnit.MILLISECONDS)__		final AkkaRpcService akkaRpcService = new AkkaRpcService(taskManagerSystem, timeout)___		_		final HighAvailabilityServices haServices = new HighAvailabilityServices() {_			@Override_			public LeaderRetrievalService getResourceManagerLeaderRetriever() throws Exception {_				return LeaderRetrievalUtils.createLeaderRetrievalService(configuration)__			}__			@Override_			public LeaderElectionService getResourceManagerLeaderElectionService() throws Exception {_				return null__			}__			@Override_			public LeaderElectionService getJobMasterLeaderElectionService(JobID jobID) throws Exception {_				return null__			}_		}___		_		_		try {_			LOG.info("Starting TaskManager actor")__			TaskExecutor taskExecutor = startTaskManagerComponentsAndActor(_				configuration,_				resourceID,_				akkaRpcService,_				taskManagerHostname,_				haServices,_				false)___			taskExecutor.start()___			_			if (LOG.isInfoEnabled() && configuration.getBoolean(_				ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD,_				ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD)) {_				LOG.info("Starting periodic memory usage logger")___				long interval = configuration.getLong(_					ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS,_					ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS)___				MemoryLogger logger = new MemoryLogger(LOG, interval, taskManagerSystem)__				logger.start()__			}__			_			taskManagerSystem.awaitTermination()__		} catch (Throwable t) {_			LOG.error("Error while starting up taskManager", t)__			try {_				taskManagerSystem.shutdown()__			} catch (Throwable tt) {_				LOG.warn("Could not cleanly shut down actor system", tt)__			}_			throw t__		}_	};starts,and,runs,the,task,manager,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,p,this,method,will,also,spawn,a,process,reaper,for,the,task,manager,kill,the,process,if,the,actor,fails,and,optionally,start,the,jvm,memory,logging,thread,param,task,manager,hostname,the,hostname,address,of,the,interface,where,the,actor,system,will,communicate,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,actor,system,port,the,port,at,which,the,actor,system,will,communicate,param,configuration,the,configuration,for,the,task,manager;private,static,void,run,task,manager,string,task,manager,hostname,resource,id,resource,id,int,actor,system,port,final,configuration,configuration,throws,exception,log,info,starting,task,manager,log,info,starting,task,manager,actor,system,at,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,final,actor,system,task,manager,system,try,tuple2,string,object,address,new,tuple2,string,object,task,manager,hostname,actor,system,port,config,akka,config,akka,utils,get,akka,config,configuration,new,some,address,log,debug,using,akka,configuration,n,akka,config,task,manager,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,throw,new,ioexception,unable,to,bind,task,manager,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,timeout,timeout,new,timeout,akka,utils,get,timeout,configuration,to,millis,time,unit,milliseconds,final,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,task,manager,system,timeout,final,high,availability,services,ha,services,new,high,availability,services,override,public,leader,retrieval,service,get,resource,manager,leader,retriever,throws,exception,return,leader,retrieval,utils,create,leader,retrieval,service,configuration,override,public,leader,election,service,get,resource,manager,leader,election,service,throws,exception,return,null,override,public,leader,election,service,get,job,master,leader,election,service,job,id,job,id,throws,exception,return,null,try,log,info,starting,task,manager,actor,task,executor,task,executor,start,task,manager,components,and,actor,configuration,resource,id,akka,rpc,service,task,manager,hostname,ha,services,false,task,executor,start,if,log,is,info,enabled,configuration,get,boolean,config,constants,config,constants,log,info,starting,periodic,memory,usage,logger,long,interval,configuration,get,long,config,constants,config,constants,memory,logger,logger,new,memory,logger,log,interval,task,manager,system,logger,start,task,manager,system,await,termination,catch,throwable,t,log,error,error,while,starting,up,task,manager,t,try,task,manager,system,shutdown,catch,throwable,tt,log,warn,could,not,cleanly,shut,down,actor,system,tt,throw,t
TaskExecutor -> private static void runTaskManager( 		String taskManagerHostname, 		ResourceID resourceID, 		int actorSystemPort, 		final Configuration configuration) throws Exception;1482522859;Starts and runs the TaskManager. Brings up an actor system for the TaskManager and its_actors, starts the TaskManager's services (library cache, shuffle network stack, ...),_and starts the TaskManager itself._<p/>_This method will also spawn a process reaper for the TaskManager (kill the process if_the actor fails) and optionally start the JVM memory logging thread.__@param taskManagerHostname The hostname/address of the interface where the actor system_will communicate._@param resourceID          The id of the resource which the task manager will run on._@param actorSystemPort   The port at which the actor system will communicate._@param configuration       The configuration for the TaskManager.;private static void runTaskManager(_		String taskManagerHostname,_		ResourceID resourceID,_		int actorSystemPort,_		final Configuration configuration) throws Exception {__		LOG.info("Starting TaskManager")___		__		LOG.info("Starting TaskManager actor system at " +_			NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort))___		final ActorSystem taskManagerSystem__		try {_			Tuple2<String, Object> address = new Tuple2<String, Object>(taskManagerHostname, actorSystemPort)__			Config akkaConfig = AkkaUtils.getAkkaConfig(configuration, new Some<>(address))__			LOG.debug("Using akka configuration\n " + akkaConfig)__			taskManagerSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof org.jboss.netty.channel.ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort)__					throw new IOException("Unable to bind TaskManager actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		_		final Timeout timeout = new Timeout(AkkaUtils.getTimeout(configuration).toMillis(), TimeUnit.MILLISECONDS)__		final AkkaRpcService akkaRpcService = new AkkaRpcService(taskManagerSystem, timeout)___		_		final HighAvailabilityServices haServices = new HighAvailabilityServices() {_			@Override_			public LeaderRetrievalService getResourceManagerLeaderRetriever() throws Exception {_				return LeaderRetrievalUtils.createLeaderRetrievalService(configuration)__			}__			@Override_			public LeaderElectionService getResourceManagerLeaderElectionService() throws Exception {_				return null__			}__			@Override_			public LeaderElectionService getJobMasterLeaderElectionService(JobID jobID) throws Exception {_				return null__			}_		}___		_		_		try {_			LOG.info("Starting TaskManager actor")__			TaskExecutor taskExecutor = startTaskManagerComponentsAndActor(_				configuration,_				resourceID,_				akkaRpcService,_				taskManagerHostname,_				haServices,_				false)___			taskExecutor.start()___			_			if (LOG.isInfoEnabled() && configuration.getBoolean(_				ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD,_				ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD)) {_				LOG.info("Starting periodic memory usage logger")___				long interval = configuration.getLong(_					ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS,_					ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS)___				MemoryLogger logger = new MemoryLogger(LOG, interval, taskManagerSystem)__				logger.start()__			}__			_			taskManagerSystem.awaitTermination()__		} catch (Throwable t) {_			LOG.error("Error while starting up taskManager", t)__			try {_				taskManagerSystem.shutdown()__			} catch (Throwable tt) {_				LOG.warn("Could not cleanly shut down actor system", tt)__			}_			throw t__		}_	};starts,and,runs,the,task,manager,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,p,this,method,will,also,spawn,a,process,reaper,for,the,task,manager,kill,the,process,if,the,actor,fails,and,optionally,start,the,jvm,memory,logging,thread,param,task,manager,hostname,the,hostname,address,of,the,interface,where,the,actor,system,will,communicate,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,actor,system,port,the,port,at,which,the,actor,system,will,communicate,param,configuration,the,configuration,for,the,task,manager;private,static,void,run,task,manager,string,task,manager,hostname,resource,id,resource,id,int,actor,system,port,final,configuration,configuration,throws,exception,log,info,starting,task,manager,log,info,starting,task,manager,actor,system,at,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,final,actor,system,task,manager,system,try,tuple2,string,object,address,new,tuple2,string,object,task,manager,hostname,actor,system,port,config,akka,config,akka,utils,get,akka,config,configuration,new,some,address,log,debug,using,akka,configuration,n,akka,config,task,manager,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,org,jboss,netty,channel,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,throw,new,ioexception,unable,to,bind,task,manager,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,timeout,timeout,new,timeout,akka,utils,get,timeout,configuration,to,millis,time,unit,milliseconds,final,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,task,manager,system,timeout,final,high,availability,services,ha,services,new,high,availability,services,override,public,leader,retrieval,service,get,resource,manager,leader,retriever,throws,exception,return,leader,retrieval,utils,create,leader,retrieval,service,configuration,override,public,leader,election,service,get,resource,manager,leader,election,service,throws,exception,return,null,override,public,leader,election,service,get,job,master,leader,election,service,job,id,job,id,throws,exception,return,null,try,log,info,starting,task,manager,actor,task,executor,task,executor,start,task,manager,components,and,actor,configuration,resource,id,akka,rpc,service,task,manager,hostname,ha,services,false,task,executor,start,if,log,is,info,enabled,configuration,get,boolean,config,constants,config,constants,log,info,starting,periodic,memory,usage,logger,long,interval,configuration,get,long,config,constants,config,constants,memory,logger,logger,new,memory,logger,log,interval,task,manager,system,logger,start,task,manager,system,await,termination,catch,throwable,t,log,error,error,while,starting,up,task,manager,t,try,task,manager,system,shutdown,catch,throwable,tt,log,warn,could,not,cleanly,shut,down,actor,system,tt,throw,t
TaskExecutor -> private static void runTaskManager( 		String taskManagerHostname, 		ResourceID resourceID, 		int actorSystemPort, 		final Configuration configuration) throws Exception;1482522859;Starts and runs the TaskManager. Brings up an actor system for the TaskManager and its_actors, starts the TaskManager's services (library cache, shuffle network stack, ...),_and starts the TaskManager itself._<p/>_This method will also spawn a process reaper for the TaskManager (kill the process if_the actor fails) and optionally start the JVM memory logging thread.__@param taskManagerHostname The hostname/address of the interface where the actor system_will communicate._@param resourceID          The id of the resource which the task manager will run on._@param actorSystemPort   The port at which the actor system will communicate._@param configuration       The configuration for the TaskManager.;private static void runTaskManager(_		String taskManagerHostname,_		ResourceID resourceID,_		int actorSystemPort,_		final Configuration configuration) throws Exception {__		LOG.info("Starting TaskManager")___		__		LOG.info("Starting TaskManager actor system at " +_			NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort))___		final ActorSystem taskManagerSystem__		try {_			Tuple2<String, Object> address = new Tuple2<String, Object>(taskManagerHostname, actorSystemPort)__			Config akkaConfig = AkkaUtils.getAkkaConfig(configuration, new Some<>(address))__			LOG.debug("Using akka configuration\n " + akkaConfig)__			taskManagerSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					String address = NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort)__					throw new IOException("Unable to bind TaskManager actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		_		final Time timeout = Time.milliseconds(AkkaUtils.getTimeout(configuration).toMillis())__		final AkkaRpcService akkaRpcService = new AkkaRpcService(taskManagerSystem, timeout)___		_		final HighAvailabilityServices haServices = new HighAvailabilityServices() {_			@Override_			public LeaderRetrievalService getResourceManagerLeaderRetriever() throws Exception {_				return LeaderRetrievalUtils.createLeaderRetrievalService(configuration)__			}__			@Override_			public LeaderElectionService getResourceManagerLeaderElectionService() throws Exception {_				return null__			}__			@Override_			public LeaderElectionService getJobMasterLeaderElectionService(JobID jobID) throws Exception {_				return null__			}_		}___		_		_		try {_			LOG.info("Starting TaskManager actor")__			TaskExecutor taskExecutor = startTaskManagerComponentsAndActor(_				configuration,_				resourceID,_				akkaRpcService,_				taskManagerHostname,_				haServices,_				false)___			taskExecutor.start()___			_			if (LOG.isInfoEnabled() && configuration.getBoolean(_				ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD,_				ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD)) {_				LOG.info("Starting periodic memory usage logger")___				long interval = configuration.getLong(_					ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS,_					ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS)___				MemoryLogger logger = new MemoryLogger(LOG, interval, taskManagerSystem)__				logger.start()__			}__			_			taskManagerSystem.awaitTermination()__		} catch (Throwable t) {_			LOG.error("Error while starting up taskManager", t)__			try {_				taskManagerSystem.shutdown()__			} catch (Throwable tt) {_				LOG.warn("Could not cleanly shut down actor system", tt)__			}_			throw t__		}_	};starts,and,runs,the,task,manager,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,p,this,method,will,also,spawn,a,process,reaper,for,the,task,manager,kill,the,process,if,the,actor,fails,and,optionally,start,the,jvm,memory,logging,thread,param,task,manager,hostname,the,hostname,address,of,the,interface,where,the,actor,system,will,communicate,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,actor,system,port,the,port,at,which,the,actor,system,will,communicate,param,configuration,the,configuration,for,the,task,manager;private,static,void,run,task,manager,string,task,manager,hostname,resource,id,resource,id,int,actor,system,port,final,configuration,configuration,throws,exception,log,info,starting,task,manager,log,info,starting,task,manager,actor,system,at,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,final,actor,system,task,manager,system,try,tuple2,string,object,address,new,tuple2,string,object,task,manager,hostname,actor,system,port,config,akka,config,akka,utils,get,akka,config,configuration,new,some,address,log,debug,using,akka,configuration,n,akka,config,task,manager,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,string,address,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,throw,new,ioexception,unable,to,bind,task,manager,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,time,milliseconds,akka,utils,get,timeout,configuration,to,millis,final,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,task,manager,system,timeout,final,high,availability,services,ha,services,new,high,availability,services,override,public,leader,retrieval,service,get,resource,manager,leader,retriever,throws,exception,return,leader,retrieval,utils,create,leader,retrieval,service,configuration,override,public,leader,election,service,get,resource,manager,leader,election,service,throws,exception,return,null,override,public,leader,election,service,get,job,master,leader,election,service,job,id,job,id,throws,exception,return,null,try,log,info,starting,task,manager,actor,task,executor,task,executor,start,task,manager,components,and,actor,configuration,resource,id,akka,rpc,service,task,manager,hostname,ha,services,false,task,executor,start,if,log,is,info,enabled,configuration,get,boolean,config,constants,config,constants,log,info,starting,periodic,memory,usage,logger,long,interval,configuration,get,long,config,constants,config,constants,memory,logger,logger,new,memory,logger,log,interval,task,manager,system,logger,start,task,manager,system,await,termination,catch,throwable,t,log,error,error,while,starting,up,task,manager,t,try,task,manager,system,shutdown,catch,throwable,tt,log,warn,could,not,cleanly,shut,down,actor,system,tt,throw,t
TaskExecutor -> private static void runTaskManager( 		String taskManagerHostname, 		ResourceID resourceID, 		int actorSystemPort, 		final Configuration configuration) throws Exception;1482522859;Starts and runs the TaskManager. Brings up an actor system for the TaskManager and its_actors, starts the TaskManager's services (library cache, shuffle network stack, ...),_and starts the TaskManager itself._<p/>_This method will also spawn a process reaper for the TaskManager (kill the process if_the actor fails) and optionally start the JVM memory logging thread.__@param taskManagerHostname The hostname/address of the interface where the actor system_will communicate._@param resourceID          The id of the resource which the task manager will run on._@param actorSystemPort   The port at which the actor system will communicate._@param configuration       The configuration for the TaskManager.;private static void runTaskManager(_		String taskManagerHostname,_		ResourceID resourceID,_		int actorSystemPort,_		final Configuration configuration) throws Exception {__		LOG.info("Starting TaskManager")___		__		LOG.info("Starting TaskManager actor system at " +_			NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort))___		final ActorSystem taskManagerSystem__		try {_			Tuple2<String, Object> address = new Tuple2<String, Object>(taskManagerHostname, actorSystemPort)__			Config akkaConfig = AkkaUtils.getAkkaConfig(configuration, new Some<>(address))__			LOG.debug("Using akka configuration\n " + akkaConfig)__			taskManagerSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					String address = NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort)__					throw new IOException("Unable to bind TaskManager actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		_		final Time timeout = Time.milliseconds(AkkaUtils.getTimeout(configuration).toMillis())__		final AkkaRpcService akkaRpcService = new AkkaRpcService(taskManagerSystem, timeout)___		_		final HighAvailabilityServices haServices = new HighAvailabilityServices() {_			@Override_			public LeaderRetrievalService getResourceManagerLeaderRetriever() throws Exception {_				return LeaderRetrievalUtils.createLeaderRetrievalService(configuration)__			}__			@Override_			public LeaderRetrievalService getJobMasterLeaderRetriever(JobID jobID) throws Exception {_				return null__			}__			@Override_			public LeaderElectionService getResourceManagerLeaderElectionService() throws Exception {_				return null__			}__			@Override_			public LeaderElectionService getJobMasterLeaderElectionService(JobID jobID) throws Exception {_				return null__			}_		}___		_		_		try {_			LOG.info("Starting TaskManager actor")__			TaskExecutor taskExecutor = startTaskManagerComponentsAndActor(_				configuration,_				resourceID,_				akkaRpcService,_				taskManagerHostname,_				haServices,_				false)___			taskExecutor.start()___			_			if (LOG.isInfoEnabled() && configuration.getBoolean(_				ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD,_				ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD)) {_				LOG.info("Starting periodic memory usage logger")___				long interval = configuration.getLong(_					ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS,_					ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS)___				MemoryLogger logger = new MemoryLogger(LOG, interval, taskManagerSystem)__				logger.start()__			}__			_			taskManagerSystem.awaitTermination()__		} catch (Throwable t) {_			LOG.error("Error while starting up taskManager", t)__			try {_				taskManagerSystem.shutdown()__			} catch (Throwable tt) {_				LOG.warn("Could not cleanly shut down actor system", tt)__			}_			throw t__		}_	};starts,and,runs,the,task,manager,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,p,this,method,will,also,spawn,a,process,reaper,for,the,task,manager,kill,the,process,if,the,actor,fails,and,optionally,start,the,jvm,memory,logging,thread,param,task,manager,hostname,the,hostname,address,of,the,interface,where,the,actor,system,will,communicate,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,actor,system,port,the,port,at,which,the,actor,system,will,communicate,param,configuration,the,configuration,for,the,task,manager;private,static,void,run,task,manager,string,task,manager,hostname,resource,id,resource,id,int,actor,system,port,final,configuration,configuration,throws,exception,log,info,starting,task,manager,log,info,starting,task,manager,actor,system,at,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,final,actor,system,task,manager,system,try,tuple2,string,object,address,new,tuple2,string,object,task,manager,hostname,actor,system,port,config,akka,config,akka,utils,get,akka,config,configuration,new,some,address,log,debug,using,akka,configuration,n,akka,config,task,manager,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,string,address,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,throw,new,ioexception,unable,to,bind,task,manager,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,time,milliseconds,akka,utils,get,timeout,configuration,to,millis,final,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,task,manager,system,timeout,final,high,availability,services,ha,services,new,high,availability,services,override,public,leader,retrieval,service,get,resource,manager,leader,retriever,throws,exception,return,leader,retrieval,utils,create,leader,retrieval,service,configuration,override,public,leader,retrieval,service,get,job,master,leader,retriever,job,id,job,id,throws,exception,return,null,override,public,leader,election,service,get,resource,manager,leader,election,service,throws,exception,return,null,override,public,leader,election,service,get,job,master,leader,election,service,job,id,job,id,throws,exception,return,null,try,log,info,starting,task,manager,actor,task,executor,task,executor,start,task,manager,components,and,actor,configuration,resource,id,akka,rpc,service,task,manager,hostname,ha,services,false,task,executor,start,if,log,is,info,enabled,configuration,get,boolean,config,constants,config,constants,log,info,starting,periodic,memory,usage,logger,long,interval,configuration,get,long,config,constants,config,constants,memory,logger,logger,new,memory,logger,log,interval,task,manager,system,logger,start,task,manager,system,await,termination,catch,throwable,t,log,error,error,while,starting,up,task,manager,t,try,task,manager,system,shutdown,catch,throwable,tt,log,warn,could,not,cleanly,shut,down,actor,system,tt,throw,t
TaskExecutor -> private static void runTaskManager( 		String taskManagerHostname, 		ResourceID resourceID, 		int actorSystemPort, 		final Configuration configuration) throws Exception;1482522860;Starts and runs the TaskManager. Brings up an actor system for the TaskManager and its_actors, starts the TaskManager's services (library cache, shuffle network stack, ...),_and starts the TaskManager itself._<p/>_This method will also spawn a process reaper for the TaskManager (kill the process if_the actor fails) and optionally start the JVM memory logging thread.__@param taskManagerHostname The hostname/address of the interface where the actor system_will communicate._@param resourceID          The id of the resource which the task manager will run on._@param actorSystemPort   The port at which the actor system will communicate._@param configuration       The configuration for the TaskManager.;private static void runTaskManager(_		String taskManagerHostname,_		ResourceID resourceID,_		int actorSystemPort,_		final Configuration configuration) throws Exception {__		LOG.info("Starting TaskManager")___		__		LOG.info("Starting TaskManager actor system at " +_			NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort))___		final ActorSystem taskManagerSystem__		try {_			Tuple2<String, Object> address = new Tuple2<String, Object>(taskManagerHostname, actorSystemPort)__			Config akkaConfig = AkkaUtils.getAkkaConfig(configuration, new Some<>(address))__			LOG.debug("Using akka configuration\n " + akkaConfig)__			taskManagerSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					String address = NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort)__					throw new IOException("Unable to bind TaskManager actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		_		final Time timeout = Time.milliseconds(AkkaUtils.getTimeout(configuration).toMillis())__		final AkkaRpcService akkaRpcService = new AkkaRpcService(taskManagerSystem, timeout)___		_		final HighAvailabilityServices haServices = new HighAvailabilityServices() {_			@Override_			public LeaderRetrievalService getResourceManagerLeaderRetriever() throws Exception {_				return LeaderRetrievalUtils.createLeaderRetrievalService(configuration)__			}__			@Override_			public LeaderRetrievalService getJobMasterLeaderRetriever(JobID jobID) throws Exception {_				return null__			}__			@Override_			public LeaderElectionService getResourceManagerLeaderElectionService() throws Exception {_				return null__			}__			@Override_			public LeaderElectionService getJobMasterLeaderElectionService(JobID jobID) throws Exception {_				return null__			}__			@Override_			public CheckpointRecoveryFactory getCheckpointRecoveryFactory() throws Exception {_				return null__			}__			@Override_			public SubmittedJobGraphStore getSubmittedJobGraphStore() throws Exception {_				return null__			}_		}___		_		_		try {_			LOG.info("Starting TaskManager actor")__			TaskExecutor taskExecutor = startTaskManagerComponentsAndActor(_				configuration,_				resourceID,_				akkaRpcService,_				taskManagerHostname,_				haServices,_				false)___			taskExecutor.start()___			_			if (LOG.isInfoEnabled() && configuration.getBoolean(_				ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD,_				ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD)) {_				LOG.info("Starting periodic memory usage logger")___				long interval = configuration.getLong(_					ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS,_					ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS)___				MemoryLogger logger = new MemoryLogger(LOG, interval, taskManagerSystem)__				logger.start()__			}__			_			taskManagerSystem.awaitTermination()__		} catch (Throwable t) {_			LOG.error("Error while starting up taskManager", t)__			try {_				taskManagerSystem.shutdown()__			} catch (Throwable tt) {_				LOG.warn("Could not cleanly shut down actor system", tt)__			}_			throw t__		}_	};starts,and,runs,the,task,manager,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,p,this,method,will,also,spawn,a,process,reaper,for,the,task,manager,kill,the,process,if,the,actor,fails,and,optionally,start,the,jvm,memory,logging,thread,param,task,manager,hostname,the,hostname,address,of,the,interface,where,the,actor,system,will,communicate,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,actor,system,port,the,port,at,which,the,actor,system,will,communicate,param,configuration,the,configuration,for,the,task,manager;private,static,void,run,task,manager,string,task,manager,hostname,resource,id,resource,id,int,actor,system,port,final,configuration,configuration,throws,exception,log,info,starting,task,manager,log,info,starting,task,manager,actor,system,at,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,final,actor,system,task,manager,system,try,tuple2,string,object,address,new,tuple2,string,object,task,manager,hostname,actor,system,port,config,akka,config,akka,utils,get,akka,config,configuration,new,some,address,log,debug,using,akka,configuration,n,akka,config,task,manager,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,string,address,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,throw,new,ioexception,unable,to,bind,task,manager,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,time,milliseconds,akka,utils,get,timeout,configuration,to,millis,final,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,task,manager,system,timeout,final,high,availability,services,ha,services,new,high,availability,services,override,public,leader,retrieval,service,get,resource,manager,leader,retriever,throws,exception,return,leader,retrieval,utils,create,leader,retrieval,service,configuration,override,public,leader,retrieval,service,get,job,master,leader,retriever,job,id,job,id,throws,exception,return,null,override,public,leader,election,service,get,resource,manager,leader,election,service,throws,exception,return,null,override,public,leader,election,service,get,job,master,leader,election,service,job,id,job,id,throws,exception,return,null,override,public,checkpoint,recovery,factory,get,checkpoint,recovery,factory,throws,exception,return,null,override,public,submitted,job,graph,store,get,submitted,job,graph,store,throws,exception,return,null,try,log,info,starting,task,manager,actor,task,executor,task,executor,start,task,manager,components,and,actor,configuration,resource,id,akka,rpc,service,task,manager,hostname,ha,services,false,task,executor,start,if,log,is,info,enabled,configuration,get,boolean,config,constants,config,constants,log,info,starting,periodic,memory,usage,logger,long,interval,configuration,get,long,config,constants,config,constants,memory,logger,logger,new,memory,logger,log,interval,task,manager,system,logger,start,task,manager,system,await,termination,catch,throwable,t,log,error,error,while,starting,up,task,manager,t,try,task,manager,system,shutdown,catch,throwable,tt,log,warn,could,not,cleanly,shut,down,actor,system,tt,throw,t
TaskExecutor -> private static void runTaskManager( 		String taskManagerHostname, 		ResourceID resourceID, 		int actorSystemPort, 		final Configuration configuration) throws Exception;1482522860;Starts and runs the TaskManager. Brings up an actor system for the TaskManager and its_actors, starts the TaskManager's services (library cache, shuffle network stack, ...),_and starts the TaskManager itself._<p/>_This method will also spawn a process reaper for the TaskManager (kill the process if_the actor fails) and optionally start the JVM memory logging thread.__@param taskManagerHostname The hostname/address of the interface where the actor system_will communicate._@param resourceID          The id of the resource which the task manager will run on._@param actorSystemPort   The port at which the actor system will communicate._@param configuration       The configuration for the TaskManager.;private static void runTaskManager(_		String taskManagerHostname,_		ResourceID resourceID,_		int actorSystemPort,_		final Configuration configuration) throws Exception {__		LOG.info("Starting TaskManager")___		__		LOG.info("Starting TaskManager actor system at " +_			NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort))___		final ActorSystem taskManagerSystem__		try {_			Tuple2<String, Object> address = new Tuple2<String, Object>(taskManagerHostname, actorSystemPort)__			Config akkaConfig = AkkaUtils.getAkkaConfig(configuration, new Some<>(address))__			LOG.debug("Using akka configuration\n " + akkaConfig)__			taskManagerSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof BindException) {_					String address = NetUtils.hostAndPortToUrlString(taskManagerHostname, actorSystemPort)__					throw new IOException("Unable to bind TaskManager actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		_		final Time timeout = Time.milliseconds(AkkaUtils.getTimeout(configuration).toMillis())__		final AkkaRpcService akkaRpcService = new AkkaRpcService(taskManagerSystem, timeout)___		_		final HighAvailabilityServices haServices = new HighAvailabilityServices() {_			@Override_			public LeaderRetrievalService getResourceManagerLeaderRetriever() throws Exception {_				return LeaderRetrievalUtils.createLeaderRetrievalService(configuration)__			}__			@Override_			public LeaderRetrievalService getJobMasterLeaderRetriever(JobID jobID) throws Exception {_				return null__			}__			@Override_			public LeaderElectionService getResourceManagerLeaderElectionService() throws Exception {_				return null__			}__			@Override_			public LeaderElectionService getJobMasterLeaderElectionService(JobID jobID) throws Exception {_				return null__			}__			@Override_			public CheckpointRecoveryFactory getCheckpointRecoveryFactory() throws Exception {_				return null__			}__			@Override_			public SubmittedJobGraphStore getSubmittedJobGraphStore() throws Exception {_				return null__			}_		}___		_		_		try {_			LOG.info("Starting TaskManager actor")__			TaskExecutor taskExecutor = startTaskManagerComponentsAndActor(_				configuration,_				resourceID,_				akkaRpcService,_				taskManagerHostname,_				haServices,_				false)___			taskExecutor.start()___			_			if (LOG.isInfoEnabled() && configuration.getBoolean(_				ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD,_				ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD)) {_				LOG.info("Starting periodic memory usage logger")___				long interval = configuration.getLong(_					ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS,_					ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS)___				MemoryLogger logger = new MemoryLogger(LOG, interval, taskManagerSystem)__				logger.start()__			}__			_			taskManagerSystem.awaitTermination()__		} catch (Throwable t) {_			LOG.error("Error while starting up taskManager", t)__			try {_				taskManagerSystem.shutdown()__			} catch (Throwable tt) {_				LOG.warn("Could not cleanly shut down actor system", tt)__			}_			throw t__		}_	};starts,and,runs,the,task,manager,brings,up,an,actor,system,for,the,task,manager,and,its,actors,starts,the,task,manager,s,services,library,cache,shuffle,network,stack,and,starts,the,task,manager,itself,p,this,method,will,also,spawn,a,process,reaper,for,the,task,manager,kill,the,process,if,the,actor,fails,and,optionally,start,the,jvm,memory,logging,thread,param,task,manager,hostname,the,hostname,address,of,the,interface,where,the,actor,system,will,communicate,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,actor,system,port,the,port,at,which,the,actor,system,will,communicate,param,configuration,the,configuration,for,the,task,manager;private,static,void,run,task,manager,string,task,manager,hostname,resource,id,resource,id,int,actor,system,port,final,configuration,configuration,throws,exception,log,info,starting,task,manager,log,info,starting,task,manager,actor,system,at,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,final,actor,system,task,manager,system,try,tuple2,string,object,address,new,tuple2,string,object,task,manager,hostname,actor,system,port,config,akka,config,akka,utils,get,akka,config,configuration,new,some,address,log,debug,using,akka,configuration,n,akka,config,task,manager,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,bind,exception,string,address,net,utils,host,and,port,to,url,string,task,manager,hostname,actor,system,port,throw,new,ioexception,unable,to,bind,task,manager,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,time,milliseconds,akka,utils,get,timeout,configuration,to,millis,final,akka,rpc,service,akka,rpc,service,new,akka,rpc,service,task,manager,system,timeout,final,high,availability,services,ha,services,new,high,availability,services,override,public,leader,retrieval,service,get,resource,manager,leader,retriever,throws,exception,return,leader,retrieval,utils,create,leader,retrieval,service,configuration,override,public,leader,retrieval,service,get,job,master,leader,retriever,job,id,job,id,throws,exception,return,null,override,public,leader,election,service,get,resource,manager,leader,election,service,throws,exception,return,null,override,public,leader,election,service,get,job,master,leader,election,service,job,id,job,id,throws,exception,return,null,override,public,checkpoint,recovery,factory,get,checkpoint,recovery,factory,throws,exception,return,null,override,public,submitted,job,graph,store,get,submitted,job,graph,store,throws,exception,return,null,try,log,info,starting,task,manager,actor,task,executor,task,executor,start,task,manager,components,and,actor,configuration,resource,id,akka,rpc,service,task,manager,hostname,ha,services,false,task,executor,start,if,log,is,info,enabled,configuration,get,boolean,config,constants,config,constants,log,info,starting,periodic,memory,usage,logger,long,interval,configuration,get,long,config,constants,config,constants,memory,logger,logger,new,memory,logger,log,interval,task,manager,system,logger,start,task,manager,system,await,termination,catch,throwable,t,log,error,error,while,starting,up,task,manager,t,try,task,manager,system,shutdown,catch,throwable,tt,log,warn,could,not,cleanly,shut,down,actor,system,tt,throw,t
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1482522862;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1482522863;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1482522863;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1482522863;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1482522864;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1482522864;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1482522865;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1482522865;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1487441974;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1487769938;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1487871589;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1489657719;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1489766404;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1489766405;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1490090124;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1490273924;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1490273924;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1490347056;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1493146240;/**_Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)__			throw new SlotAllocationException(message)__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return new TMSlotRequestRegistered(resourceManagerConnection.getRegistrationId(), getResourceID(), allocationId)__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,allocation,exception,message,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,new,tmslot,request,registered,resource,manager,connection,get,registration,id,get,resource,id,allocation,id
TaskExecutor -> @RpcMethod 	public Acknowledge requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1493386068;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public Acknowledge requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)___			throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return Acknowledge.get()__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,acknowledge,get
TaskExecutor -> @RpcMethod 	public Acknowledge requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1493975155;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public Acknowledge requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)___			throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return Acknowledge.get()__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,acknowledge,get
TaskExecutor -> @RpcMethod 	public Acknowledge requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1495001929;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public Acknowledge requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)___			throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return Acknowledge.get()__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,acknowledge,get
TaskExecutor -> @RpcMethod 	public Acknowledge requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1499250208;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public Acknowledge requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)___			throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return Acknowledge.get()__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,acknowledge,get
TaskExecutor -> @RpcMethod 	public Acknowledge requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1501437265;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public Acknowledge requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)___			throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return Acknowledge.get()__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,acknowledge,get
TaskExecutor -> @RpcMethod 	public Acknowledge requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1501485811;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public Acknowledge requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)___			throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return Acknowledge.get()__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,acknowledge,get
TaskExecutor -> @RpcMethod 	public Acknowledge requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1501620216;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public Acknowledge requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)___			throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return Acknowledge.get()__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,acknowledge,get
TaskExecutor -> @RpcMethod 	public Acknowledge requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1501622036;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public Acknowledge requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)___			throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return Acknowledge.get()__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,acknowledge,get
TaskExecutor -> @RpcMethod 	public Acknowledge requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId) throws SlotAllocationException;1501760738;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@RpcMethod_	public Acknowledge requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId) throws SlotAllocationException {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		if (resourceManagerConnection == null) {_			final String message = "TaskManager is not connected to a resource manager."__			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_			final String message = "The leader id " + rmLeaderId +_				" does not match with the leader id of the connected resource manager " +_				resourceManagerConnection.getTargetLeaderId() + '.'___			log.debug(message)__			throw new SlotAllocationException(message)__		}__		if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_			if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_				log.info("Allocated slot for {}.", allocationId)__			} else {_				log.info("Could not allocate slot for {}.", allocationId)__				throw new SlotAllocationException("Could not allocate slot.")__			}_		} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_			final String message = "The slot " + slotId + " has already been allocated for a different job."___			log.info(message)___			throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__		}__		if (jobManagerTable.contains(jobId)) {_			offerSlotsToJobManager(jobId)__		} else {_			try {_				jobLeaderService.addJob(jobId, targetAddress)__			} catch (Exception e) {_				_				try {_					taskSlotTable.freeSlot(allocationId)__				} catch (SlotNotFoundException slotNotFoundException) {_					_					_					onFatalError(slotNotFoundException)__				}__				_				if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_					onFatalError(new Exception("Could not free slot " + slotId))__				}__				throw new SlotAllocationException("Could not add job to job leader service.", e)__			}_		}__		return Acknowledge.get()__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;rpc,method,public,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,throws,slot,allocation,exception,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,return,acknowledge,get
TaskExecutor -> @RpcMethod 	public SlotRequestReply requestSlot(AllocationID allocationID, UUID resourceManagerLeaderID);1482522859;Requests a slot from the TaskManager__@param allocationID id for the request_@param resourceManagerLeaderID current leader id of the ResourceManager_@return answer to the slot request;@RpcMethod_	public SlotRequestReply requestSlot(AllocationID allocationID, UUID resourceManagerLeaderID) {_		return new SlotRequestRegistered(allocationID)__	};requests,a,slot,from,the,task,manager,param,allocation,id,id,for,the,request,param,resource,manager,leader,id,current,leader,id,of,the,resource,manager,return,answer,to,the,slot,request;rpc,method,public,slot,request,reply,request,slot,allocation,id,allocation,id,uuid,resource,manager,leader,id,return,new,slot,request,registered,allocation,id
TaskExecutor -> @RpcMethod 	public SlotRequestReply requestSlot(AllocationID allocationID, UUID resourceManagerLeaderID);1482522859;Requests a slot from the TaskManager__@param allocationID id for the request_@param resourceManagerLeaderID current leader id of the ResourceManager_@return answer to the slot request;@RpcMethod_	public SlotRequestReply requestSlot(AllocationID allocationID, UUID resourceManagerLeaderID) {_		return new SlotRequestRegistered(allocationID)__	};requests,a,slot,from,the,task,manager,param,allocation,id,id,for,the,request,param,resource,manager,leader,id,current,leader,id,of,the,resource,manager,return,answer,to,the,slot,request;rpc,method,public,slot,request,reply,request,slot,allocation,id,allocation,id,uuid,resource,manager,leader,id,return,new,slot,request,registered,allocation,id
TaskExecutor -> @RpcMethod 	public SlotRequestReply requestSlot(AllocationID allocationID, UUID resourceManagerLeaderID);1482522859;Requests a slot from the TaskManager__@param allocationID id for the request_@param resourceManagerLeaderID current leader id of the ResourceManager_@return answer to the slot request;@RpcMethod_	public SlotRequestReply requestSlot(AllocationID allocationID, UUID resourceManagerLeaderID) {_		return new SlotRequestRegistered(allocationID)__	};requests,a,slot,from,the,task,manager,param,allocation,id,id,for,the,request,param,resource,manager,leader,id,current,leader,id,of,the,resource,manager,return,answer,to,the,slot,request;rpc,method,public,slot,request,reply,request,slot,allocation,id,allocation,id,uuid,resource,manager,leader,id,return,new,slot,request,registered,allocation,id
TaskExecutor -> @RpcMethod 	public SlotRequestReply requestSlot(AllocationID allocationID, UUID resourceManagerLeaderID);1482522860;Requests a slot from the TaskManager__@param allocationID id for the request_@param resourceManagerLeaderID current leader id of the ResourceManager_@return answer to the slot request;@RpcMethod_	public SlotRequestReply requestSlot(AllocationID allocationID, UUID resourceManagerLeaderID) {_		return new SlotRequestRegistered(allocationID)__	};requests,a,slot,from,the,task,manager,param,allocation,id,id,for,the,request,param,resource,manager,leader,id,current,leader,id,of,the,resource,manager,return,answer,to,the,slot,request;rpc,method,public,slot,request,reply,request,slot,allocation,id,allocation,id,uuid,resource,manager,leader,id,return,new,slot,request,registered,allocation,id
TaskExecutor -> @RpcMethod 	public SlotRequestReply requestSlot(AllocationID allocationID, UUID resourceManagerLeaderID);1482522860;Requests a slot from the TaskManager__@param allocationID id for the request_@param resourceManagerLeaderID current leader id of the ResourceManager_@return answer to the slot request;@RpcMethod_	public SlotRequestReply requestSlot(AllocationID allocationID, UUID resourceManagerLeaderID) {_		return new SlotRequestRegistered(allocationID)__	};requests,a,slot,from,the,task,manager,param,allocation,id,id,for,the,request,param,resource,manager,leader,id,current,leader,id,of,the,resource,manager,return,answer,to,the,slot,request;rpc,method,public,slot,request,reply,request,slot,allocation,id,allocation,id,uuid,resource,manager,leader,id,return,new,slot,request,registered,allocation,id
TaskExecutor -> @RpcMethod 	public SlotRequestReply requestSlot(AllocationID allocationID, UUID resourceManagerLeaderID);1482522860;Requests a slot from the TaskManager__@param allocationID id for the request_@param resourceManagerLeaderID current leader id of the ResourceManager_@return answer to the slot request;@RpcMethod_	public SlotRequestReply requestSlot(AllocationID allocationID, UUID resourceManagerLeaderID) {_		return new SlotRequestRegistered(allocationID)__	};requests,a,slot,from,the,task,manager,param,allocation,id,id,for,the,request,param,resource,manager,leader,id,current,leader,id,of,the,resource,manager,return,answer,to,the,slot,request;rpc,method,public,slot,request,reply,request,slot,allocation,id,allocation,id,uuid,resource,manager,leader,id,return,new,slot,request,registered,allocation,id
TaskExecutor -> @Override 	public CompletableFuture<Void> onStop();1550005039;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> onStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (resourceManagerConnection != null) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,on,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,resource,manager,connection,null,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> onStop();1550312315;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> onStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (resourceManagerConnection != null) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,on,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,resource,manager,connection,null,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> @Override 	public CompletableFuture<Void> onStop();1550366933;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public CompletableFuture<Void> onStop() {_		log.info("Stopping TaskExecutor {}.", getAddress())___		Throwable throwable = null___		if (resourceManagerConnection != null) {_			resourceManagerConnection.close()__		}__		for (JobManagerConnection jobManagerConnection : jobManagerConnections.values()) {_			try {_				disassociateFromJobManager(jobManagerConnection, new FlinkException("The TaskExecutor is shutting down."))__			} catch (Throwable t) {_				throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__			}_		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		try {_			resourceManagerLeaderRetriever.stop()__		} catch (Exception e) {_			throwable = ExceptionUtils.firstOrSuppressed(e, throwable)__		}__		try {_			taskExecutorServices.shutDown()__			fileCache.shutdown()__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		_		taskManagerMetricGroup.close()___		if (throwable != null) {_			return FutureUtils.completedExceptionally(new FlinkException("Error while shutting the TaskExecutor down.", throwable))__		} else {_			log.info("Stopped TaskExecutor {}.", getAddress())__			return CompletableFuture.completedFuture(null)__		}_	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,completable,future,void,on,stop,log,info,stopping,task,executor,get,address,throwable,throwable,null,if,resource,manager,connection,null,resource,manager,connection,close,for,job,manager,connection,job,manager,connection,job,manager,connections,values,try,disassociate,from,job,manager,job,manager,connection,new,flink,exception,the,task,executor,is,shutting,down,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,try,resource,manager,leader,retriever,stop,catch,exception,e,throwable,exception,utils,first,or,suppressed,e,throwable,try,task,executor,services,shut,down,file,cache,shutdown,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,task,manager,metric,group,close,if,throwable,null,return,future,utils,completed,exceptionally,new,flink,exception,error,while,shutting,the,task,executor,down,throwable,else,log,info,stopped,task,executor,get,address,return,completable,future,completed,future,null
TaskExecutor -> public static TaskExecutor startTaskManagerComponentsAndActor( 		Configuration configuration, 		ResourceID resourceID, 		RpcService rpcService, 		String taskManagerHostname, 		HighAvailabilityServices haServices, 		boolean localTaskManagerCommunication) throws Exception;1482522858;@param configuration                 The configuration for the TaskManager._@param resourceID                    The id of the resource which the task manager will run on._@param rpcService                  The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@param taskManagerHostname       The hostname/address that describes the TaskManager's data location._@param haServices        Optionally, a high availability service can be provided. If none is given,_then a HighAvailabilityServices is constructed from the configuration._@param localTaskManagerCommunication     If true, the TaskManager will not initiate the TCP network stack._@return An ActorRef to the TaskManager actor._@throws org.apache.flink.configuration.IllegalConfigurationException     Thrown, if the given config contains illegal values._@throws java.io.IOException      Thrown, if any of the I/O components (such as buffer pools,_I/O manager, ...) cannot be properly started._@throws java.lang.Exception      Thrown is some other error occurs while parsing the configuration_or starting the TaskManager components.;public static TaskExecutor startTaskManagerComponentsAndActor(_		Configuration configuration,_		ResourceID resourceID,_		RpcService rpcService,_		String taskManagerHostname,_		HighAvailabilityServices haServices,_		boolean localTaskManagerCommunication) throws Exception {__		final TaskExecutorConfiguration taskExecutorConfig = parseTaskManagerConfiguration(_			configuration, taskManagerHostname, localTaskManagerCommunication)___		MemoryType memType = taskExecutorConfig.getNetworkConfig().memoryType()___		_		checkTempDirs(taskExecutorConfig.getTmpDirPaths())___		ExecutionContext executionContext = ExecutionContexts$.MODULE$.fromExecutor(new ForkJoinPool())___		_		final NetworkEnvironment network = new NetworkEnvironment(_			executionContext,_			taskExecutorConfig.getTimeout(),_			taskExecutorConfig.getNetworkConfig(),_			taskExecutorConfig.getConnectionInfo())___		_		__		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		final long memorySize__		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)__		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float fraction = configuration.getFloat(_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__			checkConfigParameter(fraction > 0.0f && fraction < 1.0f, fraction,_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						fraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , fraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - fraction) * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						fraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", fraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskExecutorConfig.getNumberOfSlots(),_				taskExecutorConfig.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}__		_		final IOManager ioManager = new IOManagerAsync(taskExecutorConfig.getTmpDirPaths())___		final TaskExecutor taskExecutor = new TaskExecutor(_			taskExecutorConfig,_			resourceID,_			memoryManager,_			ioManager,_			network,_			taskExecutorConfig.getNumberOfSlots(),_			rpcService,_			haServices)___		return taskExecutor__	};param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,rpc,service,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,param,task,manager,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,ha,services,optionally,a,high,availability,service,can,be,provided,if,none,is,given,then,a,high,availability,services,is,constructed,from,the,configuration,param,local,task,manager,communication,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,return,an,actor,ref,to,the,task,manager,actor,throws,org,apache,flink,configuration,illegal,configuration,exception,thrown,if,the,given,config,contains,illegal,values,throws,java,io,ioexception,thrown,if,any,of,the,i,o,components,such,as,buffer,pools,i,o,manager,cannot,be,properly,started,throws,java,lang,exception,thrown,is,some,other,error,occurs,while,parsing,the,configuration,or,starting,the,task,manager,components;public,static,task,executor,start,task,manager,components,and,actor,configuration,configuration,resource,id,resource,id,rpc,service,rpc,service,string,task,manager,hostname,high,availability,services,ha,services,boolean,local,task,manager,communication,throws,exception,final,task,executor,configuration,task,executor,config,parse,task,manager,configuration,configuration,task,manager,hostname,local,task,manager,communication,memory,type,mem,type,task,executor,config,get,network,config,memory,type,check,temp,dirs,task,executor,config,get,tmp,dir,paths,execution,context,execution,context,execution,contexts,module,from,executor,new,fork,join,pool,final,network,environment,network,new,network,environment,execution,context,task,executor,config,get,timeout,task,executor,config,get,network,config,task,executor,config,get,connection,info,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,long,memory,size,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,fraction,0,0f,fraction,1,0f,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,fraction,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,executor,config,get,number,of,slots,task,executor,config,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,final,iomanager,io,manager,new,iomanager,async,task,executor,config,get,tmp,dir,paths,final,task,executor,task,executor,new,task,executor,task,executor,config,resource,id,memory,manager,io,manager,network,task,executor,config,get,number,of,slots,rpc,service,ha,services,return,task,executor
TaskExecutor -> public static TaskExecutor startTaskManagerComponentsAndActor( 		Configuration configuration, 		ResourceID resourceID, 		RpcService rpcService, 		String taskManagerHostname, 		HighAvailabilityServices haServices, 		boolean localTaskManagerCommunication) throws Exception;1482522858;@param configuration                 The configuration for the TaskManager._@param resourceID                    The id of the resource which the task manager will run on._@param rpcService                  The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@param taskManagerHostname       The hostname/address that describes the TaskManager's data location._@param haServices        Optionally, a high availability service can be provided. If none is given,_then a HighAvailabilityServices is constructed from the configuration._@param localTaskManagerCommunication     If true, the TaskManager will not initiate the TCP network stack._@return An ActorRef to the TaskManager actor._@throws org.apache.flink.configuration.IllegalConfigurationException     Thrown, if the given config contains illegal values._@throws java.io.IOException      Thrown, if any of the I/O components (such as buffer pools,_I/O manager, ...) cannot be properly started._@throws java.lang.Exception      Thrown is some other error occurs while parsing the configuration_or starting the TaskManager components.;public static TaskExecutor startTaskManagerComponentsAndActor(_		Configuration configuration,_		ResourceID resourceID,_		RpcService rpcService,_		String taskManagerHostname,_		HighAvailabilityServices haServices,_		boolean localTaskManagerCommunication) throws Exception {__		final TaskExecutorConfiguration taskExecutorConfig = parseTaskManagerConfiguration(_			configuration, taskManagerHostname, localTaskManagerCommunication)___		MemoryType memType = taskExecutorConfig.getNetworkConfig().memoryType()___		_		checkTempDirs(taskExecutorConfig.getTmpDirPaths())___		ExecutionContext executionContext = ExecutionContexts$.MODULE$.fromExecutor(new ForkJoinPool())___		_		final NetworkEnvironment network = new NetworkEnvironment(_			executionContext,_			taskExecutorConfig.getTimeout(),_			taskExecutorConfig.getNetworkConfig(),_			taskExecutorConfig.getConnectionInfo())___		_		__		_		long configuredMemory = configuration.getLong(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1L)__		checkConfigParameter(configuredMemory == -1 || configuredMemory > 0, configuredMemory,_			ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,_			"MemoryManager needs at least one MB of memory. " +_				"If you leave this config parameter empty, the system automatically " +_				"pick a fraction of the available memory.")___		final long memorySize__		boolean preAllocateMemory = configuration.getBoolean(_			ConfigConstants.TASK_MANAGER_MEMORY_PRE_ALLOCATE_KEY,_			ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_PRE_ALLOCATE)__		if (configuredMemory > 0) {_			if (preAllocateMemory) {_				LOG.info("Using {} MB for managed memory." , configuredMemory)__			} else {_				LOG.info("Limiting managed memory to {} MB, memory will be allocated lazily." , configuredMemory)__			}_			memorySize = configuredMemory << 20_ _		} else {_			float fraction = configuration.getFloat(_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION)__			checkConfigParameter(fraction > 0.0f && fraction < 1.0f, fraction,_				ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,_				"MemoryManager fraction of the free memory must be between 0.0 and 1.0")___			if (memType == MemoryType.HEAP) {_				long relativeMemSize = (long) (EnvironmentInformation.getSizeOfFreeHeapMemoryWithDefrag() * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the currently free heap space for managed heap memory ({} MB)." ,_						fraction , relativeMemSize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the currently free heap space ({} MB), " +_						"memory will be allocated lazily." , fraction , relativeMemSize >> 20)__				}_				memorySize = relativeMemSize__			} else if (memType == MemoryType.OFF_HEAP) {_				_				long maxMemory = EnvironmentInformation.getMaxJvmHeapMemory()__				long directMemorySize = (long) (maxMemory / (1.0 - fraction) * fraction)__				if (preAllocateMemory) {_					LOG.info("Using {} of the maximum memory size for managed off-heap memory ({} MB)." ,_						fraction, directMemorySize >> 20)__				} else {_					LOG.info("Limiting managed memory to {} of the maximum memory size ({} MB)," +_						" memory will be allocated lazily.", fraction, directMemorySize >> 20)__				}_				memorySize = directMemorySize__			} else {_				throw new RuntimeException("No supported memory type detected.")__			}_		}__		_		final MemoryManager memoryManager__		try {_			memoryManager = new MemoryManager(_				memorySize,_				taskExecutorConfig.getNumberOfSlots(),_				taskExecutorConfig.getNetworkConfig().networkBufferSize(),_				memType,_				preAllocateMemory)__		} catch (OutOfMemoryError e) {_			if (memType == MemoryType.HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager heap memory (" + memorySize + " bytes).", e)__			} else if (memType == MemoryType.OFF_HEAP) {_				throw new Exception("OutOfMemory error (" + e.getMessage() +_					") while allocating the TaskManager off-heap memory (" + memorySize +_					" bytes).Try increasing the maximum direct memory (-XX:MaxDirectMemorySize)", e)__			} else {_				throw e__			}_		}__		_		final IOManager ioManager = new IOManagerAsync(taskExecutorConfig.getTmpDirPaths())___		final TaskExecutor taskExecutor = new TaskExecutor(_			taskExecutorConfig,_			resourceID,_			memoryManager,_			ioManager,_			network,_			taskExecutorConfig.getNumberOfSlots(),_			rpcService,_			haServices)___		return taskExecutor__	};param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,rpc,service,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,param,task,manager,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,ha,services,optionally,a,high,availability,service,can,be,provided,if,none,is,given,then,a,high,availability,services,is,constructed,from,the,configuration,param,local,task,manager,communication,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,return,an,actor,ref,to,the,task,manager,actor,throws,org,apache,flink,configuration,illegal,configuration,exception,thrown,if,the,given,config,contains,illegal,values,throws,java,io,ioexception,thrown,if,any,of,the,i,o,components,such,as,buffer,pools,i,o,manager,cannot,be,properly,started,throws,java,lang,exception,thrown,is,some,other,error,occurs,while,parsing,the,configuration,or,starting,the,task,manager,components;public,static,task,executor,start,task,manager,components,and,actor,configuration,configuration,resource,id,resource,id,rpc,service,rpc,service,string,task,manager,hostname,high,availability,services,ha,services,boolean,local,task,manager,communication,throws,exception,final,task,executor,configuration,task,executor,config,parse,task,manager,configuration,configuration,task,manager,hostname,local,task,manager,communication,memory,type,mem,type,task,executor,config,get,network,config,memory,type,check,temp,dirs,task,executor,config,get,tmp,dir,paths,execution,context,execution,context,execution,contexts,module,from,executor,new,fork,join,pool,final,network,environment,network,new,network,environment,execution,context,task,executor,config,get,timeout,task,executor,config,get,network,config,task,executor,config,get,connection,info,long,configured,memory,configuration,get,long,config,constants,1l,check,config,parameter,configured,memory,1,configured,memory,0,configured,memory,config,constants,memory,manager,needs,at,least,one,mb,of,memory,if,you,leave,this,config,parameter,empty,the,system,automatically,pick,a,fraction,of,the,available,memory,final,long,memory,size,boolean,pre,allocate,memory,configuration,get,boolean,config,constants,config,constants,if,configured,memory,0,if,pre,allocate,memory,log,info,using,mb,for,managed,memory,configured,memory,else,log,info,limiting,managed,memory,to,mb,memory,will,be,allocated,lazily,configured,memory,memory,size,configured,memory,20,else,float,fraction,configuration,get,float,config,constants,config,constants,check,config,parameter,fraction,0,0f,fraction,1,0f,fraction,config,constants,memory,manager,fraction,of,the,free,memory,must,be,between,0,0,and,1,0,if,mem,type,memory,type,heap,long,relative,mem,size,long,environment,information,get,size,of,free,heap,memory,with,defrag,fraction,if,pre,allocate,memory,log,info,using,of,the,currently,free,heap,space,for,managed,heap,memory,mb,fraction,relative,mem,size,20,else,log,info,limiting,managed,memory,to,of,the,currently,free,heap,space,mb,memory,will,be,allocated,lazily,fraction,relative,mem,size,20,memory,size,relative,mem,size,else,if,mem,type,memory,type,long,max,memory,environment,information,get,max,jvm,heap,memory,long,direct,memory,size,long,max,memory,1,0,fraction,fraction,if,pre,allocate,memory,log,info,using,of,the,maximum,memory,size,for,managed,off,heap,memory,mb,fraction,direct,memory,size,20,else,log,info,limiting,managed,memory,to,of,the,maximum,memory,size,mb,memory,will,be,allocated,lazily,fraction,direct,memory,size,20,memory,size,direct,memory,size,else,throw,new,runtime,exception,no,supported,memory,type,detected,final,memory,manager,memory,manager,try,memory,manager,new,memory,manager,memory,size,task,executor,config,get,number,of,slots,task,executor,config,get,network,config,network,buffer,size,mem,type,pre,allocate,memory,catch,out,of,memory,error,e,if,mem,type,memory,type,heap,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,heap,memory,memory,size,bytes,e,else,if,mem,type,memory,type,throw,new,exception,out,of,memory,error,e,get,message,while,allocating,the,task,manager,off,heap,memory,memory,size,bytes,try,increasing,the,maximum,direct,memory,xx,max,direct,memory,size,e,else,throw,e,final,iomanager,io,manager,new,iomanager,async,task,executor,config,get,tmp,dir,paths,final,task,executor,task,executor,new,task,executor,task,executor,config,resource,id,memory,manager,io,manager,network,task,executor,config,get,number,of,slots,rpc,service,ha,services,return,task,executor
TaskExecutor -> public static TaskExecutor startTaskManagerComponentsAndActor( 		Configuration configuration, 		ResourceID resourceID, 		RpcService rpcService, 		String taskManagerHostname, 		HighAvailabilityServices haServices, 		boolean localTaskManagerCommunication) throws Exception;1482522858;@param configuration                 The configuration for the TaskManager._@param resourceID                    The id of the resource which the task manager will run on._@param rpcService                  The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@param taskManagerHostname       The hostname/address that describes the TaskManager's data location._@param haServices        Optionally, a high availability service can be provided. If none is given,_then a HighAvailabilityServices is constructed from the configuration._@param localTaskManagerCommunication     If true, the TaskManager will not initiate the TCP network stack._@return An ActorRef to the TaskManager actor._@throws IllegalConfigurationException     Thrown, if the given config contains illegal values._@throws IOException      Thrown, if any of the I/O components (such as buffer pools,_I/O manager, ...) cannot be properly started._@throws Exception      Thrown is some other error occurs while parsing the configuration_or starting the TaskManager components.;public static TaskExecutor startTaskManagerComponentsAndActor(_		Configuration configuration,_		ResourceID resourceID,_		RpcService rpcService,_		String taskManagerHostname,_		HighAvailabilityServices haServices,_		boolean localTaskManagerCommunication) throws Exception {__		final TaskExecutorConfiguration taskExecutorConfig = parseTaskManagerConfiguration(_			configuration, taskManagerHostname, localTaskManagerCommunication)___		TaskManagerComponents taskManagerComponents = createTaskManagerComponents(_			resourceID,_			InetAddress.getByName(taskManagerHostname),_			taskExecutorConfig,_			configuration)___		final TaskExecutor taskExecutor = new TaskExecutor(_			taskExecutorConfig,_			resourceID,_			taskManagerComponents.getTaskManagerLocation(),_			taskManagerComponents.getMemoryManager(),_			taskManagerComponents.getIOManager(),_			taskManagerComponents.getNetworkEnvironment(),_			rpcService,_			haServices)___		return taskExecutor__	};param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,rpc,service,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,param,task,manager,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,ha,services,optionally,a,high,availability,service,can,be,provided,if,none,is,given,then,a,high,availability,services,is,constructed,from,the,configuration,param,local,task,manager,communication,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,return,an,actor,ref,to,the,task,manager,actor,throws,illegal,configuration,exception,thrown,if,the,given,config,contains,illegal,values,throws,ioexception,thrown,if,any,of,the,i,o,components,such,as,buffer,pools,i,o,manager,cannot,be,properly,started,throws,exception,thrown,is,some,other,error,occurs,while,parsing,the,configuration,or,starting,the,task,manager,components;public,static,task,executor,start,task,manager,components,and,actor,configuration,configuration,resource,id,resource,id,rpc,service,rpc,service,string,task,manager,hostname,high,availability,services,ha,services,boolean,local,task,manager,communication,throws,exception,final,task,executor,configuration,task,executor,config,parse,task,manager,configuration,configuration,task,manager,hostname,local,task,manager,communication,task,manager,components,task,manager,components,create,task,manager,components,resource,id,inet,address,get,by,name,task,manager,hostname,task,executor,config,configuration,final,task,executor,task,executor,new,task,executor,task,executor,config,resource,id,task,manager,components,get,task,manager,location,task,manager,components,get,memory,manager,task,manager,components,get,iomanager,task,manager,components,get,network,environment,rpc,service,ha,services,return,task,executor
TaskExecutor -> public static TaskExecutor startTaskManagerComponentsAndActor( 		Configuration configuration, 		ResourceID resourceID, 		RpcService rpcService, 		String taskManagerHostname, 		HighAvailabilityServices haServices, 		boolean localTaskManagerCommunication) throws Exception;1482522859;@param configuration                 The configuration for the TaskManager._@param resourceID                    The id of the resource which the task manager will run on._@param rpcService                  The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@param taskManagerHostname       The hostname/address that describes the TaskManager's data location._@param haServices        Optionally, a high availability service can be provided. If none is given,_then a HighAvailabilityServices is constructed from the configuration._@param localTaskManagerCommunication     If true, the TaskManager will not initiate the TCP network stack._@return An ActorRef to the TaskManager actor._@throws IllegalConfigurationException     Thrown, if the given config contains illegal values._@throws IOException      Thrown, if any of the I/O components (such as buffer pools,_I/O manager, ...) cannot be properly started._@throws Exception      Thrown is some other error occurs while parsing the configuration_or starting the TaskManager components.;public static TaskExecutor startTaskManagerComponentsAndActor(_		Configuration configuration,_		ResourceID resourceID,_		RpcService rpcService,_		String taskManagerHostname,_		HighAvailabilityServices haServices,_		boolean localTaskManagerCommunication) throws Exception {__		final TaskExecutorConfiguration taskExecutorConfig = parseTaskManagerConfiguration(_			configuration, taskManagerHostname, localTaskManagerCommunication)___		TaskManagerComponents taskManagerComponents = createTaskManagerComponents(_			resourceID,_			InetAddress.getByName(taskManagerHostname),_			taskExecutorConfig,_			configuration)___		final TaskExecutor taskExecutor = new TaskExecutor(_			taskExecutorConfig,_			resourceID,_			taskManagerComponents.getTaskManagerLocation(),_			taskManagerComponents.getMemoryManager(),_			taskManagerComponents.getIOManager(),_			taskManagerComponents.getNetworkEnvironment(),_			rpcService,_			haServices)___		return taskExecutor__	};param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,rpc,service,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,param,task,manager,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,ha,services,optionally,a,high,availability,service,can,be,provided,if,none,is,given,then,a,high,availability,services,is,constructed,from,the,configuration,param,local,task,manager,communication,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,return,an,actor,ref,to,the,task,manager,actor,throws,illegal,configuration,exception,thrown,if,the,given,config,contains,illegal,values,throws,ioexception,thrown,if,any,of,the,i,o,components,such,as,buffer,pools,i,o,manager,cannot,be,properly,started,throws,exception,thrown,is,some,other,error,occurs,while,parsing,the,configuration,or,starting,the,task,manager,components;public,static,task,executor,start,task,manager,components,and,actor,configuration,configuration,resource,id,resource,id,rpc,service,rpc,service,string,task,manager,hostname,high,availability,services,ha,services,boolean,local,task,manager,communication,throws,exception,final,task,executor,configuration,task,executor,config,parse,task,manager,configuration,configuration,task,manager,hostname,local,task,manager,communication,task,manager,components,task,manager,components,create,task,manager,components,resource,id,inet,address,get,by,name,task,manager,hostname,task,executor,config,configuration,final,task,executor,task,executor,new,task,executor,task,executor,config,resource,id,task,manager,components,get,task,manager,location,task,manager,components,get,memory,manager,task,manager,components,get,iomanager,task,manager,components,get,network,environment,rpc,service,ha,services,return,task,executor
TaskExecutor -> public static TaskExecutor startTaskManagerComponentsAndActor( 		Configuration configuration, 		ResourceID resourceID, 		RpcService rpcService, 		String taskManagerHostname, 		HighAvailabilityServices haServices, 		boolean localTaskManagerCommunication) throws Exception;1482522859;@param configuration                 The configuration for the TaskManager._@param resourceID                    The id of the resource which the task manager will run on._@param rpcService                  The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@param taskManagerHostname       The hostname/address that describes the TaskManager's data location._@param haServices        Optionally, a high availability service can be provided. If none is given,_then a HighAvailabilityServices is constructed from the configuration._@param localTaskManagerCommunication     If true, the TaskManager will not initiate the TCP network stack._@return An ActorRef to the TaskManager actor._@throws IllegalConfigurationException     Thrown, if the given config contains illegal values._@throws IOException      Thrown, if any of the I/O components (such as buffer pools,_I/O manager, ...) cannot be properly started._@throws Exception      Thrown is some other error occurs while parsing the configuration_or starting the TaskManager components.;public static TaskExecutor startTaskManagerComponentsAndActor(_		Configuration configuration,_		ResourceID resourceID,_		RpcService rpcService,_		String taskManagerHostname,_		HighAvailabilityServices haServices,_		boolean localTaskManagerCommunication) throws Exception {__		final TaskExecutorConfiguration taskExecutorConfig = parseTaskManagerConfiguration(_			configuration, taskManagerHostname, localTaskManagerCommunication)___		TaskManagerComponents taskManagerComponents = createTaskManagerComponents(_			resourceID,_			InetAddress.getByName(taskManagerHostname),_			taskExecutorConfig,_			configuration)___		final TaskExecutor taskExecutor = new TaskExecutor(_			taskExecutorConfig,_			resourceID,_			taskManagerComponents.getTaskManagerLocation(),_			taskManagerComponents.getMemoryManager(),_			taskManagerComponents.getIOManager(),_			taskManagerComponents.getNetworkEnvironment(),_			rpcService,_			haServices)___		return taskExecutor__	};param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,rpc,service,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,param,task,manager,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,ha,services,optionally,a,high,availability,service,can,be,provided,if,none,is,given,then,a,high,availability,services,is,constructed,from,the,configuration,param,local,task,manager,communication,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,return,an,actor,ref,to,the,task,manager,actor,throws,illegal,configuration,exception,thrown,if,the,given,config,contains,illegal,values,throws,ioexception,thrown,if,any,of,the,i,o,components,such,as,buffer,pools,i,o,manager,cannot,be,properly,started,throws,exception,thrown,is,some,other,error,occurs,while,parsing,the,configuration,or,starting,the,task,manager,components;public,static,task,executor,start,task,manager,components,and,actor,configuration,configuration,resource,id,resource,id,rpc,service,rpc,service,string,task,manager,hostname,high,availability,services,ha,services,boolean,local,task,manager,communication,throws,exception,final,task,executor,configuration,task,executor,config,parse,task,manager,configuration,configuration,task,manager,hostname,local,task,manager,communication,task,manager,components,task,manager,components,create,task,manager,components,resource,id,inet,address,get,by,name,task,manager,hostname,task,executor,config,configuration,final,task,executor,task,executor,new,task,executor,task,executor,config,resource,id,task,manager,components,get,task,manager,location,task,manager,components,get,memory,manager,task,manager,components,get,iomanager,task,manager,components,get,network,environment,rpc,service,ha,services,return,task,executor
TaskExecutor -> public static TaskExecutor startTaskManagerComponentsAndActor( 		Configuration configuration, 		ResourceID resourceID, 		RpcService rpcService, 		String taskManagerHostname, 		HighAvailabilityServices haServices, 		boolean localTaskManagerCommunication) throws Exception;1482522859;@param configuration                 The configuration for the TaskManager._@param resourceID                    The id of the resource which the task manager will run on._@param rpcService                  The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@param taskManagerHostname       The hostname/address that describes the TaskManager's data location._@param haServices        Optionally, a high availability service can be provided. If none is given,_then a HighAvailabilityServices is constructed from the configuration._@param localTaskManagerCommunication     If true, the TaskManager will not initiate the TCP network stack._@return An ActorRef to the TaskManager actor._@throws IllegalConfigurationException     Thrown, if the given config contains illegal values._@throws IOException      Thrown, if any of the I/O components (such as buffer pools,_I/O manager, ...) cannot be properly started._@throws Exception      Thrown is some other error occurs while parsing the configuration_or starting the TaskManager components.;public static TaskExecutor startTaskManagerComponentsAndActor(_		Configuration configuration,_		ResourceID resourceID,_		RpcService rpcService,_		String taskManagerHostname,_		HighAvailabilityServices haServices,_		boolean localTaskManagerCommunication) throws Exception {__		final TaskExecutorConfiguration taskExecutorConfig = parseTaskManagerConfiguration(_			configuration, taskManagerHostname, localTaskManagerCommunication)___		TaskManagerComponents taskManagerComponents = createTaskManagerComponents(_			resourceID,_			InetAddress.getByName(taskManagerHostname),_			taskExecutorConfig,_			configuration)___		final TaskExecutor taskExecutor = new TaskExecutor(_			taskExecutorConfig,_			resourceID,_			taskManagerComponents.getTaskManagerLocation(),_			taskManagerComponents.getMemoryManager(),_			taskManagerComponents.getIOManager(),_			taskManagerComponents.getNetworkEnvironment(),_			rpcService,_			haServices)___		return taskExecutor__	};param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,rpc,service,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,param,task,manager,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,ha,services,optionally,a,high,availability,service,can,be,provided,if,none,is,given,then,a,high,availability,services,is,constructed,from,the,configuration,param,local,task,manager,communication,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,return,an,actor,ref,to,the,task,manager,actor,throws,illegal,configuration,exception,thrown,if,the,given,config,contains,illegal,values,throws,ioexception,thrown,if,any,of,the,i,o,components,such,as,buffer,pools,i,o,manager,cannot,be,properly,started,throws,exception,thrown,is,some,other,error,occurs,while,parsing,the,configuration,or,starting,the,task,manager,components;public,static,task,executor,start,task,manager,components,and,actor,configuration,configuration,resource,id,resource,id,rpc,service,rpc,service,string,task,manager,hostname,high,availability,services,ha,services,boolean,local,task,manager,communication,throws,exception,final,task,executor,configuration,task,executor,config,parse,task,manager,configuration,configuration,task,manager,hostname,local,task,manager,communication,task,manager,components,task,manager,components,create,task,manager,components,resource,id,inet,address,get,by,name,task,manager,hostname,task,executor,config,configuration,final,task,executor,task,executor,new,task,executor,task,executor,config,resource,id,task,manager,components,get,task,manager,location,task,manager,components,get,memory,manager,task,manager,components,get,iomanager,task,manager,components,get,network,environment,rpc,service,ha,services,return,task,executor
TaskExecutor -> public static TaskExecutor startTaskManagerComponentsAndActor( 		Configuration configuration, 		ResourceID resourceID, 		RpcService rpcService, 		String taskManagerHostname, 		HighAvailabilityServices haServices, 		boolean localTaskManagerCommunication) throws Exception;1482522860;@param configuration                 The configuration for the TaskManager._@param resourceID                    The id of the resource which the task manager will run on._@param rpcService                  The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@param taskManagerHostname       The hostname/address that describes the TaskManager's data location._@param haServices        Optionally, a high availability service can be provided. If none is given,_then a HighAvailabilityServices is constructed from the configuration._@param localTaskManagerCommunication     If true, the TaskManager will not initiate the TCP network stack._@return An ActorRef to the TaskManager actor._@throws IllegalConfigurationException     Thrown, if the given config contains illegal values._@throws IOException      Thrown, if any of the I/O components (such as buffer pools,_I/O manager, ...) cannot be properly started._@throws Exception      Thrown is some other error occurs while parsing the configuration_or starting the TaskManager components.;public static TaskExecutor startTaskManagerComponentsAndActor(_		Configuration configuration,_		ResourceID resourceID,_		RpcService rpcService,_		String taskManagerHostname,_		HighAvailabilityServices haServices,_		boolean localTaskManagerCommunication) throws Exception {__		final TaskExecutorConfiguration taskExecutorConfig = parseTaskManagerConfiguration(_			configuration, taskManagerHostname, localTaskManagerCommunication)___		TaskManagerComponents taskManagerComponents = createTaskManagerComponents(_			resourceID,_			InetAddress.getByName(taskManagerHostname),_			taskExecutorConfig,_			configuration)___		final TaskExecutor taskExecutor = new TaskExecutor(_			taskExecutorConfig,_			resourceID,_			taskManagerComponents.getTaskManagerLocation(),_			taskManagerComponents.getMemoryManager(),_			taskManagerComponents.getIOManager(),_			taskManagerComponents.getNetworkEnvironment(),_			rpcService,_			haServices)___		return taskExecutor__	};param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,rpc,service,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,param,task,manager,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,ha,services,optionally,a,high,availability,service,can,be,provided,if,none,is,given,then,a,high,availability,services,is,constructed,from,the,configuration,param,local,task,manager,communication,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,return,an,actor,ref,to,the,task,manager,actor,throws,illegal,configuration,exception,thrown,if,the,given,config,contains,illegal,values,throws,ioexception,thrown,if,any,of,the,i,o,components,such,as,buffer,pools,i,o,manager,cannot,be,properly,started,throws,exception,thrown,is,some,other,error,occurs,while,parsing,the,configuration,or,starting,the,task,manager,components;public,static,task,executor,start,task,manager,components,and,actor,configuration,configuration,resource,id,resource,id,rpc,service,rpc,service,string,task,manager,hostname,high,availability,services,ha,services,boolean,local,task,manager,communication,throws,exception,final,task,executor,configuration,task,executor,config,parse,task,manager,configuration,configuration,task,manager,hostname,local,task,manager,communication,task,manager,components,task,manager,components,create,task,manager,components,resource,id,inet,address,get,by,name,task,manager,hostname,task,executor,config,configuration,final,task,executor,task,executor,new,task,executor,task,executor,config,resource,id,task,manager,components,get,task,manager,location,task,manager,components,get,memory,manager,task,manager,components,get,iomanager,task,manager,components,get,network,environment,rpc,service,ha,services,return,task,executor
TaskExecutor -> public static TaskExecutor startTaskManagerComponentsAndActor( 		Configuration configuration, 		ResourceID resourceID, 		RpcService rpcService, 		String taskManagerHostname, 		HighAvailabilityServices haServices, 		boolean localTaskManagerCommunication) throws Exception;1482522860;@param configuration                 The configuration for the TaskManager._@param resourceID                    The id of the resource which the task manager will run on._@param rpcService                  The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@param taskManagerHostname       The hostname/address that describes the TaskManager's data location._@param haServices        Optionally, a high availability service can be provided. If none is given,_then a HighAvailabilityServices is constructed from the configuration._@param localTaskManagerCommunication     If true, the TaskManager will not initiate the TCP network stack._@return An ActorRef to the TaskManager actor._@throws IllegalConfigurationException     Thrown, if the given config contains illegal values._@throws IOException      Thrown, if any of the I/O components (such as buffer pools,_I/O manager, ...) cannot be properly started._@throws Exception      Thrown is some other error occurs while parsing the configuration_or starting the TaskManager components.;public static TaskExecutor startTaskManagerComponentsAndActor(_		Configuration configuration,_		ResourceID resourceID,_		RpcService rpcService,_		String taskManagerHostname,_		HighAvailabilityServices haServices,_		boolean localTaskManagerCommunication) throws Exception {__		final TaskExecutorConfiguration taskExecutorConfig = parseTaskManagerConfiguration(_			configuration, taskManagerHostname, localTaskManagerCommunication)___		TaskManagerComponents taskManagerComponents = createTaskManagerComponents(_			resourceID,_			InetAddress.getByName(taskManagerHostname),_			taskExecutorConfig,_			configuration)___		final TaskExecutor taskExecutor = new TaskExecutor(_			taskExecutorConfig,_			resourceID,_			taskManagerComponents.getTaskManagerLocation(),_			taskManagerComponents.getMemoryManager(),_			taskManagerComponents.getIOManager(),_			taskManagerComponents.getNetworkEnvironment(),_			rpcService,_			haServices)___		return taskExecutor__	};param,configuration,the,configuration,for,the,task,manager,param,resource,id,the,id,of,the,resource,which,the,task,manager,will,run,on,param,rpc,service,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,param,task,manager,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,ha,services,optionally,a,high,availability,service,can,be,provided,if,none,is,given,then,a,high,availability,services,is,constructed,from,the,configuration,param,local,task,manager,communication,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,return,an,actor,ref,to,the,task,manager,actor,throws,illegal,configuration,exception,thrown,if,the,given,config,contains,illegal,values,throws,ioexception,thrown,if,any,of,the,i,o,components,such,as,buffer,pools,i,o,manager,cannot,be,properly,started,throws,exception,thrown,is,some,other,error,occurs,while,parsing,the,configuration,or,starting,the,task,manager,components;public,static,task,executor,start,task,manager,components,and,actor,configuration,configuration,resource,id,resource,id,rpc,service,rpc,service,string,task,manager,hostname,high,availability,services,ha,services,boolean,local,task,manager,communication,throws,exception,final,task,executor,configuration,task,executor,config,parse,task,manager,configuration,configuration,task,manager,hostname,local,task,manager,communication,task,manager,components,task,manager,components,create,task,manager,components,resource,id,inet,address,get,by,name,task,manager,hostname,task,executor,config,configuration,final,task,executor,task,executor,new,task,executor,task,executor,config,resource,id,task,manager,components,get,task,manager,location,task,manager,components,get,memory,manager,task,manager,components,get,iomanager,task,manager,components,get,network,environment,rpc,service,ha,services,return,task,executor
TaskExecutor -> @Override 	public CompletableFuture<Acknowledge> requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId, 		final Time timeout);1502452184;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@Override_	public CompletableFuture<Acknowledge> requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId,_		final Time timeout) {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		try {_			if (resourceManagerConnection == null) {_				final String message = "TaskManager is not connected to a resource manager."__				log.debug(message)__				throw new SlotAllocationException(message)__			}__			if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_				final String message = "The leader id " + rmLeaderId +_					" does not match with the leader id of the connected resource manager " +_					resourceManagerConnection.getTargetLeaderId() + '.'___				log.debug(message)__				throw new SlotAllocationException(message)__			}__			if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_				if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_					log.info("Allocated slot for {}.", allocationId)__				} else {_					log.info("Could not allocate slot for {}.", allocationId)__					throw new SlotAllocationException("Could not allocate slot.")__				}_			} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_				final String message = "The slot " + slotId + " has already been allocated for a different job."___				log.info(message)___				throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__			}__			if (jobManagerTable.contains(jobId)) {_				offerSlotsToJobManager(jobId)__			} else {_				try {_					jobLeaderService.addJob(jobId, targetAddress)__				} catch (Exception e) {_					_					try {_						taskSlotTable.freeSlot(allocationId)__					} catch (SlotNotFoundException slotNotFoundException) {_						_						_						onFatalError(slotNotFoundException)__					}__					_					if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_						onFatalError(new Exception("Could not free slot " + slotId))__					}__					throw new SlotAllocationException("Could not add job to job leader service.", e)__				}_			}_		} catch (SlotAllocationException slotAllocationException) {_			return FutureUtils.completedExceptionally(slotAllocationException)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;override,public,completable,future,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,final,time,timeout,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,try,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,catch,slot,allocation,exception,slot,allocation,exception,return,future,utils,completed,exceptionally,slot,allocation,exception,return,completable,future,completed,future,acknowledge,get
TaskExecutor -> @Override 	public CompletableFuture<Acknowledge> requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId, 		final Time timeout);1503041372;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@Override_	public CompletableFuture<Acknowledge> requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId,_		final Time timeout) {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		try {_			if (resourceManagerConnection == null) {_				final String message = "TaskManager is not connected to a resource manager."__				log.debug(message)__				throw new SlotAllocationException(message)__			}__			if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_				final String message = "The leader id " + rmLeaderId +_					" does not match with the leader id of the connected resource manager " +_					resourceManagerConnection.getTargetLeaderId() + '.'___				log.debug(message)__				throw new SlotAllocationException(message)__			}__			if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_				if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_					log.info("Allocated slot for {}.", allocationId)__				} else {_					log.info("Could not allocate slot for {}.", allocationId)__					throw new SlotAllocationException("Could not allocate slot.")__				}_			} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_				final String message = "The slot " + slotId + " has already been allocated for a different job."___				log.info(message)___				throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__			}__			if (jobManagerTable.contains(jobId)) {_				offerSlotsToJobManager(jobId)__			} else {_				try {_					jobLeaderService.addJob(jobId, targetAddress)__				} catch (Exception e) {_					_					try {_						taskSlotTable.freeSlot(allocationId)__					} catch (SlotNotFoundException slotNotFoundException) {_						_						_						onFatalError(slotNotFoundException)__					}__					_					if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_						onFatalError(new Exception("Could not free slot " + slotId))__					}__					throw new SlotAllocationException("Could not add job to job leader service.", e)__				}_			}_		} catch (SlotAllocationException slotAllocationException) {_			return FutureUtils.completedExceptionally(slotAllocationException)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;override,public,completable,future,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,final,time,timeout,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,try,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,catch,slot,allocation,exception,slot,allocation,exception,return,future,utils,completed,exceptionally,slot,allocation,exception,return,completable,future,completed,future,acknowledge,get
TaskExecutor -> @Override 	public CompletableFuture<Acknowledge> requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId, 		final Time timeout);1504477043;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@Override_	public CompletableFuture<Acknowledge> requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId,_		final Time timeout) {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		try {_			if (resourceManagerConnection == null) {_				final String message = "TaskManager is not connected to a resource manager."__				log.debug(message)__				throw new SlotAllocationException(message)__			}__			if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_				final String message = "The leader id " + rmLeaderId +_					" does not match with the leader id of the connected resource manager " +_					resourceManagerConnection.getTargetLeaderId() + '.'___				log.debug(message)__				throw new SlotAllocationException(message)__			}__			if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_				if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_					log.info("Allocated slot for {}.", allocationId)__				} else {_					log.info("Could not allocate slot for {}.", allocationId)__					throw new SlotAllocationException("Could not allocate slot.")__				}_			} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_				final String message = "The slot " + slotId + " has already been allocated for a different job."___				log.info(message)___				throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__			}__			if (jobManagerTable.contains(jobId)) {_				offerSlotsToJobManager(jobId)__			} else {_				try {_					jobLeaderService.addJob(jobId, targetAddress)__				} catch (Exception e) {_					_					try {_						taskSlotTable.freeSlot(allocationId)__					} catch (SlotNotFoundException slotNotFoundException) {_						_						_						onFatalError(slotNotFoundException)__					}__					_					if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_						onFatalError(new Exception("Could not free slot " + slotId))__					}__					throw new SlotAllocationException("Could not add job to job leader service.", e)__				}_			}_		} catch (SlotAllocationException slotAllocationException) {_			return FutureUtils.completedExceptionally(slotAllocationException)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;override,public,completable,future,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,final,time,timeout,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,try,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,catch,slot,allocation,exception,slot,allocation,exception,return,future,utils,completed,exceptionally,slot,allocation,exception,return,completable,future,completed,future,acknowledge,get
TaskExecutor -> @Override 	public CompletableFuture<Acknowledge> requestSlot( 		final SlotID slotId, 		final JobID jobId, 		final AllocationID allocationId, 		final String targetAddress, 		final UUID rmLeaderId, 		final Time timeout);1504507095;Requests a slot from the TaskManager__@param slotId identifying the requested slot_@param jobId identifying the job for which the request is issued_@param allocationId id for the request_@param targetAddress of the job manager requesting the slot_@param rmLeaderId current leader id of the ResourceManager_@throws SlotAllocationException if the slot allocation fails_@return answer to the slot request;@Override_	public CompletableFuture<Acknowledge> requestSlot(_		final SlotID slotId,_		final JobID jobId,_		final AllocationID allocationId,_		final String targetAddress,_		final UUID rmLeaderId,_		final Time timeout) {_		__		log.info("Receive slot request {} for job {} from resource manager with leader id {}.",_			allocationId, jobId, rmLeaderId)___		try {_			if (resourceManagerConnection == null) {_				final String message = "TaskManager is not connected to a resource manager."__				log.debug(message)__				throw new SlotAllocationException(message)__			}__			if (!resourceManagerConnection.getTargetLeaderId().equals(rmLeaderId)) {_				final String message = "The leader id " + rmLeaderId +_					" does not match with the leader id of the connected resource manager " +_					resourceManagerConnection.getTargetLeaderId() + '.'___				log.debug(message)__				throw new SlotAllocationException(message)__			}__			if (taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_				if (taskSlotTable.allocateSlot(slotId.getSlotNumber(), jobId, allocationId, taskManagerConfiguration.getTimeout())) {_					log.info("Allocated slot for {}.", allocationId)__				} else {_					log.info("Could not allocate slot for {}.", allocationId)__					throw new SlotAllocationException("Could not allocate slot.")__				}_			} else if (!taskSlotTable.isAllocated(slotId.getSlotNumber(), jobId, allocationId)) {_				final String message = "The slot " + slotId + " has already been allocated for a different job."___				log.info(message)___				throw new SlotOccupiedException(message, taskSlotTable.getCurrentAllocation(slotId.getSlotNumber()))__			}__			if (jobManagerTable.contains(jobId)) {_				offerSlotsToJobManager(jobId)__			} else {_				try {_					jobLeaderService.addJob(jobId, targetAddress)__				} catch (Exception e) {_					_					try {_						taskSlotTable.freeSlot(allocationId)__					} catch (SlotNotFoundException slotNotFoundException) {_						_						_						onFatalError(slotNotFoundException)__					}__					_					if (!taskSlotTable.isSlotFree(slotId.getSlotNumber())) {_						onFatalError(new Exception("Could not free slot " + slotId))__					}__					throw new SlotAllocationException("Could not add job to job leader service.", e)__				}_			}_		} catch (SlotAllocationException slotAllocationException) {_			return FutureUtils.completedExceptionally(slotAllocationException)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};requests,a,slot,from,the,task,manager,param,slot,id,identifying,the,requested,slot,param,job,id,identifying,the,job,for,which,the,request,is,issued,param,allocation,id,id,for,the,request,param,target,address,of,the,job,manager,requesting,the,slot,param,rm,leader,id,current,leader,id,of,the,resource,manager,throws,slot,allocation,exception,if,the,slot,allocation,fails,return,answer,to,the,slot,request;override,public,completable,future,acknowledge,request,slot,final,slot,id,slot,id,final,job,id,job,id,final,allocation,id,allocation,id,final,string,target,address,final,uuid,rm,leader,id,final,time,timeout,log,info,receive,slot,request,for,job,from,resource,manager,with,leader,id,allocation,id,job,id,rm,leader,id,try,if,resource,manager,connection,null,final,string,message,task,manager,is,not,connected,to,a,resource,manager,log,debug,message,throw,new,slot,allocation,exception,message,if,resource,manager,connection,get,target,leader,id,equals,rm,leader,id,final,string,message,the,leader,id,rm,leader,id,does,not,match,with,the,leader,id,of,the,connected,resource,manager,resource,manager,connection,get,target,leader,id,log,debug,message,throw,new,slot,allocation,exception,message,if,task,slot,table,is,slot,free,slot,id,get,slot,number,if,task,slot,table,allocate,slot,slot,id,get,slot,number,job,id,allocation,id,task,manager,configuration,get,timeout,log,info,allocated,slot,for,allocation,id,else,log,info,could,not,allocate,slot,for,allocation,id,throw,new,slot,allocation,exception,could,not,allocate,slot,else,if,task,slot,table,is,allocated,slot,id,get,slot,number,job,id,allocation,id,final,string,message,the,slot,slot,id,has,already,been,allocated,for,a,different,job,log,info,message,throw,new,slot,occupied,exception,message,task,slot,table,get,current,allocation,slot,id,get,slot,number,if,job,manager,table,contains,job,id,offer,slots,to,job,manager,job,id,else,try,job,leader,service,add,job,job,id,target,address,catch,exception,e,try,task,slot,table,free,slot,allocation,id,catch,slot,not,found,exception,slot,not,found,exception,on,fatal,error,slot,not,found,exception,if,task,slot,table,is,slot,free,slot,id,get,slot,number,on,fatal,error,new,exception,could,not,free,slot,slot,id,throw,new,slot,allocation,exception,could,not,add,job,to,job,leader,service,e,catch,slot,allocation,exception,slot,allocation,exception,return,future,utils,completed,exceptionally,slot,allocation,exception,return,completable,future,completed,future,acknowledge,get
TaskExecutor -> @Override 	public void shutDown() throws Exception;1482522864;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1482522865;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1482522865;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1487441974;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1487769938;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1487871589;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1489657719;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1489766404;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1489766405;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1490090124;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1490273924;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1490273924;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1490347056;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1493146240;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1493386068;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1493975155;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1495001929;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1499250208;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> @Override 	public void shutDown() throws Exception;1501437265;Called to shut down the TaskManager. The method closes all TaskManager services.;@Override_	public void shutDown() throws Exception {_		log.info("Stopping TaskManager {}.", getAddress())___		Exception exception = null___		taskSlotTable.stop()___		if (isConnectedToResourceManager()) {_			resourceManagerConnection.close()__		}__		jobManagerHeartbeatManager.stop()___		resourceManagerHeartbeatManager.stop()___		ioManager.shutdown()___		memoryManager.shutdown()___		networkEnvironment.shutdown()___		fileCache.shutdown()___		try {_			super.shutDown()__		} catch (Exception e) {_			exception = ExceptionUtils.firstOrSuppressed(e, exception)__		}__		if (exception != null) {_			ExceptionUtils.rethrowException(exception, "Error while shutting the TaskExecutor down.")__		}__		log.info("Stopped TaskManager {}.", getAddress())__	};called,to,shut,down,the,task,manager,the,method,closes,all,task,manager,services;override,public,void,shut,down,throws,exception,log,info,stopping,task,manager,get,address,exception,exception,null,task,slot,table,stop,if,is,connected,to,resource,manager,resource,manager,connection,close,job,manager,heartbeat,manager,stop,resource,manager,heartbeat,manager,stop,io,manager,shutdown,memory,manager,shutdown,network,environment,shutdown,file,cache,shutdown,try,super,shut,down,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,if,exception,null,exception,utils,rethrow,exception,exception,error,while,shutting,the,task,executor,down,log,info,stopped,task,manager,get,address
TaskExecutor -> void onFatalError(Throwable t);1482522858;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		_		_		log.error("FATAL ERROR", t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522858;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		_		_		log.error("FATAL ERROR", t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522858;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		_		_		log.error("FATAL ERROR", t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522859;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		_		_		log.error("FATAL ERROR", t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522859;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		_		_		log.error("FATAL ERROR", t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522859;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		_		_		log.error("FATAL ERROR", t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522860;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		_		_		log.error("FATAL ERROR", t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522860;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		_		_		log.error("FATAL ERROR", t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522860;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		_		_		log.error("FATAL ERROR", t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522860;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		_		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522861;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		_		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522862;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522862;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522862;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522862;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522862;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522863;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522863;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522863;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522864;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522864;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522865;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1482522865;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1487441974;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1487769938;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1487871589;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1489657719;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1489766404;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1489766405;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1490090124;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1490273924;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1490273924;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1490347056;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1493146240;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1493386068;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1493975155;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1495001929;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> void onFatalError(Throwable t);1499250208;Notifies the TaskExecutor that a fatal error has occurred and it cannot proceed._This method must only be called from within the TaskExecutor's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,task,executor,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,task,executor,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot(SlotID slotID, AllocationID allocationID, UUID resourceManagerLeaderID);1482522861;Requests a slot from the TaskManager__@param slotID Slot id for the request_@param allocationID id for the request_@param resourceManagerLeaderID current leader id of the ResourceManager_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(SlotID slotID, AllocationID allocationID, UUID resourceManagerLeaderID) {_		if (!resourceManagerConnection.getTargetLeaderId().equals(resourceManagerLeaderID)) {_			return new TMSlotRequestRejected(_				resourceManagerConnection.getRegistrationId(), getResourceID(), allocationID)__		}_		if (unconfirmedFreeSlots.contains(slotID)) {_			_			_			return new TMSlotRequestRejected(_				resourceManagerConnection.getRegistrationId(), getResourceID(), allocationID)__		}_		return new TMSlotRequestRegistered(new InstanceID(), ResourceID.generate(), allocationID)___	};requests,a,slot,from,the,task,manager,param,slot,id,slot,id,for,the,request,param,allocation,id,id,for,the,request,param,resource,manager,leader,id,current,leader,id,of,the,resource,manager,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,slot,id,slot,id,allocation,id,allocation,id,uuid,resource,manager,leader,id,if,resource,manager,connection,get,target,leader,id,equals,resource,manager,leader,id,return,new,tmslot,request,rejected,resource,manager,connection,get,registration,id,get,resource,id,allocation,id,if,unconfirmed,free,slots,contains,slot,id,return,new,tmslot,request,rejected,resource,manager,connection,get,registration,id,get,resource,id,allocation,id,return,new,tmslot,request,registered,new,instance,id,resource,id,generate,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot(SlotID slotID, AllocationID allocationID, UUID resourceManagerLeaderID);1482522862;Requests a slot from the TaskManager__@param slotID Slot id for the request_@param allocationID id for the request_@param resourceManagerLeaderID current leader id of the ResourceManager_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(SlotID slotID, AllocationID allocationID, UUID resourceManagerLeaderID) {_		if (!resourceManagerConnection.getTargetLeaderId().equals(resourceManagerLeaderID)) {_			return new TMSlotRequestRejected(_				resourceManagerConnection.getRegistrationId(), getResourceID(), allocationID)__		}_		if (unconfirmedFreeSlots.contains(slotID)) {_			_			_			return new TMSlotRequestRejected(_				resourceManagerConnection.getRegistrationId(), getResourceID(), allocationID)__		}_		return new TMSlotRequestRegistered(new InstanceID(), ResourceID.generate(), allocationID)___	};requests,a,slot,from,the,task,manager,param,slot,id,slot,id,for,the,request,param,allocation,id,id,for,the,request,param,resource,manager,leader,id,current,leader,id,of,the,resource,manager,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,slot,id,slot,id,allocation,id,allocation,id,uuid,resource,manager,leader,id,if,resource,manager,connection,get,target,leader,id,equals,resource,manager,leader,id,return,new,tmslot,request,rejected,resource,manager,connection,get,registration,id,get,resource,id,allocation,id,if,unconfirmed,free,slots,contains,slot,id,return,new,tmslot,request,rejected,resource,manager,connection,get,registration,id,get,resource,id,allocation,id,return,new,tmslot,request,registered,new,instance,id,resource,id,generate,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot(SlotID slotID, AllocationID allocationID, UUID resourceManagerLeaderID);1482522862;Requests a slot from the TaskManager__@param slotID Slot id for the request_@param allocationID id for the request_@param resourceManagerLeaderID current leader id of the ResourceManager_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(SlotID slotID, AllocationID allocationID, UUID resourceManagerLeaderID) {_		if (!resourceManagerConnection.getTargetLeaderId().equals(resourceManagerLeaderID)) {_			return new TMSlotRequestRejected(_				resourceManagerConnection.getRegistrationId(), getResourceID(), allocationID)__		}_		if (unconfirmedFreeSlots.contains(slotID)) {_			_			_			return new TMSlotRequestRejected(_				resourceManagerConnection.getRegistrationId(), getResourceID(), allocationID)__		}_		return new TMSlotRequestRegistered(new InstanceID(), ResourceID.generate(), allocationID)___	};requests,a,slot,from,the,task,manager,param,slot,id,slot,id,for,the,request,param,allocation,id,id,for,the,request,param,resource,manager,leader,id,current,leader,id,of,the,resource,manager,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,slot,id,slot,id,allocation,id,allocation,id,uuid,resource,manager,leader,id,if,resource,manager,connection,get,target,leader,id,equals,resource,manager,leader,id,return,new,tmslot,request,rejected,resource,manager,connection,get,registration,id,get,resource,id,allocation,id,if,unconfirmed,free,slots,contains,slot,id,return,new,tmslot,request,rejected,resource,manager,connection,get,registration,id,get,resource,id,allocation,id,return,new,tmslot,request,registered,new,instance,id,resource,id,generate,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot(SlotID slotID, AllocationID allocationID, UUID resourceManagerLeaderID);1482522862;Requests a slot from the TaskManager__@param slotID Slot id for the request_@param allocationID id for the request_@param resourceManagerLeaderID current leader id of the ResourceManager_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(SlotID slotID, AllocationID allocationID, UUID resourceManagerLeaderID) {_		if (!resourceManagerConnection.getTargetLeaderId().equals(resourceManagerLeaderID)) {_			return new TMSlotRequestRejected(_				resourceManagerConnection.getRegistrationId(), getResourceID(), allocationID)__		}_		if (unconfirmedFreeSlots.contains(slotID)) {_			_			_			return new TMSlotRequestRejected(_				resourceManagerConnection.getRegistrationId(), getResourceID(), allocationID)__		}_		return new TMSlotRequestRegistered(new InstanceID(), ResourceID.generate(), allocationID)___	};requests,a,slot,from,the,task,manager,param,slot,id,slot,id,for,the,request,param,allocation,id,id,for,the,request,param,resource,manager,leader,id,current,leader,id,of,the,resource,manager,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,slot,id,slot,id,allocation,id,allocation,id,uuid,resource,manager,leader,id,if,resource,manager,connection,get,target,leader,id,equals,resource,manager,leader,id,return,new,tmslot,request,rejected,resource,manager,connection,get,registration,id,get,resource,id,allocation,id,if,unconfirmed,free,slots,contains,slot,id,return,new,tmslot,request,rejected,resource,manager,connection,get,registration,id,get,resource,id,allocation,id,return,new,tmslot,request,registered,new,instance,id,resource,id,generate,allocation,id
TaskExecutor -> @RpcMethod 	public TMSlotRequestReply requestSlot(SlotID slotID, AllocationID allocationID, UUID resourceManagerLeaderID);1482522862;Requests a slot from the TaskManager__@param slotID Slot id for the request_@param allocationID id for the request_@param resourceManagerLeaderID current leader id of the ResourceManager_@return answer to the slot request;@RpcMethod_	public TMSlotRequestReply requestSlot(SlotID slotID, AllocationID allocationID, UUID resourceManagerLeaderID) {_		if (!resourceManagerConnection.getTargetLeaderId().equals(resourceManagerLeaderID)) {_			return new TMSlotRequestRejected(_				resourceManagerConnection.getRegistrationId(), getResourceID(), allocationID)__		}_		if (unconfirmedFreeSlots.contains(slotID)) {_			_			_			return new TMSlotRequestRejected(_				resourceManagerConnection.getRegistrationId(), getResourceID(), allocationID)__		}_		return new TMSlotRequestRegistered(new InstanceID(), ResourceID.generate(), allocationID)___	};requests,a,slot,from,the,task,manager,param,slot,id,slot,id,for,the,request,param,allocation,id,id,for,the,request,param,resource,manager,leader,id,current,leader,id,of,the,resource,manager,return,answer,to,the,slot,request;rpc,method,public,tmslot,request,reply,request,slot,slot,id,slot,id,allocation,id,allocation,id,uuid,resource,manager,leader,id,if,resource,manager,connection,get,target,leader,id,equals,resource,manager,leader,id,return,new,tmslot,request,rejected,resource,manager,connection,get,registration,id,get,resource,id,allocation,id,if,unconfirmed,free,slots,contains,slot,id,return,new,tmslot,request,rejected,resource,manager,connection,get,registration,id,get,resource,id,allocation,id,return,new,tmslot,request,registered,new,instance,id,resource,id,generate,allocation,id
