commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;// ------------------------------------------------------------------------ // leader election service // ------------------------------------------------------------------------ @Override public void start(LeaderContender contender) throws Exception {     checkNotNull(contender, "contender").     synchronized (lock) {         checkState(!shutdown, "service is shut down").         checkState(proposedLeader == null, "service already started").         // directly grant leadership to the given contender         proposedLeader = contender.         notificationExecutor.execute(new GrantLeadershipCall(contender, leaderId)).     } }
false;public;0;23;;@Override public void stop() {     synchronized (lock) {         // notify all listeners that there is no leader         for (EmbeddedLeaderRetrievalService listener : listeners) {             notificationExecutor.execute(new NotifyOfLeaderCall(null, null, listener.listener, LOG)).         }         // if there was a leader, revoke its leadership         if (leader != null) {             try {                 leader.revokeLeadership().             } catch (Throwable t) {                 leader.handleError(t instanceof Exception ? (Exception) t : new Exception(t)).             }         }         proposedLeader = null.         leader = null.         leaderAddress = null.     } }
false;public;1;22;;@Override public void confirmLeaderSessionID(UUID leaderSessionID) {     checkNotNull(leaderSessionID, "leaderSessionID").     checkArgument(leaderSessionID.equals(leaderId), "confirmed wrong leader session id").     synchronized (lock) {         checkState(!shutdown, "service is shut down").         checkState(proposedLeader != null, "no leader proposed yet").         checkState(leader == null, "leader already confirmed").         // accept the confirmation         final String address = proposedLeader.getAddress().         leaderAddress = address.         leader = proposedLeader.         // notify all listeners         for (EmbeddedLeaderRetrievalService listener : listeners) {             notificationExecutor.execute(new NotifyOfLeaderCall(address, leaderId, listener.listener, LOG)).         }     } }
false;public;1;6;;@Override public boolean hasLeadership(@Nonnull UUID leaderSessionId) {     synchronized (lock) {         return proposedLeader != null && leaderSessionId.equals(leaderId).     } }
false;;2;11;;void errorOnGrantLeadership(LeaderContender contender, Throwable error) {     LOG.warn("Error granting leadership to contender", error).     contender.handleError(error instanceof Exception ? (Exception) error : new Exception(error)).     synchronized (lock) {         if (proposedLeader == contender) {             proposedLeader = null.             leader = null.         }     } }
false;public;0;5;;// ------------------------------------------------------------------------ // shutdown // ------------------------------------------------------------------------ public boolean isShutdown() {     synchronized (lock) {         return shutdown.     } }
false;public;0;3;;public void shutdown() {     shutdownInternally(new Exception("The leader service is shutting down")). }
false;private;1;27;;private void shutdownInternally(Exception exceptionForHandlers) {     synchronized (lock) {         if (shutdown) {             return.         }         shutdown = true.         // fail the leader (if there is one)         if (leader != null) {             try {                 leader.handleError(exceptionForHandlers).             } catch (Throwable ignored) {             }         }         // clear all leader status         leader = null.         proposedLeader = null.         leaderAddress = null.         // fail all registered listeners         for (EmbeddedLeaderRetrievalService service : listeners) {             service.shutdown(exceptionForHandlers).         }         listeners.clear().     } }
false;private;1;5;;private void fatalError(Throwable error) {     LOG.error("Embedded leader election service encountered a fatal error. Shutting down service.", error).     shutdownInternally(new Exception("Leader election service is shutting down after a fatal error", error)). }
false;public;0;6;;// ------------------------------------------------------------------------ // leader listeners // ------------------------------------------------------------------------ public LeaderRetrievalService createLeaderRetrievalService() {     synchronized (lock) {         checkState(!shutdown, "leader election service is shut down").         return new EmbeddedLeaderRetrievalService().     } }
false;;2;24;;void addListener(EmbeddedLeaderRetrievalService service, LeaderRetrievalListener listener) {     synchronized (lock) {         checkState(!shutdown, "leader election service is shut down").         checkState(!service.running, "leader retrieval service is already started").         try {             if (!listeners.add(service)) {                 throw new IllegalStateException("leader retrieval service was added to this service multiple times").             }             service.listener = listener.             service.running = true.             // if we already have a leader, immediately notify this new listener             if (leader != null) {                 notificationExecutor.execute(new NotifyOfLeaderCall(leaderAddress, leaderId, listener, LOG)).             }         } catch (Throwable t) {             fatalError(t).         }     } }
false;;1;21;;void removeListener(EmbeddedLeaderRetrievalService service) {     synchronized (lock) {         // if the service was not even started, simply do nothing         if (!service.running || shutdown) {             return.         }         try {             if (!listeners.remove(service)) {                 throw new IllegalStateException("leader retrieval service does not belong to this service").             }             // stop the service             service.listener = null.             service.running = false.         } catch (Throwable t) {             fatalError(t).         }     } }
false;public;1;5;;@Override public void start(LeaderRetrievalListener listener) throws Exception {     checkNotNull(listener).     addListener(this, listener). }
false;public;0;4;;@Override public void stop() throws Exception {     removeListener(this). }
false;;1;11;;void shutdown(Exception cause) {     if (running) {         final LeaderRetrievalListener lst = listener.         running = false.         listener = null.         try {             lst.handleError(cause).         } catch (Throwable ignored) {         }     } }
false;public;0;9;;@Override public void run() {     try {         contender.grantLeadership(leaderSessionId).     } catch (Throwable t) {         errorOnGrantLeadership(contender, t).     } }
false;public;0;10;;@Override public void run() {     try {         listener.notifyLeaderAddress(address, leaderSessionId).     } catch (Throwable t) {         logger.warn("Error notifying leader listener about new leader", t).         listener.handleError(t instanceof Exception ? (Exception) t : new Exception(t)).     } }
