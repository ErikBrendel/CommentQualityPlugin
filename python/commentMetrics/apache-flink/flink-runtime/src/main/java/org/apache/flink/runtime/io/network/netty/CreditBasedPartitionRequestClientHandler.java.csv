# id;timestamp;commentText;codeText;commentWords;codeWords
CreditBasedPartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1518785736;Called on exceptions in the client handler pipeline.__<p>Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {_		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		} else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException && cause.getMessage().equals("Connection reset by peer")) {_				tex = new RemoteTransportException("Lost connection to task manager '" + remoteAddr + "'. " +_					"This indicates that the remote task manager was lost.", remoteAddr, cause)__			} else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
CreditBasedPartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1531388763;Called on exceptions in the client handler pipeline.__<p>Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {_		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		} else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException && cause.getMessage().equals("Connection reset by peer")) {_				tex = new RemoteTransportException("Lost connection to task manager '" + remoteAddr + "'. " +_					"This indicates that the remote task manager was lost.", remoteAddr, cause)__			} else {_				final SocketAddress localAddr = ctx.channel().localAddress()__				tex = new LocalTransportException(_					String.format("%s (connection to '%s')", cause.getMessage(), remoteAddr), localAddr, cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,final,socket,address,local,addr,ctx,channel,local,address,tex,new,local,transport,exception,string,format,s,connection,to,s,cause,get,message,remote,addr,local,addr,cause,notify,all,channels,of,error,and,close,tex
CreditBasedPartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1537385496;Called on exceptions in the client handler pipeline.__<p>Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {_		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		} else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException && cause.getMessage().equals("Connection reset by peer")) {_				tex = new RemoteTransportException("Lost connection to task manager '" + remoteAddr + "'. " +_					"This indicates that the remote task manager was lost.", remoteAddr, cause)__			} else {_				final SocketAddress localAddr = ctx.channel().localAddress()__				tex = new LocalTransportException(_					String.format("%s (connection to '%s')", cause.getMessage(), remoteAddr), localAddr, cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,final,socket,address,local,addr,ctx,channel,local,address,tex,new,local,transport,exception,string,format,s,connection,to,s,cause,get,message,remote,addr,local,addr,cause,notify,all,channels,of,error,and,close,tex
CreditBasedPartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1537385496;Called on exceptions in the client handler pipeline.__<p>Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {_		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		} else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException && cause.getMessage().equals("Connection reset by peer")) {_				tex = new RemoteTransportException("Lost connection to task manager '" + remoteAddr + "'. " +_					"This indicates that the remote task manager was lost.", remoteAddr, cause)__			} else {_				final SocketAddress localAddr = ctx.channel().localAddress()__				tex = new LocalTransportException(_					String.format("%s (connection to '%s')", cause.getMessage(), remoteAddr), localAddr, cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,final,socket,address,local,addr,ctx,channel,local,address,tex,new,local,transport,exception,string,format,s,connection,to,s,cause,get,message,remote,addr,local,addr,cause,notify,all,channels,of,error,and,close,tex
CreditBasedPartitionRequestClientHandler -> @Override 	public void userEventTriggered(ChannelHandlerContext ctx, Object msg) throws Exception;1518785736;Triggered by notifying credit available in the client handler pipeline.__<p>Enqueues the input channel and will trigger write&flush unannounced credits_for this input channel if it is the first one in the queue.;@Override_	public void userEventTriggered(ChannelHandlerContext ctx, Object msg) throws Exception {_		if (msg instanceof RemoteInputChannel) {_			boolean triggerWrite = inputChannelsWithCredit.isEmpty()___			inputChannelsWithCredit.add((RemoteInputChannel) msg)___			if (triggerWrite) {_				writeAndFlushNextMessageIfPossible(ctx.channel())__			}_		} else {_			ctx.fireUserEventTriggered(msg)__		}_	};triggered,by,notifying,credit,available,in,the,client,handler,pipeline,p,enqueues,the,input,channel,and,will,trigger,write,flush,unannounced,credits,for,this,input,channel,if,it,is,the,first,one,in,the,queue;override,public,void,user,event,triggered,channel,handler,context,ctx,object,msg,throws,exception,if,msg,instanceof,remote,input,channel,boolean,trigger,write,input,channels,with,credit,is,empty,input,channels,with,credit,add,remote,input,channel,msg,if,trigger,write,write,and,flush,next,message,if,possible,ctx,channel,else,ctx,fire,user,event,triggered,msg
CreditBasedPartitionRequestClientHandler -> @Override 	public void userEventTriggered(ChannelHandlerContext ctx, Object msg) throws Exception;1531388763;Triggered by notifying credit available in the client handler pipeline.__<p>Enqueues the input channel and will trigger write&flush unannounced credits_for this input channel if it is the first one in the queue.;@Override_	public void userEventTriggered(ChannelHandlerContext ctx, Object msg) throws Exception {_		if (msg instanceof RemoteInputChannel) {_			boolean triggerWrite = inputChannelsWithCredit.isEmpty()___			inputChannelsWithCredit.add((RemoteInputChannel) msg)___			if (triggerWrite) {_				writeAndFlushNextMessageIfPossible(ctx.channel())__			}_		} else {_			ctx.fireUserEventTriggered(msg)__		}_	};triggered,by,notifying,credit,available,in,the,client,handler,pipeline,p,enqueues,the,input,channel,and,will,trigger,write,flush,unannounced,credits,for,this,input,channel,if,it,is,the,first,one,in,the,queue;override,public,void,user,event,triggered,channel,handler,context,ctx,object,msg,throws,exception,if,msg,instanceof,remote,input,channel,boolean,trigger,write,input,channels,with,credit,is,empty,input,channels,with,credit,add,remote,input,channel,msg,if,trigger,write,write,and,flush,next,message,if,possible,ctx,channel,else,ctx,fire,user,event,triggered,msg
CreditBasedPartitionRequestClientHandler -> @Override 	public void userEventTriggered(ChannelHandlerContext ctx, Object msg) throws Exception;1537385496;Triggered by notifying credit available in the client handler pipeline.__<p>Enqueues the input channel and will trigger write&flush unannounced credits_for this input channel if it is the first one in the queue.;@Override_	public void userEventTriggered(ChannelHandlerContext ctx, Object msg) throws Exception {_		if (msg instanceof RemoteInputChannel) {_			boolean triggerWrite = inputChannelsWithCredit.isEmpty()___			inputChannelsWithCredit.add((RemoteInputChannel) msg)___			if (triggerWrite) {_				writeAndFlushNextMessageIfPossible(ctx.channel())__			}_		} else {_			ctx.fireUserEventTriggered(msg)__		}_	};triggered,by,notifying,credit,available,in,the,client,handler,pipeline,p,enqueues,the,input,channel,and,will,trigger,write,flush,unannounced,credits,for,this,input,channel,if,it,is,the,first,one,in,the,queue;override,public,void,user,event,triggered,channel,handler,context,ctx,object,msg,throws,exception,if,msg,instanceof,remote,input,channel,boolean,trigger,write,input,channels,with,credit,is,empty,input,channels,with,credit,add,remote,input,channel,msg,if,trigger,write,write,and,flush,next,message,if,possible,ctx,channel,else,ctx,fire,user,event,triggered,msg
CreditBasedPartitionRequestClientHandler -> @Override 	public void userEventTriggered(ChannelHandlerContext ctx, Object msg) throws Exception;1537385496;Triggered by notifying credit available in the client handler pipeline.__<p>Enqueues the input channel and will trigger write&flush unannounced credits_for this input channel if it is the first one in the queue.;@Override_	public void userEventTriggered(ChannelHandlerContext ctx, Object msg) throws Exception {_		if (msg instanceof RemoteInputChannel) {_			boolean triggerWrite = inputChannelsWithCredit.isEmpty()___			inputChannelsWithCredit.add((RemoteInputChannel) msg)___			if (triggerWrite) {_				writeAndFlushNextMessageIfPossible(ctx.channel())__			}_		} else {_			ctx.fireUserEventTriggered(msg)__		}_	};triggered,by,notifying,credit,available,in,the,client,handler,pipeline,p,enqueues,the,input,channel,and,will,trigger,write,flush,unannounced,credits,for,this,input,channel,if,it,is,the,first,one,in,the,queue;override,public,void,user,event,triggered,channel,handler,context,ctx,object,msg,throws,exception,if,msg,instanceof,remote,input,channel,boolean,trigger,write,input,channels,with,credit,is,empty,input,channels,with,credit,add,remote,input,channel,msg,if,trigger,write,write,and,flush,next,message,if,possible,ctx,channel,else,ctx,fire,user,event,triggered,msg
CreditBasedPartitionRequestClientHandler -> private void writeAndFlushNextMessageIfPossible(Channel channel);1518785736;Tries to write&flush unannounced credits for the next input channel in queue.__<p>This method may be called by the first input channel enqueuing, or the complete_future's callback in previous input channel, or the channel writability changed event.;private void writeAndFlushNextMessageIfPossible(Channel channel) {_		if (channelError.get() != null || !channel.isWritable()) {_			return__		}__		while (true) {_			RemoteInputChannel inputChannel = inputChannelsWithCredit.poll()___			_			_			if (inputChannel == null) {_				return__			}__			_			if (!inputChannel.isReleased()) {_				AddCredit msg = new AddCredit(_					inputChannel.getPartitionId(),_					inputChannel.getAndResetUnannouncedCredit(),_					inputChannel.getInputChannelId())___				_				_				channel.writeAndFlush(msg).addListener(writeListener)___				return__			}_		}_	};tries,to,write,flush,unannounced,credits,for,the,next,input,channel,in,queue,p,this,method,may,be,called,by,the,first,input,channel,enqueuing,or,the,complete,future,s,callback,in,previous,input,channel,or,the,channel,writability,changed,event;private,void,write,and,flush,next,message,if,possible,channel,channel,if,channel,error,get,null,channel,is,writable,return,while,true,remote,input,channel,input,channel,input,channels,with,credit,poll,if,input,channel,null,return,if,input,channel,is,released,add,credit,msg,new,add,credit,input,channel,get,partition,id,input,channel,get,and,reset,unannounced,credit,input,channel,get,input,channel,id,channel,write,and,flush,msg,add,listener,write,listener,return
CreditBasedPartitionRequestClientHandler -> private void writeAndFlushNextMessageIfPossible(Channel channel);1531388763;Tries to write&flush unannounced credits for the next input channel in queue.__<p>This method may be called by the first input channel enqueuing, or the complete_future's callback in previous input channel, or the channel writability changed event.;private void writeAndFlushNextMessageIfPossible(Channel channel) {_		if (channelError.get() != null || !channel.isWritable()) {_			return__		}__		while (true) {_			RemoteInputChannel inputChannel = inputChannelsWithCredit.poll()___			_			_			if (inputChannel == null) {_				return__			}__			_			if (!inputChannel.isReleased()) {_				AddCredit msg = new AddCredit(_					inputChannel.getPartitionId(),_					inputChannel.getAndResetUnannouncedCredit(),_					inputChannel.getInputChannelId())___				_				_				channel.writeAndFlush(msg).addListener(writeListener)___				return__			}_		}_	};tries,to,write,flush,unannounced,credits,for,the,next,input,channel,in,queue,p,this,method,may,be,called,by,the,first,input,channel,enqueuing,or,the,complete,future,s,callback,in,previous,input,channel,or,the,channel,writability,changed,event;private,void,write,and,flush,next,message,if,possible,channel,channel,if,channel,error,get,null,channel,is,writable,return,while,true,remote,input,channel,input,channel,input,channels,with,credit,poll,if,input,channel,null,return,if,input,channel,is,released,add,credit,msg,new,add,credit,input,channel,get,partition,id,input,channel,get,and,reset,unannounced,credit,input,channel,get,input,channel,id,channel,write,and,flush,msg,add,listener,write,listener,return
CreditBasedPartitionRequestClientHandler -> private void writeAndFlushNextMessageIfPossible(Channel channel);1537385496;Tries to write&flush unannounced credits for the next input channel in queue.__<p>This method may be called by the first input channel enqueuing, or the complete_future's callback in previous input channel, or the channel writability changed event.;private void writeAndFlushNextMessageIfPossible(Channel channel) {_		if (channelError.get() != null || !channel.isWritable()) {_			return__		}__		while (true) {_			RemoteInputChannel inputChannel = inputChannelsWithCredit.poll()___			_			_			if (inputChannel == null) {_				return__			}__			_			if (!inputChannel.isReleased()) {_				AddCredit msg = new AddCredit(_					inputChannel.getPartitionId(),_					inputChannel.getAndResetUnannouncedCredit(),_					inputChannel.getInputChannelId())___				_				_				channel.writeAndFlush(msg).addListener(writeListener)___				return__			}_		}_	};tries,to,write,flush,unannounced,credits,for,the,next,input,channel,in,queue,p,this,method,may,be,called,by,the,first,input,channel,enqueuing,or,the,complete,future,s,callback,in,previous,input,channel,or,the,channel,writability,changed,event;private,void,write,and,flush,next,message,if,possible,channel,channel,if,channel,error,get,null,channel,is,writable,return,while,true,remote,input,channel,input,channel,input,channels,with,credit,poll,if,input,channel,null,return,if,input,channel,is,released,add,credit,msg,new,add,credit,input,channel,get,partition,id,input,channel,get,and,reset,unannounced,credit,input,channel,get,input,channel,id,channel,write,and,flush,msg,add,listener,write,listener,return
CreditBasedPartitionRequestClientHandler -> private void writeAndFlushNextMessageIfPossible(Channel channel);1537385496;Tries to write&flush unannounced credits for the next input channel in queue.__<p>This method may be called by the first input channel enqueuing, or the complete_future's callback in previous input channel, or the channel writability changed event.;private void writeAndFlushNextMessageIfPossible(Channel channel) {_		if (channelError.get() != null || !channel.isWritable()) {_			return__		}__		while (true) {_			RemoteInputChannel inputChannel = inputChannelsWithCredit.poll()___			_			_			if (inputChannel == null) {_				return__			}__			_			if (!inputChannel.isReleased()) {_				AddCredit msg = new AddCredit(_					inputChannel.getPartitionId(),_					inputChannel.getAndResetUnannouncedCredit(),_					inputChannel.getInputChannelId())___				_				_				channel.writeAndFlush(msg).addListener(writeListener)___				return__			}_		}_	};tries,to,write,flush,unannounced,credits,for,the,next,input,channel,in,queue,p,this,method,may,be,called,by,the,first,input,channel,enqueuing,or,the,complete,future,s,callback,in,previous,input,channel,or,the,channel,writability,changed,event;private,void,write,and,flush,next,message,if,possible,channel,channel,if,channel,error,get,null,channel,is,writable,return,while,true,remote,input,channel,input,channel,input,channels,with,credit,poll,if,input,channel,null,return,if,input,channel,is,released,add,credit,msg,new,add,credit,input,channel,get,partition,id,input,channel,get,and,reset,unannounced,credit,input,channel,get,input,channel,id,channel,write,and,flush,msg,add,listener,write,listener,return
CreditBasedPartitionRequestClientHandler -> private void checkError() throws IOException;1518785736;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			} else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
CreditBasedPartitionRequestClientHandler -> private void checkError() throws IOException;1531388763;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			} else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
CreditBasedPartitionRequestClientHandler -> private void checkError() throws IOException;1537385496;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			} else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
CreditBasedPartitionRequestClientHandler -> private void checkError() throws IOException;1537385496;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			} else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
