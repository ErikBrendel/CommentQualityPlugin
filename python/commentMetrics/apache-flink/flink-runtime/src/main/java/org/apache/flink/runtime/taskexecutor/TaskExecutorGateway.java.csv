commented;modifiers;parameterAmount;loc;comment;code
true;;6;7;/**  * Requests a slot from the TaskManager.  *  * @param slotId slot id for the request  * @param jobId for which to request a slot  * @param allocationId id for the request  * @param targetAddress to which to offer the requested slots  * @param resourceManagerId current leader id of the ResourceManager  * @param timeout for the operation  * @return answer to the slot request  */ ;/**  * Requests a slot from the TaskManager.  *  * @param slotId slot id for the request  * @param jobId for which to request a slot  * @param allocationId id for the request  * @param targetAddress to which to offer the requested slots  * @param resourceManagerId current leader id of the ResourceManager  * @param timeout for the operation  * @return answer to the slot request  */ CompletableFuture<Acknowledge> requestSlot(SlotID slotId, JobID jobId, AllocationID allocationId, String targetAddress, ResourceManagerId resourceManagerId, @RpcTimeout Time timeout).
false;;6;7;;CompletableFuture<StackTraceSampleResponse> requestStackTraceSample(ExecutionAttemptID executionAttemptId, int sampleId, int numSamples, Time delayBetweenSamples, int maxStackTraceDepth, @RpcTimeout Time timeout).
true;;3;4;/**  * Submit a {@link Task} to the {@link TaskExecutor}.  *  * @param tdd describing the task to submit  * @param jobMasterId identifying the submitting JobMaster  * @param timeout of the submit operation  * @return Future acknowledge of the successful operation  */ ;/**  * Submit a {@link Task} to the {@link TaskExecutor}.  *  * @param tdd describing the task to submit  * @param jobMasterId identifying the submitting JobMaster  * @param timeout of the submit operation  * @return Future acknowledge of the successful operation  */ CompletableFuture<Acknowledge> submitTask(TaskDeploymentDescriptor tdd, JobMasterId jobMasterId, @RpcTimeout Time timeout).
true;;3;4;/**  * Update the task where the given partitions can be found.  *  * @param executionAttemptID identifying the task  * @param partitionInfos telling where the partition can be retrieved from  * @param timeout for the update partitions operation  * @return Future acknowledge if the partitions have been successfully updated  */ ;/**  * Update the task where the given partitions can be found.  *  * @param executionAttemptID identifying the task  * @param partitionInfos telling where the partition can be retrieved from  * @param timeout for the update partitions operation  * @return Future acknowledge if the partitions have been successfully updated  */ CompletableFuture<Acknowledge> updatePartitions(ExecutionAttemptID executionAttemptID, Iterable<PartitionInfo> partitionInfos, @RpcTimeout Time timeout).
true;;1;1;/**  * Fail all intermediate result partitions of the given task.  *  * @param executionAttemptID identifying the task  */ ;/**  * Fail all intermediate result partitions of the given task.  *  * @param executionAttemptID identifying the task  */ void failPartition(ExecutionAttemptID executionAttemptID).
true;;4;1;/**  * Trigger the checkpoint for the given task. The checkpoint is identified by the checkpoint ID  * and the checkpoint timestamp.  *  * @param executionAttemptID identifying the task  * @param checkpointID unique id for the checkpoint  * @param checkpointTimestamp is the timestamp when the checkpoint has been initiated  * @param checkpointOptions for performing the checkpoint  * @return Future acknowledge if the checkpoint has been successfully triggered  */ ;/**  * Trigger the checkpoint for the given task. The checkpoint is identified by the checkpoint ID  * and the checkpoint timestamp.  *  * @param executionAttemptID identifying the task  * @param checkpointID unique id for the checkpoint  * @param checkpointTimestamp is the timestamp when the checkpoint has been initiated  * @param checkpointOptions for performing the checkpoint  * @return Future acknowledge if the checkpoint has been successfully triggered  */ CompletableFuture<Acknowledge> triggerCheckpoint(ExecutionAttemptID executionAttemptID, long checkpointID, long checkpointTimestamp, CheckpointOptions checkpointOptions).
true;;3;1;/**  * Confirm a checkpoint for the given task. The checkpoint is identified by the checkpoint ID  * and the checkpoint timestamp.  *  * @param executionAttemptID identifying the task  * @param checkpointId unique id for the checkpoint  * @param checkpointTimestamp is the timestamp when the checkpoint has been initiated  * @return Future acknowledge if the checkpoint has been successfully confirmed  */ ;/**  * Confirm a checkpoint for the given task. The checkpoint is identified by the checkpoint ID  * and the checkpoint timestamp.  *  * @param executionAttemptID identifying the task  * @param checkpointId unique id for the checkpoint  * @param checkpointTimestamp is the timestamp when the checkpoint has been initiated  * @return Future acknowledge if the checkpoint has been successfully confirmed  */ CompletableFuture<Acknowledge> confirmCheckpoint(ExecutionAttemptID executionAttemptID, long checkpointId, long checkpointTimestamp).
true;;2;1;/**  * Stop the given task.  *  * @param executionAttemptID identifying the task  * @param timeout for the stop operation  * @return Future acknowledge if the task is successfully stopped  */ ;/**  * Stop the given task.  *  * @param executionAttemptID identifying the task  * @param timeout for the stop operation  * @return Future acknowledge if the task is successfully stopped  */ CompletableFuture<Acknowledge> stopTask(ExecutionAttemptID executionAttemptID, @RpcTimeout Time timeout).
true;;2;1;/**  * Cancel the given task.  *  * @param executionAttemptID identifying the task  * @param timeout for the cancel operation  * @return Future acknowledge if the task is successfully canceled  */ ;/**  * Cancel the given task.  *  * @param executionAttemptID identifying the task  * @param timeout for the cancel operation  * @return Future acknowledge if the task is successfully canceled  */ CompletableFuture<Acknowledge> cancelTask(ExecutionAttemptID executionAttemptID, @RpcTimeout Time timeout).
true;;1;1;/**  * Heartbeat request from the job manager.  *  * @param heartbeatOrigin unique id of the job manager  */ ;/**  * Heartbeat request from the job manager.  *  * @param heartbeatOrigin unique id of the job manager  */ void heartbeatFromJobManager(ResourceID heartbeatOrigin).
true;;1;1;/**  * Heartbeat request from the resource manager.  *  * @param heartbeatOrigin unique id of the resource manager  */ ;/**  * Heartbeat request from the resource manager.  *  * @param heartbeatOrigin unique id of the resource manager  */ void heartbeatFromResourceManager(ResourceID heartbeatOrigin).
true;;2;1;/**  * Disconnects the given JobManager from the TaskManager.  *  * @param jobId JobID for which the JobManager was the leader  * @param cause for the disconnection from the JobManager  */ ;/**  * Disconnects the given JobManager from the TaskManager.  *  * @param jobId JobID for which the JobManager was the leader  * @param cause for the disconnection from the JobManager  */ void disconnectJobManager(JobID jobId, Exception cause).
true;;1;1;/**  * Disconnects the ResourceManager from the TaskManager.  *  * @param cause for the disconnection from the ResourceManager  */ ;/**  * Disconnects the ResourceManager from the TaskManager.  *  * @param cause for the disconnection from the ResourceManager  */ void disconnectResourceManager(Exception cause).
true;;3;4;/**  * Frees the slot with the given allocation ID.  *  * @param allocationId identifying the slot to free  * @param cause of the freeing operation  * @param timeout for the operation  * @return Future acknowledge which is returned once the slot has been freed  */ ;/**  * Frees the slot with the given allocation ID.  *  * @param allocationId identifying the slot to free  * @param cause of the freeing operation  * @param timeout for the operation  * @return Future acknowledge which is returned once the slot has been freed  */ CompletableFuture<Acknowledge> freeSlot(final AllocationID allocationId, final Throwable cause, @RpcTimeout final Time timeout).
true;;2;1;/**  * Requests the file upload of the specified type to the cluster's {@link BlobServer}.  *  * @param fileType to upload  * @param timeout for the asynchronous operation  * @return Future which is completed with the {@link TransientBlobKey} of the uploaded file.  */ ;/**  * Requests the file upload of the specified type to the cluster's {@link BlobServer}.  *  * @param fileType to upload  * @param timeout for the asynchronous operation  * @return Future which is completed with the {@link TransientBlobKey} of the uploaded file.  */ CompletableFuture<TransientBlobKey> requestFileUpload(FileType fileType, @RpcTimeout Time timeout).
true;;1;1;/**  * Returns the fully qualified address of Metric Query Service on the TaskManager.  *  * @return Future String with Fully qualified (RPC) address of Metric Query Service on the TaskManager.  */ ;/**  * Returns the fully qualified address of Metric Query Service on the TaskManager.  *  * @return Future String with Fully qualified (RPC) address of Metric Query Service on the TaskManager.  */ CompletableFuture<SerializableOptional<String>> requestMetricQueryServiceAddress(@RpcTimeout Time timeout).
