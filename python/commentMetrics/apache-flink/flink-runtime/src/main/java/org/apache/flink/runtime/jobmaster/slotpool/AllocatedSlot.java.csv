commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the Slot's unique ID defined by its TaskManager.  */ ;// ------------------------------------------------------------------------ /**  * Gets the Slot's unique ID defined by its TaskManager.  */ public SlotID getSlotId() {     return new SlotID(getTaskManagerId(), physicalSlotNumber). }
false;public;0;4;;@Override public AllocationID getAllocationId() {     return allocationId. }
true;public;0;3;/**  * Gets the ID of the TaskManager on which this slot was allocated.  *  * <p>This is equivalent to {@link #getTaskManagerLocation()#getTaskManagerId()}.  *  * @return This slot's TaskManager's ID.  */ ;/**  * Gets the ID of the TaskManager on which this slot was allocated.  *  * <p>This is equivalent to {@link #getTaskManagerLocation()#getTaskManagerId()}.  *  * @return This slot's TaskManager's ID.  */ public ResourceID getTaskManagerId() {     return getTaskManagerLocation().getResourceID(). }
false;public;0;4;;@Override public ResourceProfile getResourceProfile() {     return resourceProfile. }
false;public;0;4;;@Override public TaskManagerLocation getTaskManagerLocation() {     return taskManagerLocation. }
false;public;0;4;;@Override public TaskManagerGateway getTaskManagerGateway() {     return taskManagerGateway. }
false;public;0;4;;@Override public int getPhysicalSlotNumber() {     return physicalSlotNumber. }
true;public;0;3;/**  * Returns true if this slot is being used (e.g. a logical slot is allocated from this slot).  *  * @return true if a logical slot is allocated from this slot, otherwise false  */ ;/**  * Returns true if this slot is being used (e.g. a logical slot is allocated from this slot).  *  * @return true if a logical slot is allocated from this slot, otherwise false  */ public boolean isUsed() {     return payloadReference.get() != null. }
false;public;1;4;;@Override public boolean tryAssignPayload(Payload payload) {     return payloadReference.compareAndSet(null, payload). }
true;public;1;8;/**  * Triggers the release of the assigned payload. If the payload could be released,  * then it is removed from the slot.  *  * @param cause of the release operation  */ ;/**  * Triggers the release of the assigned payload. If the payload could be released,  * then it is removed from the slot.  *  * @param cause of the release operation  */ public void releasePayload(Throwable cause) {     final Payload payload = payloadReference.get().     if (payload != null) {         payload.release(cause).         payloadReference.set(null).     } }
true;public,final;0;4;/**  * This always returns a reference hash code.  */ ;// ------------------------------------------------------------------------ /**  * This always returns a reference hash code.  */ @Override public final int hashCode() {     return super.hashCode(). }
true;public,final;1;4;/**  * This always checks based on reference equality.  */ ;/**  * This always checks based on reference equality.  */ @Override public final boolean equals(Object obj) {     return this == obj. }
false;public;0;4;;@Override public String toString() {     return "AllocatedSlot " + allocationId + " @ " + taskManagerLocation + " - " + physicalSlotNumber. }
