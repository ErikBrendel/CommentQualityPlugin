commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the port range where the queryable state client proxy can listen.  * See {@link org.apache.flink.configuration.QueryableStateOptions#PROXY_PORT_RANGE QueryableStateOptions.PROXY_PORT_RANGE}.  */ ;// ------------------------------------------------------------------------ /**  * Returns the port range where the queryable state client proxy can listen.  * See {@link org.apache.flink.configuration.QueryableStateOptions#PROXY_PORT_RANGE QueryableStateOptions.PROXY_PORT_RANGE}.  */ public Iterator<Integer> getProxyPortRange() {     return proxyPortRange. }
true;public;0;3;/**  * Returns the port range where the queryable state client proxy can listen.  * See {@link org.apache.flink.configuration.QueryableStateOptions#SERVER_PORT_RANGE QueryableStateOptions.SERVER_PORT_RANGE}.  */ ;/**  * Returns the port range where the queryable state client proxy can listen.  * See {@link org.apache.flink.configuration.QueryableStateOptions#SERVER_PORT_RANGE QueryableStateOptions.SERVER_PORT_RANGE}.  */ public Iterator<Integer> getStateServerPortRange() {     return qserverPortRange. }
true;public;0;3;/**  * Returns the number of threads for the query server NIO event loop.  * These threads only process network events and dispatch query requests to the query threads.  */ ;/**  * Returns the number of threads for the query server NIO event loop.  * These threads only process network events and dispatch query requests to the query threads.  */ public int numProxyServerThreads() {     return numProxyThreads. }
true;public;0;3;/**  * Returns the number of threads for the thread pool that performs the actual state lookup.  * These threads perform the actual state lookup.  */ ;/**  * Returns the number of threads for the thread pool that performs the actual state lookup.  * These threads perform the actual state lookup.  */ public int numProxyQueryThreads() {     return numPQueryThreads. }
true;public;0;3;/**  * Returns the number of threads for the query server NIO event loop.  * These threads only process network events and dispatch query requests to the query threads.  */ ;/**  * Returns the number of threads for the query server NIO event loop.  * These threads only process network events and dispatch query requests to the query threads.  */ public int numStateServerThreads() {     return numServerThreads. }
true;public;0;3;/**  * Returns the number of threads for the thread pool that performs the actual state lookup.  * These threads perform the actual state lookup.  */ ;/**  * Returns the number of threads for the thread pool that performs the actual state lookup.  * These threads perform the actual state lookup.  */ public int numStateQueryThreads() {     return numSQueryThreads. }
false;public;0;9;;// ------------------------------------------------------------------------ @Override public String toString() {     return "QueryableStateConfiguration{" + "numProxyServerThreads=" + numProxyThreads + ", numProxyQueryThreads=" + numPQueryThreads + ", numStateServerThreads=" + numServerThreads + ", numStateQueryThreads=" + numSQueryThreads + '}'. }
true;public,static;0;5;/**  * Gets the configuration describing the queryable state as deactivated.  */ ;// ------------------------------------------------------------------------ /**  * Gets the configuration describing the queryable state as deactivated.  */ public static QueryableStateConfiguration disabled() {     final Iterator<Integer> proxyPorts = NetUtils.getPortRangeFromString(QueryableStateOptions.PROXY_PORT_RANGE.defaultValue()).     final Iterator<Integer> serverPorts = NetUtils.getPortRangeFromString(QueryableStateOptions.SERVER_PORT_RANGE.defaultValue()).     return new QueryableStateConfiguration(proxyPorts, serverPorts, 0, 0, 0, 0). }
