commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Returns the {@link KvStateLocation} for the registered KvState instance  * or <code>null</code> if no location information is available.  *  * @param registrationName Name under which the KvState instance is registered.  * @return Location information or <code>null</code>.  */ ;/**  * Returns the {@link KvStateLocation} for the registered KvState instance  * or <code>null</code> if no location information is available.  *  * @param registrationName Name under which the KvState instance is registered.  * @return Location information or <code>null</code>.  */ public KvStateLocation getKvStateLocation(String registrationName) {     return lookupTable.get(registrationName). }
true;public;5;38;/**  * Notifies the registry about a registered KvState instance.  *  * @param jobVertexId JobVertexID the KvState instance belongs to  * @param keyGroupRange Key group range the KvState instance belongs to  * @param registrationName Name under which the KvState has been registered  * @param kvStateId ID of the registered KvState instance  * @param kvStateServerAddress Server address where to find the KvState instance  *  * @throws IllegalArgumentException If JobVertexID does not belong to job  * @throws IllegalArgumentException If state has been registered with same  * name by another operator.  * @throws IndexOutOfBoundsException If key group index is out of bounds.  */ ;/**  * Notifies the registry about a registered KvState instance.  *  * @param jobVertexId JobVertexID the KvState instance belongs to  * @param keyGroupRange Key group range the KvState instance belongs to  * @param registrationName Name under which the KvState has been registered  * @param kvStateId ID of the registered KvState instance  * @param kvStateServerAddress Server address where to find the KvState instance  *  * @throws IllegalArgumentException If JobVertexID does not belong to job  * @throws IllegalArgumentException If state has been registered with same  * name by another operator.  * @throws IndexOutOfBoundsException If key group index is out of bounds.  */ public void notifyKvStateRegistered(JobVertexID jobVertexId, KeyGroupRange keyGroupRange, String registrationName, KvStateID kvStateId, InetSocketAddress kvStateServerAddress) {     KvStateLocation location = lookupTable.get(registrationName).     if (location == null) {         // First registration for this operator, create the location info         ExecutionJobVertex vertex = jobVertices.get(jobVertexId).         if (vertex != null) {             int parallelism = vertex.getMaxParallelism().             location = new KvStateLocation(jobId, jobVertexId, parallelism, registrationName).             lookupTable.put(registrationName, location).         } else {             throw new IllegalArgumentException("Unknown JobVertexID " + jobVertexId).         }     }     // Duplicated name if vertex IDs don't match     if (!location.getJobVertexId().equals(jobVertexId)) {         IllegalStateException duplicate = new IllegalStateException("Registration name clash. KvState with name '" + registrationName + "' has already been registered by another operator (" + location.getJobVertexId() + ").").         ExecutionJobVertex vertex = jobVertices.get(jobVertexId).         if (vertex != null) {             vertex.fail(new SuppressRestartsException(duplicate)).         }         throw duplicate.     }     location.registerKvState(keyGroupRange, kvStateId, kvStateServerAddress). }
true;public;3;25;/**  * Notifies the registry about an unregistered KvState instance.  *  * @param jobVertexId JobVertexID the KvState instance belongs to  * @param keyGroupRange Key group index the KvState instance belongs to  * @param registrationName Name under which the KvState has been registered  * @throws IllegalArgumentException If another operator registered the state instance  * @throws IllegalArgumentException If the registration name is not known  */ ;/**  * Notifies the registry about an unregistered KvState instance.  *  * @param jobVertexId JobVertexID the KvState instance belongs to  * @param keyGroupRange Key group index the KvState instance belongs to  * @param registrationName Name under which the KvState has been registered  * @throws IllegalArgumentException If another operator registered the state instance  * @throws IllegalArgumentException If the registration name is not known  */ public void notifyKvStateUnregistered(JobVertexID jobVertexId, KeyGroupRange keyGroupRange, String registrationName) {     KvStateLocation location = lookupTable.get(registrationName).     if (location != null) {         // Duplicate name if vertex IDs don't match         if (!location.getJobVertexId().equals(jobVertexId)) {             throw new IllegalArgumentException("Another operator (" + location.getJobVertexId() + ") registered the KvState " + "under '" + registrationName + "'.").         }         location.unregisterKvState(keyGroupRange).         if (location.getNumRegisteredKeyGroups() == 0) {             lookupTable.remove(registrationName).         }     } else {         throw new IllegalArgumentException("Unknown registration name '" + registrationName + "'. " + "Probably registration/unregistration race.").     } }
