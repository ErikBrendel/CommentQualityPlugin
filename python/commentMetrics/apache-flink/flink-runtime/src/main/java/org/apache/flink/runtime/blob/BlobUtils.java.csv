# id;timestamp;commentText;codeText;commentWords;codeWords
BlobUtils -> static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception;1445293012;Copies the file from the recovery path to the local file.;static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception {_		if (recoveryPath == null) {_			throw new IllegalStateException("Failed to determine recovery path.")__		}__		if (!localBlobFile.createNewFile()) {_			throw new IllegalStateException("Failed to create new local file to copy to")__		}__		URI uri = new URI(recoveryPath)__		Path path = new Path(recoveryPath)___		if (FileSystem.get(uri).exists(path)) {_			try (InputStream is = FileSystem.get(uri).open(path)) {_				FileOutputStream fos = new FileOutputStream(localBlobFile)__				IOUtils.copyBytes(is, fos)_ _			}_		}_		else {_			throw new IOException("Cannot find required BLOB at '" + recoveryPath + "' for recovery.")__		}_	};copies,the,file,from,the,recovery,path,to,the,local,file;static,void,copy,from,recovery,path,string,recovery,path,file,local,blob,file,throws,exception,if,recovery,path,null,throw,new,illegal,state,exception,failed,to,determine,recovery,path,if,local,blob,file,create,new,file,throw,new,illegal,state,exception,failed,to,create,new,local,file,to,copy,to,uri,uri,new,uri,recovery,path,path,path,new,path,recovery,path,if,file,system,get,uri,exists,path,try,input,stream,is,file,system,get,uri,open,path,file,output,stream,fos,new,file,output,stream,local,blob,file,ioutils,copy,bytes,is,fos,else,throw,new,ioexception,cannot,find,required,blob,at,recovery,path,for,recovery
BlobUtils -> static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception;1460741894;Copies the file from the recovery path to the local file.;static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception {_		if (recoveryPath == null) {_			throw new IllegalStateException("Failed to determine recovery path.")__		}__		if (!localBlobFile.createNewFile()) {_			throw new IllegalStateException("Failed to create new local file to copy to")__		}__		URI uri = new URI(recoveryPath)__		Path path = new Path(recoveryPath)___		if (FileSystem.get(uri).exists(path)) {_			try (InputStream is = FileSystem.get(uri).open(path)) {_				FileOutputStream fos = new FileOutputStream(localBlobFile)__				IOUtils.copyBytes(is, fos)_ _			}_		}_		else {_			throw new IOException("Cannot find required BLOB at '" + recoveryPath + "' for recovery.")__		}_	};copies,the,file,from,the,recovery,path,to,the,local,file;static,void,copy,from,recovery,path,string,recovery,path,file,local,blob,file,throws,exception,if,recovery,path,null,throw,new,illegal,state,exception,failed,to,determine,recovery,path,if,local,blob,file,create,new,file,throw,new,illegal,state,exception,failed,to,create,new,local,file,to,copy,to,uri,uri,new,uri,recovery,path,path,path,new,path,recovery,path,if,file,system,get,uri,exists,path,try,input,stream,is,file,system,get,uri,open,path,file,output,stream,fos,new,file,output,stream,local,blob,file,ioutils,copy,bytes,is,fos,else,throw,new,ioexception,cannot,find,required,blob,at,recovery,path,for,recovery
BlobUtils -> static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception;1463600412;Copies the file from the recovery path to the local file.;static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception {_		if (recoveryPath == null) {_			throw new IllegalStateException("Failed to determine recovery path.")__		}__		if (!localBlobFile.createNewFile()) {_			throw new IllegalStateException("Failed to create new local file to copy to")__		}__		URI uri = new URI(recoveryPath)__		Path path = new Path(recoveryPath)___		if (FileSystem.get(uri).exists(path)) {_			try (InputStream is = FileSystem.get(uri).open(path)) {_				FileOutputStream fos = new FileOutputStream(localBlobFile)__				IOUtils.copyBytes(is, fos)_ _			}_		}_		else {_			throw new IOException("Cannot find required BLOB at '" + recoveryPath + "' for recovery.")__		}_	};copies,the,file,from,the,recovery,path,to,the,local,file;static,void,copy,from,recovery,path,string,recovery,path,file,local,blob,file,throws,exception,if,recovery,path,null,throw,new,illegal,state,exception,failed,to,determine,recovery,path,if,local,blob,file,create,new,file,throw,new,illegal,state,exception,failed,to,create,new,local,file,to,copy,to,uri,uri,new,uri,recovery,path,path,path,new,path,recovery,path,if,file,system,get,uri,exists,path,try,input,stream,is,file,system,get,uri,open,path,file,output,stream,fos,new,file,output,stream,local,blob,file,ioutils,copy,bytes,is,fos,else,throw,new,ioexception,cannot,find,required,blob,at,recovery,path,for,recovery
BlobUtils -> static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception;1465991918;Copies the file from the recovery path to the local file.;static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception {_		if (recoveryPath == null) {_			throw new IllegalStateException("Failed to determine recovery path.")__		}__		if (!localBlobFile.createNewFile()) {_			throw new IllegalStateException("Failed to create new local file to copy to")__		}__		URI uri = new URI(recoveryPath)__		Path path = new Path(recoveryPath)___		if (FileSystem.get(uri).exists(path)) {_			try (InputStream is = FileSystem.get(uri).open(path)) {_				FileOutputStream fos = new FileOutputStream(localBlobFile)__				IOUtils.copyBytes(is, fos)_ _			}_		}_		else {_			throw new IOException("Cannot find required BLOB at '" + recoveryPath + "' for recovery.")__		}_	};copies,the,file,from,the,recovery,path,to,the,local,file;static,void,copy,from,recovery,path,string,recovery,path,file,local,blob,file,throws,exception,if,recovery,path,null,throw,new,illegal,state,exception,failed,to,determine,recovery,path,if,local,blob,file,create,new,file,throw,new,illegal,state,exception,failed,to,create,new,local,file,to,copy,to,uri,uri,new,uri,recovery,path,path,path,new,path,recovery,path,if,file,system,get,uri,exists,path,try,input,stream,is,file,system,get,uri,open,path,file,output,stream,fos,new,file,output,stream,local,blob,file,ioutils,copy,bytes,is,fos,else,throw,new,ioexception,cannot,find,required,blob,at,recovery,path,for,recovery
BlobUtils -> static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception;1472033371;Copies the file from the recovery path to the local file.;static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception {_		if (recoveryPath == null) {_			throw new IllegalStateException("Failed to determine recovery path.")__		}__		if (!localBlobFile.createNewFile()) {_			throw new IllegalStateException("Failed to create new local file to copy to")__		}__		URI uri = new URI(recoveryPath)__		Path path = new Path(recoveryPath)___		if (FileSystem.get(uri).exists(path)) {_			try (InputStream is = FileSystem.get(uri).open(path)) {_				FileOutputStream fos = new FileOutputStream(localBlobFile)__				IOUtils.copyBytes(is, fos)_ _			}_		}_		else {_			throw new IOException("Cannot find required BLOB at '" + recoveryPath + "' for recovery.")__		}_	};copies,the,file,from,the,recovery,path,to,the,local,file;static,void,copy,from,recovery,path,string,recovery,path,file,local,blob,file,throws,exception,if,recovery,path,null,throw,new,illegal,state,exception,failed,to,determine,recovery,path,if,local,blob,file,create,new,file,throw,new,illegal,state,exception,failed,to,create,new,local,file,to,copy,to,uri,uri,new,uri,recovery,path,path,path,new,path,recovery,path,if,file,system,get,uri,exists,path,try,input,stream,is,file,system,get,uri,open,path,file,output,stream,fos,new,file,output,stream,local,blob,file,ioutils,copy,bytes,is,fos,else,throw,new,ioexception,cannot,find,required,blob,at,recovery,path,for,recovery
BlobUtils -> static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception;1482522862;Copies the file from the recovery path to the local file.;static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception {_		if (recoveryPath == null) {_			throw new IllegalStateException("Failed to determine recovery path.")__		}__		if (!localBlobFile.createNewFile()) {_			throw new IllegalStateException("Failed to create new local file to copy to")__		}__		URI uri = new URI(recoveryPath)__		Path path = new Path(recoveryPath)___		if (FileSystem.get(uri).exists(path)) {_			try (InputStream is = FileSystem.get(uri).open(path)) {_				FileOutputStream fos = new FileOutputStream(localBlobFile)__				IOUtils.copyBytes(is, fos)_ _			}_		}_		else {_			throw new IOException("Cannot find required BLOB at '" + recoveryPath + "' for recovery.")__		}_	};copies,the,file,from,the,recovery,path,to,the,local,file;static,void,copy,from,recovery,path,string,recovery,path,file,local,blob,file,throws,exception,if,recovery,path,null,throw,new,illegal,state,exception,failed,to,determine,recovery,path,if,local,blob,file,create,new,file,throw,new,illegal,state,exception,failed,to,create,new,local,file,to,copy,to,uri,uri,new,uri,recovery,path,path,path,new,path,recovery,path,if,file,system,get,uri,exists,path,try,input,stream,is,file,system,get,uri,open,path,file,output,stream,fos,new,file,output,stream,local,blob,file,ioutils,copy,bytes,is,fos,else,throw,new,ioexception,cannot,find,required,blob,at,recovery,path,for,recovery
BlobUtils -> static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception;1487441974;Copies the file from the recovery path to the local file.;static void copyFromRecoveryPath(String recoveryPath, File localBlobFile) throws Exception {_		if (recoveryPath == null) {_			throw new IllegalStateException("Failed to determine recovery path.")__		}__		if (!localBlobFile.createNewFile()) {_			throw new IllegalStateException("Failed to create new local file to copy to")__		}__		URI uri = new URI(recoveryPath)__		Path path = new Path(recoveryPath)___		if (FileSystem.get(uri).exists(path)) {_			try (InputStream is = FileSystem.get(uri).open(path)) {_				FileOutputStream fos = new FileOutputStream(localBlobFile)__				IOUtils.copyBytes(is, fos)_ _			}_		}_		else {_			throw new IOException("Cannot find required BLOB at '" + recoveryPath + "' for recovery.")__		}_	};copies,the,file,from,the,recovery,path,to,the,local,file;static,void,copy,from,recovery,path,string,recovery,path,file,local,blob,file,throws,exception,if,recovery,path,null,throw,new,illegal,state,exception,failed,to,determine,recovery,path,if,local,blob,file,create,new,file,throw,new,illegal,state,exception,failed,to,create,new,local,file,to,copy,to,uri,uri,new,uri,recovery,path,path,path,new,path,recovery,path,if,file,system,get,uri,exists,path,try,input,stream,is,file,system,get,uri,open,path,file,output,stream,fos,new,file,output,stream,local,blob,file,ioutils,copy,bytes,is,fos,else,throw,new,ioexception,cannot,find,required,blob,at,recovery,path,for,recovery
BlobUtils -> static String getStorageLocationPath(String storageDir, @Nullable JobID jobId);1503041372;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getStorageLocationPath(String storageDir, @Nullable JobID jobId);1507212387;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getStorageLocationPath(String storageDir, @Nullable JobID jobId);1507212387;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getStorageLocationPath(String storageDir, @Nullable JobID jobId);1508138617;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getStorageLocationPath(String storageDir, @Nullable JobID jobId);1515428991;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getStorageLocationPath(String storageDir, @Nullable JobID jobId);1516265158;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getStorageLocationPath(String storageDir, @Nullable JobID jobId);1516265159;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getStorageLocationPath(String storageDir, @Nullable JobID jobId);1516971011;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getStorageLocationPath(String storageDir, @Nullable JobID jobId);1519567828;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getStorageLocationPath(String storageDir, @Nullable JobID jobId);1525420604;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getStorageLocationPath(String storageDir, @Nullable JobID jobId);1537436046;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getStorageLocationPath(String storageDir, @Nullable JobID jobId);1537787646;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static void moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile, 			Logger log, @Nullable BlobStore blobStore) throws IOException;1508138617;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use (not thread-safe!).__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key identifying the file_@param storageFile_(local) file where the blob is/should be stored_@param log_logger for debug information_@param blobStore_HA store (or <tt>null</tt> if unavailable)__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;static void moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile,_			Logger log, @Nullable BlobStore blobStore) throws IOException {__		try {_			_			if (!storageFile.exists()) {_				try {_					_					Files.move(incomingFile.toPath(), storageFile.toPath())___					incomingFile = null___				} catch (FileAlreadyExistsException ignored) {_					log.warn("Detected concurrent file modifications. This should only happen if multiple" +_						"BlobServer use the same storage directory.")__					_					_					_				}__				if (blobStore != null) {_					_					_					blobStore.put(storageFile, jobId, blobKey)__				}_			} else {_				log.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__			}_			storageFile = null__		} finally {_			_			_			if (storageFile != null && !storageFile.delete() && storageFile.exists()) {_				log.warn("Could not delete the storage file {}.", storageFile)__			}_			if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.", incomingFile, blobKey, jobId)__			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,not,thread,safe,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,identifying,the,file,param,storage,file,local,file,where,the,blob,is,should,be,stored,param,log,logger,for,debug,information,param,blob,store,ha,store,or,tt,null,tt,if,unavailable,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;static,void,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,blob,key,blob,key,file,storage,file,logger,log,nullable,blob,store,blob,store,throws,ioexception,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,if,blob,store,null,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,storage,file,null,finally,if,storage,file,null,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,storage,file,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobUtils -> static void moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile, 			Logger log, @Nullable BlobStore blobStore) throws IOException;1515428991;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use (not thread-safe!).__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key identifying the file_@param storageFile_(local) file where the blob is/should be stored_@param log_logger for debug information_@param blobStore_HA store (or <tt>null</tt> if unavailable)__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;static void moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile,_			Logger log, @Nullable BlobStore blobStore) throws IOException {__		try {_			_			if (!storageFile.exists()) {_				try {_					_					Files.move(incomingFile.toPath(), storageFile.toPath())___					incomingFile = null___				} catch (FileAlreadyExistsException ignored) {_					log.warn("Detected concurrent file modifications. This should only happen if multiple" +_						"BlobServer use the same storage directory.")__					_					_					_				}__				if (blobStore != null) {_					_					_					blobStore.put(storageFile, jobId, blobKey)__				}_			} else {_				log.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__			}_			storageFile = null__		} finally {_			_			_			if (storageFile != null && !storageFile.delete() && storageFile.exists()) {_				log.warn("Could not delete the storage file {}.", storageFile)__			}_			if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.", incomingFile, blobKey, jobId)__			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,not,thread,safe,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,identifying,the,file,param,storage,file,local,file,where,the,blob,is,should,be,stored,param,log,logger,for,debug,information,param,blob,store,ha,store,or,tt,null,tt,if,unavailable,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;static,void,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,blob,key,blob,key,file,storage,file,logger,log,nullable,blob,store,blob,store,throws,ioexception,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,if,blob,store,null,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,storage,file,null,finally,if,storage,file,null,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,storage,file,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobUtils -> static void moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile, 			Logger log, @Nullable BlobStore blobStore) throws IOException;1516265158;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use (not thread-safe!).__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key identifying the file_@param storageFile_(local) file where the blob is/should be stored_@param log_logger for debug information_@param blobStore_HA store (or <tt>null</tt> if unavailable)__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;static void moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile,_			Logger log, @Nullable BlobStore blobStore) throws IOException {__		try {_			_			if (!storageFile.exists()) {_				try {_					_					Files.move(incomingFile.toPath(), storageFile.toPath())___					incomingFile = null___				} catch (FileAlreadyExistsException ignored) {_					log.warn("Detected concurrent file modifications. This should only happen if multiple" +_						"BlobServer use the same storage directory.")__					_					_					_				}__				if (blobStore != null) {_					_					_					blobStore.put(storageFile, jobId, blobKey)__				}_			} else {_				log.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__			}_			storageFile = null__		} finally {_			_			_			if (storageFile != null && !storageFile.delete() && storageFile.exists()) {_				log.warn("Could not delete the storage file {}.", storageFile)__			}_			if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.", incomingFile, blobKey, jobId)__			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,not,thread,safe,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,identifying,the,file,param,storage,file,local,file,where,the,blob,is,should,be,stored,param,log,logger,for,debug,information,param,blob,store,ha,store,or,tt,null,tt,if,unavailable,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;static,void,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,blob,key,blob,key,file,storage,file,logger,log,nullable,blob,store,blob,store,throws,ioexception,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,if,blob,store,null,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,storage,file,null,finally,if,storage,file,null,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,storage,file,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobUtils -> static void moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile, 			Logger log, @Nullable BlobStore blobStore) throws IOException;1516265159;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use (not thread-safe!).__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key identifying the file_@param storageFile_(local) file where the blob is/should be stored_@param log_logger for debug information_@param blobStore_HA store (or <tt>null</tt> if unavailable)__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;static void moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile,_			Logger log, @Nullable BlobStore blobStore) throws IOException {__		try {_			_			if (!storageFile.exists()) {_				try {_					_					Files.move(incomingFile.toPath(), storageFile.toPath())___					incomingFile = null___				} catch (FileAlreadyExistsException ignored) {_					log.warn("Detected concurrent file modifications. This should only happen if multiple" +_						"BlobServer use the same storage directory.")__					_					_					_				}__				if (blobStore != null) {_					_					_					blobStore.put(storageFile, jobId, blobKey)__				}_			} else {_				log.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__			}_			storageFile = null__		} finally {_			_			_			if (storageFile != null && !storageFile.delete() && storageFile.exists()) {_				log.warn("Could not delete the storage file {}.", storageFile)__			}_			if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.", incomingFile, blobKey, jobId)__			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,not,thread,safe,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,identifying,the,file,param,storage,file,local,file,where,the,blob,is,should,be,stored,param,log,logger,for,debug,information,param,blob,store,ha,store,or,tt,null,tt,if,unavailable,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;static,void,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,blob,key,blob,key,file,storage,file,logger,log,nullable,blob,store,blob,store,throws,ioexception,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,if,blob,store,null,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,storage,file,null,finally,if,storage,file,null,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,storage,file,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobUtils -> static void moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile, 			Logger log, @Nullable BlobStore blobStore) throws IOException;1516971011;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use (not thread-safe!).__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key identifying the file_@param storageFile_(local) file where the blob is/should be stored_@param log_logger for debug information_@param blobStore_HA store (or <tt>null</tt> if unavailable)__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;static void moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile,_			Logger log, @Nullable BlobStore blobStore) throws IOException {__		try {_			_			if (!storageFile.exists()) {_				try {_					_					Files.move(incomingFile.toPath(), storageFile.toPath())___					incomingFile = null___				} catch (FileAlreadyExistsException ignored) {_					log.warn("Detected concurrent file modifications. This should only happen if multiple" +_						"BlobServer use the same storage directory.")__					_					_					_				}__				if (blobStore != null) {_					_					_					blobStore.put(storageFile, jobId, blobKey)__				}_			} else {_				log.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__			}_			storageFile = null__		} finally {_			_			_			if (storageFile != null && !storageFile.delete() && storageFile.exists()) {_				log.warn("Could not delete the storage file {}.", storageFile)__			}_			if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.", incomingFile, blobKey, jobId)__			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,not,thread,safe,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,identifying,the,file,param,storage,file,local,file,where,the,blob,is,should,be,stored,param,log,logger,for,debug,information,param,blob,store,ha,store,or,tt,null,tt,if,unavailable,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;static,void,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,blob,key,blob,key,file,storage,file,logger,log,nullable,blob,store,blob,store,throws,ioexception,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,if,blob,store,null,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,storage,file,null,finally,if,storage,file,null,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,storage,file,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobUtils -> static void moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile, 			Logger log, @Nullable BlobStore blobStore) throws IOException;1519567828;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use (not thread-safe!).__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key identifying the file_@param storageFile_(local) file where the blob is/should be stored_@param log_logger for debug information_@param blobStore_HA store (or <tt>null</tt> if unavailable)__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;static void moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile,_			Logger log, @Nullable BlobStore blobStore) throws IOException {__		try {_			_			if (!storageFile.exists()) {_				try {_					_					Files.move(incomingFile.toPath(), storageFile.toPath())___					incomingFile = null___				} catch (FileAlreadyExistsException ignored) {_					log.warn("Detected concurrent file modifications. This should only happen if multiple" +_						"BlobServer use the same storage directory.")__					_					_					_				}__				if (blobStore != null) {_					_					_					blobStore.put(storageFile, jobId, blobKey)__				}_			} else {_				log.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__			}_			storageFile = null__		} finally {_			_			_			if (storageFile != null && !storageFile.delete() && storageFile.exists()) {_				log.warn("Could not delete the storage file {}.", storageFile)__			}_			if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.", incomingFile, blobKey, jobId)__			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,not,thread,safe,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,identifying,the,file,param,storage,file,local,file,where,the,blob,is,should,be,stored,param,log,logger,for,debug,information,param,blob,store,ha,store,or,tt,null,tt,if,unavailable,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;static,void,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,blob,key,blob,key,file,storage,file,logger,log,nullable,blob,store,blob,store,throws,ioexception,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,if,blob,store,null,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,storage,file,null,finally,if,storage,file,null,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,storage,file,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobUtils -> static void moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile, 			Logger log, @Nullable BlobStore blobStore) throws IOException;1525420604;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use (not thread-safe!).__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key identifying the file_@param storageFile_(local) file where the blob is/should be stored_@param log_logger for debug information_@param blobStore_HA store (or <tt>null</tt> if unavailable)__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;static void moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile,_			Logger log, @Nullable BlobStore blobStore) throws IOException {__		try {_			_			if (!storageFile.exists()) {_				try {_					_					Files.move(incomingFile.toPath(), storageFile.toPath())___					incomingFile = null___				} catch (FileAlreadyExistsException ignored) {_					log.warn("Detected concurrent file modifications. This should only happen if multiple" +_						"BlobServer use the same storage directory.")__					_					_					_				}__				if (blobStore != null) {_					_					_					blobStore.put(storageFile, jobId, blobKey)__				}_			} else {_				log.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__			}_			storageFile = null__		} finally {_			_			_			if (storageFile != null && !storageFile.delete() && storageFile.exists()) {_				log.warn("Could not delete the storage file {}.", storageFile)__			}_			if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.", incomingFile, blobKey, jobId)__			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,not,thread,safe,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,identifying,the,file,param,storage,file,local,file,where,the,blob,is,should,be,stored,param,log,logger,for,debug,information,param,blob,store,ha,store,or,tt,null,tt,if,unavailable,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;static,void,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,blob,key,blob,key,file,storage,file,logger,log,nullable,blob,store,blob,store,throws,ioexception,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,if,blob,store,null,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,storage,file,null,finally,if,storage,file,null,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,storage,file,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobUtils -> static void moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile, 			Logger log, @Nullable BlobStore blobStore) throws IOException;1537436046;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use (not thread-safe!).__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key identifying the file_@param storageFile_(local) file where the blob is/should be stored_@param log_logger for debug information_@param blobStore_HA store (or <tt>null</tt> if unavailable)__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;static void moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile,_			Logger log, @Nullable BlobStore blobStore) throws IOException {__		try {_			_			if (!storageFile.exists()) {_				try {_					_					Files.move(incomingFile.toPath(), storageFile.toPath())___					incomingFile = null___				} catch (FileAlreadyExistsException ignored) {_					log.warn("Detected concurrent file modifications. This should only happen if multiple" +_						"BlobServer use the same storage directory.")__					_					_					_				}__				if (blobStore != null) {_					_					_					blobStore.put(storageFile, jobId, blobKey)__				}_			} else {_				log.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__			}_			storageFile = null__		} finally {_			_			_			if (storageFile != null && !storageFile.delete() && storageFile.exists()) {_				log.warn("Could not delete the storage file {}.", storageFile)__			}_			if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.", incomingFile, blobKey, jobId)__			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,not,thread,safe,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,identifying,the,file,param,storage,file,local,file,where,the,blob,is,should,be,stored,param,log,logger,for,debug,information,param,blob,store,ha,store,or,tt,null,tt,if,unavailable,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;static,void,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,blob,key,blob,key,file,storage,file,logger,log,nullable,blob,store,blob,store,throws,ioexception,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,if,blob,store,null,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,storage,file,null,finally,if,storage,file,null,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,storage,file,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobUtils -> static void moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile, 			Logger log, @Nullable BlobStore blobStore) throws IOException;1537787646;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use (not thread-safe!).__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key identifying the file_@param storageFile_(local) file where the blob is/should be stored_@param log_logger for debug information_@param blobStore_HA store (or <tt>null</tt> if unavailable)__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;static void moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile,_			Logger log, @Nullable BlobStore blobStore) throws IOException {__		try {_			_			if (!storageFile.exists()) {_				try {_					_					Files.move(incomingFile.toPath(), storageFile.toPath())___					incomingFile = null___				} catch (FileAlreadyExistsException ignored) {_					log.warn("Detected concurrent file modifications. This should only happen if multiple" +_						"BlobServer use the same storage directory.")__					_					_					_				}__				if (blobStore != null) {_					_					_					blobStore.put(storageFile, jobId, blobKey)__				}_			} else {_				log.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__			}_			storageFile = null__		} finally {_			_			_			if (storageFile != null && !storageFile.delete() && storageFile.exists()) {_				log.warn("Could not delete the storage file {}.", storageFile)__			}_			if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.", incomingFile, blobKey, jobId)__			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,not,thread,safe,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,identifying,the,file,param,storage,file,local,file,where,the,blob,is,should,be,stored,param,log,logger,for,debug,information,param,blob,store,ha,store,or,tt,null,tt,if,unavailable,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;static,void,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,blob,key,blob,key,file,storage,file,logger,log,nullable,blob,store,blob,store,throws,ioexception,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,if,blob,store,null,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,storage,file,null,finally,if,storage,file,null,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,storage,file,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1424264340;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1427784999;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1429635796;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1443564120;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1445293012;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1460741894;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1463600412;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1465991918;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1472033371;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1482522862;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1487441974;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1487441974;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1489060855;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1493975155;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1494497671;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1495001929;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1499173045;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(File storageDir, BlobKey key);1499789965;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(File storageDir, BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,file,storage,dir,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> private static String encodeKey(String key);1424264340;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;private static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;private,static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> private static String encodeKey(String key);1427784999;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;private static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;private,static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> private static String encodeKey(String key);1429635796;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;private static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;private,static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> private static String encodeKey(String key);1443564120;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;private static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;private,static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static File initStorageDirectory(String storageDirectory) throws 		IOException;1487441974;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service__@throws IOException_thrown if the (local or distributed) file storage cannot be created or_is not usable;static File initStorageDirectory(String storageDirectory) throws_		IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(storageDirectory)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir___		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service,throws,ioexception,thrown,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;static,file,init,storage,directory,string,storage,directory,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,storage,directory,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory) throws 		IOException;1489060855;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service__@throws IOException_thrown if the (local or distributed) file storage cannot be created or_is not usable;static File initStorageDirectory(String storageDirectory) throws_		IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(storageDirectory)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir___		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service,throws,ioexception,thrown,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;static,file,init,storage,directory,string,storage,directory,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,storage,directory,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory) throws 		IOException;1493975155;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service__@throws IOException_thrown if the (local or distributed) file storage cannot be created or_is not usable;static File initStorageDirectory(String storageDirectory) throws_		IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(storageDirectory)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir___		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service,throws,ioexception,thrown,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;static,file,init,storage,directory,string,storage,directory,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,storage,directory,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory) throws 		IOException;1494497671;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service__@throws IOException_thrown if the (local or distributed) file storage cannot be created or_is not usable;static File initStorageDirectory(String storageDirectory) throws_		IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(storageDirectory)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir___		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service,throws,ioexception,thrown,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;static,file,init,storage,directory,string,storage,directory,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,storage,directory,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory) throws 		IOException;1495001929;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service__@throws IOException_thrown if the (local or distributed) file storage cannot be created or_is not usable;static File initStorageDirectory(String storageDirectory) throws_		IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(storageDirectory)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir___		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service,throws,ioexception,thrown,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;static,file,init,storage,directory,string,storage,directory,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,storage,directory,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory) throws 		IOException;1499173045;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service__@throws IOException_thrown if the (local or distributed) file storage cannot be created or_is not usable;static File initStorageDirectory(String storageDirectory) throws_		IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(storageDirectory)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir___		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service,throws,ioexception,thrown,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;static,file,init,storage,directory,string,storage,directory,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,storage,directory,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory) throws 		IOException;1499789965;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service__@throws IOException_thrown if the (local or distributed) file storage cannot be created or_is not usable;static File initStorageDirectory(String storageDirectory) throws_		IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(storageDirectory)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir___		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service,throws,ioexception,thrown,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;static,file,init,storage,directory,string,storage,directory,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,storage,directory,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(String basePath) throws IOException;1502701584;Creates a local storage directory for a blob service under the given parent directory.__@param basePath_base path, i.e. parent directory, of the storage directory to use (if <tt>null</tt> or_empty, the path in <tt>java.io.tmpdir</tt> will be used)__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(String basePath) throws IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,given,parent,directory,param,base,path,base,path,i,e,parent,directory,of,the,storage,directory,to,use,if,tt,null,tt,or,empty,the,path,in,tt,java,io,tmpdir,tt,will,be,used,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,string,base,path,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,base,path,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(String basePath) throws IOException;1502726910;Creates a local storage directory for a blob service under the given parent directory.__@param basePath_base path, i.e. parent directory, of the storage directory to use (if <tt>null</tt> or_empty, the path in <tt>java.io.tmpdir</tt> will be used)__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(String basePath) throws IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,given,parent,directory,param,base,path,base,path,i,e,parent,directory,of,the,storage,directory,to,use,if,tt,null,tt,or,empty,the,path,in,tt,java,io,tmpdir,tt,will,be,used,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,string,base,path,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,base,path,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(String basePath) throws IOException;1503041372;Creates a local storage directory for a blob service under the given parent directory.__@param basePath_base path, i.e. parent directory, of the storage directory to use (if <tt>null</tt> or_empty, the path in <tt>java.io.tmpdir</tt> will be used)__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(String basePath) throws IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,given,parent,directory,param,base,path,base,path,i,e,parent,directory,of,the,storage,directory,to,use,if,tt,null,tt,or,empty,the,path,in,tt,java,io,tmpdir,tt,will,be,used,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,string,base,path,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,base,path,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(String basePath) throws IOException;1507212387;Creates a local storage directory for a blob service under the given parent directory.__@param basePath_base path, i.e. parent directory, of the storage directory to use (if <tt>null</tt> or_empty, the path in <tt>java.io.tmpdir</tt> will be used)__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(String basePath) throws IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,given,parent,directory,param,base,path,base,path,i,e,parent,directory,of,the,storage,directory,to,use,if,tt,null,tt,or,empty,the,path,in,tt,java,io,tmpdir,tt,will,be,used,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,string,base,path,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,base,path,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(String basePath) throws IOException;1507212387;Creates a local storage directory for a blob service under the given parent directory.__@param basePath_base path, i.e. parent directory, of the storage directory to use (if <tt>null</tt> or_empty, the path in <tt>java.io.tmpdir</tt> will be used)__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(String basePath) throws IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,given,parent,directory,param,base,path,base,path,i,e,parent,directory,of,the,storage,directory,to,use,if,tt,null,tt,or,empty,the,path,in,tt,java,io,tmpdir,tt,will,be,used,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,string,base,path,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,base,path,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(String basePath) throws IOException;1508138617;Creates a local storage directory for a blob service under the given parent directory.__@param basePath_base path, i.e. parent directory, of the storage directory to use (if <tt>null</tt> or_empty, the path in <tt>java.io.tmpdir</tt> will be used)__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(String basePath) throws IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,given,parent,directory,param,base,path,base,path,i,e,parent,directory,of,the,storage,directory,to,use,if,tt,null,tt,or,empty,the,path,in,tt,java,io,tmpdir,tt,will,be,used,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,string,base,path,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,base,path,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(String basePath) throws IOException;1515428991;Creates a local storage directory for a blob service under the given parent directory.__@param basePath_base path, i.e. parent directory, of the storage directory to use (if <tt>null</tt> or_empty, the path in <tt>java.io.tmpdir</tt> will be used)__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(String basePath) throws IOException {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		int maxAttempts = 10__		for (int attempt = 0_ attempt < maxAttempts_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,given,parent,directory,param,base,path,base,path,i,e,parent,directory,of,the,storage,directory,to,use,if,tt,null,tt,or,empty,the,path,in,tt,java,io,tmpdir,tt,will,be,used,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,string,base,path,throws,ioexception,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,base,path,file,storage,dir,int,max,attempts,10,for,int,attempt,0,attempt,max,attempts,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static String getStorageLocationPath( 			@Nonnull String storageDir, @Nullable JobID jobId, @Nonnull BlobKey key);1502701584;Returns the path for the given blob key._<p>_The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			@Nonnull String storageDir, @Nullable JobID jobId, @Nonnull BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,nonnull,string,storage,dir,nullable,job,id,job,id,nonnull,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static String getStorageLocationPath( 			@Nonnull String storageDir, @Nullable JobID jobId, @Nonnull BlobKey key);1502726910;Returns the path for the given blob key._<p>_The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			@Nonnull String storageDir, @Nullable JobID jobId, @Nonnull BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,nonnull,string,storage,dir,nullable,job,id,job,id,nonnull,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> private static String encodeKey(final String key);1412605211;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;private static String encodeKey(final String key) {__		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;private,static,string,encode,key,final,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> private static String encodeKey(final String key);1423133799;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;private static String encodeKey(final String key) {__		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;private,static,string,encode,key,final,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> private static String encodeKey(final String key);1423156802;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;private static String encodeKey(final String key) {__		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;private,static,string,encode,key,final,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> private static String encodeKey(final String key);1423158212;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;private static String encodeKey(final String key) {__		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;private,static,string,encode,key,final,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> private static String encodeKey(final String key);1423578739;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;private static String encodeKey(final String key) {__		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;private,static,string,encode,key,final,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> private static String encodeKey(final String key);1423683763;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;private static String encodeKey(final String key) {__		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;private,static,string,encode,key,final,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> private BlobUtils();1443564120;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1445293012;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1460741894;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1463600412;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1465991918;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1472033371;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1482522862;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1487441974;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1487441974;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1489060855;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1493975155;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1494497671;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1495001929;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1499173045;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1499789965;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1502701584;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1502726910;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1503041372;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1507212387;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1507212387;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1508138617;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1515428991;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1516265158;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1516265159;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1516971011;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1519567828;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1525420604;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1537436046;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> private BlobUtils();1537787646;Private constructor to prevent instantiation.;private BlobUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,blob,utils,throw,new,runtime,exception
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1423578739;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		_		Runtime.getRuntime().addShutdownHook(shutdownHook)___		return shutdownHook__	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1423683763;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1424264340;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1427784999;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1429635796;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1443564120;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1445293012;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1460741894;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1463600412;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1465991918;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1472033371;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1482522862;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1487441974;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1487441974;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1489060855;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1493975155;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1494497671;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.shutdown()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook: " + t.getMessage(), t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,shutdown,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,get,message,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1495001929;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.close()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook.", t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,close,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1499173045;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.close()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook.", t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,close,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1499789965;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.close()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook.", t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,close,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1502701584;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.close()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook.", t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,close,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final BlobService service, final Logger logger);1502726910;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final BlobService service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.close()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook.", t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,blob,service,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,close,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static String encodeKey(String key);1445293012;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static String encodeKey(String key);1460741894;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static String encodeKey(String key);1463600412;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static String encodeKey(String key);1465991918;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static String encodeKey(String key);1472033371;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static String encodeKey(String key);1482522862;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static String encodeKey(String key);1487441974;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static String encodeKey(String key);1487441974;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static String encodeKey(String key);1489060855;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static String encodeKey(String key);1493975155;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static String encodeKey(String key);1494497671;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static String encodeKey(String key);1495001929;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> static String encodeKey(String key);1499173045;Translates the user's key for a BLOB into the internal name used by the BLOB server__@param key_the user's key for a BLOB_@return the internal name for the BLOB as used by the BLOB server;static String encodeKey(String key) {_		return BaseEncoding.base64().encode(key.getBytes(DEFAULT_CHARSET))__	};translates,the,user,s,key,for,a,blob,into,the,internal,name,used,by,the,blob,server,param,key,the,user,s,key,for,a,blob,return,the,internal,name,for,the,blob,as,used,by,the,blob,server;static,string,encode,key,string,key,return,base,encoding,base64,encode,key,get,bytes
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1424264340;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1427784999;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1429635796;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1443564120;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1445293012;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1460741894;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1463600412;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1465991918;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1472033371;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1482522862;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1487441974;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1487441974;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1489060855;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1493975155;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1494497671;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1495001929;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		if (!jobDirectory.exists() && !jobDirectory.mkdirs()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,exists,job,directory,mkdirs,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> private static File getJobDirectory(File storageDir, JobID jobID);1499173045;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(File storageDir, JobID jobID) {_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())___		_		_		if (!jobDirectory.mkdirs() && !jobDirectory.exists()) {_			throw new RuntimeException("Could not create jobId directory '" + jobDirectory.getAbsolutePath() + "'.")__		}__		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,file,storage,dir,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,if,job,directory,mkdirs,job,directory,exists,throw,new,runtime,exception,could,not,create,job,id,directory,job,directory,get,absolute,path,return,job,directory
BlobUtils -> static File initStorageDirectory(String storageDirectory);1423683763;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory(String storageDirectory) {_		File baseDir = storageDirectory != null ?_				new File(storageDirectory) :_				new File(System.getProperty("java.io.tmpdir"))___		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++){_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,string,storage,directory,file,base,dir,storage,directory,null,new,file,storage,directory,new,file,system,get,property,java,io,tmpdir,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory);1424264340;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory(String storageDirectory) {_		File baseDir = storageDirectory != null ?_				new File(storageDirectory) :_				new File(System.getProperty("java.io.tmpdir"))___		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++){_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,string,storage,directory,file,base,dir,storage,directory,null,new,file,storage,directory,new,file,system,get,property,java,io,tmpdir,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory);1427784999;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory(String storageDirectory) {_		File baseDir = storageDirectory != null ?_				new File(storageDirectory) :_				new File(System.getProperty("java.io.tmpdir"))___		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++){_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,string,storage,directory,file,base,dir,storage,directory,null,new,file,storage,directory,new,file,system,get,property,java,io,tmpdir,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory);1429635796;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory(String storageDirectory) {_		File baseDir__		if (storageDirectory == null || storageDirectory.trim().isEmpty()) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,string,storage,directory,file,base,dir,if,storage,directory,null,storage,directory,trim,is,empty,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory);1443564120;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory(String storageDirectory) {_		File baseDir__		if (storageDirectory == null || storageDirectory.trim().isEmpty()) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,string,storage,directory,file,base,dir,if,storage,directory,null,storage,directory,trim,is,empty,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory);1445293012;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory(String storageDirectory) {_		File baseDir__		if (storageDirectory == null || storageDirectory.trim().isEmpty()) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,string,storage,directory,file,base,dir,if,storage,directory,null,storage,directory,trim,is,empty,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory);1460741894;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory(String storageDirectory) {_		File baseDir__		if (storageDirectory == null || storageDirectory.trim().isEmpty()) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,string,storage,directory,file,base,dir,if,storage,directory,null,storage,directory,trim,is,empty,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory);1463600412;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory(String storageDirectory) {_		File baseDir__		if (storageDirectory == null || storageDirectory.trim().isEmpty()) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,string,storage,directory,file,base,dir,if,storage,directory,null,storage,directory,trim,is,empty,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory);1465991918;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory(String storageDirectory) {_		File baseDir__		if (storageDirectory == null || storageDirectory.trim().isEmpty()) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,string,storage,directory,file,base,dir,if,storage,directory,null,storage,directory,trim,is,empty,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory);1472033371;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory(String storageDirectory) {_		File baseDir__		if (storageDirectory == null || storageDirectory.trim().isEmpty()) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,string,storage,directory,file,base,dir,if,storage,directory,null,storage,directory,trim,is,empty,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory);1482522862;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory(String storageDirectory) {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(storageDirectory)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir___		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,string,storage,directory,file,base,dir,if,string,utils,is,null,or,whitespace,only,storage,directory,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initStorageDirectory(String storageDirectory);1487441974;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory(String storageDirectory) {_		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(storageDirectory)) {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}_		else {_			baseDir = new File(storageDirectory)__		}__		File storageDir___		final int MAX_ATTEMPTS = 10__		for(int attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,string,storage,directory,file,base,dir,if,string,utils,is,null,or,whitespace,only,storage,directory,base,dir,new,file,system,get,property,java,io,tmpdir,else,base,dir,new,file,storage,directory,file,storage,dir,final,int,10,for,int,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static MessageDigest createMessageDigest();1412605211;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException(e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,e
BlobUtils -> static MessageDigest createMessageDigest();1423133799;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException(e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,e
BlobUtils -> static MessageDigest createMessageDigest();1423156802;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException(e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,e
BlobUtils -> static MessageDigest createMessageDigest();1423158212;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException(e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,e
BlobUtils -> static MessageDigest createMessageDigest();1423578739;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException(e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,e
BlobUtils -> static MessageDigest createMessageDigest();1423683763;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1424264340;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1427784999;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1429635796;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1443564120;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1445293012;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1460741894;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1463600412;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1465991918;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1472033371;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1482522862;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1487441974;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1487441974;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1489060855;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1493975155;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1494497671;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1495001929;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1499173045;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1499789965;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1503041372;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1507212387;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1507212387;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1508138617;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1515428991;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1516265158;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1516265159;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1516971011;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1519567828;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1525420604;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1537436046;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static MessageDigest createMessageDigest();1537787646;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static File getIncomingDirectory(File storageDir) throws IOException;1507212387;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files__@throws IOException_if creating the directory fails;static File getIncomingDirectory(File storageDir) throws IOException {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir)___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files,throws,ioexception,if,creating,the,directory,fails;static,file,get,incoming,directory,file,storage,dir,throws,ioexception,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir) throws IOException;1507212387;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files__@throws IOException_if creating the directory fails;static File getIncomingDirectory(File storageDir) throws IOException {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir)___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files,throws,ioexception,if,creating,the,directory,fails;static,file,get,incoming,directory,file,storage,dir,throws,ioexception,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir) throws IOException;1508138617;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files__@throws IOException_if creating the directory fails;static File getIncomingDirectory(File storageDir) throws IOException {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir)___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files,throws,ioexception,if,creating,the,directory,fails;static,file,get,incoming,directory,file,storage,dir,throws,ioexception,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir) throws IOException;1515428991;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files__@throws IOException_if creating the directory fails;static File getIncomingDirectory(File storageDir) throws IOException {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir)___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files,throws,ioexception,if,creating,the,directory,fails;static,file,get,incoming,directory,file,storage,dir,throws,ioexception,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir) throws IOException;1516265158;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files__@throws IOException_if creating the directory fails;static File getIncomingDirectory(File storageDir) throws IOException {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir)___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files,throws,ioexception,if,creating,the,directory,fails;static,file,get,incoming,directory,file,storage,dir,throws,ioexception,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir) throws IOException;1516265159;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files__@throws IOException_if creating the directory fails;static File getIncomingDirectory(File storageDir) throws IOException {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir)___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files,throws,ioexception,if,creating,the,directory,fails;static,file,get,incoming,directory,file,storage,dir,throws,ioexception,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir) throws IOException;1516971011;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files__@throws IOException_if creating the directory fails;static File getIncomingDirectory(File storageDir) throws IOException {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir)___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files,throws,ioexception,if,creating,the,directory,fails;static,file,get,incoming,directory,file,storage,dir,throws,ioexception,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir) throws IOException;1519567828;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files__@throws IOException_if creating the directory fails;static File getIncomingDirectory(File storageDir) throws IOException {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir)___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files,throws,ioexception,if,creating,the,directory,fails;static,file,get,incoming,directory,file,storage,dir,throws,ioexception,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir) throws IOException;1525420604;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files__@throws IOException_if creating the directory fails;static File getIncomingDirectory(File storageDir) throws IOException {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir)___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files,throws,ioexception,if,creating,the,directory,fails;static,file,get,incoming,directory,file,storage,dir,throws,ioexception,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir) throws IOException;1537436046;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files__@throws IOException_if creating the directory fails;static File getIncomingDirectory(File storageDir) throws IOException {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir)___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files,throws,ioexception,if,creating,the,directory,fails;static,file,get,incoming,directory,file,storage,dir,throws,ioexception,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir) throws IOException;1537787646;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files__@throws IOException_if creating the directory fails;static File getIncomingDirectory(File storageDir) throws IOException {_		final File incomingDir = new File(storageDir, "incoming")___		Files.createDirectories(incomingDir.toPath())___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files,throws,ioexception,if,creating,the,directory,fails;static,file,get,incoming,directory,file,storage,dir,throws,ioexception,final,file,incoming,dir,new,file,storage,dir,incoming,files,create,directories,incoming,dir,to,path,return,incoming,dir
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1445293012;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1460741894;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1463600412;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1465991918;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1472033371;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1482522862;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1487441974;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1487441974;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1489060855;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1493975155;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1494497671;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1495001929;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1499173045;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,s,base,path,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId);1499789965;Returns the path for the given job ID.__<p>The returned path can be used with the state backend for recovery purposes.;static String getRecoveryPath(String basePath, JobID jobId) {_		return String.format("%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString())__	};returns,the,path,for,the,given,job,id,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes;static,string,get,recovery,path,string,base,path,job,id,job,id,return,string,format,s,s,s,base,path,job,id,to,string
BlobUtils -> static void deleteJobDirectory(final File storageDir, final JobID jobID) throws IOException;1412605211;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(final File storageDir, final JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)___		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,final,file,storage,dir,final,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(final File storageDir, final JobID jobID) throws IOException;1423133799;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(final File storageDir, final JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)___		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,final,file,storage,dir,final,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(final File storageDir, final JobID jobID) throws IOException;1423156802;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(final File storageDir, final JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)___		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,final,file,storage,dir,final,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(final File storageDir, final JobID jobID) throws IOException;1423158212;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(final File storageDir, final JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)___		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,final,file,storage,dir,final,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(final File storageDir, final JobID jobID) throws IOException;1423578739;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(final File storageDir, final JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)___		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,final,file,storage,dir,final,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(final File storageDir, final JobID jobID) throws IOException;1423683763;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(final File storageDir, final JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)___		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,final,file,storage,dir,final,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static File getStorageLocation( 			@Nonnull File storageDir, @Nullable JobID jobId, @Nonnull BlobKey key);1502701584;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB;static File getStorageLocation(_			@Nonnull File storageDir, @Nullable JobID jobId, @Nonnull BlobKey key) {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		mkdirTolerateExisting(file.getParentFile(), "cache")___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,nonnull,file,storage,dir,nullable,job,id,job,id,nonnull,blob,key,key,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,mkdir,tolerate,existing,file,get,parent,file,cache,return,file
BlobUtils -> static File getStorageLocation( 			@Nonnull File storageDir, @Nullable JobID jobId, @Nonnull BlobKey key);1502726910;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB;static File getStorageLocation(_			@Nonnull File storageDir, @Nullable JobID jobId, @Nonnull BlobKey key) {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		mkdirTolerateExisting(file.getParentFile(), "cache")___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,nonnull,file,storage,dir,nullable,job,id,job,id,nonnull,blob,key,key,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,mkdir,tolerate,existing,file,get,parent,file,cache,return,file
BlobUtils -> static File getStorageLocation( 			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException;1507212387;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB__@throws IOException_if creating the directory fails;static File getStorageLocation(_			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		mkdirTolerateExisting(file.getParentFile())___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob,throws,ioexception,if,creating,the,directory,fails;static,file,get,storage,location,file,storage,dir,nullable,job,id,job,id,blob,key,key,throws,ioexception,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,mkdir,tolerate,existing,file,get,parent,file,return,file
BlobUtils -> static File getStorageLocation( 			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException;1507212387;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB__@throws IOException_if creating the directory fails;static File getStorageLocation(_			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		mkdirTolerateExisting(file.getParentFile())___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob,throws,ioexception,if,creating,the,directory,fails;static,file,get,storage,location,file,storage,dir,nullable,job,id,job,id,blob,key,key,throws,ioexception,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,mkdir,tolerate,existing,file,get,parent,file,return,file
BlobUtils -> static File getStorageLocation( 			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException;1508138617;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB__@throws IOException_if creating the directory fails;static File getStorageLocation(_			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		mkdirTolerateExisting(file.getParentFile())___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob,throws,ioexception,if,creating,the,directory,fails;static,file,get,storage,location,file,storage,dir,nullable,job,id,job,id,blob,key,key,throws,ioexception,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,mkdir,tolerate,existing,file,get,parent,file,return,file
BlobUtils -> static File getStorageLocation( 			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException;1515428991;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB__@throws IOException_if creating the directory fails;static File getStorageLocation(_			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		mkdirTolerateExisting(file.getParentFile())___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob,throws,ioexception,if,creating,the,directory,fails;static,file,get,storage,location,file,storage,dir,nullable,job,id,job,id,blob,key,key,throws,ioexception,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,mkdir,tolerate,existing,file,get,parent,file,return,file
BlobUtils -> static File getStorageLocation( 			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException;1516265158;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB__@throws IOException_if creating the directory fails;static File getStorageLocation(_			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		mkdirTolerateExisting(file.getParentFile())___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob,throws,ioexception,if,creating,the,directory,fails;static,file,get,storage,location,file,storage,dir,nullable,job,id,job,id,blob,key,key,throws,ioexception,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,mkdir,tolerate,existing,file,get,parent,file,return,file
BlobUtils -> static File getStorageLocation( 			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException;1516265159;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB__@throws IOException_if creating the directory fails;static File getStorageLocation(_			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		mkdirTolerateExisting(file.getParentFile())___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob,throws,ioexception,if,creating,the,directory,fails;static,file,get,storage,location,file,storage,dir,nullable,job,id,job,id,blob,key,key,throws,ioexception,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,mkdir,tolerate,existing,file,get,parent,file,return,file
BlobUtils -> static File getStorageLocation( 			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException;1516971011;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB__@throws IOException_if creating the directory fails;static File getStorageLocation(_			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		mkdirTolerateExisting(file.getParentFile())___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob,throws,ioexception,if,creating,the,directory,fails;static,file,get,storage,location,file,storage,dir,nullable,job,id,job,id,blob,key,key,throws,ioexception,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,mkdir,tolerate,existing,file,get,parent,file,return,file
BlobUtils -> static File getStorageLocation( 			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException;1519567828;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB__@throws IOException_if creating the directory fails;static File getStorageLocation(_			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		mkdirTolerateExisting(file.getParentFile())___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob,throws,ioexception,if,creating,the,directory,fails;static,file,get,storage,location,file,storage,dir,nullable,job,id,job,id,blob,key,key,throws,ioexception,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,mkdir,tolerate,existing,file,get,parent,file,return,file
BlobUtils -> static File getStorageLocation( 			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException;1525420604;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB__@throws IOException_if creating the directory fails;static File getStorageLocation(_			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		mkdirTolerateExisting(file.getParentFile())___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob,throws,ioexception,if,creating,the,directory,fails;static,file,get,storage,location,file,storage,dir,nullable,job,id,job,id,blob,key,key,throws,ioexception,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,mkdir,tolerate,existing,file,get,parent,file,return,file
BlobUtils -> static File getStorageLocation( 			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException;1537436046;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB__@throws IOException_if creating the directory fails;static File getStorageLocation(_			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		mkdirTolerateExisting(file.getParentFile())___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob,throws,ioexception,if,creating,the,directory,fails;static,file,get,storage,location,file,storage,dir,nullable,job,id,job,id,blob,key,key,throws,ioexception,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,mkdir,tolerate,existing,file,get,parent,file,return,file
BlobUtils -> static File getStorageLocation( 			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException;1537787646;Returns the (designated) physical storage location of the BLOB with the given key.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files (or <tt>null</tt> if job-unrelated)__@return the (designated) physical storage location of the BLOB__@throws IOException_if creating the directory fails;static File getStorageLocation(_			File storageDir, @Nullable JobID jobId, BlobKey key) throws IOException {_		File file = new File(getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		Files.createDirectories(file.getParentFile().toPath())___		return file__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,or,tt,null,tt,if,job,unrelated,return,the,designated,physical,storage,location,of,the,blob,throws,ioexception,if,creating,the,directory,fails;static,file,get,storage,location,file,storage,dir,nullable,job,id,job,id,blob,key,key,throws,ioexception,file,file,new,file,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,files,create,directories,file,get,parent,file,to,path,return,file
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1495001929;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1499173045;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1499789965;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1502701584;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1502726910;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1503041372;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1507212387;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1507212387;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1508138617;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1515428991;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1516265158;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1516265159;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1516971011;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1519567828;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1525420604;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return createFileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,create,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1537436046;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		if (HighAvailabilityMode.isHighAvailabilityModeActivated(config)) {_			return createFileSystemBlobStore(config)__		} else {_			return new VoidBlobStore()__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,if,high,availability,mode,is,high,availability,mode,activated,config,return,create,file,system,blob,store,config,else,return,new,void,blob,store
BlobUtils -> public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException;1537787646;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;public static BlobStoreService createBlobStoreFromConfig(Configuration config) throws IOException {_		if (HighAvailabilityMode.isHighAvailabilityModeActivated(config)) {_			return createFileSystemBlobStore(config)__		} else {_			return new VoidBlobStore()__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;public,static,blob,store,service,create,blob,store,from,config,configuration,config,throws,ioexception,if,high,availability,mode,is,high,availability,mode,activated,config,return,create,file,system,blob,store,config,else,return,new,void,blob,store
BlobUtils -> static Throwable readExceptionFromStream(InputStream in) throws IOException;1525420604;Reads exception from given {@link InputStream}.__@param in the input stream to read from_@return exception that was read_@throws IOException thrown if an I/O error occurs while reading from the input_stream;static Throwable readExceptionFromStream(InputStream in) throws IOException {_		int len = readLength(in)__		byte[] bytes = new byte[len]__		readFully(in, bytes, 0, len, "Error message")___		try {_			return (Throwable) InstantiationUtil.deserializeObject(bytes, ClassLoader.getSystemClassLoader())__		}_		catch (ClassNotFoundException e) {_			_			throw new IOException("Could not transfer error message", e)__		}_	};reads,exception,from,given,link,input,stream,param,in,the,input,stream,to,read,from,return,exception,that,was,read,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,throwable,read,exception,from,stream,input,stream,in,throws,ioexception,int,len,read,length,in,byte,bytes,new,byte,len,read,fully,in,bytes,0,len,error,message,try,return,throwable,instantiation,util,deserialize,object,bytes,class,loader,get,system,class,loader,catch,class,not,found,exception,e,throw,new,ioexception,could,not,transfer,error,message,e
BlobUtils -> static Throwable readExceptionFromStream(InputStream in) throws IOException;1537436046;Reads exception from given {@link InputStream}.__@param in the input stream to read from_@return exception that was read_@throws IOException thrown if an I/O error occurs while reading from the input_stream;static Throwable readExceptionFromStream(InputStream in) throws IOException {_		int len = readLength(in)__		byte[] bytes = new byte[len]__		readFully(in, bytes, 0, len, "Error message")___		try {_			return (Throwable) InstantiationUtil.deserializeObject(bytes, ClassLoader.getSystemClassLoader())__		}_		catch (ClassNotFoundException e) {_			_			throw new IOException("Could not transfer error message", e)__		}_	};reads,exception,from,given,link,input,stream,param,in,the,input,stream,to,read,from,return,exception,that,was,read,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,throwable,read,exception,from,stream,input,stream,in,throws,ioexception,int,len,read,length,in,byte,bytes,new,byte,len,read,fully,in,bytes,0,len,error,message,try,return,throwable,instantiation,util,deserialize,object,bytes,class,loader,get,system,class,loader,catch,class,not,found,exception,e,throw,new,ioexception,could,not,transfer,error,message,e
BlobUtils -> static Throwable readExceptionFromStream(InputStream in) throws IOException;1537787646;Reads exception from given {@link InputStream}.__@param in the input stream to read from_@return exception that was read_@throws IOException thrown if an I/O error occurs while reading from the input_stream;static Throwable readExceptionFromStream(InputStream in) throws IOException {_		int len = readLength(in)__		byte[] bytes = new byte[len]__		readFully(in, bytes, 0, len, "Error message")___		try {_			return (Throwable) InstantiationUtil.deserializeObject(bytes, ClassLoader.getSystemClassLoader())__		}_		catch (ClassNotFoundException e) {_			_			throw new IOException("Could not transfer error message", e)__		}_	};reads,exception,from,given,link,input,stream,param,in,the,input,stream,to,read,from,return,exception,that,was,read,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,throwable,read,exception,from,stream,input,stream,in,throws,ioexception,int,len,read,length,in,byte,bytes,new,byte,len,read,fully,in,bytes,0,len,error,message,try,return,throwable,instantiation,util,deserialize,object,bytes,class,loader,get,system,class,loader,catch,class,not,found,exception,e,throw,new,ioexception,could,not,transfer,error,message,e
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1424264340;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1427784999;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1429635796;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1443564120;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1445293012;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1460741894;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1463600412;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1465991918;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1472033371;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1482522862;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1487441974;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1487441974;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1489060855;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1493975155;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1494497671;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1495001929;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(File storageDir, JobID jobID, String key);1499173045;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(File storageDir, JobID jobID, String key) {_		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,file,storage,dir,job,id,job,id,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static BlobStore createBlobStoreFromConfig(Configuration config) throws IOException;1487441974;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;static BlobStore createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return ZookeeperHaServices.createBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;static,blob,store,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,zookeeper,ha,services,create,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> static BlobStore createBlobStoreFromConfig(Configuration config) throws IOException;1489060855;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;static BlobStore createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return ZookeeperHaServices.createBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;static,blob,store,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,zookeeper,ha,services,create,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> static BlobStore createBlobStoreFromConfig(Configuration config) throws IOException;1493975155;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;static BlobStore createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return ZooKeeperHaServices.createBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;static,blob,store,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,zoo,keeper,ha,services,create,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> static BlobStore createBlobStoreFromConfig(Configuration config) throws IOException;1494497671;Creates a BlobStore based on the parameters set in the configuration.__@param config_configuration to use__@return a (distributed) blob store for high availability__@throws IOException_thrown if the (distributed) file storage cannot be created;static BlobStore createBlobStoreFromConfig(Configuration config) throws IOException {_		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			return new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			return ZooKeeperHaServices.createBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + "'.")__		}_	};creates,a,blob,store,based,on,the,parameters,set,in,the,configuration,param,config,configuration,to,use,return,a,distributed,blob,store,for,high,availability,throws,ioexception,thrown,if,the,distributed,file,storage,cannot,be,created;static,blob,store,create,blob,store,from,config,configuration,config,throws,ioexception,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,if,high,availability,mode,high,availability,mode,none,return,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,return,zoo,keeper,ha,services,create,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode
BlobUtils -> static File initLocalStorageDirectory(Configuration config) throws IOException;1516265158;Creates a local storage directory for a blob service under the configuration parameter given_by {@link BlobServerOptions#STORAGE_DIRECTORY}. If this is <tt>null</tt> or empty, we will_fall back to the TaskManager temp directories (given by_{@link ConfigConstants#TASK_MANAGER_TMP_DIR_KEY}_ which in turn falls back to_{@link ConfigConstants#DEFAULT_TASK_MANAGER_TMP_PATH} currently set to_<tt>java.io.tmpdir</tt>) and choose one among them at random.__@param config_Flink configuration__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(Configuration config) throws IOException {__		String basePath = config.getString(BlobServerOptions.STORAGE_DIRECTORY)___		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			final String[] tmpDirPaths = TaskManagerServicesConfiguration.parseTempDirectories(config)__			baseDir = new File(tmpDirPaths[RANDOM.nextInt(tmpDirPaths.length)])__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		int maxAttempts = 10__		for (int attempt = 0_ attempt < maxAttempts_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,configuration,parameter,given,by,link,blob,server,options,if,this,is,tt,null,tt,or,empty,we,will,fall,back,to,the,task,manager,temp,directories,given,by,link,config,constants,which,in,turn,falls,back,to,link,config,constants,currently,set,to,tt,java,io,tmpdir,tt,and,choose,one,among,them,at,random,param,config,flink,configuration,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,configuration,config,throws,ioexception,string,base,path,config,get,string,blob,server,options,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,final,string,tmp,dir,paths,task,manager,services,configuration,parse,temp,directories,config,base,dir,new,file,tmp,dir,paths,random,next,int,tmp,dir,paths,length,else,base,dir,new,file,base,path,file,storage,dir,int,max,attempts,10,for,int,attempt,0,attempt,max,attempts,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(Configuration config) throws IOException;1516265159;Creates a local storage directory for a blob service under the configuration parameter given_by {@link BlobServerOptions#STORAGE_DIRECTORY}. If this is <tt>null</tt> or empty, we will_fall back to Flink's temp directories (given by_{@link org.apache.flink.configuration.CoreOptions#TMP_DIRS}) and choose one among them at_random.__@param config_Flink configuration__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(Configuration config) throws IOException {__		String basePath = config.getString(BlobServerOptions.STORAGE_DIRECTORY)___		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			final String[] tmpDirPaths = ConfigurationUtils.parseTempDirectories(config)__			baseDir = new File(tmpDirPaths[RANDOM.nextInt(tmpDirPaths.length)])__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		int maxAttempts = 10__		for (int attempt = 0_ attempt < maxAttempts_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,configuration,parameter,given,by,link,blob,server,options,if,this,is,tt,null,tt,or,empty,we,will,fall,back,to,flink,s,temp,directories,given,by,link,org,apache,flink,configuration,core,options,and,choose,one,among,them,at,random,param,config,flink,configuration,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,configuration,config,throws,ioexception,string,base,path,config,get,string,blob,server,options,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,final,string,tmp,dir,paths,configuration,utils,parse,temp,directories,config,base,dir,new,file,tmp,dir,paths,random,next,int,tmp,dir,paths,length,else,base,dir,new,file,base,path,file,storage,dir,int,max,attempts,10,for,int,attempt,0,attempt,max,attempts,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(Configuration config) throws IOException;1516971011;Creates a local storage directory for a blob service under the configuration parameter given_by {@link BlobServerOptions#STORAGE_DIRECTORY}. If this is <tt>null</tt> or empty, we will_fall back to Flink's temp directories (given by_{@link org.apache.flink.configuration.CoreOptions#TMP_DIRS}) and choose one among them at_random.__@param config_Flink configuration__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(Configuration config) throws IOException {__		String basePath = config.getString(BlobServerOptions.STORAGE_DIRECTORY)___		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			final String[] tmpDirPaths = ConfigurationUtils.parseTempDirectories(config)__			baseDir = new File(tmpDirPaths[RANDOM.nextInt(tmpDirPaths.length)])__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		int maxAttempts = 10__		for (int attempt = 0_ attempt < maxAttempts_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,configuration,parameter,given,by,link,blob,server,options,if,this,is,tt,null,tt,or,empty,we,will,fall,back,to,flink,s,temp,directories,given,by,link,org,apache,flink,configuration,core,options,and,choose,one,among,them,at,random,param,config,flink,configuration,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,configuration,config,throws,ioexception,string,base,path,config,get,string,blob,server,options,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,final,string,tmp,dir,paths,configuration,utils,parse,temp,directories,config,base,dir,new,file,tmp,dir,paths,random,next,int,tmp,dir,paths,length,else,base,dir,new,file,base,path,file,storage,dir,int,max,attempts,10,for,int,attempt,0,attempt,max,attempts,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(Configuration config) throws IOException;1519567828;Creates a local storage directory for a blob service under the configuration parameter given_by {@link BlobServerOptions#STORAGE_DIRECTORY}. If this is <tt>null</tt> or empty, we will_fall back to Flink's temp directories (given by_{@link org.apache.flink.configuration.CoreOptions#TMP_DIRS}) and choose one among them at_random.__@param config_Flink configuration__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(Configuration config) throws IOException {__		String basePath = config.getString(BlobServerOptions.STORAGE_DIRECTORY)___		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			final String[] tmpDirPaths = ConfigurationUtils.parseTempDirectories(config)__			baseDir = new File(tmpDirPaths[RANDOM.nextInt(tmpDirPaths.length)])__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		int maxAttempts = 10__		for (int attempt = 0_ attempt < maxAttempts_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,configuration,parameter,given,by,link,blob,server,options,if,this,is,tt,null,tt,or,empty,we,will,fall,back,to,flink,s,temp,directories,given,by,link,org,apache,flink,configuration,core,options,and,choose,one,among,them,at,random,param,config,flink,configuration,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,configuration,config,throws,ioexception,string,base,path,config,get,string,blob,server,options,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,final,string,tmp,dir,paths,configuration,utils,parse,temp,directories,config,base,dir,new,file,tmp,dir,paths,random,next,int,tmp,dir,paths,length,else,base,dir,new,file,base,path,file,storage,dir,int,max,attempts,10,for,int,attempt,0,attempt,max,attempts,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(Configuration config) throws IOException;1525420604;Creates a local storage directory for a blob service under the configuration parameter given_by {@link BlobServerOptions#STORAGE_DIRECTORY}. If this is <tt>null</tt> or empty, we will_fall back to Flink's temp directories (given by_{@link org.apache.flink.configuration.CoreOptions#TMP_DIRS}) and choose one among them at_random.__@param config_Flink configuration__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(Configuration config) throws IOException {__		String basePath = config.getString(BlobServerOptions.STORAGE_DIRECTORY)___		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			final String[] tmpDirPaths = ConfigurationUtils.parseTempDirectories(config)__			baseDir = new File(tmpDirPaths[RANDOM.nextInt(tmpDirPaths.length)])__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		int maxAttempts = 10__		for (int attempt = 0_ attempt < maxAttempts_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,configuration,parameter,given,by,link,blob,server,options,if,this,is,tt,null,tt,or,empty,we,will,fall,back,to,flink,s,temp,directories,given,by,link,org,apache,flink,configuration,core,options,and,choose,one,among,them,at,random,param,config,flink,configuration,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,configuration,config,throws,ioexception,string,base,path,config,get,string,blob,server,options,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,final,string,tmp,dir,paths,configuration,utils,parse,temp,directories,config,base,dir,new,file,tmp,dir,paths,random,next,int,tmp,dir,paths,length,else,base,dir,new,file,base,path,file,storage,dir,int,max,attempts,10,for,int,attempt,0,attempt,max,attempts,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(Configuration config) throws IOException;1537436046;Creates a local storage directory for a blob service under the configuration parameter given_by {@link BlobServerOptions#STORAGE_DIRECTORY}. If this is <tt>null</tt> or empty, we will_fall back to Flink's temp directories (given by_{@link org.apache.flink.configuration.CoreOptions#TMP_DIRS}) and choose one among them at_random.__@param config_Flink configuration__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(Configuration config) throws IOException {__		String basePath = config.getString(BlobServerOptions.STORAGE_DIRECTORY)___		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			final String[] tmpDirPaths = ConfigurationUtils.parseTempDirectories(config)__			baseDir = new File(tmpDirPaths[RANDOM.nextInt(tmpDirPaths.length)])__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		int maxAttempts = 10__		for (int attempt = 0_ attempt < maxAttempts_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,configuration,parameter,given,by,link,blob,server,options,if,this,is,tt,null,tt,or,empty,we,will,fall,back,to,flink,s,temp,directories,given,by,link,org,apache,flink,configuration,core,options,and,choose,one,among,them,at,random,param,config,flink,configuration,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,configuration,config,throws,ioexception,string,base,path,config,get,string,blob,server,options,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,final,string,tmp,dir,paths,configuration,utils,parse,temp,directories,config,base,dir,new,file,tmp,dir,paths,random,next,int,tmp,dir,paths,length,else,base,dir,new,file,base,path,file,storage,dir,int,max,attempts,10,for,int,attempt,0,attempt,max,attempts,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static File initLocalStorageDirectory(Configuration config) throws IOException;1537787646;Creates a local storage directory for a blob service under the configuration parameter given_by {@link BlobServerOptions#STORAGE_DIRECTORY}. If this is <tt>null</tt> or empty, we will_fall back to Flink's temp directories (given by_{@link org.apache.flink.configuration.CoreOptions#TMP_DIRS}) and choose one among them at_random.__@param config_Flink configuration__@return a new local storage directory__@throws IOException_thrown if the local file storage cannot be created or is not usable;static File initLocalStorageDirectory(Configuration config) throws IOException {__		String basePath = config.getString(BlobServerOptions.STORAGE_DIRECTORY)___		File baseDir__		if (StringUtils.isNullOrWhitespaceOnly(basePath)) {_			final String[] tmpDirPaths = ConfigurationUtils.parseTempDirectories(config)__			baseDir = new File(tmpDirPaths[RANDOM.nextInt(tmpDirPaths.length)])__		}_		else {_			baseDir = new File(basePath)__		}__		File storageDir___		_		int maxAttempts = 10__		for (int attempt = 0_ attempt < maxAttempts_ attempt++) {_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new IOException("Could not create storage directory for BLOB store in '" + baseDir + "'.")__	};creates,a,local,storage,directory,for,a,blob,service,under,the,configuration,parameter,given,by,link,blob,server,options,if,this,is,tt,null,tt,or,empty,we,will,fall,back,to,flink,s,temp,directories,given,by,link,org,apache,flink,configuration,core,options,and,choose,one,among,them,at,random,param,config,flink,configuration,return,a,new,local,storage,directory,throws,ioexception,thrown,if,the,local,file,storage,cannot,be,created,or,is,not,usable;static,file,init,local,storage,directory,configuration,config,throws,ioexception,string,base,path,config,get,string,blob,server,options,file,base,dir,if,string,utils,is,null,or,whitespace,only,base,path,final,string,tmp,dir,paths,configuration,utils,parse,temp,directories,config,base,dir,new,file,tmp,dir,paths,random,next,int,tmp,dir,paths,length,else,base,dir,new,file,base,path,file,storage,dir,int,max,attempts,10,for,int,attempt,0,attempt,max,attempts,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,mkdirs,return,storage,dir,throw,new,ioexception,could,not,create,storage,directory,for,blob,store,in,base,dir
BlobUtils -> static Thread addShutdownHook(final Closeable service, final Logger logger);1503041372;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final Closeable service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.close()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook.", t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,closeable,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,close,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final Closeable service, final Logger logger);1507212387;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final Closeable service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.close()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook.", t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,closeable,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,close,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final Closeable service, final Logger logger);1507212387;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final Closeable service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.close()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook.", t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,closeable,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,close,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final Closeable service, final Logger logger);1508138617;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final Closeable service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.close()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook.", t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,closeable,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,close,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final Closeable service, final Logger logger);1515428991;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final Closeable service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.close()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook.", t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,closeable,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,close,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final Closeable service, final Logger logger);1516265158;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final Closeable service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.close()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook.", t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,closeable,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,close,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> static Thread addShutdownHook(final Closeable service, final Logger logger);1516265159;Adds a shutdown hook to the JVM and returns the Thread, which has been registered.;static Thread addShutdownHook(final Closeable service, final Logger logger) {_		checkNotNull(service)__		checkNotNull(logger)___		final Thread shutdownHook = new Thread(new Runnable() {_			@Override_			public void run() {_				try {_					service.close()__				}_				catch (Throwable t) {_					logger.error("Error during shutdown of blob service via JVM shutdown hook.", t)__				}_			}_		})___		try {_			_			Runtime.getRuntime().addShutdownHook(shutdownHook)__			return shutdownHook__		}_		catch (IllegalStateException e) {_			_			return null__		}_		catch (Throwable t) {_			logger.error("Cannot register shutdown hook that cleanly terminates the BLOB service.")__			return null__		}_	};adds,a,shutdown,hook,to,the,jvm,and,returns,the,thread,which,has,been,registered;static,thread,add,shutdown,hook,final,closeable,service,final,logger,logger,check,not,null,service,check,not,null,logger,final,thread,shutdown,hook,new,thread,new,runnable,override,public,void,run,try,service,close,catch,throwable,t,logger,error,error,during,shutdown,of,blob,service,via,jvm,shutdown,hook,t,try,runtime,get,runtime,add,shutdown,hook,shutdown,hook,return,shutdown,hook,catch,illegal,state,exception,e,return,null,catch,throwable,t,logger,error,cannot,register,shutdown,hook,that,cleanly,terminates,the,blob,service,return,null
BlobUtils -> private static void mkdirTolerateExisting(final File dir) throws IOException;1507212387;Makes sure a given directory exists by creating it if necessary.__@param dir_directory to create__@throws IOException_if creating the directory fails;private static void mkdirTolerateExisting(final File dir) throws IOException {_		_		_		if (!dir.mkdirs() && !dir.exists()) {_			throw new IOException(_				"Cannot create directory '" + dir.getAbsolutePath() + "'.")__		}_	};makes,sure,a,given,directory,exists,by,creating,it,if,necessary,param,dir,directory,to,create,throws,ioexception,if,creating,the,directory,fails;private,static,void,mkdir,tolerate,existing,final,file,dir,throws,ioexception,if,dir,mkdirs,dir,exists,throw,new,ioexception,cannot,create,directory,dir,get,absolute,path
BlobUtils -> private static void mkdirTolerateExisting(final File dir) throws IOException;1507212387;Makes sure a given directory exists by creating it if necessary.__@param dir_directory to create__@throws IOException_if creating the directory fails;private static void mkdirTolerateExisting(final File dir) throws IOException {_		_		_		if (!dir.mkdirs() && !dir.exists()) {_			throw new IOException(_				"Cannot create directory '" + dir.getAbsolutePath() + "'.")__		}_	};makes,sure,a,given,directory,exists,by,creating,it,if,necessary,param,dir,directory,to,create,throws,ioexception,if,creating,the,directory,fails;private,static,void,mkdir,tolerate,existing,final,file,dir,throws,ioexception,if,dir,mkdirs,dir,exists,throw,new,ioexception,cannot,create,directory,dir,get,absolute,path
BlobUtils -> private static void mkdirTolerateExisting(final File dir) throws IOException;1508138617;Makes sure a given directory exists by creating it if necessary.__@param dir_directory to create__@throws IOException_if creating the directory fails;private static void mkdirTolerateExisting(final File dir) throws IOException {_		_		_		if (!dir.mkdirs() && !dir.exists()) {_			throw new IOException(_				"Cannot create directory '" + dir.getAbsolutePath() + "'.")__		}_	};makes,sure,a,given,directory,exists,by,creating,it,if,necessary,param,dir,directory,to,create,throws,ioexception,if,creating,the,directory,fails;private,static,void,mkdir,tolerate,existing,final,file,dir,throws,ioexception,if,dir,mkdirs,dir,exists,throw,new,ioexception,cannot,create,directory,dir,get,absolute,path
BlobUtils -> private static void mkdirTolerateExisting(final File dir) throws IOException;1515428991;Makes sure a given directory exists by creating it if necessary.__@param dir_directory to create__@throws IOException_if creating the directory fails;private static void mkdirTolerateExisting(final File dir) throws IOException {_		_		_		if (!dir.mkdirs() && !dir.exists()) {_			throw new IOException(_				"Cannot create directory '" + dir.getAbsolutePath() + "'.")__		}_	};makes,sure,a,given,directory,exists,by,creating,it,if,necessary,param,dir,directory,to,create,throws,ioexception,if,creating,the,directory,fails;private,static,void,mkdir,tolerate,existing,final,file,dir,throws,ioexception,if,dir,mkdirs,dir,exists,throw,new,ioexception,cannot,create,directory,dir,get,absolute,path
BlobUtils -> private static void mkdirTolerateExisting(final File dir) throws IOException;1516265158;Makes sure a given directory exists by creating it if necessary.__@param dir_directory to create__@throws IOException_if creating the directory fails;private static void mkdirTolerateExisting(final File dir) throws IOException {_		_		_		if (!dir.mkdirs() && !dir.exists()) {_			throw new IOException(_				"Cannot create directory '" + dir.getAbsolutePath() + "'.")__		}_	};makes,sure,a,given,directory,exists,by,creating,it,if,necessary,param,dir,directory,to,create,throws,ioexception,if,creating,the,directory,fails;private,static,void,mkdir,tolerate,existing,final,file,dir,throws,ioexception,if,dir,mkdirs,dir,exists,throw,new,ioexception,cannot,create,directory,dir,get,absolute,path
BlobUtils -> private static void mkdirTolerateExisting(final File dir) throws IOException;1516265159;Makes sure a given directory exists by creating it if necessary.__@param dir_directory to create__@throws IOException_if creating the directory fails;private static void mkdirTolerateExisting(final File dir) throws IOException {_		_		_		if (!dir.mkdirs() && !dir.exists()) {_			throw new IOException(_				"Cannot create directory '" + dir.getAbsolutePath() + "'.")__		}_	};makes,sure,a,given,directory,exists,by,creating,it,if,necessary,param,dir,directory,to,create,throws,ioexception,if,creating,the,directory,fails;private,static,void,mkdir,tolerate,existing,final,file,dir,throws,ioexception,if,dir,mkdirs,dir,exists,throw,new,ioexception,cannot,create,directory,dir,get,absolute,path
BlobUtils -> private static void mkdirTolerateExisting(final File dir) throws IOException;1516971011;Makes sure a given directory exists by creating it if necessary.__@param dir_directory to create__@throws IOException_if creating the directory fails;private static void mkdirTolerateExisting(final File dir) throws IOException {_		_		_		if (!dir.mkdirs() && !dir.exists()) {_			throw new IOException(_				"Cannot create directory '" + dir.getAbsolutePath() + "'.")__		}_	};makes,sure,a,given,directory,exists,by,creating,it,if,necessary,param,dir,directory,to,create,throws,ioexception,if,creating,the,directory,fails;private,static,void,mkdir,tolerate,existing,final,file,dir,throws,ioexception,if,dir,mkdirs,dir,exists,throw,new,ioexception,cannot,create,directory,dir,get,absolute,path
BlobUtils -> private static void mkdirTolerateExisting(final File dir) throws IOException;1519567828;Makes sure a given directory exists by creating it if necessary.__@param dir_directory to create__@throws IOException_if creating the directory fails;private static void mkdirTolerateExisting(final File dir) throws IOException {_		_		_		if (!dir.mkdirs() && !dir.exists()) {_			throw new IOException(_				"Cannot create directory '" + dir.getAbsolutePath() + "'.")__		}_	};makes,sure,a,given,directory,exists,by,creating,it,if,necessary,param,dir,directory,to,create,throws,ioexception,if,creating,the,directory,fails;private,static,void,mkdir,tolerate,existing,final,file,dir,throws,ioexception,if,dir,mkdirs,dir,exists,throw,new,ioexception,cannot,create,directory,dir,get,absolute,path
BlobUtils -> private static void mkdirTolerateExisting(final File dir) throws IOException;1525420604;Makes sure a given directory exists by creating it if necessary.__@param dir_directory to create__@throws IOException_if creating the directory fails;private static void mkdirTolerateExisting(final File dir) throws IOException {_		_		_		if (!dir.mkdirs() && !dir.exists()) {_			throw new IOException(_				"Cannot create directory '" + dir.getAbsolutePath() + "'.")__		}_	};makes,sure,a,given,directory,exists,by,creating,it,if,necessary,param,dir,directory,to,create,throws,ioexception,if,creating,the,directory,fails;private,static,void,mkdir,tolerate,existing,final,file,dir,throws,ioexception,if,dir,mkdirs,dir,exists,throw,new,ioexception,cannot,create,directory,dir,get,absolute,path
BlobUtils -> private static void mkdirTolerateExisting(final File dir) throws IOException;1537436046;Makes sure a given directory exists by creating it if necessary.__@param dir_directory to create__@throws IOException_if creating the directory fails;private static void mkdirTolerateExisting(final File dir) throws IOException {_		_		_		if (!dir.mkdirs() && !dir.exists()) {_			throw new IOException(_				"Cannot create directory '" + dir.getAbsolutePath() + "'.")__		}_	};makes,sure,a,given,directory,exists,by,creating,it,if,necessary,param,dir,directory,to,create,throws,ioexception,if,creating,the,directory,fails;private,static,void,mkdir,tolerate,existing,final,file,dir,throws,ioexception,if,dir,mkdirs,dir,exists,throw,new,ioexception,cannot,create,directory,dir,get,absolute,path
BlobUtils -> static File initStorageDirectory();1412605211;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory() {_		File baseDir__		String sd = GlobalConfiguration.getString(_				ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		if (sd != null) {_			baseDir = new File(sd)__		} else {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}__		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++){_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			if(!storageDir.exists()){_				_				storageDir.mkdirs()___				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create a storage directory")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,file,base,dir,string,sd,global,configuration,get,string,config,constants,null,if,sd,null,base,dir,new,file,sd,else,base,dir,new,file,system,get,property,java,io,tmpdir,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,a,storage,directory
BlobUtils -> static File initStorageDirectory();1423133799;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory() {_		File baseDir__		String sd = GlobalConfiguration.getString(_				ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		if (sd != null) {_			baseDir = new File(sd)__		} else {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}__		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++){_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,file,base,dir,string,sd,global,configuration,get,string,config,constants,null,if,sd,null,base,dir,new,file,sd,else,base,dir,new,file,system,get,property,java,io,tmpdir,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,in,base,dir
BlobUtils -> static File initStorageDirectory();1423156802;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory() {_		File baseDir__		String sd = GlobalConfiguration.getString(_				ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		if (sd != null) {_			baseDir = new File(sd)__		} else {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}__		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++){_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,file,base,dir,string,sd,global,configuration,get,string,config,constants,null,if,sd,null,base,dir,new,file,sd,else,base,dir,new,file,system,get,property,java,io,tmpdir,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,in,base,dir
BlobUtils -> static File initStorageDirectory();1423158212;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory() {_		File baseDir__		String sd = GlobalConfiguration.getString(_				ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		if (sd != null) {_			baseDir = new File(sd)__		} else {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}__		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++){_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,file,base,dir,string,sd,global,configuration,get,string,config,constants,null,if,sd,null,base,dir,new,file,sd,else,base,dir,new,file,system,get,property,java,io,tmpdir,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,in,base,dir
BlobUtils -> static File initStorageDirectory();1423578739;Creates a storage directory for a blob service.__@return the storage directory used by a BLOB service;static File initStorageDirectory() {_		File baseDir__		String sd = GlobalConfiguration.getString(_				ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		if (sd != null) {_			baseDir = new File(sd)__		} else {_			baseDir = new File(System.getProperty("java.io.tmpdir"))__		}__		File storageDir__		final int MAX_ATTEMPTS = 10__		int attempt___		for(attempt = 0_ attempt < MAX_ATTEMPTS_ attempt++){_			storageDir = new File(baseDir, String.format(_					"blobStore-%s", UUID.randomUUID().toString()))___			_			_			if (!storageDir.exists() && storageDir.mkdirs()) {_				return storageDir__			}_		}__		_		throw new RuntimeException("Could not create storage directory in '" + baseDir + "'.")__	};creates,a,storage,directory,for,a,blob,service,return,the,storage,directory,used,by,a,blob,service;static,file,init,storage,directory,file,base,dir,string,sd,global,configuration,get,string,config,constants,null,if,sd,null,base,dir,new,file,sd,else,base,dir,new,file,system,get,property,java,io,tmpdir,file,storage,dir,final,int,10,int,attempt,for,attempt,0,attempt,attempt,storage,dir,new,file,base,dir,string,format,blob,store,s,uuid,random,uuid,to,string,if,storage,dir,exists,storage,dir,mkdirs,return,storage,dir,throw,new,runtime,exception,could,not,create,storage,directory,in,base,dir
BlobUtils -> private static File getCacheDirectory(File storageDir);1412605211;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")__		cacheDirectory.mkdir()___		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,cache,directory,mkdir,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1423133799;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdir()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdir,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1423156802;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdir()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdir,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1423158212;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdir()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdir,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1423578739;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdir()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdir,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1423683763;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdir()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdir,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1424264340;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdir()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdir,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1427784999;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdir()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdir,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1429635796;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdir()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdir,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1443564120;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdir()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdir,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1445293012;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdirs()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdirs,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1460741894;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdirs()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdirs,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1463600412;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdirs()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdirs,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1465991918;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdirs()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdirs,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1472033371;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdirs()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdirs,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1482522862;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.exists() && !cacheDirectory.mkdirs()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,exists,cache,directory,mkdirs,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1487441974;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.mkdirs() && !cacheDirectory.exists()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,mkdirs,cache,directory,exists,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1487441974;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.mkdirs() && !cacheDirectory.exists()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,mkdirs,cache,directory,exists,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1489060855;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.mkdirs() && !cacheDirectory.exists()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,mkdirs,cache,directory,exists,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1493975155;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.mkdirs() && !cacheDirectory.exists()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,mkdirs,cache,directory,exists,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1494497671;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.mkdirs() && !cacheDirectory.exists()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,mkdirs,cache,directory,exists,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1495001929;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.mkdirs() && !cacheDirectory.exists()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,mkdirs,cache,directory,exists,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1499173045;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.mkdirs() && !cacheDirectory.exists()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,mkdirs,cache,directory,exists,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getCacheDirectory(File storageDir);1499789965;Returns the BLOB service's directory for cached files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for cached files;private static File getCacheDirectory(File storageDir) {_		final File cacheDirectory = new File(storageDir, "cache")___		if (!cacheDirectory.mkdirs() && !cacheDirectory.exists()) {_			throw new RuntimeException("Could not create cache directory '" + cacheDirectory.getAbsolutePath() + "'.")__		}__		return cacheDirectory__	};returns,the,blob,service,s,directory,for,cached,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,cached,files;private,static,file,get,cache,directory,file,storage,dir,final,file,cache,directory,new,file,storage,dir,cache,if,cache,directory,mkdirs,cache,directory,exists,throw,new,runtime,exception,could,not,create,cache,directory,cache,directory,get,absolute,path,return,cache,directory
BlobUtils -> private static File getJobDirectory(final File storageDir, final JobID jobID);1412605211;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(final File storageDir, final JobID jobID){_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())__		jobDirectory.mkdirs()___		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,final,file,storage,dir,final,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,job,directory,mkdirs,return,job,directory
BlobUtils -> private static File getJobDirectory(final File storageDir, final JobID jobID);1423133799;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(final File storageDir, final JobID jobID){_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())__		jobDirectory.mkdirs()___		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,final,file,storage,dir,final,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,job,directory,mkdirs,return,job,directory
BlobUtils -> private static File getJobDirectory(final File storageDir, final JobID jobID);1423156802;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(final File storageDir, final JobID jobID){_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())__		jobDirectory.mkdirs()___		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,final,file,storage,dir,final,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,job,directory,mkdirs,return,job,directory
BlobUtils -> private static File getJobDirectory(final File storageDir, final JobID jobID);1423158212;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(final File storageDir, final JobID jobID){_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())__		jobDirectory.mkdirs()___		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,final,file,storage,dir,final,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,job,directory,mkdirs,return,job,directory
BlobUtils -> private static File getJobDirectory(final File storageDir, final JobID jobID);1423578739;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(final File storageDir, final JobID jobID){_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())__		jobDirectory.mkdirs()___		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,final,file,storage,dir,final,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,job,directory,mkdirs,return,job,directory
BlobUtils -> private static File getJobDirectory(final File storageDir, final JobID jobID);1423683763;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID.__@param jobID_the ID of the job to return the storage directory for_@return the storage directory for BLOBs belonging to the job with the given ID;private static File getJobDirectory(final File storageDir, final JobID jobID){_		final File jobDirectory = new File(storageDir, JOB_DIR_PREFIX + jobID.toString())__		jobDirectory.mkdirs()___		return jobDirectory__	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;private,static,file,get,job,directory,final,file,storage,dir,final,job,id,job,id,final,file,job,directory,new,file,storage,dir,job,id,to,string,job,directory,mkdirs,return,job,directory
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1424264340;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1427784999;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1429635796;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1443564120;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1445293012;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1460741894;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1463600412;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1465991918;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1472033371;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1482522862;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1487441974;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1487441974;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1489060855;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1493975155;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1494497671;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1495001929;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1499173045;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1499789965;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1502701584;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1502726910;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1503041372;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1507212387;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1507212387;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1508138617;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1515428991;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1516265158;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1516265159;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1516971011;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1519567828;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1525420604;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1537436046;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> static int readLength(InputStream inputStream) throws IOException;1537787646;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(InputStream inputStream) throws IOException {_		byte[] buf = new byte[4]__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException("Read an incomplete length")__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,input,stream,input,stream,throws,ioexception,byte,buf,new,byte,4,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,read,an,incomplete,length,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobUtils -> private static void mkdirTolerateExisting(final File dir, final String dirType);1502701584;Makes sure a given directory exists by creating it if necessary.__@param dir_directory to create_@param dirType_the type of the directory (included in error message if something fails);private static void mkdirTolerateExisting(final File dir, final String dirType) {_		_		_		if (!dir.mkdirs() && !dir.exists()) {_			throw new RuntimeException(_				"Cannot create " + dirType + " directory '" + dir.getAbsolutePath() + "'.")__		}_	};makes,sure,a,given,directory,exists,by,creating,it,if,necessary,param,dir,directory,to,create,param,dir,type,the,type,of,the,directory,included,in,error,message,if,something,fails;private,static,void,mkdir,tolerate,existing,final,file,dir,final,string,dir,type,if,dir,mkdirs,dir,exists,throw,new,runtime,exception,cannot,create,dir,type,directory,dir,get,absolute,path
BlobUtils -> private static void mkdirTolerateExisting(final File dir, final String dirType);1502726910;Makes sure a given directory exists by creating it if necessary.__@param dir_directory to create_@param dirType_the type of the directory (included in error message if something fails);private static void mkdirTolerateExisting(final File dir, final String dirType) {_		_		_		if (!dir.mkdirs() && !dir.exists()) {_			throw new RuntimeException(_				"Cannot create " + dirType + " directory '" + dir.getAbsolutePath() + "'.")__		}_	};makes,sure,a,given,directory,exists,by,creating,it,if,necessary,param,dir,directory,to,create,param,dir,type,the,type,of,the,directory,included,in,error,message,if,something,fails;private,static,void,mkdir,tolerate,existing,final,file,dir,final,string,dir,type,if,dir,mkdirs,dir,exists,throw,new,runtime,exception,cannot,create,dir,type,directory,dir,get,absolute,path
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1424264340;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1427784999;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1429635796;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1443564120;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1445293012;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1460741894;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1463600412;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1465991918;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1472033371;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1482522862;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1487441974;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1487441974;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1489060855;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1493975155;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1494497671;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1495001929;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1499173045;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1499789965;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1502701584;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1502726910;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1503041372;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1507212387;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1507212387;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1508138617;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1515428991;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1516265158;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1516265159;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1516971011;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1519567828;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1525420604;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1537436046;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException;1537787646;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream The input stream to read the data from._@param buf The buffer to store the read data._@param off The offset inside the buffer._@param len The number of bytes to read from the stream._@param type The name of the type, to throw a good error message in case of not enough data._@throws IOException_Thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data.;static void readFully(InputStream inputStream, byte[] buf, int off, int len, String type) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException("Received an incomplete " + type)__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,param,type,the,name,of,the,type,to,throw,a,good,error,message,in,case,of,not,enough,data,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,input,stream,input,stream,byte,buf,int,off,int,len,string,type,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,received,an,incomplete,type,bytes,read,read
BlobUtils -> static File getStorageLocation(final File storageDir, final JobID jobID, 									final String key);1412605211;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(final File storageDir, final JobID jobID,_									final String key) {__		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,final,file,storage,dir,final,job,id,job,id,final,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(final File storageDir, final JobID jobID, 									final String key);1423133799;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(final File storageDir, final JobID jobID,_									final String key) {__		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,final,file,storage,dir,final,job,id,job,id,final,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(final File storageDir, final JobID jobID, 									final String key);1423156802;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(final File storageDir, final JobID jobID,_									final String key) {__		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,final,file,storage,dir,final,job,id,job,id,final,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(final File storageDir, final JobID jobID, 									final String key);1423158212;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(final File storageDir, final JobID jobID,_									final String key) {__		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,final,file,storage,dir,final,job,id,job,id,final,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> static File getStorageLocation(final File storageDir, final JobID jobID, 									final String key);1423578739;Returns the (designated) physical storage location of the BLOB with the given job ID and key.__@param jobID_the ID of the job the BLOB belongs to_@param key_the key of the BLOB_@return the (designated) physical storage location of the BLOB with the given job ID and key;static File getStorageLocation(final File storageDir, final JobID jobID,_									final String key) {__		return new File(getJobDirectory(storageDir, jobID), BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,key,the,key,of,the,blob,return,the,designated,physical,storage,location,of,the,blob,with,the,given,job,id,and,key;static,file,get,storage,location,final,file,storage,dir,final,job,id,job,id,final,string,key,return,new,file,get,job,directory,storage,dir,job,id,encode,key,key
BlobUtils -> @Nonnull 	static MessageDigest createMessageDigest();1502701584;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;@Nonnull_	static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;nonnull,static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> @Nonnull 	static MessageDigest createMessageDigest();1502726910;Creates a new instance of the message digest to use for the BLOB key computation.__@return a new instance of the message digest to use for the BLOB key computation;@Nonnull_	static MessageDigest createMessageDigest() {_		try {_			return MessageDigest.getInstance(HASHING_ALGORITHM)__		} catch (NoSuchAlgorithmException e) {_			throw new RuntimeException("Cannot instantiate the message digest algorithm " + HASHING_ALGORITHM, e)__		}_	};creates,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation,return,a,new,instance,of,the,message,digest,to,use,for,the,blob,key,computation;nonnull,static,message,digest,create,message,digest,try,return,message,digest,get,instance,catch,no,such,algorithm,exception,e,throw,new,runtime,exception,cannot,instantiate,the,message,digest,algorithm,e
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1424264340;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1427784999;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1429635796;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1443564120;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1445293012;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1460741894;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1463600412;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1465991918;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1472033371;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1482522862;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1487441974;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1487441974;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1489060855;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1493975155;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1494497671;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1495001929;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1499173045;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1499789965;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1502701584;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1502726910;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1503041372;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1507212387;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1507212387;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1508138617;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1515428991;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1516265158;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1516265159;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1516971011;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1519567828;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1525420604;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1537436046;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static void writeLength(int length, OutputStream outputStream) throws IOException;1537787646;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(int length, OutputStream outputStream) throws IOException {_		byte[] buf = new byte[4]__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)__		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,int,length,output,stream,output,stream,throws,ioexception,byte,buf,new,byte,4,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobUtils -> static File getIncomingDirectory(File storageDir);1412605211;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDirectory = new File(storageDir, "incoming")__		incomingDirectory.mkdir()___		return incomingDirectory__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,directory,new,file,storage,dir,incoming,incoming,directory,mkdir,return,incoming,directory
BlobUtils -> static File getIncomingDirectory(File storageDir);1423133799;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDirectory = new File(storageDir, "incoming")__		incomingDirectory.mkdir()___		return incomingDirectory__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,directory,new,file,storage,dir,incoming,incoming,directory,mkdir,return,incoming,directory
BlobUtils -> static File getIncomingDirectory(File storageDir);1423156802;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDirectory = new File(storageDir, "incoming")__		incomingDirectory.mkdir()___		return incomingDirectory__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,directory,new,file,storage,dir,incoming,incoming,directory,mkdir,return,incoming,directory
BlobUtils -> static File getIncomingDirectory(File storageDir);1423158212;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDirectory = new File(storageDir, "incoming")__		incomingDirectory.mkdir()___		return incomingDirectory__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,directory,new,file,storage,dir,incoming,incoming,directory,mkdir,return,incoming,directory
BlobUtils -> static File getIncomingDirectory(File storageDir);1423578739;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDirectory = new File(storageDir, "incoming")__		incomingDirectory.mkdir()___		return incomingDirectory__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,directory,new,file,storage,dir,incoming,incoming,directory,mkdir,return,incoming,directory
BlobUtils -> static File getIncomingDirectory(File storageDir);1423683763;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDirectory = new File(storageDir, "incoming")__		incomingDirectory.mkdir()___		return incomingDirectory__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,directory,new,file,storage,dir,incoming,incoming,directory,mkdir,return,incoming,directory
BlobUtils -> static File getIncomingDirectory(File storageDir);1424264340;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.exists() && !incomingDir.mkdir()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,exists,incoming,dir,mkdir,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1427784999;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.exists() && !incomingDir.mkdir()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,exists,incoming,dir,mkdir,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1429635796;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.exists() && !incomingDir.mkdir()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,exists,incoming,dir,mkdir,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1443564120;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.exists() && !incomingDir.mkdir()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,exists,incoming,dir,mkdir,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1445293012;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.exists() && !incomingDir.mkdirs()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,exists,incoming,dir,mkdirs,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1460741894;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.exists() && !incomingDir.mkdirs()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,exists,incoming,dir,mkdirs,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1463600412;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.mkdirs() && !incomingDir.exists()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,mkdirs,incoming,dir,exists,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1465991918;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.mkdirs() && !incomingDir.exists()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,mkdirs,incoming,dir,exists,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1472033371;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.mkdirs() && !incomingDir.exists()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,mkdirs,incoming,dir,exists,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1482522862;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.mkdirs() && !incomingDir.exists()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,mkdirs,incoming,dir,exists,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1487441974;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.mkdirs() && !incomingDir.exists()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,mkdirs,incoming,dir,exists,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1487441974;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.mkdirs() && !incomingDir.exists()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,mkdirs,incoming,dir,exists,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1489060855;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.mkdirs() && !incomingDir.exists()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,mkdirs,incoming,dir,exists,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1493975155;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.mkdirs() && !incomingDir.exists()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,mkdirs,incoming,dir,exists,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1494497671;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.mkdirs() && !incomingDir.exists()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,mkdirs,incoming,dir,exists,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1495001929;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.mkdirs() && !incomingDir.exists()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,mkdirs,incoming,dir,exists,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1499173045;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.mkdirs() && !incomingDir.exists()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,mkdirs,incoming,dir,exists,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1499789965;Returns the BLOB service's directory for incoming files. The directory is created if it did_not exist so far.__@return the BLOB server's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		if (!incomingDir.mkdirs() && !incomingDir.exists()) {_			throw new RuntimeException("Cannot create directory for incoming files " + incomingDir.getAbsolutePath())__		}__		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,files,the,directory,is,created,if,it,did,not,exist,so,far,return,the,blob,server,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,if,incoming,dir,mkdirs,incoming,dir,exists,throw,new,runtime,exception,cannot,create,directory,for,incoming,files,incoming,dir,get,absolute,path,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1502701584;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir, "incoming")___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,incoming,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1502726910;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir, "incoming")___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,incoming,return,incoming,dir
BlobUtils -> static File getIncomingDirectory(File storageDir);1503041372;Returns the BLOB service's directory for incoming (job-unrelated) files. The directory is_created if it does not exist yet.__@param storageDir_storage directory used be the BLOB service__@return the BLOB service's directory for incoming files;static File getIncomingDirectory(File storageDir) {_		final File incomingDir = new File(storageDir, "incoming")___		mkdirTolerateExisting(incomingDir)___		return incomingDir__	};returns,the,blob,service,s,directory,for,incoming,job,unrelated,files,the,directory,is,created,if,it,does,not,exist,yet,param,storage,dir,storage,directory,used,be,the,blob,service,return,the,blob,service,s,directory,for,incoming,files;static,file,get,incoming,directory,file,storage,dir,final,file,incoming,dir,new,file,storage,dir,incoming,mkdir,tolerate,existing,incoming,dir,return,incoming,dir
BlobUtils -> static void moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile, 			Lock writeLock, Logger log, @Nullable BlobStore blobStore) throws IOException;1507212387;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key identifying the file_@param storageFile_(local) file where the blob is/should be stored_@param writeLock_lock to acquire before doing the move_@param log_logger for debug information_@param blobStore_HA store (or <tt>null</tt> if unavailable)__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;static void moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile,_			Lock writeLock, Logger log, @Nullable BlobStore blobStore) throws IOException {__		writeLock.lock()___		try {_			_			if (!storageFile.exists()) {_				try {_					_					Files.move(incomingFile.toPath(), storageFile.toPath())___					incomingFile = null___				} catch (FileAlreadyExistsException ignored) {_					log.warn("Detected concurrent file modifications. This should only happen if multiple" +_						"BlobServer use the same storage directory.")__					_					_					_				}__				if (blobStore != null) {_					_					_					blobStore.put(storageFile, jobId, blobKey)__				}_			} else {_				log.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__			}_			storageFile = null__		} finally {_			_			_			if (storageFile != null && !storageFile.delete() && storageFile.exists()) {_				log.warn("Could not delete the storage file {}.", storageFile)__			}_			if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.", incomingFile, blobKey, jobId)__			}__			writeLock.unlock()__		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,identifying,the,file,param,storage,file,local,file,where,the,blob,is,should,be,stored,param,write,lock,lock,to,acquire,before,doing,the,move,param,log,logger,for,debug,information,param,blob,store,ha,store,or,tt,null,tt,if,unavailable,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;static,void,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,blob,key,blob,key,file,storage,file,lock,write,lock,logger,log,nullable,blob,store,blob,store,throws,ioexception,write,lock,lock,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,if,blob,store,null,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,storage,file,null,finally,if,storage,file,null,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,storage,file,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,write,lock,unlock
BlobUtils -> static void moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile, 			Lock writeLock, Logger log, @Nullable BlobStore blobStore) throws IOException;1507212387;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param blobKey_BLOB key identifying the file_@param storageFile_(local) file where the blob is/should be stored_@param writeLock_lock to acquire before doing the move_@param log_logger for debug information_@param blobStore_HA store (or <tt>null</tt> if unavailable)__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;static void moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, BlobKey blobKey, File storageFile,_			Lock writeLock, Logger log, @Nullable BlobStore blobStore) throws IOException {__		writeLock.lock()___		try {_			_			if (!storageFile.exists()) {_				try {_					_					Files.move(incomingFile.toPath(), storageFile.toPath())___					incomingFile = null___				} catch (FileAlreadyExistsException ignored) {_					log.warn("Detected concurrent file modifications. This should only happen if multiple" +_						"BlobServer use the same storage directory.")__					_					_					_				}__				if (blobStore != null) {_					_					_					blobStore.put(storageFile, jobId, blobKey)__				}_			} else {_				log.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__			}_			storageFile = null__		} finally {_			_			_			if (storageFile != null && !storageFile.delete() && storageFile.exists()) {_				log.warn("Could not delete the storage file {}.", storageFile)__			}_			if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_				log.warn("Could not delete the staging file {} for blob key {} and job {}.", incomingFile, blobKey, jobId)__			}__			writeLock.unlock()__		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,identifying,the,file,param,storage,file,local,file,where,the,blob,is,should,be,stored,param,write,lock,lock,to,acquire,before,doing,the,move,param,log,logger,for,debug,information,param,blob,store,ha,store,or,tt,null,tt,if,unavailable,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;static,void,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,blob,key,blob,key,file,storage,file,lock,write,lock,logger,log,nullable,blob,store,blob,store,throws,ioexception,write,lock,lock,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,if,blob,store,null,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,storage,file,null,finally,if,storage,file,null,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,storage,file,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,write,lock,unlock
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1424264340;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1427784999;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1429635796;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1443564120;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1445293012;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1460741894;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1463600412;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1465991918;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1472033371;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1482522862;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1487441974;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1487441974;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1489060855;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1493975155;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1494497671;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1495001929;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException;1499173045;Deletes the storage directory for the job with the given ID.__@param jobID_jobID whose directory shall be deleted;static void deleteJobDirectory(File storageDir, JobID jobID) throws IOException {_		File directory = getJobDirectory(storageDir, jobID)__		FileUtils.deleteDirectory(directory)__	};deletes,the,storage,directory,for,the,job,with,the,given,id,param,job,id,job,id,whose,directory,shall,be,deleted;static,void,delete,job,directory,file,storage,dir,job,id,job,id,throws,ioexception,file,directory,get,job,directory,storage,dir,job,id,file,utils,delete,directory,directory
BlobUtils -> static String getStorageLocationPath( 			String storageDir, @Nullable JobID jobId, BlobKey key);1503041372;Returns the path for the given blob key._<p>_The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			String storageDir, @Nullable JobID jobId, BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static String getStorageLocationPath( 			String storageDir, @Nullable JobID jobId, BlobKey key);1507212387;Returns the path for the given blob key._<p>_The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			String storageDir, @Nullable JobID jobId, BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static String getStorageLocationPath( 			String storageDir, @Nullable JobID jobId, BlobKey key);1507212387;Returns the path for the given blob key._<p>_The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			String storageDir, @Nullable JobID jobId, BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static String getStorageLocationPath( 			String storageDir, @Nullable JobID jobId, BlobKey key);1508138617;Returns the path for the given blob key._<p>_The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			String storageDir, @Nullable JobID jobId, BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static String getStorageLocationPath( 			String storageDir, @Nullable JobID jobId, BlobKey key);1515428991;Returns the path for the given blob key.__<p>The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			String storageDir, @Nullable JobID jobId, BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static String getStorageLocationPath( 			String storageDir, @Nullable JobID jobId, BlobKey key);1516265158;Returns the path for the given blob key.__<p>The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			String storageDir, @Nullable JobID jobId, BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static String getStorageLocationPath( 			String storageDir, @Nullable JobID jobId, BlobKey key);1516265159;Returns the path for the given blob key.__<p>The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			String storageDir, @Nullable JobID jobId, BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static String getStorageLocationPath( 			String storageDir, @Nullable JobID jobId, BlobKey key);1516971011;Returns the path for the given blob key.__<p>The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			String storageDir, @Nullable JobID jobId, BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static String getStorageLocationPath( 			String storageDir, @Nullable JobID jobId, BlobKey key);1519567828;Returns the path for the given blob key.__<p>The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			String storageDir, @Nullable JobID jobId, BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static String getStorageLocationPath( 			String storageDir, @Nullable JobID jobId, BlobKey key);1525420604;Returns the path for the given blob key.__<p>The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			String storageDir, @Nullable JobID jobId, BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static String getStorageLocationPath( 			String storageDir, @Nullable JobID jobId, BlobKey key);1537436046;Returns the path for the given blob key.__<p>The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			String storageDir, @Nullable JobID jobId, BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static String getStorageLocationPath( 			String storageDir, @Nullable JobID jobId, BlobKey key);1537787646;Returns the path for the given blob key.__<p>The returned path can be used with the (local or HA) BLOB store file system back-end for_recovery purposes and follows the same scheme as {@link #getStorageLocation(File, JobID,_BlobKey)}.__@param storageDir_storage directory used be the BLOB service_@param key_the key identifying the BLOB_@param jobId_ID of the job for the incoming files__@return the path to the given BLOB;static String getStorageLocationPath(_			String storageDir, @Nullable JobID jobId, BlobKey key) {_		if (jobId == null) {_			_			return String.format("%s/%s/%s%s",_				storageDir, NO_JOB_DIR_PREFIX, BLOB_FILE_PREFIX, key.toString())__		} else {_			_			return String.format("%s/%s%s/%s%s",_				storageDir, JOB_DIR_PREFIX, jobId.toString(), BLOB_FILE_PREFIX, key.toString())__		}_	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,local,or,ha,blob,store,file,system,back,end,for,recovery,purposes,and,follows,the,same,scheme,as,link,get,storage,location,file,job,id,blob,key,param,storage,dir,storage,directory,used,be,the,blob,service,param,key,the,key,identifying,the,blob,param,job,id,id,of,the,job,for,the,incoming,files,return,the,path,to,the,given,blob;static,string,get,storage,location,path,string,storage,dir,nullable,job,id,job,id,blob,key,key,if,job,id,null,return,string,format,s,s,s,s,storage,dir,key,to,string,else,return,string,format,s,s,s,s,s,storage,dir,job,id,to,string,key,to,string
BlobUtils -> static File getStorageLocation(final File storageDir,  final BlobKey key);1412605211;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(final File storageDir,  final BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,final,file,storage,dir,final,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(final File storageDir,  final BlobKey key);1423133799;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(final File storageDir,  final BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,final,file,storage,dir,final,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(final File storageDir,  final BlobKey key);1423156802;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(final File storageDir,  final BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,final,file,storage,dir,final,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(final File storageDir,  final BlobKey key);1423158212;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(final File storageDir,  final BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,final,file,storage,dir,final,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(final File storageDir,  final BlobKey key);1423578739;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(final File storageDir,  final BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,final,file,storage,dir,final,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static File getStorageLocation(final File storageDir,  final BlobKey key);1423683763;Returns the (designated) physical storage location of the BLOB with the given key.__@param key_the key identifying the BLOB_@return the (designated) physical storage location of the BLOB;static File getStorageLocation(final File storageDir,  final BlobKey key) {_		return new File(getCacheDirectory(storageDir), BLOB_FILE_PREFIX + key.toString())__	};returns,the,designated,physical,storage,location,of,the,blob,with,the,given,key,param,key,the,key,identifying,the,blob,return,the,designated,physical,storage,location,of,the,blob;static,file,get,storage,location,final,file,storage,dir,final,blob,key,key,return,new,file,get,cache,directory,storage,dir,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1445293012;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString(),_				BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1460741894;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString(),_				BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1463600412;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString(),_				BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1465991918;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString(),_				BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1472033371;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString(),_				BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1482522862;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString(),_				BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1487441974;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s/%s", basePath, JOB_DIR_PREFIX + jobId.toString(),_				BLOB_FILE_PREFIX + encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1487441974;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString(),_				BLOB_FILE_PREFIX, encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1489060855;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString(),_				BLOB_FILE_PREFIX, encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1493975155;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString(),_				BLOB_FILE_PREFIX, encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1494497671;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString(),_				BLOB_FILE_PREFIX, encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1495001929;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString(),_				BLOB_FILE_PREFIX, encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getRecoveryPath(String basePath, JobID jobId, String key);1499173045;Returns the path for the given job ID and key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, JobID, String)}.;static String getRecoveryPath(String basePath, JobID jobId, String key) {_		_		return String.format("%s/%s%s/%s%s", basePath, JOB_DIR_PREFIX, jobId.toString(),_				BLOB_FILE_PREFIX, encodeKey(key))__	};returns,the,path,for,the,given,job,id,and,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,job,id,string;static,string,get,recovery,path,string,base,path,job,id,job,id,string,key,return,string,format,s,s,s,s,s,base,path,job,id,to,string,encode,key,key
BlobUtils -> static String getStorageLocationPath(@Nonnull String storageDir, @Nullable JobID jobId);1502701584;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(@Nonnull String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,nonnull,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getStorageLocationPath(@Nonnull String storageDir, @Nullable JobID jobId);1502726910;Returns the BLOB server's storage directory for BLOBs belonging to the job with the given ID_<em>without</em> creating the directory.__@param storageDir_storage directory used be the BLOB service_@param jobId_the ID of the job to return the storage directory for__@return the storage directory for BLOBs belonging to the job with the given ID;static String getStorageLocationPath(@Nonnull String storageDir, @Nullable JobID jobId) {_		if (jobId == null) {_			_			return String.format("%s/%s", storageDir, NO_JOB_DIR_PREFIX)__		} else {_			_			return String.format("%s/%s%s", storageDir, JOB_DIR_PREFIX, jobId.toString())__		}_	};returns,the,blob,server,s,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id,em,without,em,creating,the,directory,param,storage,dir,storage,directory,used,be,the,blob,service,param,job,id,the,id,of,the,job,to,return,the,storage,directory,for,return,the,storage,directory,for,blobs,belonging,to,the,job,with,the,given,id;static,string,get,storage,location,path,nonnull,string,storage,dir,nullable,job,id,job,id,if,job,id,null,return,string,format,s,s,storage,dir,else,return,string,format,s,s,s,storage,dir,job,id,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1445293012;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s", basePath, BLOB_FILE_PREFIX + blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1460741894;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s", basePath, BLOB_FILE_PREFIX + blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1463600412;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s", basePath, BLOB_FILE_PREFIX + blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1465991918;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s", basePath, BLOB_FILE_PREFIX + blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1472033371;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}_and is used for HA.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s", basePath, BLOB_FILE_PREFIX + blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key,and,is,used,for,ha;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1482522862;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}_and is used for HA.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s", basePath, BLOB_FILE_PREFIX + blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key,and,is,used,for,ha;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1487441974;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}_and is used for HA.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s", basePath, BLOB_FILE_PREFIX + blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key,and,is,used,for,ha;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1487441974;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}_and is used for HA.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s%s", basePath, BLOB_FILE_PREFIX, blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key,and,is,used,for,ha;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1489060855;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}_and is used for HA.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s%s", basePath, BLOB_FILE_PREFIX, blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key,and,is,used,for,ha;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1493975155;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}_and is used for HA.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s%s", basePath, BLOB_FILE_PREFIX, blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key,and,is,used,for,ha;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1494497671;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}_and is used for HA.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s%s", basePath, BLOB_FILE_PREFIX, blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key,and,is,used,for,ha;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1495001929;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}_and is used for HA.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s%s", basePath, BLOB_FILE_PREFIX, blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key,and,is,used,for,ha;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1499173045;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}_and is used for HA.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s%s", basePath, BLOB_FILE_PREFIX, blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key,and,is,used,for,ha;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,s,base,path,blob,key,to,string
BlobUtils -> static String getRecoveryPath(String basePath, BlobKey blobKey);1499789965;Returns the path for the given blob key.__<p>The returned path can be used with the state backend for recovery purposes.__<p>This follows the same scheme as {@link #getStorageLocation(File, BlobKey)}_and is used for HA.;static String getRecoveryPath(String basePath, BlobKey blobKey) {_		_		return String.format("%s/cache/%s%s", basePath, BLOB_FILE_PREFIX, blobKey.toString())__	};returns,the,path,for,the,given,blob,key,p,the,returned,path,can,be,used,with,the,state,backend,for,recovery,purposes,p,this,follows,the,same,scheme,as,link,get,storage,location,file,blob,key,and,is,used,for,ha;static,string,get,recovery,path,string,base,path,blob,key,blob,key,return,string,format,s,cache,s,s,base,path,blob,key,to,string
