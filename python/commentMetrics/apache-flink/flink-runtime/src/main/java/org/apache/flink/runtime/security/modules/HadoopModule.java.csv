commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@VisibleForTesting public SecurityConfiguration getSecurityConfig() {     return securityConfig. }
false;public;0;91;;@Override public void install() throws SecurityInstallException {     UserGroupInformation.setConfiguration(hadoopConfiguration).     UserGroupInformation loginUser.     try {         if (UserGroupInformation.isSecurityEnabled() && !StringUtils.isBlank(securityConfig.getKeytab()) && !StringUtils.isBlank(securityConfig.getPrincipal())) {             String keytabPath = (new File(securityConfig.getKeytab())).getAbsolutePath().             UserGroupInformation.loginUserFromKeytab(securityConfig.getPrincipal(), keytabPath).             loginUser = UserGroupInformation.getLoginUser().             // supplement with any available tokens             String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION).             if (fileLocation != null) {                 // loginUser.addCredentials(cred).                 try {                     Method readTokenStorageFileMethod = Credentials.class.getMethod("readTokenStorageFile", File.class, org.apache.hadoop.conf.Configuration.class).                     Credentials cred = (Credentials) readTokenStorageFileMethod.invoke(null, new File(fileLocation), hadoopConfiguration).                     // if UGI uses Kerberos keytabs for login, do not load HDFS delegation token since                     // the UGI would prefer the delegation token instead, which eventually expires                     // and does not fallback to using Kerberos tickets                     Method getAllTokensMethod = Credentials.class.getMethod("getAllTokens").                     Credentials credentials = new Credentials().                     final Text hdfsDelegationTokenKind = new Text("HDFS_DELEGATION_TOKEN").                     Collection<Token<? extends TokenIdentifier>> usrTok = (Collection<Token<? extends TokenIdentifier>>) getAllTokensMethod.invoke(cred).                     // If UGI use keytab for login, do not load HDFS delegation token.                     for (Token<? extends TokenIdentifier> token : usrTok) {                         if (!token.getKind().equals(hdfsDelegationTokenKind)) {                             final Text id = new Text(token.getIdentifier()).                             credentials.addToken(id, token).                         }                     }                     Method addCredentialsMethod = UserGroupInformation.class.getMethod("addCredentials", Credentials.class).                     addCredentialsMethod.invoke(loginUser, credentials).                 } catch (NoSuchMethodException e) {                     LOG.warn("Could not find method implementations in the shaded jar. Exception: {}", e).                 } catch (InvocationTargetException e) {                     throw e.getTargetException().                 }             }         } else {             // note that the stored tokens are read automatically             try {                 // Use reflection API to get the login user object                 // UserGroupInformation.loginUserFromSubject(null).                 Method loginUserFromSubjectMethod = UserGroupInformation.class.getMethod("loginUserFromSubject", Subject.class).                 loginUserFromSubjectMethod.invoke(null, (Subject) null).             } catch (NoSuchMethodException e) {                 LOG.warn("Could not find method implementations in the shaded jar. Exception: {}", e).             } catch (InvocationTargetException e) {                 throw e.getTargetException().             }             loginUser = UserGroupInformation.getLoginUser().         }         if (UserGroupInformation.isSecurityEnabled()) {             // so we check only in ticket cache scenario.             if (securityConfig.useTicketCache() && !loginUser.hasKerberosCredentials()) {                 // a delegation token is an adequate substitute in most cases                 if (!HadoopUtils.hasHDFSDelegationToken()) {                     LOG.warn("Hadoop security is enabled but current login user does not have Kerberos credentials").                 }             }         }         LOG.info("Hadoop user set to {}", loginUser).     } catch (Throwable ex) {         throw new SecurityInstallException("Unable to set the Hadoop login user", ex).     } }
false;public;0;4;;@Override public void uninstall() throws SecurityInstallException {     throw new UnsupportedOperationException(). }
