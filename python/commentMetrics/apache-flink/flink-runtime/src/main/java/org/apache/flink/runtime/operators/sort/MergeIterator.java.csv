# id;timestamp;commentText;codeText;commentWords;codeWords
MergeIterator -> public MergeIterator(List<MutableObjectIterator<E>> iterators, TypeComparator<E> comparator) throws IOException;1420663430;@param iterators_@param comparator_@throws IOException;public MergeIterator(List<MutableObjectIterator<E>> iterators, TypeComparator<E> comparator) throws IOException {_		this.heap = new PartialOrderPriorityQueue<HeadStream<E>>(new HeadStreamComparator<E>(), iterators.size())__		_		for (MutableObjectIterator<E> iterator : iterators) {_			this.heap.add(new HeadStream<E>(iterator, comparator.duplicate()))__		}_	};param,iterators,param,comparator,throws,ioexception;public,merge,iterator,list,mutable,object,iterator,e,iterators,type,comparator,e,comparator,throws,ioexception,this,heap,new,partial,order,priority,queue,head,stream,e,new,head,stream,comparator,e,iterators,size,for,mutable,object,iterator,e,iterator,iterators,this,heap,add,new,head,stream,e,iterator,comparator,duplicate
MergeIterator -> public MergeIterator(List<MutableObjectIterator<E>> iterators, TypeComparator<E> comparator) throws IOException;1421838119;@param iterators_@param comparator_@throws IOException;public MergeIterator(List<MutableObjectIterator<E>> iterators, TypeComparator<E> comparator) throws IOException {_		this.heap = new PartialOrderPriorityQueue<HeadStream<E>>(new HeadStreamComparator<E>(), iterators.size())__		_		for (MutableObjectIterator<E> iterator : iterators) {_			this.heap.add(new HeadStream<E>(iterator, comparator.duplicate()))__		}_	};param,iterators,param,comparator,throws,ioexception;public,merge,iterator,list,mutable,object,iterator,e,iterators,type,comparator,e,comparator,throws,ioexception,this,heap,new,partial,order,priority,queue,head,stream,e,new,head,stream,comparator,e,iterators,size,for,mutable,object,iterator,e,iterator,iterators,this,heap,add,new,head,stream,e,iterator,comparator,duplicate
MergeIterator -> public MergeIterator(List<MutableObjectIterator<E>> iterators, TypeComparator<E> comparator) throws IOException;1443522094;@param iterators_@param comparator_@throws IOException;public MergeIterator(List<MutableObjectIterator<E>> iterators, TypeComparator<E> comparator) throws IOException {_		this.heap = new PartialOrderPriorityQueue<HeadStream<E>>(new HeadStreamComparator<E>(), iterators.size())__		_		for (MutableObjectIterator<E> iterator : iterators) {_			this.heap.add(new HeadStream<E>(iterator, comparator.duplicate()))__		}_	};param,iterators,param,comparator,throws,ioexception;public,merge,iterator,list,mutable,object,iterator,e,iterators,type,comparator,e,comparator,throws,ioexception,this,heap,new,partial,order,priority,queue,head,stream,e,new,head,stream,comparator,e,iterators,size,for,mutable,object,iterator,e,iterator,iterators,this,heap,add,new,head,stream,e,iterator,comparator,duplicate
MergeIterator -> @Override 	public E next(E reuse) throws IOException;1405024514;Gets the next smallest element, with respect to the definition of order implied by_the {@link TypeSerializer} provided to this iterator.__@param reuse The object into which the result is put. The contents of the reuse object_is only valid after this method, if the method returned true. Otherwise_the contents is undefined._@return True, if the iterator had another element, false otherwise.__@see org.apache.flink.util.MutableObjectIterator#next(java.lang.Object);@Override_	public E next(E reuse) throws IOException_	{_		if (this.heap.size() > 0) {_			_			final HeadStream<E> top = this.heap.peek()__			reuse = this.serializer.copy(top.getHead(), reuse)__			_			_			if (!top.nextHead()) {_				this.heap.poll()__			} else {_				this.heap.adjustTop()__			}_			return reuse__		}_		else {_			return null__		}_	};gets,the,next,smallest,element,with,respect,to,the,definition,of,order,implied,by,the,link,type,serializer,provided,to,this,iterator,param,reuse,the,object,into,which,the,result,is,put,the,contents,of,the,reuse,object,is,only,valid,after,this,method,if,the,method,returned,true,otherwise,the,contents,is,undefined,return,true,if,the,iterator,had,another,element,false,otherwise,see,org,apache,flink,util,mutable,object,iterator,next,java,lang,object;override,public,e,next,e,reuse,throws,ioexception,if,this,heap,size,0,final,head,stream,e,top,this,heap,peek,reuse,this,serializer,copy,top,get,head,reuse,if,top,next,head,this,heap,poll,else,this,heap,adjust,top,return,reuse,else,return,null
MergeIterator -> @Override 	public E next(E reuse) throws IOException;1405090423;Gets the next smallest element, with respect to the definition of order implied by_the {@link TypeSerializer} provided to this iterator.__@param reuse The object into which the result is put. The contents of the reuse object_is only valid after this method, if the method returned true. Otherwise_the contents is undefined._@return True, if the iterator had another element, false otherwise.__@see org.apache.flink.util.MutableObjectIterator#next(java.lang.Object);@Override_	public E next(E reuse) throws IOException_	{_		if (this.heap.size() > 0) {_			_			final HeadStream<E> top = this.heap.peek()__			reuse = this.serializer.copy(top.getHead(), reuse)__			_			_			if (!top.nextHead()) {_				this.heap.poll()__			} else {_				this.heap.adjustTop()__			}_			return reuse__		}_		else {_			return null__		}_	};gets,the,next,smallest,element,with,respect,to,the,definition,of,order,implied,by,the,link,type,serializer,provided,to,this,iterator,param,reuse,the,object,into,which,the,result,is,put,the,contents,of,the,reuse,object,is,only,valid,after,this,method,if,the,method,returned,true,otherwise,the,contents,is,undefined,return,true,if,the,iterator,had,another,element,false,otherwise,see,org,apache,flink,util,mutable,object,iterator,next,java,lang,object;override,public,e,next,e,reuse,throws,ioexception,if,this,heap,size,0,final,head,stream,e,top,this,heap,peek,reuse,this,serializer,copy,top,get,head,reuse,if,top,next,head,this,heap,poll,else,this,heap,adjust,top,return,reuse,else,return,null
MergeIterator -> @Override 	public E next(E reuse) throws IOException;1406853229;Gets the next smallest element, with respect to the definition of order implied by_the {@link TypeSerializer} provided to this iterator.__@param reuse The object into which the result is put. The contents of the reuse object_is only valid after this method, if the method returned true. Otherwise_the contents is undefined._@return True, if the iterator had another element, false otherwise.__@see org.apache.flink.util.MutableObjectIterator#next(java.lang.Object);@Override_	public E next(E reuse) throws IOException_	{_		if (this.heap.size() > 0) {_			_			final HeadStream<E> top = this.heap.peek()__			reuse = this.serializer.copy(top.getHead(), reuse)__			_			_			if (!top.nextHead()) {_				this.heap.poll()__			} else {_				this.heap.adjustTop()__			}_			return reuse__		}_		else {_			return null__		}_	};gets,the,next,smallest,element,with,respect,to,the,definition,of,order,implied,by,the,link,type,serializer,provided,to,this,iterator,param,reuse,the,object,into,which,the,result,is,put,the,contents,of,the,reuse,object,is,only,valid,after,this,method,if,the,method,returned,true,otherwise,the,contents,is,undefined,return,true,if,the,iterator,had,another,element,false,otherwise,see,org,apache,flink,util,mutable,object,iterator,next,java,lang,object;override,public,e,next,e,reuse,throws,ioexception,if,this,heap,size,0,final,head,stream,e,top,this,heap,peek,reuse,this,serializer,copy,top,get,head,reuse,if,top,next,head,this,heap,poll,else,this,heap,adjust,top,return,reuse,else,return,null
MergeIterator -> @Override 	public E next(E reuse) throws IOException;1411473593;Gets the next smallest element, with respect to the definition of order implied by_the {@link TypeSerializer} provided to this iterator.__@param reuse The object into which the result is put. The contents of the reuse object_is only valid after this method, if the method returned true. Otherwise_the contents is undefined._@return True, if the iterator had another element, false otherwise.__@see org.apache.flink.util.MutableObjectIterator#next(java.lang.Object);@Override_	public E next(E reuse) throws IOException_	{_		if (this.heap.size() > 0) {_			_			final HeadStream<E> top = this.heap.peek()__			reuse = this.serializer.copy(top.getHead(), reuse)__			_			_			if (!top.nextHead()) {_				this.heap.poll()__			} else {_				this.heap.adjustTop()__			}_			return reuse__		}_		else {_			return null__		}_	};gets,the,next,smallest,element,with,respect,to,the,definition,of,order,implied,by,the,link,type,serializer,provided,to,this,iterator,param,reuse,the,object,into,which,the,result,is,put,the,contents,of,the,reuse,object,is,only,valid,after,this,method,if,the,method,returned,true,otherwise,the,contents,is,undefined,return,true,if,the,iterator,had,another,element,false,otherwise,see,org,apache,flink,util,mutable,object,iterator,next,java,lang,object;override,public,e,next,e,reuse,throws,ioexception,if,this,heap,size,0,final,head,stream,e,top,this,heap,peek,reuse,this,serializer,copy,top,get,head,reuse,if,top,next,head,this,heap,poll,else,this,heap,adjust,top,return,reuse,else,return,null
MergeIterator -> @Override 	public E next(E reuse) throws IOException;1420654570;Gets the next smallest element, with respect to the definition of order implied by_the {@link TypeSerializer} provided to this iterator.__@param reuse The object into which the result is put. The contents of the reuse object_is only valid after this method, if the method returned true. Otherwise_the contents is undefined._@return True, if the iterator had another element, false otherwise.__@see org.apache.flink.util.MutableObjectIterator#next(java.lang.Object);@Override_	public E next(E reuse) throws IOException_	{_		if (this.heap.size() > 0) {_			_			final HeadStream<E> top = this.heap.peek()__			reuse = this.serializer.copy(top.getHead(), reuse)__			_			_			if (!top.nextHead()) {_				this.heap.poll()__			} else {_				this.heap.adjustTop()__			}_			return reuse__		}_		else {_			return null__		}_	};gets,the,next,smallest,element,with,respect,to,the,definition,of,order,implied,by,the,link,type,serializer,provided,to,this,iterator,param,reuse,the,object,into,which,the,result,is,put,the,contents,of,the,reuse,object,is,only,valid,after,this,method,if,the,method,returned,true,otherwise,the,contents,is,undefined,return,true,if,the,iterator,had,another,element,false,otherwise,see,org,apache,flink,util,mutable,object,iterator,next,java,lang,object;override,public,e,next,e,reuse,throws,ioexception,if,this,heap,size,0,final,head,stream,e,top,this,heap,peek,reuse,this,serializer,copy,top,get,head,reuse,if,top,next,head,this,heap,poll,else,this,heap,adjust,top,return,reuse,else,return,null
MergeIterator -> @Override 	public E next(E reuse) throws IOException;1420663430;Gets the next smallest element, with respect to the definition of order implied by_the {@link TypeSerializer} provided to this iterator. This method does in fact not_reuse the given element (which would here imply potentially expensive copying),_but always returns a new element.__@param reuse Ignored._@return The next smallest element, or null, if the iterator is exhausted.__@see org.apache.flink.util.MutableObjectIterator#next(java.lang.Object);@Override_	public E next(E reuse) throws IOException {_		return next()__	};gets,the,next,smallest,element,with,respect,to,the,definition,of,order,implied,by,the,link,type,serializer,provided,to,this,iterator,this,method,does,in,fact,not,reuse,the,given,element,which,would,here,imply,potentially,expensive,copying,but,always,returns,a,new,element,param,reuse,ignored,return,the,next,smallest,element,or,null,if,the,iterator,is,exhausted,see,org,apache,flink,util,mutable,object,iterator,next,java,lang,object;override,public,e,next,e,reuse,throws,ioexception,return,next
MergeIterator -> @Override 	public E next(E reuse) throws IOException;1421838119;Gets the next smallest element, with respect to the definition of order implied by_the {@link TypeSerializer} provided to this iterator. This method does in fact not_reuse the given element (which would here imply potentially expensive copying),_but always returns a new element.__@param reuse Ignored._@return The next smallest element, or null, if the iterator is exhausted.__@see org.apache.flink.util.MutableObjectIterator#next(java.lang.Object);@Override_	public E next(E reuse) throws IOException {_		return next()__	};gets,the,next,smallest,element,with,respect,to,the,definition,of,order,implied,by,the,link,type,serializer,provided,to,this,iterator,this,method,does,in,fact,not,reuse,the,given,element,which,would,here,imply,potentially,expensive,copying,but,always,returns,a,new,element,param,reuse,ignored,return,the,next,smallest,element,or,null,if,the,iterator,is,exhausted,see,org,apache,flink,util,mutable,object,iterator,next,java,lang,object;override,public,e,next,e,reuse,throws,ioexception,return,next
MergeIterator -> @Override 	public E next(E reuse) throws IOException;1443522094;Gets the next smallest element, with respect to the definition of order implied by_the {@link TypeSerializer} provided to this iterator.__@param reuse Object that may be reused._@return The next element if the iterator has another element, null otherwise.__@see org.apache.flink.util.MutableObjectIterator#next(java.lang.Object);@Override_	public E next(E reuse) throws IOException {_		__		if (this.heap.size() > 0) {_			_			final HeadStream<E> top = this.heap.peek()__			E result = top.getHead()___			_			if (!top.nextHead(reuse)) {_				this.heap.poll()__			} else {_				this.heap.adjustTop()__			}_			return result__		}_		else {_			return null__		}_	};gets,the,next,smallest,element,with,respect,to,the,definition,of,order,implied,by,the,link,type,serializer,provided,to,this,iterator,param,reuse,object,that,may,be,reused,return,the,next,element,if,the,iterator,has,another,element,null,otherwise,see,org,apache,flink,util,mutable,object,iterator,next,java,lang,object;override,public,e,next,e,reuse,throws,ioexception,if,this,heap,size,0,final,head,stream,e,top,this,heap,peek,e,result,top,get,head,if,top,next,head,reuse,this,heap,poll,else,this,heap,adjust,top,return,result,else,return,null
MergeIterator -> @Override 	public E next() throws IOException;1420654570;Gets the next smallest element, with respect to the definition of order implied by_the {@link TypeSerializer} provided to this iterator.__@return True, if the iterator had another element, false otherwise.__@see org.apache.flink.util.MutableObjectIterator#next(java.lang.Object);@Override_	public E next() throws IOException_	{_		if (this.heap.size() > 0) {_			_			final HeadStream<E> top = this.heap.peek()__			E result = this.serializer.copy(top.getHead())___			_			if (!top.nextHead()) {_				this.heap.poll()__			} else {_				this.heap.adjustTop()__			}_			return result__		}_		else {_			return null__		}_	};gets,the,next,smallest,element,with,respect,to,the,definition,of,order,implied,by,the,link,type,serializer,provided,to,this,iterator,return,true,if,the,iterator,had,another,element,false,otherwise,see,org,apache,flink,util,mutable,object,iterator,next,java,lang,object;override,public,e,next,throws,ioexception,if,this,heap,size,0,final,head,stream,e,top,this,heap,peek,e,result,this,serializer,copy,top,get,head,if,top,next,head,this,heap,poll,else,this,heap,adjust,top,return,result,else,return,null
MergeIterator -> @Override 	public E next() throws IOException;1420663430;Gets the next smallest element, with respect to the definition of order implied by_the {@link TypeSerializer} provided to this iterator.__@return The next element if the iterator has another element, null otherwise.__@see org.apache.flink.util.MutableObjectIterator#next();@Override_	public E next() throws IOException {_		if (this.heap.size() > 0) {_			_			final HeadStream<E> top = this.heap.peek()__			E result = top.getHead()___			_			if (!top.nextHead()) {_				this.heap.poll()__			} else {_				this.heap.adjustTop()__			}_			return result__		}_		else {_			return null__		}_	};gets,the,next,smallest,element,with,respect,to,the,definition,of,order,implied,by,the,link,type,serializer,provided,to,this,iterator,return,the,next,element,if,the,iterator,has,another,element,null,otherwise,see,org,apache,flink,util,mutable,object,iterator,next;override,public,e,next,throws,ioexception,if,this,heap,size,0,final,head,stream,e,top,this,heap,peek,e,result,top,get,head,if,top,next,head,this,heap,poll,else,this,heap,adjust,top,return,result,else,return,null
MergeIterator -> @Override 	public E next() throws IOException;1421838119;Gets the next smallest element, with respect to the definition of order implied by_the {@link TypeSerializer} provided to this iterator.__@return The next element if the iterator has another element, null otherwise.__@see org.apache.flink.util.MutableObjectIterator#next();@Override_	public E next() throws IOException {_		if (this.heap.size() > 0) {_			_			final HeadStream<E> top = this.heap.peek()__			E result = top.getHead()___			_			if (!top.nextHead()) {_				this.heap.poll()__			} else {_				this.heap.adjustTop()__			}_			return result__		}_		else {_			return null__		}_	};gets,the,next,smallest,element,with,respect,to,the,definition,of,order,implied,by,the,link,type,serializer,provided,to,this,iterator,return,the,next,element,if,the,iterator,has,another,element,null,otherwise,see,org,apache,flink,util,mutable,object,iterator,next;override,public,e,next,throws,ioexception,if,this,heap,size,0,final,head,stream,e,top,this,heap,peek,e,result,top,get,head,if,top,next,head,this,heap,poll,else,this,heap,adjust,top,return,result,else,return,null
MergeIterator -> @Override 	public E next() throws IOException;1443522094;Gets the next smallest element, with respect to the definition of order implied by_the {@link TypeSerializer} provided to this iterator.__@return The next element if the iterator has another element, null otherwise.__@see org.apache.flink.util.MutableObjectIterator#next();@Override_	public E next() throws IOException {_		if (this.heap.size() > 0) {_			_			final HeadStream<E> top = this.heap.peek()__			E result = top.getHead()___			_			if (!top.nextHead()) {_				this.heap.poll()__			} else {_				this.heap.adjustTop()__			}_			return result__		}_		else {_			return null__		}_	};gets,the,next,smallest,element,with,respect,to,the,definition,of,order,implied,by,the,link,type,serializer,provided,to,this,iterator,return,the,next,element,if,the,iterator,has,another,element,null,otherwise,see,org,apache,flink,util,mutable,object,iterator,next;override,public,e,next,throws,ioexception,if,this,heap,size,0,final,head,stream,e,top,this,heap,peek,e,result,top,get,head,if,top,next,head,this,heap,poll,else,this,heap,adjust,top,return,result,else,return,null
MergeIterator -> public MergeIterator(List<MutableObjectIterator<E>> iterators, 			TypeSerializer<E> serializer, TypeComparator<E> comparator) 	throws IOException;1405024514;@param iterators_@param accessors The accessors used to establish an order among the elements._The accessors will not be used directly, but a duplicate will be used._@throws IOException;public MergeIterator(List<MutableObjectIterator<E>> iterators,_			TypeSerializer<E> serializer, TypeComparator<E> comparator)_	throws IOException_	{_		this.heap = new PartialOrderPriorityQueue<HeadStream<E>>(new HeadStreamComparator<E>(), iterators.size())__		this.serializer = serializer__		_		for (MutableObjectIterator<E> iterator : iterators) {_			this.heap.add(new HeadStream<E>(iterator, serializer, comparator.duplicate()))__		}_	};param,iterators,param,accessors,the,accessors,used,to,establish,an,order,among,the,elements,the,accessors,will,not,be,used,directly,but,a,duplicate,will,be,used,throws,ioexception;public,merge,iterator,list,mutable,object,iterator,e,iterators,type,serializer,e,serializer,type,comparator,e,comparator,throws,ioexception,this,heap,new,partial,order,priority,queue,head,stream,e,new,head,stream,comparator,e,iterators,size,this,serializer,serializer,for,mutable,object,iterator,e,iterator,iterators,this,heap,add,new,head,stream,e,iterator,serializer,comparator,duplicate
MergeIterator -> public MergeIterator(List<MutableObjectIterator<E>> iterators, 			TypeSerializer<E> serializer, TypeComparator<E> comparator) 	throws IOException;1405090423;@param iterators_@param accessors The accessors used to establish an order among the elements._The accessors will not be used directly, but a duplicate will be used._@throws IOException;public MergeIterator(List<MutableObjectIterator<E>> iterators,_			TypeSerializer<E> serializer, TypeComparator<E> comparator)_	throws IOException_	{_		this.heap = new PartialOrderPriorityQueue<HeadStream<E>>(new HeadStreamComparator<E>(), iterators.size())__		this.serializer = serializer__		_		for (MutableObjectIterator<E> iterator : iterators) {_			this.heap.add(new HeadStream<E>(iterator, serializer, comparator.duplicate()))__		}_	};param,iterators,param,accessors,the,accessors,used,to,establish,an,order,among,the,elements,the,accessors,will,not,be,used,directly,but,a,duplicate,will,be,used,throws,ioexception;public,merge,iterator,list,mutable,object,iterator,e,iterators,type,serializer,e,serializer,type,comparator,e,comparator,throws,ioexception,this,heap,new,partial,order,priority,queue,head,stream,e,new,head,stream,comparator,e,iterators,size,this,serializer,serializer,for,mutable,object,iterator,e,iterator,iterators,this,heap,add,new,head,stream,e,iterator,serializer,comparator,duplicate
MergeIterator -> public MergeIterator(List<MutableObjectIterator<E>> iterators, 			TypeSerializer<E> serializer, TypeComparator<E> comparator) 	throws IOException;1406853229;@param iterators_@param serializer_@param comparator_@throws IOException;public MergeIterator(List<MutableObjectIterator<E>> iterators,_			TypeSerializer<E> serializer, TypeComparator<E> comparator)_	throws IOException_	{_		this.heap = new PartialOrderPriorityQueue<HeadStream<E>>(new HeadStreamComparator<E>(), iterators.size())__		this.serializer = serializer__		_		for (MutableObjectIterator<E> iterator : iterators) {_			this.heap.add(new HeadStream<E>(iterator, serializer, comparator.duplicate()))__		}_	};param,iterators,param,serializer,param,comparator,throws,ioexception;public,merge,iterator,list,mutable,object,iterator,e,iterators,type,serializer,e,serializer,type,comparator,e,comparator,throws,ioexception,this,heap,new,partial,order,priority,queue,head,stream,e,new,head,stream,comparator,e,iterators,size,this,serializer,serializer,for,mutable,object,iterator,e,iterator,iterators,this,heap,add,new,head,stream,e,iterator,serializer,comparator,duplicate
MergeIterator -> public MergeIterator(List<MutableObjectIterator<E>> iterators, 			TypeSerializer<E> serializer, TypeComparator<E> comparator) 	throws IOException;1411473593;@param iterators_@param serializer_@param comparator_@throws IOException;public MergeIterator(List<MutableObjectIterator<E>> iterators,_			TypeSerializer<E> serializer, TypeComparator<E> comparator)_	throws IOException_	{_		this.heap = new PartialOrderPriorityQueue<HeadStream<E>>(new HeadStreamComparator<E>(), iterators.size())__		this.serializer = serializer__		_		for (MutableObjectIterator<E> iterator : iterators) {_			this.heap.add(new HeadStream<E>(iterator, serializer, comparator.duplicate()))__		}_	};param,iterators,param,serializer,param,comparator,throws,ioexception;public,merge,iterator,list,mutable,object,iterator,e,iterators,type,serializer,e,serializer,type,comparator,e,comparator,throws,ioexception,this,heap,new,partial,order,priority,queue,head,stream,e,new,head,stream,comparator,e,iterators,size,this,serializer,serializer,for,mutable,object,iterator,e,iterator,iterators,this,heap,add,new,head,stream,e,iterator,serializer,comparator,duplicate
MergeIterator -> public MergeIterator(List<MutableObjectIterator<E>> iterators, 			TypeSerializer<E> serializer, TypeComparator<E> comparator) 	throws IOException;1420654570;@param iterators_@param serializer_@param comparator_@throws IOException;public MergeIterator(List<MutableObjectIterator<E>> iterators,_			TypeSerializer<E> serializer, TypeComparator<E> comparator)_	throws IOException_	{_		this.heap = new PartialOrderPriorityQueue<HeadStream<E>>(new HeadStreamComparator<E>(), iterators.size())__		this.serializer = serializer__		_		for (MutableObjectIterator<E> iterator : iterators) {_			this.heap.add(new HeadStream<E>(iterator, serializer, comparator.duplicate()))__		}_	};param,iterators,param,serializer,param,comparator,throws,ioexception;public,merge,iterator,list,mutable,object,iterator,e,iterators,type,serializer,e,serializer,type,comparator,e,comparator,throws,ioexception,this,heap,new,partial,order,priority,queue,head,stream,e,new,head,stream,comparator,e,iterators,size,this,serializer,serializer,for,mutable,object,iterator,e,iterator,iterators,this,heap,add,new,head,stream,e,iterator,serializer,comparator,duplicate
