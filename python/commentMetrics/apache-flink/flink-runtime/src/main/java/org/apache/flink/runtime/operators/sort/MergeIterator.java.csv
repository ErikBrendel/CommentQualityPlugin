commented;modifiers;parameterAmount;loc;comment;code
true;public;1;31;/**  * Gets the next smallest element, with respect to the definition of order implied by  * the {@link TypeSerializer} provided to this iterator.  *  * @param reuse Object that may be reused.  * @return The next element if the iterator has another element, null otherwise.  *  * @see org.apache.flink.util.MutableObjectIterator#next(java.lang.Object)  */ ;/**  * Gets the next smallest element, with respect to the definition of order implied by  * the {@link TypeSerializer} provided to this iterator.  *  * @param reuse Object that may be reused.  * @return The next element if the iterator has another element, null otherwise.  *  * @see org.apache.flink.util.MutableObjectIterator#next(java.lang.Object)  */ @Override public E next(E reuse) throws IOException {     if (this.heap.size() > 0) {         // get the smallest element         final HeadStream<E> top = this.heap.peek().         E result = top.getHead().         // read an element         if (!top.nextHead(reuse)) {             this.heap.poll().         } else {             this.heap.adjustTop().         }         return result.     } else {         return null.     } }
true;public;0;19;/**  * Gets the next smallest element, with respect to the definition of order implied by  * the {@link TypeSerializer} provided to this iterator.  *  * @return The next element if the iterator has another element, null otherwise.  *  * @see org.apache.flink.util.MutableObjectIterator#next()  */ ;/**  * Gets the next smallest element, with respect to the definition of order implied by  * the {@link TypeSerializer} provided to this iterator.  *  * @return The next element if the iterator has another element, null otherwise.  *  * @see org.apache.flink.util.MutableObjectIterator#next()  */ @Override public E next() throws IOException {     if (this.heap.size() > 0) {         // get the smallest element         final HeadStream<E> top = this.heap.peek().         E result = top.getHead().         // read an element         if (!top.nextHead()) {             this.heap.poll().         } else {             this.heap.adjustTop().         }         return result.     } else {         return null.     } }
false;public;0;3;;public E getHead() {     return this.head. }
false;public;1;9;;public boolean nextHead(E reuse) throws IOException {     if ((this.head = this.iterator.next(reuse)) != null) {         this.comparator.setReference(this.head).         return true.     } else {         return false.     } }
false;public;0;9;;public boolean nextHead() throws IOException {     if ((this.head = this.iterator.next()) != null) {         this.comparator.setReference(this.head).         return true.     } else {         return false.     } }
false;public;2;4;;@Override public int compare(HeadStream<E> o1, HeadStream<E> o2) {     return o2.comparator.compareToReference(o1.comparator). }
