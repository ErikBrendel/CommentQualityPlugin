commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;24;;@Override protected CompletableFuture<R> handleRequest(@Nonnull HandlerRequest<EmptyRequestBody, M> request, @Nonnull RestfulGateway gateway) throws RestHandlerException {     JobID jobId = request.getPathParameter(JobIDPathParameter.class).     CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(jobId, gateway).     return executionGraphFuture.thenApplyAsync(executionGraph -> {         try {             return handleRequest(request, executionGraph).         } catch (RestHandlerException rhe) {             throw new CompletionException(rhe).         }     }, executor).exceptionally(throwable -> {         throwable = ExceptionUtils.stripCompletionException(throwable).         if (throwable instanceof FlinkJobNotFoundException) {             throw new CompletionException(new NotFoundException(String.format("Job %s not found", jobId), throwable)).         } else {             throw new CompletionException(throwable).         }     }). }
true;protected,abstract;2;1;/**  * Called for each request after the corresponding {@link AccessExecutionGraph} has been retrieved from the  * {@link ExecutionGraphCache}.  *  * @param request for further information  * @param executionGraph for which the handler was called  * @return Response  * @throws RestHandlerException if the handler could not process the request  */ ;/**  * Called for each request after the corresponding {@link AccessExecutionGraph} has been retrieved from the  * {@link ExecutionGraphCache}.  *  * @param request for further information  * @param executionGraph for which the handler was called  * @return Response  * @throws RestHandlerException if the handler could not process the request  */ protected abstract R handleRequest(HandlerRequest<EmptyRequestBody, M> request, AccessExecutionGraph executionGraph) throws RestHandlerException.
