commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the request body.  *  * @return request body  */ ;/**  * Returns the request body.  *  * @return request body  */ public R getRequestBody() {     return requestBody. }
true;public;1;6;/**  * Returns the value of the {@link MessagePathParameter} for the given class.  *  * @param parameterClass class of the parameter  * @param <X>            the value type that the parameter contains  * @param <PP>           type of the path parameter  * @return path parameter value for the given class  * @throws IllegalStateException if no value is defined for the given parameter class  */ ;/**  * Returns the value of the {@link MessagePathParameter} for the given class.  *  * @param parameterClass class of the parameter  * @param <X>            the value type that the parameter contains  * @param <PP>           type of the path parameter  * @return path parameter value for the given class  * @throws IllegalStateException if no value is defined for the given parameter class  */ public <X, PP extends MessagePathParameter<X>> X getPathParameter(Class<PP> parameterClass) {     @SuppressWarnings("unchecked")     PP pathParameter = (PP) pathParameters.get(parameterClass).     Preconditions.checkState(pathParameter != null, "No parameter could be found for the given class.").     return pathParameter.getValue(). }
true;public;1;9;/**  * Returns the value of the {@link MessageQueryParameter} for the given class.  *  * @param parameterClass class of the parameter  * @param <X>            the value type that the parameter contains  * @param <QP>           type of the query parameter  * @return query parameter value for the given class, or an empty list if no parameter value exists for the given class  */ ;/**  * Returns the value of the {@link MessageQueryParameter} for the given class.  *  * @param parameterClass class of the parameter  * @param <X>            the value type that the parameter contains  * @param <QP>           type of the query parameter  * @return query parameter value for the given class, or an empty list if no parameter value exists for the given class  */ public <X, QP extends MessageQueryParameter<X>> List<X> getQueryParameter(Class<QP> parameterClass) {     @SuppressWarnings("unchecked")     QP queryParameter = (QP) queryParameters.get(parameterClass).     if (queryParameter == null) {         return Collections.emptyList().     } else {         return queryParameter.getValue().     } }
false;public;0;4;;@Nonnull public Collection<File> getUploadedFiles() {     return uploadedFiles. }
