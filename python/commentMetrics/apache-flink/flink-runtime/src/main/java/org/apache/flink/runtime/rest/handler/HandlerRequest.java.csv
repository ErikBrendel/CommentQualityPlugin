# id;timestamp;commentText;codeText;commentWords;codeWords
HandlerRequest -> public R getRequestBody();1503738659;Returns the request body.__@return request body;public R getRequestBody() {_		return requestBody__	};returns,the,request,body,return,request,body;public,r,get,request,body,return,request,body
HandlerRequest -> public R getRequestBody();1503738660;Returns the request body.__@return request body;public R getRequestBody() {_		return requestBody__	};returns,the,request,body,return,request,body;public,r,get,request,body,return,request,body
HandlerRequest -> public R getRequestBody();1504001225;Returns the request body.__@return request body;public R getRequestBody() {_		return requestBody__	};returns,the,request,body,return,request,body;public,r,get,request,body,return,request,body
HandlerRequest -> public R getRequestBody();1506528702;Returns the request body.__@return request body;public R getRequestBody() {_		return requestBody__	};returns,the,request,body,return,request,body;public,r,get,request,body,return,request,body
HandlerRequest -> public R getRequestBody();1507569103;Returns the request body.__@return request body;public R getRequestBody() {_		return requestBody__	};returns,the,request,body,return,request,body;public,r,get,request,body,return,request,body
HandlerRequest -> public R getRequestBody();1529584793;Returns the request body.__@return request body;public R getRequestBody() {_		return requestBody__	};returns,the,request,body,return,request,body;public,r,get,request,body,return,request,body
HandlerRequest -> public R getRequestBody();1530644925;Returns the request body.__@return request body;public R getRequestBody() {_		return requestBody__	};returns,the,request,body,return,request,body;public,r,get,request,body,return,request,body
HandlerRequest -> public <X, PP extends MessagePathParameter<X>> X getPathParameter(Class<PP> parameterClass);1504001225;Returns the value of the {@link MessagePathParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <PP>           type of the path parameter_@return path parameter value for the given class_@throws IllegalStateException if no value is defined for the given parameter class;public <X, PP extends MessagePathParameter<X>> X getPathParameter(Class<PP> parameterClass) {_		@SuppressWarnings("unchecked")_		PP pathParameter = (PP) pathParameters.get(parameterClass)__		Preconditions.checkState(pathParameter != null, "No parameter could be found for the given class.")__		return pathParameter.getValue()__	};returns,the,value,of,the,link,message,path,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,pp,type,of,the,path,parameter,return,path,parameter,value,for,the,given,class,throws,illegal,state,exception,if,no,value,is,defined,for,the,given,parameter,class;public,x,pp,extends,message,path,parameter,x,x,get,path,parameter,class,pp,parameter,class,suppress,warnings,unchecked,pp,path,parameter,pp,path,parameters,get,parameter,class,preconditions,check,state,path,parameter,null,no,parameter,could,be,found,for,the,given,class,return,path,parameter,get,value
HandlerRequest -> public <X, PP extends MessagePathParameter<X>> X getPathParameter(Class<PP> parameterClass);1506528702;Returns the value of the {@link MessagePathParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <PP>           type of the path parameter_@return path parameter value for the given class_@throws IllegalStateException if no value is defined for the given parameter class;public <X, PP extends MessagePathParameter<X>> X getPathParameter(Class<PP> parameterClass) {_		@SuppressWarnings("unchecked")_		PP pathParameter = (PP) pathParameters.get(parameterClass)__		Preconditions.checkState(pathParameter != null, "No parameter could be found for the given class.")__		return pathParameter.getValue()__	};returns,the,value,of,the,link,message,path,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,pp,type,of,the,path,parameter,return,path,parameter,value,for,the,given,class,throws,illegal,state,exception,if,no,value,is,defined,for,the,given,parameter,class;public,x,pp,extends,message,path,parameter,x,x,get,path,parameter,class,pp,parameter,class,suppress,warnings,unchecked,pp,path,parameter,pp,path,parameters,get,parameter,class,preconditions,check,state,path,parameter,null,no,parameter,could,be,found,for,the,given,class,return,path,parameter,get,value
HandlerRequest -> public <X, PP extends MessagePathParameter<X>> X getPathParameter(Class<PP> parameterClass);1507569103;Returns the value of the {@link MessagePathParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <PP>           type of the path parameter_@return path parameter value for the given class_@throws IllegalStateException if no value is defined for the given parameter class;public <X, PP extends MessagePathParameter<X>> X getPathParameter(Class<PP> parameterClass) {_		@SuppressWarnings("unchecked")_		PP pathParameter = (PP) pathParameters.get(parameterClass)__		Preconditions.checkState(pathParameter != null, "No parameter could be found for the given class.")__		return pathParameter.getValue()__	};returns,the,value,of,the,link,message,path,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,pp,type,of,the,path,parameter,return,path,parameter,value,for,the,given,class,throws,illegal,state,exception,if,no,value,is,defined,for,the,given,parameter,class;public,x,pp,extends,message,path,parameter,x,x,get,path,parameter,class,pp,parameter,class,suppress,warnings,unchecked,pp,path,parameter,pp,path,parameters,get,parameter,class,preconditions,check,state,path,parameter,null,no,parameter,could,be,found,for,the,given,class,return,path,parameter,get,value
HandlerRequest -> public <X, PP extends MessagePathParameter<X>> X getPathParameter(Class<PP> parameterClass);1529584793;Returns the value of the {@link MessagePathParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <PP>           type of the path parameter_@return path parameter value for the given class_@throws IllegalStateException if no value is defined for the given parameter class;public <X, PP extends MessagePathParameter<X>> X getPathParameter(Class<PP> parameterClass) {_		@SuppressWarnings("unchecked")_		PP pathParameter = (PP) pathParameters.get(parameterClass)__		Preconditions.checkState(pathParameter != null, "No parameter could be found for the given class.")__		return pathParameter.getValue()__	};returns,the,value,of,the,link,message,path,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,pp,type,of,the,path,parameter,return,path,parameter,value,for,the,given,class,throws,illegal,state,exception,if,no,value,is,defined,for,the,given,parameter,class;public,x,pp,extends,message,path,parameter,x,x,get,path,parameter,class,pp,parameter,class,suppress,warnings,unchecked,pp,path,parameter,pp,path,parameters,get,parameter,class,preconditions,check,state,path,parameter,null,no,parameter,could,be,found,for,the,given,class,return,path,parameter,get,value
HandlerRequest -> public <X, PP extends MessagePathParameter<X>> X getPathParameter(Class<PP> parameterClass);1530644925;Returns the value of the {@link MessagePathParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <PP>           type of the path parameter_@return path parameter value for the given class_@throws IllegalStateException if no value is defined for the given parameter class;public <X, PP extends MessagePathParameter<X>> X getPathParameter(Class<PP> parameterClass) {_		@SuppressWarnings("unchecked")_		PP pathParameter = (PP) pathParameters.get(parameterClass)__		Preconditions.checkState(pathParameter != null, "No parameter could be found for the given class.")__		return pathParameter.getValue()__	};returns,the,value,of,the,link,message,path,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,pp,type,of,the,path,parameter,return,path,parameter,value,for,the,given,class,throws,illegal,state,exception,if,no,value,is,defined,for,the,given,parameter,class;public,x,pp,extends,message,path,parameter,x,x,get,path,parameter,class,pp,parameter,class,suppress,warnings,unchecked,pp,path,parameter,pp,path,parameters,get,parameter,class,preconditions,check,state,path,parameter,null,no,parameter,could,be,found,for,the,given,class,return,path,parameter,get,value
HandlerRequest -> @SuppressWarnings("unchecked") 	public <X, QP extends MessageQueryParameter<X>> QP getQueryParameter(Class<QP> parameterClass);1503738659;Returns the {@link MessageQueryParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <QP>           type of the query parameter_@return query parameter for the given class, or null if no parameter value exists for the given class;@SuppressWarnings("unchecked")_	public <X, QP extends MessageQueryParameter<X>> QP getQueryParameter(Class<QP> parameterClass) {_		return (QP) queryParameters.get(parameterClass)__	};returns,the,link,message,query,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,qp,type,of,the,query,parameter,return,query,parameter,for,the,given,class,or,null,if,no,parameter,value,exists,for,the,given,class;suppress,warnings,unchecked,public,x,qp,extends,message,query,parameter,x,qp,get,query,parameter,class,qp,parameter,class,return,qp,query,parameters,get,parameter,class
HandlerRequest -> @SuppressWarnings("unchecked") 	public <X, QP extends MessageQueryParameter<X>> QP getQueryParameter(Class<QP> parameterClass);1503738660;Returns the {@link MessageQueryParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <QP>           type of the query parameter_@return query parameter for the given class, or null if no parameter value exists for the given class;@SuppressWarnings("unchecked")_	public <X, QP extends MessageQueryParameter<X>> QP getQueryParameter(Class<QP> parameterClass) {_		return (QP) queryParameters.get(parameterClass)__	};returns,the,link,message,query,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,qp,type,of,the,query,parameter,return,query,parameter,for,the,given,class,or,null,if,no,parameter,value,exists,for,the,given,class;suppress,warnings,unchecked,public,x,qp,extends,message,query,parameter,x,qp,get,query,parameter,class,qp,parameter,class,return,qp,query,parameters,get,parameter,class
HandlerRequest -> @SuppressWarnings("unchecked") 	public <X, PP extends MessagePathParameter<X>> PP getPathParameter(Class<PP> parameterClass);1503738659;Returns the {@link MessagePathParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <PP>           type of the path parameter_@return path parameter for the given class, or null if no parameter value exists for the given class;@SuppressWarnings("unchecked")_	public <X, PP extends MessagePathParameter<X>> PP getPathParameter(Class<PP> parameterClass) {_		return (PP) pathParameters.get(parameterClass)__	};returns,the,link,message,path,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,pp,type,of,the,path,parameter,return,path,parameter,for,the,given,class,or,null,if,no,parameter,value,exists,for,the,given,class;suppress,warnings,unchecked,public,x,pp,extends,message,path,parameter,x,pp,get,path,parameter,class,pp,parameter,class,return,pp,path,parameters,get,parameter,class
HandlerRequest -> @SuppressWarnings("unchecked") 	public <X, PP extends MessagePathParameter<X>> PP getPathParameter(Class<PP> parameterClass);1503738660;Returns the {@link MessagePathParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <PP>           type of the path parameter_@return path parameter for the given class, or null if no parameter value exists for the given class;@SuppressWarnings("unchecked")_	public <X, PP extends MessagePathParameter<X>> PP getPathParameter(Class<PP> parameterClass) {_		return (PP) pathParameters.get(parameterClass)__	};returns,the,link,message,path,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,pp,type,of,the,path,parameter,return,path,parameter,for,the,given,class,or,null,if,no,parameter,value,exists,for,the,given,class;suppress,warnings,unchecked,public,x,pp,extends,message,path,parameter,x,pp,get,path,parameter,class,pp,parameter,class,return,pp,path,parameters,get,parameter,class
HandlerRequest -> public <X, QP extends MessageQueryParameter<X>> List<X> getQueryParameter(Class<QP> parameterClass);1504001225;Returns the value of the {@link MessageQueryParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <QP>           type of the query parameter_@return query parameter value for the given class, or an empty list if no parameter value exists for the given class;public <X, QP extends MessageQueryParameter<X>> List<X> getQueryParameter(Class<QP> parameterClass) {_		@SuppressWarnings("unchecked")_		QP queryParameter = (QP) queryParameters.get(parameterClass)__		if (queryParameter == null) {_			return Collections.emptyList()__		} else {_			return queryParameter.getValue()__		}_	};returns,the,value,of,the,link,message,query,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,qp,type,of,the,query,parameter,return,query,parameter,value,for,the,given,class,or,an,empty,list,if,no,parameter,value,exists,for,the,given,class;public,x,qp,extends,message,query,parameter,x,list,x,get,query,parameter,class,qp,parameter,class,suppress,warnings,unchecked,qp,query,parameter,qp,query,parameters,get,parameter,class,if,query,parameter,null,return,collections,empty,list,else,return,query,parameter,get,value
HandlerRequest -> public <X, QP extends MessageQueryParameter<X>> List<X> getQueryParameter(Class<QP> parameterClass);1506528702;Returns the value of the {@link MessageQueryParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <QP>           type of the query parameter_@return query parameter value for the given class, or an empty list if no parameter value exists for the given class;public <X, QP extends MessageQueryParameter<X>> List<X> getQueryParameter(Class<QP> parameterClass) {_		@SuppressWarnings("unchecked")_		QP queryParameter = (QP) queryParameters.get(parameterClass)__		if (queryParameter == null) {_			return Collections.emptyList()__		} else {_			return queryParameter.getValue()__		}_	};returns,the,value,of,the,link,message,query,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,qp,type,of,the,query,parameter,return,query,parameter,value,for,the,given,class,or,an,empty,list,if,no,parameter,value,exists,for,the,given,class;public,x,qp,extends,message,query,parameter,x,list,x,get,query,parameter,class,qp,parameter,class,suppress,warnings,unchecked,qp,query,parameter,qp,query,parameters,get,parameter,class,if,query,parameter,null,return,collections,empty,list,else,return,query,parameter,get,value
HandlerRequest -> public <X, QP extends MessageQueryParameter<X>> List<X> getQueryParameter(Class<QP> parameterClass);1507569103;Returns the value of the {@link MessageQueryParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <QP>           type of the query parameter_@return query parameter value for the given class, or an empty list if no parameter value exists for the given class;public <X, QP extends MessageQueryParameter<X>> List<X> getQueryParameter(Class<QP> parameterClass) {_		@SuppressWarnings("unchecked")_		QP queryParameter = (QP) queryParameters.get(parameterClass)__		if (queryParameter == null) {_			return Collections.emptyList()__		} else {_			return queryParameter.getValue()__		}_	};returns,the,value,of,the,link,message,query,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,qp,type,of,the,query,parameter,return,query,parameter,value,for,the,given,class,or,an,empty,list,if,no,parameter,value,exists,for,the,given,class;public,x,qp,extends,message,query,parameter,x,list,x,get,query,parameter,class,qp,parameter,class,suppress,warnings,unchecked,qp,query,parameter,qp,query,parameters,get,parameter,class,if,query,parameter,null,return,collections,empty,list,else,return,query,parameter,get,value
HandlerRequest -> public <X, QP extends MessageQueryParameter<X>> List<X> getQueryParameter(Class<QP> parameterClass);1529584793;Returns the value of the {@link MessageQueryParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <QP>           type of the query parameter_@return query parameter value for the given class, or an empty list if no parameter value exists for the given class;public <X, QP extends MessageQueryParameter<X>> List<X> getQueryParameter(Class<QP> parameterClass) {_		@SuppressWarnings("unchecked")_		QP queryParameter = (QP) queryParameters.get(parameterClass)__		if (queryParameter == null) {_			return Collections.emptyList()__		} else {_			return queryParameter.getValue()__		}_	};returns,the,value,of,the,link,message,query,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,qp,type,of,the,query,parameter,return,query,parameter,value,for,the,given,class,or,an,empty,list,if,no,parameter,value,exists,for,the,given,class;public,x,qp,extends,message,query,parameter,x,list,x,get,query,parameter,class,qp,parameter,class,suppress,warnings,unchecked,qp,query,parameter,qp,query,parameters,get,parameter,class,if,query,parameter,null,return,collections,empty,list,else,return,query,parameter,get,value
HandlerRequest -> public <X, QP extends MessageQueryParameter<X>> List<X> getQueryParameter(Class<QP> parameterClass);1530644925;Returns the value of the {@link MessageQueryParameter} for the given class.__@param parameterClass class of the parameter_@param <X>            the value type that the parameter contains_@param <QP>           type of the query parameter_@return query parameter value for the given class, or an empty list if no parameter value exists for the given class;public <X, QP extends MessageQueryParameter<X>> List<X> getQueryParameter(Class<QP> parameterClass) {_		@SuppressWarnings("unchecked")_		QP queryParameter = (QP) queryParameters.get(parameterClass)__		if (queryParameter == null) {_			return Collections.emptyList()__		} else {_			return queryParameter.getValue()__		}_	};returns,the,value,of,the,link,message,query,parameter,for,the,given,class,param,parameter,class,class,of,the,parameter,param,x,the,value,type,that,the,parameter,contains,param,qp,type,of,the,query,parameter,return,query,parameter,value,for,the,given,class,or,an,empty,list,if,no,parameter,value,exists,for,the,given,class;public,x,qp,extends,message,query,parameter,x,list,x,get,query,parameter,class,qp,parameter,class,suppress,warnings,unchecked,qp,query,parameter,qp,query,parameters,get,parameter,class,if,query,parameter,null,return,collections,empty,list,else,return,query,parameter,get,value
