commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;4;;// ------------------------------------------------------------------------ @Override public final void clear() {     stateTable.remove(currentNamespace). }
false;public,final;1;4;;@Override public final void setCurrentNamespace(N namespace) {     this.currentNamespace = Preconditions.checkNotNull(namespace, "Namespace must not be null."). }
false;public;4;22;;@Override public byte[] getSerializedValue(final byte[] serializedKeyAndNamespace, final TypeSerializer<K> safeKeySerializer, final TypeSerializer<N> safeNamespaceSerializer, final TypeSerializer<SV> safeValueSerializer) throws Exception {     Preconditions.checkNotNull(serializedKeyAndNamespace).     Preconditions.checkNotNull(safeKeySerializer).     Preconditions.checkNotNull(safeNamespaceSerializer).     Preconditions.checkNotNull(safeValueSerializer).     Tuple2<K, N> keyAndNamespace = KvStateSerializer.deserializeKeyAndNamespace(serializedKeyAndNamespace, safeKeySerializer, safeNamespaceSerializer).     SV result = stateTable.get(keyAndNamespace.f0, keyAndNamespace.f1).     if (result == null) {         return null.     }     return KvStateSerializer.serializeValue(result, safeValueSerializer). }
true;public;0;4;/**  * This should only be used for testing.  */ ;/**  * This should only be used for testing.  */ @VisibleForTesting public StateTable<K, N, SV> getStateTable() {     return stateTable. }
false;protected;0;7;;protected SV getDefaultValue() {     if (defaultValue != null) {         return valueSerializer.copy(defaultValue).     } else {         return null.     } }
false;public;1;4;;@Override public StateIncrementalVisitor<K, N, SV> getStateIncrementalVisitor(int recommendedMaxNumberOfReturnedRecords) {     return stateTable.getStateIncrementalVisitor(recommendedMaxNumberOfReturnedRecords). }
