commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;// ------------------------------------------------------------------------ public static DataExchangeMode getForForwardExchange(ExecutionMode mode) {     return FORWARD[mode.ordinal()]. }
false;public,static;1;3;;public static DataExchangeMode getForShuffleOrBroadcast(ExecutionMode mode) {     return SHUFFLE[mode.ordinal()]. }
false;public,static;1;3;;public static DataExchangeMode getPipelineBreakingExchange(ExecutionMode mode) {     return BREAKING[mode.ordinal()]. }
true;public,static;3;20;/**  * Computes the mode of data exchange to be used for a given execution mode and ship strategy.  * The type of the data exchange depends also on whether this connection has been identified to require  * pipeline breaking for deadlock avoidance.  * <ul>  *     <li>If the connection is set to be pipeline breaking, this returns the pipeline breaking variant  *         of the execution mode  *         {@link org.apache.flink.runtime.io.network.DataExchangeMode#getPipelineBreakingExchange(org.apache.flink.api.common.ExecutionMode)}.  *     </li>  *     <li>If the data exchange is a simple FORWARD (one-to-one communication), this returns  *         {@link org.apache.flink.runtime.io.network.DataExchangeMode#getForForwardExchange(org.apache.flink.api.common.ExecutionMode)}.  *     </li>  *     <li>If otherwise, this returns  *         {@link org.apache.flink.runtime.io.network.DataExchangeMode#getForShuffleOrBroadcast(org.apache.flink.api.common.ExecutionMode)}.  *     </li>  * </ul>  *  * @param shipStrategy The ship strategy (FORWARD, PARTITION, BROADCAST, ...) of the runtime data exchange.  * @return The data exchange mode for the connection, given the concrete ship strategy.  */ ;/**  * Computes the mode of data exchange to be used for a given execution mode and ship strategy.  * The type of the data exchange depends also on whether this connection has been identified to require  * pipeline breaking for deadlock avoidance.  * <ul>  *     <li>If the connection is set to be pipeline breaking, this returns the pipeline breaking variant  *         of the execution mode  *         {@link org.apache.flink.runtime.io.network.DataExchangeMode#getPipelineBreakingExchange(org.apache.flink.api.common.ExecutionMode)}.  *     </li>  *     <li>If the data exchange is a simple FORWARD (one-to-one communication), this returns  *         {@link org.apache.flink.runtime.io.network.DataExchangeMode#getForForwardExchange(org.apache.flink.api.common.ExecutionMode)}.  *     </li>  *     <li>If otherwise, this returns  *         {@link org.apache.flink.runtime.io.network.DataExchangeMode#getForShuffleOrBroadcast(org.apache.flink.api.common.ExecutionMode)}.  *     </li>  * </ul>  *  * @param shipStrategy The ship strategy (FORWARD, PARTITION, BROADCAST, ...) of the runtime data exchange.  * @return The data exchange mode for the connection, given the concrete ship strategy.  */ public static DataExchangeMode select(ExecutionMode executionMode, ShipStrategyType shipStrategy, boolean breakPipeline) {     if (shipStrategy == null || shipStrategy == ShipStrategyType.NONE) {         throw new IllegalArgumentException("shipStrategy may not be null or NONE").     }     if (executionMode == null) {         throw new IllegalArgumentException("executionMode may not mbe null").     }     if (breakPipeline) {         return getPipelineBreakingExchange(executionMode).     } else if (shipStrategy == ShipStrategyType.FORWARD) {         return getForForwardExchange(executionMode).     } else {         return getForShuffleOrBroadcast(executionMode).     } }
