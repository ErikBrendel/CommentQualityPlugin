commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Creates an new {@link CheckpointStateOutputStream}. When the stream  * is closed, it returns a state handle that can retrieve the state back.  *  * @param scope The state's scope, whether it is exclusive or shared.  * @return An output stream that writes state for the given checkpoint.  *  * @throws IOException Exceptions may occur while creating the stream and should be forwarded.  */ ;/**  * Creates an new {@link CheckpointStateOutputStream}. When the stream  * is closed, it returns a state handle that can retrieve the state back.  *  * @param scope The state's scope, whether it is exclusive or shared.  * @return An output stream that writes state for the given checkpoint.  *  * @throws IOException Exceptions may occur while creating the stream and should be forwarded.  */ CheckpointStateOutputStream createCheckpointStateOutputStream(CheckpointedStateScope scope) throws IOException.
true;public,abstract;0;2;/**  * Closes the stream and gets a state handle that can create an input stream  * producing the data written to this stream.  *  * <p>This closing must be called (also when the caller is not interested in the handle)  * to successfully close the stream and retain the produced resource. In contrast,  * the {@link #close()} method removes the target resource when called.  *  * @return A state handle that can create an input stream producing the data written to this stream.  * @throws IOException Thrown, if the stream cannot be closed.  */ ;/**  * Closes the stream and gets a state handle that can create an input stream  * producing the data written to this stream.  *  * <p>This closing must be called (also when the caller is not interested in the handle)  * to successfully close the stream and retain the produced resource. In contrast,  * the {@link #close()} method removes the target resource when called.  *  * @return A state handle that can create an input stream producing the data written to this stream.  * @throws IOException Thrown, if the stream cannot be closed.  */ @Nullable public abstract StreamStateHandle closeAndGetHandle() throws IOException.
true;public,abstract;0;2;/**  * This method should close the stream, if has not been closed before.  * If this method actually closes the stream, it should delete/release the  * resource behind the stream, such as the file that the stream writes to.  *  * <p>The above implies that this method is intended to be the "unsuccessful close",  * such as when cancelling the stream writing, or when an exception occurs.  * Closing the stream for the successful case must go through {@link #closeAndGetHandle()}.  *  * @throws IOException Thrown, if the stream cannot be closed.  */ ;/**  * This method should close the stream, if has not been closed before.  * If this method actually closes the stream, it should delete/release the  * resource behind the stream, such as the file that the stream writes to.  *  * <p>The above implies that this method is intended to be the "unsuccessful close",  * such as when cancelling the stream writing, or when an exception occurs.  * Closing the stream for the successful case must go through {@link #closeAndGetHandle()}.  *  * @throws IOException Thrown, if the stream cannot be closed.  */ @Override public abstract void close() throws IOException.
