commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Resolves the given pointer to a checkpoint/savepoint into a checkpoint location. The location  * supports reading the checkpoint metadata, or disposing the checkpoint storage location.  *  * <p>If the state backend cannot understand the format of the pointer (for example because it  * was created by a different state backend) this method should throw an {@code IOException}.  *  * @param externalPointer The external checkpoint pointer to resolve.  * @return The checkpoint location handle.  *  * @throws IOException Thrown, if the state backend does not understand the pointer, or if  *                     the pointer could not be resolved due to an I/O error.  */ ;// ------------------------------------------------------------------------ // Checkpoint storage - the durable persistence of checkpoint data // ------------------------------------------------------------------------ /**  * Resolves the given pointer to a checkpoint/savepoint into a checkpoint location. The location  * supports reading the checkpoint metadata, or disposing the checkpoint storage location.  *  * <p>If the state backend cannot understand the format of the pointer (for example because it  * was created by a different state backend) this method should throw an {@code IOException}.  *  * @param externalPointer The external checkpoint pointer to resolve.  * @return The checkpoint location handle.  *  * @throws IOException Thrown, if the state backend does not understand the pointer, or if  *                     the pointer could not be resolved due to an I/O error.  */ CompletedCheckpointStorageLocation resolveCheckpoint(String externalPointer) throws IOException.
true;;1;1;/**  * Creates a storage for checkpoints for the given job. The checkpoint storage is  * used to write checkpoint data and metadata.  *  * @param jobId The job to store checkpoint data for.  * @return A checkpoint storage for the given job.  *  * @throws IOException Thrown if the checkpoint storage cannot be initialized.  */ ;/**  * Creates a storage for checkpoints for the given job. The checkpoint storage is  * used to write checkpoint data and metadata.  *  * @param jobId The job to store checkpoint data for.  * @return A checkpoint storage for the given job.  *  * @throws IOException Thrown if the checkpoint storage cannot be initialized.  */ CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException.
true;default;7;19;/**  * Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>  * and checkpointing it. Uses default TTL time provider.  *  * <p><i>Keyed State</i> is state where each value is bound to a key.  *  * @param <K> The type of the keys by which the state is organized.  *  * @return The Keyed State Backend for the given job, operator, and key group range.  *  * @throws Exception This method may forward all exceptions that occur while instantiating the backend.  */ ;// ------------------------------------------------------------------------ // Structure Backends // ------------------------------------------------------------------------ /**  * Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>  * and checkpointing it. Uses default TTL time provider.  *  * <p><i>Keyed State</i> is state where each value is bound to a key.  *  * @param <K> The type of the keys by which the state is organized.  *  * @return The Keyed State Backend for the given job, operator, and key group range.  *  * @throws Exception This method may forward all exceptions that occur while instantiating the backend.  */ default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env, JobID jobID, String operatorIdentifier, TypeSerializer<K> keySerializer, int numberOfKeyGroups, KeyGroupRange keyGroupRange, TaskKvStateRegistry kvStateRegistry) throws Exception {     return createKeyedStateBackend(env, jobID, operatorIdentifier, keySerializer, numberOfKeyGroups, keyGroupRange, kvStateRegistry, TtlTimeProvider.DEFAULT). }
true;default;8;22;/**  * Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>  * and checkpointing it.  *  * <p><i>Keyed State</i> is state where each value is bound to a key.  *  * @param <K> The type of the keys by which the state is organized.  *  * @return The Keyed State Backend for the given job, operator, and key group range.  *  * @throws Exception This method may forward all exceptions that occur while instantiating the backend.  */ ;/**  * Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>  * and checkpointing it.  *  * <p><i>Keyed State</i> is state where each value is bound to a key.  *  * @param <K> The type of the keys by which the state is organized.  *  * @return The Keyed State Backend for the given job, operator, and key group range.  *  * @throws Exception This method may forward all exceptions that occur while instantiating the backend.  */ default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env, JobID jobID, String operatorIdentifier, TypeSerializer<K> keySerializer, int numberOfKeyGroups, KeyGroupRange keyGroupRange, TaskKvStateRegistry kvStateRegistry, TtlTimeProvider ttlTimeProvider) throws Exception {     return createKeyedStateBackend(env, jobID, operatorIdentifier, keySerializer, numberOfKeyGroups, keyGroupRange, kvStateRegistry, ttlTimeProvider, new UnregisteredMetricsGroup(), Collections.emptyList()). }
true;default;9;23;/**  * Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>  * and checkpointing it.  *  * <p><i>Keyed State</i> is state where each value is bound to a key.  *  * @param <K> The type of the keys by which the state is organized.  * @return The Keyed State Backend for the given job, operator, and key group range.  * @throws Exception This method may forward all exceptions that occur while instantiating the backend.  */ ;/**  * Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>  * and checkpointing it.  *  * <p><i>Keyed State</i> is state where each value is bound to a key.  *  * @param <K> The type of the keys by which the state is organized.  * @return The Keyed State Backend for the given job, operator, and key group range.  * @throws Exception This method may forward all exceptions that occur while instantiating the backend.  */ default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env, JobID jobID, String operatorIdentifier, TypeSerializer<K> keySerializer, int numberOfKeyGroups, KeyGroupRange keyGroupRange, TaskKvStateRegistry kvStateRegistry, TtlTimeProvider ttlTimeProvider, Collection<KeyedStateHandle> stateHandles) throws Exception {     return createKeyedStateBackend(env, jobID, operatorIdentifier, keySerializer, numberOfKeyGroups, keyGroupRange, kvStateRegistry, ttlTimeProvider, new UnregisteredMetricsGroup(), stateHandles). }
true;;10;11;/**  * Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>  * and checkpointing it.  *  * <p><i>Keyed State</i> is state where each value is bound to a key.  *  * @param <K> The type of the keys by which the state is organized.  *  * @return The Keyed State Backend for the given job, operator, and key group range.  *  * @throws Exception This method may forward all exceptions that occur while instantiating the backend.  */ ;/**  * Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>  * and checkpointing it.  *  * <p><i>Keyed State</i> is state where each value is bound to a key.  *  * @param <K> The type of the keys by which the state is organized.  *  * @return The Keyed State Backend for the given job, operator, and key group range.  *  * @throws Exception This method may forward all exceptions that occur while instantiating the backend.  */ <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env, JobID jobID, String operatorIdentifier, TypeSerializer<K> keySerializer, int numberOfKeyGroups, KeyGroupRange keyGroupRange, TaskKvStateRegistry kvStateRegistry, TtlTimeProvider ttlTimeProvider, MetricGroup metricGroup, @Nonnull Collection<KeyedStateHandle> stateHandles) throws Exception.
true;;2;1;/**  * Creates a new {@link OperatorStateBackend} that can be used for storing operator state.  *  * <p>Operator state is state that is associated with parallel operator (or function) instances,  * rather than with keys.  *  * @param env The runtime environment of the executing task.  * @param operatorIdentifier The identifier of the operator whose state should be stored.  *  * @return The OperatorStateBackend for operator identified by the job and operator identifier.  *  * @throws Exception This method may forward all exceptions that occur while instantiating the backend.  */ ;/**  * Creates a new {@link OperatorStateBackend} that can be used for storing operator state.  *  * <p>Operator state is state that is associated with parallel operator (or function) instances,  * rather than with keys.  *  * @param env The runtime environment of the executing task.  * @param operatorIdentifier The identifier of the operator whose state should be stored.  *  * @return The OperatorStateBackend for operator identified by the job and operator identifier.  *  * @throws Exception This method may forward all exceptions that occur while instantiating the backend.  */ OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception.
