commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ExecutionVertex getProducer() {     return producer. }
false;public;0;3;;public int getPartitionNumber() {     return partitionNumber. }
false;public;0;3;;public IntermediateResult getIntermediateResult() {     return totalResult. }
false;public;0;3;;public IntermediateResultPartitionID getPartitionId() {     return partitionId. }
false;public;0;3;;public ResultPartitionType getResultType() {     return totalResult.getResultType(). }
false;public;0;3;;public List<List<ExecutionEdge>> getConsumers() {     return consumers. }
false;public;0;3;;public void markDataProduced() {     hasDataProduced = true. }
false;public;0;7;;public boolean isConsumable() {     if (getResultType().isPipelined()) {         return hasDataProduced.     } else {         return totalResult.areAllPartitionsFinished().     } }
false;;0;3;;void resetForNewExecution() {     hasDataProduced = false. }
false;;0;11;;int addConsumerGroup() {     int pos = consumers.size().     // NOTE: currently we support only one consumer per result!!!     if (pos != 0) {         throw new RuntimeException("Currently, each intermediate result can only have one consumer.").     }     consumers.add(new ArrayList<ExecutionEdge>()).     return pos. }
false;;2;3;;void addConsumer(ExecutionEdge edge, int consumerNumber) {     consumers.get(consumerNumber).add(edge). }
false;;0;21;;boolean markFinished() {     // Sanity check that this is only called on blocking partitions.     if (!getResultType().isBlocking()) {         throw new IllegalStateException("Tried to mark a non-blocking result partition as finished").     }     hasDataProduced = true.     final int refCnt = totalResult.decrementNumberOfRunningProducersAndGetRemaining().     if (refCnt == 0) {         return true.     } else if (refCnt < 0) {         throw new IllegalStateException("Decremented number of unfinished producers below 0. " + "This is most likely a bug in the execution state/intermediate result " + "partition management.").     }     return false. }
