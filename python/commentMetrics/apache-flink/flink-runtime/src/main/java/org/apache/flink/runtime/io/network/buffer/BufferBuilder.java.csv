# id;timestamp;commentText;codeText;commentWords;codeWords
BufferBuilder -> public void commit();1519049124;Make the change visible to the readers. This is costly operation (volatile access) thus in case of bulk writes_it's better to commit them all together instead one by one.;public void commit() {_		positionMarker.commit()__	};make,the,change,visible,to,the,readers,this,is,costly,operation,volatile,access,thus,in,case,of,bulk,writes,it,s,better,to,commit,them,all,together,instead,one,by,one;public,void,commit,position,marker,commit
BufferBuilder -> public void commit();1521537266;Make the change visible to the readers. This is costly operation (volatile access) thus in case of bulk writes_it's better to commit them all together instead one by one.;public void commit() {_		positionMarker.commit()__	};make,the,change,visible,to,the,readers,this,is,costly,operation,volatile,access,thus,in,case,of,bulk,writes,it,s,better,to,commit,them,all,together,instead,one,by,one;public,void,commit,position,marker,commit
BufferBuilder -> public void commit();1537385496;Make the change visible to the readers. This is costly operation (volatile access) thus in case of bulk writes_it's better to commit them all together instead one by one.;public void commit() {_		positionMarker.commit()__	};make,the,change,visible,to,the,readers,this,is,costly,operation,volatile,access,thus,in,case,of,bulk,writes,it,s,better,to,commit,them,all,together,instead,one,by,one;public,void,commit,position,marker,commit
BufferBuilder -> public int append(ByteBuffer source);1515408360;@return number of copied bytes;public int append(ByteBuffer source) {_		checkState(!built)___		int needed = source.remaining()__		int available = limit() - position__		int toCopy = Math.min(needed, available)___		memorySegment.put(position, source, toCopy)__		position += toCopy__		return toCopy__	};return,number,of,copied,bytes;public,int,append,byte,buffer,source,check,state,built,int,needed,source,remaining,int,available,limit,position,int,to,copy,math,min,needed,available,memory,segment,put,position,source,to,copy,position,to,copy,return,to,copy
BufferBuilder -> public int append(ByteBuffer source);1516285456;@return number of copied bytes;public int append(ByteBuffer source) {_		checkState(!built)___		int needed = source.remaining()__		int available = limit() - position__		int toCopy = Math.min(needed, available)___		memorySegment.put(position, source, toCopy)__		position += toCopy__		return toCopy__	};return,number,of,copied,bytes;public,int,append,byte,buffer,source,check,state,built,int,needed,source,remaining,int,available,limit,position,int,to,copy,math,min,needed,available,memory,segment,put,position,source,to,copy,position,to,copy,return,to,copy
BufferBuilder -> public int append(ByteBuffer source);1519039274;Append as many data as possible from {@code source}. Not everything might be copied if there is not enough_space in the underlying {@link MemorySegment}__@return number of copied bytes;public int append(ByteBuffer source) {_		checkState(!isFinished())___		int needed = source.remaining()__		int available = getMaxCapacity() - positionMarker.getCached()__		int toCopy = Math.min(needed, available)___		memorySegment.put(positionMarker.getCached(), source, toCopy)__		positionMarker.move(toCopy)__		return toCopy__	};append,as,many,data,as,possible,from,code,source,not,everything,might,be,copied,if,there,is,not,enough,space,in,the,underlying,link,memory,segment,return,number,of,copied,bytes;public,int,append,byte,buffer,source,check,state,is,finished,int,needed,source,remaining,int,available,get,max,capacity,position,marker,get,cached,int,to,copy,math,min,needed,available,memory,segment,put,position,marker,get,cached,source,to,copy,position,marker,move,to,copy,return,to,copy
BufferBuilder -> public int append(ByteBuffer source);1519049124;Append as many data as possible from {@code source}. Not everything might be copied if there is not enough_space in the underlying {@link MemorySegment}__@return number of copied bytes;public int append(ByteBuffer source) {_		checkState(!isFinished())___		int needed = source.remaining()__		int available = getMaxCapacity() - positionMarker.getCached()__		int toCopy = Math.min(needed, available)___		memorySegment.put(positionMarker.getCached(), source, toCopy)__		positionMarker.move(toCopy)__		return toCopy__	};append,as,many,data,as,possible,from,code,source,not,everything,might,be,copied,if,there,is,not,enough,space,in,the,underlying,link,memory,segment,return,number,of,copied,bytes;public,int,append,byte,buffer,source,check,state,is,finished,int,needed,source,remaining,int,available,get,max,capacity,position,marker,get,cached,int,to,copy,math,min,needed,available,memory,segment,put,position,marker,get,cached,source,to,copy,position,marker,move,to,copy,return,to,copy
BufferBuilder -> public int append(ByteBuffer source);1521537266;Append as many data as possible from {@code source}. Not everything might be copied if there is not enough_space in the underlying {@link MemorySegment}__@return number of copied bytes;public int append(ByteBuffer source) {_		checkState(!isFinished())___		int needed = source.remaining()__		int available = getMaxCapacity() - positionMarker.getCached()__		int toCopy = Math.min(needed, available)___		memorySegment.put(positionMarker.getCached(), source, toCopy)__		positionMarker.move(toCopy)__		return toCopy__	};append,as,many,data,as,possible,from,code,source,not,everything,might,be,copied,if,there,is,not,enough,space,in,the,underlying,link,memory,segment,return,number,of,copied,bytes;public,int,append,byte,buffer,source,check,state,is,finished,int,needed,source,remaining,int,available,get,max,capacity,position,marker,get,cached,int,to,copy,math,min,needed,available,memory,segment,put,position,marker,get,cached,source,to,copy,position,marker,move,to,copy,return,to,copy
BufferBuilder -> public int append(ByteBuffer source);1537385496;Append as many data as possible from {@code source}. Not everything might be copied if there is not enough_space in the underlying {@link MemorySegment}__@return number of copied bytes;public int append(ByteBuffer source) {_		checkState(!isFinished())___		int needed = source.remaining()__		int available = getMaxCapacity() - positionMarker.getCached()__		int toCopy = Math.min(needed, available)___		memorySegment.put(positionMarker.getCached(), source, toCopy)__		positionMarker.move(toCopy)__		return toCopy__	};append,as,many,data,as,possible,from,code,source,not,everything,might,be,copied,if,there,is,not,enough,space,in,the,underlying,link,memory,segment,return,number,of,copied,bytes;public,int,append,byte,buffer,source,check,state,is,finished,int,needed,source,remaining,int,available,get,max,capacity,position,marker,get,cached,int,to,copy,math,min,needed,available,memory,segment,put,position,marker,get,cached,source,to,copy,position,marker,move,to,copy,return,to,copy
BufferBuilder -> public BufferConsumer createBufferConsumer();1519039274;@return created matching instance of {@link BufferConsumer} to this {@link BufferBuilder}. There can exist only_one {@link BufferConsumer} per each {@link BufferBuilder} and vice versa.;public BufferConsumer createBufferConsumer() {_		checkState(!bufferConsumerCreated, "There can not exists two BufferConsumer for one BufferBuilder")__		bufferConsumerCreated = true__		return new BufferConsumer(_			memorySegment,_			recycler,_			positionMarker)__	};return,created,matching,instance,of,link,buffer,consumer,to,this,link,buffer,builder,there,can,exist,only,one,link,buffer,consumer,per,each,link,buffer,builder,and,vice,versa;public,buffer,consumer,create,buffer,consumer,check,state,buffer,consumer,created,there,can,not,exists,two,buffer,consumer,for,one,buffer,builder,buffer,consumer,created,true,return,new,buffer,consumer,memory,segment,recycler,position,marker
BufferBuilder -> public BufferConsumer createBufferConsumer();1519049124;@return created matching instance of {@link BufferConsumer} to this {@link BufferBuilder}. There can exist only_one {@link BufferConsumer} per each {@link BufferBuilder} and vice versa.;public BufferConsumer createBufferConsumer() {_		checkState(!bufferConsumerCreated, "There can not exists two BufferConsumer for one BufferBuilder")__		bufferConsumerCreated = true__		return new BufferConsumer(_			memorySegment,_			recycler,_			positionMarker)__	};return,created,matching,instance,of,link,buffer,consumer,to,this,link,buffer,builder,there,can,exist,only,one,link,buffer,consumer,per,each,link,buffer,builder,and,vice,versa;public,buffer,consumer,create,buffer,consumer,check,state,buffer,consumer,created,there,can,not,exists,two,buffer,consumer,for,one,buffer,builder,buffer,consumer,created,true,return,new,buffer,consumer,memory,segment,recycler,position,marker
BufferBuilder -> public BufferConsumer createBufferConsumer();1521537266;@return created matching instance of {@link BufferConsumer} to this {@link BufferBuilder}. There can exist only_one {@link BufferConsumer} per each {@link BufferBuilder} and vice versa.;public BufferConsumer createBufferConsumer() {_		checkState(!bufferConsumerCreated, "There can not exists two BufferConsumer for one BufferBuilder")__		bufferConsumerCreated = true__		return new BufferConsumer(_			memorySegment,_			recycler,_			positionMarker)__	};return,created,matching,instance,of,link,buffer,consumer,to,this,link,buffer,builder,there,can,exist,only,one,link,buffer,consumer,per,each,link,buffer,builder,and,vice,versa;public,buffer,consumer,create,buffer,consumer,check,state,buffer,consumer,created,there,can,not,exists,two,buffer,consumer,for,one,buffer,builder,buffer,consumer,created,true,return,new,buffer,consumer,memory,segment,recycler,position,marker
BufferBuilder -> public BufferConsumer createBufferConsumer();1537385496;@return created matching instance of {@link BufferConsumer} to this {@link BufferBuilder}. There can exist only_one {@link BufferConsumer} per each {@link BufferBuilder} and vice versa.;public BufferConsumer createBufferConsumer() {_		checkState(!bufferConsumerCreated, "There can not exists two BufferConsumer for one BufferBuilder")__		bufferConsumerCreated = true__		return new BufferConsumer(_			memorySegment,_			recycler,_			positionMarker)__	};return,created,matching,instance,of,link,buffer,consumer,to,this,link,buffer,builder,there,can,exist,only,one,link,buffer,consumer,per,each,link,buffer,builder,and,vice,versa;public,buffer,consumer,create,buffer,consumer,check,state,buffer,consumer,created,there,can,not,exists,two,buffer,consumer,for,one,buffer,builder,buffer,consumer,created,true,return,new,buffer,consumer,memory,segment,recycler,position,marker
BufferBuilder -> public int appendAndCommit(ByteBuffer source);1519049124;Same as {@link #append(ByteBuffer)} but additionally {@link #commit()} the appending.;public int appendAndCommit(ByteBuffer source) {_		int writtenBytes = append(source)__		commit()__		return writtenBytes__	};same,as,link,append,byte,buffer,but,additionally,link,commit,the,appending;public,int,append,and,commit,byte,buffer,source,int,written,bytes,append,source,commit,return,written,bytes
BufferBuilder -> public int appendAndCommit(ByteBuffer source);1521537266;Same as {@link #append(ByteBuffer)} but additionally {@link #commit()} the appending.;public int appendAndCommit(ByteBuffer source) {_		int writtenBytes = append(source)__		commit()__		return writtenBytes__	};same,as,link,append,byte,buffer,but,additionally,link,commit,the,appending;public,int,append,and,commit,byte,buffer,source,int,written,bytes,append,source,commit,return,written,bytes
BufferBuilder -> public int appendAndCommit(ByteBuffer source);1537385496;Same as {@link #append(ByteBuffer)} but additionally {@link #commit()} the appending.;public int appendAndCommit(ByteBuffer source) {_		int writtenBytes = append(source)__		commit()__		return writtenBytes__	};same,as,link,append,byte,buffer,but,additionally,link,commit,the,appending;public,int,append,and,commit,byte,buffer,source,int,written,bytes,append,source,commit,return,written,bytes
BufferBuilder -> public int finish();1519039274;Mark this {@link BufferBuilder} and associated {@link BufferConsumer} as finished - no new data writes will be_allowed.__@return number of written bytes.;public int finish() {_		checkState(!isFinished())__		positionMarker.markFinished()__		return getWrittenBytes()__	};mark,this,link,buffer,builder,and,associated,link,buffer,consumer,as,finished,no,new,data,writes,will,be,allowed,return,number,of,written,bytes;public,int,finish,check,state,is,finished,position,marker,mark,finished,return,get,written,bytes
BufferBuilder -> public int finish();1519049124;Mark this {@link BufferBuilder} and associated {@link BufferConsumer} as finished - no new data writes will be_allowed.__@return number of written bytes.;public int finish() {_		checkState(!isFinished())__		positionMarker.markFinished()__		commit()__		return getWrittenBytes()__	};mark,this,link,buffer,builder,and,associated,link,buffer,consumer,as,finished,no,new,data,writes,will,be,allowed,return,number,of,written,bytes;public,int,finish,check,state,is,finished,position,marker,mark,finished,commit,return,get,written,bytes
BufferBuilder -> public int finish();1521537266;Mark this {@link BufferBuilder} and associated {@link BufferConsumer} as finished - no new data writes will be_allowed.__<p>This method should be idempotent to handle failures and task interruptions. Check FLINK-8948 for more details.__@return number of written bytes.;public int finish() {_		positionMarker.markFinished()__		commit()__		return getWrittenBytes()__	};mark,this,link,buffer,builder,and,associated,link,buffer,consumer,as,finished,no,new,data,writes,will,be,allowed,p,this,method,should,be,idempotent,to,handle,failures,and,task,interruptions,check,flink,8948,for,more,details,return,number,of,written,bytes;public,int,finish,position,marker,mark,finished,commit,return,get,written,bytes
BufferBuilder -> public int finish();1537385496;Mark this {@link BufferBuilder} and associated {@link BufferConsumer} as finished - no new data writes will be_allowed.__<p>This method should be idempotent to handle failures and task interruptions. Check FLINK-8948 for more details.__@return number of written bytes.;public int finish() {_		int writtenBytes = positionMarker.markFinished()__		commit()__		return writtenBytes__	};mark,this,link,buffer,builder,and,associated,link,buffer,consumer,as,finished,no,new,data,writes,will,be,allowed,p,this,method,should,be,idempotent,to,handle,failures,and,task,interruptions,check,flink,8948,for,more,details,return,number,of,written,bytes;public,int,finish,int,written,bytes,position,marker,mark,finished,commit,return,written,bytes
