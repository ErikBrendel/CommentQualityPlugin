commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Releases the resource with the given instance id.  *  * @param instanceId identifying which resource to release  * @param cause why the resource is released  */ ;/**  * Releases the resource with the given instance id.  *  * @param instanceId identifying which resource to release  * @param cause why the resource is released  */ void releaseResource(InstanceID instanceId, Exception cause).
true;;1;1;/**  * Requests to allocate a resource with the given {@link ResourceProfile}.  *  * @param resourceProfile for the to be allocated resource  * @return Collection of {@link ResourceProfile} describing the allocated slots  * @throws ResourceManagerException if the resource cannot be allocated  */ ;/**  * Requests to allocate a resource with the given {@link ResourceProfile}.  *  * @param resourceProfile for the to be allocated resource  * @return Collection of {@link ResourceProfile} describing the allocated slots  * @throws ResourceManagerException if the resource cannot be allocated  */ Collection<ResourceProfile> allocateResource(ResourceProfile resourceProfile) throws ResourceManagerException.
true;;3;1;/**  * Notifies that an allocation failure has occurred.  *  * @param jobId to which the allocation belonged  * @param allocationId identifying the failed allocation  * @param cause of the allocation failure  */ ;/**  * Notifies that an allocation failure has occurred.  *  * @param jobId to which the allocation belonged  * @param allocationId identifying the failed allocation  * @param cause of the allocation failure  */ void notifyAllocationFailure(JobID jobId, AllocationID allocationId, Exception cause).
