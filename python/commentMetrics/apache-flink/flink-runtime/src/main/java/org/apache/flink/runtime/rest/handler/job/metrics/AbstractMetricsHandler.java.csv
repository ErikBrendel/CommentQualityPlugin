commented;modifiers;parameterAmount;loc;comment;code
false;protected,final;2;26;;@Override protected final CompletableFuture<MetricCollectionResponseBody> handleRequest(@Nonnull HandlerRequest<EmptyRequestBody, M> request, @Nonnull RestfulGateway gateway) throws RestHandlerException {     metricFetcher.update().     final MetricStore.ComponentMetricStore componentMetricStore = getComponentMetricStore(request, metricFetcher.getMetricStore()).     if (componentMetricStore == null || componentMetricStore.metrics == null) {         return CompletableFuture.completedFuture(new MetricCollectionResponseBody(Collections.emptyList())).     }     final Set<String> requestedMetrics = new HashSet<>(request.getQueryParameter(MetricsFilterParameter.class)).     if (requestedMetrics.isEmpty()) {         return CompletableFuture.completedFuture(new MetricCollectionResponseBody(getAvailableMetrics(componentMetricStore))).     } else {         final List<Metric> metrics = getRequestedMetrics(componentMetricStore, requestedMetrics).         return CompletableFuture.completedFuture(new MetricCollectionResponseBody(metrics)).     } }
true;protected,abstract;2;4;/**  * Returns the {@link MetricStore.ComponentMetricStore} that should be queried for metrics.  */ ;/**  * Returns the {@link MetricStore.ComponentMetricStore} that should be queried for metrics.  */ @Nullable protected abstract MetricStore.ComponentMetricStore getComponentMetricStore(HandlerRequest<EmptyRequestBody, M> request, MetricStore metricStore).
false;private,static;1;7;;private static List<Metric> getAvailableMetrics(MetricStore.ComponentMetricStore componentMetricStore) {     return componentMetricStore.metrics.keySet().stream().map(Metric::new).collect(Collectors.toList()). }
false;private,static;2;13;;private static List<Metric> getRequestedMetrics(MetricStore.ComponentMetricStore componentMetricStore, Set<String> requestedMetrics) throws RestHandlerException {     final List<Metric> metrics = new ArrayList<>(requestedMetrics.size()).     for (final String requestedMetric : requestedMetrics) {         final String value = componentMetricStore.getMetric(requestedMetric, null).         if (value != null) {             metrics.add(new Metric(requestedMetric, value)).         }     }     return metrics. }
