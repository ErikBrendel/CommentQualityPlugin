commented;modifiers;parameterAmount;loc;comment;code
true;;4;6;/**  * Operation that writes a snapshot into a stream that is provided by the given {@link CheckpointStreamFactory} and  * returns a @{@link RunnableFuture} that gives a state handle to the snapshot. It is up to the implementation if  * the operation is performed synchronous or asynchronous. In the later case, the returned Runnable must be executed  * first before obtaining the handle.  *  * @param checkpointId      The ID of the checkpoint.  * @param timestamp         The timestamp of the checkpoint.  * @param streamFactory     The factory that we can use for writing our state to streams.  * @param checkpointOptions Options for how to perform this checkpoint.  * @return A runnable future that will yield a {@link StateObject}.  */ ;/**  * Operation that writes a snapshot into a stream that is provided by the given {@link CheckpointStreamFactory} and  * returns a @{@link RunnableFuture} that gives a state handle to the snapshot. It is up to the implementation if  * the operation is performed synchronous or asynchronous. In the later case, the returned Runnable must be executed  * first before obtaining the handle.  *  * @param checkpointId      The ID of the checkpoint.  * @param timestamp         The timestamp of the checkpoint.  * @param streamFactory     The factory that we can use for writing our state to streams.  * @param checkpointOptions Options for how to perform this checkpoint.  * @return A runnable future that will yield a {@link StateObject}.  */ @Nonnull RunnableFuture<S> snapshot(long checkpointId, long timestamp, @Nonnull CheckpointStreamFactory streamFactory, @Nonnull CheckpointOptions checkpointOptions) throws Exception.
