# id;timestamp;commentText;codeText;commentWords;codeWords
TaskManagerRunner -> public static RpcService createRpcService( 			final Configuration configuration, 			final HighAvailabilityServices haServices) throws Exception;1548883368;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_			final Configuration configuration,_			final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		final String taskManagerHostname = determineTaskManagerHostname(configuration, haServices)__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portRangeDefinition, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,final,string,task,manager,hostname,determine,task,manager,hostname,configuration,ha,services,final,string,port,range,definition,configuration,get,string,task,manager,options,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,port,range,definition,configuration
TaskManagerRunner -> public static RpcService createRpcService( 			final Configuration configuration, 			final HighAvailabilityServices haServices) throws Exception;1549528021;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_			final Configuration configuration,_			final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		final String taskManagerHostname = determineTaskManagerHostname(configuration, haServices)__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portRangeDefinition, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,final,string,task,manager,hostname,determine,task,manager,hostname,configuration,ha,services,final,string,port,range,definition,configuration,get,string,task,manager,options,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,port,range,definition,configuration
TaskManagerRunner -> public static RpcService createRpcService( 			final Configuration configuration, 			final HighAvailabilityServices haServices) throws Exception;1550005040;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_			final Configuration configuration,_			final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		final String taskManagerHostname = determineTaskManagerHostname(configuration, haServices)__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portRangeDefinition, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,final,string,task,manager,hostname,determine,task,manager,hostname,configuration,ha,services,final,string,port,range,definition,configuration,get,string,task,manager,options,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,port,range,definition,configuration
TaskManagerRunner -> public static RpcService createRpcService( 			final Configuration configuration, 			final HighAvailabilityServices haServices) throws Exception;1550859304;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_			final Configuration configuration,_			final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		final String taskManagerAddress = determineTaskManagerBindAddress(configuration, haServices)__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		return AkkaRpcServiceUtils.createRpcService(taskManagerAddress, portRangeDefinition, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,final,string,task,manager,address,determine,task,manager,bind,address,configuration,ha,services,final,string,port,range,definition,configuration,get,string,task,manager,options,return,akka,rpc,service,utils,create,rpc,service,task,manager,address,port,range,definition,configuration
TaskManagerRunner -> public static ActorSystem createMetricQueryServiceActorSystem( 			final Configuration configuration, 			final String hostname) throws Exception;1539176686;Create a actor system service for the metric query service.__@param configuration The configuration for the TaskManager._@param hostname to bind the {@link ActorSystem} to;public static ActorSystem createMetricQueryServiceActorSystem(_			final Configuration configuration,_			final String hostname) throws Exception {__		return BootstrapTools.startActorSystem(_			configuration,_			hostname,_			0,_			LOG,_			FIXED_THREAD_POOL_EXECUTOR)__	};create,a,actor,system,service,for,the,metric,query,service,param,configuration,the,configuration,for,the,task,manager,param,hostname,to,bind,the,link,actor,system,to;public,static,actor,system,create,metric,query,service,actor,system,final,configuration,configuration,final,string,hostname,throws,exception,return,bootstrap,tools,start,actor,system,configuration,hostname,0,log
TaskManagerRunner -> public static ActorSystem createMetricQueryServiceActorSystem( 			final Configuration configuration, 			final String hostname) throws Exception;1539176687;Create a actor system service for the metric query service.__@param configuration The configuration for the TaskManager._@param hostname to bind the {@link ActorSystem} to;public static ActorSystem createMetricQueryServiceActorSystem(_			final Configuration configuration,_			final String hostname) throws Exception {__		return BootstrapTools.startActorSystem(_			configuration,_			"metrics",_			hostname,_			0,_			LOG,_			FIXED_THREAD_POOL_EXECUTOR)__	};create,a,actor,system,service,for,the,metric,query,service,param,configuration,the,configuration,for,the,task,manager,param,hostname,to,bind,the,link,actor,system,to;public,static,actor,system,create,metric,query,service,actor,system,final,configuration,configuration,final,string,hostname,throws,exception,return,bootstrap,tools,start,actor,system,configuration,metrics,hostname,0,log
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1482522860;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort < 0 || rpcPort >65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1482522862;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort < 0 || rpcPort >65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1482522862;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort < 0 || rpcPort >65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1482522862;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort < 0 || rpcPort >65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1482522864;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort < 0 || rpcPort >65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1482522864;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort < 0 || rpcPort >65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1482522864;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort < 0 || rpcPort >65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1482522865;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1482522866;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1482522867;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1489766404;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1489766405;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1493146240;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return RpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1493975155;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1499254138;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1501760738;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1506499511;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1507207963;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1509547680;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1509547920;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1509547921;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1512567202;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1516626397;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1517915730;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		Preconditions.checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,preconditions,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1518433169;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1518680660;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1518945174;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1519406526;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1519406526;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1519568061;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1526579384;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final int rpcPort = configuration.getInteger(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, 0)___		checkState(rpcPort >= 0 && rpcPort <= 65535, "Invalid value for " +_				"'%s' (port for the TaskManager actor system) : %d - Leave config parameter empty or " +_				"use 0 to let the system choose port automatically.",_			ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, rpcPort)___		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, rpcPort, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,int,rpc,port,configuration,get,integer,config,constants,0,check,state,rpc,port,0,rpc,port,65535,invalid,value,for,s,port,for,the,task,manager,actor,system,d,leave,config,parameter,empty,or,use,0,to,let,the,system,choose,port,automatically,config,constants,rpc,port,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,rpc,port,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1527512739;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			try {_				return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portsIterator.next(), configuration)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_					cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start task manager on any port in port range "_			+ portRangeDefinition)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,try,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,ports,iterator,next,configuration,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,task,manager,on,any,port,in,port,range,port,range,definition
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1531497726;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			try {_				return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portsIterator.next(), configuration)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_					cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start task manager on any port in port range "_			+ portRangeDefinition)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,try,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,ports,iterator,next,configuration,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,task,manager,on,any,port,in,port,range,port,range,definition
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1533041284;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			try {_				return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portsIterator.next(), configuration)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_					cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start task manager on any port in port range "_			+ portRangeDefinition)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,try,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,ports,iterator,next,configuration,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,task,manager,on,any,port,in,port,range,port,range,definition
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1533555608;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			try {_				return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portsIterator.next(), configuration)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_					cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start task manager on any port in port range "_			+ portRangeDefinition)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,try,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,ports,iterator,next,configuration,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,task,manager,on,any,port,in,port,range,port,range,definition
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1534945233;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			try {_				return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portsIterator.next(), configuration)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_					cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start task manager on any port in port range "_			+ portRangeDefinition)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,try,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,ports,iterator,next,configuration,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,task,manager,on,any,port,in,port,range,port,range,definition
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1536842721;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			try {_				return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portsIterator.next(), configuration)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_					cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start task manager on any port in port range "_			+ portRangeDefinition)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,try,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,ports,iterator,next,configuration,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,task,manager,on,any,port,in,port,range,port,range,definition
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1537436047;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		_		Iterator<Integer> portsIterator__		try {_			portsIterator = NetUtils.getPortRangeFromString(portRangeDefinition)__		} catch (Exception e) {_			throw new IllegalArgumentException("Invalid port range definition: " + portRangeDefinition)__		}__		while (portsIterator.hasNext()) {_			try {_				return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portsIterator.next(), configuration)__			}_			catch (Exception e) {_				_				Throwable cause = e.getCause()__				if (!(cause instanceof org.jboss.netty.channel.ChannelException ||_					cause instanceof java.net.BindException)) {_					throw e__				} _			}_		}__		_		throw new BindException("Could not start task manager on any port in port range "_			+ portRangeDefinition)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,iterator,integer,ports,iterator,try,ports,iterator,net,utils,get,port,range,from,string,port,range,definition,catch,exception,e,throw,new,illegal,argument,exception,invalid,port,range,definition,port,range,definition,while,ports,iterator,has,next,try,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,ports,iterator,next,configuration,catch,exception,e,throwable,cause,e,get,cause,if,cause,instanceof,org,jboss,netty,channel,channel,exception,cause,instanceof,java,net,bind,exception,throw,e,throw,new,bind,exception,could,not,start,task,manager,on,any,port,in,port,range,port,range,definition
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1539176686;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		return bindWithPort(configuration, taskManagerHostname, portRangeDefinition)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,return,bind,with,port,configuration,task,manager,hostname,port,range,definition
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1539176687;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		return bindWithPort(configuration, taskManagerHostname, portRangeDefinition)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,return,bind,with,port,configuration,task,manager,hostname,port,range,definition
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1539176687;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)___		return bindWithPort(configuration, taskManagerHostname, portRangeDefinition)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,return,bind,with,port,configuration,task,manager,hostname,port,range,definition
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1539844740;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, null)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)__		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portRangeDefinition, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,config,constants,null,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,port,range,definition,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1540376774;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(TaskManagerOptions.HOST)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)__		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portRangeDefinition, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,task,manager,options,host,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,port,range,definition,configuration
TaskManagerRunner -> public static RpcService createRpcService( 		final Configuration configuration, 		final HighAvailabilityServices haServices) throws Exception;1548883368;Create a RPC service for the task manager.__@param configuration The configuration for the TaskManager._@param haServices to use for the task manager hostname retrieval;public static RpcService createRpcService(_		final Configuration configuration,_		final HighAvailabilityServices haServices) throws Exception {__		checkNotNull(configuration)__		checkNotNull(haServices)___		String taskManagerHostname = configuration.getString(TaskManagerOptions.HOST)___		if (taskManagerHostname != null) {_			LOG.info("Using configured hostname/address for TaskManager: {}.", taskManagerHostname)__		} else {_			Time lookupTimeout = Time.milliseconds(AkkaUtils.getLookupTimeout(configuration).toMillis())___			InetAddress taskManagerAddress = LeaderRetrievalUtils.findConnectingAddress(_				haServices.getResourceManagerLeaderRetriever(),_				lookupTimeout)___			taskManagerHostname = taskManagerAddress.getHostName()___			LOG.info("TaskManager will use hostname/address '{}' ({}) for communication.",_				taskManagerHostname, taskManagerAddress.getHostAddress())__		}__		final String portRangeDefinition = configuration.getString(TaskManagerOptions.RPC_PORT)__		return AkkaRpcServiceUtils.createRpcService(taskManagerHostname, portRangeDefinition, configuration)__	};create,a,rpc,service,for,the,task,manager,param,configuration,the,configuration,for,the,task,manager,param,ha,services,to,use,for,the,task,manager,hostname,retrieval;public,static,rpc,service,create,rpc,service,final,configuration,configuration,final,high,availability,services,ha,services,throws,exception,check,not,null,configuration,check,not,null,ha,services,string,task,manager,hostname,configuration,get,string,task,manager,options,host,if,task,manager,hostname,null,log,info,using,configured,hostname,address,for,task,manager,task,manager,hostname,else,time,lookup,timeout,time,milliseconds,akka,utils,get,lookup,timeout,configuration,to,millis,inet,address,task,manager,address,leader,retrieval,utils,find,connecting,address,ha,services,get,resource,manager,leader,retriever,lookup,timeout,task,manager,hostname,task,manager,address,get,host,name,log,info,task,manager,will,use,hostname,address,for,communication,task,manager,hostname,task,manager,address,get,host,address,final,string,port,range,definition,configuration,get,string,task,manager,options,return,akka,rpc,service,utils,create,rpc,service,task,manager,hostname,port,range,definition,configuration
