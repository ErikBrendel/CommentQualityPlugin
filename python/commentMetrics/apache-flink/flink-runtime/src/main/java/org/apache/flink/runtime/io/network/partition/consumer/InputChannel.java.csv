# id;timestamp;commentText;codeText;commentWords;codeWords
InputChannel -> abstract Optional<BufferAndAvailability> getNextBuffer() throws IOException, InterruptedException_;1519039301;Returns the next buffer from the consumed subpartition or {@code Optional.empty()} if there is no data to return.;abstract Optional<BufferAndAvailability> getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition,or,code,optional,empty,if,there,is,no,data,to,return;abstract,optional,buffer,and,availability,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> abstract Optional<BufferAndAvailability> getNextBuffer() throws IOException, InterruptedException_;1534316740;Returns the next buffer from the consumed subpartition or {@code Optional.empty()} if there is no data to return.;abstract Optional<BufferAndAvailability> getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition,or,code,optional,empty,if,there,is,no,data,to,return;abstract,optional,buffer,and,availability,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> abstract Optional<BufferAndAvailability> getNextBuffer() throws IOException, InterruptedException_;1537385496;Returns the next buffer from the consumed subpartition or {@code Optional.empty()} if there is no data to return.;abstract Optional<BufferAndAvailability> getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition,or,code,optional,empty,if,there,is,no,data,to,return;abstract,optional,buffer,and,availability,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> abstract Buffer getNextBuffer() throws IOException, InterruptedException_;1427367086;Returns the next buffer from the consumed subpartition.;abstract Buffer getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition;abstract,buffer,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> abstract Buffer getNextBuffer() throws IOException, InterruptedException_;1432760698;Returns the next buffer from the consumed subpartition.;abstract Buffer getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition;abstract,buffer,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> abstract Buffer getNextBuffer() throws IOException, InterruptedException_;1433143315;Returns the next buffer from the consumed subpartition.;abstract Buffer getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition;abstract,buffer,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> abstract Buffer getNextBuffer() throws IOException, InterruptedException_;1438523908;Returns the next buffer from the consumed subpartition.;abstract Buffer getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition;abstract,buffer,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> abstract Buffer getNextBuffer() throws IOException, InterruptedException_;1465991918;Returns the next buffer from the consumed subpartition.;abstract Buffer getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition;abstract,buffer,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> abstract Buffer getNextBuffer() throws IOException, InterruptedException_;1466072697;Returns the next buffer from the consumed subpartition.;abstract Buffer getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition;abstract,buffer,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> abstract Buffer getNextBuffer() throws IOException, InterruptedException_;1472821521;Returns the next buffer from the consumed subpartition.;abstract Buffer getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition;abstract,buffer,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> protected void checkError() throws IOException;1432760698;Checks for an error and rethrows it if one was reported.;protected void checkError() throws IOException {_		final Throwable t = cause.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException(t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;protected,void,check,error,throws,ioexception,final,throwable,t,cause,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,t
InputChannel -> protected void checkError() throws IOException;1433143315;Checks for an error and rethrows it if one was reported.;protected void checkError() throws IOException {_		final Throwable t = cause.get()___		if (t != null) {_			if (t instanceof CancelTaskException) {_				throw (CancelTaskException) t__			}_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException(t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;protected,void,check,error,throws,ioexception,final,throwable,t,cause,get,if,t,null,if,t,instanceof,cancel,task,exception,throw,cancel,task,exception,t,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,t
InputChannel -> protected void checkError() throws IOException;1438523908;Checks for an error and rethrows it if one was reported.;protected void checkError() throws IOException {_		final Throwable t = cause.get()___		if (t != null) {_			if (t instanceof CancelTaskException) {_				throw (CancelTaskException) t__			}_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException(t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;protected,void,check,error,throws,ioexception,final,throwable,t,cause,get,if,t,null,if,t,instanceof,cancel,task,exception,throw,cancel,task,exception,t,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,t
InputChannel -> protected void checkError() throws IOException;1465991918;Checks for an error and rethrows it if one was reported.;protected void checkError() throws IOException {_		final Throwable t = cause.get()___		if (t != null) {_			if (t instanceof CancelTaskException) {_				throw (CancelTaskException) t__			}_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException(t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;protected,void,check,error,throws,ioexception,final,throwable,t,cause,get,if,t,null,if,t,instanceof,cancel,task,exception,throw,cancel,task,exception,t,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,t
InputChannel -> protected void checkError() throws IOException;1466072697;Checks for an error and rethrows it if one was reported.;protected void checkError() throws IOException {_		final Throwable t = cause.get()___		if (t != null) {_			if (t instanceof CancelTaskException) {_				throw (CancelTaskException) t__			}_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException(t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;protected,void,check,error,throws,ioexception,final,throwable,t,cause,get,if,t,null,if,t,instanceof,cancel,task,exception,throw,cancel,task,exception,t,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,t
InputChannel -> protected void checkError() throws IOException;1472821521;Checks for an error and rethrows it if one was reported.;protected void checkError() throws IOException {_		final Throwable t = cause.get()___		if (t != null) {_			if (t instanceof CancelTaskException) {_				throw (CancelTaskException) t__			}_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException(t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;protected,void,check,error,throws,ioexception,final,throwable,t,cause,get,if,t,null,if,t,instanceof,cancel,task,exception,throw,cancel,task,exception,t,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,t
InputChannel -> protected void checkError() throws IOException;1480624969;Checks for an error and rethrows it if one was reported.;protected void checkError() throws IOException {_		final Throwable t = cause.get()___		if (t != null) {_			if (t instanceof CancelTaskException) {_				throw (CancelTaskException) t__			}_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException(t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;protected,void,check,error,throws,ioexception,final,throwable,t,cause,get,if,t,null,if,t,instanceof,cancel,task,exception,throw,cancel,task,exception,t,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,t
InputChannel -> protected void checkError() throws IOException;1515408360;Checks for an error and rethrows it if one was reported.;protected void checkError() throws IOException {_		final Throwable t = cause.get()___		if (t != null) {_			if (t instanceof CancelTaskException) {_				throw (CancelTaskException) t__			}_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException(t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;protected,void,check,error,throws,ioexception,final,throwable,t,cause,get,if,t,null,if,t,instanceof,cancel,task,exception,throw,cancel,task,exception,t,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,t
InputChannel -> protected void checkError() throws IOException;1515510677;Checks for an error and rethrows it if one was reported.;protected void checkError() throws IOException {_		final Throwable t = cause.get()___		if (t != null) {_			if (t instanceof CancelTaskException) {_				throw (CancelTaskException) t__			}_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException(t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;protected,void,check,error,throws,ioexception,final,throwable,t,cause,get,if,t,null,if,t,instanceof,cancel,task,exception,throw,cancel,task,exception,t,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,t
InputChannel -> protected void checkError() throws IOException;1519039301;Checks for an error and rethrows it if one was reported.;protected void checkError() throws IOException {_		final Throwable t = cause.get()___		if (t != null) {_			if (t instanceof CancelTaskException) {_				throw (CancelTaskException) t__			}_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException(t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;protected,void,check,error,throws,ioexception,final,throwable,t,cause,get,if,t,null,if,t,instanceof,cancel,task,exception,throw,cancel,task,exception,t,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,t
InputChannel -> protected void checkError() throws IOException;1534316740;Checks for an error and rethrows it if one was reported.;protected void checkError() throws IOException {_		final Throwable t = cause.get()___		if (t != null) {_			if (t instanceof CancelTaskException) {_				throw (CancelTaskException) t__			}_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException(t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;protected,void,check,error,throws,ioexception,final,throwable,t,cause,get,if,t,null,if,t,instanceof,cancel,task,exception,throw,cancel,task,exception,t,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,t
InputChannel -> protected void checkError() throws IOException;1537385496;Checks for an error and rethrows it if one was reported.;protected void checkError() throws IOException {_		final Throwable t = cause.get()___		if (t != null) {_			if (t instanceof CancelTaskException) {_				throw (CancelTaskException) t__			}_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException(t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;protected,void,check,error,throws,ioexception,final,throwable,t,cause,get,if,t,null,if,t,instanceof,cancel,task,exception,throw,cancel,task,exception,t,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,t
InputChannel -> public abstract void requestIntermediateResultPartition(int queueIndex) throws IOException_;1421050512;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;public abstract void requestIntermediateResultPartition(int queueIndex) throws IOException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;public,abstract,void,request,intermediate,result,partition,int,queue,index,throws,ioexception
InputChannel -> public abstract void requestIntermediateResultPartition(int queueIndex) throws IOException_;1424683371;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;public abstract void requestIntermediateResultPartition(int queueIndex) throws IOException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;public,abstract,void,request,intermediate,result,partition,int,queue,index,throws,ioexception
InputChannel -> public abstract Buffer getNextBuffer() throws IOException_;1421050512;Returns the next buffer from the consumed queue.;public abstract Buffer getNextBuffer() throws IOException_;returns,the,next,buffer,from,the,consumed,queue;public,abstract,buffer,get,next,buffer,throws,ioexception
InputChannel -> public abstract Buffer getNextBuffer() throws IOException_;1424683371;Returns the next buffer from the consumed subpartition.;public abstract Buffer getNextBuffer() throws IOException_;returns,the,next,buffer,from,the,consumed,subpartition;public,abstract,buffer,get,next,buffer,throws,ioexception
InputChannel -> public abstract Buffer getNextBuffer() throws IOException_;1425375416;Returns the next buffer from the consumed subpartition.;public abstract Buffer getNextBuffer() throws IOException_;returns,the,next,buffer,from,the,consumed,subpartition;public,abstract,buffer,get,next,buffer,throws,ioexception
InputChannel -> public abstract Buffer getNextBuffer() throws IOException_;1425601895;Returns the next buffer from the consumed subpartition.;public abstract Buffer getNextBuffer() throws IOException_;returns,the,next,buffer,from,the,consumed,subpartition;public,abstract,buffer,get,next,buffer,throws,ioexception
InputChannel -> public abstract void releaseAllResources() throws IOException_;1421050512;Releases all resources of the channel.;public abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;public,abstract,void,release,all,resources,throws,ioexception
InputChannel -> public abstract void releaseAllResources() throws IOException_;1424683371;Releases all resources of the channel.;public abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;public,abstract,void,release,all,resources,throws,ioexception
InputChannel -> public abstract void releaseAllResources() throws IOException_;1425375416;Releases all resources of the channel.;public abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;public,abstract,void,release,all,resources,throws,ioexception
InputChannel -> public abstract void releaseAllResources() throws IOException_;1425601895;Releases all resources of the channel.;public abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;public,abstract,void,release,all,resources,throws,ioexception
InputChannel -> public abstract void releaseAllResources() throws IOException_;1426697080;Releases all resources of the channel.;public abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;public,abstract,void,release,all,resources,throws,ioexception
InputChannel -> public abstract void sendTaskEvent(TaskEvent event) throws IOException_;1421050512;Sends a {@link TaskEvent} back to the partition producer._<p>_<strong>Important</strong>: This only works if the producer task is_running at the same time.;public abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,partition,producer,p,strong,important,strong,this,only,works,if,the,producer,task,is,running,at,the,same,time;public,abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> public abstract void sendTaskEvent(TaskEvent event) throws IOException_;1424683371;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;public abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;public,abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> public abstract void sendTaskEvent(TaskEvent event) throws IOException_;1425375416;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;public abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;public,abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> public abstract void sendTaskEvent(TaskEvent event) throws IOException_;1425601895;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;public abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;public,abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> public abstract void sendTaskEvent(TaskEvent event) throws IOException_;1426697080;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;public abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;public,abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> protected void notifyChannelNonEmpty();1480624969;Notifies the owning {@link SingleInputGate} that this channel became non-empty.__<p>This is guaranteed to be called only when a Buffer was added to a previously_empty input channel. The notion of empty is atomically consistent with the flag_{@link BufferAndAvailability#moreAvailable()} when polling the next buffer_from this channel.__<p><b>Note:</b> When the input channel observes an exception, this_method is called regardless of whether the channel was empty before. That ensures_that the parent InputGate will always be notified about the exception.;protected void notifyChannelNonEmpty() {_		inputGate.notifyChannelNonEmpty(this)__	};notifies,the,owning,link,single,input,gate,that,this,channel,became,non,empty,p,this,is,guaranteed,to,be,called,only,when,a,buffer,was,added,to,a,previously,empty,input,channel,the,notion,of,empty,is,atomically,consistent,with,the,flag,link,buffer,and,availability,more,available,when,polling,the,next,buffer,from,this,channel,p,b,note,b,when,the,input,channel,observes,an,exception,this,method,is,called,regardless,of,whether,the,channel,was,empty,before,that,ensures,that,the,parent,input,gate,will,always,be,notified,about,the,exception;protected,void,notify,channel,non,empty,input,gate,notify,channel,non,empty,this
InputChannel -> protected void notifyChannelNonEmpty();1515408360;Notifies the owning {@link SingleInputGate} that this channel became non-empty.__<p>This is guaranteed to be called only when a Buffer was added to a previously_empty input channel. The notion of empty is atomically consistent with the flag_{@link BufferAndAvailability#moreAvailable()} when polling the next buffer_from this channel.__<p><b>Note:</b> When the input channel observes an exception, this_method is called regardless of whether the channel was empty before. That ensures_that the parent InputGate will always be notified about the exception.;protected void notifyChannelNonEmpty() {_		inputGate.notifyChannelNonEmpty(this)__	};notifies,the,owning,link,single,input,gate,that,this,channel,became,non,empty,p,this,is,guaranteed,to,be,called,only,when,a,buffer,was,added,to,a,previously,empty,input,channel,the,notion,of,empty,is,atomically,consistent,with,the,flag,link,buffer,and,availability,more,available,when,polling,the,next,buffer,from,this,channel,p,b,note,b,when,the,input,channel,observes,an,exception,this,method,is,called,regardless,of,whether,the,channel,was,empty,before,that,ensures,that,the,parent,input,gate,will,always,be,notified,about,the,exception;protected,void,notify,channel,non,empty,input,gate,notify,channel,non,empty,this
InputChannel -> protected void notifyChannelNonEmpty();1515510677;Notifies the owning {@link SingleInputGate} that this channel became non-empty.__<p>This is guaranteed to be called only when a Buffer was added to a previously_empty input channel. The notion of empty is atomically consistent with the flag_{@link BufferAndAvailability#moreAvailable()} when polling the next buffer_from this channel.__<p><b>Note:</b> When the input channel observes an exception, this_method is called regardless of whether the channel was empty before. That ensures_that the parent InputGate will always be notified about the exception.;protected void notifyChannelNonEmpty() {_		inputGate.notifyChannelNonEmpty(this)__	};notifies,the,owning,link,single,input,gate,that,this,channel,became,non,empty,p,this,is,guaranteed,to,be,called,only,when,a,buffer,was,added,to,a,previously,empty,input,channel,the,notion,of,empty,is,atomically,consistent,with,the,flag,link,buffer,and,availability,more,available,when,polling,the,next,buffer,from,this,channel,p,b,note,b,when,the,input,channel,observes,an,exception,this,method,is,called,regardless,of,whether,the,channel,was,empty,before,that,ensures,that,the,parent,input,gate,will,always,be,notified,about,the,exception;protected,void,notify,channel,non,empty,input,gate,notify,channel,non,empty,this
InputChannel -> protected void notifyChannelNonEmpty();1519039301;Notifies the owning {@link SingleInputGate} that this channel became non-empty.__<p>This is guaranteed to be called only when a Buffer was added to a previously_empty input channel. The notion of empty is atomically consistent with the flag_{@link BufferAndAvailability#moreAvailable()} when polling the next buffer_from this channel.__<p><b>Note:</b> When the input channel observes an exception, this_method is called regardless of whether the channel was empty before. That ensures_that the parent InputGate will always be notified about the exception.;protected void notifyChannelNonEmpty() {_		inputGate.notifyChannelNonEmpty(this)__	};notifies,the,owning,link,single,input,gate,that,this,channel,became,non,empty,p,this,is,guaranteed,to,be,called,only,when,a,buffer,was,added,to,a,previously,empty,input,channel,the,notion,of,empty,is,atomically,consistent,with,the,flag,link,buffer,and,availability,more,available,when,polling,the,next,buffer,from,this,channel,p,b,note,b,when,the,input,channel,observes,an,exception,this,method,is,called,regardless,of,whether,the,channel,was,empty,before,that,ensures,that,the,parent,input,gate,will,always,be,notified,about,the,exception;protected,void,notify,channel,non,empty,input,gate,notify,channel,non,empty,this
InputChannel -> protected void notifyChannelNonEmpty();1534316740;Notifies the owning {@link SingleInputGate} that this channel became non-empty.__<p>This is guaranteed to be called only when a Buffer was added to a previously_empty input channel. The notion of empty is atomically consistent with the flag_{@link BufferAndAvailability#moreAvailable()} when polling the next buffer_from this channel.__<p><b>Note:</b> When the input channel observes an exception, this_method is called regardless of whether the channel was empty before. That ensures_that the parent InputGate will always be notified about the exception.;protected void notifyChannelNonEmpty() {_		inputGate.notifyChannelNonEmpty(this)__	};notifies,the,owning,link,single,input,gate,that,this,channel,became,non,empty,p,this,is,guaranteed,to,be,called,only,when,a,buffer,was,added,to,a,previously,empty,input,channel,the,notion,of,empty,is,atomically,consistent,with,the,flag,link,buffer,and,availability,more,available,when,polling,the,next,buffer,from,this,channel,p,b,note,b,when,the,input,channel,observes,an,exception,this,method,is,called,regardless,of,whether,the,channel,was,empty,before,that,ensures,that,the,parent,input,gate,will,always,be,notified,about,the,exception;protected,void,notify,channel,non,empty,input,gate,notify,channel,non,empty,this
InputChannel -> protected void notifyChannelNonEmpty();1537385496;Notifies the owning {@link SingleInputGate} that this channel became non-empty.__<p>This is guaranteed to be called only when a Buffer was added to a previously_empty input channel. The notion of empty is atomically consistent with the flag_{@link BufferAndAvailability#moreAvailable()} when polling the next buffer_from this channel.__<p><b>Note:</b> When the input channel observes an exception, this_method is called regardless of whether the channel was empty before. That ensures_that the parent InputGate will always be notified about the exception.;protected void notifyChannelNonEmpty() {_		inputGate.notifyChannelNonEmpty(this)__	};notifies,the,owning,link,single,input,gate,that,this,channel,became,non,empty,p,this,is,guaranteed,to,be,called,only,when,a,buffer,was,added,to,a,previously,empty,input,channel,the,notion,of,empty,is,atomically,consistent,with,the,flag,link,buffer,and,availability,more,available,when,polling,the,next,buffer,from,this,channel,p,b,note,b,when,the,input,channel,observes,an,exception,this,method,is,called,regardless,of,whether,the,channel,was,empty,before,that,ensures,that,the,parent,input,gate,will,always,be,notified,about,the,exception;protected,void,notify,channel,non,empty,input,gate,notify,channel,non,empty,this
InputChannel -> protected int getCurrentBackoff();1432760698;Returns the current backoff in ms.;protected int getCurrentBackoff() {_		return currentBackoff <= 0 ? 0 : currentBackoff__	};returns,the,current,backoff,in,ms;protected,int,get,current,backoff,return,current,backoff,0,0,current,backoff
InputChannel -> protected int getCurrentBackoff();1433143315;Returns the current backoff in ms.;protected int getCurrentBackoff() {_		return currentBackoff <= 0 ? 0 : currentBackoff__	};returns,the,current,backoff,in,ms;protected,int,get,current,backoff,return,current,backoff,0,0,current,backoff
InputChannel -> protected int getCurrentBackoff();1438523908;Returns the current backoff in ms.;protected int getCurrentBackoff() {_		return currentBackoff <= 0 ? 0 : currentBackoff__	};returns,the,current,backoff,in,ms;protected,int,get,current,backoff,return,current,backoff,0,0,current,backoff
InputChannel -> protected int getCurrentBackoff();1465991918;Returns the current backoff in ms.;protected int getCurrentBackoff() {_		return currentBackoff <= 0 ? 0 : currentBackoff__	};returns,the,current,backoff,in,ms;protected,int,get,current,backoff,return,current,backoff,0,0,current,backoff
InputChannel -> protected int getCurrentBackoff();1466072697;Returns the current backoff in ms.;protected int getCurrentBackoff() {_		return currentBackoff <= 0 ? 0 : currentBackoff__	};returns,the,current,backoff,in,ms;protected,int,get,current,backoff,return,current,backoff,0,0,current,backoff
InputChannel -> protected int getCurrentBackoff();1472821521;Returns the current backoff in ms.;protected int getCurrentBackoff() {_		return currentBackoff <= 0 ? 0 : currentBackoff__	};returns,the,current,backoff,in,ms;protected,int,get,current,backoff,return,current,backoff,0,0,current,backoff
InputChannel -> protected int getCurrentBackoff();1480624969;Returns the current backoff in ms.;protected int getCurrentBackoff() {_		return currentBackoff <= 0 ? 0 : currentBackoff__	};returns,the,current,backoff,in,ms;protected,int,get,current,backoff,return,current,backoff,0,0,current,backoff
InputChannel -> protected int getCurrentBackoff();1515408360;Returns the current backoff in ms.;protected int getCurrentBackoff() {_		return currentBackoff <= 0 ? 0 : currentBackoff__	};returns,the,current,backoff,in,ms;protected,int,get,current,backoff,return,current,backoff,0,0,current,backoff
InputChannel -> protected int getCurrentBackoff();1515510677;Returns the current backoff in ms.;protected int getCurrentBackoff() {_		return currentBackoff <= 0 ? 0 : currentBackoff__	};returns,the,current,backoff,in,ms;protected,int,get,current,backoff,return,current,backoff,0,0,current,backoff
InputChannel -> protected int getCurrentBackoff();1519039301;Returns the current backoff in ms.;protected int getCurrentBackoff() {_		return currentBackoff <= 0 ? 0 : currentBackoff__	};returns,the,current,backoff,in,ms;protected,int,get,current,backoff,return,current,backoff,0,0,current,backoff
InputChannel -> protected int getCurrentBackoff();1534316740;Returns the current backoff in ms.;protected int getCurrentBackoff() {_		return currentBackoff <= 0 ? 0 : currentBackoff__	};returns,the,current,backoff,in,ms;protected,int,get,current,backoff,return,current,backoff,0,0,current,backoff
InputChannel -> protected int getCurrentBackoff();1537385496;Returns the current backoff in ms.;protected int getCurrentBackoff() {_		return currentBackoff <= 0 ? 0 : currentBackoff__	};returns,the,current,backoff,in,ms;protected,int,get,current,backoff,return,current,backoff,0,0,current,backoff
InputChannel -> public abstract void requestIntermediateResultPartition(int queueIndex) throws IOException, InterruptedException_;1425375416;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;public abstract void requestIntermediateResultPartition(int queueIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;public,abstract,void,request,intermediate,result,partition,int,queue,index,throws,ioexception,interrupted,exception
InputChannel -> public abstract void requestIntermediateResultPartition(int queueIndex) throws IOException, InterruptedException_;1425601895;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;public abstract void requestIntermediateResultPartition(int queueIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;public,abstract,void,request,intermediate,result,partition,int,queue,index,throws,ioexception,interrupted,exception
InputChannel -> protected void notifyAvailableBuffer();1424683371;Notifies the owning {@link SingleInputGate} about an available {@link Buffer} instance.;protected void notifyAvailableBuffer() {_		inputGate.onAvailableBuffer(this)__	};notifies,the,owning,link,single,input,gate,about,an,available,link,buffer,instance;protected,void,notify,available,buffer,input,gate,on,available,buffer,this
InputChannel -> protected void notifyAvailableBuffer();1425375416;Notifies the owning {@link SingleInputGate} about an available {@link Buffer} instance.;protected void notifyAvailableBuffer() {_		inputGate.onAvailableBuffer(this)__	};notifies,the,owning,link,single,input,gate,about,an,available,link,buffer,instance;protected,void,notify,available,buffer,input,gate,on,available,buffer,this
InputChannel -> protected void notifyAvailableBuffer();1425601895;Notifies the owning {@link SingleInputGate} about an available {@link Buffer} instance.;protected void notifyAvailableBuffer() {_		inputGate.onAvailableBuffer(this)__	};notifies,the,owning,link,single,input,gate,about,an,available,link,buffer,instance;protected,void,notify,available,buffer,input,gate,on,available,buffer,this
InputChannel -> protected void notifyAvailableBuffer();1426697080;Notifies the owning {@link SingleInputGate} about an available {@link Buffer} instance.;protected void notifyAvailableBuffer() {_		inputGate.onAvailableBuffer(this)__	};notifies,the,owning,link,single,input,gate,about,an,available,link,buffer,instance;protected,void,notify,available,buffer,input,gate,on,available,buffer,this
InputChannel -> protected void notifyAvailableBuffer();1427367086;Notifies the owning {@link SingleInputGate} about an available {@link Buffer} instance.;protected void notifyAvailableBuffer() {_		inputGate.onAvailableBuffer(this)__	};notifies,the,owning,link,single,input,gate,about,an,available,link,buffer,instance;protected,void,notify,available,buffer,input,gate,on,available,buffer,this
InputChannel -> protected void notifyAvailableBuffer();1432760698;Notifies the owning {@link SingleInputGate} about an available {@link Buffer} instance.;protected void notifyAvailableBuffer() {_		inputGate.onAvailableBuffer(this)__	};notifies,the,owning,link,single,input,gate,about,an,available,link,buffer,instance;protected,void,notify,available,buffer,input,gate,on,available,buffer,this
InputChannel -> protected void notifyAvailableBuffer();1433143315;Notifies the owning {@link SingleInputGate} about an available {@link Buffer} instance.;protected void notifyAvailableBuffer() {_		inputGate.onAvailableBuffer(this)__	};notifies,the,owning,link,single,input,gate,about,an,available,link,buffer,instance;protected,void,notify,available,buffer,input,gate,on,available,buffer,this
InputChannel -> protected void notifyAvailableBuffer();1438523908;Notifies the owning {@link SingleInputGate} about an available {@link Buffer} instance.;protected void notifyAvailableBuffer() {_		inputGate.onAvailableBuffer(this)__	};notifies,the,owning,link,single,input,gate,about,an,available,link,buffer,instance;protected,void,notify,available,buffer,input,gate,on,available,buffer,this
InputChannel -> protected void notifyAvailableBuffer();1465991918;Notifies the owning {@link SingleInputGate} about an available {@link Buffer} instance.;protected void notifyAvailableBuffer() {_		inputGate.onAvailableBuffer(this)__	};notifies,the,owning,link,single,input,gate,about,an,available,link,buffer,instance;protected,void,notify,available,buffer,input,gate,on,available,buffer,this
InputChannel -> protected void notifyAvailableBuffer();1466072697;Notifies the owning {@link SingleInputGate} about an available {@link Buffer} instance.;protected void notifyAvailableBuffer() {_		inputGate.onAvailableBuffer(this)__	};notifies,the,owning,link,single,input,gate,about,an,available,link,buffer,instance;protected,void,notify,available,buffer,input,gate,on,available,buffer,this
InputChannel -> protected void notifyAvailableBuffer();1472821521;Notifies the owning {@link SingleInputGate} about an available {@link Buffer} instance.;protected void notifyAvailableBuffer() {_		inputGate.onAvailableBuffer(this)__	};notifies,the,owning,link,single,input,gate,about,an,available,link,buffer,instance;protected,void,notify,available,buffer,input,gate,on,available,buffer,this
InputChannel -> protected boolean increaseBackoff();1432760698;Increases the current backoff and returns whether the operation was successful.__@return <code>true</code>, iff the operation was successful. Otherwise, <code>false</code>.;protected boolean increaseBackoff() {_		_		if (currentBackoff < 0) {_			return false__		}__		_		if (currentBackoff == 0) {_			currentBackoff = initialBackoff___			return true__		}__		_		else if (currentBackoff < maxBackoff) {_			currentBackoff = Math.min(currentBackoff * 2, maxBackoff)___			return true__		}__		_		return false__	};increases,the,current,backoff,and,returns,whether,the,operation,was,successful,return,code,true,code,iff,the,operation,was,successful,otherwise,code,false,code;protected,boolean,increase,backoff,if,current,backoff,0,return,false,if,current,backoff,0,current,backoff,initial,backoff,return,true,else,if,current,backoff,max,backoff,current,backoff,math,min,current,backoff,2,max,backoff,return,true,return,false
InputChannel -> protected boolean increaseBackoff();1433143315;Increases the current backoff and returns whether the operation was successful.__@return <code>true</code>, iff the operation was successful. Otherwise, <code>false</code>.;protected boolean increaseBackoff() {_		_		if (currentBackoff < 0) {_			return false__		}__		_		if (currentBackoff == 0) {_			currentBackoff = initialBackoff___			return true__		}__		_		else if (currentBackoff < maxBackoff) {_			currentBackoff = Math.min(currentBackoff * 2, maxBackoff)___			return true__		}__		_		return false__	};increases,the,current,backoff,and,returns,whether,the,operation,was,successful,return,code,true,code,iff,the,operation,was,successful,otherwise,code,false,code;protected,boolean,increase,backoff,if,current,backoff,0,return,false,if,current,backoff,0,current,backoff,initial,backoff,return,true,else,if,current,backoff,max,backoff,current,backoff,math,min,current,backoff,2,max,backoff,return,true,return,false
InputChannel -> protected boolean increaseBackoff();1438523908;Increases the current backoff and returns whether the operation was successful.__@return <code>true</code>, iff the operation was successful. Otherwise, <code>false</code>.;protected boolean increaseBackoff() {_		_		if (currentBackoff < 0) {_			return false__		}__		_		if (currentBackoff == 0) {_			currentBackoff = initialBackoff___			return true__		}__		_		else if (currentBackoff < maxBackoff) {_			currentBackoff = Math.min(currentBackoff * 2, maxBackoff)___			return true__		}__		_		return false__	};increases,the,current,backoff,and,returns,whether,the,operation,was,successful,return,code,true,code,iff,the,operation,was,successful,otherwise,code,false,code;protected,boolean,increase,backoff,if,current,backoff,0,return,false,if,current,backoff,0,current,backoff,initial,backoff,return,true,else,if,current,backoff,max,backoff,current,backoff,math,min,current,backoff,2,max,backoff,return,true,return,false
InputChannel -> protected boolean increaseBackoff();1465991918;Increases the current backoff and returns whether the operation was successful.__@return <code>true</code>, iff the operation was successful. Otherwise, <code>false</code>.;protected boolean increaseBackoff() {_		_		if (currentBackoff < 0) {_			return false__		}__		_		if (currentBackoff == 0) {_			currentBackoff = initialBackoff___			return true__		}__		_		else if (currentBackoff < maxBackoff) {_			currentBackoff = Math.min(currentBackoff * 2, maxBackoff)___			return true__		}__		_		return false__	};increases,the,current,backoff,and,returns,whether,the,operation,was,successful,return,code,true,code,iff,the,operation,was,successful,otherwise,code,false,code;protected,boolean,increase,backoff,if,current,backoff,0,return,false,if,current,backoff,0,current,backoff,initial,backoff,return,true,else,if,current,backoff,max,backoff,current,backoff,math,min,current,backoff,2,max,backoff,return,true,return,false
InputChannel -> protected boolean increaseBackoff();1466072697;Increases the current backoff and returns whether the operation was successful.__@return <code>true</code>, iff the operation was successful. Otherwise, <code>false</code>.;protected boolean increaseBackoff() {_		_		if (currentBackoff < 0) {_			return false__		}__		_		if (currentBackoff == 0) {_			currentBackoff = initialBackoff___			return true__		}__		_		else if (currentBackoff < maxBackoff) {_			currentBackoff = Math.min(currentBackoff * 2, maxBackoff)___			return true__		}__		_		return false__	};increases,the,current,backoff,and,returns,whether,the,operation,was,successful,return,code,true,code,iff,the,operation,was,successful,otherwise,code,false,code;protected,boolean,increase,backoff,if,current,backoff,0,return,false,if,current,backoff,0,current,backoff,initial,backoff,return,true,else,if,current,backoff,max,backoff,current,backoff,math,min,current,backoff,2,max,backoff,return,true,return,false
InputChannel -> protected boolean increaseBackoff();1472821521;Increases the current backoff and returns whether the operation was successful.__@return <code>true</code>, iff the operation was successful. Otherwise, <code>false</code>.;protected boolean increaseBackoff() {_		_		if (currentBackoff < 0) {_			return false__		}__		_		if (currentBackoff == 0) {_			currentBackoff = initialBackoff___			return true__		}__		_		else if (currentBackoff < maxBackoff) {_			currentBackoff = Math.min(currentBackoff * 2, maxBackoff)___			return true__		}__		_		return false__	};increases,the,current,backoff,and,returns,whether,the,operation,was,successful,return,code,true,code,iff,the,operation,was,successful,otherwise,code,false,code;protected,boolean,increase,backoff,if,current,backoff,0,return,false,if,current,backoff,0,current,backoff,initial,backoff,return,true,else,if,current,backoff,max,backoff,current,backoff,math,min,current,backoff,2,max,backoff,return,true,return,false
InputChannel -> protected boolean increaseBackoff();1480624969;Increases the current backoff and returns whether the operation was successful.__@return <code>true</code>, iff the operation was successful. Otherwise, <code>false</code>.;protected boolean increaseBackoff() {_		_		if (currentBackoff < 0) {_			return false__		}__		_		if (currentBackoff == 0) {_			currentBackoff = initialBackoff___			return true__		}__		_		else if (currentBackoff < maxBackoff) {_			currentBackoff = Math.min(currentBackoff * 2, maxBackoff)___			return true__		}__		_		return false__	};increases,the,current,backoff,and,returns,whether,the,operation,was,successful,return,code,true,code,iff,the,operation,was,successful,otherwise,code,false,code;protected,boolean,increase,backoff,if,current,backoff,0,return,false,if,current,backoff,0,current,backoff,initial,backoff,return,true,else,if,current,backoff,max,backoff,current,backoff,math,min,current,backoff,2,max,backoff,return,true,return,false
InputChannel -> protected boolean increaseBackoff();1515408360;Increases the current backoff and returns whether the operation was successful.__@return <code>true</code>, iff the operation was successful. Otherwise, <code>false</code>.;protected boolean increaseBackoff() {_		_		if (currentBackoff < 0) {_			return false__		}__		_		if (currentBackoff == 0) {_			currentBackoff = initialBackoff___			return true__		}__		_		else if (currentBackoff < maxBackoff) {_			currentBackoff = Math.min(currentBackoff * 2, maxBackoff)___			return true__		}__		_		return false__	};increases,the,current,backoff,and,returns,whether,the,operation,was,successful,return,code,true,code,iff,the,operation,was,successful,otherwise,code,false,code;protected,boolean,increase,backoff,if,current,backoff,0,return,false,if,current,backoff,0,current,backoff,initial,backoff,return,true,else,if,current,backoff,max,backoff,current,backoff,math,min,current,backoff,2,max,backoff,return,true,return,false
InputChannel -> protected boolean increaseBackoff();1515510677;Increases the current backoff and returns whether the operation was successful.__@return <code>true</code>, iff the operation was successful. Otherwise, <code>false</code>.;protected boolean increaseBackoff() {_		_		if (currentBackoff < 0) {_			return false__		}__		_		if (currentBackoff == 0) {_			currentBackoff = initialBackoff___			return true__		}__		_		else if (currentBackoff < maxBackoff) {_			currentBackoff = Math.min(currentBackoff * 2, maxBackoff)___			return true__		}__		_		return false__	};increases,the,current,backoff,and,returns,whether,the,operation,was,successful,return,code,true,code,iff,the,operation,was,successful,otherwise,code,false,code;protected,boolean,increase,backoff,if,current,backoff,0,return,false,if,current,backoff,0,current,backoff,initial,backoff,return,true,else,if,current,backoff,max,backoff,current,backoff,math,min,current,backoff,2,max,backoff,return,true,return,false
InputChannel -> protected boolean increaseBackoff();1519039301;Increases the current backoff and returns whether the operation was successful.__@return <code>true</code>, iff the operation was successful. Otherwise, <code>false</code>.;protected boolean increaseBackoff() {_		_		if (currentBackoff < 0) {_			return false__		}__		_		if (currentBackoff == 0) {_			currentBackoff = initialBackoff___			return true__		}__		_		else if (currentBackoff < maxBackoff) {_			currentBackoff = Math.min(currentBackoff * 2, maxBackoff)___			return true__		}__		_		return false__	};increases,the,current,backoff,and,returns,whether,the,operation,was,successful,return,code,true,code,iff,the,operation,was,successful,otherwise,code,false,code;protected,boolean,increase,backoff,if,current,backoff,0,return,false,if,current,backoff,0,current,backoff,initial,backoff,return,true,else,if,current,backoff,max,backoff,current,backoff,math,min,current,backoff,2,max,backoff,return,true,return,false
InputChannel -> protected boolean increaseBackoff();1534316740;Increases the current backoff and returns whether the operation was successful.__@return <code>true</code>, iff the operation was successful. Otherwise, <code>false</code>.;protected boolean increaseBackoff() {_		_		if (currentBackoff < 0) {_			return false__		}__		_		if (currentBackoff == 0) {_			currentBackoff = initialBackoff___			return true__		}__		_		else if (currentBackoff < maxBackoff) {_			currentBackoff = Math.min(currentBackoff * 2, maxBackoff)___			return true__		}__		_		return false__	};increases,the,current,backoff,and,returns,whether,the,operation,was,successful,return,code,true,code,iff,the,operation,was,successful,otherwise,code,false,code;protected,boolean,increase,backoff,if,current,backoff,0,return,false,if,current,backoff,0,current,backoff,initial,backoff,return,true,else,if,current,backoff,max,backoff,current,backoff,math,min,current,backoff,2,max,backoff,return,true,return,false
InputChannel -> protected boolean increaseBackoff();1537385496;Increases the current backoff and returns whether the operation was successful.__@return <code>true</code>, iff the operation was successful. Otherwise, <code>false</code>.;protected boolean increaseBackoff() {_		_		if (currentBackoff < 0) {_			return false__		}__		_		if (currentBackoff == 0) {_			currentBackoff = initialBackoff___			return true__		}__		_		else if (currentBackoff < maxBackoff) {_			currentBackoff = Math.min(currentBackoff * 2, maxBackoff)___			return true__		}__		_		return false__	};increases,the,current,backoff,and,returns,whether,the,operation,was,successful,return,code,true,code,iff,the,operation,was,successful,otherwise,code,false,code;protected,boolean,increase,backoff,if,current,backoff,0,return,false,if,current,backoff,0,current,backoff,initial,backoff,return,true,else,if,current,backoff,max,backoff,current,backoff,math,min,current,backoff,2,max,backoff,return,true,return,false
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1427367086;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1432760698;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1433143315;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1438523908;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1465991918;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1466072697;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1472821521;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1480624969;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1515408360;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1515510677;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1519039301;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1534316740;Requests the queue with the specified index of the source intermediate_result partition._<p>_The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;1537385496;Requests the queue with the specified index of the source intermediate_result partition.__<p>The queue index to request depends on which sub task the channel belongs_to and is specified by the consumer of this channel.;abstract void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException_;requests,the,queue,with,the,specified,index,of,the,source,intermediate,result,partition,p,the,queue,index,to,request,depends,on,which,sub,task,the,channel,belongs,to,and,is,specified,by,the,consumer,of,this,channel;abstract,void,request,subpartition,int,subpartition,index,throws,ioexception,interrupted,exception
InputChannel -> abstract void releaseAllResources() throws IOException_;1427367086;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> abstract void releaseAllResources() throws IOException_;1432760698;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> abstract void releaseAllResources() throws IOException_;1433143315;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> abstract void releaseAllResources() throws IOException_;1438523908;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> abstract void releaseAllResources() throws IOException_;1465991918;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> abstract void releaseAllResources() throws IOException_;1466072697;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> abstract void releaseAllResources() throws IOException_;1472821521;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> abstract void releaseAllResources() throws IOException_;1480624969;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> abstract void releaseAllResources() throws IOException_;1515408360;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> abstract void releaseAllResources() throws IOException_;1515510677;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> abstract void releaseAllResources() throws IOException_;1519039301;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> abstract void releaseAllResources() throws IOException_;1534316740;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> abstract void releaseAllResources() throws IOException_;1537385496;Releases all resources of the channel.;abstract void releaseAllResources() throws IOException_;releases,all,resources,of,the,channel;abstract,void,release,all,resources,throws,ioexception
InputChannel -> protected void setError(Throwable cause);1432760698;Atomically sets an error for this channel and notifies the input gate about available data to_trigger querying this channel by the task thread.;protected void setError(Throwable cause) {_		if (this.cause.compareAndSet(null, checkNotNull(cause))) {_			_			notifyAvailableBuffer()__		}_	};atomically,sets,an,error,for,this,channel,and,notifies,the,input,gate,about,available,data,to,trigger,querying,this,channel,by,the,task,thread;protected,void,set,error,throwable,cause,if,this,cause,compare,and,set,null,check,not,null,cause,notify,available,buffer
InputChannel -> protected void setError(Throwable cause);1433143315;Atomically sets an error for this channel and notifies the input gate about available data to_trigger querying this channel by the task thread.;protected void setError(Throwable cause) {_		if (this.cause.compareAndSet(null, checkNotNull(cause))) {_			_			notifyAvailableBuffer()__		}_	};atomically,sets,an,error,for,this,channel,and,notifies,the,input,gate,about,available,data,to,trigger,querying,this,channel,by,the,task,thread;protected,void,set,error,throwable,cause,if,this,cause,compare,and,set,null,check,not,null,cause,notify,available,buffer
InputChannel -> protected void setError(Throwable cause);1438523908;Atomically sets an error for this channel and notifies the input gate about available data to_trigger querying this channel by the task thread.;protected void setError(Throwable cause) {_		if (this.cause.compareAndSet(null, checkNotNull(cause))) {_			_			notifyAvailableBuffer()__		}_	};atomically,sets,an,error,for,this,channel,and,notifies,the,input,gate,about,available,data,to,trigger,querying,this,channel,by,the,task,thread;protected,void,set,error,throwable,cause,if,this,cause,compare,and,set,null,check,not,null,cause,notify,available,buffer
InputChannel -> protected void setError(Throwable cause);1465991918;Atomically sets an error for this channel and notifies the input gate about available data to_trigger querying this channel by the task thread.;protected void setError(Throwable cause) {_		if (this.cause.compareAndSet(null, checkNotNull(cause))) {_			_			notifyAvailableBuffer()__		}_	};atomically,sets,an,error,for,this,channel,and,notifies,the,input,gate,about,available,data,to,trigger,querying,this,channel,by,the,task,thread;protected,void,set,error,throwable,cause,if,this,cause,compare,and,set,null,check,not,null,cause,notify,available,buffer
InputChannel -> protected void setError(Throwable cause);1466072697;Atomically sets an error for this channel and notifies the input gate about available data to_trigger querying this channel by the task thread.;protected void setError(Throwable cause) {_		if (this.cause.compareAndSet(null, checkNotNull(cause))) {_			_			notifyAvailableBuffer()__		}_	};atomically,sets,an,error,for,this,channel,and,notifies,the,input,gate,about,available,data,to,trigger,querying,this,channel,by,the,task,thread;protected,void,set,error,throwable,cause,if,this,cause,compare,and,set,null,check,not,null,cause,notify,available,buffer
InputChannel -> protected void setError(Throwable cause);1472821521;Atomically sets an error for this channel and notifies the input gate about available data to_trigger querying this channel by the task thread.;protected void setError(Throwable cause) {_		if (this.cause.compareAndSet(null, checkNotNull(cause))) {_			_			notifyAvailableBuffer()__		}_	};atomically,sets,an,error,for,this,channel,and,notifies,the,input,gate,about,available,data,to,trigger,querying,this,channel,by,the,task,thread;protected,void,set,error,throwable,cause,if,this,cause,compare,and,set,null,check,not,null,cause,notify,available,buffer
InputChannel -> protected void setError(Throwable cause);1480624969;Atomically sets an error for this channel and notifies the input gate about available data to_trigger querying this channel by the task thread.;protected void setError(Throwable cause) {_		if (this.cause.compareAndSet(null, checkNotNull(cause))) {_			_			notifyChannelNonEmpty()__		}_	};atomically,sets,an,error,for,this,channel,and,notifies,the,input,gate,about,available,data,to,trigger,querying,this,channel,by,the,task,thread;protected,void,set,error,throwable,cause,if,this,cause,compare,and,set,null,check,not,null,cause,notify,channel,non,empty
InputChannel -> protected void setError(Throwable cause);1515408360;Atomically sets an error for this channel and notifies the input gate about available data to_trigger querying this channel by the task thread.;protected void setError(Throwable cause) {_		if (this.cause.compareAndSet(null, checkNotNull(cause))) {_			_			notifyChannelNonEmpty()__		}_	};atomically,sets,an,error,for,this,channel,and,notifies,the,input,gate,about,available,data,to,trigger,querying,this,channel,by,the,task,thread;protected,void,set,error,throwable,cause,if,this,cause,compare,and,set,null,check,not,null,cause,notify,channel,non,empty
InputChannel -> protected void setError(Throwable cause);1515510677;Atomically sets an error for this channel and notifies the input gate about available data to_trigger querying this channel by the task thread.;protected void setError(Throwable cause) {_		if (this.cause.compareAndSet(null, checkNotNull(cause))) {_			_			notifyChannelNonEmpty()__		}_	};atomically,sets,an,error,for,this,channel,and,notifies,the,input,gate,about,available,data,to,trigger,querying,this,channel,by,the,task,thread;protected,void,set,error,throwable,cause,if,this,cause,compare,and,set,null,check,not,null,cause,notify,channel,non,empty
InputChannel -> protected void setError(Throwable cause);1519039301;Atomically sets an error for this channel and notifies the input gate about available data to_trigger querying this channel by the task thread.;protected void setError(Throwable cause) {_		if (this.cause.compareAndSet(null, checkNotNull(cause))) {_			_			notifyChannelNonEmpty()__		}_	};atomically,sets,an,error,for,this,channel,and,notifies,the,input,gate,about,available,data,to,trigger,querying,this,channel,by,the,task,thread;protected,void,set,error,throwable,cause,if,this,cause,compare,and,set,null,check,not,null,cause,notify,channel,non,empty
InputChannel -> protected void setError(Throwable cause);1534316740;Atomically sets an error for this channel and notifies the input gate about available data to_trigger querying this channel by the task thread.;protected void setError(Throwable cause) {_		if (this.cause.compareAndSet(null, checkNotNull(cause))) {_			_			notifyChannelNonEmpty()__		}_	};atomically,sets,an,error,for,this,channel,and,notifies,the,input,gate,about,available,data,to,trigger,querying,this,channel,by,the,task,thread;protected,void,set,error,throwable,cause,if,this,cause,compare,and,set,null,check,not,null,cause,notify,channel,non,empty
InputChannel -> protected void setError(Throwable cause);1537385496;Atomically sets an error for this channel and notifies the input gate about available data to_trigger querying this channel by the task thread.;protected void setError(Throwable cause) {_		if (this.cause.compareAndSet(null, checkNotNull(cause))) {_			_			notifyChannelNonEmpty()__		}_	};atomically,sets,an,error,for,this,channel,and,notifies,the,input,gate,about,available,data,to,trigger,querying,this,channel,by,the,task,thread;protected,void,set,error,throwable,cause,if,this,cause,compare,and,set,null,check,not,null,cause,notify,channel,non,empty
InputChannel -> abstract BufferAndAvailability getNextBuffer() throws IOException, InterruptedException_;1480624969;Returns the next buffer from the consumed subpartition.;abstract BufferAndAvailability getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition;abstract,buffer,and,availability,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> abstract BufferAndAvailability getNextBuffer() throws IOException, InterruptedException_;1515408360;Returns the next buffer from the consumed subpartition.;abstract BufferAndAvailability getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition;abstract,buffer,and,availability,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> abstract BufferAndAvailability getNextBuffer() throws IOException, InterruptedException_;1515510677;Returns the next buffer from the consumed subpartition.;abstract BufferAndAvailability getNextBuffer() throws IOException, InterruptedException_;returns,the,next,buffer,from,the,consumed,subpartition;abstract,buffer,and,availability,get,next,buffer,throws,ioexception,interrupted,exception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1427367086;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1432760698;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1433143315;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1438523908;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1465991918;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1466072697;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1472821521;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1480624969;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1515408360;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1515510677;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1519039301;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1534316740;Sends a {@link TaskEvent} back to the task producing the consumed result partition._<p>_<strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
InputChannel -> abstract void sendTaskEvent(TaskEvent event) throws IOException_;1537385496;Sends a {@link TaskEvent} back to the task producing the consumed result partition.__<p><strong>Important</strong>: The producing task has to be running to receive backwards events._This means that the result type needs to be pipelined and the task logic has to ensure that_the producer will wait for all backwards events. Otherwise, this will lead to an Exception_at runtime.;abstract void sendTaskEvent(TaskEvent event) throws IOException_;sends,a,link,task,event,back,to,the,task,producing,the,consumed,result,partition,p,strong,important,strong,the,producing,task,has,to,be,running,to,receive,backwards,events,this,means,that,the,result,type,needs,to,be,pipelined,and,the,task,logic,has,to,ensure,that,the,producer,will,wait,for,all,backwards,events,otherwise,this,will,lead,to,an,exception,at,runtime;abstract,void,send,task,event,task,event,event,throws,ioexception
