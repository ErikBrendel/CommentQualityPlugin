# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1475231926;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1476972861;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1479853012;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1481115912;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1485116541;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1485118419;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1485118420;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1487636186;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1487865389;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1487871589;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1489599838;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1489685642;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1490330043;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1490724328;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1493994606;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1493994606;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1494187243;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1494363409;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1499156246;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1506610974;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1515177485;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1516626397;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1518008821;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1518008896;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1518805332;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1519568061;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1522325571;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1522337739;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1524760045;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1529325710;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1530695903;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1531419503;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1531771917;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1533224436;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1536222236;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1546867949;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializerProvider.currentSchemaSerializer()__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer,provider,current,schema,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1548755874;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializerProvider.currentSchemaSerializer()__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer,provider,current,schema,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1550581511;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializerProvider.currentSchemaSerializer()__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer,provider,current,schema,serializer
AbstractKeyedStateBackend -> @Override 	public TypeSerializer<K> getKeySerializer();1550863001;@see KeyedStateBackend;@Override_	public TypeSerializer<K> getKeySerializer() {_		return keySerializerProvider.currentSchemaSerializer()__	};see,keyed,state,backend;override,public,type,serializer,k,get,key,serializer,return,key,serializer,provider,current,schema,serializer
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<K, N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1522337739;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<K, N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,k,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<K, N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1524760045;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<K, N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,k,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> @Deprecated 	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1494363409;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state__@deprecated will be removed in a future version;@Deprecated_	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state,deprecated,will,be,removed,in,a,future,version;deprecated,protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> @Deprecated 	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1499156246;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state__@deprecated will be removed in a future version;@Deprecated_	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state,deprecated,will,be,removed,in,a,future,version;deprecated,protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> @Deprecated 	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1506610974;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state__@deprecated will be removed in a future version;@Deprecated_	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state,deprecated,will,be,removed,in,a,future,version;deprecated,protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> @Deprecated 	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1515177485;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state__@deprecated will be removed in a future version;@Deprecated_	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state,deprecated,will,be,removed,in,a,future,version;deprecated,protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> @Deprecated 	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1516626397;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state__@deprecated will be removed in a future version;@Deprecated_	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state,deprecated,will,be,removed,in,a,future,version;deprecated,protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> @Deprecated 	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1518008821;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state__@deprecated will be removed in a future version;@Deprecated_	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state,deprecated,will,be,removed,in,a,future,version;deprecated,protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> @Deprecated 	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1518008896;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state__@deprecated will be removed in a future version;@Deprecated_	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state,deprecated,will,be,removed,in,a,future,version;deprecated,protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> @Deprecated 	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1518805332;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state__@deprecated will be removed in a future version;@Deprecated_	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state,deprecated,will,be,removed,in,a,future,version;deprecated,protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> @Deprecated 	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1519568061;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state__@deprecated will be removed in a future version;@Deprecated_	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state,deprecated,will,be,removed,in,a,future,version;deprecated,protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> @Deprecated 	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1522325571;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state__@deprecated will be removed in a future version;@Deprecated_	protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state,deprecated,will,be,removed,in,a,future,version;deprecated,protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1475231926;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1476972861;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1479853012;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1481115912;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1485116541;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1485118419;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1485118420;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1487636186;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1487865389;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1487871589;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1489599838;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1489685642;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1490330043;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1490724328;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1493994606;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1493994606;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1494187243;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1494363409;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1499156246;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1506610974;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1515177485;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1516626397;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1518008821;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1518008896;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1518805332;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1519568061;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1522325571;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1522337739;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1524760045;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1529325710;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1530695903;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1531419503;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1531771917;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1533224436;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1536222236;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1546867949;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1548755874;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1550581511;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public int getNumberOfKeyGroups();1550863001;@see KeyedStateBackend;@Override_	public int getNumberOfKeyGroups() {_		return numberOfKeyGroups__	};see,keyed,state,backend;override,public,int,get,number,of,key,groups,return,number,of,key,groups
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1485118420;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1487636186;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1487865389;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1487871589;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1489599838;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1489685642;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1490330043;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1490724328;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1493994606;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1493994606;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1494187243;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1494363409;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1499156246;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1506610974;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1515177485;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1516626397;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1518008821;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1518008896;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1518805332;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1519568061;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1522325571;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<N, T, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,n,t,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1485118419;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1485118420;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1487636186;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1487865389;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1487871589;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1489599838;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1489685642;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1490330043;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1490724328;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1493994606;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1493994606;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1494187243;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> InternalFoldingState<N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,internal,folding,state,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1487865389;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1487871589;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1489599838;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1489685642;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1490330043;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1490724328;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1493994606;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1493994606;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1494187243;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1494363409;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1499156246;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1506610974;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1515177485;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1516626397;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1518008821;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1518008896;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1518805332;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1519568061;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState( 			TypeSerializer<N> namespaceSerializer, 			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;1522325571;Creates and returns a new {@link MapState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <UK> Type of the keys in the state_@param <UV> Type of the values in the state	 *;protected abstract <N, UK, UV> InternalMapState<N, UK, UV> createMapState(_			TypeSerializer<N> namespaceSerializer,_			MapStateDescriptor<UK, UV> stateDesc) throws Exception_;creates,and,returns,a,new,link,map,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,uk,type,of,the,keys,in,the,state,param,uv,type,of,the,values,in,the,state;protected,abstract,n,uk,uv,internal,map,state,n,uk,uv,create,map,state,type,serializer,n,namespace,serializer,map,state,descriptor,uk,uv,state,desc,throws,exception
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1475231926;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1476972861;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1479853012;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1481115912;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1485116541;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1485118419;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1485118420;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1487636186;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1487865389;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1487871589;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1489599838;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1489685642;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1490330043;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1490724328;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1493994606;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1493994606;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1494187243;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1494363409;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1499156246;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1506610974;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1515177485;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1516626397;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1518008821;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1518008896;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1518805332;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1519568061;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1522325571;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1522337739;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1524760045;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1529325710;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1530695903;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1531419503;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1531771917;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1533224436;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1536222236;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1546867949;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1548755874;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1550581511;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public K getCurrentKey();1550863001;@see KeyedStateBackend;@Override_	public K getCurrentKey() {_		return currentKey__	};see,keyed,state,backend;override,public,k,get,current,key,return,current,key
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1475231926;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1476972861;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1479853012;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1481115912;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1485116541;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1485118419;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1485118420;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1487636186;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1487865389;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1487871589;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1489599838;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1489685642;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1490330043;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1490724328;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1493994606;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1493994606;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1494187243;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1494363409;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1499156246;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1506610974;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1515177485;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1516626397;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1518008821;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1518008896;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1518805332;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1519568061;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1522325571;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1522337739;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1524760045;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1529325710;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1530695903;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1531419503;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1531771917;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1533224436;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1536222236;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1546867949;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1548755874;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1550581511;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> @Override 	public int getCurrentKeyGroupIndex();1550863001;@see KeyedStateBackend;@Override_	public int getCurrentKeyGroupIndex() {_		return currentKeyGroup__	};see,keyed,state,backend;override,public,int,get,current,key,group,index,return,current,key,group
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1485118419;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1485118420;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1487636186;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1487865389;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1487871589;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1489599838;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1489685642;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1490330043;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1490724328;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1493994606;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1493994606;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1494187243;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1494363409;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1499156246;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1506610974;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1515177485;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1516626397;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1518008821;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1518008896;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1518805332;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1519568061;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1522325571;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> public KeyGroupRange getKeyGroupRange();1475231926;@see KeyedStateBackend;public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> public KeyGroupRange getKeyGroupRange();1476972861;@see KeyedStateBackend;public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> public KeyGroupRange getKeyGroupRange();1479853012;@see KeyedStateBackend;public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> public KeyGroupRange getKeyGroupRange();1481115912;@see KeyedStateBackend;public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> public KeyGroupRange getKeyGroupRange();1485116541;@see KeyedStateBackend;public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> public KeyGroupRange getKeyGroupRange();1485118419;@see KeyedStateBackend;public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> public KeyGroupRange getKeyGroupRange();1485118420;@see KeyedStateBackend;public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> public KeyGroupRange getKeyGroupRange();1487636186;@see KeyedStateBackend;public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> public KeyGroupRange getKeyGroupRange();1487865389;@see KeyedStateBackend;public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> public KeyGroupRange getKeyGroupRange();1487871589;@see KeyedStateBackend;public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> public KeyGroupRange getKeyGroupRange();1489599838;@see KeyedStateBackend;public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1485118419;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1485118420;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1487636186;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1487865389;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1487871589;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1489599838;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1489685642;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1490330043;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1490724328;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1493994606;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1493994606;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1494187243;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1494363409;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1499156246;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1506610974;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1515177485;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1516626397;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1518008821;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1518008896;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1518805332;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1519568061;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1522325571;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numKeyValueStateEntries()_;1533224436;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numKeyValueStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,key,value,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numKeyValueStateEntries()_;1536222236;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numKeyValueStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,key,value,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numKeyValueStateEntries()_;1546867949;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numKeyValueStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,key,value,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numKeyValueStateEntries()_;1548755874;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numKeyValueStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,key,value,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numKeyValueStateEntries()_;1550581511;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numKeyValueStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,key,value,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numKeyValueStateEntries()_;1550863001;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numKeyValueStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,key,value,state,entries
AbstractKeyedStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1475231926;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1476972861;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1479853012;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1481115912;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1485116541;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1475231926;@see KeyedStateBackend;@Override_	@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {_		Preconditions.checkNotNull(namespace, "Namespace")__		Preconditions.checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		KvState kvState = (KvState) state___		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		lastName = stateDescriptor.getName()__		lastState = kvState___		kvState.setCurrentNamespace(namespace)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,preconditions,check,not,null,namespace,namespace,preconditions,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,kv,state,kv,state,kv,state,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1476972861;@see KeyedStateBackend;@Override_	@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {_		Preconditions.checkNotNull(namespace, "Namespace")__		Preconditions.checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		KvState kvState = (KvState) state___		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		lastName = stateDescriptor.getName()__		lastState = kvState___		kvState.setCurrentNamespace(namespace)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,preconditions,check,not,null,namespace,namespace,preconditions,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,kv,state,kv,state,kv,state,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1479853012;@see KeyedStateBackend;@Override_	@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {_		Preconditions.checkNotNull(namespace, "Namespace")__		Preconditions.checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		KvState kvState = (KvState) state___		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		lastName = stateDescriptor.getName()__		lastState = kvState___		kvState.setCurrentNamespace(namespace)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,preconditions,check,not,null,namespace,namespace,preconditions,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,kv,state,kv,state,kv,state,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1481115912;@see KeyedStateBackend;@Override_	@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {_		Preconditions.checkNotNull(namespace, "Namespace")__		Preconditions.checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		KvState kvState = (KvState) state___		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		lastName = stateDescriptor.getName()__		lastState = kvState___		kvState.setCurrentNamespace(namespace)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,preconditions,check,not,null,namespace,namespace,preconditions,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,kv,state,kv,state,kv,state,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1485116541;@see KeyedStateBackend;@Override_	@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {_		Preconditions.checkNotNull(namespace, "Namespace")__		Preconditions.checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		KvState kvState = (KvState) state___		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		lastName = stateDescriptor.getName()__		lastState = kvState___		kvState.setCurrentNamespace(namespace)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,preconditions,check,not,null,namespace,namespace,preconditions,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,kv,state,kv,state,kv,state,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<K, N, T, ACC, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1522337739;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<K, N, T, ACC, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,k,n,t,acc,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC, R> InternalAggregatingState<K, N, T, ACC, R> createAggregatingState( 			TypeSerializer<N> namespaceSerializer, 			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;1524760045;Creates and returns a new {@link AggregatingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T, ACC, R> InternalAggregatingState<K, N, T, ACC, R> createAggregatingState(_			TypeSerializer<N> namespaceSerializer,_			AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception_;creates,and,returns,a,new,link,aggregating,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,acc,r,internal,aggregating,state,k,n,t,acc,r,create,aggregating,state,type,serializer,n,namespace,serializer,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1489685642;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1490330043;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1490724328;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1493994606;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1493994606;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1494187243;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1494363409;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1499156246;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1506610974;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1515177485;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1516626397;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1518008821;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1518008896;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1518805332;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1519568061;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1522325571;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1522337739;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1524760045;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1529325710;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1530695903;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1531419503;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1531771917;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1533224436;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1536222236;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1546867949;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1548755874;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1550581511;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> @Override 	public KeyGroupRange getKeyGroupRange();1550863001;@see KeyedStateBackend;@Override_	public KeyGroupRange getKeyGroupRange() {_		return keyGroupRange__	};see,keyed,state,backend;override,public,key,group,range,get,key,group,range,return,key,group,range
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1475231926;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1476972861;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1479853012;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1481115912;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1485116541;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1506610974;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1515177485;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1516626397;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1518008821;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1518008896;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1518805332;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1519568061;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1522325571;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1522337739;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1524760045;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1529325710;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1530695903;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1531419503;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> @VisibleForTesting 	public abstract int numStateEntries()_;1531771917;Returns the total number of state entries across all keys/namespaces.;@VisibleForTesting_	public abstract int numStateEntries()_;returns,the,total,number,of,state,entries,across,all,keys,namespaces;visible,for,testing,public,abstract,int,num,state,entries
AbstractKeyedStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1475231926;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1476972861;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1479853012;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1481115912;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1485116541;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1485118419;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1485118420;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1487636186;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1487865389;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1487871589;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1489599838;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		stateDescriptor.initializeSerializerUnlessSet(executionConfig)___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,state,descriptor,initialize,serializer,unless,set,execution,config,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1489685642;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		stateDescriptor.initializeSerializerUnlessSet(executionConfig)___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,state,descriptor,initialize,serializer,unless,set,execution,config,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1490330043;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1490724328;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1493994606;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1493994606;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1494187243;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1494363409;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1499156246;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1506610974;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1515177485;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1516626397;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1518008821;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1518008896;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1518805332;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1519568061;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1522325571;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<N> kvState = (InternalKvState<N>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,n,kv,state,internal,kv,state,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1522337739;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<K, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,k,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1524760045;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<K, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,k,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1529325710;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<K, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,k,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1530695903;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<K, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,k,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1531419503;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<K, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,k,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1531771917;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<K, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,k,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1533224436;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<K, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,k,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1536222236;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<K, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,k,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1546867949;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<K, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,k,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1548755874;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<K, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,k,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1550581511;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<K, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,k,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> @SuppressWarnings("unchecked") 	@Override 	public <N, S extends State> S getPartitionedState( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, ?> stateDescriptor) throws Exception;1550863001;TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@see KeyedStateBackend;@SuppressWarnings("unchecked")_	@Override_	public <N, S extends State> S getPartitionedState(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		checkNotNull(namespace, "Namespace")___		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		InternalKvState<K, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		final S state = getOrCreateKeyedState(namespaceSerializer, stateDescriptor)__		final InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state___		lastName = stateDescriptor.getName()__		lastState = kvState__		kvState.setCurrentNamespace(namespace)___		return state__	};todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,see,keyed,state,backend;suppress,warnings,unchecked,override,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,check,not,null,namespace,namespace,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,internal,kv,state,k,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,final,s,state,get,or,create,keyed,state,namespace,serializer,state,descriptor,final,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,return,state
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<K, N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1522337739;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<K, N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,k,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalValueState<K, N, T> createValueState( 			TypeSerializer<N> namespaceSerializer, 			ValueStateDescriptor<T> stateDesc) throws Exception_;1524760045;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> InternalValueState<K, N, T> createValueState(_			TypeSerializer<N> namespaceSerializer,_			ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,internal,value,state,k,n,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1475231926;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1476972861;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1479853012;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1481115912;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1485116541;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> @Override 	public void dispose();1475231926;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName = null__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,null
AbstractKeyedStateBackend -> @Override 	public void dispose();1476972861;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName = null__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,null
AbstractKeyedStateBackend -> @Override 	public void dispose();1479853012;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName = null__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,null
AbstractKeyedStateBackend -> @Override 	public void dispose();1481115912;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName = null__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,null
AbstractKeyedStateBackend -> @Override 	public void dispose();1485116541;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName = null__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,null
AbstractKeyedStateBackend -> @Override 	public void dispose();1485118419;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1485118420;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1487636186;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1487865389;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1487871589;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1489599838;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1489685642;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1490330043;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1490724328;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1493994606;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1493994606;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1494187243;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(this)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,this,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1494363409;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(this)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,this,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1499156246;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(this)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,this,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1506610974;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(this)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,this,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1515177485;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(this)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,this,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1516626397;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1518008821;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1518008896;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1518805332;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1519568061;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1522325571;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1522337739;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1524760045;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1529325710;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1530695903;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1531419503;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1531771917;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1533224436;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1536222236;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1546867949;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1548755874;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1550581511;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public void dispose();1550863001;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.;@Override_	public void dispose() {__		IOUtils.closeQuietly(cancelStreamRegistry)___		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName.clear()__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data;override,public,void,dispose,ioutils,close,quietly,cancel,stream,registry,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,clear
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1485118419;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			throw new IllegalStateException("The serializer of the descriptor has not been initialized!")_ _		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,throw,new,illegal,state,exception,the,serializer,of,the,descriptor,has,not,been,initialized,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1485118420;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			throw new IllegalStateException("The serializer of the descriptor has not been initialized!")_ _		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}_			__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,throw,new,illegal,state,exception,the,serializer,of,the,descriptor,has,not,been,initialized,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1487636186;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			throw new IllegalStateException("The serializer of the descriptor has not been initialized!")_ _		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}_			__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,throw,new,illegal,state,exception,the,serializer,of,the,descriptor,has,not,been,initialized,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1487865389;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			throw new IllegalStateException("The serializer of the descriptor has not been initialized!")_ _		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}_			_			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,throw,new,illegal,state,exception,the,serializer,of,the,descriptor,has,not,been,initialized,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1487871589;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			throw new IllegalStateException("The serializer of the descriptor has not been initialized!")_ _		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}_			_			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,throw,new,illegal,state,exception,the,serializer,of,the,descriptor,has,not,been,initialized,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1489599838;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			throw new IllegalStateException("The serializer of the descriptor has not been initialized!")_ _		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}_			_			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,throw,new,illegal,state,exception,the,serializer,of,the,descriptor,has,not,been,initialized,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1489685642;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			throw new IllegalStateException("The serializer of the descriptor has not been initialized!")_ _		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}_			_			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,throw,new,illegal,state,exception,the,serializer,of,the,descriptor,has,not,been,initialized,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1490330043;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}_			_			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1490724328;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}_			_			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1493994606;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}_			_			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1493994606;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}_			_			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1494187243;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}_			_			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1494363409;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}_			_			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1499156246;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}_			_			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1506610974;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1515177485;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1516626397;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1518008821;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1518008896;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1518805332;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1519568061;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1522325571;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<N> kvState = (InternalKvState<N>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,n,kv,state,internal,kv,state,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1522337739;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<K, ?, ?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,k,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1524760045;@see KeyedStateBackend;@Override_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<K, ?, ?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		_		S state = stateDescriptor.bind(new StateBinder() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC, R> AggregatingState<T, R> createAggregatingState(_					AggregatingStateDescriptor<T, ACC, R> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createAggregatingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <UK, UV> MapState<UK, UV> createMapState(MapStateDescriptor<UK, UV> stateDesc) throws Exception {_				return AbstractKeyedStateBackend.this.createMapState(namespaceSerializer, stateDesc)__			}__		})___		@SuppressWarnings("unchecked")_		InternalKvState<K, N, ?> kvState = (InternalKvState<K, N, ?>) state__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};see,keyed,state,backend;override,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,k,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,s,state,state,descriptor,bind,new,state,binder,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,r,aggregating,state,t,r,create,aggregating,state,aggregating,state,descriptor,t,acc,r,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,aggregating,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,override,public,uk,uv,map,state,uk,uv,create,map,state,map,state,descriptor,uk,uv,state,desc,throws,exception,return,abstract,keyed,state,backend,this,create,map,state,namespace,serializer,state,desc,suppress,warnings,unchecked,internal,kv,state,k,n,kv,state,internal,kv,state,k,n,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1518008896;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try {_			getKeys(stateDescriptor.getName(), namespace)_					.forEach((K key) -> {_						setCurrentKey(key)__						try {_							function.process(_									key,_									getPartitionedState(_											namespace,_											namespaceSerializer,_											stateDescriptor)_							)__						} catch (Throwable e) {_							_							_							throw new RuntimeException(e)__						}_					})__		} catch (RuntimeException e) {_			throw e__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,get,keys,state,descriptor,get,name,namespace,for,each,k,key,set,current,key,key,try,function,process,key,get,partitioned,state,namespace,namespace,serializer,state,descriptor,catch,throwable,e,throw,new,runtime,exception,e,catch,runtime,exception,e,throw,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1518805332;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {_			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(_						key,_						getPartitionedState(_							namespace,_							namespaceSerializer,_							stateDescriptor)_					)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		} catch (RuntimeException e) {_			throw e__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,get,partitioned,state,namespace,namespace,serializer,state,descriptor,catch,throwable,e,throw,new,runtime,exception,e,catch,runtime,exception,e,throw,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1519568061;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {_			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(_						key,_						getPartitionedState(_							namespace,_							namespaceSerializer,_							stateDescriptor)_					)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		} catch (RuntimeException e) {_			throw e__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,get,partitioned,state,namespace,namespace,serializer,state,descriptor,catch,throwable,e,throw,new,runtime,exception,e,catch,runtime,exception,e,throw,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1522325571;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		} catch (RuntimeException e) {_			throw e__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e,catch,runtime,exception,e,throw,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1522337739;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		} catch (RuntimeException e) {_			throw e__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e,catch,runtime,exception,e,throw,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1524760045;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		} catch (RuntimeException e) {_			throw e__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e,catch,runtime,exception,e,throw,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1529325710;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1530695903;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1531419503;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1531771917;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1533224436;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1536222236;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1546867949;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1548755874;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1550581511;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e
AbstractKeyedStateBackend -> @Override 	public <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception;1550863001;@see KeyedStateBackend;@Override_	public <N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception {__		try (Stream<K> keyStream = getKeys(stateDescriptor.getName(), namespace)) {__			final S state = getPartitionedState(_				namespace,_				namespaceSerializer,_				stateDescriptor)___			keyStream.forEach((K key) -> {_				setCurrentKey(key)__				try {_					function.process(key, state)__				} catch (Throwable e) {_					_					_					throw new RuntimeException(e)__				}_			})__		}_	};see,keyed,state,backend;override,public,n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception,try,stream,k,key,stream,get,keys,state,descriptor,get,name,namespace,final,s,state,get,partitioned,state,namespace,namespace,serializer,state,descriptor,key,stream,for,each,k,key,set,current,key,key,try,function,process,key,state,catch,throwable,e,throw,new,runtime,exception,e
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1475231926;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1476972861;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1479853012;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1481115912;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1485116541;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1485118419;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1485118420;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1487636186;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1487865389;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1487871589;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1489599838;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1489685642;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1490330043;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1490724328;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1493994606;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1493994606;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1494187243;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1494363409;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1499156246;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1506610974;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1515177485;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1516626397;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1518008821;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1518008896;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1518805332;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1519568061;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1522325571;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1522337739;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1524760045;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1529325710;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1530695903;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1531419503;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1531771917;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1533224436;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1536222236;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1546867949;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1548755874;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		notifyKeySelected(newKey)__		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,notify,key,selected,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1550581511;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		notifyKeySelected(newKey)__		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,notify,key,selected,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> @Override 	public void setCurrentKey(K newKey);1550863001;@see KeyedStateBackend;@Override_	public void setCurrentKey(K newKey) {_		notifyKeySelected(newKey)__		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};see,keyed,state,backend;override,public,void,set,current,key,k,new,key,notify,key,selected,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1485118419;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1485118420;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1487636186;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1487865389;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1487871589;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1489599838;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1489685642;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1490330043;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1490724328;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1493994606;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1493994606;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1494187243;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1494363409;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1499156246;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1506610974;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1515177485;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1516626397;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1518008821;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1518008896;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1518805332;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1519568061;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalReducingState<N, T> createReducingState( 			TypeSerializer<N> namespaceSerializer, 			ReducingStateDescriptor<T> stateDesc) throws Exception_;1522325571;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalReducingState<N, T> createReducingState(_			TypeSerializer<N> namespaceSerializer,_			ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,reducing,state,n,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings("unchecked") 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1529325710;@see KeyedStateBackend;@Override_	@SuppressWarnings("unchecked")_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<K, ?, ?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		InternalKvState<K, N, ?> kvState = createState(namespaceSerializer, stateDescriptor)__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return (S) kvState__	};see,keyed,state,backend;override,suppress,warnings,unchecked,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,k,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,internal,kv,state,k,n,kv,state,create,state,namespace,serializer,state,descriptor,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,s,kv,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings("unchecked") 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1530695903;@see KeyedStateBackend;@Override_	@SuppressWarnings("unchecked")_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {__		checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new UnsupportedOperationException(_					"State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}__		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(executionConfig)__		}__		InternalKvState<K, ?, ?> existing = keyValueStatesByName.get(stateDescriptor.getName())__		if (existing != null) {_			@SuppressWarnings("unchecked")_			S typedState = (S) existing__			return typedState__		}__		InternalKvState<K, N, ?> kvState = createState(namespaceSerializer, stateDescriptor)__		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return (S) kvState__	};see,keyed,state,backend;override,suppress,warnings,unchecked,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,unsupported,operation,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,internal,kv,state,k,existing,key,value,states,by,name,get,state,descriptor,get,name,if,existing,null,suppress,warnings,unchecked,s,typed,state,s,existing,return,typed,state,internal,kv,state,k,n,kv,state,create,state,namespace,serializer,state,descriptor,key,value,states,by,name,put,state,descriptor,get,name,kv,state,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,s,kv,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings("unchecked") 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1531419503;@see KeyedStateBackend;@Override_	@SuppressWarnings("unchecked")_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {_		checkNotNull(namespaceSerializer, "Namespace serializer")__		checkNotNull(keySerializer, "State key serializer has not been configured in the config. " +_				"This operation cannot use partitioned state.")___		InternalKvState<K, ?, ?> kvState = keyValueStatesByName.get(stateDescriptor.getName())__		if (kvState == null) {_			if (!stateDescriptor.isSerializerInitialized()) {_				stateDescriptor.initializeSerializerUnlessSet(executionConfig)__			}_			kvState = TtlStateFactory.createStateAndWrapWithTtlIfEnabled(_				namespaceSerializer, stateDescriptor, this, ttlTimeProvider)__			keyValueStatesByName.put(stateDescriptor.getName(), kvState)__			publishQueryableStateIfEnabled(stateDescriptor, kvState)__		}_		return (S) kvState__	};see,keyed,state,backend;override,suppress,warnings,unchecked,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,check,not,null,key,serializer,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,internal,kv,state,k,kv,state,key,value,states,by,name,get,state,descriptor,get,name,if,kv,state,null,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,kv,state,ttl,state,factory,create,state,and,wrap,with,ttl,if,enabled,namespace,serializer,state,descriptor,this,ttl,time,provider,key,value,states,by,name,put,state,descriptor,get,name,kv,state,publish,queryable,state,if,enabled,state,descriptor,kv,state,return,s,kv,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings("unchecked") 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1531771917;@see KeyedStateBackend;@Override_	@SuppressWarnings("unchecked")_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {_		checkNotNull(namespaceSerializer, "Namespace serializer")__		checkNotNull(keySerializer, "State key serializer has not been configured in the config. " +_				"This operation cannot use partitioned state.")___		InternalKvState<K, ?, ?> kvState = keyValueStatesByName.get(stateDescriptor.getName())__		if (kvState == null) {_			if (!stateDescriptor.isSerializerInitialized()) {_				stateDescriptor.initializeSerializerUnlessSet(executionConfig)__			}_			kvState = TtlStateFactory.createStateAndWrapWithTtlIfEnabled(_				namespaceSerializer, stateDescriptor, this, ttlTimeProvider)__			keyValueStatesByName.put(stateDescriptor.getName(), kvState)__			publishQueryableStateIfEnabled(stateDescriptor, kvState)__		}_		return (S) kvState__	};see,keyed,state,backend;override,suppress,warnings,unchecked,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,check,not,null,key,serializer,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,internal,kv,state,k,kv,state,key,value,states,by,name,get,state,descriptor,get,name,if,kv,state,null,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,kv,state,ttl,state,factory,create,state,and,wrap,with,ttl,if,enabled,namespace,serializer,state,descriptor,this,ttl,time,provider,key,value,states,by,name,put,state,descriptor,get,name,kv,state,publish,queryable,state,if,enabled,state,descriptor,kv,state,return,s,kv,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings("unchecked") 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1533224436;@see KeyedStateBackend;@Override_	@SuppressWarnings("unchecked")_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {_		checkNotNull(namespaceSerializer, "Namespace serializer")__		checkNotNull(keySerializer, "State key serializer has not been configured in the config. " +_				"This operation cannot use partitioned state.")___		InternalKvState<K, ?, ?> kvState = keyValueStatesByName.get(stateDescriptor.getName())__		if (kvState == null) {_			if (!stateDescriptor.isSerializerInitialized()) {_				stateDescriptor.initializeSerializerUnlessSet(executionConfig)__			}_			kvState = TtlStateFactory.createStateAndWrapWithTtlIfEnabled(_				namespaceSerializer, stateDescriptor, this, ttlTimeProvider)__			keyValueStatesByName.put(stateDescriptor.getName(), kvState)__			publishQueryableStateIfEnabled(stateDescriptor, kvState)__		}_		return (S) kvState__	};see,keyed,state,backend;override,suppress,warnings,unchecked,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,check,not,null,key,serializer,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,internal,kv,state,k,kv,state,key,value,states,by,name,get,state,descriptor,get,name,if,kv,state,null,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,kv,state,ttl,state,factory,create,state,and,wrap,with,ttl,if,enabled,namespace,serializer,state,descriptor,this,ttl,time,provider,key,value,states,by,name,put,state,descriptor,get,name,kv,state,publish,queryable,state,if,enabled,state,descriptor,kv,state,return,s,kv,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings("unchecked") 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1536222236;@see KeyedStateBackend;@Override_	@SuppressWarnings("unchecked")_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {_		checkNotNull(namespaceSerializer, "Namespace serializer")__		checkNotNull(keySerializer, "State key serializer has not been configured in the config. " +_				"This operation cannot use partitioned state.")___		InternalKvState<K, ?, ?> kvState = keyValueStatesByName.get(stateDescriptor.getName())__		if (kvState == null) {_			if (!stateDescriptor.isSerializerInitialized()) {_				stateDescriptor.initializeSerializerUnlessSet(executionConfig)__			}_			kvState = TtlStateFactory.createStateAndWrapWithTtlIfEnabled(_				namespaceSerializer, stateDescriptor, this, ttlTimeProvider)__			keyValueStatesByName.put(stateDescriptor.getName(), kvState)__			publishQueryableStateIfEnabled(stateDescriptor, kvState)__		}_		return (S) kvState__	};see,keyed,state,backend;override,suppress,warnings,unchecked,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,check,not,null,key,serializer,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,internal,kv,state,k,kv,state,key,value,states,by,name,get,state,descriptor,get,name,if,kv,state,null,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,kv,state,ttl,state,factory,create,state,and,wrap,with,ttl,if,enabled,namespace,serializer,state,descriptor,this,ttl,time,provider,key,value,states,by,name,put,state,descriptor,get,name,kv,state,publish,queryable,state,if,enabled,state,descriptor,kv,state,return,s,kv,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings("unchecked") 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1546867949;@see KeyedStateBackend;@Override_	@SuppressWarnings("unchecked")_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {_		checkNotNull(namespaceSerializer, "Namespace serializer")__		checkNotNull(keySerializerProvider, "State key serializer has not been configured in the config. " +_				"This operation cannot use partitioned state.")___		InternalKvState<K, ?, ?> kvState = keyValueStatesByName.get(stateDescriptor.getName())__		if (kvState == null) {_			if (!stateDescriptor.isSerializerInitialized()) {_				stateDescriptor.initializeSerializerUnlessSet(executionConfig)__			}_			kvState = TtlStateFactory.createStateAndWrapWithTtlIfEnabled(_				namespaceSerializer, stateDescriptor, this, ttlTimeProvider)__			keyValueStatesByName.put(stateDescriptor.getName(), kvState)__			publishQueryableStateIfEnabled(stateDescriptor, kvState)__		}_		return (S) kvState__	};see,keyed,state,backend;override,suppress,warnings,unchecked,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,check,not,null,key,serializer,provider,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,internal,kv,state,k,kv,state,key,value,states,by,name,get,state,descriptor,get,name,if,kv,state,null,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,kv,state,ttl,state,factory,create,state,and,wrap,with,ttl,if,enabled,namespace,serializer,state,descriptor,this,ttl,time,provider,key,value,states,by,name,put,state,descriptor,get,name,kv,state,publish,queryable,state,if,enabled,state,descriptor,kv,state,return,s,kv,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings("unchecked") 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1548755874;@see KeyedStateBackend;@Override_	@SuppressWarnings("unchecked")_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {_		checkNotNull(namespaceSerializer, "Namespace serializer")__		checkNotNull(keySerializerProvider, "State key serializer has not been configured in the config. " +_				"This operation cannot use partitioned state.")___		InternalKvState<K, ?, ?> kvState = keyValueStatesByName.get(stateDescriptor.getName())__		if (kvState == null) {_			if (!stateDescriptor.isSerializerInitialized()) {_				stateDescriptor.initializeSerializerUnlessSet(executionConfig)__			}_			kvState = TtlStateFactory.createStateAndWrapWithTtlIfEnabled(_				namespaceSerializer, stateDescriptor, this, ttlTimeProvider)__			keyValueStatesByName.put(stateDescriptor.getName(), kvState)__			publishQueryableStateIfEnabled(stateDescriptor, kvState)__		}_		return (S) kvState__	};see,keyed,state,backend;override,suppress,warnings,unchecked,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,check,not,null,key,serializer,provider,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,internal,kv,state,k,kv,state,key,value,states,by,name,get,state,descriptor,get,name,if,kv,state,null,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,kv,state,ttl,state,factory,create,state,and,wrap,with,ttl,if,enabled,namespace,serializer,state,descriptor,this,ttl,time,provider,key,value,states,by,name,put,state,descriptor,get,name,kv,state,publish,queryable,state,if,enabled,state,descriptor,kv,state,return,s,kv,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings("unchecked") 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1550581511;@see KeyedStateBackend;@Override_	@SuppressWarnings("unchecked")_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {_		checkNotNull(namespaceSerializer, "Namespace serializer")__		checkNotNull(keySerializerProvider, "State key serializer has not been configured in the config. " +_				"This operation cannot use partitioned state.")___		InternalKvState<K, ?, ?> kvState = keyValueStatesByName.get(stateDescriptor.getName())__		if (kvState == null) {_			if (!stateDescriptor.isSerializerInitialized()) {_				stateDescriptor.initializeSerializerUnlessSet(executionConfig)__			}_			kvState = TtlStateFactory.createStateAndWrapWithTtlIfEnabled(_				namespaceSerializer, stateDescriptor, this, ttlTimeProvider)__			keyValueStatesByName.put(stateDescriptor.getName(), kvState)__			publishQueryableStateIfEnabled(stateDescriptor, kvState)__		}_		return (S) kvState__	};see,keyed,state,backend;override,suppress,warnings,unchecked,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,check,not,null,key,serializer,provider,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,internal,kv,state,k,kv,state,key,value,states,by,name,get,state,descriptor,get,name,if,kv,state,null,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,kv,state,ttl,state,factory,create,state,and,wrap,with,ttl,if,enabled,namespace,serializer,state,descriptor,this,ttl,time,provider,key,value,states,by,name,put,state,descriptor,get,name,kv,state,publish,queryable,state,if,enabled,state,descriptor,kv,state,return,s,kv,state
AbstractKeyedStateBackend -> @Override 	@SuppressWarnings("unchecked") 	public <N, S extends State, V> S getOrCreateKeyedState( 			final TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, V> stateDescriptor) throws Exception;1550863001;@see KeyedStateBackend;@Override_	@SuppressWarnings("unchecked")_	public <N, S extends State, V> S getOrCreateKeyedState(_			final TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, V> stateDescriptor) throws Exception {_		checkNotNull(namespaceSerializer, "Namespace serializer")__		checkNotNull(keySerializerProvider, "State key serializer has not been configured in the config. " +_				"This operation cannot use partitioned state.")___		InternalKvState<K, ?, ?> kvState = keyValueStatesByName.get(stateDescriptor.getName())__		if (kvState == null) {_			if (!stateDescriptor.isSerializerInitialized()) {_				stateDescriptor.initializeSerializerUnlessSet(executionConfig)__			}_			kvState = TtlStateFactory.createStateAndWrapWithTtlIfEnabled(_				namespaceSerializer, stateDescriptor, this, ttlTimeProvider)__			keyValueStatesByName.put(stateDescriptor.getName(), kvState)__			publishQueryableStateIfEnabled(stateDescriptor, kvState)__		}_		return (S) kvState__	};see,keyed,state,backend;override,suppress,warnings,unchecked,public,n,s,extends,state,v,s,get,or,create,keyed,state,final,type,serializer,n,namespace,serializer,state,descriptor,s,v,state,descriptor,throws,exception,check,not,null,namespace,serializer,namespace,serializer,check,not,null,key,serializer,provider,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,internal,kv,state,k,kv,state,key,value,states,by,name,get,state,descriptor,get,name,if,kv,state,null,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,execution,config,kv,state,ttl,state,factory,create,state,and,wrap,with,ttl,if,enabled,namespace,serializer,state,descriptor,this,ttl,time,provider,key,value,states,by,name,put,state,descriptor,get,name,kv,state,publish,queryable,state,if,enabled,state,descriptor,kv,state,return,s,kv,state
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<K, N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1522337739;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<K, N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,k,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> protected abstract <N, T> InternalListState<K, N, T> createListState( 			TypeSerializer<N> namespaceSerializer, 			ListStateDescriptor<T> stateDesc) throws Exception_;1524760045;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> InternalListState<K, N, T> createListState(_			TypeSerializer<N> namespaceSerializer,_			ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,internal,list,state,k,n,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractKeyedStateBackend -> @Deprecated 	protected abstract <N, T, ACC> InternalFoldingState<K, N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1522337739;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state__@deprecated will be removed in a future version;@Deprecated_	protected abstract <N, T, ACC> InternalFoldingState<K, N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state,deprecated,will,be,removed,in,a,future,version;deprecated,protected,abstract,n,t,acc,internal,folding,state,k,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractKeyedStateBackend -> @Deprecated 	protected abstract <N, T, ACC> InternalFoldingState<K, N, T, ACC> createFoldingState( 			TypeSerializer<N> namespaceSerializer, 			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1524760045;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state__@deprecated will be removed in a future version;@Deprecated_	protected abstract <N, T, ACC> InternalFoldingState<K, N, T, ACC> createFoldingState(_			TypeSerializer<N> namespaceSerializer,_			FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state,deprecated,will,be,removed,in,a,future,version;deprecated,protected,abstract,n,t,acc,internal,folding,state,k,n,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
