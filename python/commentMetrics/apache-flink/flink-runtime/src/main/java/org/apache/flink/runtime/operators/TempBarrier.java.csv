commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;// -------------------------------------------------------------------------------------------- public void startReading() {     this.tempWriter.start(). }
true;public;0;17;/**  * This method resets the input!  *  * @see org.apache.flink.runtime.operators.util.CloseableInputProvider#getIterator()  */ ;/**  * This method resets the input!  *  * @see org.apache.flink.runtime.operators.util.CloseableInputProvider#getIterator()  */ @Override public MutableObjectIterator<T> getIterator() throws InterruptedException, IOException {     synchronized (this.lock) {         while (this.exception == null && !this.writingDone) {             this.lock.wait(5000).         }     }     if (this.exception != null) {         throw new RuntimeException("An error occurred creating the temp table.", this.exception).     } else if (this.writingDone) {         final DataInputView in = this.buffer.flip().         return new InputViewIterator<T>(in, this.serializer).     } else {         return null.     } }
false;public;0;22;;@Override public void close() throws IOException {     synchronized (this.lock) {         if (this.closed) {             return.         }         if (this.exception == null) {             this.exception = new Exception("The dam has been closed.").         }         this.lock.notifyAll().     }     try {         this.tempWriter.shutdown().         this.tempWriter.join().     } catch (InterruptedException iex) {         throw new IOException("Interrupted").     }     this.memManager.release(this.buffer.close()).     this.memManager.release(this.memory). }
false;private;1;9;;private void setException(Throwable t) {     synchronized (this.lock) {         this.exception = t.         this.lock.notifyAll().     }     try {         close().     } catch (Throwable ex) {     } }
false;private;0;6;;private void writingDone() throws IOException {     synchronized (this.lock) {         this.writingDone = true.         this.lock.notifyAll().     } }
false;public;0;19;;@Override public void run() {     final MutableObjectIterator<T> input = this.input.     final TypeSerializer<T> serializer = this.serializer.     final SpillingBuffer buffer = this.buffer.     try {         T record = serializer.createInstance().         while (this.running && ((record = input.next(record)) != null)) {             serializer.serialize(record, buffer).         }         TempBarrier.this.writingDone().     } catch (Throwable t) {         TempBarrier.this.setException(t).     } }
false;public;0;4;;public void shutdown() {     this.running = false.     this.interrupt(). }
