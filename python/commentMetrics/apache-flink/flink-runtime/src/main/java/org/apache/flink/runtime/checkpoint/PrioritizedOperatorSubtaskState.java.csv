# id;timestamp;commentText;codeText;commentWords;codeWords
PrioritizedOperatorSubtaskState -> public static PrioritizedOperatorSubtaskState emptyNotRestored();1519568061;Returns an empty {@link PrioritizedOperatorSubtaskState} singleton for an empty, not-restored operator state.;public static PrioritizedOperatorSubtaskState emptyNotRestored() {_		return EMPTY_NON_RESTORED_INSTANCE__	};returns,an,empty,link,prioritized,operator,subtask,state,singleton,for,an,empty,not,restored,operator,state;public,static,prioritized,operator,subtask,state,empty,not,restored,return
PrioritizedOperatorSubtaskState -> public static PrioritizedOperatorSubtaskState emptyNotRestored();1519741691;Returns an empty {@link PrioritizedOperatorSubtaskState} singleton for an empty, not-restored operator state.;public static PrioritizedOperatorSubtaskState emptyNotRestored() {_		return EMPTY_NON_RESTORED_INSTANCE__	};returns,an,empty,link,prioritized,operator,subtask,state,singleton,for,an,empty,not,restored,operator,state;public,static,prioritized,operator,subtask,state,empty,not,restored,return
PrioritizedOperatorSubtaskState -> public static PrioritizedOperatorSubtaskState emptyNotRestored();1532265095;Returns an empty {@link PrioritizedOperatorSubtaskState} singleton for an empty, not-restored operator state.;public static PrioritizedOperatorSubtaskState emptyNotRestored() {_		return EMPTY_NON_RESTORED_INSTANCE__	};returns,an,empty,link,prioritized,operator,subtask,state,singleton,for,an,empty,not,restored,operator,state;public,static,prioritized,operator,subtask,state,empty,not,restored,return
PrioritizedOperatorSubtaskState -> @Nonnull 	public List<StateObjectCollection<KeyedStateHandle>> getPrioritizedRawKeyedState();1519741691;Returns an immutable list with all alternative snapshots to restore the raw keyed state, in the order in which we_should attempt to restore.;@Nonnull_	public List<StateObjectCollection<KeyedStateHandle>> getPrioritizedRawKeyedState() {_		return prioritizedRawKeyedState__	};returns,an,immutable,list,with,all,alternative,snapshots,to,restore,the,raw,keyed,state,in,the,order,in,which,we,should,attempt,to,restore;nonnull,public,list,state,object,collection,keyed,state,handle,get,prioritized,raw,keyed,state,return,prioritized,raw,keyed,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public List<StateObjectCollection<KeyedStateHandle>> getPrioritizedRawKeyedState();1532265095;Returns an immutable list with all alternative snapshots to restore the raw keyed state, in the order in which we_should attempt to restore.;@Nonnull_	public List<StateObjectCollection<KeyedStateHandle>> getPrioritizedRawKeyedState() {_		return prioritizedRawKeyedState__	};returns,an,immutable,list,with,all,alternative,snapshots,to,restore,the,raw,keyed,state,in,the,order,in,which,we,should,attempt,to,restore;nonnull,public,list,state,object,collection,keyed,state,handle,get,prioritized,raw,keyed,state,return,prioritized,raw,keyed,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public List<StateObjectCollection<OperatorStateHandle>> getPrioritizedRawOperatorState();1519741691;Returns an immutable list with all alternative snapshots to restore the raw operator state, in the order in_which we should attempt to restore.;@Nonnull_	public List<StateObjectCollection<OperatorStateHandle>> getPrioritizedRawOperatorState() {_		return prioritizedRawOperatorState__	};returns,an,immutable,list,with,all,alternative,snapshots,to,restore,the,raw,operator,state,in,the,order,in,which,we,should,attempt,to,restore;nonnull,public,list,state,object,collection,operator,state,handle,get,prioritized,raw,operator,state,return,prioritized,raw,operator,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public List<StateObjectCollection<OperatorStateHandle>> getPrioritizedRawOperatorState();1532265095;Returns an immutable list with all alternative snapshots to restore the raw operator state, in the order in_which we should attempt to restore.;@Nonnull_	public List<StateObjectCollection<OperatorStateHandle>> getPrioritizedRawOperatorState() {_		return prioritizedRawOperatorState__	};returns,an,immutable,list,with,all,alternative,snapshots,to,restore,the,raw,operator,state,in,the,order,in,which,we,should,attempt,to,restore;nonnull,public,list,state,object,collection,operator,state,handle,get,prioritized,raw,operator,state,return,prioritized,raw,operator,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public List<StateObjectCollection<OperatorStateHandle>> getPrioritizedManagedOperatorState();1519741691;Returns an immutable list with all alternative snapshots to restore the managed operator state, in the order in_which we should attempt to restore.;@Nonnull_	public List<StateObjectCollection<OperatorStateHandle>> getPrioritizedManagedOperatorState() {_		return prioritizedManagedOperatorState__	};returns,an,immutable,list,with,all,alternative,snapshots,to,restore,the,managed,operator,state,in,the,order,in,which,we,should,attempt,to,restore;nonnull,public,list,state,object,collection,operator,state,handle,get,prioritized,managed,operator,state,return,prioritized,managed,operator,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public List<StateObjectCollection<OperatorStateHandle>> getPrioritizedManagedOperatorState();1532265095;Returns an immutable list with all alternative snapshots to restore the managed operator state, in the order in_which we should attempt to restore.;@Nonnull_	public List<StateObjectCollection<OperatorStateHandle>> getPrioritizedManagedOperatorState() {_		return prioritizedManagedOperatorState__	};returns,an,immutable,list,with,all,alternative,snapshots,to,restore,the,managed,operator,state,in,the,order,in,which,we,should,attempt,to,restore;nonnull,public,list,state,object,collection,operator,state,handle,get,prioritized,managed,operator,state,return,prioritized,managed,operator,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public StateObjectCollection<KeyedStateHandle> getJobManagerRawKeyedState();1519568061;Returns the raw keyed state from the job manager, which represents the ground truth about what this state_should represent. This is the alternative with lowest priority.;@Nonnull_	public StateObjectCollection<KeyedStateHandle> getJobManagerRawKeyedState() {_		return lastElement(prioritizedRawKeyedState)__	};returns,the,raw,keyed,state,from,the,job,manager,which,represents,the,ground,truth,about,what,this,state,should,represent,this,is,the,alternative,with,lowest,priority;nonnull,public,state,object,collection,keyed,state,handle,get,job,manager,raw,keyed,state,return,last,element,prioritized,raw,keyed,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public StateObjectCollection<KeyedStateHandle> getJobManagerRawKeyedState();1519741691;Returns the raw keyed state from the job manager, which represents the ground truth about what this state_should represent. This is the alternative with lowest priority.;@Nonnull_	public StateObjectCollection<KeyedStateHandle> getJobManagerRawKeyedState() {_		return lastElement(prioritizedRawKeyedState)__	};returns,the,raw,keyed,state,from,the,job,manager,which,represents,the,ground,truth,about,what,this,state,should,represent,this,is,the,alternative,with,lowest,priority;nonnull,public,state,object,collection,keyed,state,handle,get,job,manager,raw,keyed,state,return,last,element,prioritized,raw,keyed,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public StateObjectCollection<KeyedStateHandle> getJobManagerRawKeyedState();1532265095;Returns the raw keyed state from the job manager, which represents the ground truth about what this state_should represent. This is the alternative with lowest priority.;@Nonnull_	public StateObjectCollection<KeyedStateHandle> getJobManagerRawKeyedState() {_		return lastElement(prioritizedRawKeyedState)__	};returns,the,raw,keyed,state,from,the,job,manager,which,represents,the,ground,truth,about,what,this,state,should,represent,this,is,the,alternative,with,lowest,priority;nonnull,public,state,object,collection,keyed,state,handle,get,job,manager,raw,keyed,state,return,last,element,prioritized,raw,keyed,state
PrioritizedOperatorSubtaskState -> public boolean isRestored();1519568061;Returns true if this was created for a restored operator, false otherwise. Restored operators are operators that_participated in a previous checkpoint, even if they did not emit any state snapshots.;public boolean isRestored() {_		return restored__	};returns,true,if,this,was,created,for,a,restored,operator,false,otherwise,restored,operators,are,operators,that,participated,in,a,previous,checkpoint,even,if,they,did,not,emit,any,state,snapshots;public,boolean,is,restored,return,restored
PrioritizedOperatorSubtaskState -> public boolean isRestored();1519741691;Returns true if this was created for a restored operator, false otherwise. Restored operators are operators that_participated in a previous checkpoint, even if they did not emit any state snapshots.;public boolean isRestored() {_		return restored__	};returns,true,if,this,was,created,for,a,restored,operator,false,otherwise,restored,operators,are,operators,that,participated,in,a,previous,checkpoint,even,if,they,did,not,emit,any,state,snapshots;public,boolean,is,restored,return,restored
PrioritizedOperatorSubtaskState -> public boolean isRestored();1532265095;Returns true if this was created for a restored operator, false otherwise. Restored operators are operators that_participated in a previous checkpoint, even if they did not emit any state snapshots.;public boolean isRestored() {_		return restored__	};returns,true,if,this,was,created,for,a,restored,operator,false,otherwise,restored,operators,are,operators,that,participated,in,a,previous,checkpoint,even,if,they,did,not,emit,any,state,snapshots;public,boolean,is,restored,return,restored
PrioritizedOperatorSubtaskState -> @Nonnull 	public List<StateObjectCollection<KeyedStateHandle>> getPrioritizedManagedKeyedState();1519741691;Returns an immutable list with all alternative snapshots to restore the managed keyed state, in the order in_which we should attempt to restore.;@Nonnull_	public List<StateObjectCollection<KeyedStateHandle>> getPrioritizedManagedKeyedState() {_		return prioritizedManagedKeyedState__	};returns,an,immutable,list,with,all,alternative,snapshots,to,restore,the,managed,keyed,state,in,the,order,in,which,we,should,attempt,to,restore;nonnull,public,list,state,object,collection,keyed,state,handle,get,prioritized,managed,keyed,state,return,prioritized,managed,keyed,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public List<StateObjectCollection<KeyedStateHandle>> getPrioritizedManagedKeyedState();1532265095;Returns an immutable list with all alternative snapshots to restore the managed keyed state, in the order in_which we should attempt to restore.;@Nonnull_	public List<StateObjectCollection<KeyedStateHandle>> getPrioritizedManagedKeyedState() {_		return prioritizedManagedKeyedState__	};returns,an,immutable,list,with,all,alternative,snapshots,to,restore,the,managed,keyed,state,in,the,order,in,which,we,should,attempt,to,restore;nonnull,public,list,state,object,collection,keyed,state,handle,get,prioritized,managed,keyed,state,return,prioritized,managed,keyed,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public StateObjectCollection<OperatorStateHandle> getJobManagerManagedOperatorState();1519568061;Returns the managed operator state from the job manager, which represents the ground truth about what this state_should represent. This is the alternative with lowest priority.;@Nonnull_	public StateObjectCollection<OperatorStateHandle> getJobManagerManagedOperatorState() {_		return lastElement(prioritizedManagedOperatorState)__	};returns,the,managed,operator,state,from,the,job,manager,which,represents,the,ground,truth,about,what,this,state,should,represent,this,is,the,alternative,with,lowest,priority;nonnull,public,state,object,collection,operator,state,handle,get,job,manager,managed,operator,state,return,last,element,prioritized,managed,operator,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public StateObjectCollection<OperatorStateHandle> getJobManagerManagedOperatorState();1519741691;Returns the managed operator state from the job manager, which represents the ground truth about what this state_should represent. This is the alternative with lowest priority.;@Nonnull_	public StateObjectCollection<OperatorStateHandle> getJobManagerManagedOperatorState() {_		return lastElement(prioritizedManagedOperatorState)__	};returns,the,managed,operator,state,from,the,job,manager,which,represents,the,ground,truth,about,what,this,state,should,represent,this,is,the,alternative,with,lowest,priority;nonnull,public,state,object,collection,operator,state,handle,get,job,manager,managed,operator,state,return,last,element,prioritized,managed,operator,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public StateObjectCollection<OperatorStateHandle> getJobManagerManagedOperatorState();1532265095;Returns the managed operator state from the job manager, which represents the ground truth about what this state_should represent. This is the alternative with lowest priority.;@Nonnull_	public StateObjectCollection<OperatorStateHandle> getJobManagerManagedOperatorState() {_		return lastElement(prioritizedManagedOperatorState)__	};returns,the,managed,operator,state,from,the,job,manager,which,represents,the,ground,truth,about,what,this,state,should,represent,this,is,the,alternative,with,lowest,priority;nonnull,public,state,object,collection,operator,state,handle,get,job,manager,managed,operator,state,return,last,element,prioritized,managed,operator,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public StateObjectCollection<OperatorStateHandle> getJobManagerRawOperatorState();1519568061;Returns the raw operator state from the job manager, which represents the ground truth about what this state_should represent. This is the alternative with lowest priority.;@Nonnull_	public StateObjectCollection<OperatorStateHandle> getJobManagerRawOperatorState() {_		return lastElement(prioritizedRawOperatorState)__	};returns,the,raw,operator,state,from,the,job,manager,which,represents,the,ground,truth,about,what,this,state,should,represent,this,is,the,alternative,with,lowest,priority;nonnull,public,state,object,collection,operator,state,handle,get,job,manager,raw,operator,state,return,last,element,prioritized,raw,operator,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public StateObjectCollection<OperatorStateHandle> getJobManagerRawOperatorState();1519741691;Returns the raw operator state from the job manager, which represents the ground truth about what this state_should represent. This is the alternative with lowest priority.;@Nonnull_	public StateObjectCollection<OperatorStateHandle> getJobManagerRawOperatorState() {_		return lastElement(prioritizedRawOperatorState)__	};returns,the,raw,operator,state,from,the,job,manager,which,represents,the,ground,truth,about,what,this,state,should,represent,this,is,the,alternative,with,lowest,priority;nonnull,public,state,object,collection,operator,state,handle,get,job,manager,raw,operator,state,return,last,element,prioritized,raw,operator,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public StateObjectCollection<OperatorStateHandle> getJobManagerRawOperatorState();1532265095;Returns the raw operator state from the job manager, which represents the ground truth about what this state_should represent. This is the alternative with lowest priority.;@Nonnull_	public StateObjectCollection<OperatorStateHandle> getJobManagerRawOperatorState() {_		return lastElement(prioritizedRawOperatorState)__	};returns,the,raw,operator,state,from,the,job,manager,which,represents,the,ground,truth,about,what,this,state,should,represent,this,is,the,alternative,with,lowest,priority;nonnull,public,state,object,collection,operator,state,handle,get,job,manager,raw,operator,state,return,last,element,prioritized,raw,operator,state
PrioritizedOperatorSubtaskState -> Builder -> protected <T extends StateObject> List<StateObjectCollection<T>> resolvePrioritizedAlternatives( 			StateObjectCollection<T> jobManagerState, 			List<StateObjectCollection<T>> alternativesByPriority, 			BiFunction<T, T, Boolean> approveFun);1519568061;This helper method resolves the dependencies between the ground truth of the operator state obtained from the_job manager and potential alternatives for recovery, e.g. from a task-local source.;protected <T extends StateObject> List<StateObjectCollection<T>> resolvePrioritizedAlternatives(_			StateObjectCollection<T> jobManagerState,_			List<StateObjectCollection<T>> alternativesByPriority,_			BiFunction<T, T, Boolean> approveFun) {__			_			_			_			if (alternativesByPriority == null_				|| alternativesByPriority.isEmpty()_				|| !jobManagerState.hasState()_				|| jobManagerState.size() != 1) {__				return Collections.singletonList(jobManagerState)__			}__			_			T reference = jobManagerState.iterator().next()___			_			List<StateObjectCollection<T>> approved =_				new ArrayList<>(1 + alternativesByPriority.size())___			for (StateObjectCollection<T> alternative : alternativesByPriority) {__				_				_				if (alternative != null_					&& alternative.hasState()_					&& alternative.size() == 1_					&& approveFun.apply(reference, alternative.iterator().next())) {__					approved.add(alternative)__				}_			}__			_			approved.add(jobManagerState)__			return Collections.unmodifiableList(approved)__		};this,helper,method,resolves,the,dependencies,between,the,ground,truth,of,the,operator,state,obtained,from,the,job,manager,and,potential,alternatives,for,recovery,e,g,from,a,task,local,source;protected,t,extends,state,object,list,state,object,collection,t,resolve,prioritized,alternatives,state,object,collection,t,job,manager,state,list,state,object,collection,t,alternatives,by,priority,bi,function,t,t,boolean,approve,fun,if,alternatives,by,priority,null,alternatives,by,priority,is,empty,job,manager,state,has,state,job,manager,state,size,1,return,collections,singleton,list,job,manager,state,t,reference,job,manager,state,iterator,next,list,state,object,collection,t,approved,new,array,list,1,alternatives,by,priority,size,for,state,object,collection,t,alternative,alternatives,by,priority,if,alternative,null,alternative,has,state,alternative,size,1,approve,fun,apply,reference,alternative,iterator,next,approved,add,alternative,approved,add,job,manager,state,return,collections,unmodifiable,list,approved
PrioritizedOperatorSubtaskState -> Builder -> protected <T extends StateObject> List<StateObjectCollection<T>> resolvePrioritizedAlternatives( 			StateObjectCollection<T> jobManagerState, 			List<StateObjectCollection<T>> alternativesByPriority, 			BiFunction<T, T, Boolean> approveFun);1519741691;This helper method resolves the dependencies between the ground truth of the operator state obtained from the_job manager and potential alternatives for recovery, e.g. from a task-local source.;protected <T extends StateObject> List<StateObjectCollection<T>> resolvePrioritizedAlternatives(_			StateObjectCollection<T> jobManagerState,_			List<StateObjectCollection<T>> alternativesByPriority,_			BiFunction<T, T, Boolean> approveFun) {__			_			_			_			if (alternativesByPriority == null_				|| alternativesByPriority.isEmpty()_				|| !jobManagerState.hasState()_				|| jobManagerState.size() != 1) {__				return Collections.singletonList(jobManagerState)__			}__			_			T reference = jobManagerState.iterator().next()___			_			List<StateObjectCollection<T>> approved =_				new ArrayList<>(1 + alternativesByPriority.size())___			for (StateObjectCollection<T> alternative : alternativesByPriority) {__				_				_				if (alternative != null_					&& alternative.hasState()_					&& alternative.size() == 1_					&& approveFun.apply(reference, alternative.iterator().next())) {__					approved.add(alternative)__				}_			}__			_			approved.add(jobManagerState)__			return Collections.unmodifiableList(approved)__		};this,helper,method,resolves,the,dependencies,between,the,ground,truth,of,the,operator,state,obtained,from,the,job,manager,and,potential,alternatives,for,recovery,e,g,from,a,task,local,source;protected,t,extends,state,object,list,state,object,collection,t,resolve,prioritized,alternatives,state,object,collection,t,job,manager,state,list,state,object,collection,t,alternatives,by,priority,bi,function,t,t,boolean,approve,fun,if,alternatives,by,priority,null,alternatives,by,priority,is,empty,job,manager,state,has,state,job,manager,state,size,1,return,collections,singleton,list,job,manager,state,t,reference,job,manager,state,iterator,next,list,state,object,collection,t,approved,new,array,list,1,alternatives,by,priority,size,for,state,object,collection,t,alternative,alternatives,by,priority,if,alternative,null,alternative,has,state,alternative,size,1,approve,fun,apply,reference,alternative,iterator,next,approved,add,alternative,approved,add,job,manager,state,return,collections,unmodifiable,list,approved
PrioritizedOperatorSubtaskState -> Builder -> protected <T extends StateObject> List<StateObjectCollection<T>> resolvePrioritizedAlternatives( 			StateObjectCollection<T> jobManagerState, 			List<StateObjectCollection<T>> alternativesByPriority, 			BiFunction<T, T, Boolean> approveFun);1532265095;This helper method resolves the dependencies between the ground truth of the operator state obtained from the_job manager and potential alternatives for recovery, e.g. from a task-local source.;protected <T extends StateObject> List<StateObjectCollection<T>> resolvePrioritizedAlternatives(_			StateObjectCollection<T> jobManagerState,_			List<StateObjectCollection<T>> alternativesByPriority,_			BiFunction<T, T, Boolean> approveFun) {__			_			_			_			if (alternativesByPriority == null_				|| alternativesByPriority.isEmpty()_				|| !jobManagerState.hasState()_				|| jobManagerState.size() != 1) {__				return Collections.singletonList(jobManagerState)__			}__			_			T reference = jobManagerState.iterator().next()___			_			List<StateObjectCollection<T>> approved =_				new ArrayList<>(1 + alternativesByPriority.size())___			for (StateObjectCollection<T> alternative : alternativesByPriority) {__				_				_				if (alternative != null_					&& alternative.hasState()_					&& alternative.size() == 1_					&& BooleanUtils.isTrue(approveFun.apply(reference, alternative.iterator().next()))) {__					approved.add(alternative)__				}_			}__			_			approved.add(jobManagerState)__			return Collections.unmodifiableList(approved)__		};this,helper,method,resolves,the,dependencies,between,the,ground,truth,of,the,operator,state,obtained,from,the,job,manager,and,potential,alternatives,for,recovery,e,g,from,a,task,local,source;protected,t,extends,state,object,list,state,object,collection,t,resolve,prioritized,alternatives,state,object,collection,t,job,manager,state,list,state,object,collection,t,alternatives,by,priority,bi,function,t,t,boolean,approve,fun,if,alternatives,by,priority,null,alternatives,by,priority,is,empty,job,manager,state,has,state,job,manager,state,size,1,return,collections,singleton,list,job,manager,state,t,reference,job,manager,state,iterator,next,list,state,object,collection,t,approved,new,array,list,1,alternatives,by,priority,size,for,state,object,collection,t,alternative,alternatives,by,priority,if,alternative,null,alternative,has,state,alternative,size,1,boolean,utils,is,true,approve,fun,apply,reference,alternative,iterator,next,approved,add,alternative,approved,add,job,manager,state,return,collections,unmodifiable,list,approved
PrioritizedOperatorSubtaskState -> @Nonnull 	public StateObjectCollection<KeyedStateHandle> getJobManagerManagedKeyedState();1519568061;Returns the managed keyed state from the job manager, which represents the ground truth about what this state_should represent. This is the alternative with lowest priority.;@Nonnull_	public StateObjectCollection<KeyedStateHandle> getJobManagerManagedKeyedState() {_		return lastElement(prioritizedManagedKeyedState)__	};returns,the,managed,keyed,state,from,the,job,manager,which,represents,the,ground,truth,about,what,this,state,should,represent,this,is,the,alternative,with,lowest,priority;nonnull,public,state,object,collection,keyed,state,handle,get,job,manager,managed,keyed,state,return,last,element,prioritized,managed,keyed,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public StateObjectCollection<KeyedStateHandle> getJobManagerManagedKeyedState();1519741691;Returns the managed keyed state from the job manager, which represents the ground truth about what this state_should represent. This is the alternative with lowest priority.;@Nonnull_	public StateObjectCollection<KeyedStateHandle> getJobManagerManagedKeyedState() {_		return lastElement(prioritizedManagedKeyedState)__	};returns,the,managed,keyed,state,from,the,job,manager,which,represents,the,ground,truth,about,what,this,state,should,represent,this,is,the,alternative,with,lowest,priority;nonnull,public,state,object,collection,keyed,state,handle,get,job,manager,managed,keyed,state,return,last,element,prioritized,managed,keyed,state
PrioritizedOperatorSubtaskState -> @Nonnull 	public StateObjectCollection<KeyedStateHandle> getJobManagerManagedKeyedState();1532265095;Returns the managed keyed state from the job manager, which represents the ground truth about what this state_should represent. This is the alternative with lowest priority.;@Nonnull_	public StateObjectCollection<KeyedStateHandle> getJobManagerManagedKeyedState() {_		return lastElement(prioritizedManagedKeyedState)__	};returns,the,managed,keyed,state,from,the,job,manager,which,represents,the,ground,truth,about,what,this,state,should,represent,this,is,the,alternative,with,lowest,priority;nonnull,public,state,object,collection,keyed,state,handle,get,job,manager,managed,keyed,state,return,last,element,prioritized,managed,keyed,state
