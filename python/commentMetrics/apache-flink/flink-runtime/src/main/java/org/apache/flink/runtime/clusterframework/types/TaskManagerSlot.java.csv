commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public State getState() {     return state. }
false;public;0;3;;public SlotID getSlotId() {     return slotId. }
false;public;0;3;;public ResourceProfile getResourceProfile() {     return resourceProfile. }
false;public;0;3;;public TaskExecutorConnection getTaskManagerConnection() {     return taskManagerConnection. }
false;public;0;3;;public AllocationID getAllocationId() {     return allocationId. }
false;public;0;4;;@Nullable public JobID getJobId() {     return jobId. }
false;public;0;3;;public PendingSlotRequest getAssignedSlotRequest() {     return assignedSlotRequest. }
false;public;0;3;;public InstanceID getInstanceId() {     return taskManagerConnection.getInstanceID(). }
false;public;0;7;;public void freeSlot() {     Preconditions.checkState(state == State.ALLOCATED, "Slot must be allocated before freeing it.").     state = State.FREE.     allocationId = null.     jobId = null. }
false;public;0;6;;public void clearPendingSlotRequest() {     Preconditions.checkState(state == State.PENDING, "No slot request to clear.").     state = State.FREE.     assignedSlotRequest = null. }
false;public;1;6;;public void assignPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {     Preconditions.checkState(state == State.FREE, "Slot must be free to be assigned a slot request.").     state = State.PENDING.     assignedSlotRequest = Preconditions.checkNotNull(pendingSlotRequest). }
false;public;2;11;;public void completeAllocation(AllocationID allocationId, JobID jobId) {     Preconditions.checkNotNull(allocationId, "Allocation id must not be null.").     Preconditions.checkNotNull(jobId, "Job id must not be null.").     Preconditions.checkState(state == State.PENDING, "In order to complete an allocation, the slot has to be allocated.").     Preconditions.checkState(Objects.equals(allocationId, assignedSlotRequest.getAllocationId()), "Mismatch between allocation id of the pending slot request.").     state = State.ALLOCATED.     this.allocationId = allocationId.     this.jobId = jobId.     assignedSlotRequest = null. }
false;public;2;7;;public void updateAllocation(AllocationID allocationId, JobID jobId) {     Preconditions.checkState(state == State.FREE, "The slot has to be free in order to set an allocation id.").     state = State.ALLOCATED.     this.allocationId = Preconditions.checkNotNull(allocationId).     this.jobId = Preconditions.checkNotNull(jobId). }
true;public;1;3;/**  * Check whether required resource profile can be matched by this slot.  *  * @param required The required resource profile  * @return true if requirement can be matched  */ ;/**  * Check whether required resource profile can be matched by this slot.  *  * @param required The required resource profile  * @return true if requirement can be matched  */ public boolean isMatchingRequirement(ResourceProfile required) {     return resourceProfile.isMatching(required). }
