commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Sets the current key that is used for partitioned state.  * @param newKey The new current key.  */ ;/**  * Sets the current key that is used for partitioned state.  * @param newKey The new current key.  */ void setCurrentKey(K newKey).
true;;4;5;/**  * Applies the provided {@link KeyedStateFunction} to the state with the provided  * {@link StateDescriptor} of all the currently active keys.  *  * @param namespace the namespace of the state.  * @param namespaceSerializer the serializer for the namespace.  * @param stateDescriptor the descriptor of the state to which the function is going to be applied.  * @param function the function to be applied to the keyed state.  *  * @param <N> The type of the namespace.  * @param <S> The type of the state.  */ ;/**  * Applies the provided {@link KeyedStateFunction} to the state with the provided  * {@link StateDescriptor} of all the currently active keys.  *  * @param namespace the namespace of the state.  * @param namespaceSerializer the serializer for the namespace.  * @param stateDescriptor the descriptor of the state to which the function is going to be applied.  * @param function the function to be applied to the keyed state.  *  * @param <N> The type of the namespace.  * @param <S> The type of the state.  */ <N, S extends State, T> void applyToAllKeys(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, T> stateDescriptor, final KeyedStateFunction<K, S> function) throws Exception.
true;;2;1;/**  * @return A stream of all keys for the given state and namespace. Modifications to the state during iterating  * 		   over it keys are not supported.  * @param state State variable for which existing keys will be returned.  * @param namespace Namespace for which existing keys will be returned.  */ ;/**  * @return A stream of all keys for the given state and namespace. Modifications to the state during iterating  * 		   over it keys are not supported.  * @param state State variable for which existing keys will be returned.  * @param namespace Namespace for which existing keys will be returned.  */ <N> Stream<K> getKeys(String state, N namespace).
true;;2;3;/**  * Creates or retrieves a keyed state backed by this state backend.  *  * @param namespaceSerializer The serializer used for the namespace type of the state  * @param stateDescriptor The identifier for the state. This contains name and can create a default state value.  *  * @param <N> The type of the namespace.  * @param <S> The type of the state.  *  * @return A new key/value state backed by this backend.  *  * @throws Exception Exceptions may occur during initialization of the state and should be forwarded.  */ ;/**  * Creates or retrieves a keyed state backed by this state backend.  *  * @param namespaceSerializer The serializer used for the namespace type of the state  * @param stateDescriptor The identifier for the state. This contains name and can create a default state value.  *  * @param <N> The type of the namespace.  * @param <S> The type of the state.  *  * @return A new key/value state backed by this backend.  *  * @throws Exception Exceptions may occur during initialization of the state and should be forwarded.  */ <N, S extends State, T> S getOrCreateKeyedState(TypeSerializer<N> namespaceSerializer, StateDescriptor<S, T> stateDescriptor) throws Exception.
true;;3;4;/**  * Creates or retrieves a partitioned state backed by this state backend.  *  * TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace.  *       This method should be removed for the sake of namespaces being lazily fetched from the keyed  *       state backend, or being set on the state directly.  *  * @param stateDescriptor The identifier for the state. This contains name and can create a default state value.  *  * @param <N> The type of the namespace.  * @param <S> The type of the state.  *  * @return A new key/value state backed by this backend.  *  * @throws Exception Exceptions may occur during initialization of the state and should be forwarded.  */ ;/**  * Creates or retrieves a partitioned state backed by this state backend.  *  * TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace.  *       This method should be removed for the sake of namespaces being lazily fetched from the keyed  *       state backend, or being set on the state directly.  *  * @param stateDescriptor The identifier for the state. This contains name and can create a default state value.  *  * @param <N> The type of the namespace.  * @param <S> The type of the state.  *  * @return A new key/value state backed by this backend.  *  * @throws Exception Exceptions may occur during initialization of the state and should be forwarded.  */ <N, S extends State> S getPartitionedState(N namespace, TypeSerializer<N> namespaceSerializer, StateDescriptor<S, ?> stateDescriptor) throws Exception.
false;;0;2;;@Override void dispose().
true;;1;1;/**  * State backend will call {@link KeySelectionListener#keySelected} when key context is switched if supported.  */ ;/**  * State backend will call {@link KeySelectionListener#keySelected} when key context is switched if supported.  */ void registerKeySelectionListener(KeySelectionListener<K> listener).
true;;1;1;/**  * Stop calling listener registered in {@link #registerKeySelectionListener}.  *  * @return returns true iff listener was registered before.  */ ;/**  * Stop calling listener registered in {@link #registerKeySelectionListener}.  *  * @return returns true iff listener was registered before.  */ boolean deregisterKeySelectionListener(KeySelectionListener<K> listener).
true;;1;1;/**  * Callback when key context is switched.  */ ;/**  * Callback when key context is switched.  */ void keySelected(K newKey).
