commented;modifiers;parameterAmount;loc;comment;code
true;public;1;21;/**  * Collects a record and emits it to all writers.  */ ;/**  * Collects a record and emits it to all writers.  */ @Override public void collect(T record) {     if (record != null) {         this.delegate.setInstance(record).         try {             for (RecordWriter<SerializationDelegate<T>> writer : writers) {                 writer.emit(this.delegate).             }         } catch (IOException e) {             throw new RuntimeException("Emitting the record caused an I/O exception: " + e.getMessage(), e).         } catch (InterruptedException e) {             throw new RuntimeException("Emitting the record was interrupted: " + e.getMessage(), e).         }     } else {         throw new NullPointerException("The system does not support records that are null." + "Null values are only supported as fields inside other objects.").     } }
false;public;0;7;;@Override public void close() {     for (RecordWriter<?> writer : writers) {         writer.clearBuffers().         writer.flushAll().     } }
true;public;0;4;/**  * List of writers that are associated with this output collector  * @return list of writers  */ ;/**  * List of writers that are associated with this output collector  * @return list of writers  */ @SuppressWarnings("unchecked") public List<RecordWriter<SerializationDelegate<T>>> getWriters() {     return Collections.unmodifiableList(Arrays.asList(this.writers)). }
