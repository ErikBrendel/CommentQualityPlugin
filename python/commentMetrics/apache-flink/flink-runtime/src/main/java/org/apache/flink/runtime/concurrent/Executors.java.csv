# id;timestamp;commentText;codeText;commentWords;codeWords
Executors -> public static Executor directExecutor();1474994376;Return a direct executor. The direct executor directly executes the runnable in the calling_thread.__@return Direct executor;public static Executor directExecutor() {_		return DirectExecutor.INSTANCE__	};return,a,direct,executor,the,direct,executor,directly,executes,the,runnable,in,the,calling,thread,return,direct,executor;public,static,executor,direct,executor,return,direct,executor,instance
Executors -> public static Executor directExecutor();1479852017;Return a direct executor. The direct executor directly executes the runnable in the calling_thread.__@return Direct executor;public static Executor directExecutor() {_		return DirectExecutor.INSTANCE__	};return,a,direct,executor,the,direct,executor,directly,executes,the,runnable,in,the,calling,thread,return,direct,executor;public,static,executor,direct,executor,return,direct,executor,instance
Executors -> public static Executor directExecutor();1487548884;Return a direct executor. The direct executor directly executes the runnable in the calling_thread.__@return Direct executor;public static Executor directExecutor() {_		return DirectExecutor.INSTANCE__	};return,a,direct,executor,the,direct,executor,directly,executes,the,runnable,in,the,calling,thread,return,direct,executor;public,static,executor,direct,executor,return,direct,executor,instance
Executors -> public static Executor directExecutor();1493386068;Return a direct executor. The direct executor directly executes the runnable in the calling_thread.__@return Direct executor;public static Executor directExecutor() {_		return DirectExecutor.INSTANCE__	};return,a,direct,executor,the,direct,executor,directly,executes,the,runnable,in,the,calling,thread,return,direct,executor;public,static,executor,direct,executor,return,direct,executor,instance
Executors -> public static Executor directExecutor();1501587025;Return a direct executor. The direct executor directly executes the runnable in the calling_thread.__@return Direct executor;public static Executor directExecutor() {_		return DirectExecutor.INSTANCE__	};return,a,direct,executor,the,direct,executor,directly,executes,the,runnable,in,the,calling,thread,return,direct,executor;public,static,executor,direct,executor,return,direct,executor,instance
Executors -> public static Executor directExecutor();1512567202;Return a direct executor. The direct executor directly executes the runnable in the calling_thread.__@return Direct executor;public static Executor directExecutor() {_		return DirectExecutor.INSTANCE__	};return,a,direct,executor,the,direct,executor,directly,executes,the,runnable,in,the,calling,thread,return,direct,executor;public,static,executor,direct,executor,return,direct,executor,instance
Executors -> public static Executor directExecutor();1545300278;Return a direct executor. The direct executor directly executes the runnable in the calling_thread.__@return Direct executor;public static Executor directExecutor() {_		return DirectExecutorService.INSTANCE__	};return,a,direct,executor,the,direct,executor,directly,executes,the,runnable,in,the,calling,thread,return,direct,executor;public,static,executor,direct,executor,return,direct,executor,service,instance
Executors -> public static ExecutionContext directExecutionContext();1501587025;Return a direct execution context. The direct execution context executes the runnable directly_in the calling thread.__@return Direct execution context.;public static ExecutionContext directExecutionContext() {_		return DirectExecutionContext.INSTANCE__	};return,a,direct,execution,context,the,direct,execution,context,executes,the,runnable,directly,in,the,calling,thread,return,direct,execution,context;public,static,execution,context,direct,execution,context,return,direct,execution,context,instance
Executors -> public static ExecutionContext directExecutionContext();1512567202;Return a direct execution context. The direct execution context executes the runnable directly_in the calling thread.__@return Direct execution context.;public static ExecutionContext directExecutionContext() {_		return DirectExecutionContext.INSTANCE__	};return,a,direct,execution,context,the,direct,execution,context,executes,the,runnable,directly,in,the,calling,thread,return,direct,execution,context;public,static,execution,context,direct,execution,context,return,direct,execution,context,instance
Executors -> public static ExecutionContext directExecutionContext();1545300278;Return a direct execution context. The direct execution context executes the runnable directly_in the calling thread.__@return Direct execution context.;public static ExecutionContext directExecutionContext() {_		return DirectExecutionContext.INSTANCE__	};return,a,direct,execution,context,the,direct,execution,context,executes,the,runnable,directly,in,the,calling,thread,return,direct,execution,context;public,static,execution,context,direct,execution,context,return,direct,execution,context,instance
Executors -> public static void gracefulShutdown(long timeout, TimeUnit unit, ExecutorService... executorServices);1479852017;Gracefully shutdown the given {@link ExecutorService}. The call waits the given timeout that_all ExecutorServices terminate. If the ExecutorServices do not terminate in this time,_they will be shut down hard.__@param timeout to wait for the termination of all ExecutorServices_@param unit of the timeout_@param executorServices to shut down;public static void gracefulShutdown(long timeout, TimeUnit unit, ExecutorService... executorServices) {_		for (ExecutorService executorService: executorServices) {_			executorService.shutdown()__		}__		boolean wasInterrupted = false__		final long endTime = unit.toMillis(timeout) + System.currentTimeMillis()__		long timeLeft = unit.toMillis(timeout)__		boolean hasTimeLeft = timeLeft > 0L___		for (ExecutorService executorService: executorServices) {_			if (wasInterrupted || !hasTimeLeft) {_				executorService.shutdownNow()__			} else {_				try {_					if (!executorService.awaitTermination(timeLeft, TimeUnit.MILLISECONDS)) {_						LOG.warn("ExecutorService did not terminate in time. Shutting it down now.")__						executorService.shutdownNow()__					}_				} catch (InterruptedException e) {_					LOG.warn("Interrupted while shutting down executor services. Shutting all " +_						"remaining ExecutorServices down now.", e)__					executorService.shutdownNow()___					wasInterrupted = true__				}__				timeLeft = endTime - System.currentTimeMillis()__				hasTimeLeft = timeLeft > 0L__			}_		}_	};gracefully,shutdown,the,given,link,executor,service,the,call,waits,the,given,timeout,that,all,executor,services,terminate,if,the,executor,services,do,not,terminate,in,this,time,they,will,be,shut,down,hard,param,timeout,to,wait,for,the,termination,of,all,executor,services,param,unit,of,the,timeout,param,executor,services,to,shut,down;public,static,void,graceful,shutdown,long,timeout,time,unit,unit,executor,service,executor,services,for,executor,service,executor,service,executor,services,executor,service,shutdown,boolean,was,interrupted,false,final,long,end,time,unit,to,millis,timeout,system,current,time,millis,long,time,left,unit,to,millis,timeout,boolean,has,time,left,time,left,0l,for,executor,service,executor,service,executor,services,if,was,interrupted,has,time,left,executor,service,shutdown,now,else,try,if,executor,service,await,termination,time,left,time,unit,milliseconds,log,warn,executor,service,did,not,terminate,in,time,shutting,it,down,now,executor,service,shutdown,now,catch,interrupted,exception,e,log,warn,interrupted,while,shutting,down,executor,services,shutting,all,remaining,executor,services,down,now,e,executor,service,shutdown,now,was,interrupted,true,time,left,end,time,system,current,time,millis,has,time,left,time,left,0l
Executors -> public static void gracefulShutdown(long timeout, TimeUnit unit, ExecutorService... executorServices);1487548884;Gracefully shutdown the given {@link ExecutorService}. The call waits the given timeout that_all ExecutorServices terminate. If the ExecutorServices do not terminate in this time,_they will be shut down hard.__@param timeout to wait for the termination of all ExecutorServices_@param unit of the timeout_@param executorServices to shut down;public static void gracefulShutdown(long timeout, TimeUnit unit, ExecutorService... executorServices) {_		for (ExecutorService executorService: executorServices) {_			executorService.shutdown()__		}__		boolean wasInterrupted = false__		final long endTime = unit.toMillis(timeout) + System.currentTimeMillis()__		long timeLeft = unit.toMillis(timeout)__		boolean hasTimeLeft = timeLeft > 0L___		for (ExecutorService executorService: executorServices) {_			if (wasInterrupted || !hasTimeLeft) {_				executorService.shutdownNow()__			} else {_				try {_					if (!executorService.awaitTermination(timeLeft, TimeUnit.MILLISECONDS)) {_						LOG.warn("ExecutorService did not terminate in time. Shutting it down now.")__						executorService.shutdownNow()__					}_				} catch (InterruptedException e) {_					LOG.warn("Interrupted while shutting down executor services. Shutting all " +_						"remaining ExecutorServices down now.", e)__					executorService.shutdownNow()___					wasInterrupted = true__				}__				timeLeft = endTime - System.currentTimeMillis()__				hasTimeLeft = timeLeft > 0L__			}_		}_	};gracefully,shutdown,the,given,link,executor,service,the,call,waits,the,given,timeout,that,all,executor,services,terminate,if,the,executor,services,do,not,terminate,in,this,time,they,will,be,shut,down,hard,param,timeout,to,wait,for,the,termination,of,all,executor,services,param,unit,of,the,timeout,param,executor,services,to,shut,down;public,static,void,graceful,shutdown,long,timeout,time,unit,unit,executor,service,executor,services,for,executor,service,executor,service,executor,services,executor,service,shutdown,boolean,was,interrupted,false,final,long,end,time,unit,to,millis,timeout,system,current,time,millis,long,time,left,unit,to,millis,timeout,boolean,has,time,left,time,left,0l,for,executor,service,executor,service,executor,services,if,was,interrupted,has,time,left,executor,service,shutdown,now,else,try,if,executor,service,await,termination,time,left,time,unit,milliseconds,log,warn,executor,service,did,not,terminate,in,time,shutting,it,down,now,executor,service,shutdown,now,catch,interrupted,exception,e,log,warn,interrupted,while,shutting,down,executor,services,shutting,all,remaining,executor,services,down,now,e,executor,service,shutdown,now,was,interrupted,true,time,left,end,time,system,current,time,millis,has,time,left,time,left,0l
Executors -> public static void gracefulShutdown(long timeout, TimeUnit unit, ExecutorService... executorServices);1493386068;Gracefully shutdown the given {@link ExecutorService}. The call waits the given timeout that_all ExecutorServices terminate. If the ExecutorServices do not terminate in this time,_they will be shut down hard.__@param timeout to wait for the termination of all ExecutorServices_@param unit of the timeout_@param executorServices to shut down;public static void gracefulShutdown(long timeout, TimeUnit unit, ExecutorService... executorServices) {_		for (ExecutorService executorService: executorServices) {_			executorService.shutdown()__		}__		boolean wasInterrupted = false__		final long endTime = unit.toMillis(timeout) + System.currentTimeMillis()__		long timeLeft = unit.toMillis(timeout)__		boolean hasTimeLeft = timeLeft > 0L___		for (ExecutorService executorService: executorServices) {_			if (wasInterrupted || !hasTimeLeft) {_				executorService.shutdownNow()__			} else {_				try {_					if (!executorService.awaitTermination(timeLeft, TimeUnit.MILLISECONDS)) {_						LOG.warn("ExecutorService did not terminate in time. Shutting it down now.")__						executorService.shutdownNow()__					}_				} catch (InterruptedException e) {_					LOG.warn("Interrupted while shutting down executor services. Shutting all " +_						"remaining ExecutorServices down now.", e)__					executorService.shutdownNow()___					wasInterrupted = true___					Thread.currentThread().interrupt()__				}__				timeLeft = endTime - System.currentTimeMillis()__				hasTimeLeft = timeLeft > 0L__			}_		}_	};gracefully,shutdown,the,given,link,executor,service,the,call,waits,the,given,timeout,that,all,executor,services,terminate,if,the,executor,services,do,not,terminate,in,this,time,they,will,be,shut,down,hard,param,timeout,to,wait,for,the,termination,of,all,executor,services,param,unit,of,the,timeout,param,executor,services,to,shut,down;public,static,void,graceful,shutdown,long,timeout,time,unit,unit,executor,service,executor,services,for,executor,service,executor,service,executor,services,executor,service,shutdown,boolean,was,interrupted,false,final,long,end,time,unit,to,millis,timeout,system,current,time,millis,long,time,left,unit,to,millis,timeout,boolean,has,time,left,time,left,0l,for,executor,service,executor,service,executor,services,if,was,interrupted,has,time,left,executor,service,shutdown,now,else,try,if,executor,service,await,termination,time,left,time,unit,milliseconds,log,warn,executor,service,did,not,terminate,in,time,shutting,it,down,now,executor,service,shutdown,now,catch,interrupted,exception,e,log,warn,interrupted,while,shutting,down,executor,services,shutting,all,remaining,executor,services,down,now,e,executor,service,shutdown,now,was,interrupted,true,thread,current,thread,interrupt,time,left,end,time,system,current,time,millis,has,time,left,time,left,0l
Executors -> public static void gracefulShutdown(long timeout, TimeUnit unit, ExecutorService... executorServices);1501587025;Gracefully shutdown the given {@link ExecutorService}. The call waits the given timeout that_all ExecutorServices terminate. If the ExecutorServices do not terminate in this time,_they will be shut down hard.__@param timeout to wait for the termination of all ExecutorServices_@param unit of the timeout_@param executorServices to shut down;public static void gracefulShutdown(long timeout, TimeUnit unit, ExecutorService... executorServices) {_		for (ExecutorService executorService: executorServices) {_			executorService.shutdown()__		}__		boolean wasInterrupted = false__		final long endTime = unit.toMillis(timeout) + System.currentTimeMillis()__		long timeLeft = unit.toMillis(timeout)__		boolean hasTimeLeft = timeLeft > 0L___		for (ExecutorService executorService: executorServices) {_			if (wasInterrupted || !hasTimeLeft) {_				executorService.shutdownNow()__			} else {_				try {_					if (!executorService.awaitTermination(timeLeft, TimeUnit.MILLISECONDS)) {_						LOG.warn("ExecutorService did not terminate in time. Shutting it down now.")__						executorService.shutdownNow()__					}_				} catch (InterruptedException e) {_					LOG.warn("Interrupted while shutting down executor services. Shutting all " +_						"remaining ExecutorServices down now.", e)__					executorService.shutdownNow()___					wasInterrupted = true___					Thread.currentThread().interrupt()__				}__				timeLeft = endTime - System.currentTimeMillis()__				hasTimeLeft = timeLeft > 0L__			}_		}_	};gracefully,shutdown,the,given,link,executor,service,the,call,waits,the,given,timeout,that,all,executor,services,terminate,if,the,executor,services,do,not,terminate,in,this,time,they,will,be,shut,down,hard,param,timeout,to,wait,for,the,termination,of,all,executor,services,param,unit,of,the,timeout,param,executor,services,to,shut,down;public,static,void,graceful,shutdown,long,timeout,time,unit,unit,executor,service,executor,services,for,executor,service,executor,service,executor,services,executor,service,shutdown,boolean,was,interrupted,false,final,long,end,time,unit,to,millis,timeout,system,current,time,millis,long,time,left,unit,to,millis,timeout,boolean,has,time,left,time,left,0l,for,executor,service,executor,service,executor,services,if,was,interrupted,has,time,left,executor,service,shutdown,now,else,try,if,executor,service,await,termination,time,left,time,unit,milliseconds,log,warn,executor,service,did,not,terminate,in,time,shutting,it,down,now,executor,service,shutdown,now,catch,interrupted,exception,e,log,warn,interrupted,while,shutting,down,executor,services,shutting,all,remaining,executor,services,down,now,e,executor,service,shutdown,now,was,interrupted,true,thread,current,thread,interrupt,time,left,end,time,system,current,time,millis,has,time,left,time,left,0l
