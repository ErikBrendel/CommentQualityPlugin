commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Return a direct executor. The direct executor directly executes the runnable in the calling  * thread.  *  * @return Direct executor  */ ;/**  * Return a direct executor. The direct executor directly executes the runnable in the calling  * thread.  *  * @return Direct executor  */ public static Executor directExecutor() {     return DirectExecutorService.INSTANCE. }
true;public,static;0;3;/**  * Return a new direct executor service.  *  * <p>The direct executor service directly executes the runnables and the callables in the calling  * thread.  *  * @return New direct executor service  */ ;/**  * Return a new direct executor service.  *  * <p>The direct executor service directly executes the runnables and the callables in the calling  * thread.  *  * @return New direct executor service  */ public static ExecutorService newDirectExecutorService() {     return new DirectExecutorService(). }
true;public,static;0;3;/**  * Return a direct execution context. The direct execution context executes the runnable directly  * in the calling thread.  *  * @return Direct execution context.  */ ;/**  * Return a direct execution context. The direct execution context executes the runnable directly  * in the calling thread.  *  * @return Direct execution context.  */ public static ExecutionContext directExecutionContext() {     return DirectExecutionContext.INSTANCE. }
false;public;1;4;;@Override public void execute(Runnable runnable) {     runnable.run(). }
false;public;1;4;;@Override public void reportFailure(Throwable cause) {     throw new IllegalStateException("Error in direct execution context.", cause). }
false;public;0;4;;@Override public ExecutionContext prepare() {     return this. }
