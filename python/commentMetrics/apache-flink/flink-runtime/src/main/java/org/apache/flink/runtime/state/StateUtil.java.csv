# id;timestamp;commentText;codeText;commentWords;codeWords
StateUtil -> public static void bestEffortCloseAllStateObjects( 			Iterable<? extends StateObject> handlesToDiscard) throws IOException;1472663401;Iterates through the passed state handles and calls discardState() on each handle that is not null. All_occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.__@param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values._@throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration;public static void bestEffortCloseAllStateObjects(_			Iterable<? extends StateObject> handlesToDiscard) throws IOException {__		if (handlesToDiscard != null) {__			IOException suppressedExceptions = null___			for (StateObject state : handlesToDiscard) {__				if (state != null) {_					try {_						state.close()__					} catch (Exception ex) {_						_						if (suppressedExceptions == null) {_							suppressedExceptions = new IOException(ex)__						}_						suppressedExceptions.addSuppressed(ex)__					}_				}_			}__			if (suppressedExceptions != null) {_				throw suppressedExceptions__			}_		}_	};iterates,through,the,passed,state,handles,and,calls,discard,state,on,each,handle,that,is,not,null,all,occurring,exceptions,are,suppressed,and,collected,until,the,iteration,is,over,and,emitted,as,a,single,exception,param,handles,to,discard,state,handles,to,discard,passed,iterable,is,allowed,to,deliver,null,values,throws,exception,exception,that,is,a,collection,of,all,suppressed,exceptions,that,were,caught,during,iteration;public,static,void,best,effort,close,all,state,objects,iterable,extends,state,object,handles,to,discard,throws,ioexception,if,handles,to,discard,null,ioexception,suppressed,exceptions,null,for,state,object,state,handles,to,discard,if,state,null,try,state,close,catch,exception,ex,if,suppressed,exceptions,null,suppressed,exceptions,new,ioexception,ex,suppressed,exceptions,add,suppressed,ex,if,suppressed,exceptions,null,throw,suppressed,exceptions
StateUtil -> public static void bestEffortCloseAllStateObjects( 			Iterable<? extends StateObject> handlesToDiscard) throws IOException;1474905901;Iterates through the passed state handles and calls discardState() on each handle that is not null. All_occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.__@param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values._@throws IOException exception that is a collection of all suppressed exceptions that were caught during iteration;public static void bestEffortCloseAllStateObjects(_			Iterable<? extends StateObject> handlesToDiscard) throws IOException {__		if (handlesToDiscard != null) {__			IOException suppressedExceptions = null___			for (StateObject state : handlesToDiscard) {__				if (state != null) {_					try {_						state.close()__					} catch (Exception ex) {_						_						if (suppressedExceptions == null) {_							suppressedExceptions = new IOException(ex)__						}_						suppressedExceptions.addSuppressed(ex)__					}_				}_			}__			if (suppressedExceptions != null) {_				throw suppressedExceptions__			}_		}_	};iterates,through,the,passed,state,handles,and,calls,discard,state,on,each,handle,that,is,not,null,all,occurring,exceptions,are,suppressed,and,collected,until,the,iteration,is,over,and,emitted,as,a,single,exception,param,handles,to,discard,state,handles,to,discard,passed,iterable,is,allowed,to,deliver,null,values,throws,ioexception,exception,that,is,a,collection,of,all,suppressed,exceptions,that,were,caught,during,iteration;public,static,void,best,effort,close,all,state,objects,iterable,extends,state,object,handles,to,discard,throws,ioexception,if,handles,to,discard,null,ioexception,suppressed,exceptions,null,for,state,object,state,handles,to,discard,if,state,null,try,state,close,catch,exception,ex,if,suppressed,exceptions,null,suppressed,exceptions,new,ioexception,ex,suppressed,exceptions,add,suppressed,ex,if,suppressed,exceptions,null,throw,suppressed,exceptions
StateUtil -> public static long getStateSize(StateObject handle);1493994606;Returns the size of a state object__@param handle The handle to the retrieved state;public static long getStateSize(StateObject handle) {_		return handle == null ? 0 : handle.getStateSize()__	};returns,the,size,of,a,state,object,param,handle,the,handle,to,the,retrieved,state;public,static,long,get,state,size,state,object,handle,return,handle,null,0,handle,get,state,size
StateUtil -> public static long getStateSize(StateObject handle);1503598628;Returns the size of a state object__@param handle The handle to the retrieved state;public static long getStateSize(StateObject handle) {_		return handle == null ? 0 : handle.getStateSize()__	};returns,the,size,of,a,state,object,param,handle,the,handle,to,the,retrieved,state;public,static,long,get,state,size,state,object,handle,return,handle,null,0,handle,get,state,size
StateUtil -> public static long getStateSize(StateObject handle);1515507454;Returns the size of a state object__@param handle The handle to the retrieved state;public static long getStateSize(StateObject handle) {_		return handle == null ? 0 : handle.getStateSize()__	};returns,the,size,of,a,state,object,param,handle,the,handle,to,the,retrieved,state;public,static,long,get,state,size,state,object,handle,return,handle,null,0,handle,get,state,size
StateUtil -> public static long getStateSize(StateObject handle);1547722029;Returns the size of a state object__@param handle The handle to the retrieved state;public static long getStateSize(StateObject handle) {_		return handle == null ? 0 : handle.getStateSize()__	};returns,the,size,of,a,state,object,param,handle,the,handle,to,the,retrieved,state;public,static,long,get,state,size,state,object,handle,return,handle,null,0,handle,get,state,size
StateUtil -> public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception;1485189169;Discards the given state future by first trying to cancel it. If this is not possible, then_the state object contained in the future is calculated and afterwards discarded.__@param stateFuture to be discarded_@throws Exception if the discard operation failed;public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception {_		if (null != stateFuture) {_			if (!stateFuture.cancel(true)) {_				StateObject stateObject = FutureUtil.runIfNotDoneAndGet(stateFuture)___				stateObject.discardState()__			}_		}_	};discards,the,given,state,future,by,first,trying,to,cancel,it,if,this,is,not,possible,then,the,state,object,contained,in,the,future,is,calculated,and,afterwards,discarded,param,state,future,to,be,discarded,throws,exception,if,the,discard,operation,failed;public,static,void,discard,state,future,runnable,future,extends,state,object,state,future,throws,exception,if,null,state,future,if,state,future,cancel,true,state,object,state,object,future,util,run,if,not,done,and,get,state,future,state,object,discard,state
StateUtil -> public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception;1485354241;Discards the given state future by first trying to cancel it. If this is not possible, then_the state object contained in the future is calculated and afterwards discarded.__@param stateFuture to be discarded_@throws Exception if the discard operation failed;public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception {_		if (null != stateFuture) {_			if (!stateFuture.cancel(true)) {_				StateObject stateObject = FutureUtil.runIfNotDoneAndGet(stateFuture)___				if (null != stateObject) {_					stateObject.discardState()__				}_			}_		}_	};discards,the,given,state,future,by,first,trying,to,cancel,it,if,this,is,not,possible,then,the,state,object,contained,in,the,future,is,calculated,and,afterwards,discarded,param,state,future,to,be,discarded,throws,exception,if,the,discard,operation,failed;public,static,void,discard,state,future,runnable,future,extends,state,object,state,future,throws,exception,if,null,state,future,if,state,future,cancel,true,state,object,state,object,future,util,run,if,not,done,and,get,state,future,if,null,state,object,state,object,discard,state
StateUtil -> public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception;1488304750;Discards the given state future by first trying to cancel it. If this is not possible, then_the state object contained in the future is calculated and afterwards discarded.__@param stateFuture to be discarded_@throws Exception if the discard operation failed;public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception {_		if (null != stateFuture) {_			if (!stateFuture.cancel(true)) {_				StateObject stateObject = FutureUtil.runIfNotDoneAndGet(stateFuture)___				if (null != stateObject) {_					stateObject.discardState()__				}_			}_		}_	};discards,the,given,state,future,by,first,trying,to,cancel,it,if,this,is,not,possible,then,the,state,object,contained,in,the,future,is,calculated,and,afterwards,discarded,param,state,future,to,be,discarded,throws,exception,if,the,discard,operation,failed;public,static,void,discard,state,future,runnable,future,extends,state,object,state,future,throws,exception,if,null,state,future,if,state,future,cancel,true,state,object,state,object,future,util,run,if,not,done,and,get,state,future,if,null,state,object,state,object,discard,state
StateUtil -> public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception;1493994606;Discards the given state future by first trying to cancel it. If this is not possible, then_the state object contained in the future is calculated and afterwards discarded.__@param stateFuture to be discarded_@throws Exception if the discard operation failed;public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception {_		if (null != stateFuture) {_			if (!stateFuture.cancel(true)) {_				StateObject stateObject = FutureUtil.runIfNotDoneAndGet(stateFuture)___				if (null != stateObject) {_					stateObject.discardState()__				}_			}_		}_	};discards,the,given,state,future,by,first,trying,to,cancel,it,if,this,is,not,possible,then,the,state,object,contained,in,the,future,is,calculated,and,afterwards,discarded,param,state,future,to,be,discarded,throws,exception,if,the,discard,operation,failed;public,static,void,discard,state,future,runnable,future,extends,state,object,state,future,throws,exception,if,null,state,future,if,state,future,cancel,true,state,object,state,object,future,util,run,if,not,done,and,get,state,future,if,null,state,object,state,object,discard,state
StateUtil -> public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception;1503598628;Discards the given state future by first trying to cancel it. If this is not possible, then_the state object contained in the future is calculated and afterwards discarded.__@param stateFuture to be discarded_@throws Exception if the discard operation failed;public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception {_		if (null != stateFuture) {_			if (!stateFuture.cancel(true)) {_				StateObject stateObject = FutureUtil.runIfNotDoneAndGet(stateFuture)___				if (null != stateObject) {_					stateObject.discardState()__				}_			}_		}_	};discards,the,given,state,future,by,first,trying,to,cancel,it,if,this,is,not,possible,then,the,state,object,contained,in,the,future,is,calculated,and,afterwards,discarded,param,state,future,to,be,discarded,throws,exception,if,the,discard,operation,failed;public,static,void,discard,state,future,runnable,future,extends,state,object,state,future,throws,exception,if,null,state,future,if,state,future,cancel,true,state,object,state,object,future,util,run,if,not,done,and,get,state,future,if,null,state,object,state,object,discard,state
StateUtil -> public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception;1515507454;Discards the given state future by first trying to cancel it. If this is not possible, then_the state object contained in the future is calculated and afterwards discarded.__@param stateFuture to be discarded_@throws Exception if the discard operation failed;public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception {_		if (null != stateFuture) {_			if (!stateFuture.cancel(true)) {__				try {_					_					StateObject stateObject = FutureUtil.runIfNotDoneAndGet(stateFuture)___					if (null != stateObject) {_						stateObject.discardState()__					}_				} catch (CancellationException | ExecutionException ex) {_					LOG.debug("Cancelled execution of snapshot future runnable. Cancellation produced the following " +_						"exception, which is expected an can be ignored.", ex)__				}_			}_		}_	};discards,the,given,state,future,by,first,trying,to,cancel,it,if,this,is,not,possible,then,the,state,object,contained,in,the,future,is,calculated,and,afterwards,discarded,param,state,future,to,be,discarded,throws,exception,if,the,discard,operation,failed;public,static,void,discard,state,future,runnable,future,extends,state,object,state,future,throws,exception,if,null,state,future,if,state,future,cancel,true,try,state,object,state,object,future,util,run,if,not,done,and,get,state,future,if,null,state,object,state,object,discard,state,catch,cancellation,exception,execution,exception,ex,log,debug,cancelled,execution,of,snapshot,future,runnable,cancellation,produced,the,following,exception,which,is,expected,an,can,be,ignored,ex
StateUtil -> public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception;1547722029;Discards the given state future by first trying to cancel it. If this is not possible, then_the state object contained in the future is calculated and afterwards discarded.__@param stateFuture to be discarded_@throws Exception if the discard operation failed;public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception {_		if (null != stateFuture) {_			if (!stateFuture.cancel(true)) {__				try {_					_					StateObject stateObject = FutureUtils.runIfNotDoneAndGet(stateFuture)___					if (null != stateObject) {_						stateObject.discardState()__					}_				} catch (CancellationException | ExecutionException ex) {_					LOG.debug("Cancelled execution of snapshot future runnable. Cancellation produced the following " +_						"exception, which is expected an can be ignored.", ex)__				}_			}_		}_	};discards,the,given,state,future,by,first,trying,to,cancel,it,if,this,is,not,possible,then,the,state,object,contained,in,the,future,is,calculated,and,afterwards,discarded,param,state,future,to,be,discarded,throws,exception,if,the,discard,operation,failed;public,static,void,discard,state,future,runnable,future,extends,state,object,state,future,throws,exception,if,null,state,future,if,state,future,cancel,true,try,state,object,state,object,future,utils,run,if,not,done,and,get,state,future,if,null,state,object,state,object,discard,state,catch,cancellation,exception,execution,exception,ex,log,debug,cancelled,execution,of,snapshot,future,runnable,cancellation,produced,the,following,exception,which,is,expected,an,can,be,ignored,ex
StateUtil -> public static void bestEffortDiscardAllStateObjects( 		Iterable<? extends StateObject> handlesToDiscard) throws Exception;1503598628;Iterates through the passed state handles and calls discardState() on each handle that is not null. All_occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.__@param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values._@throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration;public static void bestEffortDiscardAllStateObjects(_		Iterable<? extends StateObject> handlesToDiscard) throws Exception {_		LambdaUtil.applyToAllWhileSuppressingExceptions(handlesToDiscard, StateObject::discardState)__	};iterates,through,the,passed,state,handles,and,calls,discard,state,on,each,handle,that,is,not,null,all,occurring,exceptions,are,suppressed,and,collected,until,the,iteration,is,over,and,emitted,as,a,single,exception,param,handles,to,discard,state,handles,to,discard,passed,iterable,is,allowed,to,deliver,null,values,throws,exception,exception,that,is,a,collection,of,all,suppressed,exceptions,that,were,caught,during,iteration;public,static,void,best,effort,discard,all,state,objects,iterable,extends,state,object,handles,to,discard,throws,exception,lambda,util,apply,to,all,while,suppressing,exceptions,handles,to,discard,state,object,discard,state
StateUtil -> public static void bestEffortDiscardAllStateObjects( 		Iterable<? extends StateObject> handlesToDiscard) throws Exception;1515507454;Iterates through the passed state handles and calls discardState() on each handle that is not null. All_occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.__@param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values._@throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration;public static void bestEffortDiscardAllStateObjects(_		Iterable<? extends StateObject> handlesToDiscard) throws Exception {_		LambdaUtil.applyToAllWhileSuppressingExceptions(handlesToDiscard, StateObject::discardState)__	};iterates,through,the,passed,state,handles,and,calls,discard,state,on,each,handle,that,is,not,null,all,occurring,exceptions,are,suppressed,and,collected,until,the,iteration,is,over,and,emitted,as,a,single,exception,param,handles,to,discard,state,handles,to,discard,passed,iterable,is,allowed,to,deliver,null,values,throws,exception,exception,that,is,a,collection,of,all,suppressed,exceptions,that,were,caught,during,iteration;public,static,void,best,effort,discard,all,state,objects,iterable,extends,state,object,handles,to,discard,throws,exception,lambda,util,apply,to,all,while,suppressing,exceptions,handles,to,discard,state,object,discard,state
StateUtil -> public static void bestEffortDiscardAllStateObjects( 		Iterable<? extends StateObject> handlesToDiscard) throws Exception;1547722029;Iterates through the passed state handles and calls discardState() on each handle that is not null. All_occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.__@param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values._@throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration;public static void bestEffortDiscardAllStateObjects(_		Iterable<? extends StateObject> handlesToDiscard) throws Exception {_		LambdaUtil.applyToAllWhileSuppressingExceptions(handlesToDiscard, StateObject::discardState)__	};iterates,through,the,passed,state,handles,and,calls,discard,state,on,each,handle,that,is,not,null,all,occurring,exceptions,are,suppressed,and,collected,until,the,iteration,is,over,and,emitted,as,a,single,exception,param,handles,to,discard,state,handles,to,discard,passed,iterable,is,allowed,to,deliver,null,values,throws,exception,exception,that,is,a,collection,of,all,suppressed,exceptions,that,were,caught,during,iteration;public,static,void,best,effort,discard,all,state,objects,iterable,extends,state,object,handles,to,discard,throws,exception,lambda,util,apply,to,all,while,suppressing,exceptions,handles,to,discard,state,object,discard,state
StateUtil -> public static void bestEffortDiscardAllStateObjects( 			Iterable<? extends StateObject> handlesToDiscard) throws Exception;1472663401;Iterates through the passed state handles and calls discardState() on each handle that is not null. All_occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.__@param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values._@throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration;public static void bestEffortDiscardAllStateObjects(_			Iterable<? extends StateObject> handlesToDiscard) throws Exception {__		if (handlesToDiscard != null) {__			Exception suppressedExceptions = null___			for (StateObject state : handlesToDiscard) {__				if (state != null) {_					try {_						state.discardState()__					} catch (Exception ex) {_						_						if (suppressedExceptions == null) {_							suppressedExceptions = new Exception(ex)__						}_						suppressedExceptions.addSuppressed(ex)__					}_				}_			}__			if (suppressedExceptions != null) {_				throw suppressedExceptions__			}_		}_	};iterates,through,the,passed,state,handles,and,calls,discard,state,on,each,handle,that,is,not,null,all,occurring,exceptions,are,suppressed,and,collected,until,the,iteration,is,over,and,emitted,as,a,single,exception,param,handles,to,discard,state,handles,to,discard,passed,iterable,is,allowed,to,deliver,null,values,throws,exception,exception,that,is,a,collection,of,all,suppressed,exceptions,that,were,caught,during,iteration;public,static,void,best,effort,discard,all,state,objects,iterable,extends,state,object,handles,to,discard,throws,exception,if,handles,to,discard,null,exception,suppressed,exceptions,null,for,state,object,state,handles,to,discard,if,state,null,try,state,discard,state,catch,exception,ex,if,suppressed,exceptions,null,suppressed,exceptions,new,exception,ex,suppressed,exceptions,add,suppressed,ex,if,suppressed,exceptions,null,throw,suppressed,exceptions
StateUtil -> public static void bestEffortDiscardAllStateObjects( 			Iterable<? extends StateObject> handlesToDiscard) throws Exception;1474905901;Iterates through the passed state handles and calls discardState() on each handle that is not null. All_occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.__@param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values._@throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration;public static void bestEffortDiscardAllStateObjects(_			Iterable<? extends StateObject> handlesToDiscard) throws Exception {__		if (handlesToDiscard != null) {__			Exception suppressedExceptions = null___			for (StateObject state : handlesToDiscard) {__				if (state != null) {_					try {_						state.discardState()__					} catch (Exception ex) {_						_						if (suppressedExceptions == null) {_							suppressedExceptions = new Exception(ex)__						}_						suppressedExceptions.addSuppressed(ex)__					}_				}_			}__			if (suppressedExceptions != null) {_				throw suppressedExceptions__			}_		}_	};iterates,through,the,passed,state,handles,and,calls,discard,state,on,each,handle,that,is,not,null,all,occurring,exceptions,are,suppressed,and,collected,until,the,iteration,is,over,and,emitted,as,a,single,exception,param,handles,to,discard,state,handles,to,discard,passed,iterable,is,allowed,to,deliver,null,values,throws,exception,exception,that,is,a,collection,of,all,suppressed,exceptions,that,were,caught,during,iteration;public,static,void,best,effort,discard,all,state,objects,iterable,extends,state,object,handles,to,discard,throws,exception,if,handles,to,discard,null,exception,suppressed,exceptions,null,for,state,object,state,handles,to,discard,if,state,null,try,state,discard,state,catch,exception,ex,if,suppressed,exceptions,null,suppressed,exceptions,new,exception,ex,suppressed,exceptions,add,suppressed,ex,if,suppressed,exceptions,null,throw,suppressed,exceptions
StateUtil -> public static void bestEffortDiscardAllStateObjects( 			Iterable<? extends StateObject> handlesToDiscard) throws Exception;1475231926;Iterates through the passed state handles and calls discardState() on each handle that is not null. All_occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.__@param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values._@throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration;public static void bestEffortDiscardAllStateObjects(_			Iterable<? extends StateObject> handlesToDiscard) throws Exception {__		if (handlesToDiscard != null) {__			Exception suppressedExceptions = null___			for (StateObject state : handlesToDiscard) {__				if (state != null) {_					try {_						state.discardState()__					} catch (Exception ex) {_						_						if (suppressedExceptions == null) {_							suppressedExceptions = new Exception(ex)__						}_						suppressedExceptions.addSuppressed(ex)__					}_				}_			}__			if (suppressedExceptions != null) {_				throw suppressedExceptions__			}_		}_	};iterates,through,the,passed,state,handles,and,calls,discard,state,on,each,handle,that,is,not,null,all,occurring,exceptions,are,suppressed,and,collected,until,the,iteration,is,over,and,emitted,as,a,single,exception,param,handles,to,discard,state,handles,to,discard,passed,iterable,is,allowed,to,deliver,null,values,throws,exception,exception,that,is,a,collection,of,all,suppressed,exceptions,that,were,caught,during,iteration;public,static,void,best,effort,discard,all,state,objects,iterable,extends,state,object,handles,to,discard,throws,exception,if,handles,to,discard,null,exception,suppressed,exceptions,null,for,state,object,state,handles,to,discard,if,state,null,try,state,discard,state,catch,exception,ex,if,suppressed,exceptions,null,suppressed,exceptions,new,exception,ex,suppressed,exceptions,add,suppressed,ex,if,suppressed,exceptions,null,throw,suppressed,exceptions
StateUtil -> public static void bestEffortDiscardAllStateObjects( 			Iterable<? extends StateObject> handlesToDiscard) throws Exception;1485189169;Iterates through the passed state handles and calls discardState() on each handle that is not null. All_occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.__@param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values._@throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration;public static void bestEffortDiscardAllStateObjects(_			Iterable<? extends StateObject> handlesToDiscard) throws Exception {__		if (handlesToDiscard != null) {__			Exception suppressedExceptions = null___			for (StateObject state : handlesToDiscard) {__				if (state != null) {_					try {_						state.discardState()__					} catch (Exception ex) {_						_						if (suppressedExceptions == null) {_							suppressedExceptions = new Exception(ex)__						}_						suppressedExceptions.addSuppressed(ex)__					}_				}_			}__			if (suppressedExceptions != null) {_				throw suppressedExceptions__			}_		}_	};iterates,through,the,passed,state,handles,and,calls,discard,state,on,each,handle,that,is,not,null,all,occurring,exceptions,are,suppressed,and,collected,until,the,iteration,is,over,and,emitted,as,a,single,exception,param,handles,to,discard,state,handles,to,discard,passed,iterable,is,allowed,to,deliver,null,values,throws,exception,exception,that,is,a,collection,of,all,suppressed,exceptions,that,were,caught,during,iteration;public,static,void,best,effort,discard,all,state,objects,iterable,extends,state,object,handles,to,discard,throws,exception,if,handles,to,discard,null,exception,suppressed,exceptions,null,for,state,object,state,handles,to,discard,if,state,null,try,state,discard,state,catch,exception,ex,if,suppressed,exceptions,null,suppressed,exceptions,new,exception,ex,suppressed,exceptions,add,suppressed,ex,if,suppressed,exceptions,null,throw,suppressed,exceptions
StateUtil -> public static void bestEffortDiscardAllStateObjects( 			Iterable<? extends StateObject> handlesToDiscard) throws Exception;1485354241;Iterates through the passed state handles and calls discardState() on each handle that is not null. All_occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.__@param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values._@throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration;public static void bestEffortDiscardAllStateObjects(_			Iterable<? extends StateObject> handlesToDiscard) throws Exception {__		if (handlesToDiscard != null) {__			Exception suppressedExceptions = null___			for (StateObject state : handlesToDiscard) {__				if (state != null) {_					try {_						state.discardState()__					} catch (Exception ex) {_						_						if (suppressedExceptions == null) {_							suppressedExceptions = new Exception(ex)__						}_						suppressedExceptions.addSuppressed(ex)__					}_				}_			}__			if (suppressedExceptions != null) {_				throw suppressedExceptions__			}_		}_	};iterates,through,the,passed,state,handles,and,calls,discard,state,on,each,handle,that,is,not,null,all,occurring,exceptions,are,suppressed,and,collected,until,the,iteration,is,over,and,emitted,as,a,single,exception,param,handles,to,discard,state,handles,to,discard,passed,iterable,is,allowed,to,deliver,null,values,throws,exception,exception,that,is,a,collection,of,all,suppressed,exceptions,that,were,caught,during,iteration;public,static,void,best,effort,discard,all,state,objects,iterable,extends,state,object,handles,to,discard,throws,exception,if,handles,to,discard,null,exception,suppressed,exceptions,null,for,state,object,state,handles,to,discard,if,state,null,try,state,discard,state,catch,exception,ex,if,suppressed,exceptions,null,suppressed,exceptions,new,exception,ex,suppressed,exceptions,add,suppressed,ex,if,suppressed,exceptions,null,throw,suppressed,exceptions
StateUtil -> public static void bestEffortDiscardAllStateObjects( 			Iterable<? extends StateObject> handlesToDiscard) throws Exception;1488304750;Iterates through the passed state handles and calls discardState() on each handle that is not null. All_occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.__@param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values._@throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration;public static void bestEffortDiscardAllStateObjects(_			Iterable<? extends StateObject> handlesToDiscard) throws Exception {__		if (handlesToDiscard != null) {_			Exception exception = null___			for (StateObject state : handlesToDiscard) {__				if (state != null) {_					try {_						state.discardState()__					}_					catch (Exception ex) {_						exception = ExceptionUtils.firstOrSuppressed(ex, exception)__					}_				}_			}__			if (exception != null) {_				throw exception__			}_		}_	};iterates,through,the,passed,state,handles,and,calls,discard,state,on,each,handle,that,is,not,null,all,occurring,exceptions,are,suppressed,and,collected,until,the,iteration,is,over,and,emitted,as,a,single,exception,param,handles,to,discard,state,handles,to,discard,passed,iterable,is,allowed,to,deliver,null,values,throws,exception,exception,that,is,a,collection,of,all,suppressed,exceptions,that,were,caught,during,iteration;public,static,void,best,effort,discard,all,state,objects,iterable,extends,state,object,handles,to,discard,throws,exception,if,handles,to,discard,null,exception,exception,null,for,state,object,state,handles,to,discard,if,state,null,try,state,discard,state,catch,exception,ex,exception,exception,utils,first,or,suppressed,ex,exception,if,exception,null,throw,exception
StateUtil -> public static void bestEffortDiscardAllStateObjects( 			Iterable<? extends StateObject> handlesToDiscard) throws Exception;1493994606;Iterates through the passed state handles and calls discardState() on each handle that is not null. All_occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.__@param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values._@throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration;public static void bestEffortDiscardAllStateObjects(_			Iterable<? extends StateObject> handlesToDiscard) throws Exception {__		if (handlesToDiscard != null) {_			Exception exception = null___			for (StateObject state : handlesToDiscard) {__				if (state != null) {_					try {_						state.discardState()__					}_					catch (Exception ex) {_						exception = ExceptionUtils.firstOrSuppressed(ex, exception)__					}_				}_			}__			if (exception != null) {_				throw exception__			}_		}_	};iterates,through,the,passed,state,handles,and,calls,discard,state,on,each,handle,that,is,not,null,all,occurring,exceptions,are,suppressed,and,collected,until,the,iteration,is,over,and,emitted,as,a,single,exception,param,handles,to,discard,state,handles,to,discard,passed,iterable,is,allowed,to,deliver,null,values,throws,exception,exception,that,is,a,collection,of,all,suppressed,exceptions,that,were,caught,during,iteration;public,static,void,best,effort,discard,all,state,objects,iterable,extends,state,object,handles,to,discard,throws,exception,if,handles,to,discard,null,exception,exception,null,for,state,object,state,handles,to,discard,if,state,null,try,state,discard,state,catch,exception,ex,exception,exception,utils,first,or,suppressed,ex,exception,if,exception,null,throw,exception
