commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Returns the size of a state object  *  * @param handle The handle to the retrieved state  */ ;/**  * Returns the size of a state object  *  * @param handle The handle to the retrieved state  */ public static long getStateSize(StateObject handle) {     return handle == null ? 0 : handle.getStateSize(). }
true;public,static;1;4;/**  * Iterates through the passed state handles and calls discardState() on each handle that is not null. All  * occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.  *  * @param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values.  * @throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration  */ ;/**  * Iterates through the passed state handles and calls discardState() on each handle that is not null. All  * occurring exceptions are suppressed and collected until the iteration is over and emitted as a single exception.  *  * @param handlesToDiscard State handles to discard. Passed iterable is allowed to deliver null values.  * @throws Exception exception that is a collection of all suppressed exceptions that were caught during iteration  */ public static void bestEffortDiscardAllStateObjects(Iterable<? extends StateObject> handlesToDiscard) throws Exception {     LambdaUtil.applyToAllWhileSuppressingExceptions(handlesToDiscard, StateObject::discardState). }
true;public,static;1;18;/**  * Discards the given state future by first trying to cancel it. If this is not possible, then  * the state object contained in the future is calculated and afterwards discarded.  *  * @param stateFuture to be discarded  * @throws Exception if the discard operation failed  */ ;/**  * Discards the given state future by first trying to cancel it. If this is not possible, then  * the state object contained in the future is calculated and afterwards discarded.  *  * @param stateFuture to be discarded  * @throws Exception if the discard operation failed  */ public static void discardStateFuture(RunnableFuture<? extends StateObject> stateFuture) throws Exception {     if (null != stateFuture) {         if (!stateFuture.cancel(true)) {             try {                 // We attempt to get a result, in case the future completed before cancellation.                 StateObject stateObject = FutureUtils.runIfNotDoneAndGet(stateFuture).                 if (null != stateObject) {                     stateObject.discardState().                 }             } catch (CancellationException | ExecutionException ex) {                 LOG.debug("Cancelled execution of snapshot future runnable. Cancellation produced the following " + "exception, which is expected an can be ignored.", ex).             }         }     } }
