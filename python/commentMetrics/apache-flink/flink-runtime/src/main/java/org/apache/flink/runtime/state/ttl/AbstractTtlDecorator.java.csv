commented;modifiers;parameterAmount;loc;comment;code
false;;1;3;;<V> V getUnexpired(TtlValue<V> ttlValue) {     return ttlValue == null || (expired(ttlValue) && !returnExpired) ? null : ttlValue.getUserValue(). }
false;;1;3;;<V> boolean expired(TtlValue<V> ttlValue) {     return TtlUtils.expired(ttlValue, ttl, timeProvider). }
false;;1;3;;<V> TtlValue<V> wrapWithTs(V value) {     return TtlUtils.wrapWithTs(value, timeProvider.currentTimestamp()). }
false;;1;3;;<V> TtlValue<V> rewrapWithNewTs(TtlValue<V> ttlValue) {     return wrapWithTs(ttlValue.getUserValue()). }
false;;3;7;;<SE extends Throwable, CE extends Throwable, CLE extends Throwable, V> V getWithTtlCheckAndUpdate(SupplierWithException<TtlValue<V>, SE> getter, ThrowingConsumer<TtlValue<V>, CE> updater, ThrowingRunnable<CLE> stateClear) throws SE, CE, CLE {     TtlValue<V> ttlValue = getWrappedWithTtlCheckAndUpdate(getter, updater, stateClear).     return ttlValue == null ? null : ttlValue.getUserValue(). }
false;;3;17;;<SE extends Throwable, CE extends Throwable, CLE extends Throwable, V> TtlValue<V> getWrappedWithTtlCheckAndUpdate(SupplierWithException<TtlValue<V>, SE> getter, ThrowingConsumer<TtlValue<V>, CE> updater, ThrowingRunnable<CLE> stateClear) throws SE, CE, CLE {     TtlValue<V> ttlValue = getter.get().     if (ttlValue == null) {         return null.     } else if (expired(ttlValue)) {         stateClear.run().         if (!returnExpired) {             return null.         }     } else if (updateTsOnRead) {         updater.accept(rewrapWithNewTs(ttlValue)).     }     return ttlValue. }
