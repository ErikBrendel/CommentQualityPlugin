# id;timestamp;commentText;codeText;commentWords;codeWords
ScopeFormat -> public static String concat(CharacterFilter filter, Character delimiter, String... components);1469529015;Concatenates the given component names separated by the delimiter character. Additionally_the character filter is applied to all component names.__@param filter Character filter to be applied to the component names_@param delimiter Delimiter to separate component names_@param components Array of component names_@return The concatenated component name;public static String concat(CharacterFilter filter, Character delimiter, String... components) {_		StringBuilder sb = new StringBuilder()__		sb.append(filter.filterCharacters(components[0]))__		for (int x = 1_ x < components.length_ x++) {_			sb.append(delimiter)__			sb.append(filter.filterCharacters(components[x]))__		}_		return sb.toString()__	};concatenates,the,given,component,names,separated,by,the,delimiter,character,additionally,the,character,filter,is,applied,to,all,component,names,param,filter,character,filter,to,be,applied,to,the,component,names,param,delimiter,delimiter,to,separate,component,names,param,components,array,of,component,names,return,the,concatenated,component,name;public,static,string,concat,character,filter,filter,character,delimiter,string,components,string,builder,sb,new,string,builder,sb,append,filter,filter,characters,components,0,for,int,x,1,x,components,length,x,sb,append,delimiter,sb,append,filter,filter,characters,components,x,return,sb,to,string
ScopeFormat -> public static String concat(CharacterFilter filter, Character delimiter, String... components);1471855975;Concatenates the given component names separated by the delimiter character. Additionally_the character filter is applied to all component names.__@param filter Character filter to be applied to the component names_@param delimiter Delimiter to separate component names_@param components Array of component names_@return The concatenated component name;public static String concat(CharacterFilter filter, Character delimiter, String... components) {_		StringBuilder sb = new StringBuilder()__		sb.append(filter.filterCharacters(components[0]))__		for (int x = 1_ x < components.length_ x++) {_			sb.append(delimiter)__			sb.append(filter.filterCharacters(components[x]))__		}_		return sb.toString()__	};concatenates,the,given,component,names,separated,by,the,delimiter,character,additionally,the,character,filter,is,applied,to,all,component,names,param,filter,character,filter,to,be,applied,to,the,component,names,param,delimiter,delimiter,to,separate,component,names,param,components,array,of,component,names,return,the,concatenated,component,name;public,static,string,concat,character,filter,filter,character,delimiter,string,components,string,builder,sb,new,string,builder,sb,append,filter,filter,characters,components,0,for,int,x,1,x,components,length,x,sb,append,delimiter,sb,append,filter,filter,characters,components,x,return,sb,to,string
ScopeFormat -> public static String concat(CharacterFilter filter, Character delimiter, String... components);1492770690;Concatenates the given component names separated by the delimiter character. Additionally_the character filter is applied to all component names.__@param filter Character filter to be applied to the component names_@param delimiter Delimiter to separate component names_@param components Array of component names_@return The concatenated component name;public static String concat(CharacterFilter filter, Character delimiter, String... components) {_		StringBuilder sb = new StringBuilder()__		sb.append(filter.filterCharacters(components[0]))__		for (int x = 1_ x < components.length_ x++) {_			sb.append(delimiter)__			sb.append(filter.filterCharacters(components[x]))__		}_		return sb.toString()__	};concatenates,the,given,component,names,separated,by,the,delimiter,character,additionally,the,character,filter,is,applied,to,all,component,names,param,filter,character,filter,to,be,applied,to,the,component,names,param,delimiter,delimiter,to,separate,component,names,param,components,array,of,component,names,return,the,concatenated,component,name;public,static,string,concat,character,filter,filter,character,delimiter,string,components,string,builder,sb,new,string,builder,sb,append,filter,filter,characters,components,0,for,int,x,1,x,components,length,x,sb,append,delimiter,sb,append,filter,filter,characters,components,x,return,sb,to,string
ScopeFormat -> public static String concat(CharacterFilter filter, Character delimiter, String... components);1496409235;Concatenates the given component names separated by the delimiter character. Additionally_the character filter is applied to all component names.__@param filter Character filter to be applied to the component names_@param delimiter Delimiter to separate component names_@param components Array of component names_@return The concatenated component name;public static String concat(CharacterFilter filter, Character delimiter, String... components) {_		StringBuilder sb = new StringBuilder()__		sb.append(filter.filterCharacters(components[0]))__		for (int x = 1_ x < components.length_ x++) {_			sb.append(delimiter)__			sb.append(filter.filterCharacters(components[x]))__		}_		return sb.toString()__	};concatenates,the,given,component,names,separated,by,the,delimiter,character,additionally,the,character,filter,is,applied,to,all,component,names,param,filter,character,filter,to,be,applied,to,the,component,names,param,delimiter,delimiter,to,separate,component,names,param,components,array,of,component,names,return,the,concatenated,component,name;public,static,string,concat,character,filter,filter,character,delimiter,string,components,string,builder,sb,new,string,builder,sb,append,filter,filter,characters,components,0,for,int,x,1,x,components,length,x,sb,append,delimiter,sb,append,filter,filter,characters,components,x,return,sb,to,string
ScopeFormat -> public static String concat(CharacterFilter filter, Character delimiter, String... components);1508844619;Concatenates the given component names separated by the delimiter character. Additionally_the character filter is applied to all component names.__@param filter Character filter to be applied to the component names_@param delimiter Delimiter to separate component names_@param components Array of component names_@return The concatenated component name;public static String concat(CharacterFilter filter, Character delimiter, String... components) {_		StringBuilder sb = new StringBuilder()__		sb.append(filter.filterCharacters(components[0]))__		for (int x = 1_ x < components.length_ x++) {_			sb.append(delimiter)__			sb.append(filter.filterCharacters(components[x]))__		}_		return sb.toString()__	};concatenates,the,given,component,names,separated,by,the,delimiter,character,additionally,the,character,filter,is,applied,to,all,component,names,param,filter,character,filter,to,be,applied,to,the,component,names,param,delimiter,delimiter,to,separate,component,names,param,components,array,of,component,names,return,the,concatenated,component,name;public,static,string,concat,character,filter,filter,character,delimiter,string,components,string,builder,sb,new,string,builder,sb,append,filter,filter,characters,components,0,for,int,x,1,x,components,length,x,sb,append,delimiter,sb,append,filter,filter,characters,components,x,return,sb,to,string
ScopeFormat -> public static String asVariable(String scope);1469529015;Formats the given string to resemble a scope variable.__@param scope The string to format_@return The formatted string;public static String asVariable(String scope) {_		return SCOPE_VARIABLE_PREFIX + scope + SCOPE_VARIABLE_SUFFIX__	};formats,the,given,string,to,resemble,a,scope,variable,param,scope,the,string,to,format,return,the,formatted,string;public,static,string,as,variable,string,scope,return,scope
ScopeFormat -> public static String asVariable(String scope);1471855975;Formats the given string to resemble a scope variable.__@param scope The string to format_@return The formatted string;public static String asVariable(String scope) {_		return SCOPE_VARIABLE_PREFIX + scope + SCOPE_VARIABLE_SUFFIX__	};formats,the,given,string,to,resemble,a,scope,variable,param,scope,the,string,to,format,return,the,formatted,string;public,static,string,as,variable,string,scope,return,scope
ScopeFormat -> public static String asVariable(String scope);1492770690;Formats the given string to resemble a scope variable.__@param scope The string to format_@return The formatted string;public static String asVariable(String scope) {_		return SCOPE_VARIABLE_PREFIX + scope + SCOPE_VARIABLE_SUFFIX__	};formats,the,given,string,to,resemble,a,scope,variable,param,scope,the,string,to,format,return,the,formatted,string;public,static,string,as,variable,string,scope,return,scope
ScopeFormat -> public static String asVariable(String scope);1496409235;Formats the given string to resemble a scope variable.__@param scope The string to format_@return The formatted string;public static String asVariable(String scope) {_		return SCOPE_VARIABLE_PREFIX + scope + SCOPE_VARIABLE_SUFFIX__	};formats,the,given,string,to,resemble,a,scope,variable,param,scope,the,string,to,format,return,the,formatted,string;public,static,string,as,variable,string,scope,return,scope
ScopeFormat -> public static String asVariable(String scope);1508844619;Formats the given string to resemble a scope variable.__@param scope The string to format_@return The formatted string;public static String asVariable(String scope) {_		return SCOPE_VARIABLE_PREFIX + scope + SCOPE_VARIABLE_SUFFIX__	};formats,the,given,string,to,resemble,a,scope,variable,param,scope,the,string,to,format,return,the,formatted,string;public,static,string,as,variable,string,scope,return,scope
