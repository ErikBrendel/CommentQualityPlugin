commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public String filterCharacters(String input) {     return input. }
false;public;0;3;;// ------------------------------------------------------------------------ public String format() {     return format. }
false;protected,final;0;5;;protected final String[] copyTemplate() {     String[] copy = new String[template.length].     System.arraycopy(template, 0, copy, 0, template.length).     return copy. }
false;protected,final;2;7;;protected final String[] bindVariables(String[] template, String[] values) {     final int len = templatePos.length.     for (int i = 0. i < len. i++) {         template[templatePos[i]] = values[valuePos[i]].     }     return template. }
false;public;0;4;;// ------------------------------------------------------------------------ @Override public String toString() {     return "ScopeFormat '" + format + '\''. }
true;public,static;1;3;/**  * Formats the given string to resemble a scope variable.  *  * @param scope The string to format  * @return The formatted string  */ ;// ------------------------------------------------------------------------ // Utilities // ------------------------------------------------------------------------ /**  * Formats the given string to resemble a scope variable.  *  * @param scope The string to format  * @return The formatted string  */ public static String asVariable(String scope) {     return SCOPE_VARIABLE_PREFIX + scope + SCOPE_VARIABLE_SUFFIX. }
false;public,static;1;3;;public static String concat(String... components) {     return concat(defaultFilter, '.', components). }
false;public,static;2;3;;public static String concat(CharacterFilter filter, String... components) {     return concat(filter, '.', components). }
false;public,static;2;3;;public static String concat(Character delimiter, String... components) {     return concat(defaultFilter, delimiter, components). }
true;public,static;3;9;/**  * Concatenates the given component names separated by the delimiter character. Additionally  * the character filter is applied to all component names.  *  * @param filter Character filter to be applied to the component names  * @param delimiter Delimiter to separate component names  * @param components Array of component names  * @return The concatenated component name  */ ;/**  * Concatenates the given component names separated by the delimiter character. Additionally  * the character filter is applied to all component names.  *  * @param filter Character filter to be applied to the component names  * @param delimiter Delimiter to separate component names  * @param components Array of component names  * @return The concatenated component name  */ public static String concat(CharacterFilter filter, Character delimiter, String... components) {     StringBuilder sb = new StringBuilder().     sb.append(filter.filterCharacters(components[0])).     for (int x = 1. x < components.length. x++) {         sb.append(delimiter).         sb.append(filter.filterCharacters(components[x])).     }     return sb.toString(). }
false;protected,static;1;4;;protected static String valueOrNull(Object value) {     return (value == null || (value instanceof String && ((String) value).isEmpty())) ? "null" : value.toString(). }
false;protected,static;1;7;;protected static HashMap<String, Integer> arrayToMap(String[] array) {     HashMap<String, Integer> map = new HashMap<>(array.length).     for (int i = 0. i < array.length. i++) {         map.put(array[i], i).     }     return map. }
false;private,static;1;8;;private static int[] integerListToArray(List<Integer> list) {     int[] array = new int[list.size()].     int pos = 0.     for (Integer i : list) {         array[pos++] = i.     }     return array. }
