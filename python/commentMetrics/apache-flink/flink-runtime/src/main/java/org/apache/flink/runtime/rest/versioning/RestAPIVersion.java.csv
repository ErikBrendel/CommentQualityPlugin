commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the URL version prefix (e.g. "v1") for this version.  *  * @return URL version prefix  */ ;/**  * Returns the URL version prefix (e.g. "v1") for this version.  *  * @return URL version prefix  */ public String getURLVersionPrefix() {     return name().toLowerCase(). }
true;public;0;3;/**  * Returns whether this version is the default REST API version.  *  * @return whether this version is the default  */ ;/**  * Returns whether this version is the default REST API version.  *  * @return whether this version is the default  */ public boolean isDefaultVersion() {     return isDefaultVersion. }
true;public,static;1;3;/**  * Converts the given URL version prefix (e.g "v1") to a {@link RestAPIVersion}.  *  * @param prefix prefix to converted  * @return REST API version matching the prefix  * @throws IllegalArgumentException if the prefix doesn't match any version  */ ;/**  * Converts the given URL version prefix (e.g "v1") to a {@link RestAPIVersion}.  *  * @param prefix prefix to converted  * @return REST API version matching the prefix  * @throws IllegalArgumentException if the prefix doesn't match any version  */ public static RestAPIVersion fromURLVersionPrefix(String prefix) {     return valueOf(prefix.toUpperCase()). }
true;public,static;1;3;/**  * Returns the latest version from the given collection.  *  * @param versions possible candidates  * @return latest version  */ ;/**  * Returns the latest version from the given collection.  *  * @param versions possible candidates  * @return latest version  */ public static RestAPIVersion getLatestVersion(Collection<RestAPIVersion> versions) {     return Collections.max(versions, new RestAPIVersionComparator()). }
false;public;2;4;;@Override public int compare(RestAPIVersion o1, RestAPIVersion o2) {     return Integer.compare(o1.versionNumber, o2.versionNumber). }
