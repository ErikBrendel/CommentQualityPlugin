commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Discards the state referred to and solemnly owned by this handle, to free up resources in  * the persistent storage. This method is called when the state represented by this  * object will not be used any more.  */ ;/**  * Discards the state referred to and solemnly owned by this handle, to free up resources in  * the persistent storage. This method is called when the state represented by this  * object will not be used any more.  */ void discardState() throws Exception.
true;;0;1;/**  * Returns the size of the state in bytes. If the size is not known, this  * method should return {@code 0}.  *  * <p>The values produced by this method are only used for informational purposes and  * for metrics/monitoring. If this method returns wrong values, the checkpoints and recovery  * will still behave correctly. However, efficiency may be impacted (wrong space pre-allocation)  * and functionality that depends on metrics (like monitoring) will be impacted.  *  * <p>Note for implementors: This method should not perform any I/O operations  * while obtaining the state size (hence it does not declare throwing an {@code IOException}).  * Instead, the state size should be stored in the state object, or should be computable from  * the state stored in this object.  * The reason is that this method is called frequently by several parts of the checkpointing  * and issuing I/O requests from this method accumulates a heavy I/O load on the storage  * system at higher scale.  *  * @return Size of the state in bytes.  */ ;/**  * Returns the size of the state in bytes. If the size is not known, this  * method should return {@code 0}.  *  * <p>The values produced by this method are only used for informational purposes and  * for metrics/monitoring. If this method returns wrong values, the checkpoints and recovery  * will still behave correctly. However, efficiency may be impacted (wrong space pre-allocation)  * and functionality that depends on metrics (like monitoring) will be impacted.  *  * <p>Note for implementors: This method should not perform any I/O operations  * while obtaining the state size (hence it does not declare throwing an {@code IOException}).  * Instead, the state size should be stored in the state object, or should be computable from  * the state stored in this object.  * The reason is that this method is called frequently by several parts of the checkpointing  * and issuing I/O requests from this method accumulates a heavy I/O load on the storage  * system at higher scale.  *  * @return Size of the state in bytes.  */ long getStateSize().
