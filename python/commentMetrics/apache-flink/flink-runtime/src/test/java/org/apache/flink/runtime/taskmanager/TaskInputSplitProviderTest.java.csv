commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testRequestNextInputSplitWithInvalidExecutionID() throws InputSplitProviderException {     final JobID jobID = new JobID().     final JobVertexID vertexID = new JobVertexID().     final ExecutionAttemptID executionID = new ExecutionAttemptID().     final FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS).     final ActorGateway gateway = new NullInputSplitGateway().     final TaskInputSplitProvider provider = new TaskInputSplitProvider(gateway, jobID, vertexID, executionID, timeout).     // The jobManager will return a     InputSplit nextInputSplit = provider.getNextInputSplit(getClass().getClassLoader()).     assertTrue(nextInputSplit == null). }
false;public;1;8;;@Override public Object handleMessage(Object message) throws Exception {     if (message instanceof JobManagerMessages.RequestNextInputSplit) {         return new JobManagerMessages.NextInputSplit(null).     } else {         throw new Exception("Invalid message type").     } }
