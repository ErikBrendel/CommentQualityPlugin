# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1466687530;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"Test job",_			new Configuration(),_			ExecutionConfigTest.getSerializedConfig(),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,execution,config,test,get,serialized,config,akka,utils,get,default,timeout,controllable,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1467726586;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"Test job",_			new Configuration(),_			ExecutionConfigTest.getSerializedConfig(),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,execution,config,test,get,serialized,config,akka,utils,get,default,timeout,controllable,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1467729094;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1468274438;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1477521996;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1477937801;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1477989375;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1479852017;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1482522863;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1486647395;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1488453790;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1493831843;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1493831843;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1500811086;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1500811755;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1500813010;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Deadline deadline = timeout.fromNow()___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Await.ready(controllableRestartStrategy.getReachedCanRestart(), deadline.timeLeft())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		Await.ready(controllableRestartStrategy.getRestartDone(), deadline.timeLeft())___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,deadline,deadline,timeout,from,now,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,await,ready,controllable,restart,strategy,get,reached,can,restart,deadline,time,left,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,await,ready,controllable,restart,strategy,get,restart,done,deadline,time,left,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1500814716;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1502356673;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1509631297;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1513201070;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1513261599;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1515588319;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1516812618;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1528875757;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1539269955;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1539269955;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1539269955;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1539269955;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1539269955;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1542451440;Tests that a suspend call while restarting a job, will abort the restarting.__@throws Exception;@Test_	public void testSuspendWhileRestarting() throws Exception {_		final Time timeout = Time.of(1, TimeUnit.MINUTES)___		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		ControllableRestartStrategy controllableRestartStrategy = new ControllableRestartStrategy(timeout)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.unlockRestart()___		controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting,throws,exception;test,public,void,test,suspend,while,restarting,throws,exception,final,time,timeout,time,of,1,time,unit,minutes,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,controllable,restart,strategy,controllable,restart,strategy,new,controllable,restart,strategy,timeout,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,controllable,restart,strategy,get,reached,can,restart,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,unlock,restart,controllable,restart,strategy,get,restart,done,await,timeout,to,milliseconds,time,unit,milliseconds,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1549365080;Tests that a suspend call while restarting a job, will abort the restarting.;@Test_	public void testSuspendWhileRestarting() throws Exception {__		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		TestRestartStrategy controllableRestartStrategy = TestRestartStrategy.manuallyTriggered()___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.start(mainThreadExecutor)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Assert.assertEquals(1, controllableRestartStrategy.getNumberOfQueuedActions())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.triggerAll().join()___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting;test,public,void,test,suspend,while,restarting,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,test,restart,strategy,controllable,restart,strategy,test,restart,strategy,manually,triggered,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,start,main,thread,executor,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,assert,assert,equals,1,controllable,restart,strategy,get,number,of,queued,actions,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,trigger,all,join,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1550220073;Tests that a suspend call while restarting a job, will abort the restarting.;@Test_	public void testSuspendWhileRestarting() throws Exception {__		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		TestRestartStrategy controllableRestartStrategy = TestRestartStrategy.manuallyTriggered()___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.start(mainThreadExecutor)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Assert.assertEquals(1, controllableRestartStrategy.getNumberOfQueuedActions())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.triggerAll().join()___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting;test,public,void,test,suspend,while,restarting,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,test,restart,strategy,controllable,restart,strategy,test,restart,strategy,manually,triggered,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,start,main,thread,executor,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,assert,assert,equals,1,controllable,restart,strategy,get,number,of,queued,actions,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,trigger,all,join,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1550654143;Tests that a suspend call while restarting a job, will abort the restarting.;@Test_	public void testSuspendWhileRestarting() throws Exception {__		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		TestRestartStrategy controllableRestartStrategy = TestRestartStrategy.manuallyTriggered()___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.start(mainThreadExecutor)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Assert.assertEquals(1, controllableRestartStrategy.getNumberOfQueuedActions())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.triggerAll().join()___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting;test,public,void,test,suspend,while,restarting,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,test,restart,strategy,controllable,restart,strategy,test,restart,strategy,manually,triggered,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,start,main,thread,executor,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,assert,assert,equals,1,controllable,restart,strategy,get,number,of,queued,actions,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,trigger,all,join,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testSuspendWhileRestarting() throws Exception;1550683188;Tests that a suspend call while restarting a job, will abort the restarting.;@Test_	public void testSuspendWhileRestarting() throws Exception {__		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			NUM_TASKS)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task")__		sender.setInvokableClass(NoOpInvokable.class)__		sender.setParallelism(NUM_TASKS)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender)___		TestRestartStrategy controllableRestartStrategy = TestRestartStrategy.manuallyTriggered()___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			new JobID(),_			"Test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			controllableRestartStrategy,_			scheduler)___		eg.start(mainThreadExecutor)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()___		assertEquals(JobStatus.RUNNING, eg.getState())___		instance.markDead()___		Assert.assertEquals(1, controllableRestartStrategy.getNumberOfQueuedActions())___		assertEquals(JobStatus.RESTARTING, eg.getState())___		eg.suspend(new Exception("Test exception"))___		assertEquals(JobStatus.SUSPENDED, eg.getState())___		controllableRestartStrategy.triggerAll().join()___		assertEquals(JobStatus.SUSPENDED, eg.getState())__	};tests,that,a,suspend,call,while,restarting,a,job,will,abort,the,restarting;test,public,void,test,suspend,while,restarting,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task,sender,set,invokable,class,no,op,invokable,class,sender,set,parallelism,job,graph,job,graph,new,job,graph,pointwise,job,sender,test,restart,strategy,controllable,restart,strategy,test,restart,strategy,manually,triggered,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,controllable,restart,strategy,scheduler,eg,start,main,thread,executor,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,instance,mark,dead,assert,assert,equals,1,controllable,restart,strategy,get,number,of,queued,actions,assert,equals,job,status,restarting,eg,get,state,eg,suspend,new,exception,test,exception,assert,equals,job,status,suspended,eg,get,state,controllable,restart,strategy,trigger,all,join,assert,equals,job,status,suspended,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1455114877;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task1")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(1)___		JobVertex receiver = new JobVertex("Task2")__		receiver.setInvokableClass(Tasks.NoOpInvokable.class)__		receiver.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"test job",_			new Configuration(),_			AkkaUtils.getDefaultTimeout())__		eg.setNumberOfRetriesLeft(1)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()__		failedExecution.fail(new Exception("Test Exception"))___		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && eg.getState() != JobStatus.RUNNING) {_			Thread.sleep(100)__		}__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		deadline = timeout.fromNow()__		boolean success = false___		while (deadline.hasTimeLeft() && !success) {_			success = true___			for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_				if (vertex.getCurrentExecutionAttempt().getAssignedResource() == null) {_					success = false__					Thread.sleep(100)__					break__				} else {_					vertex.getCurrentExecutionAttempt().switchToRunning()__				}_			}_		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,1,job,vertex,receiver,new,job,vertex,task2,receiver,set,invokable,class,tasks,no,op,invokable,class,receiver,set,parallelism,1,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,akka,utils,get,default,timeout,eg,set,number,of,retries,left,1,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,deadline,deadline,timeout,from,now,while,deadline,has,time,left,eg,get,state,job,status,running,thread,sleep,100,assert,equals,job,status,running,eg,get,state,deadline,timeout,from,now,boolean,success,false,while,deadline,has,time,left,success,success,true,for,execution,vertex,vertex,eg,get,all,execution,vertices,if,vertex,get,current,execution,attempt,get,assigned,resource,null,success,false,thread,sleep,100,break,else,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1455548285;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task1")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(1)___		JobVertex receiver = new JobVertex("Task2")__		receiver.setInvokableClass(Tasks.NoOpInvokable.class)__		receiver.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"test job",_			new Configuration(),_			AkkaUtils.getDefaultTimeout(),_			new FixedDelayRestartStrategy(1, 1000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()__		failedExecution.fail(new Exception("Test Exception"))___		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && eg.getState() != JobStatus.RUNNING) {_			Thread.sleep(100)__		}__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		deadline = timeout.fromNow()__		boolean success = false___		while (deadline.hasTimeLeft() && !success) {_			success = true___			for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_				if (vertex.getCurrentExecutionAttempt().getAssignedResource() == null) {_					success = false__					Thread.sleep(100)__					break__				} else {_					vertex.getCurrentExecutionAttempt().switchToRunning()__				}_			}_		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,1,job,vertex,receiver,new,job,vertex,task2,receiver,set,invokable,class,tasks,no,op,invokable,class,receiver,set,parallelism,1,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,deadline,deadline,timeout,from,now,while,deadline,has,time,left,eg,get,state,job,status,running,thread,sleep,100,assert,equals,job,status,running,eg,get,state,deadline,timeout,from,now,boolean,success,false,while,deadline,has,time,left,success,success,true,for,execution,vertex,vertex,eg,get,all,execution,vertices,if,vertex,get,current,execution,attempt,get,assigned,resource,null,success,false,thread,sleep,100,break,else,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1456355141;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task1")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(1)___		JobVertex receiver = new JobVertex("Task2")__		receiver.setInvokableClass(Tasks.NoOpInvokable.class)__		receiver.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"test job",_			new Configuration(),_			AkkaUtils.getDefaultTimeout(),_			new FixedDelayRestartStrategy(1, 1000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && eg.getState() != JobStatus.RUNNING) {_			Thread.sleep(100)__		}__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		deadline = timeout.fromNow()___		_		boolean success = false__		while (deadline.hasTimeLeft() && !success) {_			success = true___			for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_				if (vertex.getCurrentExecutionAttempt().getAssignedResource() == null) {_					success = false__					Thread.sleep(100)__					break__				}_			}_		}__		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,1,job,vertex,receiver,new,job,vertex,task2,receiver,set,invokable,class,tasks,no,op,invokable,class,receiver,set,parallelism,1,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,deadline,deadline,timeout,from,now,while,deadline,has,time,left,eg,get,state,job,status,running,thread,sleep,100,assert,equals,job,status,running,eg,get,state,deadline,timeout,from,now,boolean,success,false,while,deadline,has,time,left,success,success,true,for,execution,vertex,vertex,eg,get,all,execution,vertices,if,vertex,get,current,execution,attempt,get,assigned,resource,null,success,false,thread,sleep,100,break,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1456772768;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task1")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(1)___		JobVertex receiver = new JobVertex("Task2")__		receiver.setInvokableClass(Tasks.NoOpInvokable.class)__		receiver.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"test job",_			new Configuration(),_			AkkaUtils.getDefaultTimeout(),_			new FixedDelayRestartStrategy(1, 1000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && eg.getState() != JobStatus.RUNNING) {_			Thread.sleep(100)__		}__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		deadline = timeout.fromNow()___		_		boolean success = false__		while (deadline.hasTimeLeft() && !success) {_			success = true___			for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_				if (vertex.getCurrentExecutionAttempt().getAssignedResource() == null) {_					success = false__					Thread.sleep(100)__					break__				}_			}_		}__		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,1,job,vertex,receiver,new,job,vertex,task2,receiver,set,invokable,class,tasks,no,op,invokable,class,receiver,set,parallelism,1,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,deadline,deadline,timeout,from,now,while,deadline,has,time,left,eg,get,state,job,status,running,thread,sleep,100,assert,equals,job,status,running,eg,get,state,deadline,timeout,from,now,boolean,success,false,while,deadline,has,time,left,success,success,true,for,execution,vertex,vertex,eg,get,all,execution,vertices,if,vertex,get,current,execution,attempt,get,assigned,resource,null,success,false,thread,sleep,100,break,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1457521975;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task1")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(1)___		JobVertex receiver = new JobVertex("Task2")__		receiver.setInvokableClass(Tasks.NoOpInvokable.class)__		receiver.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"test job",_			new Configuration(),_			AkkaUtils.getDefaultTimeout(),_			new FixedDelayRestartStrategy(1, 1000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && eg.getState() != JobStatus.RUNNING) {_			Thread.sleep(100)__		}__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		deadline = timeout.fromNow()___		_		boolean success = false__		while (deadline.hasTimeLeft() && !success) {_			success = true___			for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_				if (vertex.getCurrentExecutionAttempt().getAssignedResource() == null) {_					success = false__					Thread.sleep(100)__					break__				}_			}_		}__		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,1,job,vertex,receiver,new,job,vertex,task2,receiver,set,invokable,class,tasks,no,op,invokable,class,receiver,set,parallelism,1,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,deadline,deadline,timeout,from,now,while,deadline,has,time,left,eg,get,state,job,status,running,thread,sleep,100,assert,equals,job,status,running,eg,get,state,deadline,timeout,from,now,boolean,success,false,while,deadline,has,time,left,success,success,true,for,execution,vertex,vertex,eg,get,all,execution,vertices,if,vertex,get,current,execution,attempt,get,assigned,resource,null,success,false,thread,sleep,100,break,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1457737669;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task1")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(1)___		JobVertex receiver = new JobVertex("Task2")__		receiver.setInvokableClass(Tasks.NoOpInvokable.class)__		receiver.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Pointwise job", new ExecutionConfig(), sender, receiver)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"test job",_			new Configuration(),_			new ExecutionConfig(),_			AkkaUtils.getDefaultTimeout(),_			new FixedDelayRestartStrategy(1, 1000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && eg.getState() != JobStatus.RUNNING) {_			Thread.sleep(100)__		}__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		deadline = timeout.fromNow()___		_		boolean success = false__		while (deadline.hasTimeLeft() && !success) {_			success = true___			for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_				if (vertex.getCurrentExecutionAttempt().getAssignedResource() == null) {_					success = false__					Thread.sleep(100)__					break__				}_			}_		}__		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,1,job,vertex,receiver,new,job,vertex,task2,receiver,set,invokable,class,tasks,no,op,invokable,class,receiver,set,parallelism,1,job,graph,job,graph,new,job,graph,pointwise,job,new,execution,config,sender,receiver,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,execution,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,deadline,deadline,timeout,from,now,while,deadline,has,time,left,eg,get,state,job,status,running,thread,sleep,100,assert,equals,job,status,running,eg,get,state,deadline,timeout,from,now,boolean,success,false,while,deadline,has,time,left,success,success,true,for,execution,vertex,vertex,eg,get,all,execution,vertices,if,vertex,get,current,execution,attempt,get,assigned,resource,null,success,false,thread,sleep,100,break,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1463155298;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task1")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(1)___		JobVertex receiver = new JobVertex("Task2")__		receiver.setInvokableClass(Tasks.NoOpInvokable.class)__		receiver.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"test job",_			new Configuration(),_			ExecutionConfigTest.getSerializedConfig(),_			AkkaUtils.getDefaultTimeout(),_			new FixedDelayRestartStrategy(1, 1000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && eg.getState() != JobStatus.RUNNING) {_			Thread.sleep(100)__		}__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		deadline = timeout.fromNow()___		_		boolean success = false__		while (deadline.hasTimeLeft() && !success) {_			success = true___			for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_				if (vertex.getCurrentExecutionAttempt().getAssignedResource() == null) {_					success = false__					Thread.sleep(100)__					break__				}_			}_		}__		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,1,job,vertex,receiver,new,job,vertex,task2,receiver,set,invokable,class,tasks,no,op,invokable,class,receiver,set,parallelism,1,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,execution,config,test,get,serialized,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,deadline,deadline,timeout,from,now,while,deadline,has,time,left,eg,get,state,job,status,running,thread,sleep,100,assert,equals,job,status,running,eg,get,state,deadline,timeout,from,now,boolean,success,false,while,deadline,has,time,left,success,success,true,for,execution,vertex,vertex,eg,get,all,execution,vertices,if,vertex,get,current,execution,attempt,get,assigned,resource,null,success,false,thread,sleep,100,break,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1466683104;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task1")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(1)___		JobVertex receiver = new JobVertex("Task2")__		receiver.setInvokableClass(Tasks.NoOpInvokable.class)__		receiver.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"test job",_			new Configuration(),_			ExecutionConfigTest.getSerializedConfig(),_			AkkaUtils.getDefaultTimeout(),_			new FixedDelayRestartStrategy(1, 1000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && eg.getState() != JobStatus.RUNNING) {_			Thread.sleep(100)__		}__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		deadline = timeout.fromNow()___		_		boolean success = false__		while (deadline.hasTimeLeft() && !success) {_			success = true___			for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_				if (vertex.getCurrentExecutionAttempt().getAssignedResource() == null) {_					success = false__					Thread.sleep(100)__					break__				}_			}_		}__		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,1,job,vertex,receiver,new,job,vertex,task2,receiver,set,invokable,class,tasks,no,op,invokable,class,receiver,set,parallelism,1,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,execution,config,test,get,serialized,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,deadline,deadline,timeout,from,now,while,deadline,has,time,left,eg,get,state,job,status,running,thread,sleep,100,assert,equals,job,status,running,eg,get,state,deadline,timeout,from,now,boolean,success,false,while,deadline,has,time,left,success,success,true,for,execution,vertex,vertex,eg,get,all,execution,vertices,if,vertex,get,current,execution,attempt,get,assigned,resource,null,success,false,thread,sleep,100,break,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1466687530;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task1")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(1)___		JobVertex receiver = new JobVertex("Task2")__		receiver.setInvokableClass(Tasks.NoOpInvokable.class)__		receiver.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"test job",_			new Configuration(),_			ExecutionConfigTest.getSerializedConfig(),_			AkkaUtils.getDefaultTimeout(),_			new FixedDelayRestartStrategy(1, 1000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && eg.getState() != JobStatus.RUNNING) {_			Thread.sleep(100)__		}__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		deadline = timeout.fromNow()___		_		boolean success = false__		while (deadline.hasTimeLeft() && !success) {_			success = true___			for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_				if (vertex.getCurrentExecutionAttempt().getAssignedResource() == null) {_					success = false__					Thread.sleep(100)__					break__				}_			}_		}__		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,1,job,vertex,receiver,new,job,vertex,task2,receiver,set,invokable,class,tasks,no,op,invokable,class,receiver,set,parallelism,1,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,execution,config,test,get,serialized,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,deadline,deadline,timeout,from,now,while,deadline,has,time,left,eg,get,state,job,status,running,thread,sleep,100,assert,equals,job,status,running,eg,get,state,deadline,timeout,from,now,boolean,success,false,while,deadline,has,time,left,success,success,true,for,execution,vertex,vertex,eg,get,all,execution,vertices,if,vertex,get,current,execution,attempt,get,assigned,resource,null,success,false,thread,sleep,100,break,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1467726586;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task1")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(1)___		JobVertex receiver = new JobVertex("Task2")__		receiver.setInvokableClass(Tasks.NoOpInvokable.class)__		receiver.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new FixedDelayRestartStrategy(1, 1000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && eg.getState() != JobStatus.RUNNING) {_			Thread.sleep(100)__		}__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		deadline = timeout.fromNow()___		_		boolean success = false__		while (deadline.hasTimeLeft() && !success) {_			success = true___			for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_				if (vertex.getCurrentExecutionAttempt().getAssignedResource() == null) {_					success = false__					Thread.sleep(100)__					break__				}_			}_		}__		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,1,job,vertex,receiver,new,job,vertex,task2,receiver,set,invokable,class,tasks,no,op,invokable,class,receiver,set,parallelism,1,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,deadline,deadline,timeout,from,now,while,deadline,has,time,left,eg,get,state,job,status,running,thread,sleep,100,assert,equals,job,status,running,eg,get,state,deadline,timeout,from,now,boolean,success,false,while,deadline,has,time,left,success,success,true,for,execution,vertex,vertex,eg,get,all,execution,vertices,if,vertex,get,current,execution,attempt,get,assigned,resource,null,success,false,thread,sleep,100,break,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1467729094;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = new JobVertex("Task1")__		sender.setInvokableClass(Tasks.NoOpInvokable.class)__		sender.setParallelism(1)___		JobVertex receiver = new JobVertex("Task2")__		receiver.setInvokableClass(Tasks.NoOpInvokable.class)__		receiver.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)___		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutionContext(),_			new JobID(),_			"test job",_			new Configuration(),_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new FixedDelayRestartStrategy(1, 1000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		Deadline deadline = timeout.fromNow()___		while (deadline.hasTimeLeft() && eg.getState() != JobStatus.RUNNING) {_			Thread.sleep(100)__		}__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		deadline = timeout.fromNow()___		_		boolean success = false__		while (deadline.hasTimeLeft() && !success) {_			success = true___			for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_				if (vertex.getCurrentExecutionAttempt().getAssignedResource() == null) {_					success = false__					Thread.sleep(100)__					break__				}_			}_		}__		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,sender,set,invokable,class,tasks,no,op,invokable,class,sender,set,parallelism,1,job,vertex,receiver,new,job,vertex,task2,receiver,set,invokable,class,tasks,no,op,invokable,class,receiver,set,parallelism,1,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,deadline,deadline,timeout,from,now,while,deadline,has,time,left,eg,get,state,job,status,running,thread,sleep,100,assert,equals,job,status,running,eg,get,state,deadline,timeout,from,now,boolean,success,false,while,deadline,has,time,left,success,success,true,for,execution,vertex,vertex,eg,get,all,execution,vertices,if,vertex,get,current,execution,attempt,get,assigned,resource,null,success,false,thread,sleep,100,break,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1468274438;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, Tasks.NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, Tasks.NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000))__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,tasks,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1477521996;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, Tasks.NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, Tasks.NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000))__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,tasks,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1477937801;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new SimpleActorGateway(TestingUtils.directExecutionContext()),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, Tasks.NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, Tasks.NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000))__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,tasks,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1477989375;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, Tasks.NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, Tasks.NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000))__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,tasks,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1479852017;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, Tasks.NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, Tasks.NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000))__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,tasks,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,tasks,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1482522863;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000))__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1486647395;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000))__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1488453790;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1493831843;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1493831843;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1500811086;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1500811755;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1500813010;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1500814716;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1502356673;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1509631297;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1513201070;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1513261599;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1515588319;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1516812618;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = newJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = newJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,new,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,new,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1528875757;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = ExecutionGraphTestUtils.createJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = ExecutionGraphTestUtils.createJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,execution,graph,test,utils,create,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,execution,graph,test,utils,create,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1539269955;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = ExecutionGraphTestUtils.createJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = ExecutionGraphTestUtils.createJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,execution,graph,test,utils,create,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,execution,graph,test,utils,create,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1539269955;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = ExecutionGraphTestUtils.createJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = ExecutionGraphTestUtils.createJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 0L), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,execution,graph,test,utils,create,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,execution,graph,test,utils,create,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,0l,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1539269955;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = ExecutionGraphTestUtils.createJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = ExecutionGraphTestUtils.createJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 0L), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,execution,graph,test,utils,create,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,execution,graph,test,utils,create,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,0l,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1539269955;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = ExecutionGraphTestUtils.createJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = ExecutionGraphTestUtils.createJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 0L), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,execution,graph,test,utils,create,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,execution,graph,test,utils,create,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,0l,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1539269955;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = ExecutionGraphTestUtils.createJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = ExecutionGraphTestUtils.createJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 0L), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,execution,graph,test,utils,create,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,execution,graph,test,utils,create,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,0l,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1542451440;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex sender = ExecutionGraphTestUtils.createJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = ExecutionGraphTestUtils.createJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 0L), scheduler)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		FiniteDuration timeout = new FiniteDuration(2, TimeUnit.MINUTES)___		waitForAsyncRestart(eg, timeout)___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		waitForAllResourcesToBeAssignedAfterAsyncRestart(eg, timeout.fromNow())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,sender,execution,graph,test,utils,create,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,execution,graph,test,utils,create,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,0l,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,finite,duration,timeout,new,finite,duration,2,time,unit,minutes,wait,for,async,restart,eg,timeout,assert,equals,job,status,running,eg,get,state,wait,for,all,resources,to,be,assigned,after,async,restart,eg,timeout,from,now,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1549365080;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		TestRestartStrategy restartStrategy = TestRestartStrategy.directExecuting()___		JobVertex sender = ExecutionGraphTestUtils.createJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = ExecutionGraphTestUtils.createJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(restartStrategy, scheduler)__		eg.start(mainThreadExecutor)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.failSync(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.failSync(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,test,restart,strategy,restart,strategy,test,restart,strategy,direct,executing,job,vertex,sender,execution,graph,test,utils,create,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,execution,graph,test,utils,create,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,restart,strategy,scheduler,eg,start,main,thread,executor,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,sync,new,exception,test,exception,failed,execution,canceling,complete,assert,equals,job,status,running,eg,get,state,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,sync,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1550220073;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		TestRestartStrategy restartStrategy = TestRestartStrategy.directExecuting()___		JobVertex sender = ExecutionGraphTestUtils.createJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = ExecutionGraphTestUtils.createJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(restartStrategy, scheduler)__		eg.start(mainThreadExecutor)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,test,restart,strategy,restart,strategy,test,restart,strategy,direct,executing,job,vertex,sender,execution,graph,test,utils,create,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,execution,graph,test,utils,create,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,restart,strategy,scheduler,eg,start,main,thread,executor,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,assert,equals,job,status,running,eg,get,state,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1550654143;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		TestRestartStrategy restartStrategy = TestRestartStrategy.directExecuting()___		JobVertex sender = ExecutionGraphTestUtils.createJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = ExecutionGraphTestUtils.createJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(restartStrategy, scheduler)__		eg.start(mainThreadExecutor)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.cancelingComplete()___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,test,restart,strategy,restart,strategy,test,restart,strategy,direct,executing,job,vertex,sender,execution,graph,test,utils,create,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,execution,graph,test,utils,create,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,restart,strategy,scheduler,eg,start,main,thread,executor,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,canceling,complete,assert,equals,job,status,running,eg,get,state,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailingExecutionAfterRestart() throws Exception;1550683188;Tests that a failing execution does not affect a restarted job. This is important if a_callback handler fails an execution after it has already reached a final state and the job_has been restarted.;@Test_	public void testFailingExecutionAfterRestart() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		TestRestartStrategy restartStrategy = TestRestartStrategy.directExecuting()___		JobVertex sender = ExecutionGraphTestUtils.createJobVertex("Task1", 1, NoOpInvokable.class)__		JobVertex receiver = ExecutionGraphTestUtils.createJobVertex("Task2", 1, NoOpInvokable.class)__		JobGraph jobGraph = new JobGraph("Pointwise job", sender, receiver)__		ExecutionGraph eg = newExecutionGraph(restartStrategy, scheduler)__		eg.start(mainThreadExecutor)__		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		Iterator<ExecutionVertex> executionVertices = eg.getAllExecutionVertices().iterator()___		Execution finishedExecution = executionVertices.next().getCurrentExecutionAttempt()__		Execution failedExecution = executionVertices.next().getCurrentExecutionAttempt()___		finishedExecution.markFinished()___		failedExecution.fail(new Exception("Test Exception"))__		failedExecution.completeCancelling()___		assertEquals(JobStatus.RUNNING, eg.getState())___		_		for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {_			assertNotNull("No assigned resource (test instability).", vertex.getCurrentAssignedResource())__			vertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		finishedExecution.fail(new Exception("This should have no effect"))___		for (ExecutionVertex vertex: eg.getAllExecutionVertices()) {_			vertex.getCurrentExecutionAttempt().markFinished()__		}__		_		assertEquals(ExecutionState.FINISHED, finishedExecution.getState())___		assertEquals(JobStatus.FINISHED, eg.getState())__	};tests,that,a,failing,execution,does,not,affect,a,restarted,job,this,is,important,if,a,callback,handler,fails,an,execution,after,it,has,already,reached,a,final,state,and,the,job,has,been,restarted;test,public,void,test,failing,execution,after,restart,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,test,restart,strategy,restart,strategy,test,restart,strategy,direct,executing,job,vertex,sender,execution,graph,test,utils,create,job,vertex,task1,1,no,op,invokable,class,job,vertex,receiver,execution,graph,test,utils,create,job,vertex,task2,1,no,op,invokable,class,job,graph,job,graph,new,job,graph,pointwise,job,sender,receiver,execution,graph,eg,new,execution,graph,restart,strategy,scheduler,eg,start,main,thread,executor,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,iterator,execution,vertex,execution,vertices,eg,get,all,execution,vertices,iterator,execution,finished,execution,execution,vertices,next,get,current,execution,attempt,execution,failed,execution,execution,vertices,next,get,current,execution,attempt,finished,execution,mark,finished,failed,execution,fail,new,exception,test,exception,failed,execution,complete,cancelling,assert,equals,job,status,running,eg,get,state,for,execution,vertex,vertex,eg,get,all,execution,vertices,assert,not,null,no,assigned,resource,test,instability,vertex,get,current,assigned,resource,vertex,get,current,execution,attempt,switch,to,running,finished,execution,fail,new,exception,this,should,have,no,effect,for,execution,vertex,vertex,eg,get,all,execution,vertices,vertex,get,current,execution,attempt,mark,finished,assert,equals,execution,state,finished,finished,execution,get,state,assert,equals,job,status,finished,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1456772768;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setRestartStrategyConfiguration(RestartStrategies.fixedDelayRestart(_				Integer.MAX_VALUE, Integer.MAX_VALUE))___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,restart,strategy,configuration,restart,strategies,fixed,delay,restart,integer,integer,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1457521975;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setRestartStrategyConfiguration(RestartStrategies.fixedDelayRestart(_				Integer.MAX_VALUE, Integer.MAX_VALUE))___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,restart,strategy,configuration,restart,strategies,fixed,delay,restart,integer,integer,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1457737669;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Test Job", new ExecutionConfig(), vertex)__		jobGraph.getExecutionConfig().setRestartStrategy(RestartStrategies.fixedDelayRestart(_				Integer.MAX_VALUE, Integer.MAX_VALUE))___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				new ExecutionConfig(),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,job,graph,job,graph,new,job,graph,test,job,new,execution,config,vertex,job,graph,get,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,execution,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1463155298;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				ExecutionConfigTest.getSerializedConfig(),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,execution,config,test,get,serialized,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1466683104;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				ExecutionConfigTest.getSerializedConfig(),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,execution,config,test,get,serialized,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1466687530;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				ExecutionConfigTest.getSerializedConfig(),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,execution,config,test,get,serialized,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1467726586;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1467729094;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1468274438;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, Tasks.NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,tasks,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1477521996;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, Tasks.NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy())___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,tasks,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1477937801;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, Tasks.NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy())___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,tasks,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1477989375;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, Tasks.NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy())___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,tasks,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1479852017;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, Tasks.NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy())___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,tasks,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1482522863;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy())___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1486647395;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy())___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1488453790;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1493831843;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#fail(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1493831843;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1500811086;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1500811755;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1500813010;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1500814716;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1502356673;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1509631297;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1513201070;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1513261599;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1515588319;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1516812618;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1528875757;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1539269955;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1539269955;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1539269955;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1539269955;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1539269955;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1542451440;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1549365080;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().failSync(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,sync,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1550220073;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1550654143;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionAfterCancel() throws Exception;1550683188;Tests that a graph is not restarted after cancellation via a call to_{@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is_released concurrently with cancellation.;@Test_	public void testFailExecutionAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()___		for (ExecutionVertex v : eg.getAllExecutionVertices()) {_			v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"))__		}__		assertEquals(JobStatus.CANCELED, eg.getTerminationFuture().get())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.completeCancelling()__		assertEquals(JobStatus.CANCELED, eg.getState())__	};tests,that,a,graph,is,not,restarted,after,cancellation,via,a,call,to,link,execution,graph,fail,global,throwable,this,can,happen,when,a,slot,is,released,concurrently,with,cancellation;test,public,void,test,fail,execution,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,for,execution,vertex,v,eg,get,all,execution,vertices,v,get,current,execution,attempt,fail,new,exception,test,exception,assert,equals,job,status,canceled,eg,get,termination,future,get,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,complete,cancelling,assert,equals,job,status,canceled,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testConcurrentFailureWhileRestarting() throws Exception;1539269955;Tests that the {@link ExecutionGraph} can handle concurrent failures while_being in the RESTARTING state.;@Test_	public void testConcurrentFailureWhileRestarting() throws Exception {_		final long timeout = 5000L___		final CountDownLatch countDownLatch = new CountDownLatch(2)__		final CountDownLatchRestartStrategy restartStrategy = new CountDownLatchRestartStrategy(countDownLatch)__		final ExecutionGraph executionGraph = createSimpleExecutionGraph(restartStrategy, new TestingSlotProvider(ignored -> new CompletableFuture<>()))___		executionGraph.setQueuedSchedulingAllowed(true)__		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		executionGraph.failGlobal(new FlinkException("Test exception"))___		executor.execute(() -> {_			countDownLatch.countDown()__			try {_				countDownLatch.await()__			} catch (InterruptedException e) {_				ExceptionUtils.rethrow(e)__			}__			executionGraph.failGlobal(new FlinkException("Concurrent exception"))__		})___		waitUntilJobStatus(executionGraph, JobStatus.RUNNING, timeout)__	};tests,that,the,link,execution,graph,can,handle,concurrent,failures,while,being,in,the,restarting,state;test,public,void,test,concurrent,failure,while,restarting,throws,exception,final,long,timeout,5000l,final,count,down,latch,count,down,latch,new,count,down,latch,2,final,count,down,latch,restart,strategy,restart,strategy,new,count,down,latch,restart,strategy,count,down,latch,final,execution,graph,execution,graph,create,simple,execution,graph,restart,strategy,new,testing,slot,provider,ignored,new,completable,future,execution,graph,set,queued,scheduling,allowed,true,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,execution,graph,fail,global,new,flink,exception,test,exception,executor,execute,count,down,latch,count,down,try,count,down,latch,await,catch,interrupted,exception,e,exception,utils,rethrow,e,execution,graph,fail,global,new,flink,exception,concurrent,exception,wait,until,job,status,execution,graph,job,status,running,timeout
ExecutionGraphRestartTest -> @Test 	public void testConcurrentFailureWhileRestarting() throws Exception;1542451440;Tests that the {@link ExecutionGraph} can handle concurrent failures while_being in the RESTARTING state.;@Test_	public void testConcurrentFailureWhileRestarting() throws Exception {_		final long timeout = 5000L___		final CountDownLatch countDownLatch = new CountDownLatch(2)__		final CountDownLatchRestartStrategy restartStrategy = new CountDownLatchRestartStrategy(countDownLatch)__		final ExecutionGraph executionGraph = createSimpleExecutionGraph(restartStrategy, new TestingSlotProvider(ignored -> new CompletableFuture<>()))___		executionGraph.setQueuedSchedulingAllowed(true)__		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		executionGraph.failGlobal(new FlinkException("Test exception"))___		executor.execute(() -> {_			countDownLatch.countDown()__			try {_				countDownLatch.await()__			} catch (InterruptedException e) {_				ExceptionUtils.rethrow(e)__			}__			executionGraph.failGlobal(new FlinkException("Concurrent exception"))__		})___		waitUntilJobStatus(executionGraph, JobStatus.RUNNING, timeout)__	};tests,that,the,link,execution,graph,can,handle,concurrent,failures,while,being,in,the,restarting,state;test,public,void,test,concurrent,failure,while,restarting,throws,exception,final,long,timeout,5000l,final,count,down,latch,count,down,latch,new,count,down,latch,2,final,count,down,latch,restart,strategy,restart,strategy,new,count,down,latch,restart,strategy,count,down,latch,final,execution,graph,execution,graph,create,simple,execution,graph,restart,strategy,new,testing,slot,provider,ignored,new,completable,future,execution,graph,set,queued,scheduling,allowed,true,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,execution,graph,fail,global,new,flink,exception,test,exception,executor,execute,count,down,latch,count,down,try,count,down,latch,await,catch,interrupted,exception,e,exception,utils,rethrow,e,execution,graph,fail,global,new,flink,exception,concurrent,exception,wait,until,job,status,execution,graph,job,status,running,timeout
ExecutionGraphRestartTest -> @Test 	public void testFailureWhileRestarting() throws Exception;1549365080;Tests that the {@link ExecutionGraph} can handle failures while_being in the RESTARTING state.;@Test_	public void testFailureWhileRestarting() throws Exception {__		final TestRestartStrategy restartStrategy = TestRestartStrategy.manuallyTriggered()__		final ExecutionGraph executionGraph = createSimpleExecutionGraph(restartStrategy, new TestingSlotProvider(ignored -> new CompletableFuture<>()))___		executionGraph.start(mainThreadExecutor)__		executionGraph.setQueuedSchedulingAllowed(true)__		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		executionGraph.failGlobal(new FlinkException("Test exception"))___		restartStrategy.triggerAll().join()___		executionGraph.failGlobal(new FlinkException("Concurrent exception"))___		restartStrategy.triggerAll().join()___		assertEquals(JobStatus.RUNNING, executionGraph.getState())__	};tests,that,the,link,execution,graph,can,handle,failures,while,being,in,the,restarting,state;test,public,void,test,failure,while,restarting,throws,exception,final,test,restart,strategy,restart,strategy,test,restart,strategy,manually,triggered,final,execution,graph,execution,graph,create,simple,execution,graph,restart,strategy,new,testing,slot,provider,ignored,new,completable,future,execution,graph,start,main,thread,executor,execution,graph,set,queued,scheduling,allowed,true,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,execution,graph,fail,global,new,flink,exception,test,exception,restart,strategy,trigger,all,join,execution,graph,fail,global,new,flink,exception,concurrent,exception,restart,strategy,trigger,all,join,assert,equals,job,status,running,execution,graph,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailureWhileRestarting() throws Exception;1550220073;Tests that the {@link ExecutionGraph} can handle failures while_being in the RESTARTING state.;@Test_	public void testFailureWhileRestarting() throws Exception {__		final TestRestartStrategy restartStrategy = TestRestartStrategy.manuallyTriggered()__		final ExecutionGraph executionGraph = createSimpleExecutionGraph(restartStrategy, new TestingSlotProvider(ignored -> new CompletableFuture<>()))___		executionGraph.start(mainThreadExecutor)__		executionGraph.setQueuedSchedulingAllowed(true)__		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		executionGraph.failGlobal(new FlinkException("Test exception"))___		restartStrategy.triggerAll().join()___		executionGraph.failGlobal(new FlinkException("Concurrent exception"))___		restartStrategy.triggerAll().join()___		assertEquals(JobStatus.RUNNING, executionGraph.getState())__	};tests,that,the,link,execution,graph,can,handle,failures,while,being,in,the,restarting,state;test,public,void,test,failure,while,restarting,throws,exception,final,test,restart,strategy,restart,strategy,test,restart,strategy,manually,triggered,final,execution,graph,execution,graph,create,simple,execution,graph,restart,strategy,new,testing,slot,provider,ignored,new,completable,future,execution,graph,start,main,thread,executor,execution,graph,set,queued,scheduling,allowed,true,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,execution,graph,fail,global,new,flink,exception,test,exception,restart,strategy,trigger,all,join,execution,graph,fail,global,new,flink,exception,concurrent,exception,restart,strategy,trigger,all,join,assert,equals,job,status,running,execution,graph,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailureWhileRestarting() throws Exception;1550654143;Tests that the {@link ExecutionGraph} can handle failures while_being in the RESTARTING state.;@Test_	public void testFailureWhileRestarting() throws Exception {__		final TestRestartStrategy restartStrategy = TestRestartStrategy.manuallyTriggered()__		final ExecutionGraph executionGraph = createSimpleExecutionGraph(restartStrategy, new TestingSlotProvider(ignored -> new CompletableFuture<>()))___		executionGraph.start(mainThreadExecutor)__		executionGraph.setQueuedSchedulingAllowed(true)__		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		executionGraph.failGlobal(new FlinkException("Test exception"))___		restartStrategy.triggerAll().join()___		executionGraph.failGlobal(new FlinkException("Concurrent exception"))___		restartStrategy.triggerAll().join()___		assertEquals(JobStatus.RUNNING, executionGraph.getState())__	};tests,that,the,link,execution,graph,can,handle,failures,while,being,in,the,restarting,state;test,public,void,test,failure,while,restarting,throws,exception,final,test,restart,strategy,restart,strategy,test,restart,strategy,manually,triggered,final,execution,graph,execution,graph,create,simple,execution,graph,restart,strategy,new,testing,slot,provider,ignored,new,completable,future,execution,graph,start,main,thread,executor,execution,graph,set,queued,scheduling,allowed,true,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,execution,graph,fail,global,new,flink,exception,test,exception,restart,strategy,trigger,all,join,execution,graph,fail,global,new,flink,exception,concurrent,exception,restart,strategy,trigger,all,join,assert,equals,job,status,running,execution,graph,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailureWhileRestarting() throws Exception;1550683188;Tests that the {@link ExecutionGraph} can handle failures while_being in the RESTARTING state.;@Test_	public void testFailureWhileRestarting() throws Exception {__		final TestRestartStrategy restartStrategy = TestRestartStrategy.manuallyTriggered()__		final ExecutionGraph executionGraph = createSimpleExecutionGraph(restartStrategy, new TestingSlotProvider(ignored -> new CompletableFuture<>()))___		executionGraph.start(mainThreadExecutor)__		executionGraph.setQueuedSchedulingAllowed(true)__		executionGraph.scheduleForExecution()___		assertThat(executionGraph.getState(), is(JobStatus.RUNNING))___		executionGraph.failGlobal(new FlinkException("Test exception"))___		restartStrategy.triggerAll().join()___		executionGraph.failGlobal(new FlinkException("Concurrent exception"))___		restartStrategy.triggerAll().join()___		assertEquals(JobStatus.RUNNING, executionGraph.getState())__	};tests,that,the,link,execution,graph,can,handle,failures,while,being,in,the,restarting,state;test,public,void,test,failure,while,restarting,throws,exception,final,test,restart,strategy,restart,strategy,test,restart,strategy,manually,triggered,final,execution,graph,execution,graph,create,simple,execution,graph,restart,strategy,new,testing,slot,provider,ignored,new,completable,future,execution,graph,start,main,thread,executor,execution,graph,set,queued,scheduling,allowed,true,execution,graph,schedule,for,execution,assert,that,execution,graph,get,state,is,job,status,running,execution,graph,fail,global,new,flink,exception,test,exception,restart,strategy,trigger,all,join,execution,graph,fail,global,new,flink,exception,concurrent,exception,restart,strategy,trigger,all,join,assert,equals,job,status,running,execution,graph,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1456772768;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setRestartStrategyConfiguration(RestartStrategies.fixedDelayRestart(_				Integer.MAX_VALUE, Integer.MAX_VALUE))___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,restart,strategy,configuration,restart,strategies,fixed,delay,restart,integer,integer,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1457521975;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setRestartStrategyConfiguration(RestartStrategies.fixedDelayRestart(_				Integer.MAX_VALUE, Integer.MAX_VALUE))___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,restart,strategy,configuration,restart,strategies,fixed,delay,restart,integer,integer,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1457737669;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		JobGraph jobGraph = new JobGraph("Test Job", new ExecutionConfig(), vertex)__		jobGraph.getExecutionConfig().setRestartStrategy(RestartStrategies.fixedDelayRestart(_				Integer.MAX_VALUE, Integer.MAX_VALUE))___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				new ExecutionConfig(),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,job,graph,job,graph,new,job,graph,test,job,new,execution,config,vertex,job,graph,get,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,execution,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1463155298;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				ExecutionConfigTest.getSerializedConfig(),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,execution,config,test,get,serialized,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1466683104;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				ExecutionConfigTest.getSerializedConfig(),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,execution,config,test,get,serialized,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1466687530;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				ExecutionConfigTest.getSerializedConfig(),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,execution,config,test,get,serialized,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1467726586;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1467729094;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = new JobVertex("Test Vertex")__		vertex.setInvokableClass(Tasks.NoOpInvokable.class)__		vertex.setParallelism(1)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = new ExecutionGraph(_				TestingUtils.defaultExecutionContext(),_				new JobID(),_				"test job",_				new Configuration(),_				new SerializedValue<>(new ExecutionConfig()),_				AkkaUtils.getDefaultTimeout(),_				new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,vertex,set,invokable,class,tasks,no,op,invokable,class,vertex,set,parallelism,1,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,testing,utils,default,execution,context,new,job,id,test,job,new,configuration,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1468274438;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, Tasks.NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new FixedDelayRestartStrategy(1, 1000000))___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,tasks,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,fixed,delay,restart,strategy,1,1000000,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1477521996;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, Tasks.NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy())___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,tasks,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1477937801;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_				new SimpleActorGateway(TestingUtils.directExecutionContext()),_				2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, Tasks.NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy())___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,tasks,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1477989375;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, Tasks.NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy())___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,tasks,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1479852017;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, Tasks.NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy())___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,tasks,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1482522863;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy())___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1486647395;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy())___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution(scheduler)__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,scheduler,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1488453790;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1493831843;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#fail(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.fail(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1493831843;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1500811086;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1500811755;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1500813010;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1500814716;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1502356673;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1509631297;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1513201070;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1513261599;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1515588319;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1516812618;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = newJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,new,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1528875757;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1539269955;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1539269955;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1539269955;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1539269955;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1539269955;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1542451440;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1549365080;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1550220073;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1550654143;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.cancelingComplete()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,canceling,complete,assert,equals,job,status,restarting,eg,get,state
ExecutionGraphRestartTest -> @Test 	public void testFailExecutionGraphAfterCancel() throws Exception;1550683188;Tests that it is possible to fail a graph via a call to_{@link ExecutionGraph#failGlobal(Throwable)} after cancellation.;@Test_	public void testFailExecutionGraphAfterCancel() throws Exception {_		Instance instance = ExecutionGraphTestUtils.getInstance(_			new ActorTaskManagerGateway(_				new SimpleActorGateway(TestingUtils.directExecutionContext())),_			2)___		Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutionContext())__		scheduler.newInstanceAvailable(instance)___		JobVertex vertex = ExecutionGraphTestUtils.createJobVertex("Test Vertex", 1, NoOpInvokable.class)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(_			Integer.MAX_VALUE, Integer.MAX_VALUE))__		JobGraph jobGraph = new JobGraph("Test Job", vertex)__		jobGraph.setExecutionConfig(executionConfig)___		ExecutionGraph eg = newExecutionGraph(new InfiniteDelayRestartStrategy(), scheduler)___		eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources())___		assertEquals(JobStatus.CREATED, eg.getState())___		eg.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, eg.getState())___		_		eg.cancel()__		assertEquals(JobStatus.CANCELLING, eg.getState())___		eg.failGlobal(new Exception("Test Exception"))__		assertEquals(JobStatus.FAILING, eg.getState())___		Execution execution = eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt()___		execution.completeCancelling()__		assertEquals(JobStatus.RESTARTING, eg.getState())__	};tests,that,it,is,possible,to,fail,a,graph,via,a,call,to,link,execution,graph,fail,global,throwable,after,cancellation;test,public,void,test,fail,execution,graph,after,cancel,throws,exception,instance,instance,execution,graph,test,utils,get,instance,new,actor,task,manager,gateway,new,simple,actor,gateway,testing,utils,direct,execution,context,2,scheduler,scheduler,new,scheduler,testing,utils,default,execution,context,scheduler,new,instance,available,instance,job,vertex,vertex,execution,graph,test,utils,create,job,vertex,test,vertex,1,no,op,invokable,class,execution,config,execution,config,new,execution,config,execution,config,set,restart,strategy,restart,strategies,fixed,delay,restart,integer,integer,job,graph,job,graph,new,job,graph,test,job,vertex,job,graph,set,execution,config,execution,config,execution,graph,eg,new,execution,graph,new,infinite,delay,restart,strategy,scheduler,eg,attach,job,graph,job,graph,get,vertices,sorted,topologically,from,sources,assert,equals,job,status,created,eg,get,state,eg,schedule,for,execution,assert,equals,job,status,running,eg,get,state,eg,cancel,assert,equals,job,status,cancelling,eg,get,state,eg,fail,global,new,exception,test,exception,assert,equals,job,status,failing,eg,get,state,execution,execution,eg,get,all,execution,vertices,iterator,next,get,current,execution,attempt,execution,complete,cancelling,assert,equals,job,status,restarting,eg,get,state
