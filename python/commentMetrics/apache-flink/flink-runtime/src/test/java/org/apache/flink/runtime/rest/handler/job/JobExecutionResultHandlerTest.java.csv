commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before public void setUp() throws Exception {     final TestingRestfulGateway testingRestfulGateway = TestingRestfulGateway.newBuilder().build().     jobExecutionResultHandler = new JobExecutionResultHandler(() -> CompletableFuture.completedFuture(testingRestfulGateway), Time.seconds(10), Collections.emptyMap()).     testRequest = new HandlerRequest<>(EmptyRequestBody.getInstance(), new JobMessageParameters(), Collections.singletonMap("jobid", TEST_JOB_ID.toString()), Collections.emptyMap()). }
false;public;0;15;;@Test public void testResultInProgress() throws Exception {     final TestingRestfulGateway testingRestfulGateway = TestingRestfulGateway.newBuilder().setRequestJobStatusFunction(jobId -> CompletableFuture.completedFuture(JobStatus.RUNNING)).build().     final JobExecutionResultResponseBody responseBody = jobExecutionResultHandler.handleRequest(testRequest, testingRestfulGateway).get().     assertThat(responseBody.getStatus().getId(), equalTo(QueueStatus.Id.IN_PROGRESS)). }
false;public;0;31;;@Test public void testCompletedResult() throws Exception {     final JobStatus jobStatus = JobStatus.FINISHED.     final ArchivedExecutionGraph executionGraph = new ArchivedExecutionGraphBuilder().setJobID(TEST_JOB_ID).setState(jobStatus).build().     final TestingRestfulGateway testingRestfulGateway = TestingRestfulGateway.newBuilder().setRequestJobStatusFunction(jobId -> {         assertThat(jobId, equalTo(TEST_JOB_ID)).         return CompletableFuture.completedFuture(jobStatus).     }).setRequestJobResultFunction(jobId -> {         assertThat(jobId, equalTo(TEST_JOB_ID)).         return CompletableFuture.completedFuture(JobResult.createFrom(executionGraph)).     }).build().     final JobExecutionResultResponseBody responseBody = jobExecutionResultHandler.handleRequest(testRequest, testingRestfulGateway).get().     assertThat(responseBody.getStatus().getId(), equalTo(QueueStatus.Id.COMPLETED)).     assertThat(responseBody.getJobExecutionResult(), not(nullValue())). }
false;public;0;21;;@Test public void testPropagateFlinkJobNotFoundExceptionAsRestHandlerException() throws Exception {     final TestingRestfulGateway testingRestfulGateway = TestingRestfulGateway.newBuilder().setRequestJobStatusFunction(jobId -> FutureUtils.completedExceptionally(new FlinkJobNotFoundException(jobId))).build().     try {         jobExecutionResultHandler.handleRequest(testRequest, testingRestfulGateway).get().         fail("Expected exception not thrown").     } catch (final ExecutionException e) {         final Throwable cause = ExceptionUtils.stripCompletionException(e.getCause()).         assertThat(cause, instanceOf(RestHandlerException.class)).         assertThat(((RestHandlerException) cause).getHttpResponseStatus(), equalTo(HttpResponseStatus.NOT_FOUND)).     } }
