commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public Buffer requestBuffer() throws IOException {     final Buffer buffer = buffers.poll().     if (buffer != null) {         return buffer.     }     return bufferFactory.create(). }
false;public;0;14;;@Override public Buffer requestBufferBlocking() throws IOException, InterruptedException {     Buffer buffer = buffers.poll().     if (buffer != null) {         return buffer.     }     buffer = bufferFactory.create().     if (buffer != null) {         return buffer.     }     return buffers.take(). }
false;public;0;5;;@Override public BufferBuilder requestBufferBuilderBlocking() throws IOException, InterruptedException {     Buffer buffer = requestBufferBlocking().     return new BufferBuilder(buffer.getMemorySegment(), buffer.getRecycler()). }
false;public;1;4;;@Override public boolean addBufferListener(BufferListener listener) {     return bufferRecycler.registerListener(listener). }
false;public;0;4;;@Override public boolean isDestroyed() {     return false. }
false;public;0;4;;@Override public int getMemorySegmentSize() {     return bufferFactory.getBufferSize(). }
false;public;0;3;;public int getNumberOfAvailableBuffers() {     return buffers.size(). }
false;public;0;3;;public int getNumberOfCreatedBuffers() {     return bufferFactory.getNumberOfCreatedBuffers(). }
false;public;1;15;;@Override public void recycle(MemorySegment segment) {     synchronized (listenerRegistrationLock) {         final Buffer buffer = new NetworkBuffer(segment, this).         BufferListener listener = registeredListeners.poll().         if (listener == null) {             buffers.add(buffer).         } else {             listener.notifyBufferAvailable(buffer).         }     } }
false;;1;11;;boolean registerListener(BufferListener listener) {     synchronized (listenerRegistrationLock) {         if (buffers.isEmpty()) {             registeredListeners.add(listener).             return true.         }         return false.     } }
