# id;timestamp;commentText;codeText;commentWords;codeWords
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1515161905;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		Buffer buffer1 = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		Buffer buffer2 = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(4096 * 2, partition.getTotalNumberOfBytes())___			if (createView) {_				_				partition.finish()__				partition.createReadView(numBuffers -> {})__			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.recycle()__			}_			if (!buffer2.isRecycled()) {_				buffer2.recycle()__			}_			_			assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__			assertEquals(4096 * 2 + (createView ? 4 : 0), partition.getTotalNumberOfBytes())__		}_	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,buffer1,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,buffer2,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,4096,2,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,num,buffers,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,recycle,if,buffer2,is,recycled,buffer2,recycle,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,4096,2,create,view,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1515510677;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		Buffer buffer1 = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		Buffer buffer2 = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(4096 * 2, partition.getTotalNumberOfBytes())___			if (createView) {_				_				partition.finish()__				partition.createReadView(numBuffers -> {})__			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.recycle()__			}_			if (!buffer2.isRecycled()) {_				buffer2.recycle()__			}_			_			assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__			assertEquals(4096 * 2 + (createView ? 4 : 0), partition.getTotalNumberOfBytes())__		}_	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,buffer1,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,buffer2,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,4096,2,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,num,buffers,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,recycle,if,buffer2,is,recycled,buffer2,recycle,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,4096,2,create,view,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1515510714;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		Buffer buffer1 = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		Buffer buffer2 = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(4096 * 2, partition.getTotalNumberOfBytes())___			if (createView) {_				_				partition.finish()__				partition.createReadView(numBuffers -> {})__			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.recycle()__			}_			if (!buffer2.isRecycled()) {_				buffer2.recycle()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 2 + (createView ? 4 : 0), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,buffer1,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,buffer2,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,4096,2,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,num,buffers,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,recycle,if,buffer2,is,recycled,buffer2,recycle,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,4096,2,create,view,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1515510714;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		Buffer buffer1 = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		Buffer buffer2 = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(4096 * 2, partition.getTotalNumberOfBytes())___			if (createView) {_				_				partition.finish()__				partition.createReadView(numBuffers -> {})__			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.recycle()__			}_			if (!buffer2.isRecycled()) {_				buffer2.recycle()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 2 + (createView ? 4 : 0), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,buffer1,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,buffer2,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,4096,2,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,num,buffers,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,recycle,if,buffer2,is,recycled,buffer2,recycle,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,4096,2,create,view,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1516285456;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		Buffer buffer1 = TestBufferFactory.createBuffer(4096)__		Buffer buffer2 = TestBufferFactory.createBuffer(4096)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(4096 * 2, partition.getTotalNumberOfBytes())___			if (createView) {_				_				partition.finish()__				partition.createReadView(numBuffers -> {})__			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.recycle()__			}_			if (!buffer2.isRecycled()) {_				buffer2.recycle()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 2 + (createView ? 4 : 0), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,buffer1,test,buffer,factory,create,buffer,4096,buffer,buffer2,test,buffer,factory,create,buffer,4096,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,4096,2,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,num,buffers,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,recycle,if,buffer2,is,recycled,buffer2,recycle,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,4096,2,create,view,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1516285456;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		Buffer buffer1 = TestBufferFactory.createBuffer(4096, 4096)__		Buffer buffer2 = TestBufferFactory.createBuffer(4096, 4096)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(4096 * 2, partition.getTotalNumberOfBytes())___			if (createView) {_				_				partition.finish()__				partition.createReadView(numBuffers -> {})__			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.recycle()__			}_			if (!buffer2.isRecycled()) {_				buffer2.recycle()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 2 + (createView ? 4 : 0), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,buffer1,test,buffer,factory,create,buffer,4096,4096,buffer,buffer2,test,buffer,factory,create,buffer,4096,4096,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,4096,2,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,num,buffers,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,recycle,if,buffer2,is,recycled,buffer2,recycle,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,4096,2,create,view,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1516285878;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		Buffer buffer1 = TestBufferFactory.createBuffer(4096, 4096)__		Buffer buffer2 = TestBufferFactory.createBuffer(4096, 4096)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(4096 * 2, partition.getTotalNumberOfBytes())___			if (createView) {_				_				partition.finish()__				partition.createReadView(numBuffers -> {})__			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.recycleBuffer()__			}_			if (!buffer2.isRecycled()) {_				buffer2.recycleBuffer()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 2 + (createView ? 4 : 0), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,buffer1,test,buffer,factory,create,buffer,4096,4096,buffer,buffer2,test,buffer,factory,create,buffer,4096,4096,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,4096,2,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,num,buffers,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,recycle,buffer,if,buffer2,is,recycled,buffer2,recycle,buffer,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,4096,2,create,view,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1518785736;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		Buffer buffer1 = TestBufferFactory.createBuffer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		Buffer buffer2 = TestBufferFactory.createBuffer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(BUFFER_DATA_SIZE * 2, partition.getTotalNumberOfBytes())___			if (createView) {_				_				partition.finish()__				partition.createReadView(numBuffers -> {})__			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.recycleBuffer()__			}_			if (!buffer2.isRecycled()) {_				buffer2.recycleBuffer()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE * 2 + (createView ? 4 : 0), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,buffer1,test,buffer,factory,create,buffer,buffer,buffer2,test,buffer,factory,create,buffer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,2,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,num,buffers,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,recycle,buffer,if,buffer2,is,recycled,buffer2,recycle,buffer,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,2,create,view,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1519039287;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			___			if (createView) {_				_				partition.finish()__				partition.createReadView(numBuffers -> {})__			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,if,create,view,partition,finish,partition,create,read,view,num,buffers,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1519039301;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			___			if (createView) {_				_				partition.finish()__				partition.createReadView(new NoOpBufferAvailablityListener())__			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,if,create,view,partition,finish,partition,create,read,view,new,no,op,buffer,availablity,listener,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1519718833;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			___			if (createView) {_				_				partition.finish()__				partition.createReadView(new NoOpBufferAvailablityListener())__			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,if,create,view,partition,finish,partition,create,read,view,new,no,op,buffer,availablity,listener,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1519718833;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())_ __			if (createView) {_				_				partition.finish()__				partition.createReadView(new NoOpBufferAvailablityListener())__				assertEquals(0, partition.getTotalNumberOfBytes())_ _			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		_		assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,new,no,op,buffer,availablity,listener,assert,equals,0,partition,get,total,number,of,bytes,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,create,view,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1519718834;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())_ __			if (createView) {_				_				partition.finish()__				partition.createReadView(new NoOpBufferAvailablityListener())__				assertEquals(0, partition.getTotalNumberOfBytes())_ _			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		_		assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,new,no,op,buffer,availablity,listener,assert,equals,0,partition,get,total,number,of,bytes,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,create,view,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1519834372;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())_ __			if (createView) {_				_				partition.finish()__				partition.createReadView(new NoOpBufferAvailablityListener())__				assertEquals(0, partition.getTotalNumberOfBytes())_ _			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		_		assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,new,no,op,buffer,availablity,listener,assert,equals,0,partition,get,total,number,of,bytes,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,create,view,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1520610580;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())_ __			if (createView) {_				_				partition.finish()__				partition.createReadView(new NoOpBufferAvailablityListener())__				assertEquals(0, partition.getTotalNumberOfBytes())_ _			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		_		assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,new,no,op,buffer,availablity,listener,assert,equals,0,partition,get,total,number,of,bytes,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,create,view,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1522049586;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())_ __			if (createView) {_				_				partition.finish()__				partition.createReadView(new NoOpBufferAvailablityListener())__				assertEquals(0, partition.getTotalNumberOfBytes())_ _			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		_		assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,new,no,op,buffer,availablity,listener,assert,equals,0,partition,get,total,number,of,bytes,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,create,view,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1522249274;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())_ __			if (createView) {_				_				partition.finish()__				partition.createReadView(new NoOpBufferAvailablityListener())__				assertEquals(0, partition.getTotalNumberOfBytes())_ _			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		_		assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,new,no,op,buffer,availablity,listener,assert,equals,0,partition,get,total,number,of,bytes,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,create,view,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1524128187;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())_ __			if (createView) {_				_				partition.finish()__				partition.createReadView(new NoOpBufferAvailablityListener())__				assertEquals(0, partition.getTotalNumberOfBytes())_ _			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		_		assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,new,no,op,buffer,availablity,listener,assert,equals,0,partition,get,total,number,of,bytes,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,create,view,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1524407315;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())_ __			if (createView) {_				_				partition.finish()__				partition.createReadView(new NoOpBufferAvailablityListener())__				assertEquals(0, partition.getTotalNumberOfBytes())_ _			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		_		assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,new,no,op,buffer,availablity,listener,assert,equals,0,partition,get,total,number,of,bytes,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,create,view,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1537385496;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())_ __			if (createView) {_				_				partition.finish()__				partition.createReadView(new NoOpBufferAvailablityListener())__				assertEquals(0, partition.getTotalNumberOfBytes())_ _			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		_		assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,new,no,op,buffer,availablity,listener,assert,equals,0,partition,get,total,number,of,bytes,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,create,view,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception;1538998760;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a a_writer that does not do any write to check for correct buffer recycling.;private void testReleaseOnSpillablePartitionWithSlowWriter(boolean createView) throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			_			partition.add(buffer1)__			partition.add(buffer2)__			assertFalse("buffer1 should not be recycled (still in the queue)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (still in the queue)", buffer2.isRecycled())__			assertEquals(2, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())_ __			if (createView) {_				_				partition.finish()__				partition.createReadView(new NoOpBufferAvailablityListener())__				assertEquals(0, partition.getTotalNumberOfBytes())_ _			}__			_			_			assertEquals(2, partition.releaseMemory())__			assertFalse("buffer1 should not be recycled (advertised as nextBuffer)", buffer1.isRecycled())__			assertFalse("buffer2 should not be recycled (not written yet)", buffer2.isRecycled())__		} finally {_			ioManager.shutdown()__			if (!buffer1.isRecycled()) {_				buffer1.close()__			}_			if (!buffer2.isRecycled()) {_				buffer2.close()__			}_		}_		_		assertEquals(2 + (createView ? 1 : 0), partition.getTotalNumberOfBuffers())__		_		assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE), partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;private,void,test,release,on,spillable,partition,with,slow,writer,boolean,create,view,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,try,partition,add,buffer1,partition,add,buffer2,assert,false,buffer1,should,not,be,recycled,still,in,the,queue,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,still,in,the,queue,buffer2,is,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes,if,create,view,partition,finish,partition,create,read,view,new,no,op,buffer,availablity,listener,assert,equals,0,partition,get,total,number,of,bytes,assert,equals,2,partition,release,memory,assert,false,buffer1,should,not,be,recycled,advertised,as,next,buffer,buffer1,is,recycled,assert,false,buffer2,should,not,be,recycled,not,written,yet,buffer2,is,recycled,finally,io,manager,shutdown,if,buffer1,is,recycled,buffer1,close,if,buffer2,is,recycled,buffer2,close,assert,equals,2,create,view,1,0,partition,get,total,number,of,buffers,assert,equals,create,view,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1515510714;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1516285456;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1516285456;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1516285878;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1518785736;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1519039287;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1519039301;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1519718833;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1519718833;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1519718834;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1519834372;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1520610580;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1522049586;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1522249274;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1524128187;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1524407315;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1537385496;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionNoView() throws Exception;1538998760;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and no_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionNoView() throws Exception {_		testCleanupReleasedPartition(true, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,no,view,throws,exception,test,cleanup,released,partition,true,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1515161905;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1515510677;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1516285878;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1518785736;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1519039287;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1519039301;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1519718833;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1519718833;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1519718834;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1519834372;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1520610580;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1522049586;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1522249274;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1524128187;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1524407315;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1537385496;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpillablePartition() throws Exception;1538998760;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spillable finished partition.;@Test_	public void testAddOnFinishedSpillablePartition() throws Exception {_		testAddOnFinishedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spillable,finished,partition;test,public,void,test,add,on,finished,spillable,partition,throws,exception,test,add,on,finished,partition,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1515510714;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1516285456;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1516285456;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1516285878;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1518785736;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1519039287;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1519039301;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1519718833;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1519718833;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1519718834;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1519834372;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1520610580;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1522049586;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1522249274;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1524128187;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1524407315;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1537385496;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionNoView() throws Exception;1538998760;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and no_read view attached.;@Test_	public void testCleanupReleasedSpillablePartitionNoView() throws Exception {_		testCleanupReleasedPartition(false, false)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,no,read,view,attached;test,public,void,test,cleanup,released,spillable,partition,no,view,throws,exception,test,cleanup,released,partition,false,false
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumersFull() throws Exception;1524128187;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers} spilled bytes and_buffers counting.;@Test_	public void testSpillFinishedBufferConsumersFull() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE)___		partition.add(bufferBuilder.createBufferConsumer())__		assertEquals(0, partition.releaseMemory())__		assertEquals(1, partition.getBuffersInBacklog())__		_		fillBufferBuilder(bufferBuilder, BUFFER_DATA_SIZE).finish()__		assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers(false))__		assertEquals(1, partition.getBuffersInBacklog())__	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,and,buffers,counting;test,public,void,test,spill,finished,buffer,consumers,full,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,partition,add,buffer,builder,create,buffer,consumer,assert,equals,0,partition,release,memory,assert,equals,1,partition,get,buffers,in,backlog,fill,buffer,builder,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers,false,assert,equals,1,partition,get,buffers,in,backlog
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumersFull() throws Exception;1524407315;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers} spilled bytes and_buffers counting.;@Test_	public void testSpillFinishedBufferConsumersFull() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE)___		partition.add(bufferBuilder.createBufferConsumer())__		assertEquals(0, partition.releaseMemory())__		assertEquals(1, partition.getBuffersInBacklog())__		_		fillBufferBuilder(bufferBuilder, BUFFER_DATA_SIZE).finish()__		assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers(false))__		assertEquals(1, partition.getBuffersInBacklog())__	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,and,buffers,counting;test,public,void,test,spill,finished,buffer,consumers,full,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,partition,add,buffer,builder,create,buffer,consumer,assert,equals,0,partition,release,memory,assert,equals,1,partition,get,buffers,in,backlog,fill,buffer,builder,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers,false,assert,equals,1,partition,get,buffers,in,backlog
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumersFull() throws Exception;1537385496;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers} spilled bytes and_buffers counting.;@Test_	public void testSpillFinishedBufferConsumersFull() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE)___		partition.add(bufferBuilder.createBufferConsumer())__		assertEquals(0, partition.releaseMemory())__		assertEquals(1, partition.getBuffersInBacklog())__		_		fillBufferBuilder(bufferBuilder, BUFFER_DATA_SIZE).finish()__		assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers(false))__		assertEquals(1, partition.getBuffersInBacklog())__	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,and,buffers,counting;test,public,void,test,spill,finished,buffer,consumers,full,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,partition,add,buffer,builder,create,buffer,consumer,assert,equals,0,partition,release,memory,assert,equals,1,partition,get,buffers,in,backlog,fill,buffer,builder,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers,false,assert,equals,1,partition,get,buffers,in,backlog
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumersFull() throws Exception;1538998760;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers} spilled bytes and_buffers counting.;@Test_	public void testSpillFinishedBufferConsumersFull() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE)___		partition.add(bufferBuilder.createBufferConsumer())__		assertEquals(0, partition.releaseMemory())__		assertEquals(1, partition.getBuffersInBacklog())__		_		fillBufferBuilder(bufferBuilder, BUFFER_DATA_SIZE).finish()__		assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers(false))__		assertEquals(1, partition.getBuffersInBacklog())__	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,and,buffers,counting;test,public,void,test,spill,finished,buffer,consumers,full,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,partition,add,buffer,builder,create,buffer,consumer,assert,equals,0,partition,release,memory,assert,equals,1,partition,get,buffers,in,backlog,fill,buffer,builder,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers,false,assert,equals,1,partition,get,buffers,in,backlog
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1480624969;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		ResultPartition parent = mock(ResultPartition.class)__		SpillableSubpartition partition = new SpillableSubpartition(_			0,_			parent,_			ioManager)___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		partition.finish()___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(new TestInfiniteBufferProvider(), listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())___		Buffer read = reader.getNextBuffer()__		assertNotNull(read)__		read.recycle()__		assertEquals(2, listener.getNumNotifiedBuffers())___		_		assertEquals(2, partition.releaseMemory())___		listener.awaitNotifications(4, 30_000)__		assertEquals(4, listener.getNumNotifiedBuffers())___		read = reader.getNextBuffer()__		assertNotNull(read)__		read.recycle()___		read = reader.getNextBuffer()__		assertNotNull(read)__		read.recycle()___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(EndOfPartitionEvent.class, EventSerializer.fromBuffer(read, ClassLoader.getSystemClassLoader()).getClass())__		read.recycle()__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,result,partition,parent,mock,result,partition,class,spillable,subpartition,partition,new,spillable,subpartition,0,parent,io,manager,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,partition,finish,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,new,test,infinite,buffer,provider,listener,assert,equals,1,listener,get,num,notified,buffers,buffer,read,reader,get,next,buffer,assert,not,null,read,read,recycle,assert,equals,2,listener,get,num,notified,buffers,assert,equals,2,partition,release,memory,listener,await,notifications,4,assert,equals,4,listener,get,num,notified,buffers,read,reader,get,next,buffer,assert,not,null,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,class,loader,get,system,class,loader,get,class,read,recycle
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1493724918;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		partition.finish()___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())___		Buffer read = reader.getNextBuffer()__		assertNotNull(read)__		read.recycle()__		assertEquals(2, listener.getNumNotifiedBuffers())___		_		assertEquals(2, partition.releaseMemory())___		listener.awaitNotifications(4, 30_000)__		assertEquals(4, listener.getNumNotifiedBuffers())___		read = reader.getNextBuffer()__		assertNotNull(read)__		read.recycle()___		read = reader.getNextBuffer()__		assertNotNull(read)__		read.recycle()___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(EndOfPartitionEvent.class, EventSerializer.fromBuffer(read, ClassLoader.getSystemClassLoader()).getClass())__		read.recycle()__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,partition,finish,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notified,buffers,buffer,read,reader,get,next,buffer,assert,not,null,read,read,recycle,assert,equals,2,listener,get,num,notified,buffers,assert,equals,2,partition,release,memory,listener,await,notifications,4,assert,equals,4,listener,get,num,notified,buffers,read,reader,get,next,buffer,assert,not,null,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,class,loader,get,system,class,loader,get,class,read,recycle
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1515160774;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		partition.finish()___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		Buffer read = reader.getNextBuffer()__		assertSame(buffer, read)__		read.recycle()__		assertEquals(2, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		_		assertEquals(2, partition.releaseMemory())__		assertFalse(buffer.isRecycled())_ __		listener.awaitNotifications(4, 30_000)__		assertEquals(4, listener.getNumNotifiedBuffers())___		read = reader.getNextBuffer()__		assertSame(buffer, read)__		read.recycle()__		_		__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertNotSame(buffer, read)__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(EndOfPartitionEvent.class, EventSerializer.fromBuffer(read, ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,partition,finish,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,buffer,read,reader,get,next,buffer,assert,same,buffer,read,read,recycle,assert,equals,2,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,assert,equals,2,partition,release,memory,assert,false,buffer,is,recycled,listener,await,notifications,4,assert,equals,4,listener,get,num,notified,buffers,read,reader,get,next,buffer,assert,same,buffer,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,assert,not,same,buffer,read,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,class,loader,get,system,class,loader,get,class,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1515160792;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		partition.finish()__		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		Buffer read = reader.getNextBuffer()__		assertSame(buffer, read)__		read.recycle()__		assertEquals(2, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		_		assertEquals(2, partition.releaseMemory())__		assertFalse(buffer.isRecycled())_ _		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		listener.awaitNotifications(4, 30_000)__		assertEquals(4, listener.getNumNotifiedBuffers())___		read = reader.getNextBuffer()__		assertSame(buffer, read)__		read.recycle()__		_		__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertNotSame(buffer, read)__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(EndOfPartitionEvent.class, EventSerializer.fromBuffer(read, ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,buffer,read,reader,get,next,buffer,assert,same,buffer,read,read,recycle,assert,equals,2,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,assert,equals,2,partition,release,memory,assert,false,buffer,is,recycled,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,listener,await,notifications,4,assert,equals,4,listener,get,num,notified,buffers,read,reader,get,next,buffer,assert,same,buffer,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,assert,not,same,buffer,read,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,class,loader,get,system,class,loader,get,class,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1515161905;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		partition.finish()__		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		Buffer read = reader.getNextBuffer()__		assertSame(buffer, read)__		read.recycle()__		assertEquals(2, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		_		assertEquals(2, partition.releaseMemory())__		assertFalse(buffer.isRecycled())_ _		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		listener.awaitNotifications(4, 30_000)__		assertEquals(4, listener.getNumNotifiedBuffers())___		read = reader.getNextBuffer()__		assertSame(buffer, read)__		read.recycle()__		_		__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertNotSame(buffer, read)__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(EndOfPartitionEvent.class, EventSerializer.fromBuffer(read, ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,buffer,read,reader,get,next,buffer,assert,same,buffer,read,read,recycle,assert,equals,2,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,assert,equals,2,partition,release,memory,assert,false,buffer,is,recycled,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,listener,await,notifications,4,assert,equals,4,listener,get,num,notified,buffers,read,reader,get,next,buffer,assert,same,buffer,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,assert,not,same,buffer,read,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,class,loader,get,system,class,loader,get,class,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1515510677;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		partition.finish()__		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertSame(buffer, read.buffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycle()__		assertEquals(2, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		_		assertEquals(2, partition.releaseMemory())__		assertFalse(buffer.isRecycled())_ _		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		listener.awaitNotifications(4, 30_000)__		assertEquals(4, listener.getNumNotifiedBuffers())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertSame(buffer, read.buffer())__		read.buffer().recycle()__		_		__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read.buffer())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,same,buffer,read,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,assert,equals,2,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,assert,equals,2,partition,release,memory,assert,false,buffer,is,recycled,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,listener,await,notifications,4,assert,equals,4,listener,get,num,notified,buffers,read,reader,get,next,buffer,assert,not,null,read,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,same,buffer,read,buffer,read,buffer,recycle,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,buffer,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1515510714;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		partition.finish()__		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertSame(buffer, read.buffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycle()__		assertEquals(2, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		_		assertEquals(2, partition.releaseMemory())__		assertFalse(buffer.isRecycled())_ _		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		listener.awaitNotifications(4, 30_000)__		assertEquals(4, listener.getNumNotifiedBuffers())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertSame(buffer, read.buffer())__		read.buffer().recycle()__		_		__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read.buffer())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,same,buffer,read,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,assert,equals,2,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,assert,equals,2,partition,release,memory,assert,false,buffer,is,recycled,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,listener,await,notifications,4,assert,equals,4,listener,get,num,notified,buffers,read,reader,get,next,buffer,assert,not,null,read,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,same,buffer,read,buffer,read,buffer,recycle,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,buffer,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1515510714;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		partition.finish()__		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertSame(buffer, read.buffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycle()__		assertEquals(2, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		_		assertEquals(2, partition.releaseMemory())__		assertFalse(buffer.isRecycled())_ _		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		listener.awaitNotifications(4, 30_000)__		assertEquals(4, listener.getNumNotifiedBuffers())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertSame(buffer, read.buffer())__		read.buffer().recycle()__		_		__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read.buffer())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,same,buffer,read,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,assert,equals,2,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,assert,equals,2,partition,release,memory,assert,false,buffer,is,recycled,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,listener,await,notifications,4,assert,equals,4,listener,get,num,notified,buffers,read,reader,get,next,buffer,assert,not,null,read,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,same,buffer,read,buffer,read,buffer,recycle,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,buffer,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1516285456;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = TestBufferFactory.createBuffer(4096)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		partition.finish()__		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertSame(buffer, read.buffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycle()__		assertEquals(2, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		_		assertEquals(2, partition.releaseMemory())__		assertFalse(buffer.isRecycled())_ _		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		listener.awaitNotifications(4, 30_000)__		assertEquals(4, listener.getNumNotifiedBuffers())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertSame(buffer, read.buffer())__		read.buffer().recycle()__		_		__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read.buffer())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,test,buffer,factory,create,buffer,4096,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,same,buffer,read,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,assert,equals,2,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,assert,equals,2,partition,release,memory,assert,false,buffer,is,recycled,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,listener,await,notifications,4,assert,equals,4,listener,get,num,notified,buffers,read,reader,get,next,buffer,assert,not,null,read,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,same,buffer,read,buffer,read,buffer,recycle,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,buffer,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1516285456;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = TestBufferFactory.createBuffer(4096, 4096)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		partition.finish()__		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertSame(buffer, read.buffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycle()__		assertEquals(2, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		_		assertEquals(2, partition.releaseMemory())__		assertFalse(buffer.isRecycled())_ _		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		listener.awaitNotifications(4, 30_000)__		assertEquals(4, listener.getNumNotifiedBuffers())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertSame(buffer, read.buffer())__		read.buffer().recycle()__		_		__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read.buffer())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,test,buffer,factory,create,buffer,4096,4096,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,same,buffer,read,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,assert,equals,2,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,assert,equals,2,partition,release,memory,assert,false,buffer,is,recycled,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,listener,await,notifications,4,assert,equals,4,listener,get,num,notified,buffers,read,reader,get,next,buffer,assert,not,null,read,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,same,buffer,read,buffer,read,buffer,recycle,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,buffer,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1516285878;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = TestBufferFactory.createBuffer(4096, 4096)__		buffer.retainBuffer()__		buffer.retainBuffer()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		partition.finish()__		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertSame(buffer, read.buffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertEquals(2, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		_		assertEquals(2, partition.releaseMemory())__		assertFalse(buffer.isRecycled())_ _		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		listener.awaitNotifications(4, 30_000)__		assertEquals(4, listener.getNumNotifiedBuffers())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertSame(buffer, read.buffer())__		read.buffer().recycleBuffer()__		_		__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read.buffer())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,test,buffer,factory,create,buffer,4096,4096,buffer,retain,buffer,buffer,retain,buffer,partition,add,buffer,partition,add,buffer,partition,add,buffer,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,same,buffer,read,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,equals,2,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,assert,equals,2,partition,release,memory,assert,false,buffer,is,recycled,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,listener,await,notifications,4,assert,equals,4,listener,get,num,notified,buffers,read,reader,get,next,buffer,assert,not,null,read,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,same,buffer,read,buffer,read,buffer,recycle,buffer,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,buffer,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1518785736;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = TestBufferFactory.createBuffer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		buffer.retainBuffer()__		buffer.retainBuffer()___		partition.add(buffer)__		partition.add(buffer)__		{_			Buffer event = TestBufferFactory.createBuffer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__			event.tagAsEvent()__			partition.add(event)__		}_		partition.add(buffer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())__		BufferAndBacklog read = reader.getNextBuffer()_ _		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertSame(buffer, read.buffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertEquals(2, listener.getNumNotifiedBuffers())__		assertFalse(buffer.isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(buffer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())___		listener.awaitNotifications(5, 30_000)__		assertEquals(5, listener.getNumNotifiedBuffers())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertSame(buffer, read.buffer())__		read.buffer().recycleBuffer()__		_		_		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read.buffer())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read.buffer())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		_		assertTrue(reader.nextBufferIsEvent())__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,test,buffer,factory,create,buffer,buffer,retain,buffer,buffer,retain,buffer,partition,add,buffer,partition,add,buffer,buffer,event,test,buffer,factory,create,buffer,event,tag,as,event,partition,add,event,partition,add,buffer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,same,buffer,read,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,equals,2,listener,get,num,notified,buffers,assert,false,buffer,is,recycled,assert,false,read,next,buffer,is,event,assert,equals,3,partition,release,memory,assert,false,buffer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,4,4,partition,get,total,number,of,bytes,listener,await,notifications,5,assert,equals,5,listener,get,num,notified,buffers,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,same,buffer,read,buffer,read,buffer,recycle,buffer,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,buffer,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,buffer,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1519039287;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(BufferBuilderTestUtils.createEventBufferConsumer(BUFFER_DATA_SIZE))__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifiedBuffers())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())__		BufferAndBacklog read = reader.getNextBuffer()_ _		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertEquals(2, listener.getNumNotifiedBuffers())__		assertFalse(bufferConsumer.isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		___		listener.awaitNotifications(5, 30_000)__		assertEquals(5, listener.getNumNotifiedBuffers())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		_		_		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		_		assertTrue(reader.nextBufferIsEvent())__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,buffer,builder,test,utils,create,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notified,buffers,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,equals,2,listener,get,num,notified,buffers,assert,false,buffer,consumer,is,recycled,assert,false,read,next,buffer,is,event,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,listener,await,notifications,5,assert,equals,5,listener,get,num,notified,buffers,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1519039301;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(BufferBuilderTestUtils.createEventBufferConsumer(BUFFER_DATA_SIZE))__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())__		BufferAndBacklog read = reader.getNextBuffer()_ _		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertEquals(2, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		___		listener.awaitNotifications(3, 30_000)__		assertEquals(3, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		_		_		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		_		assertTrue(reader.nextBufferIsEvent())__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,buffer,builder,test,utils,create,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,equals,2,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,read,next,buffer,is,event,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,listener,await,notifications,3,assert,equals,3,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1519718833;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(BufferBuilderTestUtils.createEventBufferConsumer(BUFFER_DATA_SIZE))__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())__		BufferAndBacklog read = reader.getNextBuffer()_ _		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertEquals(2, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		___		listener.awaitNotifications(3, 30_000)__		assertEquals(3, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		_		_		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		_		assertTrue(reader.nextBufferIsEvent())__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,buffer,builder,test,utils,create,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,equals,2,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,read,next,buffer,is,event,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,listener,await,notifications,3,assert,equals,3,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1519718833;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(BufferBuilderTestUtils.createEventBufferConsumer(BUFFER_DATA_SIZE))__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())__		BufferAndBacklog read = reader.getNextBuffer()_ _		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())_ _		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertEquals(2, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		_		assertEquals(BUFFER_DATA_SIZE * 3 + 4, partition.getTotalNumberOfBytes())___		listener.awaitNotifications(3, 30_000)__		assertEquals(3, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		_		_		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		_		assertTrue(reader.nextBufferIsEvent())__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,buffer,builder,test,utils,create,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,partition,get,total,number,of,bytes,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,equals,2,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,read,next,buffer,is,event,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,3,4,partition,get,total,number,of,bytes,listener,await,notifications,3,assert,equals,3,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,4,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,4,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,4,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,equals,4,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1519718834;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(BufferBuilderTestUtils.createEventBufferConsumer(BUFFER_DATA_SIZE))__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())__		BufferAndBacklog read = reader.getNextBuffer()_ _		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())_ _		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertEquals(2, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		_		assertEquals(BUFFER_DATA_SIZE * 3 + 4, partition.getTotalNumberOfBytes())___		listener.awaitNotifications(3, 30_000)__		assertEquals(3, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		_		_		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		_		assertTrue(reader.nextBufferIsEvent())__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,buffer,builder,test,utils,create,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,partition,get,total,number,of,bytes,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,equals,2,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,read,next,buffer,is,event,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,3,4,partition,get,total,number,of,bytes,listener,await,notifications,3,assert,equals,3,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,4,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,4,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,4,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,equals,4,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1519834372;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(BufferBuilderTestUtils.createEventBufferConsumer(BUFFER_DATA_SIZE))__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())__		BufferAndBacklog read = reader.getNextBuffer()_ _		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())_ _		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertTrue(read.isMoreAvailable())__		assertEquals(1, listener.getNumNotifications())_ _		assertFalse(bufferConsumer.isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		_		assertEquals(BUFFER_DATA_SIZE * 3 + 4, partition.getTotalNumberOfBytes())___		listener.awaitNotifications(2, 30_000)__		_		assertEquals(2, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		_		_		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		_		assertTrue(reader.nextBufferIsEvent())__		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,buffer,builder,test,utils,create,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,partition,get,total,number,of,bytes,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,true,read,is,more,available,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,read,next,buffer,is,event,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,3,4,partition,get,total,number,of,bytes,listener,await,notifications,2,assert,equals,2,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,4,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,4,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,4,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,equals,4,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1520610580;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())__		_		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, false)__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())_ _		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(1, listener.getNumNotifications())_ _		assertFalse(bufferConsumer.isRecycled())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		_		assertEquals(BUFFER_DATA_SIZE * 2 + eventSize + 4, partition.getTotalNumberOfBytes())___		_		listener.awaitNotifications(2, 30_000)__		_		assertEquals(2, listener.getNumNotifications())___		_		_		_		Buffer buffer = bufferConsumer.build()__		buffer.retainBuffer()___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, false)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		bufferConsumer.close()_ __		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		buffer.recycleBuffer()__		assertTrue(buffer.isRecycled())___		_		assertTrue(reader.nextBufferIsEvent())__		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,false,assert,equals,partition,get,total,number,of,bytes,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,2,event,size,4,partition,get,total,number,of,bytes,listener,await,notifications,2,assert,equals,2,listener,get,num,notifications,buffer,buffer,buffer,consumer,build,buffer,retain,buffer,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,1,true,false,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,buffer,consumer,close,assert,true,reader,next,buffer,is,event,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,0,true,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,buffer,recycle,buffer,assert,true,buffer,is,recycled,assert,true,reader,next,buffer,is,event,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1522049586;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())__		_		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, false)__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())_ _		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(1, listener.getNumNotifications())_ _		assertFalse(bufferConsumer.isRecycled())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		_		assertEquals(BUFFER_DATA_SIZE * 2 + eventSize + 4, partition.getTotalNumberOfBytes())___		_		listener.awaitNotifications(2, 30_000)__		_		assertEquals(2, listener.getNumNotifications())___		_		_		_		Buffer buffer = bufferConsumer.build()__		buffer.retainBuffer()___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, false)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		bufferConsumer.close()_ __		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		buffer.recycleBuffer()__		assertTrue(buffer.isRecycled())___		_		assertTrue(reader.nextBufferIsEvent())__		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,false,assert,equals,partition,get,total,number,of,bytes,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,2,event,size,4,partition,get,total,number,of,bytes,listener,await,notifications,2,assert,equals,2,listener,get,num,notifications,buffer,buffer,buffer,consumer,build,buffer,retain,buffer,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,1,true,false,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,buffer,consumer,close,assert,true,reader,next,buffer,is,event,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,0,true,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,buffer,recycle,buffer,assert,true,buffer,is,recycled,assert,true,reader,next,buffer,is,event,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1522249274;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())__		_		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, false)__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())_ _		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(1, listener.getNumNotifications())_ _		assertFalse(bufferConsumer.isRecycled())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		_		assertEquals(BUFFER_DATA_SIZE * 2 + eventSize + 4, partition.getTotalNumberOfBytes())___		_		listener.awaitNotifications(2, 30_000)__		_		assertEquals(2, listener.getNumNotifications())___		_		_		_		Buffer buffer = bufferConsumer.build()__		buffer.retainBuffer()___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, false)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		bufferConsumer.close()_ __		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		buffer.recycleBuffer()__		assertTrue(buffer.isRecycled())___		_		assertTrue(reader.nextBufferIsEvent())__		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,false,assert,equals,partition,get,total,number,of,bytes,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,2,event,size,4,partition,get,total,number,of,bytes,listener,await,notifications,2,assert,equals,2,listener,get,num,notifications,buffer,buffer,buffer,consumer,build,buffer,retain,buffer,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,1,true,false,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,buffer,consumer,close,assert,true,reader,next,buffer,is,event,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,0,true,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,buffer,recycle,buffer,assert,true,buffer,is,recycled,assert,true,reader,next,buffer,is,event,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1524128187;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())__		_		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, false)__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())_ _		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(1, listener.getNumNotifications())_ _		assertFalse(bufferConsumer.isRecycled())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		_		assertEquals(BUFFER_DATA_SIZE * 2 + eventSize + 4, partition.getTotalNumberOfBytes())___		_		listener.awaitNotifications(2, 30_000)__		_		assertEquals(2, listener.getNumNotifications())___		_		_		_		Buffer buffer = bufferConsumer.build()__		buffer.retainBuffer()___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, false)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		bufferConsumer.close()_ __		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		buffer.recycleBuffer()__		assertTrue(buffer.isRecycled())___		_		assertTrue(reader.nextBufferIsEvent())__		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,false,assert,equals,partition,get,total,number,of,bytes,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,2,event,size,4,partition,get,total,number,of,bytes,listener,await,notifications,2,assert,equals,2,listener,get,num,notifications,buffer,buffer,buffer,consumer,build,buffer,retain,buffer,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,1,true,false,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,buffer,consumer,close,assert,true,reader,next,buffer,is,event,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,0,true,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,buffer,recycle,buffer,assert,true,buffer,is,recycled,assert,true,reader,next,buffer,is,event,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1524407315;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())__		_		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, false)__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())_ _		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(1, listener.getNumNotifications())_ _		assertFalse(bufferConsumer.isRecycled())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		_		assertEquals(BUFFER_DATA_SIZE * 2 + eventSize + 4, partition.getTotalNumberOfBytes())___		_		listener.awaitNotifications(2, 30_000)__		_		assertEquals(2, listener.getNumNotifications())___		_		_		_		Buffer buffer = bufferConsumer.build()__		buffer.retainBuffer()___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, false)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		bufferConsumer.close()_ __		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		buffer.recycleBuffer()__		assertTrue(buffer.isRecycled())___		_		assertTrue(reader.nextBufferIsEvent())__		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,false,assert,equals,partition,get,total,number,of,bytes,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,2,event,size,4,partition,get,total,number,of,bytes,listener,await,notifications,2,assert,equals,2,listener,get,num,notifications,buffer,buffer,buffer,consumer,build,buffer,retain,buffer,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,1,true,false,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,buffer,consumer,close,assert,true,reader,next,buffer,is,event,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,0,true,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,buffer,recycle,buffer,assert,true,buffer,is,recycled,assert,true,reader,next,buffer,is,event,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1537385496;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())___		_		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, false)__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())_ _		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(1, listener.getNumNotifications())_ _		assertFalse(bufferConsumer.isRecycled())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		_		assertEquals(BUFFER_DATA_SIZE * 2 + eventSize + 4, partition.getTotalNumberOfBytes())___		_		listener.awaitNotifications(2, 30_000)__		_		assertEquals(2, listener.getNumNotifications())___		_		_		_		Buffer buffer = bufferConsumer.build()__		buffer.retainBuffer()___		_		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, false)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		bufferConsumer.close()_ __		_		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		_		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		buffer.recycleBuffer()__		assertTrue(buffer.isRecycled())___		_		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,false,assert,equals,partition,get,total,number,of,bytes,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,2,event,size,4,partition,get,total,number,of,bytes,listener,await,notifications,2,assert,equals,2,listener,get,num,notifications,buffer,buffer,buffer,consumer,build,buffer,retain,buffer,assert,next,buffer,reader,true,1,true,false,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,buffer,consumer,close,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,next,buffer,reader,true,0,true,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,buffer,recycle,buffer,assert,true,buffer,is,recycled,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception;1538998760;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpillablePartitionSpilledDuringConsume() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)__		partition.finish()___		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpillableSubpartitionView reader = (SpillableSubpartitionView) partition.createReadView(listener)___		_		assertEquals(1, listener.getNumNotifications())__		assertFalse(bufferConsumer.isRecycled())___		assertFalse(reader.nextBufferIsEvent())___		_		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, false)__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())_ _		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(1, listener.getNumNotifications())_ _		assertFalse(bufferConsumer.isRecycled())___		_		assertEquals(3, partition.releaseMemory())__		assertFalse(bufferConsumer.isRecycled())_ _		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(2, partition.getBuffersInBacklog())__		_		assertEquals(BUFFER_DATA_SIZE * 2 + eventSize + 4, partition.getTotalNumberOfBytes())___		_		listener.awaitNotifications(2, 30_000)__		_		assertEquals(2, listener.getNumNotifications())___		_		_		_		Buffer buffer = bufferConsumer.build()__		buffer.retainBuffer()___		_		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, false)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		bufferConsumer.close()_ __		_		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(1, partition.getBuffersInBacklog())___		_		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		buffer.recycleBuffer()__		assertTrue(buffer.isRecycled())___		_		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())_ _		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spillable,partition,spilled,during,consume,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spillable,subpartition,view,reader,spillable,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,false,assert,equals,partition,get,total,number,of,bytes,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,1,listener,get,num,notifications,assert,false,buffer,consumer,is,recycled,assert,equals,3,partition,release,memory,assert,false,buffer,consumer,is,recycled,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,2,event,size,4,partition,get,total,number,of,bytes,listener,await,notifications,2,assert,equals,2,listener,get,num,notifications,buffer,buffer,buffer,consumer,build,buffer,retain,buffer,assert,next,buffer,reader,true,1,true,false,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,buffer,consumer,close,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,1,partition,get,buffers,in,backlog,assert,next,buffer,reader,true,0,true,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,buffer,recycle,buffer,assert,true,buffer,is,recycled,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpilledPartition() throws Exception;1515161905;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled released partition.;@Test_	public void testAddOnReleasedSpilledPartition() throws Exception {_		testAddOnReleasedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,released,partition;test,public,void,test,add,on,released,spilled,partition,throws,exception,test,add,on,released,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpilledPartition() throws Exception;1515510677;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled released partition.;@Test_	public void testAddOnReleasedSpilledPartition() throws Exception {_		testAddOnReleasedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,released,partition;test,public,void,test,add,on,released,spilled,partition,throws,exception,test,add,on,released,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpilledPartition() throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled released partition.;@Test_	public void testAddOnReleasedSpilledPartition() throws Exception {_		testAddOnReleasedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,released,partition;test,public,void,test,add,on,released,spilled,partition,throws,exception,test,add,on,released,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpilledPartition() throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled released partition.;@Test_	public void testAddOnReleasedSpilledPartition() throws Exception {_		testAddOnReleasedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,released,partition;test,public,void,test,add,on,released,spilled,partition,throws,exception,test,add,on,released,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpilledPartition() throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled released partition.;@Test_	public void testAddOnReleasedSpilledPartition() throws Exception {_		testAddOnReleasedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,released,partition;test,public,void,test,add,on,released,spilled,partition,throws,exception,test,add,on,released,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpilledPartition() throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled released partition.;@Test_	public void testAddOnReleasedSpilledPartition() throws Exception {_		testAddOnReleasedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,released,partition;test,public,void,test,add,on,released,spilled,partition,throws,exception,test,add,on,released,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpilledPartition() throws Exception;1516285878;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled released partition.;@Test_	public void testAddOnReleasedSpilledPartition() throws Exception {_		testAddOnReleasedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,released,partition;test,public,void,test,add,on,released,spilled,partition,throws,exception,test,add,on,released,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpilledPartition() throws Exception;1518785736;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled released partition.;@Test_	public void testAddOnReleasedSpilledPartition() throws Exception {_		testAddOnReleasedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,released,partition;test,public,void,test,add,on,released,spilled,partition,throws,exception,test,add,on,released,partition,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1515510714;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1516285456;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1516285456;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1516285878;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1518785736;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1519039287;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1519039301;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1519718833;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1519718833;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1519718834;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1519834372;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1520610580;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1522049586;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1522249274;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1524128187;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1524407315;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1537385496;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpilledPartitionWithView() throws Exception;1538998760;Tests cleanup of {@link SpillableSubpartition#release()} with a spilled partition and a_read view attached.;@Test_	public void testCleanupReleasedSpilledPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spilled,partition,and,a,read,view,attached;test,public,void,test,cleanup,released,spilled,partition,with,view,throws,exception,test,cleanup,released,partition,true,true
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1515161905;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			if (buffer.isRecycled()) {_				Assert.fail("buffer recycled before the write operation completed")__			}_			buffer.recycle()__			assertEquals(1, partition.getTotalNumberOfBuffers())__			assertEquals(4096, partition.getTotalNumberOfBytes())__		}_	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer,finally,io,manager,shutdown,if,buffer,is,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,buffer,recycle,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4096,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1515510677;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			if (buffer.isRecycled()) {_				Assert.fail("buffer recycled before the write operation completed")__			}_			buffer.recycle()__			assertEquals(1, partition.getTotalNumberOfBuffers())__			assertEquals(4096, partition.getTotalNumberOfBytes())__		}_	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer,finally,io,manager,shutdown,if,buffer,is,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,buffer,recycle,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4096,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycle()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4096, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4096,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycle()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4096, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4096,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		Buffer buffer = TestBufferFactory.createBuffer(4096)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycle()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4096, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,buffer,test,buffer,factory,create,buffer,4096,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4096,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		Buffer buffer = TestBufferFactory.createBuffer(4096, 4096)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycle()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4096, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,buffer,test,buffer,factory,create,buffer,4096,4096,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4096,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1516285878;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		Buffer buffer = TestBufferFactory.createBuffer(4096, 4096)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycleBuffer()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4096, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,buffer,test,buffer,factory,create,buffer,4096,4096,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,buffer,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4096,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1518785736;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		Buffer buffer = TestBufferFactory.createBuffer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycleBuffer()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,buffer,test,buffer,factory,create,buffer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,buffer,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1519039287;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1519039301;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1519718833;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1519718833;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1519718834;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1519834372;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1520610580;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1522049586;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1522249274;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1524128187;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1524407315;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1537385496;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception;1538998760;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithSlowWriter() throws Exception {_		_		IOManager ioManager = new IOManagerAsyncWithNoOpBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (bufferRecycled) {_			Assert.fail("buffer recycled before the write operation completed")__		}_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,slow,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,no,op,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,recycled,before,the,write,operation,completed,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1437739193;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_				.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_				0, mock(ResultPartition.class), ioManager, SYNC)___		_		partition.releaseMemory()___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,sync,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1438333362;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_				.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_				0, mock(ResultPartition.class), ioManager, SYNC)___		_		partition.releaseMemory()___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,sync,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1480624969;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1480624969;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1493724918;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1515160774;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1515160792;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1515161905;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1515510677;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1515510714;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1515510714;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1516285456;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1516285456;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1516285878;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1518785736;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1519039287;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1519039301;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1519718833;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1519718833;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1519718834;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1519834372;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1520610580;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1522049586;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1522249274;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1524128187;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1524407315;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1537385496;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(any(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,any,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testConcurrentFinishAndReleaseMemory() throws Exception;1538998760;Tests a fix for FLINK-2384.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2384">FLINK-2384</a>;@Test_	public void testConcurrentFinishAndReleaseMemory() throws Exception {_		_		final CountDownLatch doneLatch = new CountDownLatch(1)__		final CountDownLatch blockLatch = new CountDownLatch(1)___		_		AsynchronousBufferFileWriter spillWriter = mock(AsynchronousBufferFileWriter.class)__		doAnswer(new Answer<Void>() {_			@Override_			public Void answer(InvocationOnMock invocation) throws Throwable {_				blockLatch.countDown()__				doneLatch.await()__				return null__			}_		}).when(spillWriter).close()___		_		IOManager ioManager = mock(IOManager.class)__		when(ioManager.createBufferFileWriter(nullable(FileIOChannel.ID.class)))_			.thenReturn(spillWriter)___		_		final SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		_		assertEquals(0, partition.releaseMemory())___		ExecutorService executor = Executors.newSingleThreadExecutor()___		_		Future<Void> blockingFinish = executor.submit(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				partition.finish()__				return null__			}_		})___		_		blockLatch.await()___		_		_		_		partition.releaseMemory()___		_		_		doneLatch.countDown()__		blockingFinish.get()__	};tests,a,fix,for,flink,2384,see,a,href,https,issues,apache,org,jira,browse,flink,2384,flink,2384,a;test,public,void,test,concurrent,finish,and,release,memory,throws,exception,final,count,down,latch,done,latch,new,count,down,latch,1,final,count,down,latch,block,latch,new,count,down,latch,1,asynchronous,buffer,file,writer,spill,writer,mock,asynchronous,buffer,file,writer,class,do,answer,new,answer,void,override,public,void,answer,invocation,on,mock,invocation,throws,throwable,block,latch,count,down,done,latch,await,return,null,when,spill,writer,close,iomanager,io,manager,mock,iomanager,class,when,io,manager,create,buffer,file,writer,nullable,file,iochannel,id,class,then,return,spill,writer,final,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,assert,equals,0,partition,release,memory,executor,service,executor,executors,new,single,thread,executor,future,void,blocking,finish,executor,submit,new,callable,void,override,public,void,call,throws,exception,partition,finish,return,null,block,latch,await,partition,release,memory,done,latch,count,down,blocking,finish,get
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1515161905;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1515510677;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1515510714;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1515510714;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1516285456;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1516285456;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1516285878;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1518785736;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1519039287;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1519039301;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1519718833;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1519718833;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1519718834;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1519834372;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1520610580;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1522049586;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1522249274;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1524128187;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1524407315;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1537385496;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception;1538998760;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition without a view_but with a writer that does not do any write to check for correct buffer recycling.;@Test_	public void testReleaseOnSpillablePartitionWithoutViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(false)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,without,a,view,but,with,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,without,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,false
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumers() throws Exception;1519718833;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers()} spilled bytes counting.;@Test_	public void testSpillFinishedBufferConsumers() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE)___		try (BufferConsumer buffer = bufferBuilder.createBufferConsumer()) {_			partition.add(buffer)__			assertEquals(0, partition.releaseMemory())__			_			bufferBuilder.appendAndCommit(ByteBuffer.allocate(BUFFER_DATA_SIZE))__			bufferBuilder.finish()_ _			assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers())__		}_	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,counting;test,public,void,test,spill,finished,buffer,consumers,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,try,buffer,consumer,buffer,buffer,builder,create,buffer,consumer,partition,add,buffer,assert,equals,0,partition,release,memory,buffer,builder,append,and,commit,byte,buffer,allocate,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumers() throws Exception;1519718833;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers()} spilled bytes counting.;@Test_	public void testSpillFinishedBufferConsumers() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE)___		try (BufferConsumer buffer = bufferBuilder.createBufferConsumer()) {_			partition.add(buffer)__			assertEquals(0, partition.releaseMemory())__			_			bufferBuilder.appendAndCommit(ByteBuffer.allocate(BUFFER_DATA_SIZE))__			bufferBuilder.finish()_ _			assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers())__		}_	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,counting;test,public,void,test,spill,finished,buffer,consumers,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,try,buffer,consumer,buffer,buffer,builder,create,buffer,consumer,partition,add,buffer,assert,equals,0,partition,release,memory,buffer,builder,append,and,commit,byte,buffer,allocate,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumers() throws Exception;1519718834;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers()} spilled bytes counting.;@Test_	public void testSpillFinishedBufferConsumers() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE)___		try (BufferConsumer buffer = bufferBuilder.createBufferConsumer()) {_			partition.add(buffer)__			assertEquals(0, partition.releaseMemory())__			_			bufferBuilder.appendAndCommit(ByteBuffer.allocate(BUFFER_DATA_SIZE))__			bufferBuilder.finish()_ _			assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers())__		}_	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,counting;test,public,void,test,spill,finished,buffer,consumers,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,try,buffer,consumer,buffer,buffer,builder,create,buffer,consumer,partition,add,buffer,assert,equals,0,partition,release,memory,buffer,builder,append,and,commit,byte,buffer,allocate,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumers() throws Exception;1519834372;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers()} spilled bytes counting.;@Test_	public void testSpillFinishedBufferConsumers() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE)___		try (BufferConsumer buffer = bufferBuilder.createBufferConsumer()) {_			partition.add(buffer)__			assertEquals(0, partition.releaseMemory())__			_			bufferBuilder.appendAndCommit(ByteBuffer.allocate(BUFFER_DATA_SIZE))__			bufferBuilder.finish()_ _			assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers())__		}_	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,counting;test,public,void,test,spill,finished,buffer,consumers,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,try,buffer,consumer,buffer,buffer,builder,create,buffer,consumer,partition,add,buffer,assert,equals,0,partition,release,memory,buffer,builder,append,and,commit,byte,buffer,allocate,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumers() throws Exception;1520610580;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers()} spilled bytes counting.;@Test_	public void testSpillFinishedBufferConsumers() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE)___		try (BufferConsumer buffer = bufferBuilder.createBufferConsumer()) {_			partition.add(buffer)__			assertEquals(0, partition.releaseMemory())__			_			bufferBuilder.appendAndCommit(ByteBuffer.allocate(BUFFER_DATA_SIZE))__			bufferBuilder.finish()_ _			assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers())__		}_	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,counting;test,public,void,test,spill,finished,buffer,consumers,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,try,buffer,consumer,buffer,buffer,builder,create,buffer,consumer,partition,add,buffer,assert,equals,0,partition,release,memory,buffer,builder,append,and,commit,byte,buffer,allocate,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumers() throws Exception;1522049586;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers()} spilled bytes counting.;@Test_	public void testSpillFinishedBufferConsumers() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE)___		try (BufferConsumer buffer = bufferBuilder.createBufferConsumer()) {_			partition.add(buffer)__			assertEquals(0, partition.releaseMemory())__			_			bufferBuilder.appendAndCommit(ByteBuffer.allocate(BUFFER_DATA_SIZE))__			bufferBuilder.finish()_ _			assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers())__		}_	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,counting;test,public,void,test,spill,finished,buffer,consumers,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,try,buffer,consumer,buffer,buffer,builder,create,buffer,consumer,partition,add,buffer,assert,equals,0,partition,release,memory,buffer,builder,append,and,commit,byte,buffer,allocate,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumers() throws Exception;1522249274;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers()} spilled bytes counting.;@Test_	public void testSpillFinishedBufferConsumers() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE)___		partition.add(bufferBuilder.createBufferConsumer())__		assertEquals(0, partition.releaseMemory())__		_		bufferBuilder.appendAndCommit(ByteBuffer.allocate(BUFFER_DATA_SIZE))__		bufferBuilder.finish()_ _		assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers())__	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,counting;test,public,void,test,spill,finished,buffer,consumers,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,partition,add,buffer,builder,create,buffer,consumer,assert,equals,0,partition,release,memory,buffer,builder,append,and,commit,byte,buffer,allocate,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1515161905;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1515510677;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1516285878;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1518785736;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1519039287;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1519039301;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1519718833;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1519718833;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1519718834;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1519834372;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1520610580;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1522049586;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1522249274;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1524128187;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1524407315;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1537385496;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testAddOnFinishedSpilledPartition() throws Exception;1538998760;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled finished partition.;@Test_	public void testAddOnFinishedSpilledPartition() throws Exception {_		testAddOnFinishedPartition(true)__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,finished,partition;test,public,void,test,add,on,finished,spilled,partition,throws,exception,test,add,on,finished,partition,true
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1480624969;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		ResultPartition parent = mock(ResultPartition.class)__		SpillableSubpartition partition = new SpillableSubpartition(_			0,_			parent,_			ioManager)___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)___		assertEquals(3, partition.releaseMemory())___		partition.finish()___		BufferAvailabilityListener listener = mock(BufferAvailabilityListener.class)__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(new TestInfiniteBufferProvider(), listener)___		verify(listener, times(1)).notifyBuffersAvailable(eq(4L))___		Buffer read = reader.getNextBuffer()__		assertNotNull(read)__		read.recycle()___		read = reader.getNextBuffer()__		assertNotNull(read)__		read.recycle()___		read = reader.getNextBuffer()__		assertNotNull(read)__		read.recycle()___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(EndOfPartitionEvent.class, EventSerializer.fromBuffer(read, ClassLoader.getSystemClassLoader()).getClass())__		read.recycle()__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,result,partition,parent,mock,result,partition,class,spillable,subpartition,partition,new,spillable,subpartition,0,parent,io,manager,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,assert,equals,3,partition,release,memory,partition,finish,buffer,availability,listener,listener,mock,buffer,availability,listener,class,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,new,test,infinite,buffer,provider,listener,verify,listener,times,1,notify,buffers,available,eq,4l,buffer,read,reader,get,next,buffer,assert,not,null,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,class,loader,get,system,class,loader,get,class,read,recycle
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1493724918;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)___		assertEquals(3, partition.releaseMemory())___		partition.finish()___		BufferAvailabilityListener listener = mock(BufferAvailabilityListener.class)__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		verify(listener, times(1)).notifyBuffersAvailable(eq(4L))___		Buffer read = reader.getNextBuffer()__		assertNotNull(read)__		read.recycle()___		read = reader.getNextBuffer()__		assertNotNull(read)__		read.recycle()___		read = reader.getNextBuffer()__		assertNotNull(read)__		read.recycle()___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(EndOfPartitionEvent.class, EventSerializer.fromBuffer(read, ClassLoader.getSystemClassLoader()).getClass())__		read.recycle()__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,assert,equals,3,partition,release,memory,partition,finish,buffer,availability,listener,listener,mock,buffer,availability,listener,class,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,verify,listener,times,1,notify,buffers,available,eq,4l,buffer,read,reader,get,next,buffer,assert,not,null,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,read,recycle,read,reader,get,next,buffer,assert,not,null,read,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,class,loader,get,system,class,loader,get,class,read,recycle
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1515160774;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)___		assertFalse(buffer.isRecycled())__		assertEquals(3, partition.releaseMemory())__		_		__		partition.finish()___		BufferAvailabilityListener listener = spy(new AwaitableBufferAvailablityListener())__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		verify(listener, times(1)).notifyBuffersAvailable(eq(4L))___		Buffer read = reader.getNextBuffer()__		assertNotNull(read)__		assertNotSame(buffer, read)__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertNotSame(buffer, read)__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertNotSame(buffer, read)__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(EndOfPartitionEvent.class, EventSerializer.fromBuffer(read, ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,assert,false,buffer,is,recycled,assert,equals,3,partition,release,memory,partition,finish,buffer,availability,listener,listener,spy,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,verify,listener,times,1,notify,buffers,available,eq,4l,buffer,read,reader,get,next,buffer,assert,not,null,read,assert,not,same,buffer,read,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,not,same,buffer,read,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,not,same,buffer,read,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,class,loader,get,system,class,loader,get,class,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1515160792;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertFalse(buffer.isRecycled())__		assertEquals(3, partition.releaseMemory())__		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		BufferAvailabilityListener listener = spy(new AwaitableBufferAvailablityListener())__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		verify(listener, times(1)).notifyBuffersAvailable(eq(4L))___		Buffer read = reader.getNextBuffer()__		assertNotNull(read)__		assertNotSame(buffer, read)__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertNotSame(buffer, read)__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertNotSame(buffer, read)__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(EndOfPartitionEvent.class, EventSerializer.fromBuffer(read, ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,false,buffer,is,recycled,assert,equals,3,partition,release,memory,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,buffer,availability,listener,listener,spy,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,verify,listener,times,1,notify,buffers,available,eq,4l,buffer,read,reader,get,next,buffer,assert,not,null,read,assert,not,same,buffer,read,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,not,same,buffer,read,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,not,same,buffer,read,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,class,loader,get,system,class,loader,get,class,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1515161905;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertFalse(buffer.isRecycled())__		assertEquals(3, partition.releaseMemory())__		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		BufferAvailabilityListener listener = spy(new AwaitableBufferAvailablityListener())__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		verify(listener, times(1)).notifyBuffersAvailable(eq(4L))___		Buffer read = reader.getNextBuffer()__		assertNotNull(read)__		assertNotSame(buffer, read)__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertNotSame(buffer, read)__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertNotSame(buffer, read)__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(EndOfPartitionEvent.class, EventSerializer.fromBuffer(read, ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.isRecycled())__		read.recycle()__		assertTrue(read.isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,false,buffer,is,recycled,assert,equals,3,partition,release,memory,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,buffer,availability,listener,listener,spy,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,verify,listener,times,1,notify,buffers,available,eq,4l,buffer,read,reader,get,next,buffer,assert,not,null,read,assert,not,same,buffer,read,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,not,same,buffer,read,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,not,same,buffer,read,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,class,loader,get,system,class,loader,get,class,assert,false,read,is,recycled,read,recycle,assert,true,read,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1515510677;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertFalse(buffer.isRecycled())__		assertEquals(3, partition.releaseMemory())__		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		BufferAvailabilityListener listener = spy(new AwaitableBufferAvailablityListener())__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		verify(listener, times(1)).notifyBuffersAvailable(eq(4L))___		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,false,buffer,is,recycled,assert,equals,3,partition,release,memory,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,partition,get,total,number,of,bytes,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,buffer,availability,listener,listener,spy,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,verify,listener,times,1,notify,buffers,available,eq,4l,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1515510714;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertFalse(buffer.isRecycled())__		assertEquals(3, partition.releaseMemory())__		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		BufferAvailabilityListener listener = spy(new AwaitableBufferAvailablityListener())__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		verify(listener, times(1)).notifyBuffersAvailable(eq(4L))___		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,false,buffer,is,recycled,assert,equals,3,partition,release,memory,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,partition,get,total,number,of,bytes,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,buffer,availability,listener,listener,spy,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,verify,listener,times,1,notify,buffers,available,eq,4l,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1515510714;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096), FreeingBufferRecycler.INSTANCE)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertFalse(buffer.isRecycled())__		assertEquals(3, partition.releaseMemory())__		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		BufferAvailabilityListener listener = spy(new AwaitableBufferAvailablityListener())__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		verify(listener, times(1)).notifyBuffersAvailable(eq(4L))___		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,false,buffer,is,recycled,assert,equals,3,partition,release,memory,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,partition,get,total,number,of,bytes,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,buffer,availability,listener,listener,spy,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,verify,listener,times,1,notify,buffers,available,eq,4l,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1516285456;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = TestBufferFactory.createBuffer(4096)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertFalse(buffer.isRecycled())__		assertEquals(3, partition.releaseMemory())__		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		BufferAvailabilityListener listener = spy(new AwaitableBufferAvailablityListener())__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		verify(listener, times(1)).notifyBuffersAvailable(eq(4L))___		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,test,buffer,factory,create,buffer,4096,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,false,buffer,is,recycled,assert,equals,3,partition,release,memory,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,partition,get,total,number,of,bytes,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,buffer,availability,listener,listener,spy,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,verify,listener,times,1,notify,buffers,available,eq,4l,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1516285456;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = TestBufferFactory.createBuffer(4096, 4096)__		buffer.retain()__		buffer.retain()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertFalse(buffer.isRecycled())__		assertEquals(3, partition.releaseMemory())__		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		BufferAvailabilityListener listener = spy(new AwaitableBufferAvailablityListener())__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		verify(listener, times(1)).notifyBuffersAvailable(eq(4L))___		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycle()__		assertTrue(read.buffer().isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,test,buffer,factory,create,buffer,4096,4096,buffer,retain,buffer,retain,partition,add,buffer,partition,add,buffer,partition,add,buffer,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,false,buffer,is,recycled,assert,equals,3,partition,release,memory,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,partition,get,total,number,of,bytes,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,buffer,availability,listener,listener,spy,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,verify,listener,times,1,notify,buffers,available,eq,4l,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,assert,true,read,buffer,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1516285878;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = TestBufferFactory.createBuffer(4096, 4096)__		buffer.retainBuffer()__		buffer.retainBuffer()___		partition.add(buffer)__		partition.add(buffer)__		partition.add(buffer)__		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		assertFalse(buffer.isRecycled())__		assertEquals(3, partition.releaseMemory())__		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		_		_		_		assertEquals(3, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(4096 * 3 + 4, partition.getTotalNumberOfBytes())___		BufferAvailabilityListener listener = spy(new AwaitableBufferAvailablityListener())__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		verify(listener, times(1)).notifyBuffersAvailable(eq(4L))___		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())___		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())___		_		read = reader.getNextBuffer()__		assertNotNull(read)__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,test,buffer,factory,create,buffer,4096,4096,buffer,retain,buffer,buffer,retain,buffer,partition,add,buffer,partition,add,buffer,partition,add,buffer,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,false,buffer,is,recycled,assert,equals,3,partition,release,memory,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,4096,3,partition,get,total,number,of,bytes,assert,equals,3,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,partition,get,total,number,of,bytes,partition,finish,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,4096,3,4,partition,get,total,number,of,bytes,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4096,3,4,partition,get,total,number,of,bytes,buffer,availability,listener,listener,spy,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,verify,listener,times,1,notify,buffers,available,eq,4l,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,read,reader,get,next,buffer,assert,not,null,read,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1518785736;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer = TestBufferFactory.createBuffer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		buffer.retainBuffer()__		buffer.retainBuffer()___		partition.add(buffer)__		partition.add(buffer)__		{_			Buffer event = TestBufferFactory.createBuffer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__			event.tagAsEvent()__			partition.add(event)__		}_		partition.add(buffer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4, partition.getTotalNumberOfBytes())___		assertFalse(buffer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())__		assertEquals(5, listener.getNumNotifiedBuffers())___		assertFalse(reader.nextBufferIsEvent())_ _		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read.buffer())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(buffer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!buffer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(buffer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer,test,buffer,factory,create,buffer,buffer,retain,buffer,buffer,retain,buffer,partition,add,buffer,partition,add,buffer,buffer,event,test,buffer,factory,create,buffer,event,tag,as,event,partition,add,event,partition,add,buffer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,partition,get,total,number,of,bytes,assert,false,buffer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,equals,5,listener,get,num,notified,buffers,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,buffer,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1519039287;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(BufferBuilderTestUtils.createEventBufferConsumer(BUFFER_DATA_SIZE))__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		___		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())__		assertEquals(5, listener.getNumNotifiedBuffers())___		assertFalse(reader.nextBufferIsEvent())_ _		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(bufferConsumer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(bufferConsumer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,buffer,builder,test,utils,create,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,equals,5,listener,get,num,notified,buffers,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,consumer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,consumer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1519039301;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(BufferBuilderTestUtils.createEventBufferConsumer(BUFFER_DATA_SIZE))__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		___		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(bufferConsumer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(bufferConsumer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,buffer,builder,test,utils,create,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,consumer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,consumer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1519718833;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(BufferBuilderTestUtils.createEventBufferConsumer(BUFFER_DATA_SIZE))__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		___		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(bufferConsumer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(bufferConsumer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,buffer,builder,test,utils,create,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,consumer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,consumer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1519718833;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(BufferBuilderTestUtils.createEventBufferConsumer(BUFFER_DATA_SIZE))__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(bufferConsumer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertNotSame(bufferConsumer, read)__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,buffer,builder,test,utils,create,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,consumer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,not,same,buffer,consumer,read,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1519718834;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(BufferBuilderTestUtils.createEventBufferConsumer(BUFFER_DATA_SIZE))__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,buffer,builder,test,utils,create,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1519834372;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(BufferBuilderTestUtils.createEventBufferConsumer(BUFFER_DATA_SIZE))__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 4 + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		BufferAndBacklog read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(2, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(1, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		read.buffer().recycleBuffer()__		assertFalse(read.nextBufferIsEvent())___		assertFalse(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertTrue(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertTrue(read.nextBufferIsEvent())___		assertTrue(reader.nextBufferIsEvent())_ _		read = reader.getNextBuffer()__		assertNotNull(read)__		assertFalse(read.buffer().isBuffer())__		assertEquals(0, partition.getBuffersInBacklog())__		assertEquals(partition.getBuffersInBacklog(), read.buffersInBacklog())__		assertEquals(EndOfPartitionEvent.class,_			EventSerializer.fromBuffer(read.buffer(), ClassLoader.getSystemClassLoader()).getClass())__		assertFalse(read.buffer().isRecycled())__		read.buffer().recycleBuffer()__		assertTrue(read.buffer().isRecycled())__		assertFalse(read.nextBufferIsEvent())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,buffer,builder,test,utils,create,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,4,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,buffer,and,backlog,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,2,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,1,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,read,buffer,recycle,buffer,assert,false,read,next,buffer,is,event,assert,false,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,true,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,true,read,next,buffer,is,event,assert,true,reader,next,buffer,is,event,read,reader,get,next,buffer,assert,not,null,read,assert,false,read,buffer,is,buffer,assert,equals,0,partition,get,buffers,in,backlog,assert,equals,partition,get,buffers,in,backlog,read,buffers,in,backlog,assert,equals,end,of,partition,event,class,event,serializer,from,buffer,read,buffer,class,loader,get,system,class,loader,get,class,assert,false,read,buffer,is,recycled,read,buffer,recycle,buffer,assert,true,read,buffer,is,recycled,assert,false,read,next,buffer,is,event,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1520610580;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, true)__		assertEquals(2, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(0, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,true,assert,equals,2,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,1,true,true,assert,equals,1,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,1,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,0,true,true,assert,equals,0,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1522049586;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, true)__		assertEquals(2, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(0, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,true,assert,equals,2,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,1,true,true,assert,equals,1,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,1,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,0,true,true,assert,equals,0,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1522249274;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, true)__		assertEquals(2, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(0, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,true,assert,equals,2,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,1,true,true,assert,equals,1,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,1,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,0,true,true,assert,equals,0,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1524128187;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, true)__		assertEquals(2, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(0, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,true,assert,equals,2,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,1,true,true,assert,equals,1,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,1,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,0,true,true,assert,equals,0,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1524407315;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, true)__		assertEquals(2, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(0, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,true,assert,equals,2,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,1,true,true,assert,equals,1,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,1,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,0,true,true,assert,equals,0,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1537385496;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())__		assertFalse(reader.nextBufferIsEvent())_ __		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, true)__		assertEquals(2, partition.getBuffersInBacklog())___		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(0, partition.getBuffersInBacklog())___		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,true,assert,equals,2,partition,get,buffers,in,backlog,assert,next,buffer,reader,true,1,true,true,assert,equals,1,partition,get,buffers,in,backlog,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,1,partition,get,buffers,in,backlog,assert,next,buffer,reader,true,0,true,true,assert,equals,0,partition,get,buffers,in,backlog,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartition() throws Exception;1538998760;Tests that a spilled partition is correctly read back in via a spilled_read view.;@Test_	public void testConsumeSpilledPartition() throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer bufferConsumer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		partition.add(bufferConsumer.copy())__		partition.add(bufferConsumer.copy())__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumer)___		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(0, partition.getTotalNumberOfBytes())_ __		assertFalse(bufferConsumer.isRecycled())__		assertEquals(4, partition.releaseMemory())__		_		_		_		assertEquals(4, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize, partition.getTotalNumberOfBytes())___		partition.finish()__		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(BUFFER_DATA_SIZE * 3 + eventSize + 4, partition.getTotalNumberOfBytes())___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())__		assertFalse(reader.nextBufferIsEvent())_ __		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, true)__		assertEquals(2, partition.getBuffersInBacklog())___		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 0, true, true)__		assertEquals(0, partition.getBuffersInBacklog())___		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(0, partition.getBuffersInBacklog())___		_		final long deadline = System.currentTimeMillis() + 30_000L_ _		while (!bufferConsumer.isRecycled() && System.currentTimeMillis() < deadline) {_			Thread.sleep(1)__		}_		assertTrue(bufferConsumer.isRecycled())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view;test,public,void,test,consume,spilled,partition,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer,consumer,create,filled,buffer,consumer,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumer,copy,partition,add,buffer,consumer,copy,partition,add,event,buffer,consumer,partition,add,buffer,consumer,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,0,partition,get,total,number,of,bytes,assert,false,buffer,consumer,is,recycled,assert,equals,4,partition,release,memory,assert,equals,4,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,partition,get,total,number,of,bytes,partition,finish,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,3,event,size,4,partition,get,total,number,of,bytes,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,true,assert,equals,2,partition,get,buffers,in,backlog,assert,next,buffer,reader,true,1,true,true,assert,equals,1,partition,get,buffers,in,backlog,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,1,partition,get,buffers,in,backlog,assert,next,buffer,reader,true,0,true,true,assert,equals,0,partition,get,buffers,in,backlog,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,0,partition,get,buffers,in,backlog,final,long,deadline,system,current,time,millis,while,buffer,consumer,is,recycled,system,current,time,millis,deadline,thread,sleep,1,assert,true,buffer,consumer,is,recycled
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartitionSpilledBeforeAdd() throws Exception;1524128187;Tests that a spilled partition is correctly read back in via a spilled read view. The_partition went into spilled state before adding buffers and the access pattern resembles_the actual use of {@link org.apache.flink.runtime.io.network.api.writer.RecordWriter}.;@Test_	public void testConsumeSpilledPartitionSpilledBeforeAdd() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		assertEquals(0, partition.releaseMemory())_ __		BufferBuilder[] bufferBuilders = new BufferBuilder[] {_			createBufferBuilder(BUFFER_DATA_SIZE),_			createBufferBuilder(BUFFER_DATA_SIZE),_			createBufferBuilder(BUFFER_DATA_SIZE),_			createBufferBuilder(BUFFER_DATA_SIZE)_		}__		BufferConsumer[] bufferConsumers = Arrays.stream(bufferBuilders).map(_			BufferBuilder::createBufferConsumer_		).toArray(BufferConsumer[]::new)___		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		_		partition.add(bufferConsumers[0])__		fillBufferBuilder(bufferBuilders[0], BUFFER_DATA_SIZE).finish()__		partition.add(bufferConsumers[1])__		fillBufferBuilder(bufferBuilders[1], BUFFER_DATA_SIZE).finish()__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumers[2])__		bufferBuilders[2].finish()_ _		partition.add(bufferConsumers[3])__		_		fillBufferBuilder(bufferBuilders[3], BUFFER_DATA_SIZE / 2)__		_		int expectedSize = BUFFER_DATA_SIZE * 2 + eventSize___		_		_		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(expectedSize, partition.getTotalNumberOfBytes())___		partition.finish()__		expectedSize += BUFFER_DATA_SIZE / 2_ _		expectedSize += 4_ _		assertEquals(6, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(expectedSize, partition.getTotalNumberOfBytes())__		Arrays.stream(bufferConsumers).forEach(bufferConsumer -> assertTrue(bufferConsumer.isRecycled()))___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, true)__		assertEquals(2, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE / 2, true, 0, true, true)__		assertEquals(0, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(0, partition.getBuffersInBacklog())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view,the,partition,went,into,spilled,state,before,adding,buffers,and,the,access,pattern,resembles,the,actual,use,of,link,org,apache,flink,runtime,io,network,api,writer,record,writer;test,public,void,test,consume,spilled,partition,spilled,before,add,throws,exception,spillable,subpartition,partition,create,subpartition,assert,equals,0,partition,release,memory,buffer,builder,buffer,builders,new,buffer,builder,create,buffer,builder,create,buffer,builder,create,buffer,builder,create,buffer,builder,buffer,consumer,buffer,consumers,arrays,stream,buffer,builders,map,buffer,builder,create,buffer,consumer,to,array,buffer,consumer,new,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumers,0,fill,buffer,builder,buffer,builders,0,finish,partition,add,buffer,consumers,1,fill,buffer,builder,buffer,builders,1,finish,partition,add,event,buffer,consumer,partition,add,buffer,consumers,2,buffer,builders,2,finish,partition,add,buffer,consumers,3,fill,buffer,builder,buffer,builders,3,2,int,expected,size,2,event,size,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,expected,size,partition,get,total,number,of,bytes,partition,finish,expected,size,2,expected,size,4,assert,equals,6,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,expected,size,partition,get,total,number,of,bytes,arrays,stream,buffer,consumers,for,each,buffer,consumer,assert,true,buffer,consumer,is,recycled,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,true,assert,equals,2,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,1,true,true,assert,equals,1,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,1,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,2,true,0,true,true,assert,equals,0,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,0,partition,get,buffers,in,backlog
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartitionSpilledBeforeAdd() throws Exception;1524407315;Tests that a spilled partition is correctly read back in via a spilled read view. The_partition went into spilled state before adding buffers and the access pattern resembles_the actual use of {@link org.apache.flink.runtime.io.network.api.writer.RecordWriter}.;@Test_	public void testConsumeSpilledPartitionSpilledBeforeAdd() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		assertEquals(0, partition.releaseMemory())_ __		BufferBuilder[] bufferBuilders = new BufferBuilder[] {_			createBufferBuilder(BUFFER_DATA_SIZE),_			createBufferBuilder(BUFFER_DATA_SIZE),_			createBufferBuilder(BUFFER_DATA_SIZE),_			createBufferBuilder(BUFFER_DATA_SIZE)_		}__		BufferConsumer[] bufferConsumers = Arrays.stream(bufferBuilders).map(_			BufferBuilder::createBufferConsumer_		).toArray(BufferConsumer[]::new)___		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		_		partition.add(bufferConsumers[0])__		fillBufferBuilder(bufferBuilders[0], BUFFER_DATA_SIZE).finish()__		partition.add(bufferConsumers[1])__		fillBufferBuilder(bufferBuilders[1], BUFFER_DATA_SIZE).finish()__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumers[2])__		bufferBuilders[2].finish()_ _		partition.add(bufferConsumers[3])__		_		fillBufferBuilder(bufferBuilders[3], BUFFER_DATA_SIZE / 2)__		_		int expectedSize = BUFFER_DATA_SIZE * 2 + eventSize___		_		_		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(expectedSize, partition.getTotalNumberOfBytes())___		partition.finish()__		expectedSize += BUFFER_DATA_SIZE / 2_ _		expectedSize += 4_ _		assertEquals(6, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(expectedSize, partition.getTotalNumberOfBytes())__		Arrays.stream(bufferConsumers).forEach(bufferConsumer -> assertTrue(bufferConsumer.isRecycled()))___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, true)__		assertEquals(2, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertFalse(reader.nextBufferIsEvent())_ _		assertNextBuffer(reader, BUFFER_DATA_SIZE / 2, true, 0, true, true)__		assertEquals(0, partition.getBuffersInBacklog())___		assertTrue(reader.nextBufferIsEvent())_ _		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(0, partition.getBuffersInBacklog())___		_		Arrays.stream(bufferConsumers).forEach(bufferConsumer -> bufferConsumer.close())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view,the,partition,went,into,spilled,state,before,adding,buffers,and,the,access,pattern,resembles,the,actual,use,of,link,org,apache,flink,runtime,io,network,api,writer,record,writer;test,public,void,test,consume,spilled,partition,spilled,before,add,throws,exception,spillable,subpartition,partition,create,subpartition,assert,equals,0,partition,release,memory,buffer,builder,buffer,builders,new,buffer,builder,create,buffer,builder,create,buffer,builder,create,buffer,builder,create,buffer,builder,buffer,consumer,buffer,consumers,arrays,stream,buffer,builders,map,buffer,builder,create,buffer,consumer,to,array,buffer,consumer,new,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumers,0,fill,buffer,builder,buffer,builders,0,finish,partition,add,buffer,consumers,1,fill,buffer,builder,buffer,builders,1,finish,partition,add,event,buffer,consumer,partition,add,buffer,consumers,2,buffer,builders,2,finish,partition,add,buffer,consumers,3,fill,buffer,builder,buffer,builders,3,2,int,expected,size,2,event,size,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,expected,size,partition,get,total,number,of,bytes,partition,finish,expected,size,2,expected,size,4,assert,equals,6,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,expected,size,partition,get,total,number,of,bytes,arrays,stream,buffer,consumers,for,each,buffer,consumer,assert,true,buffer,consumer,is,recycled,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,true,assert,equals,2,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,1,true,true,assert,equals,1,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,1,partition,get,buffers,in,backlog,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,2,true,0,true,true,assert,equals,0,partition,get,buffers,in,backlog,assert,true,reader,next,buffer,is,event,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,0,partition,get,buffers,in,backlog,arrays,stream,buffer,consumers,for,each,buffer,consumer,buffer,consumer,close
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartitionSpilledBeforeAdd() throws Exception;1537385496;Tests that a spilled partition is correctly read back in via a spilled read view. The_partition went into spilled state before adding buffers and the access pattern resembles_the actual use of {@link org.apache.flink.runtime.io.network.api.writer.RecordWriter}.;@Test_	public void testConsumeSpilledPartitionSpilledBeforeAdd() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		assertEquals(0, partition.releaseMemory())_ __		BufferBuilder[] bufferBuilders = new BufferBuilder[] {_			createBufferBuilder(BUFFER_DATA_SIZE),_			createBufferBuilder(BUFFER_DATA_SIZE),_			createBufferBuilder(BUFFER_DATA_SIZE),_			createBufferBuilder(BUFFER_DATA_SIZE)_		}__		BufferConsumer[] bufferConsumers = Arrays.stream(bufferBuilders).map(_			BufferBuilder::createBufferConsumer_		).toArray(BufferConsumer[]::new)___		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		_		partition.add(bufferConsumers[0])__		fillBufferBuilder(bufferBuilders[0], BUFFER_DATA_SIZE).finish()__		partition.add(bufferConsumers[1])__		fillBufferBuilder(bufferBuilders[1], BUFFER_DATA_SIZE).finish()__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumers[2])__		bufferBuilders[2].finish()_ _		partition.add(bufferConsumers[3])__		_		fillBufferBuilder(bufferBuilders[3], BUFFER_DATA_SIZE / 2)__		_		int expectedSize = BUFFER_DATA_SIZE * 2 + eventSize___		_		_		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(expectedSize, partition.getTotalNumberOfBytes())___		partition.finish()__		expectedSize += BUFFER_DATA_SIZE / 2_ _		expectedSize += 4_ _		assertEquals(6, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(expectedSize, partition.getTotalNumberOfBytes())__		Arrays.stream(bufferConsumers).forEach(bufferConsumer -> assertTrue(bufferConsumer.isRecycled()))___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())__		assertFalse(reader.nextBufferIsEvent())_ __		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, true)__		assertEquals(2, partition.getBuffersInBacklog())___		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertNextBuffer(reader, BUFFER_DATA_SIZE / 2, true, 0, true, true)__		assertEquals(0, partition.getBuffersInBacklog())___		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(0, partition.getBuffersInBacklog())___		_		Arrays.stream(bufferConsumers).forEach(bufferConsumer -> bufferConsumer.close())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view,the,partition,went,into,spilled,state,before,adding,buffers,and,the,access,pattern,resembles,the,actual,use,of,link,org,apache,flink,runtime,io,network,api,writer,record,writer;test,public,void,test,consume,spilled,partition,spilled,before,add,throws,exception,spillable,subpartition,partition,create,subpartition,assert,equals,0,partition,release,memory,buffer,builder,buffer,builders,new,buffer,builder,create,buffer,builder,create,buffer,builder,create,buffer,builder,create,buffer,builder,buffer,consumer,buffer,consumers,arrays,stream,buffer,builders,map,buffer,builder,create,buffer,consumer,to,array,buffer,consumer,new,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumers,0,fill,buffer,builder,buffer,builders,0,finish,partition,add,buffer,consumers,1,fill,buffer,builder,buffer,builders,1,finish,partition,add,event,buffer,consumer,partition,add,buffer,consumers,2,buffer,builders,2,finish,partition,add,buffer,consumers,3,fill,buffer,builder,buffer,builders,3,2,int,expected,size,2,event,size,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,expected,size,partition,get,total,number,of,bytes,partition,finish,expected,size,2,expected,size,4,assert,equals,6,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,expected,size,partition,get,total,number,of,bytes,arrays,stream,buffer,consumers,for,each,buffer,consumer,assert,true,buffer,consumer,is,recycled,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,true,assert,equals,2,partition,get,buffers,in,backlog,assert,next,buffer,reader,true,1,true,true,assert,equals,1,partition,get,buffers,in,backlog,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,1,partition,get,buffers,in,backlog,assert,next,buffer,reader,2,true,0,true,true,assert,equals,0,partition,get,buffers,in,backlog,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,0,partition,get,buffers,in,backlog,arrays,stream,buffer,consumers,for,each,buffer,consumer,buffer,consumer,close
SpillableSubpartitionTest -> @Test 	public void testConsumeSpilledPartitionSpilledBeforeAdd() throws Exception;1538998760;Tests that a spilled partition is correctly read back in via a spilled read view. The_partition went into spilled state before adding buffers and the access pattern resembles_the actual use of {@link org.apache.flink.runtime.io.network.api.writer.RecordWriter}.;@Test_	public void testConsumeSpilledPartitionSpilledBeforeAdd() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		assertEquals(0, partition.releaseMemory())_ __		BufferBuilder[] bufferBuilders = new BufferBuilder[] {_			createBufferBuilder(BUFFER_DATA_SIZE),_			createBufferBuilder(BUFFER_DATA_SIZE),_			createBufferBuilder(BUFFER_DATA_SIZE),_			createBufferBuilder(BUFFER_DATA_SIZE)_		}__		BufferConsumer[] bufferConsumers = Arrays.stream(bufferBuilders).map(_			BufferBuilder::createBufferConsumer_		).toArray(BufferConsumer[]::new)___		BufferConsumer eventBufferConsumer =_			EventSerializer.toBufferConsumer(new CancelCheckpointMarker(1))__		final int eventSize = eventBufferConsumer.getWrittenBytes()___		_		partition.add(bufferConsumers[0])__		fillBufferBuilder(bufferBuilders[0], BUFFER_DATA_SIZE).finish()__		partition.add(bufferConsumers[1])__		fillBufferBuilder(bufferBuilders[1], BUFFER_DATA_SIZE).finish()__		partition.add(eventBufferConsumer)__		partition.add(bufferConsumers[2])__		bufferBuilders[2].finish()_ _		partition.add(bufferConsumers[3])__		_		fillBufferBuilder(bufferBuilders[3], BUFFER_DATA_SIZE / 2)__		_		int expectedSize = BUFFER_DATA_SIZE * 2 + eventSize___		_		_		_		assertEquals(5, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(expectedSize, partition.getTotalNumberOfBytes())___		partition.finish()__		expectedSize += BUFFER_DATA_SIZE / 2_ _		expectedSize += 4_ _		assertEquals(6, partition.getTotalNumberOfBuffers())__		assertEquals(3, partition.getBuffersInBacklog())__		assertEquals(expectedSize, partition.getTotalNumberOfBytes())__		Arrays.stream(bufferConsumers).forEach(bufferConsumer -> assertTrue(bufferConsumer.isRecycled()))___		AwaitableBufferAvailablityListener listener = new AwaitableBufferAvailablityListener()__		SpilledSubpartitionView reader = (SpilledSubpartitionView) partition.createReadView(listener)___		assertEquals(1, listener.getNumNotifications())__		assertFalse(reader.nextBufferIsEvent())_ __		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 2, false, true)__		assertEquals(2, partition.getBuffersInBacklog())___		assertNextBuffer(reader, BUFFER_DATA_SIZE, true, 1, true, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertNextEvent(reader, eventSize, CancelCheckpointMarker.class, true, 1, false, true)__		assertEquals(1, partition.getBuffersInBacklog())___		assertNextBuffer(reader, BUFFER_DATA_SIZE / 2, true, 0, true, true)__		assertEquals(0, partition.getBuffersInBacklog())___		assertNextEvent(reader, 4, EndOfPartitionEvent.class, false, 0, false, true)__		assertEquals(0, partition.getBuffersInBacklog())___		_		Arrays.stream(bufferConsumers).forEach(bufferConsumer -> bufferConsumer.close())__	};tests,that,a,spilled,partition,is,correctly,read,back,in,via,a,spilled,read,view,the,partition,went,into,spilled,state,before,adding,buffers,and,the,access,pattern,resembles,the,actual,use,of,link,org,apache,flink,runtime,io,network,api,writer,record,writer;test,public,void,test,consume,spilled,partition,spilled,before,add,throws,exception,spillable,subpartition,partition,create,subpartition,assert,equals,0,partition,release,memory,buffer,builder,buffer,builders,new,buffer,builder,create,buffer,builder,create,buffer,builder,create,buffer,builder,create,buffer,builder,buffer,consumer,buffer,consumers,arrays,stream,buffer,builders,map,buffer,builder,create,buffer,consumer,to,array,buffer,consumer,new,buffer,consumer,event,buffer,consumer,event,serializer,to,buffer,consumer,new,cancel,checkpoint,marker,1,final,int,event,size,event,buffer,consumer,get,written,bytes,partition,add,buffer,consumers,0,fill,buffer,builder,buffer,builders,0,finish,partition,add,buffer,consumers,1,fill,buffer,builder,buffer,builders,1,finish,partition,add,event,buffer,consumer,partition,add,buffer,consumers,2,buffer,builders,2,finish,partition,add,buffer,consumers,3,fill,buffer,builder,buffer,builders,3,2,int,expected,size,2,event,size,assert,equals,5,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,expected,size,partition,get,total,number,of,bytes,partition,finish,expected,size,2,expected,size,4,assert,equals,6,partition,get,total,number,of,buffers,assert,equals,3,partition,get,buffers,in,backlog,assert,equals,expected,size,partition,get,total,number,of,bytes,arrays,stream,buffer,consumers,for,each,buffer,consumer,assert,true,buffer,consumer,is,recycled,awaitable,buffer,availablity,listener,listener,new,awaitable,buffer,availablity,listener,spilled,subpartition,view,reader,spilled,subpartition,view,partition,create,read,view,listener,assert,equals,1,listener,get,num,notifications,assert,false,reader,next,buffer,is,event,assert,next,buffer,reader,true,2,false,true,assert,equals,2,partition,get,buffers,in,backlog,assert,next,buffer,reader,true,1,true,true,assert,equals,1,partition,get,buffers,in,backlog,assert,next,event,reader,event,size,cancel,checkpoint,marker,class,true,1,false,true,assert,equals,1,partition,get,buffers,in,backlog,assert,next,buffer,reader,2,true,0,true,true,assert,equals,0,partition,get,buffers,in,backlog,assert,next,event,reader,4,end,of,partition,event,class,false,0,false,true,assert,equals,0,partition,get,buffers,in,backlog,arrays,stream,buffer,consumers,for,each,buffer,consumer,buffer,consumer,close
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1515161905;Tests {@link SpillableSubpartition#add(Buffer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycle()__				Assert.fail("buffer not recycled")__			}_			assertEquals(0, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,link,spillable,subpartition,add,buffer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,recycle,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1515510677;Tests {@link SpillableSubpartition#add(Buffer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycle()__				Assert.fail("buffer not recycled")__			}_			assertEquals(0, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,link,spillable,subpartition,add,buffer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,recycle,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycle()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycle()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		Buffer buffer = TestBufferFactory.createBuffer(4096)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycle()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,buffer,test,buffer,factory,create,buffer,4096,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		Buffer buffer = TestBufferFactory.createBuffer(4096, 4096)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycle()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,buffer,test,buffer,factory,create,buffer,4096,4096,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1516285878;Tests {@link SpillableSubpartition#add(Buffer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		Buffer buffer = TestBufferFactory.createBuffer(4096, 4096)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycleBuffer()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,buffer,test,buffer,factory,create,buffer,4096,4096,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,buffer,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1518785736;Tests {@link SpillableSubpartition#add(Buffer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		Buffer buffer = TestBufferFactory.createBuffer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycleBuffer()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,buffer,test,buffer,factory,create,buffer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,buffer,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1519039287;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1519039301;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1519718833;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1519718833;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1519718834;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1519834372;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1520610580;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1522049586;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1522249274;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1524128187;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1524407315;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1537385496;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnReleasedPartition(boolean spilled) throws Exception;1538998760;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a released partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnReleasedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		partition.release()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}__		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,released,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,released,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,partition,release,if,spilled,assert,equals,0,partition,release,memory,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1515161905;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1515510677;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1515510714;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1515510714;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1516285456;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1516285456;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1516285878;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1518785736;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1519039287;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1519039301;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1519718833;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1519718833;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1519718834;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1519834372;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1520610580;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1522049586;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1522249274;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1524128187;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1524407315;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1537385496;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception;1538998760;Tests {@link SpillableSubpartition#releaseMemory()} with a spillable partition which has a_view associated with it and a writer that does not do any write to check for correct buffer_recycling.;@Test_	public void testReleaseOnSpillablePartitionWithViewWithSlowWriter() throws Exception {_		testReleaseOnSpillablePartitionWithSlowWriter(true)__	};tests,link,spillable,subpartition,release,memory,with,a,spillable,partition,which,has,a,view,associated,with,it,and,a,writer,that,does,not,do,any,write,to,check,for,correct,buffer,recycling;test,public,void,test,release,on,spillable,partition,with,view,with,slow,writer,throws,exception,test,release,on,spillable,partition,with,slow,writer,true
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpillablePartition() throws Exception;1515161905;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable released partition.;@Test_	public void testAddOnReleasedSpillablePartition() throws Exception {_		testAddOnReleasedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,released,partition;test,public,void,test,add,on,released,spillable,partition,throws,exception,test,add,on,released,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpillablePartition() throws Exception;1515510677;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable released partition.;@Test_	public void testAddOnReleasedSpillablePartition() throws Exception {_		testAddOnReleasedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,released,partition;test,public,void,test,add,on,released,spillable,partition,throws,exception,test,add,on,released,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpillablePartition() throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable released partition.;@Test_	public void testAddOnReleasedSpillablePartition() throws Exception {_		testAddOnReleasedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,released,partition;test,public,void,test,add,on,released,spillable,partition,throws,exception,test,add,on,released,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpillablePartition() throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable released partition.;@Test_	public void testAddOnReleasedSpillablePartition() throws Exception {_		testAddOnReleasedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,released,partition;test,public,void,test,add,on,released,spillable,partition,throws,exception,test,add,on,released,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpillablePartition() throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable released partition.;@Test_	public void testAddOnReleasedSpillablePartition() throws Exception {_		testAddOnReleasedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,released,partition;test,public,void,test,add,on,released,spillable,partition,throws,exception,test,add,on,released,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpillablePartition() throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable released partition.;@Test_	public void testAddOnReleasedSpillablePartition() throws Exception {_		testAddOnReleasedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,released,partition;test,public,void,test,add,on,released,spillable,partition,throws,exception,test,add,on,released,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpillablePartition() throws Exception;1516285878;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable released partition.;@Test_	public void testAddOnReleasedSpillablePartition() throws Exception {_		testAddOnReleasedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,released,partition;test,public,void,test,add,on,released,spillable,partition,throws,exception,test,add,on,released,partition,false
SpillableSubpartitionTest -> @Test 	public void testAddOnReleasedSpillablePartition() throws Exception;1518785736;Tests {@link SpillableSubpartition#add(Buffer)} with a spillable released partition.;@Test_	public void testAddOnReleasedSpillablePartition() throws Exception {_		testAddOnReleasedPartition(false)__	};tests,link,spillable,subpartition,add,buffer,with,a,spillable,released,partition;test,public,void,test,add,on,released,spillable,partition,throws,exception,test,add,on,released,partition,false
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumersPartial() throws Exception;1524128187;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers} spilled bytes and_buffers counting with partially filled buffers.;@Test_	public void testSpillFinishedBufferConsumersPartial() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE * 2)___		partition.add(bufferBuilder.createBufferConsumer())__		fillBufferBuilder(bufferBuilder, BUFFER_DATA_SIZE)___		assertEquals(0, partition.releaseMemory())__		assertEquals(2, partition.getBuffersInBacklog())_ _		_		fillBufferBuilder(bufferBuilder, BUFFER_DATA_SIZE).finish()__		assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers(false))__		assertEquals(2, partition.getBuffersInBacklog())__	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,and,buffers,counting,with,partially,filled,buffers;test,public,void,test,spill,finished,buffer,consumers,partial,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,2,partition,add,buffer,builder,create,buffer,consumer,fill,buffer,builder,buffer,builder,assert,equals,0,partition,release,memory,assert,equals,2,partition,get,buffers,in,backlog,fill,buffer,builder,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers,false,assert,equals,2,partition,get,buffers,in,backlog
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumersPartial() throws Exception;1524407315;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers} spilled bytes and_buffers counting with partially filled buffers.;@Test_	public void testSpillFinishedBufferConsumersPartial() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE * 2)___		partition.add(bufferBuilder.createBufferConsumer())__		fillBufferBuilder(bufferBuilder, BUFFER_DATA_SIZE)___		assertEquals(0, partition.releaseMemory())__		assertEquals(2, partition.getBuffersInBacklog())_ _		_		fillBufferBuilder(bufferBuilder, BUFFER_DATA_SIZE).finish()__		assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers(false))__		assertEquals(2, partition.getBuffersInBacklog())__	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,and,buffers,counting,with,partially,filled,buffers;test,public,void,test,spill,finished,buffer,consumers,partial,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,2,partition,add,buffer,builder,create,buffer,consumer,fill,buffer,builder,buffer,builder,assert,equals,0,partition,release,memory,assert,equals,2,partition,get,buffers,in,backlog,fill,buffer,builder,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers,false,assert,equals,2,partition,get,buffers,in,backlog
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumersPartial() throws Exception;1537385496;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers} spilled bytes and_buffers counting with partially filled buffers.;@Test_	public void testSpillFinishedBufferConsumersPartial() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE * 2)___		partition.add(bufferBuilder.createBufferConsumer())__		fillBufferBuilder(bufferBuilder, BUFFER_DATA_SIZE)___		assertEquals(0, partition.releaseMemory())__		assertEquals(2, partition.getBuffersInBacklog())_ _		_		fillBufferBuilder(bufferBuilder, BUFFER_DATA_SIZE).finish()__		assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers(false))__		assertEquals(2, partition.getBuffersInBacklog())__	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,and,buffers,counting,with,partially,filled,buffers;test,public,void,test,spill,finished,buffer,consumers,partial,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,2,partition,add,buffer,builder,create,buffer,consumer,fill,buffer,builder,buffer,builder,assert,equals,0,partition,release,memory,assert,equals,2,partition,get,buffers,in,backlog,fill,buffer,builder,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers,false,assert,equals,2,partition,get,buffers,in,backlog
SpillableSubpartitionTest -> @Test 	public void testSpillFinishedBufferConsumersPartial() throws Exception;1538998760;Tests {@link SpillableSubpartition#spillFinishedBufferConsumers} spilled bytes and_buffers counting with partially filled buffers.;@Test_	public void testSpillFinishedBufferConsumersPartial() throws Exception {_		SpillableSubpartition partition = createSubpartition()__		BufferBuilder bufferBuilder = createBufferBuilder(BUFFER_DATA_SIZE * 2)___		partition.add(bufferBuilder.createBufferConsumer())__		fillBufferBuilder(bufferBuilder, BUFFER_DATA_SIZE)___		assertEquals(0, partition.releaseMemory())__		assertEquals(2, partition.getBuffersInBacklog())_ _		_		fillBufferBuilder(bufferBuilder, BUFFER_DATA_SIZE).finish()__		assertEquals(BUFFER_DATA_SIZE, partition.spillFinishedBufferConsumers(false))__		assertEquals(2, partition.getBuffersInBacklog())__	};tests,link,spillable,subpartition,spill,finished,buffer,consumers,spilled,bytes,and,buffers,counting,with,partially,filled,buffers;test,public,void,test,spill,finished,buffer,consumers,partial,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,builder,buffer,builder,create,buffer,builder,2,partition,add,buffer,builder,create,buffer,consumer,fill,buffer,builder,buffer,builder,assert,equals,0,partition,release,memory,assert,equals,2,partition,get,buffers,in,backlog,fill,buffer,builder,buffer,builder,finish,assert,equals,partition,spill,finished,buffer,consumers,false,assert,equals,2,partition,get,buffers,in,backlog
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1438333362;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = new SpillableSubpartition(_				0, mock(ResultPartition.class), ioManager, SYNC)___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_				.createReadView(new TestInfiniteBufferProvider()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,sync,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,test,infinite,buffer,provider,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1480624969;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new TestInfiniteBufferProvider(), new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,test,infinite,buffer,provider,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1480624969;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = new SpillableSubpartition(_			0, mock(ResultPartition.class), ioManager)___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new TestInfiniteBufferProvider(), new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,new,spillable,subpartition,0,mock,result,partition,class,io,manager,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,test,infinite,buffer,provider,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1493724918;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1515160774;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1515160792;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1515161905;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1515510677;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1515510714;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1515510714;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1516285456;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1516285456;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1516285878;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1518785736;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1519039287;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new BufferAvailabilityListener() {_				@Override_				public void notifyBuffersAvailable(long numBuffers) {__				}_			}))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,buffer,availability,listener,override,public,void,notify,buffers,available,long,num,buffers,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1519039301;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new NoOpBufferAvailablityListener()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,no,op,buffer,availablity,listener,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1519718833;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new NoOpBufferAvailablityListener()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,no,op,buffer,availablity,listener,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1519718833;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new NoOpBufferAvailablityListener()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,no,op,buffer,availablity,listener,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1519718834;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new NoOpBufferAvailablityListener()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,no,op,buffer,availablity,listener,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1519834372;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new NoOpBufferAvailablityListener()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,no,op,buffer,availablity,listener,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1520610580;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new NoOpBufferAvailablityListener()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,no,op,buffer,availablity,listener,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1522049586;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new NoOpBufferAvailablityListener()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,no,op,buffer,availablity,listener,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1522249274;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new NoOpBufferAvailablityListener()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,no,op,buffer,availablity,listener,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1524128187;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new NoOpBufferAvailablityListener()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,no,op,buffer,availablity,listener,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1524407315;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new NoOpBufferAvailablityListener()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,no,op,buffer,availablity,listener,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1537385496;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new NoOpBufferAvailablityListener()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,no,op,buffer,availablity,listener,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testReleasePartitionAndGetNext() throws Exception;1538998760;Tests a fix for FLINK-2412.__@see <a href="https://issues.apache.org/jira/browse/FLINK-2412">FLINK-2412</a>;@Test_	public void testReleasePartitionAndGetNext() throws Exception {_		_		SpillableSubpartition partition = createSubpartition()___		partition.finish()___		_		ResultSubpartitionView readView = spy(partition_			.createReadView(new NoOpBufferAvailablityListener()))___		_		_		doNothing().when(readView).releaseAllResources()___		_		partition.release()___		assertNull(readView.getNextBuffer())__	};tests,a,fix,for,flink,2412,see,a,href,https,issues,apache,org,jira,browse,flink,2412,flink,2412,a;test,public,void,test,release,partition,and,get,next,throws,exception,spillable,subpartition,partition,create,subpartition,partition,finish,result,subpartition,view,read,view,spy,partition,create,read,view,new,no,op,buffer,availablity,listener,do,nothing,when,read,view,release,all,resources,partition,release,assert,null,read,view,get,next,buffer
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1515161905;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()___			if (!buffer.isRecycled()) {_				buffer.recycle()__				Assert.fail("buffer not recycled")__			}_			assertEquals(0, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer,finally,io,manager,shutdown,if,buffer,is,recycled,buffer,recycle,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1515510677;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()___			if (!buffer.isRecycled()) {_				buffer.recycle()__				Assert.fail("buffer not recycled")__			}_			assertEquals(0, partition.getTotalNumberOfBuffers())__			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer,finally,io,manager,shutdown,if,buffer,is,recycled,buffer,recycle,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycle()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycle()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		Buffer buffer = TestBufferFactory.createBuffer(4096)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycle()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,buffer,test,buffer,factory,create,buffer,4096,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		Buffer buffer = TestBufferFactory.createBuffer(4096, 4096)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycle()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,buffer,test,buffer,factory,create,buffer,4096,4096,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1516285878;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		Buffer buffer = TestBufferFactory.createBuffer(4096, 4096)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycleBuffer()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,buffer,test,buffer,factory,create,buffer,4096,4096,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,buffer,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1518785736;Tests {@link SpillableSubpartition#add(Buffer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		Buffer buffer = TestBufferFactory.createBuffer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.recycleBuffer()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,buffer,test,buffer,factory,create,buffer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,recycle,buffer,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1519039287;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1519039301;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1519718833;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1519718833;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1519718834;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1519834372;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1520610580;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1522049586;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1522249274;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1524128187;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1524407315;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1537385496;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception;1538998760;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a spilled partition where adding the_write request fails with an exception.;@Test_	public void testAddOnSpilledPartitionWithFailingWriter() throws Exception {_		IOManager ioManager = new IOManagerAsyncWithClosedBufferFileWriter()__		SpillableSubpartition partition = createSubpartition(ioManager)__		assertEquals(0, partition.releaseMemory())___		exception.expect(IOException.class)___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean bufferRecycled__		try {_			partition.add(buffer)__		} finally {_			ioManager.shutdown()__			bufferRecycled = buffer.isRecycled()__			if (!bufferRecycled) {_				buffer.close()__			}_		}_		if (!bufferRecycled) {_			Assert.fail("buffer not recycled")__		}_		assertEquals(0, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,spilled,partition,where,adding,the,write,request,fails,with,an,exception;test,public,void,test,add,on,spilled,partition,with,failing,writer,throws,exception,iomanager,io,manager,new,iomanager,async,with,closed,buffer,file,writer,spillable,subpartition,partition,create,subpartition,io,manager,assert,equals,0,partition,release,memory,exception,expect,ioexception,class,buffer,consumer,buffer,create,filled,buffer,consumer,boolean,buffer,recycled,try,partition,add,buffer,finally,io,manager,shutdown,buffer,recycled,buffer,is,recycled,if,buffer,recycled,buffer,close,if,buffer,recycled,assert,fail,buffer,not,recycled,assert,equals,0,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1515161905;Tests {@link SpillableSubpartition#add(Buffer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycle()__				Assert.fail("buffer not recycled")__			}_			_			assertEquals(1, partition.getTotalNumberOfBuffers())__			assertEquals(4, partition.getTotalNumberOfBytes())__		}_	};tests,link,spillable,subpartition,add,buffer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,recycle,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1515510677;Tests {@link SpillableSubpartition#add(Buffer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycle()__				Assert.fail("buffer not recycled")__			}_			_			assertEquals(1, partition.getTotalNumberOfBuffers())__			assertEquals(4, partition.getTotalNumberOfBytes())__		}_	};tests,link,spillable,subpartition,add,buffer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,recycle,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycle()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,recycle,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1515510714;Tests {@link SpillableSubpartition#add(Buffer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())___		Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycle()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,recycle,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())___		Buffer buffer = TestBufferFactory.createBuffer(4096)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycle()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes,buffer,buffer,test,buffer,factory,create,buffer,4096,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,recycle,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1516285456;Tests {@link SpillableSubpartition#add(Buffer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())___		Buffer buffer = TestBufferFactory.createBuffer(4096, 4096)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycle()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes,buffer,buffer,test,buffer,factory,create,buffer,4096,4096,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,recycle,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1516285878;Tests {@link SpillableSubpartition#add(Buffer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())___		Buffer buffer = TestBufferFactory.createBuffer(4096, 4096)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycleBuffer()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes,buffer,buffer,test,buffer,factory,create,buffer,4096,4096,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,recycle,buffer,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1518785736;Tests {@link SpillableSubpartition#add(Buffer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())___		Buffer buffer = TestBufferFactory.createBuffer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.recycleBuffer()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		assertEquals(4, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes,buffer,buffer,test,buffer,factory,create,buffer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,recycle,buffer,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,4,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1519039287;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1519039301;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1519718833;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1519718833;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1519718834;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1519834372;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1520610580;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1522049586;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1522249274;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1524128187;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1524407315;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1537385496;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testAddOnFinishedPartition(boolean spilled) throws Exception;1538998760;Tests {@link SpillableSubpartition#add(BufferConsumer)} with a finished partition.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable).;private void testAddOnFinishedPartition(boolean spilled) throws Exception {_		SpillableSubpartition partition = createSubpartition()__		if (spilled) {_			assertEquals(0, partition.releaseMemory())__		}_		partition.finish()__		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())___		BufferConsumer buffer = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		try {_			partition.add(buffer)__		} finally {_			if (!buffer.isRecycled()) {_				buffer.close()__				Assert.fail("buffer not recycled")__			}_		}_		_		assertEquals(1, partition.getTotalNumberOfBuffers())__		_		assertEquals(spilled ? 4 : 0, partition.getTotalNumberOfBytes())__	};tests,link,spillable,subpartition,add,buffer,consumer,with,a,finished,partition,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable;private,void,test,add,on,finished,partition,boolean,spilled,throws,exception,spillable,subpartition,partition,create,subpartition,if,spilled,assert,equals,0,partition,release,memory,partition,finish,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes,buffer,consumer,buffer,create,filled,buffer,consumer,try,partition,add,buffer,finally,if,buffer,is,recycled,buffer,close,assert,fail,buffer,not,recycled,assert,equals,1,partition,get,total,number,of,buffers,assert,equals,spilled,4,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1515510714;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer1 = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		Buffer buffer2 = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(numBuffers -> {})__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.recycle()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.recycle()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		assertEquals((createView ? 4 : 0) + 2 * 4096, partition.getTotalNumberOfBytes())__	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer1,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,buffer2,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,num,buffers,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,recycle,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,recycle,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,assert,equals,create,view,4,0,2,4096,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1516285456;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer1 = TestBufferFactory.createBuffer(4096)__		Buffer buffer2 = TestBufferFactory.createBuffer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(numBuffers -> {})__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.recycle()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.recycle()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		assertEquals((createView ? 4 : 0) + 2 * 4096, partition.getTotalNumberOfBytes())__	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer1,test,buffer,factory,create,buffer,4096,buffer,buffer2,test,buffer,factory,create,buffer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,num,buffers,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,recycle,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,recycle,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,assert,equals,create,view,4,0,2,4096,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1516285456;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer1 = TestBufferFactory.createBuffer(4096, 4096)__		Buffer buffer2 = TestBufferFactory.createBuffer(4096, 4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(numBuffers -> {})__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.recycle()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.recycle()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		assertEquals((createView ? 4 : 0) + 2 * 4096, partition.getTotalNumberOfBytes())__	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer1,test,buffer,factory,create,buffer,4096,4096,buffer,buffer2,test,buffer,factory,create,buffer,4096,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,num,buffers,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,recycle,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,recycle,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,assert,equals,create,view,4,0,2,4096,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1516285878;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer1 = TestBufferFactory.createBuffer(4096, 4096)__		Buffer buffer2 = TestBufferFactory.createBuffer(4096, 4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(numBuffers -> {})__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.recycleBuffer()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.recycleBuffer()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		assertEquals((createView ? 4 : 0) + 2 * 4096, partition.getTotalNumberOfBytes())__	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer1,test,buffer,factory,create,buffer,4096,4096,buffer,buffer2,test,buffer,factory,create,buffer,4096,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,num,buffers,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,recycle,buffer,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,recycle,buffer,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,assert,equals,create,view,4,0,2,4096,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1518785736;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		Buffer buffer1 = TestBufferFactory.createBuffer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		Buffer buffer2 = TestBufferFactory.createBuffer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(numBuffers -> {})__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.recycleBuffer()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.recycleBuffer()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		assertEquals((createView ? 4 : 0) + 2 * BUFFER_DATA_SIZE, partition.getTotalNumberOfBytes())__	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,buffer1,test,buffer,factory,create,buffer,buffer,buffer2,test,buffer,factory,create,buffer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,num,buffers,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,recycle,buffer,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,recycle,buffer,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,assert,equals,create,view,4,0,2,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1519039287;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(numBuffers -> {})__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		__	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,num,buffers,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1519039301;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		__	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,new,no,op,buffer,availablity,listener,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1519718833;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		__	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,new,no,op,buffer,availablity,listener,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1519718833;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		if (spilled) {_			_			assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE),_				partition.getTotalNumberOfBytes())__		} else {_			_			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,new,no,op,buffer,availablity,listener,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,if,spilled,assert,equals,create,view,4,partition,get,total,number,of,bytes,else,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1519718834;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		if (spilled) {_			_			assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE),_				partition.getTotalNumberOfBytes())__		} else {_			_			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,new,no,op,buffer,availablity,listener,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,if,spilled,assert,equals,create,view,4,partition,get,total,number,of,bytes,else,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1519834372;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		if (spilled) {_			_			assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE),_				partition.getTotalNumberOfBytes())__		} else {_			_			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,new,no,op,buffer,availablity,listener,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,if,spilled,assert,equals,create,view,4,partition,get,total,number,of,bytes,else,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1520610580;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		if (spilled) {_			_			assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE),_				partition.getTotalNumberOfBytes())__		} else {_			_			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,new,no,op,buffer,availablity,listener,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,if,spilled,assert,equals,create,view,4,partition,get,total,number,of,bytes,else,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1522049586;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		if (spilled) {_			_			assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE),_				partition.getTotalNumberOfBytes())__		} else {_			_			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,new,no,op,buffer,availablity,listener,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,if,spilled,assert,equals,create,view,4,partition,get,total,number,of,bytes,else,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1522249274;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		if (spilled) {_			_			assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE),_				partition.getTotalNumberOfBytes())__		} else {_			_			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,new,no,op,buffer,availablity,listener,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,if,spilled,assert,equals,create,view,4,partition,get,total,number,of,bytes,else,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1524128187;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		if (spilled) {_			_			assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE),_				partition.getTotalNumberOfBytes())__		} else {_			_			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,new,no,op,buffer,availablity,listener,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,if,spilled,assert,equals,create,view,4,partition,get,total,number,of,bytes,else,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1524407315;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		if (spilled) {_			_			assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE),_				partition.getTotalNumberOfBytes())__		} else {_			_			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,new,no,op,buffer,availablity,listener,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,if,spilled,assert,equals,create,view,4,partition,get,total,number,of,bytes,else,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1537385496;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		if (spilled) {_			_			assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE),_				partition.getTotalNumberOfBytes())__		} else {_			_			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,new,no,op,buffer,availablity,listener,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,if,spilled,assert,equals,create,view,4,partition,get,total,number,of,bytes,else,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception;1538998760;Tests cleanup of {@link SpillableSubpartition#release()}.__@param spilled_whether the partition should be spilled to disk (<tt>true</tt>) or not (<tt>false</tt>,_spillable)_@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean spilled, boolean createView) throws Exception {_		SpillableSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		BufferConsumer buffer2 = createFilledBufferConsumer(BUFFER_DATA_SIZE, BUFFER_DATA_SIZE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			_			ResultSubpartitionView view = null__			if (createView) {_				partition.finish()__				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}_			if (spilled) {_				_				_				_				assertEquals(2, partition.releaseMemory())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		_		assertEquals(createView ? 3 : 2, partition.getTotalNumberOfBuffers())__		if (spilled) {_			_			assertEquals(BUFFER_DATA_SIZE + (createView ? 4 : BUFFER_DATA_SIZE),_				partition.getTotalNumberOfBytes())__		} else {_			_			assertEquals(0, partition.getTotalNumberOfBytes())__		}_	};tests,cleanup,of,link,spillable,subpartition,release,param,spilled,whether,the,partition,should,be,spilled,to,disk,tt,true,tt,or,not,tt,false,tt,spillable,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,spilled,boolean,create,view,throws,exception,spillable,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,buffer,consumer,buffer2,create,filled,buffer,consumer,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,partition,finish,view,partition,create,read,view,new,no,op,buffer,availablity,listener,if,spilled,assert,equals,2,partition,release,memory,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,create,view,3,2,partition,get,total,number,of,buffers,if,spilled,assert,equals,create,view,4,partition,get,total,number,of,bytes,else,assert,equals,0,partition,get,total,number,of,bytes
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1515510714;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1516285456;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1516285456;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1516285878;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1518785736;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1519039287;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1519039301;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1519718833;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1519718833;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1519718834;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1519834372;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1520610580;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1522049586;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1522249274;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1524128187;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1524407315;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1537385496;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
SpillableSubpartitionTest -> @Test 	public void testCleanupReleasedSpillablePartitionWithView() throws Exception;1538998760;Tests cleanup of {@link SpillableSubpartition#release()} with a spillable partition and a_read view attached - [FLINK-8371].;@Test_	public void testCleanupReleasedSpillablePartitionWithView() throws Exception {_		testCleanupReleasedPartition(false, true)__	};tests,cleanup,of,link,spillable,subpartition,release,with,a,spillable,partition,and,a,read,view,attached,flink,8371;test,public,void,test,cleanup,released,spillable,partition,with,view,throws,exception,test,cleanup,released,partition,false,true
