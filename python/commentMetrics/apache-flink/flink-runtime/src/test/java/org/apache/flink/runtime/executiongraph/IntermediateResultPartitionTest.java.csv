commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testPipelinedPartitionConsumable() throws Exception {     IntermediateResult result = createResult(ResultPartitionType.PIPELINED, 2).     IntermediateResultPartition partition1 = result.getPartitions()[0].     IntermediateResultPartition partition2 = result.getPartitions()[1].     // Not consumable on init     assertFalse(partition1.isConsumable()).     assertFalse(partition2.isConsumable()).     // Partition 1 consumable after data are produced     partition1.markDataProduced().     assertTrue(partition1.isConsumable()).     assertFalse(partition2.isConsumable()).     // Not consumable if failover happens     result.resetForNewExecution().     assertFalse(partition1.isConsumable()).     assertFalse(partition2.isConsumable()). }
false;public;0;25;;@Test public void testBlockingPartitionConsumable() throws Exception {     IntermediateResult result = createResult(ResultPartitionType.BLOCKING, 2).     IntermediateResultPartition partition1 = result.getPartitions()[0].     IntermediateResultPartition partition2 = result.getPartitions()[1].     // Not consumable on init     assertFalse(partition1.isConsumable()).     assertFalse(partition2.isConsumable()).     // Not consumable if only one partition is FINISHED     partition1.markFinished().     assertFalse(partition1.isConsumable()).     assertFalse(partition2.isConsumable()).     // Consumable after all partitions are FINISHED     partition2.markFinished().     assertTrue(partition1.isConsumable()).     assertTrue(partition2.isConsumable()).     // Not consumable if failover happens     result.resetForNewExecution().     assertFalse(partition1.isConsumable()).     assertFalse(partition2.isConsumable()). }
false;private,static;2;14;;private static IntermediateResult createResult(ResultPartitionType resultPartitionType, int producerCount) throws Exception {     ExecutionJobVertex jobVertex = getExecutionVertex(new JobVertexID(), new DirectScheduledExecutorService()).     IntermediateResult result = new IntermediateResult(new IntermediateDataSetID(), jobVertex, producerCount, resultPartitionType).     for (int i = 0. i < producerCount. i++) {         // Generate result partition in the result         new ExecutionVertex(jobVertex, i, new IntermediateResult[] { result }, Time.minutes(1)).     }     return result. }
