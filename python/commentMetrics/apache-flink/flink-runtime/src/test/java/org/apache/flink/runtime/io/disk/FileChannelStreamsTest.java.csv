commented;modifiers;parameterAmount;loc;comment;code
false;public;0;33;;@Test public void testCloseAndDeleteOutputView() {     final IOManager ioManager = new IOManagerAsync().     try {         MemoryManager memMan = new MemoryManager(4 * 16 * 1024, 1, 16 * 1024, MemoryType.HEAP, true).         List<MemorySegment> memory = new ArrayList<MemorySegment>().         memMan.allocatePages(new DummyInvokable(), memory, 4).         FileIOChannel.ID channel = ioManager.createChannel().         BlockChannelWriter<MemorySegment> writer = ioManager.createBlockChannelWriter(channel).         FileChannelOutputView out = new FileChannelOutputView(writer, memMan, memory, memMan.getPageSize()).         new StringValue("Some test text").write(out).         // close for the first time, make sure all memory returns         out.close().         assertTrue(memMan.verifyEmpty()).         // close again, should not cause an exception         out.close().         // delete, make sure file is removed         out.closeAndDelete().         assertFalse(new File(channel.getPath()).exists()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } finally {         ioManager.shutdown().     } }
false;public;0;40;;@Test public void testCloseAndDeleteInputView() {     final IOManager ioManager = new IOManagerAsync().     try {         MemoryManager memMan = new MemoryManager(4 * 16 * 1024, 1, 16 * 1024, MemoryType.HEAP, true).         List<MemorySegment> memory = new ArrayList<MemorySegment>().         memMan.allocatePages(new DummyInvokable(), memory, 4).         FileIOChannel.ID channel = ioManager.createChannel().         // add some test data         try (FileWriter wrt = new FileWriter(channel.getPath())) {             wrt.write("test data").         }         BlockChannelReader<MemorySegment> reader = ioManager.createBlockChannelReader(channel).         FileChannelInputView in = new FileChannelInputView(reader, memMan, memory, 9).         // read just something         in.readInt().         // close for the first time, make sure all memory returns         in.close().         assertTrue(memMan.verifyEmpty()).         // close again, should not cause an exception         in.close().         // delete, make sure file is removed         in.closeAndDelete().         assertFalse(new File(channel.getPath()).exists()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } finally {         ioManager.shutdown().     } }
