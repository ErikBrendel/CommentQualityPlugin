commented;modifiers;parameterAmount;loc;comment;code
true;public;0;76;/**  * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return  * value after receiving all end-of-partition events.  *  * <p>For buffer-or-event instances, it is important to verify that they have been set off to  * the correct logical index.  */ ;/**  * Tests basic correctness of buffer-or-event interleaving and correct <code>null</code> return  * value after receiving all end-of-partition events.  *  * <p>For buffer-or-event instances, it is important to verify that they have been set off to  * the correct logical index.  */ @Test(timeout = 120 * 1000) public void testBasicGetNextLogic() throws Exception {     // Setup     final String testTaskName = "Test Task".     final SingleInputGate ig1 = new SingleInputGate(testTaskName, new JobID(), new IntermediateDataSetID(), ResultPartitionType.PIPELINED, 0, 3, mock(TaskActions.class), UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(), true).     final SingleInputGate ig2 = new SingleInputGate(testTaskName, new JobID(), new IntermediateDataSetID(), ResultPartitionType.PIPELINED, 0, 5, mock(TaskActions.class), UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(), true).     final UnionInputGate union = new UnionInputGate(new SingleInputGate[] { ig1, ig2 }).     assertEquals(ig1.getNumberOfInputChannels() + ig2.getNumberOfInputChannels(), union.getNumberOfInputChannels()).     final TestInputChannel[][] inputChannels = new TestInputChannel[][] { TestInputChannel.createInputChannels(ig1, 3), TestInputChannel.createInputChannels(ig2, 5) }.     // 0 => 0     inputChannels[0][0].readBuffer().     // 0 => 0     inputChannels[0][0].readEndOfPartitionEvent().     // 2 => 5     inputChannels[1][2].readBuffer().     // 2 => 5     inputChannels[1][2].readEndOfPartitionEvent().     // 0 => 3     inputChannels[1][0].readBuffer().     // 1 => 4     inputChannels[1][1].readBuffer().     // 1 => 1     inputChannels[0][1].readBuffer().     // 3 => 6     inputChannels[1][3].readBuffer().     // 1 => 1     inputChannels[0][1].readEndOfPartitionEvent().     // 3 => 6     inputChannels[1][3].readEndOfPartitionEvent().     // 1 => 2     inputChannels[0][2].readBuffer().     // 1 => 2     inputChannels[0][2].readEndOfPartitionEvent().     // 4 => 7     inputChannels[1][4].readBuffer().     // 4 => 7     inputChannels[1][4].readEndOfPartitionEvent().     // 0 => 3     inputChannels[1][1].readEndOfPartitionEvent().     // 0 => 3     inputChannels[1][0].readEndOfPartitionEvent().     ig1.notifyChannelNonEmpty(inputChannels[0][0]).     ig1.notifyChannelNonEmpty(inputChannels[0][1]).     ig1.notifyChannelNonEmpty(inputChannels[0][2]).     ig2.notifyChannelNonEmpty(inputChannels[1][0]).     ig2.notifyChannelNonEmpty(inputChannels[1][1]).     ig2.notifyChannelNonEmpty(inputChannels[1][2]).     ig2.notifyChannelNonEmpty(inputChannels[1][3]).     ig2.notifyChannelNonEmpty(inputChannels[1][4]).     // gate 1, channel 0     verifyBufferOrEvent(union, true, 0, true).     // gate 2, channel 0     verifyBufferOrEvent(union, true, 3, true).     // gate 1, channel 1     verifyBufferOrEvent(union, true, 1, true).     // gate 2, channel 1     verifyBufferOrEvent(union, true, 4, true).     // gate 1, channel 2     verifyBufferOrEvent(union, true, 2, true).     // gate 2, channel 1     verifyBufferOrEvent(union, true, 5, true).     // gate 1, channel 0     verifyBufferOrEvent(union, false, 0, true).     // gate 2, channel 1     verifyBufferOrEvent(union, true, 6, true).     // gate 1, channel 1     verifyBufferOrEvent(union, false, 1, true).     // gate 2, channel 1     verifyBufferOrEvent(union, true, 7, true).     // gate 1, channel 2     verifyBufferOrEvent(union, false, 2, true).     // gate 2, channel 0     verifyBufferOrEvent(union, false, 3, true).     // gate 2, channel 1     verifyBufferOrEvent(union, false, 4, true).     // gate 2, channel 2     verifyBufferOrEvent(union, false, 5, true).     // gate 2, channel 3     verifyBufferOrEvent(union, false, 6, true).     // gate 2, channel 4     verifyBufferOrEvent(union, false, 7, false).     // Return null when the input gate has received all end-of-partition events     assertTrue(union.isFinished()).     assertFalse(union.getNextBufferOrEvent().isPresent()). }
