commented;modifiers;parameterAmount;loc;comment;code
false;;0;8;;List<Tuple2<String, UV>> generateExpiredUpdatesToMerge() {     return Arrays.asList(Tuple2.of("expiredNamespace", generateRandomUpdate()), Tuple2.of("expiredNamespace", generateRandomUpdate()), Tuple2.of("expiredAndUpdatedNamespace", generateRandomUpdate()), Tuple2.of("expiredAndUpdatedNamespace", generateRandomUpdate())). }
false;;0;8;;List<Tuple2<String, UV>> generateUnexpiredUpdatesToMerge() {     return Arrays.asList(Tuple2.of("expiredAndUpdatedNamespace", generateRandomUpdate()), Tuple2.of("expiredAndUpdatedNamespace", generateRandomUpdate()), Tuple2.of("unexpiredNamespace", generateRandomUpdate()), Tuple2.of("unexpiredNamespace", generateRandomUpdate())). }
false;;0;10;;List<Tuple2<String, UV>> generateFinalUpdatesToMerge() {     return Arrays.asList(Tuple2.of("expiredAndUpdatedNamespace", generateRandomUpdate()), Tuple2.of("expiredAndUpdatedNamespace", generateRandomUpdate()), Tuple2.of("unexpiredNamespace", generateRandomUpdate()), Tuple2.of("unexpiredNamespace", generateRandomUpdate()), Tuple2.of("finalNamespace", generateRandomUpdate()), Tuple2.of("finalNamespace", generateRandomUpdate())). }
false;abstract;0;1;;abstract UV generateRandomUpdate().
false;;1;6;;void applyStateUpdates(List<Tuple2<String, UV>> updates) throws Exception {     for (Tuple2<String, UV> t : updates) {         ttlState.setCurrentNamespace(t.f0).         update(t.f1).     } }
false;abstract;2;3;;abstract GV getMergeResult(List<Tuple2<String, UV>> unexpiredUpdatesToMerge, List<Tuple2<String, UV>> finalUpdatesToMerge).
false;;0;4;;@Override UV generateRandomUpdate() {     return (UV) (Integer) RANDOM.nextInt(1000). }
false;;2;6;;int getIntegerMergeResult(List<Tuple2<String, UV>> unexpiredUpdatesToMerge, List<Tuple2<String, UV>> finalUpdatesToMerge) {     return unexpiredUpdatesToMerge.stream().mapToInt(t -> (Integer) t.f1).sum() + finalUpdatesToMerge.stream().mapToInt(t -> (Integer) t.f1).sum(). }
