commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testResourceManagerRegistration() throws Exception {     final TaskExecutorToResourceManagerConnection resourceManagerRegistration = createTaskExecutorToResourceManagerConnection().     testingResourceManagerGateway.setRegisterTaskExecutorFunction(tuple -> {         final String actualAddress = tuple.f0.         final ResourceID actualResourceId = tuple.f1.         final Integer actualDataPort = tuple.f2.         final HardwareDescription actualHardwareDescription = tuple.f3.         assertThat(actualAddress, is(equalTo(TASK_MANAGER_ADDRESS))).         assertThat(actualResourceId, is(equalTo(TASK_MANAGER_RESOURCE_ID))).         assertThat(actualDataPort, is(equalTo(TASK_MANAGER_DATA_PORT))).         assertThat(actualHardwareDescription, is(equalTo(TASK_MANAGER_HARDWARE_DESCRIPTION))).         return CompletableFuture.completedFuture(successfulRegistration()).     }).     resourceManagerRegistration.start().     registrationSuccessFuture.get(TEST_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS). }
false;private;0;14;;private TaskExecutorToResourceManagerConnection createTaskExecutorToResourceManagerConnection() {     return new TaskExecutorToResourceManagerConnection(LOGGER, rpcService, TASK_MANAGER_ADDRESS, TASK_MANAGER_RESOURCE_ID, RetryingRegistrationConfiguration.defaultConfiguration(), TASK_MANAGER_DATA_PORT, TASK_MANAGER_HARDWARE_DESCRIPTION, RESOURCE_MANAGER_ADDRESS, RESOURCE_MANAGER_ID, Executors.directExecutor(), new TestRegistrationConnectionListener<>()). }
false;private,static;0;6;;private static TaskExecutorRegistrationSuccess successfulRegistration() {     return new TaskExecutorRegistrationSuccess(new InstanceID(), ResourceID.generate(), new ClusterInformation("blobServerHost", 55555)). }
false;public;0;9;;@Before public void setUp() {     rpcService = new TestingRpcService().     testingResourceManagerGateway = new TestingResourceManagerGateway().     rpcService.registerGateway(RESOURCE_MANAGER_ADDRESS, testingResourceManagerGateway).     registrationSuccessFuture = new CompletableFuture<>(). }
false;public;0;4;;@After public void tearDown() throws Exception {     rpcService.stopService().get(TEST_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS). }
false;public;2;4;;@Override public void onRegistrationSuccess(final T connection, final S success) {     registrationSuccessFuture.complete(null). }
false;public;1;4;;@Override public void onRegistrationFailure(final Throwable failure) {     registrationSuccessFuture.completeExceptionally(failure). }
