commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testConfigure() throws Exception {     final UserGroupInformation ugi = UserGroupInformation.createRemoteUser("test").     HadoopUserOverlay overlay = new HadoopUserOverlay(ugi).     ContainerSpecification spec = new ContainerSpecification().     overlay.configure(spec).     assertEquals(ugi.getUserName(), spec.getEnvironmentVariables().get("HADOOP_USER_NAME")). }
false;public;0;7;;@Test public void testNoConf() throws Exception {     HadoopUserOverlay overlay = new HadoopUserOverlay(null).     ContainerSpecification containerSpecification = new ContainerSpecification().     overlay.configure(containerSpecification). }
false;public;0;11;;@Override public Object run() {     try {         HadoopUserOverlay.Builder builder = HadoopUserOverlay.newBuilder().fromEnvironment(conf).         assertEquals(ugi, builder.ugi).         return null.     } catch (Exception ex) {         throw new AssertionError(ex).     } }
false;public;0;20;;@Test public void testBuilderFromEnvironment() throws Exception {     final Configuration conf = new Configuration().     final UserGroupInformation ugi = UserGroupInformation.createRemoteUser("test").     ugi.doAs(new PrivilegedAction<Object>() {          @Override         public Object run() {             try {                 HadoopUserOverlay.Builder builder = HadoopUserOverlay.newBuilder().fromEnvironment(conf).                 assertEquals(ugi, builder.ugi).                 return null.             } catch (Exception ex) {                 throw new AssertionError(ex).             }         }     }). }
