commented;modifiers;parameterAmount;loc;comment;code
true;public;0;24;/**  * Tests that the REST handler URLs are properly sorted.  */ ;/**  * Tests that the REST handler URLs are properly sorted.  */ @Test public void testRestHandlerUrlSorting() {     final int numberHandlers = 5.     final List<String> handlerUrls = new ArrayList<>(numberHandlers).     handlerUrls.add("/jobs/overview").     handlerUrls.add("/jobs/:jobid").     handlerUrls.add("/jobs").     handlerUrls.add("/:*").     handlerUrls.add("/jobs/:jobid/config").     final List<String> expected = new ArrayList<>(numberHandlers).     expected.add("/jobs").     expected.add("/jobs/overview").     expected.add("/jobs/:jobid").     expected.add("/jobs/:jobid/config").     expected.add("/:*").     Collections.sort(handlerUrls, new RestServerEndpoint.RestHandlerUrlComparator.CaseInsensitiveOrderComparator()).     assertEquals(expected, handlerUrls). }
false;public;0;8;;@Test public void testCreateUploadDir() throws Exception {     final File file = temporaryFolder.newFolder().     final Path testUploadDir = file.toPath().resolve("testUploadDir").     assertFalse(Files.exists(testUploadDir)).     RestServerEndpoint.createUploadDir(testUploadDir, NOPLogger.NOP_LOGGER).     assertTrue(Files.exists(testUploadDir)). }
false;public;0;13;;@Test public void testCreateUploadDirFails() throws Exception {     final File file = temporaryFolder.newFolder().     Assume.assumeTrue(file.setWritable(false)).     final Path testUploadDir = file.toPath().resolve("testUploadDir").     assertFalse(Files.exists(testUploadDir)).     try {         RestServerEndpoint.createUploadDir(testUploadDir, NOPLogger.NOP_LOGGER).         fail("Expected exception not thrown.").     } catch (IOException e) {     } }
