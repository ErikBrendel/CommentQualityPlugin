commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public StringPairSerializer duplicate() {     return this. }
false;public;0;4;;@Override public StringPair createInstance() {     return new StringPair(). }
false;public;1;4;;@Override public StringPair copy(StringPair from) {     return new StringPair(from.getKey(), from.getValue()). }
false;public;2;6;;@Override public StringPair copy(StringPair from, StringPair reuse) {     reuse.setKey(from.getKey()).     reuse.setValue(from.getValue()).     return reuse. }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;2;5;;@Override public void serialize(StringPair record, DataOutputView target) throws IOException {     StringValue.writeString(record.getKey(), target).     StringValue.writeString(record.getValue(), target). }
false;public;1;4;;@Override public StringPair deserialize(DataInputView source) throws IOException {     return new StringPair(StringValue.readString(source), StringValue.readString(source)). }
false;public;2;6;;@Override public StringPair deserialize(StringPair record, DataInputView source) throws IOException {     record.setKey(StringValue.readString(source)).     record.setValue(StringValue.readString(source)).     return record. }
false;public;2;5;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     StringValue.writeString(StringValue.readString(source), target).     StringValue.writeString(StringValue.readString(source), target). }
false;public;1;4;;@Override public boolean equals(Object obj) {     return obj instanceof StringPairSerializer. }
false;public;0;4;;@Override public int hashCode() {     return StringPairSerializer.class.hashCode(). }
false;public;0;4;;@Override public TypeSerializerSnapshot<StringPair> snapshotConfiguration() {     throw new UnsupportedOperationException(). }
