# id;timestamp;commentText;codeText;commentWords;codeWords
NettyServerLowAndHighWatermarkTest -> @Test 	public void testLargeLowAndHighWatermarks() throws Throwable;1509981553;Verify low and high watermarks being set correctly for larger memory segment sizes which_trigger <a href="https://issues.apache.org/jira/browse/FLINK-7258">FLINK-7258</a>.;@Test_	public void testLargeLowAndHighWatermarks() throws Throwable {_		testLowAndHighWatermarks(65536)__	};verify,low,and,high,watermarks,being,set,correctly,for,larger,memory,segment,sizes,which,trigger,a,href,https,issues,apache,org,jira,browse,flink,7258,flink,7258,a;test,public,void,test,large,low,and,high,watermarks,throws,throwable,test,low,and,high,watermarks,65536
NettyServerLowAndHighWatermarkTest -> @Test 	public void testLargeLowAndHighWatermarks() throws Throwable;1515160618;Verify low and high watermarks being set correctly for larger memory segment sizes which_trigger <a href="https://issues.apache.org/jira/browse/FLINK-7258">FLINK-7258</a>.;@Test_	public void testLargeLowAndHighWatermarks() throws Throwable {_		testLowAndHighWatermarks(65536)__	};verify,low,and,high,watermarks,being,set,correctly,for,larger,memory,segment,sizes,which,trigger,a,href,https,issues,apache,org,jira,browse,flink,7258,flink,7258,a;test,public,void,test,large,low,and,high,watermarks,throws,throwable,test,low,and,high,watermarks,65536
NettyServerLowAndHighWatermarkTest -> @Test 	public void testLargeLowAndHighWatermarks() throws Throwable;1518785736;Verify low and high watermarks being set correctly for larger memory segment sizes which_trigger <a href="https://issues.apache.org/jira/browse/FLINK-7258">FLINK-7258</a>.;@Test_	public void testLargeLowAndHighWatermarks() throws Throwable {_		testLowAndHighWatermarks(65536)__	};verify,low,and,high,watermarks,being,set,correctly,for,larger,memory,segment,sizes,which,trigger,a,href,https,issues,apache,org,jira,browse,flink,7258,flink,7258,a;test,public,void,test,large,low,and,high,watermarks,throws,throwable,test,low,and,high,watermarks,65536
NettyServerLowAndHighWatermarkTest -> @Test 	public void testLowAndHighWatermarks() throws Throwable;1430987538;Verifies that the high and low watermark are set in relation to the page size.__<p> The high and low water marks control the data flow to the wire. If the Netty write buffer_has size greater or equal to the high water mark, the channel state becomes not-writable._Only when the size falls below the low water mark again, the state changes to writable again.__<p> The Channel writability state needs to be checked by the handler when writing to the_channel and is not enforced in the sense that you cannot write a channel, which is in_not-writable state.;@Test_	public void testLowAndHighWatermarks() throws Throwable {_		final NettyConfig conf = new NettyConfig(_				InetAddress.getLocalHost(),_				NetUtils.getAvailablePort(),_				PageSize,_				new Configuration())___		final AtomicReference<Throwable> error = new AtomicReference<Throwable>()__		final NettyProtocol protocol = new NettyProtocol() {_			@Override_			public void setServerChannelPipeline(ChannelPipeline channelPipeline) {_				_				channelPipeline.addLast(new TestLowAndHighWatermarkHandler(error))__			}__			@Override_			public void setClientChannelPipeline(ChannelPipeline channelPipeline) {_			}_		}___		final NettyServer server = new NettyServer(conf)__		final NettyClient client = new NettyClient(conf)___		try {_			server.init(protocol)__			client.init(protocol)___			_			_			final Channel ch = client_					.connect(new InetSocketAddress(conf.getServerAddress(), conf.getServerPort()))_					.sync()_					.channel()___			_			while (ch.isActive()) {_				ch.closeFuture().await(1, TimeUnit.SECONDS)__			}__			final Throwable t = error.get()__			if (t != null) {_				throw t__			}_		}_		finally {_			if (server != null) {_				server.shutdown()__			}__			if (client != null) {_				client.shutdown()__			}_		}_	};verifies,that,the,high,and,low,watermark,are,set,in,relation,to,the,page,size,p,the,high,and,low,water,marks,control,the,data,flow,to,the,wire,if,the,netty,write,buffer,has,size,greater,or,equal,to,the,high,water,mark,the,channel,state,becomes,not,writable,only,when,the,size,falls,below,the,low,water,mark,again,the,state,changes,to,writable,again,p,the,channel,writability,state,needs,to,be,checked,by,the,handler,when,writing,to,the,channel,and,is,not,enforced,in,the,sense,that,you,cannot,write,a,channel,which,is,in,not,writable,state;test,public,void,test,low,and,high,watermarks,throws,throwable,final,netty,config,conf,new,netty,config,inet,address,get,local,host,net,utils,get,available,port,page,size,new,configuration,final,atomic,reference,throwable,error,new,atomic,reference,throwable,final,netty,protocol,protocol,new,netty,protocol,override,public,void,set,server,channel,pipeline,channel,pipeline,channel,pipeline,channel,pipeline,add,last,new,test,low,and,high,watermark,handler,error,override,public,void,set,client,channel,pipeline,channel,pipeline,channel,pipeline,final,netty,server,server,new,netty,server,conf,final,netty,client,client,new,netty,client,conf,try,server,init,protocol,client,init,protocol,final,channel,ch,client,connect,new,inet,socket,address,conf,get,server,address,conf,get,server,port,sync,channel,while,ch,is,active,ch,close,future,await,1,time,unit,seconds,final,throwable,t,error,get,if,t,null,throw,t,finally,if,server,null,server,shutdown,if,client,null,client,shutdown
NettyServerLowAndHighWatermarkTest -> @Test 	public void testLowAndHighWatermarks() throws Throwable;1432625417;Verifies that the high and low watermark are set in relation to the page size.__<p> The high and low water marks control the data flow to the wire. If the Netty write buffer_has size greater or equal to the high water mark, the channel state becomes not-writable._Only when the size falls below the low water mark again, the state changes to writable again.__<p> The Channel writability state needs to be checked by the handler when writing to the_channel and is not enforced in the sense that you cannot write a channel, which is in_not-writable state.;@Test_	public void testLowAndHighWatermarks() throws Throwable {_		final AtomicReference<Throwable> error = new AtomicReference<Throwable>()__		final NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				_				return new ChannelHandler[] {new TestLowAndHighWatermarkHandler(error)}__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		final NettyConfig conf = createConfig(PageSize)___		final NettyServerAndClient serverAndClient = initServerAndClient(protocol, conf)___		try {_			_			_			final Channel ch = connect(serverAndClient)___			_			awaitClose(ch)___			final Throwable t = error.get()__			if (t != null) {_				throw t__			}_		}_		finally {_			shutdown(serverAndClient)__		}_	};verifies,that,the,high,and,low,watermark,are,set,in,relation,to,the,page,size,p,the,high,and,low,water,marks,control,the,data,flow,to,the,wire,if,the,netty,write,buffer,has,size,greater,or,equal,to,the,high,water,mark,the,channel,state,becomes,not,writable,only,when,the,size,falls,below,the,low,water,mark,again,the,state,changes,to,writable,again,p,the,channel,writability,state,needs,to,be,checked,by,the,handler,when,writing,to,the,channel,and,is,not,enforced,in,the,sense,that,you,cannot,write,a,channel,which,is,in,not,writable,state;test,public,void,test,low,and,high,watermarks,throws,throwable,final,atomic,reference,throwable,error,new,atomic,reference,throwable,final,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,new,test,low,and,high,watermark,handler,error,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,final,netty,config,conf,create,config,page,size,final,netty,server,and,client,server,and,client,init,server,and,client,protocol,conf,try,final,channel,ch,connect,server,and,client,await,close,ch,final,throwable,t,error,get,if,t,null,throw,t,finally,shutdown,server,and,client
NettyServerLowAndHighWatermarkTest -> @Test 	public void testLowAndHighWatermarks() throws Throwable;1500970929;Verifies that the high and low watermark are set in relation to the page size.__<p> The high and low water marks control the data flow to the wire. If the Netty write buffer_has size greater or equal to the high water mark, the channel state becomes not-writable._Only when the size falls below the low water mark again, the state changes to writable again.__<p> The Channel writability state needs to be checked by the handler when writing to the_channel and is not enforced in the sense that you cannot write a channel, which is in_not-writable state.;@Test_	public void testLowAndHighWatermarks() throws Throwable {_		final int expectedLowWatermark = PageSize + 1__		final int expectedHighWatermark = 2 * PageSize___		final AtomicReference<Throwable> error = new AtomicReference<Throwable>()__		final NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				_				return new ChannelHandler[] {new TestLowAndHighWatermarkHandler(_					expectedLowWatermark, expectedHighWatermark, error)}__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		final NettyConfig conf = createConfig(PageSize)___		final NettyServerAndClient serverAndClient = initServerAndClient(protocol, conf)___		try {_			_			_			final Channel ch = connect(serverAndClient)___			_			awaitClose(ch)___			final Throwable t = error.get()__			if (t != null) {_				throw t__			}_		}_		finally {_			shutdown(serverAndClient)__		}_	};verifies,that,the,high,and,low,watermark,are,set,in,relation,to,the,page,size,p,the,high,and,low,water,marks,control,the,data,flow,to,the,wire,if,the,netty,write,buffer,has,size,greater,or,equal,to,the,high,water,mark,the,channel,state,becomes,not,writable,only,when,the,size,falls,below,the,low,water,mark,again,the,state,changes,to,writable,again,p,the,channel,writability,state,needs,to,be,checked,by,the,handler,when,writing,to,the,channel,and,is,not,enforced,in,the,sense,that,you,cannot,write,a,channel,which,is,in,not,writable,state;test,public,void,test,low,and,high,watermarks,throws,throwable,final,int,expected,low,watermark,page,size,1,final,int,expected,high,watermark,2,page,size,final,atomic,reference,throwable,error,new,atomic,reference,throwable,final,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,new,test,low,and,high,watermark,handler,expected,low,watermark,expected,high,watermark,error,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,final,netty,config,conf,create,config,page,size,final,netty,server,and,client,server,and,client,init,server,and,client,protocol,conf,try,final,channel,ch,connect,server,and,client,await,close,ch,final,throwable,t,error,get,if,t,null,throw,t,finally,shutdown,server,and,client
NettyServerLowAndHighWatermarkTest -> @Test 	public void testLowAndHighWatermarks() throws Throwable;1502111816;Verifies that the high and low watermark are set in relation to the page size.__<p> The high and low water marks control the data flow to the wire. If the Netty write buffer_has size greater or equal to the high water mark, the channel state becomes not-writable._Only when the size falls below the low water mark again, the state changes to writable again.__<p> The Channel writability state needs to be checked by the handler when writing to the_channel and is not enforced in the sense that you cannot write a channel, which is in_not-writable state.;@Test_	public void testLowAndHighWatermarks() throws Throwable {_		final int expectedLowWatermark = PageSize + 1__		final int expectedHighWatermark = 2 * PageSize___		final AtomicReference<Throwable> error = new AtomicReference<Throwable>()__		final NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				_				return new ChannelHandler[] {new TestLowAndHighWatermarkHandler(_					expectedLowWatermark, expectedHighWatermark, error)}__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		final NettyConfig conf = createConfig(PageSize)___		final NettyServerAndClient serverAndClient = initServerAndClient(protocol, conf)___		try {_			_			_			final Channel ch = connect(serverAndClient)___			_			awaitClose(ch)___			final Throwable t = error.get()__			if (t != null) {_				throw t__			}_		}_		finally {_			shutdown(serverAndClient)__		}_	};verifies,that,the,high,and,low,watermark,are,set,in,relation,to,the,page,size,p,the,high,and,low,water,marks,control,the,data,flow,to,the,wire,if,the,netty,write,buffer,has,size,greater,or,equal,to,the,high,water,mark,the,channel,state,becomes,not,writable,only,when,the,size,falls,below,the,low,water,mark,again,the,state,changes,to,writable,again,p,the,channel,writability,state,needs,to,be,checked,by,the,handler,when,writing,to,the,channel,and,is,not,enforced,in,the,sense,that,you,cannot,write,a,channel,which,is,in,not,writable,state;test,public,void,test,low,and,high,watermarks,throws,throwable,final,int,expected,low,watermark,page,size,1,final,int,expected,high,watermark,2,page,size,final,atomic,reference,throwable,error,new,atomic,reference,throwable,final,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,new,test,low,and,high,watermark,handler,expected,low,watermark,expected,high,watermark,error,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,final,netty,config,conf,create,config,page,size,final,netty,server,and,client,server,and,client,init,server,and,client,protocol,conf,try,final,channel,ch,connect,server,and,client,await,close,ch,final,throwable,t,error,get,if,t,null,throw,t,finally,shutdown,server,and,client
NettyServerLowAndHighWatermarkTest -> private static ByteBuf buffer(int size);1430987538;Creates a new buffer of the given size.;private static ByteBuf buffer(int size) {_		_		_		return Unpooled.buffer(size).writerIndex(size)__	};creates,a,new,buffer,of,the,given,size;private,static,byte,buf,buffer,int,size,return,unpooled,buffer,size,writer,index,size
NettyServerLowAndHighWatermarkTest -> private static ByteBuf buffer(int size);1432625417;Creates a new buffer of the given size.;private static ByteBuf buffer(int size) {_		_		_		return Unpooled.buffer(size).writerIndex(size)__	};creates,a,new,buffer,of,the,given,size;private,static,byte,buf,buffer,int,size,return,unpooled,buffer,size,writer,index,size
NettyServerLowAndHighWatermarkTest -> private static ByteBuf buffer(int size);1500970929;Creates a new buffer of the given size.;private static ByteBuf buffer(int size) {_		_		_		return Unpooled.buffer(size).writerIndex(size)__	};creates,a,new,buffer,of,the,given,size;private,static,byte,buf,buffer,int,size,return,unpooled,buffer,size,writer,index,size
NettyServerLowAndHighWatermarkTest -> private static ByteBuf buffer(int size);1502111816;Creates a new buffer of the given size.;private static ByteBuf buffer(int size) {_		_		_		return Unpooled.buffer(size).writerIndex(size)__	};creates,a,new,buffer,of,the,given,size;private,static,byte,buf,buffer,int,size,return,unpooled,buffer,size,writer,index,size
NettyServerLowAndHighWatermarkTest -> private static ByteBuf buffer(int size);1509981553;Creates a new buffer of the given size.;private static ByteBuf buffer(int size) {_		_		_		return Unpooled.buffer(size).writerIndex(size)__	};creates,a,new,buffer,of,the,given,size;private,static,byte,buf,buffer,int,size,return,unpooled,buffer,size,writer,index,size
NettyServerLowAndHighWatermarkTest -> private static ByteBuf buffer(int size);1515160618;Creates a new buffer of the given size.;private static ByteBuf buffer(int size) {_		_		_		return Unpooled.buffer(size).writerIndex(size)__	};creates,a,new,buffer,of,the,given,size;private,static,byte,buf,buffer,int,size,return,unpooled,buffer,size,writer,index,size
NettyServerLowAndHighWatermarkTest -> private static ByteBuf buffer(int size);1518785736;Creates a new buffer of the given size.;private static ByteBuf buffer(int size) {_		_		_		return Unpooled.buffer(size).writerIndex(size)__	};creates,a,new,buffer,of,the,given,size;private,static,byte,buf,buffer,int,size,return,unpooled,buffer,size,writer,index,size
NettyServerLowAndHighWatermarkTest -> private void testLowAndHighWatermarks(int pageSize) throws Throwable;1509981553;Verifies that the high and low watermark are set in relation to the page size.__<p>The high and low water marks control the data flow to the wire. If the Netty write buffer_has size greater or equal to the high water mark, the channel state becomes not-writable._Only when the size falls below the low water mark again, the state changes to writable again.__<p>The Channel writability state needs to be checked by the handler when writing to the_channel and is not enforced in the sense that you cannot write a channel, which is in_not-writable state.__@param pageSize memory segment size to test with (influences high and low watermarks);private void testLowAndHighWatermarks(int pageSize) throws Throwable {_		final int expectedLowWatermark = pageSize + 1__		final int expectedHighWatermark = 2 * pageSize___		final AtomicReference<Throwable> error = new AtomicReference<Throwable>()__		final NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				_				return new ChannelHandler[] {new TestLowAndHighWatermarkHandler(_					pageSize, expectedLowWatermark, expectedHighWatermark, error)}__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		final NettyConfig conf = createConfig(pageSize)___		final NettyServerAndClient serverAndClient = initServerAndClient(protocol, conf)___		try {_			_			_			final Channel ch = connect(serverAndClient)___			_			awaitClose(ch)___			final Throwable t = error.get()__			if (t != null) {_				throw t__			}_		}_		finally {_			shutdown(serverAndClient)__		}_	};verifies,that,the,high,and,low,watermark,are,set,in,relation,to,the,page,size,p,the,high,and,low,water,marks,control,the,data,flow,to,the,wire,if,the,netty,write,buffer,has,size,greater,or,equal,to,the,high,water,mark,the,channel,state,becomes,not,writable,only,when,the,size,falls,below,the,low,water,mark,again,the,state,changes,to,writable,again,p,the,channel,writability,state,needs,to,be,checked,by,the,handler,when,writing,to,the,channel,and,is,not,enforced,in,the,sense,that,you,cannot,write,a,channel,which,is,in,not,writable,state,param,page,size,memory,segment,size,to,test,with,influences,high,and,low,watermarks;private,void,test,low,and,high,watermarks,int,page,size,throws,throwable,final,int,expected,low,watermark,page,size,1,final,int,expected,high,watermark,2,page,size,final,atomic,reference,throwable,error,new,atomic,reference,throwable,final,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,new,test,low,and,high,watermark,handler,page,size,expected,low,watermark,expected,high,watermark,error,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,final,netty,config,conf,create,config,page,size,final,netty,server,and,client,server,and,client,init,server,and,client,protocol,conf,try,final,channel,ch,connect,server,and,client,await,close,ch,final,throwable,t,error,get,if,t,null,throw,t,finally,shutdown,server,and,client
NettyServerLowAndHighWatermarkTest -> private void testLowAndHighWatermarks(int pageSize) throws Throwable;1515160618;Verifies that the high and low watermark are set in relation to the page size.__<p>The high and low water marks control the data flow to the wire. If the Netty write buffer_has size greater or equal to the high water mark, the channel state becomes not-writable._Only when the size falls below the low water mark again, the state changes to writable again.__<p>The Channel writability state needs to be checked by the handler when writing to the_channel and is not enforced in the sense that you cannot write a channel, which is in_not-writable state.__@param pageSize memory segment size to test with (influences high and low watermarks);private void testLowAndHighWatermarks(int pageSize) throws Throwable {_		final int expectedLowWatermark = pageSize + 1__		final int expectedHighWatermark = 2 * pageSize___		final AtomicReference<Throwable> error = new AtomicReference<Throwable>()__		final NettyProtocol protocol = new NettyProtocol(null, null) {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				_				return new ChannelHandler[] {new TestLowAndHighWatermarkHandler(_					pageSize, expectedLowWatermark, expectedHighWatermark, error)}__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		final NettyConfig conf = createConfig(pageSize)___		final NettyServerAndClient serverAndClient = initServerAndClient(protocol, conf)___		try {_			_			_			final Channel ch = connect(serverAndClient)___			_			awaitClose(ch)___			final Throwable t = error.get()__			if (t != null) {_				throw t__			}_		}_		finally {_			shutdown(serverAndClient)__		}_	};verifies,that,the,high,and,low,watermark,are,set,in,relation,to,the,page,size,p,the,high,and,low,water,marks,control,the,data,flow,to,the,wire,if,the,netty,write,buffer,has,size,greater,or,equal,to,the,high,water,mark,the,channel,state,becomes,not,writable,only,when,the,size,falls,below,the,low,water,mark,again,the,state,changes,to,writable,again,p,the,channel,writability,state,needs,to,be,checked,by,the,handler,when,writing,to,the,channel,and,is,not,enforced,in,the,sense,that,you,cannot,write,a,channel,which,is,in,not,writable,state,param,page,size,memory,segment,size,to,test,with,influences,high,and,low,watermarks;private,void,test,low,and,high,watermarks,int,page,size,throws,throwable,final,int,expected,low,watermark,page,size,1,final,int,expected,high,watermark,2,page,size,final,atomic,reference,throwable,error,new,atomic,reference,throwable,final,netty,protocol,protocol,new,netty,protocol,null,null,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,new,test,low,and,high,watermark,handler,page,size,expected,low,watermark,expected,high,watermark,error,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,final,netty,config,conf,create,config,page,size,final,netty,server,and,client,server,and,client,init,server,and,client,protocol,conf,try,final,channel,ch,connect,server,and,client,await,close,ch,final,throwable,t,error,get,if,t,null,throw,t,finally,shutdown,server,and,client
NettyServerLowAndHighWatermarkTest -> private void testLowAndHighWatermarks(int pageSize) throws Throwable;1518785736;Verifies that the high and low watermark are set in relation to the page size.__<p>The high and low water marks control the data flow to the wire. If the Netty write buffer_has size greater or equal to the high water mark, the channel state becomes not-writable._Only when the size falls below the low water mark again, the state changes to writable again.__<p>The Channel writability state needs to be checked by the handler when writing to the_channel and is not enforced in the sense that you cannot write a channel, which is in_not-writable state.__@param pageSize memory segment size to test with (influences high and low watermarks);private void testLowAndHighWatermarks(int pageSize) throws Throwable {_		final int expectedLowWatermark = pageSize + 1__		final int expectedHighWatermark = 2 * pageSize___		final AtomicReference<Throwable> error = new AtomicReference<Throwable>()__		final NettyProtocol protocol = new NettyProtocol(null, null, true) {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				_				return new ChannelHandler[] {new TestLowAndHighWatermarkHandler(_					pageSize, expectedLowWatermark, expectedHighWatermark, error)}__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		final NettyConfig conf = createConfig(pageSize)___		final NettyServerAndClient serverAndClient = initServerAndClient(protocol, conf)___		try {_			_			_			final Channel ch = connect(serverAndClient)___			_			awaitClose(ch)___			final Throwable t = error.get()__			if (t != null) {_				throw t__			}_		}_		finally {_			shutdown(serverAndClient)__		}_	};verifies,that,the,high,and,low,watermark,are,set,in,relation,to,the,page,size,p,the,high,and,low,water,marks,control,the,data,flow,to,the,wire,if,the,netty,write,buffer,has,size,greater,or,equal,to,the,high,water,mark,the,channel,state,becomes,not,writable,only,when,the,size,falls,below,the,low,water,mark,again,the,state,changes,to,writable,again,p,the,channel,writability,state,needs,to,be,checked,by,the,handler,when,writing,to,the,channel,and,is,not,enforced,in,the,sense,that,you,cannot,write,a,channel,which,is,in,not,writable,state,param,page,size,memory,segment,size,to,test,with,influences,high,and,low,watermarks;private,void,test,low,and,high,watermarks,int,page,size,throws,throwable,final,int,expected,low,watermark,page,size,1,final,int,expected,high,watermark,2,page,size,final,atomic,reference,throwable,error,new,atomic,reference,throwable,final,netty,protocol,protocol,new,netty,protocol,null,null,true,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,new,test,low,and,high,watermark,handler,page,size,expected,low,watermark,expected,high,watermark,error,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,final,netty,config,conf,create,config,page,size,final,netty,server,and,client,server,and,client,init,server,and,client,protocol,conf,try,final,channel,ch,connect,server,and,client,await,close,ch,final,throwable,t,error,get,if,t,null,throw,t,finally,shutdown,server,and,client
NettyServerLowAndHighWatermarkTest -> @Test 	public void testSmallLowAndHighWatermarks() throws Throwable;1509981553;Verify low and high watermarks being set correctly for smaller memory segment sizes than_Netty's defaults.;@Test_	public void testSmallLowAndHighWatermarks() throws Throwable {_		testLowAndHighWatermarks(1024)__	};verify,low,and,high,watermarks,being,set,correctly,for,smaller,memory,segment,sizes,than,netty,s,defaults;test,public,void,test,small,low,and,high,watermarks,throws,throwable,test,low,and,high,watermarks,1024
NettyServerLowAndHighWatermarkTest -> @Test 	public void testSmallLowAndHighWatermarks() throws Throwable;1515160618;Verify low and high watermarks being set correctly for smaller memory segment sizes than_Netty's defaults.;@Test_	public void testSmallLowAndHighWatermarks() throws Throwable {_		testLowAndHighWatermarks(1024)__	};verify,low,and,high,watermarks,being,set,correctly,for,smaller,memory,segment,sizes,than,netty,s,defaults;test,public,void,test,small,low,and,high,watermarks,throws,throwable,test,low,and,high,watermarks,1024
NettyServerLowAndHighWatermarkTest -> @Test 	public void testSmallLowAndHighWatermarks() throws Throwable;1518785736;Verify low and high watermarks being set correctly for smaller memory segment sizes than_Netty's defaults.;@Test_	public void testSmallLowAndHighWatermarks() throws Throwable {_		testLowAndHighWatermarks(1024)__	};verify,low,and,high,watermarks,being,set,correctly,for,smaller,memory,segment,sizes,than,netty,s,defaults;test,public,void,test,small,low,and,high,watermarks,throws,throwable,test,low,and,high,watermarks,1024
