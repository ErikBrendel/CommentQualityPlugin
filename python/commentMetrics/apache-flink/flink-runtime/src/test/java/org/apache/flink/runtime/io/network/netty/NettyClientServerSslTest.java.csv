# id;timestamp;commentText;codeText;commentWords;codeWords
NettyClientServerSslTest -> @Test 	public void testValidSslConnection() throws Exception;1476696544;Verify valid ssl configuration and connection;@Test_	public void testValidSslConnection() throws Exception {_		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() { return new ChannelHandler[0]_ }_		}___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			createSslConfig())___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)___		_		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())__		assertTrue(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,valid,ssl,configuration,and,connection;test,public,void,test,valid,ssl,connection,throws,exception,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,create,ssl,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,true,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testValidSslConnection() throws Exception;1498894422;Verify valid ssl configuration and connection;@Test_	public void testValidSslConnection() throws Exception {_		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() { return new ChannelHandler[0]_ }_		}___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			createSslConfig())___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)___		_		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())__		assertTrue(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,valid,ssl,configuration,and,connection;test,public,void,test,valid,ssl,connection,throws,exception,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,create,ssl,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,true,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testValidSslConnection() throws Exception;1502111816;Verify valid ssl configuration and connection;@Test_	public void testValidSslConnection() throws Exception {_		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() { return new ChannelHandler[0]_ }_		}___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			createSslConfig())___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)___		_		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())__		assertTrue(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,valid,ssl,configuration,and,connection;test,public,void,test,valid,ssl,connection,throws,exception,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,create,ssl,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,true,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testValidSslConnection() throws Exception;1515160618;Verify valid ssl configuration and connection.;@Test_	public void testValidSslConnection() throws Exception {_		NettyProtocol protocol = new NettyProtocol(null, null) {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			createSslConfig())___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)___		_		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())__		assertTrue(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,valid,ssl,configuration,and,connection;test,public,void,test,valid,ssl,connection,throws,exception,netty,protocol,protocol,new,netty,protocol,null,null,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,create,ssl,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,true,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testValidSslConnection() throws Exception;1518785736;Verify valid ssl configuration and connection.;@Test_	public void testValidSslConnection() throws Exception {_		NettyProtocol protocol = new NettyProtocol(null, null, true) {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			createSslConfig())___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)___		_		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())__		assertTrue(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,valid,ssl,configuration,and,connection;test,public,void,test,valid,ssl,connection,throws,exception,netty,protocol,protocol,new,netty,protocol,null,null,true,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,create,ssl,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,true,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testValidSslConnection() throws Exception;1531721446;Verify valid ssl configuration and connection.;@Test_	public void testValidSslConnection() throws Exception {_		NettyProtocol protocol = new NettyProtocol(null, null, true) {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			createSslConfig())___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)___		_		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())__		assertTrue(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,valid,ssl,configuration,and,connection;test,public,void,test,valid,ssl,connection,throws,exception,netty,protocol,protocol,new,netty,protocol,null,null,true,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,create,ssl,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,true,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testValidSslConnection() throws Exception;1531721446;Verify valid ssl configuration and connection.;@Test_	public void testValidSslConnection() throws Exception {_		NettyProtocol protocol = new NoOpProtocol()___		NettyConfig nettyConfig = createNettyConfig(createSslConfig())___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)___		_		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())__		assertTrue(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,valid,ssl,configuration,and,connection;test,public,void,test,valid,ssl,connection,throws,exception,netty,protocol,protocol,new,no,op,protocol,netty,config,netty,config,create,netty,config,create,ssl,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,true,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testValidSslConnection() throws Exception;1531721446;Verify valid ssl configuration and connection.;@Test_	public void testValidSslConnection() throws Exception {_		NettyProtocol protocol = new NoOpProtocol()___		NettyConfig nettyConfig = createNettyConfig(createSslConfig())___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)___		_		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())__		assertTrue(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,valid,ssl,configuration,and,connection;test,public,void,test,valid,ssl,connection,throws,exception,netty,protocol,protocol,new,no,op,protocol,netty,config,netty,config,create,netty,config,create,ssl,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,true,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testValidSslConnection() throws Exception;1540215410;Verify valid ssl configuration and connection.;@Test_	public void testValidSslConnection() throws Exception {_		testValidSslConnection(createSslConfig())__	};verify,valid,ssl,configuration,and,connection;test,public,void,test,valid,ssl,connection,throws,exception,test,valid,ssl,connection,create,ssl,config
NettyClientServerSslTest -> @Test 	public void testInvalidSslConfiguration() throws Exception;1476696544;Verify failure on invalid ssl configuration;@Test_	public void testInvalidSslConfiguration() throws Exception {_		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() { return new ChannelHandler[0]_ }_		}___		Configuration config = createSslConfig()__		_		config.setString(ConfigConstants.SECURITY_SSL_KEYSTORE_PASSWORD, "invalidpassword")___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			config)___		NettyTestUtil.NettyServerAndClient serverAndClient = null__		try {_			serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)__			Assert.fail("Created server and client from invalid configuration")__		} catch (Exception e) {_			_		}__		NettyTestUtil.shutdown(serverAndClient)__	};verify,failure,on,invalid,ssl,configuration;test,public,void,test,invalid,ssl,configuration,throws,exception,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,configuration,config,create,ssl,config,config,set,string,config,constants,invalidpassword,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,config,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,assert,fail,created,server,and,client,from,invalid,configuration,catch,exception,e,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testInvalidSslConfiguration() throws Exception;1498894422;Verify failure on invalid ssl configuration;@Test_	public void testInvalidSslConfiguration() throws Exception {_		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() { return new ChannelHandler[0]_ }_		}___		Configuration config = createSslConfig()__		_		config.setString(SecurityOptions.SSL_KEYSTORE_PASSWORD, "invalidpassword")___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			config)___		NettyTestUtil.NettyServerAndClient serverAndClient = null__		try {_			serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)__			Assert.fail("Created server and client from invalid configuration")__		} catch (Exception e) {_			_		}__		NettyTestUtil.shutdown(serverAndClient)__	};verify,failure,on,invalid,ssl,configuration;test,public,void,test,invalid,ssl,configuration,throws,exception,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,configuration,config,create,ssl,config,config,set,string,security,options,invalidpassword,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,config,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,assert,fail,created,server,and,client,from,invalid,configuration,catch,exception,e,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testInvalidSslConfiguration() throws Exception;1502111816;Verify failure on invalid ssl configuration;@Test_	public void testInvalidSslConfiguration() throws Exception {_		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() { return new ChannelHandler[0]_ }_		}___		Configuration config = createSslConfig()__		_		config.setString(SecurityOptions.SSL_KEYSTORE_PASSWORD, "invalidpassword")___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			config)___		NettyTestUtil.NettyServerAndClient serverAndClient = null__		try {_			serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)__			Assert.fail("Created server and client from invalid configuration")__		} catch (Exception e) {_			_		}__		NettyTestUtil.shutdown(serverAndClient)__	};verify,failure,on,invalid,ssl,configuration;test,public,void,test,invalid,ssl,configuration,throws,exception,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,configuration,config,create,ssl,config,config,set,string,security,options,invalidpassword,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,config,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,assert,fail,created,server,and,client,from,invalid,configuration,catch,exception,e,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testInvalidSslConfiguration() throws Exception;1515160618;Verify failure on invalid ssl configuration.;@Test_	public void testInvalidSslConfiguration() throws Exception {_		NettyProtocol protocol = new NettyProtocol(null, null) {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		Configuration config = createSslConfig()__		_		config.setString(SecurityOptions.SSL_KEYSTORE_PASSWORD, "invalidpassword")___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			config)___		NettyTestUtil.NettyServerAndClient serverAndClient = null__		try {_			serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)__			Assert.fail("Created server and client from invalid configuration")__		} catch (Exception e) {_			_		}__		NettyTestUtil.shutdown(serverAndClient)__	};verify,failure,on,invalid,ssl,configuration;test,public,void,test,invalid,ssl,configuration,throws,exception,netty,protocol,protocol,new,netty,protocol,null,null,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,configuration,config,create,ssl,config,config,set,string,security,options,invalidpassword,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,config,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,assert,fail,created,server,and,client,from,invalid,configuration,catch,exception,e,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testInvalidSslConfiguration() throws Exception;1518785736;Verify failure on invalid ssl configuration.;@Test_	public void testInvalidSslConfiguration() throws Exception {_		NettyProtocol protocol = new NettyProtocol(null, null, true) {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		Configuration config = createSslConfig()__		_		config.setString(SecurityOptions.SSL_KEYSTORE_PASSWORD, "invalidpassword")___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			config)___		NettyTestUtil.NettyServerAndClient serverAndClient = null__		try {_			serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)__			Assert.fail("Created server and client from invalid configuration")__		} catch (Exception e) {_			_		}__		NettyTestUtil.shutdown(serverAndClient)__	};verify,failure,on,invalid,ssl,configuration;test,public,void,test,invalid,ssl,configuration,throws,exception,netty,protocol,protocol,new,netty,protocol,null,null,true,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,configuration,config,create,ssl,config,config,set,string,security,options,invalidpassword,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,config,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,assert,fail,created,server,and,client,from,invalid,configuration,catch,exception,e,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testInvalidSslConfiguration() throws Exception;1531721446;Verify failure on invalid ssl configuration.;@Test_	public void testInvalidSslConfiguration() throws Exception {_		NettyProtocol protocol = new NettyProtocol(null, null, true) {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		Configuration config = createSslConfig()__		_		config.setString(SecurityOptions.SSL_KEYSTORE_PASSWORD, "invalidpassword")___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			config)___		NettyTestUtil.NettyServerAndClient serverAndClient = null__		try {_			serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)__			Assert.fail("Created server and client from invalid configuration")__		} catch (Exception e) {_			_		}__		NettyTestUtil.shutdown(serverAndClient)__	};verify,failure,on,invalid,ssl,configuration;test,public,void,test,invalid,ssl,configuration,throws,exception,netty,protocol,protocol,new,netty,protocol,null,null,true,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,configuration,config,create,ssl,config,config,set,string,security,options,invalidpassword,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,config,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,assert,fail,created,server,and,client,from,invalid,configuration,catch,exception,e,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testInvalidSslConfiguration() throws Exception;1531721446;Verify failure on invalid ssl configuration.;@Test_	public void testInvalidSslConfiguration() throws Exception {_		NettyProtocol protocol = new NoOpProtocol()___		Configuration config = createSslConfig()__		_		config.setString(SecurityOptions.SSL_INTERNAL_KEYSTORE_PASSWORD, "invalidpassword")___		NettyConfig nettyConfig = createNettyConfig(config)___		NettyTestUtil.NettyServerAndClient serverAndClient = null__		try {_			serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)__			Assert.fail("Created server and client from invalid configuration")__		} catch (Exception e) {_			_		}__		NettyTestUtil.shutdown(serverAndClient)__	};verify,failure,on,invalid,ssl,configuration;test,public,void,test,invalid,ssl,configuration,throws,exception,netty,protocol,protocol,new,no,op,protocol,configuration,config,create,ssl,config,config,set,string,security,options,invalidpassword,netty,config,netty,config,create,netty,config,config,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,assert,fail,created,server,and,client,from,invalid,configuration,catch,exception,e,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testInvalidSslConfiguration() throws Exception;1531721446;Verify failure on invalid ssl configuration.;@Test_	public void testInvalidSslConfiguration() throws Exception {_		NettyProtocol protocol = new NoOpProtocol()___		Configuration config = createSslConfig()__		_		config.setString(SecurityOptions.SSL_INTERNAL_KEYSTORE_PASSWORD, "invalidpassword")___		NettyConfig nettyConfig = createNettyConfig(config)___		NettyTestUtil.NettyServerAndClient serverAndClient = null__		try {_			serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)__			Assert.fail("Created server and client from invalid configuration")__		} catch (Exception e) {_			_		}__		NettyTestUtil.shutdown(serverAndClient)__	};verify,failure,on,invalid,ssl,configuration;test,public,void,test,invalid,ssl,configuration,throws,exception,netty,protocol,protocol,new,no,op,protocol,configuration,config,create,ssl,config,config,set,string,security,options,invalidpassword,netty,config,netty,config,create,netty,config,config,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,assert,fail,created,server,and,client,from,invalid,configuration,catch,exception,e,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testInvalidSslConfiguration() throws Exception;1540215410;Verify failure on invalid ssl configuration.;@Test_	public void testInvalidSslConfiguration() throws Exception {_		NettyProtocol protocol = new NoOpProtocol()___		Configuration config = createSslConfig()__		_		config.setString(SecurityOptions.SSL_INTERNAL_KEYSTORE_PASSWORD, "invalidpassword")___		NettyConfig nettyConfig = createNettyConfig(config)___		NettyTestUtil.NettyServerAndClient serverAndClient = null__		try {_			serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)__			Assert.fail("Created server and client from invalid configuration")__		} catch (Exception e) {_			_		}__		NettyTestUtil.shutdown(serverAndClient)__	};verify,failure,on,invalid,ssl,configuration;test,public,void,test,invalid,ssl,configuration,throws,exception,netty,protocol,protocol,new,no,op,protocol,configuration,config,create,ssl,config,config,set,string,security,options,invalidpassword,netty,config,netty,config,create,netty,config,config,netty,test,util,netty,server,and,client,server,and,client,null,try,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,assert,fail,created,server,and,client,from,invalid,configuration,catch,exception,e,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testSslHandshakeError() throws Exception;1476696544;Verify SSL handshake error when untrusted server certificate is used;@Test_	public void testSslHandshakeError() throws Exception {_		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() { return new ChannelHandler[0]_ }_		}___		Configuration config = createSslConfig()___		_		config.setString(ConfigConstants.SECURITY_SSL_KEYSTORE, "src/test/resources/untrusted.keystore")___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			config)___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)__		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())___		_		assertFalse(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,ssl,handshake,error,when,untrusted,server,certificate,is,used;test,public,void,test,ssl,handshake,error,throws,exception,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,configuration,config,create,ssl,config,config,set,string,config,constants,src,test,resources,untrusted,keystore,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,false,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testSslHandshakeError() throws Exception;1498894422;Verify SSL handshake error when untrusted server certificate is used;@Test_	public void testSslHandshakeError() throws Exception {_		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() { return new ChannelHandler[0]_ }_		}___		Configuration config = createSslConfig()___		_		config.setString(SecurityOptions.SSL_KEYSTORE, "src/test/resources/untrusted.keystore")___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			config)___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)__		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())___		_		assertFalse(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,ssl,handshake,error,when,untrusted,server,certificate,is,used;test,public,void,test,ssl,handshake,error,throws,exception,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,configuration,config,create,ssl,config,config,set,string,security,options,src,test,resources,untrusted,keystore,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,false,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testSslHandshakeError() throws Exception;1502111816;Verify SSL handshake error when untrusted server certificate is used;@Test_	public void testSslHandshakeError() throws Exception {_		NettyProtocol protocol = new NettyProtocol() {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() { return new ChannelHandler[0]_ }_		}___		Configuration config = createSslConfig()___		_		config.setString(SecurityOptions.SSL_KEYSTORE, "src/test/resources/untrusted.keystore")___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			config)___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)__		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())___		_		assertFalse(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,ssl,handshake,error,when,untrusted,server,certificate,is,used;test,public,void,test,ssl,handshake,error,throws,exception,netty,protocol,protocol,new,netty,protocol,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,configuration,config,create,ssl,config,config,set,string,security,options,src,test,resources,untrusted,keystore,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,false,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testSslHandshakeError() throws Exception;1515160618;Verify SSL handshake error when untrusted server certificate is used.;@Test_	public void testSslHandshakeError() throws Exception {_		NettyProtocol protocol = new NettyProtocol(null, null) {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		Configuration config = createSslConfig()___		_		config.setString(SecurityOptions.SSL_KEYSTORE, "src/test/resources/untrusted.keystore")___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			config)___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)__		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())___		_		assertFalse(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,ssl,handshake,error,when,untrusted,server,certificate,is,used;test,public,void,test,ssl,handshake,error,throws,exception,netty,protocol,protocol,new,netty,protocol,null,null,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,configuration,config,create,ssl,config,config,set,string,security,options,src,test,resources,untrusted,keystore,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,false,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testSslHandshakeError() throws Exception;1518785736;Verify SSL handshake error when untrusted server certificate is used.;@Test_	public void testSslHandshakeError() throws Exception {_		NettyProtocol protocol = new NettyProtocol(null, null, true) {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		Configuration config = createSslConfig()___		_		config.setString(SecurityOptions.SSL_KEYSTORE, "src/test/resources/untrusted.keystore")___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			config)___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)__		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())___		_		assertFalse(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,ssl,handshake,error,when,untrusted,server,certificate,is,used;test,public,void,test,ssl,handshake,error,throws,exception,netty,protocol,protocol,new,netty,protocol,null,null,true,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,configuration,config,create,ssl,config,config,set,string,security,options,src,test,resources,untrusted,keystore,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,false,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testSslHandshakeError() throws Exception;1531721446;Verify SSL handshake error when untrusted server certificate is used.;@Test_	public void testSslHandshakeError() throws Exception {_		NettyProtocol protocol = new NettyProtocol(null, null, true) {_			@Override_			public ChannelHandler[] getServerChannelHandlers() {_				return new ChannelHandler[0]__			}__			@Override_			public ChannelHandler[] getClientChannelHandlers() {_				return new ChannelHandler[0]__			}_		}___		Configuration config = createSslConfig()___		_		config.setString(SecurityOptions.SSL_KEYSTORE, "src/test/resources/untrusted.keystore")___		NettyConfig nettyConfig = new NettyConfig(_			InetAddress.getLoopbackAddress(),_			NetUtils.getAvailablePort(),_			NettyTestUtil.DEFAULT_SEGMENT_SIZE,_			1,_			config)___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)__		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())___		_		assertFalse(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,ssl,handshake,error,when,untrusted,server,certificate,is,used;test,public,void,test,ssl,handshake,error,throws,exception,netty,protocol,protocol,new,netty,protocol,null,null,true,override,public,channel,handler,get,server,channel,handlers,return,new,channel,handler,0,override,public,channel,handler,get,client,channel,handlers,return,new,channel,handler,0,configuration,config,create,ssl,config,config,set,string,security,options,src,test,resources,untrusted,keystore,netty,config,netty,config,new,netty,config,inet,address,get,loopback,address,net,utils,get,available,port,netty,test,util,1,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,false,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testSslHandshakeError() throws Exception;1531721446;Verify SSL handshake error when untrusted server certificate is used.;@Test_	public void testSslHandshakeError() throws Exception {_		NettyProtocol protocol = new NoOpProtocol()___		Configuration config = createSslConfig()___		_		config.setString(SecurityOptions.SSL_INTERNAL_KEYSTORE, "src/test/resources/untrusted.keystore")___		NettyConfig nettyConfig = createNettyConfig(config)___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)__		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())___		_		assertFalse(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,ssl,handshake,error,when,untrusted,server,certificate,is,used;test,public,void,test,ssl,handshake,error,throws,exception,netty,protocol,protocol,new,no,op,protocol,configuration,config,create,ssl,config,config,set,string,security,options,src,test,resources,untrusted,keystore,netty,config,netty,config,create,netty,config,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,false,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testSslHandshakeError() throws Exception;1531721446;Verify SSL handshake error when untrusted server certificate is used.;@Test_	public void testSslHandshakeError() throws Exception {_		NettyProtocol protocol = new NoOpProtocol()___		Configuration config = createSslConfig()___		_		config.setString(SecurityOptions.SSL_INTERNAL_KEYSTORE, "src/test/resources/untrusted.keystore")___		NettyConfig nettyConfig = createNettyConfig(config)___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)__		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())___		_		assertFalse(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,ssl,handshake,error,when,untrusted,server,certificate,is,used;test,public,void,test,ssl,handshake,error,throws,exception,netty,protocol,protocol,new,no,op,protocol,configuration,config,create,ssl,config,config,set,string,security,options,src,test,resources,untrusted,keystore,netty,config,netty,config,create,netty,config,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,false,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
NettyClientServerSslTest -> @Test 	public void testSslHandshakeError() throws Exception;1540215410;Verify SSL handshake error when untrusted server certificate is used.;@Test_	public void testSslHandshakeError() throws Exception {_		NettyProtocol protocol = new NoOpProtocol()___		Configuration config = createSslConfig()___		_		config.setString(SecurityOptions.SSL_INTERNAL_KEYSTORE, "src/test/resources/untrusted.keystore")___		NettyConfig nettyConfig = createNettyConfig(config)___		NettyTestUtil.NettyServerAndClient serverAndClient = NettyTestUtil.initServerAndClient(protocol, nettyConfig)___		Channel ch = NettyTestUtil.connect(serverAndClient)__		ch.pipeline().addLast(new StringDecoder()).addLast(new StringEncoder())___		_		assertFalse(ch.writeAndFlush("test").await().isSuccess())___		NettyTestUtil.shutdown(serverAndClient)__	};verify,ssl,handshake,error,when,untrusted,server,certificate,is,used;test,public,void,test,ssl,handshake,error,throws,exception,netty,protocol,protocol,new,no,op,protocol,configuration,config,create,ssl,config,config,set,string,security,options,src,test,resources,untrusted,keystore,netty,config,netty,config,create,netty,config,config,netty,test,util,netty,server,and,client,server,and,client,netty,test,util,init,server,and,client,protocol,netty,config,channel,ch,netty,test,util,connect,server,and,client,ch,pipeline,add,last,new,string,decoder,add,last,new,string,encoder,assert,false,ch,write,and,flush,test,await,is,success,netty,test,util,shutdown,server,and,client
