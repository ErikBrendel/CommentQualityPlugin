commented;modifiers;parameterAmount;loc;comment;code
true;public;1;19;/**  * Waits until the contender becomes the leader or until the timeout has been exceeded.  *  * @param timeout  * @throws TimeoutException  */ ;/**  * Waits until the contender becomes the leader or until the timeout has been exceeded.  *  * @param timeout  * @throws TimeoutException  */ public void waitForLeader(long timeout) throws TimeoutException {     long start = System.currentTimeMillis().     long curTimeout.     while (!isLeader() && (curTimeout = timeout - System.currentTimeMillis() + start) > 0) {         synchronized (lock) {             try {                 lock.wait(curTimeout).             } catch (InterruptedException e) {             // we got interrupted so check again for the condition             }         }     }     if (!isLeader()) {         throw new TimeoutException("Contender was not elected as the leader within " + timeout + "ms").     } }
true;public;1;19;/**  * Waits until an error has been found or until the timeout has been exceeded.  *  * @param timeout  * @throws TimeoutException  */ ;/**  * Waits until an error has been found or until the timeout has been exceeded.  *  * @param timeout  * @throws TimeoutException  */ public void waitForError(long timeout) throws TimeoutException {     long start = System.currentTimeMillis().     long curTimeout.     while (error == null && (curTimeout = timeout - System.currentTimeMillis() + start) > 0) {         synchronized (errorLock) {             try {                 errorLock.wait(curTimeout).             } catch (InterruptedException e) {             // we got interrupted so check again for the condition             }         }     }     if (error == null) {         throw new TimeoutException("Contender did not see an exception in " + timeout + "ms").     } }
false;public;0;3;;public UUID getLeaderSessionID() {     return leaderSessionID. }
false;public;0;3;;public Throwable getError() {     return error. }
false;public;0;3;;public boolean isLeader() {     return leader. }
false;public;1;14;;@Override public void grantLeadership(UUID leaderSessionID) {     synchronized (lock) {         LOG.debug("Was granted leadership with session ID {}.", leaderSessionID).         this.leaderSessionID = leaderSessionID.         leaderElectionService.confirmLeaderSessionID(leaderSessionID).         leader = true.         lock.notifyAll().     } }
false;public;0;11;;@Override public void revokeLeadership() {     synchronized (lock) {         LOG.debug("Was revoked leadership. Old session ID {}.", leaderSessionID).         leader = false.         leaderSessionID = null.         lock.notifyAll().     } }
false;public;0;4;;@Override public String getAddress() {     return address. }
false;public;1;8;;@Override public void handleError(Exception exception) {     synchronized (errorLock) {         this.error = exception.         errorLock.notifyAll().     } }
