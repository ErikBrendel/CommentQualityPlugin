commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testMapTask() {     final int keyCnt = 100.     final int valCnt = 20.     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     setOutput(this.output).     final FlatMapDriver<Record, Record> testDriver = new FlatMapDriver<>().     try {         testDriver(testDriver, MockMapStub.class).     } catch (Exception e) {         LOG.debug("Exception while running the test driver.", e).         Assert.fail("Invoke method caused exception.").     }     Assert.assertEquals("Wrong result set size.", keyCnt * valCnt, this.output.getNumberOfRecords()). }
false;public;0;19;;@Test public void testFailingMapTask() {     final int keyCnt = 100.     final int valCnt = 20.     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     setOutput(new DiscardingOutputCollector<Record>()).     final FlatMapDriver<Record, Record> testTask = new FlatMapDriver<>().     try {         testDriver(testTask, MockFailingMapStub.class).         Assert.fail("Function exception was not forwarded.").     } catch (ExpectedTestException e) {     // good!     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Exception in test.").     } }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockMapStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;34;;@Test public void testCancelMapTask() {     addInput(new InfiniteInputIterator()).     setOutput(new DiscardingOutputCollector<Record>()).     final FlatMapDriver<Record, Record> testTask = new FlatMapDriver<>().     final AtomicBoolean success = new AtomicBoolean(false).     final Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockMapStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(1, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     }     Assert.assertTrue("Test threw an exception even though it was properly canceled.", success.get()). }
false;public;2;4;;@Override public void flatMap(Record record, Collector<Record> out) throws Exception {     out.collect(record). }
false;public;2;7;;@Override public void flatMap(Record record, Collector<Record> out) throws Exception {     if (++this.cnt >= 10) {         throw new ExpectedTestException().     }     out.collect(record). }
