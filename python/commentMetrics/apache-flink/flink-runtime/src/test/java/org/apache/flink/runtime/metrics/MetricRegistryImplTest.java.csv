commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testIsShutdown() throws Exception {     MetricRegistryImpl metricRegistry = new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration()).     Assert.assertFalse(metricRegistry.isShutdown()).     metricRegistry.shutdown().get().     Assert.assertTrue(metricRegistry.isShutdown()). }
false;public;1;4;;@Override public void open(MetricConfig config) {     wasOpened = true. }
true;public;0;18;/**  * Verifies that multiple reporters are instantiated correctly.  */ ;/**  * Verifies that multiple reporters are instantiated correctly.  */ @Test public void testMultipleReporterInstantiation() throws Exception {     Configuration config = new Configuration().     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter11.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter12.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test3." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter13.class.getName()).     MetricRegistryImpl metricRegistry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config)).     assertTrue(metricRegistry.getReporters().size() == 3).     Assert.assertTrue(TestReporter11.wasOpened).     Assert.assertTrue(TestReporter12.wasOpened).     Assert.assertTrue(TestReporter13.wasOpened).     metricRegistry.shutdown().get(). }
false;public;1;4;;@Override public void open(MetricConfig config) {     wasOpened = true. }
false;public;1;4;;@Override public void open(MetricConfig config) {     wasOpened = true. }
false;public;1;4;;@Override public void open(MetricConfig config) {     wasOpened = true. }
false;public;1;4;;@Override public void open(MetricConfig config) {     mc = config. }
true;public;0;34;/**  * Verifies that reporters implementing the Scheduled interface are regularly called to report the metrics.  */ ;/**  * Verifies that reporters implementing the Scheduled interface are regularly called to report the metrics.  */ @Test public void testReporterScheduling() throws Exception {     Configuration config = new Configuration().     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter3.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.arg1", "hello").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "50 MILLISECONDS").     MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config)).     long start = System.currentTimeMillis().     // only start counting from now on     TestReporter3.reportCount = 0.     for (int x = 0. x < 10. x++) {         Thread.sleep(100).         int reportCount = TestReporter3.reportCount.         long curT = System.currentTimeMillis().         /**          * Within a given time-frame T only T/500 reports may be triggered due to the interval between reports.          * This value however does not not take the first triggered report into account (=> +1).          * Furthermore we have to account for the mis-alignment between reports being triggered and our time          * measurement (=> +1). for T=200 a total of 4-6 reports may have been          * triggered depending on whether the end of the interval for the first reports ends before          * or after T=50.          */         long maxAllowedReports = (curT - start) / 50 + 2.         Assert.assertTrue("Too many reports were triggered.", maxAllowedReports >= reportCount).     }     Assert.assertTrue("No report was triggered.", TestReporter3.reportCount > 0).     registry.shutdown().get(). }
false;public;0;4;;@Override public void report() {     reportCount++. }
true;public;0;27;/**  * Verifies that reporters are notified of added/removed metrics.  */ ;/**  * Verifies that reporters are notified of added/removed metrics.  */ @Test public void testReporterNotifications() throws Exception {     Configuration config = new Configuration().     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter6.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter7.class.getName()).     MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config)).     TaskManagerMetricGroup root = new TaskManagerMetricGroup(registry, "host", "id").     root.counter("rootCounter").     assertTrue(TestReporter6.addedMetric instanceof Counter).     assertEquals("rootCounter", TestReporter6.addedMetricName).     assertTrue(TestReporter7.addedMetric instanceof Counter).     assertEquals("rootCounter", TestReporter7.addedMetricName).     root.close().     assertTrue(TestReporter6.removedMetric instanceof Counter).     assertEquals("rootCounter", TestReporter6.removedMetricName).     assertTrue(TestReporter7.removedMetric instanceof Counter).     assertEquals("rootCounter", TestReporter7.removedMetricName).     registry.shutdown().get(). }
false;public;3;5;;@Override public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group) {     addedMetric = metric.     addedMetricName = metricName. }
false;public;3;5;;@Override public void notifyOfRemovedMetric(Metric metric, String metricName, MetricGroup group) {     removedMetric = metric.     removedMetricName = metricName. }
false;public;3;5;;@Override public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group) {     addedMetric = metric.     addedMetricName = metricName. }
false;public;3;5;;@Override public void notifyOfRemovedMetric(Metric metric, String metricName, MetricGroup group) {     removedMetric = metric.     removedMetricName = metricName. }
true;public;0;16;/**  * Verifies that the scope configuration is properly extracted.  */ ;/**  * Verifies that the scope configuration is properly extracted.  */ @Test public void testScopeConfig() {     Configuration config = new Configuration().     config.setString(MetricOptions.SCOPE_NAMING_TM, "A").     config.setString(MetricOptions.SCOPE_NAMING_TM_JOB, "B").     config.setString(MetricOptions.SCOPE_NAMING_TASK, "C").     config.setString(MetricOptions.SCOPE_NAMING_OPERATOR, "D").     ScopeFormats scopeConfig = ScopeFormats.fromConfig(config).     assertEquals("A", scopeConfig.getTaskManagerFormat().format()).     assertEquals("B", scopeConfig.getTaskManagerJobFormat().format()).     assertEquals("C", scopeConfig.getTaskFormat().format()).     assertEquals("D", scopeConfig.getOperatorFormat().format()). }
false;public;0;13;;@Test public void testConfigurableDelimiter() throws Exception {     Configuration config = new Configuration().     config.setString(MetricOptions.SCOPE_DELIMITER, "_").     config.setString(MetricOptions.SCOPE_NAMING_TM, "A.B.C.D.E").     MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config)).     TaskManagerMetricGroup tmGroup = new TaskManagerMetricGroup(registry, "host", "id").     assertEquals("A_B_C_D_E_name", tmGroup.getMetricIdentifier("name")).     registry.shutdown().get(). }
false;public;0;21;;@Test public void testConfigurableDelimiterForReporters() throws Exception {     Configuration config = new Configuration().     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, "_").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, "-").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test3." + ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, "AA").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test3." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter.class.getName()).     MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config)).     assertEquals(GLOBAL_DEFAULT_DELIMITER, registry.getDelimiter()).     assertEquals('_', registry.getDelimiter(0)).     assertEquals('-', registry.getDelimiter(1)).     assertEquals(GLOBAL_DEFAULT_DELIMITER, registry.getDelimiter(2)).     assertEquals(GLOBAL_DEFAULT_DELIMITER, registry.getDelimiter(3)).     assertEquals(GLOBAL_DEFAULT_DELIMITER, registry.getDelimiter(-1)).     registry.shutdown().get(). }
false;public;0;26;;@Test public void testConfigurableDelimiterForReportersInGroup() throws Exception {     Configuration config = new Configuration().     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, "_").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter8.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, "-").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter8.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test3." + ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, "AA").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test3." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter8.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test4." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter8.class.getName()).     config.setString(MetricOptions.SCOPE_NAMING_TM, "A.B").     MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config)).     List<MetricReporter> reporters = registry.getReporters().     // test1  reporter     ((TestReporter8) reporters.get(0)).expectedDelimiter = '_'.     // test2 reporter     ((TestReporter8) reporters.get(1)).expectedDelimiter = '-'.     // test3 reporter, because 'AA' - not correct delimiter     ((TestReporter8) reporters.get(2)).expectedDelimiter = GLOBAL_DEFAULT_DELIMITER.     // for test4 reporter use global delimiter     ((TestReporter8) reporters.get(3)).expectedDelimiter = GLOBAL_DEFAULT_DELIMITER.     TaskManagerMetricGroup group = new TaskManagerMetricGroup(registry, "host", "id").     group.counter("C").     group.close().     registry.shutdown().get().     assertEquals(4, TestReporter8.numCorrectDelimitersForRegister).     assertEquals(4, TestReporter8.numCorrectDelimitersForUnregister). }
true;public;0;22;/**  * Tests that the query actor will be stopped when the MetricRegistry is shut down.  */ ;/**  * Tests that the query actor will be stopped when the MetricRegistry is shut down.  */ @Test public void testQueryActorShutdown() throws Exception {     final FiniteDuration timeout = new FiniteDuration(10L, TimeUnit.SECONDS).     MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration()).     final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem().     registry.startQueryService(actorSystem, null).     ActorRef queryServiceActor = registry.getQueryService().     registry.shutdown().get().     try {         Await.result(actorSystem.actorSelection(queryServiceActor.path()).resolveOne(timeout), timeout).         fail("The query actor should be terminated resulting in a ActorNotFound exception.").     } catch (ActorNotFound e) {     // we expect the query actor to be shut down     } }
false;public;3;7;;@Override public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group) {     String expectedMetric = "A" + expectedDelimiter + "B" + expectedDelimiter + "C".     assertEquals(expectedMetric, group.getMetricIdentifier(metricName, this)).     assertEquals(expectedMetric, group.getMetricIdentifier(metricName)).     numCorrectDelimitersForRegister++. }
false;public;3;7;;@Override public void notifyOfRemovedMetric(Metric metric, String metricName, MetricGroup group) {     String expectedMetric = "A" + expectedDelimiter + "B" + expectedDelimiter + "C".     assertEquals(expectedMetric, group.getMetricIdentifier(metricName, this)).     assertEquals(expectedMetric, group.getMetricIdentifier(metricName)).     numCorrectDelimitersForUnregister++. }
false;public;0;22;;@Test public void testExceptionIsolation() throws Exception {     Configuration config = new Configuration().     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, FailingReporter.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter7.class.getName()).     MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config)).     Counter metric = new SimpleCounter().     registry.register(metric, "counter", new MetricGroupTest.DummyAbstractMetricGroup(registry)).     assertEquals(metric, TestReporter7.addedMetric).     assertEquals("counter", TestReporter7.addedMetricName).     registry.unregister(metric, "counter", new MetricGroupTest.DummyAbstractMetricGroup(registry)).     assertEquals(metric, TestReporter7.removedMetric).     assertEquals("counter", TestReporter7.removedMetricName).     registry.shutdown().get(). }
false;public;3;4;;@Override public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group) {     throw new RuntimeException(). }
false;public;3;4;;@Override public void notifyOfRemovedMetric(Metric metric, String metricName, MetricGroup group) {     throw new RuntimeException(). }
