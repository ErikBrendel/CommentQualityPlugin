commented;modifiers;parameterAmount;loc;comment;code
false;public;0;68;;@Test public void testConstraintsAfterRestart() throws Exception {     final long timeout = 5000L.     // setting up     testingSlotProvider.addTaskManager(NUM_TASKS).     JobVertex groupVertex = ExecutionGraphTestUtils.createNoOpVertex(NUM_TASKS).     JobVertex groupVertex2 = ExecutionGraphTestUtils.createNoOpVertex(NUM_TASKS).     SlotSharingGroup sharingGroup = new SlotSharingGroup().     groupVertex.setSlotSharingGroup(sharingGroup).     groupVertex2.setSlotSharingGroup(sharingGroup).     groupVertex.setStrictlyCoLocatedWith(groupVertex2).     // initiate and schedule job     final ExecutionGraph eg = ExecutionGraphTestUtils.createSimpleTestGraph(new JobID(), testingSlotProvider, new TestRestartStrategy(1, false), groupVertex, groupVertex2).     // enable the queued scheduling for the slot pool     eg.setQueuedSchedulingAllowed(true).     eg.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread()).     assertEquals(JobStatus.CREATED, eg.getState()).     eg.scheduleForExecution().     Predicate<AccessExecution> isDeploying = ExecutionGraphTestUtils.isInExecutionState(ExecutionState.DEPLOYING).     ExecutionGraphTestUtils.waitForAllExecutionsPredicate(eg, isDeploying, timeout).     assertEquals(JobStatus.RUNNING, eg.getState()).     // sanity checks     validateConstraints(eg).     eg.getAllExecutionVertices().iterator().next().fail(new FlinkException("Test exception")).     assertEquals(JobStatus.FAILING, eg.getState()).     for (ExecutionVertex vertex : eg.getAllExecutionVertices()) {         vertex.getCurrentExecutionAttempt().completeCancelling().     }     // wait until we have restarted     ExecutionGraphTestUtils.waitUntilJobStatus(eg, JobStatus.RUNNING, timeout).     ExecutionGraphTestUtils.waitForAllExecutionsPredicate(eg, isDeploying, timeout).     // checking execution vertex properties     validateConstraints(eg).     ExecutionGraphTestUtils.finishAllVertices(eg).     assertThat(eg.getState(), is(FINISHED)). }
false;private;1;11;;private void validateConstraints(ExecutionGraph eg) {     ExecutionJobVertex[] tasks = eg.getAllVertices().values().toArray(new ExecutionJobVertex[2]).     for (int i = 0. i < NUM_TASKS. i++) {         CoLocationConstraint constr1 = tasks[0].getTaskVertices()[i].getLocationConstraint().         CoLocationConstraint constr2 = tasks[1].getTaskVertices()[i].getLocationConstraint().         assertThat(constr1.isAssigned(), is(true)).         assertThat(constr1.getLocation(), equalTo(constr2.getLocation())).     } }
