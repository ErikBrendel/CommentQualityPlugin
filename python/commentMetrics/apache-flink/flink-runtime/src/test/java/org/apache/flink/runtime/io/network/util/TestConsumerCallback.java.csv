commented;modifiers;parameterAmount;loc;comment;code
false;;1;1;;void onBuffer(Buffer buffer).
false;;1;1;;void onEvent(AbstractEvent event).
false;public;1;4;;@Override public void onBuffer(Buffer buffer) {     numberOfReadBuffers.incrementAndGet(). }
false;public;1;4;;@Override public void onEvent(AbstractEvent event) {     numberOfReadEvents.incrementAndGet(). }
true;public;0;3;/**  * Returns the number of read buffers.  */ ;/**  * Returns the number of read buffers.  */ public int getNumberOfReadBuffers() {     return numberOfReadBuffers.get(). }
true;public;0;3;/**  * Returns the number of read events.  */ ;/**  * Returns the number of read events.  */ public int getNumberOfReadEvents() {     return numberOfReadEvents.get(). }
false;public;1;6;;@Override public void onBuffer(Buffer buffer) {     super.onBuffer(buffer).     buffer.recycleBuffer(). }
false;public;1;4;;@Override public void onEvent(AbstractEvent event) {     super.onEvent(event). }
false;public;1;14;;@Override public void onBuffer(Buffer buffer) {     final MemorySegment segment = buffer.getMemorySegment().     int expected = getNumberOfReadBuffers() * (segment.size() / 4).     for (int i = 0. i < segment.size(). i += 4) {         assertEquals(expected, segment.getInt(i)).         expected++.     }     super.onBuffer(buffer). }
false;public;1;4;;@Override public void onEvent(AbstractEvent event) {     super.onEvent(event). }
