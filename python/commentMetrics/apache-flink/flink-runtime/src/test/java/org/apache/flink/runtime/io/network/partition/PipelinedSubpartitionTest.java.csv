# id;timestamp;commentText;codeText;commentWords;codeWords
PipelinedSubpartitionTest -> @Test 	public void testUnfinishedBufferBehindFinished() throws Exception;1519834372;Normally moreAvailable flag from InputChannel should ignore non finished BufferConsumers, otherwise we would_busy loop on the unfinished BufferConsumers.;@Test_	public void testUnfinishedBufferBehindFinished() throws Exception {_		final ResultSubpartition subpartition = createSubpartition()__		AwaitableBufferAvailablityListener availablityListener = new AwaitableBufferAvailablityListener()__		ResultSubpartitionView readView = subpartition.createReadView(availablityListener)___		try {_			subpartition.add(createFilledBufferConsumer(1025))_ _			subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer())_ __			assertNextBuffer(readView, 1025, false, 1)__		} finally {_			subpartition.release()__		}_	};normally,more,available,flag,from,input,channel,should,ignore,non,finished,buffer,consumers,otherwise,we,would,busy,loop,on,the,unfinished,buffer,consumers;test,public,void,test,unfinished,buffer,behind,finished,throws,exception,final,result,subpartition,subpartition,create,subpartition,awaitable,buffer,availablity,listener,availablity,listener,new,awaitable,buffer,availablity,listener,result,subpartition,view,read,view,subpartition,create,read,view,availablity,listener,try,subpartition,add,create,filled,buffer,consumer,1025,subpartition,add,create,filled,buffer,builder,1024,create,buffer,consumer,assert,next,buffer,read,view,1025,false,1,finally,subpartition,release
PipelinedSubpartitionTest -> @Test 	public void testUnfinishedBufferBehindFinished() throws Exception;1520610580;Normally moreAvailable flag from InputChannel should ignore non finished BufferConsumers, otherwise we would_busy loop on the unfinished BufferConsumers.;@Test_	public void testUnfinishedBufferBehindFinished() throws Exception {_		final ResultSubpartition subpartition = createSubpartition()__		AwaitableBufferAvailablityListener availablityListener = new AwaitableBufferAvailablityListener()__		ResultSubpartitionView readView = subpartition.createReadView(availablityListener)___		try {_			subpartition.add(createFilledBufferConsumer(1025))_ _			subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer())_ __			assertNextBuffer(readView, 1025, false, 1, false, true)__		} finally {_			subpartition.release()__		}_	};normally,more,available,flag,from,input,channel,should,ignore,non,finished,buffer,consumers,otherwise,we,would,busy,loop,on,the,unfinished,buffer,consumers;test,public,void,test,unfinished,buffer,behind,finished,throws,exception,final,result,subpartition,subpartition,create,subpartition,awaitable,buffer,availablity,listener,availablity,listener,new,awaitable,buffer,availablity,listener,result,subpartition,view,read,view,subpartition,create,read,view,availablity,listener,try,subpartition,add,create,filled,buffer,consumer,1025,subpartition,add,create,filled,buffer,builder,1024,create,buffer,consumer,assert,next,buffer,read,view,1025,false,1,false,true,finally,subpartition,release
PipelinedSubpartitionTest -> @Test 	public void testUnfinishedBufferBehindFinished() throws Exception;1537385496;Normally moreAvailable flag from InputChannel should ignore non finished BufferConsumers, otherwise we would_busy loop on the unfinished BufferConsumers.;@Test_	public void testUnfinishedBufferBehindFinished() throws Exception {_		final ResultSubpartition subpartition = createSubpartition()__		AwaitableBufferAvailablityListener availablityListener = new AwaitableBufferAvailablityListener()__		ResultSubpartitionView readView = subpartition.createReadView(availablityListener)___		try {_			subpartition.add(createFilledBufferConsumer(1025))_ _			subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer())_ __			assertNextBuffer(readView, 1025, false, 1, false, true)__		} finally {_			subpartition.release()__		}_	};normally,more,available,flag,from,input,channel,should,ignore,non,finished,buffer,consumers,otherwise,we,would,busy,loop,on,the,unfinished,buffer,consumers;test,public,void,test,unfinished,buffer,behind,finished,throws,exception,final,result,subpartition,subpartition,create,subpartition,awaitable,buffer,availablity,listener,availablity,listener,new,awaitable,buffer,availablity,listener,result,subpartition,view,read,view,subpartition,create,read,view,availablity,listener,try,subpartition,add,create,filled,buffer,consumer,1025,subpartition,add,create,filled,buffer,builder,1024,create,buffer,consumer,assert,next,buffer,read,view,1025,false,1,false,true,finally,subpartition,release
PipelinedSubpartitionTest -> @Test 	public void testUnfinishedBufferBehindFinished() throws Exception;1537385496;Normally moreAvailable flag from InputChannel should ignore non finished BufferConsumers, otherwise we would_busy loop on the unfinished BufferConsumers.;@Test_	public void testUnfinishedBufferBehindFinished() throws Exception {_		final ResultSubpartition subpartition = createSubpartition()__		AwaitableBufferAvailablityListener availablityListener = new AwaitableBufferAvailablityListener()__		ResultSubpartitionView readView = subpartition.createReadView(availablityListener)___		try {_			subpartition.add(createFilledBufferConsumer(1025))_ _			subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer())_ __			assertNextBuffer(readView, 1025, false, 1, false, true)__		} finally {_			subpartition.release()__		}_	};normally,more,available,flag,from,input,channel,should,ignore,non,finished,buffer,consumers,otherwise,we,would,busy,loop,on,the,unfinished,buffer,consumers;test,public,void,test,unfinished,buffer,behind,finished,throws,exception,final,result,subpartition,subpartition,create,subpartition,awaitable,buffer,availablity,listener,availablity,listener,new,awaitable,buffer,availablity,listener,result,subpartition,view,read,view,subpartition,create,read,view,availablity,listener,try,subpartition,add,create,filled,buffer,consumer,1025,subpartition,add,create,filled,buffer,builder,1024,create,buffer,consumer,assert,next,buffer,read,view,1025,false,1,false,true,finally,subpartition,release
PipelinedSubpartitionTest -> @Test 	public void testUnfinishedBufferBehindFinished() throws Exception;1537385496;Normally moreAvailable flag from InputChannel should ignore non finished BufferConsumers, otherwise we would_busy loop on the unfinished BufferConsumers.;@Test_	public void testUnfinishedBufferBehindFinished() throws Exception {_		final ResultSubpartition subpartition = createSubpartition()__		AwaitableBufferAvailablityListener availablityListener = new AwaitableBufferAvailablityListener()__		ResultSubpartitionView readView = subpartition.createReadView(availablityListener)___		try {_			subpartition.add(createFilledBufferConsumer(1025))_ _			subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer())_ __			assertThat(availablityListener.getNumNotifications(), greaterThan(0L))__			assertNextBuffer(readView, 1025, false, 1, false, true)__			_			assertNextBuffer(readView, 1024, false, 1, false, false)__			assertNoNextBuffer(readView)__		} finally {_			subpartition.release()__		}_	};normally,more,available,flag,from,input,channel,should,ignore,non,finished,buffer,consumers,otherwise,we,would,busy,loop,on,the,unfinished,buffer,consumers;test,public,void,test,unfinished,buffer,behind,finished,throws,exception,final,result,subpartition,subpartition,create,subpartition,awaitable,buffer,availablity,listener,availablity,listener,new,awaitable,buffer,availablity,listener,result,subpartition,view,read,view,subpartition,create,read,view,availablity,listener,try,subpartition,add,create,filled,buffer,consumer,1025,subpartition,add,create,filled,buffer,builder,1024,create,buffer,consumer,assert,that,availablity,listener,get,num,notifications,greater,than,0l,assert,next,buffer,read,view,1025,false,1,false,true,assert,next,buffer,read,view,1024,false,1,false,false,assert,no,next,buffer,read,view,finally,subpartition,release
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1515510714;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		Buffer buffer1 = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		Buffer buffer2 = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(4096),_			FreeingBufferRecycler.INSTANCE)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(numBuffers -> {})__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.recycle()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.recycle()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(2 * 4096, partition.getTotalNumberOfBytes())__	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,buffer1,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,buffer,buffer2,new,buffer,memory,segment,factory,allocate,unpooled,segment,4096,freeing,buffer,recycler,instance,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,num,buffers,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,recycle,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,recycle,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,2,4096,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1516285456;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		Buffer buffer1 = createBuffer(4096)__		Buffer buffer2 = createBuffer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(numBuffers -> {})__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.recycle()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.recycle()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(2 * 4096, partition.getTotalNumberOfBytes())__	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,buffer1,create,buffer,4096,buffer,buffer2,create,buffer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,num,buffers,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,recycle,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,recycle,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,2,4096,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1516285878;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		Buffer buffer1 = createBuffer(4096)__		Buffer buffer2 = createBuffer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(numBuffers -> {})__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.recycleBuffer()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.recycleBuffer()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(2 * 4096, partition.getTotalNumberOfBytes())__	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,buffer1,create,buffer,4096,buffer,buffer2,create,buffer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,num,buffers,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,recycle,buffer,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,recycle,buffer,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,2,4096,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1518785736;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		Buffer buffer1 = createBuffer(4096)__		Buffer buffer2 = createBuffer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(numBuffers -> {})__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.recycleBuffer()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.recycleBuffer()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(2 * 4096, partition.getTotalNumberOfBytes())__	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,buffer1,create,buffer,4096,buffer,buffer2,create,buffer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,num,buffers,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,recycle,buffer,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,recycle,buffer,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,2,4096,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1519039281;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		Buffer buffer1 = createBuffer(4096)__		Buffer buffer2 = createBuffer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(numBuffers -> {})__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.recycleBuffer()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.recycleBuffer()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(2 * 4096, partition.getTotalNumberOfBytes())__	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,buffer1,create,buffer,4096,buffer,buffer2,create,buffer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,num,buffers,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,recycle,buffer,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,recycle,buffer,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,2,4096,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1519039287;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(4096)__		BufferConsumer buffer2 = createFilledBufferConsumer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(numBuffers -> {})__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		_	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,4096,buffer,consumer,buffer2,create,filled,buffer,consumer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,num,buffers,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1519039301;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(4096)__		BufferConsumer buffer2 = createFilledBufferConsumer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		_	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,4096,buffer,consumer,buffer2,create,filled,buffer,consumer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,new,no,op,buffer,availablity,listener,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1519049124;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(4096)__		BufferConsumer buffer2 = createFilledBufferConsumer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		_	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,4096,buffer,consumer,buffer2,create,filled,buffer,consumer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,new,no,op,buffer,availablity,listener,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1519718833;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(4096)__		BufferConsumer buffer2 = createFilledBufferConsumer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())_ _	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,4096,buffer,consumer,buffer2,create,filled,buffer,consumer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,new,no,op,buffer,availablity,listener,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1519834372;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(4096)__		BufferConsumer buffer2 = createFilledBufferConsumer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())_ _	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,4096,buffer,consumer,buffer2,create,filled,buffer,consumer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,new,no,op,buffer,availablity,listener,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1520610580;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(4096)__		BufferConsumer buffer2 = createFilledBufferConsumer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())_ _	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,4096,buffer,consumer,buffer2,create,filled,buffer,consumer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,new,no,op,buffer,availablity,listener,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1537385496;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(4096)__		BufferConsumer buffer2 = createFilledBufferConsumer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())_ _	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,4096,buffer,consumer,buffer2,create,filled,buffer,consumer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,new,no,op,buffer,availablity,listener,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1537385496;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(4096)__		BufferConsumer buffer2 = createFilledBufferConsumer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())_ _	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,4096,buffer,consumer,buffer2,create,filled,buffer,consumer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,new,no,op,buffer,availablity,listener,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1537385496;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(4096)__		BufferConsumer buffer2 = createFilledBufferConsumer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())_ _	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,4096,buffer,consumer,buffer2,create,filled,buffer,consumer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,new,no,op,buffer,availablity,listener,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1537385496;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(4096)__		BufferConsumer buffer2 = createFilledBufferConsumer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())_ _	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,4096,buffer,consumer,buffer2,create,filled,buffer,consumer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,new,no,op,buffer,availablity,listener,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1547722029;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(4096)__		BufferConsumer buffer2 = createFilledBufferConsumer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())_ _	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,4096,buffer,consumer,buffer2,create,filled,buffer,consumer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,new,no,op,buffer,availablity,listener,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> private void testCleanupReleasedPartition(boolean createView) throws Exception;1550757917;Tests cleanup of {@link PipelinedSubpartition#release()}.__@param createView_whether the partition should have a view attached to it (<tt>true</tt>) or not (<tt>false</tt>);private void testCleanupReleasedPartition(boolean createView) throws Exception {_		PipelinedSubpartition partition = createSubpartition()___		BufferConsumer buffer1 = createFilledBufferConsumer(4096)__		BufferConsumer buffer2 = createFilledBufferConsumer(4096)__		boolean buffer1Recycled__		boolean buffer2Recycled__		try {_			partition.add(buffer1)__			partition.add(buffer2)__			_			ResultSubpartitionView view = null__			if (createView) {_				view = partition.createReadView(new NoOpBufferAvailablityListener())__			}__			partition.release()___			assertTrue(partition.isReleased())__			if (createView) {_				assertTrue(view.isReleased())__			}_			assertTrue(buffer1.isRecycled())__		} finally {_			buffer1Recycled = buffer1.isRecycled()__			if (!buffer1Recycled) {_				buffer1.close()__			}_			buffer2Recycled = buffer2.isRecycled()__			if (!buffer2Recycled) {_				buffer2.close()__			}_		}_		if (!buffer1Recycled) {_			Assert.fail("buffer 1 not recycled")__		}_		if (!buffer2Recycled) {_			Assert.fail("buffer 2 not recycled")__		}_		assertEquals(2, partition.getTotalNumberOfBuffers())__		assertEquals(0, partition.getTotalNumberOfBytes())_ _	};tests,cleanup,of,link,pipelined,subpartition,release,param,create,view,whether,the,partition,should,have,a,view,attached,to,it,tt,true,tt,or,not,tt,false,tt;private,void,test,cleanup,released,partition,boolean,create,view,throws,exception,pipelined,subpartition,partition,create,subpartition,buffer,consumer,buffer1,create,filled,buffer,consumer,4096,buffer,consumer,buffer2,create,filled,buffer,consumer,4096,boolean,buffer1recycled,boolean,buffer2recycled,try,partition,add,buffer1,partition,add,buffer2,result,subpartition,view,view,null,if,create,view,view,partition,create,read,view,new,no,op,buffer,availablity,listener,partition,release,assert,true,partition,is,released,if,create,view,assert,true,view,is,released,assert,true,buffer1,is,recycled,finally,buffer1recycled,buffer1,is,recycled,if,buffer1recycled,buffer1,close,buffer2recycled,buffer2,is,recycled,if,buffer2recycled,buffer2,close,if,buffer1recycled,assert,fail,buffer,1,not,recycled,if,buffer2recycled,assert,fail,buffer,2,not,recycled,assert,equals,2,partition,get,total,number,of,buffers,assert,equals,0,partition,get,total,number,of,bytes
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent();1537385496;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_			subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent();1547722029;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_			subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent();1550757917;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_			subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1481624808;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1481633944;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1493724918;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1515160792;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1515510677;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1515510714;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1516285456;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1516285878;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1518785736;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1519039281;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1519039287;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1519039301;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1519049124;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1519718833;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1519834372;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1520610580;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1537385496;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1537385496;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testIsReleasedChecksParent() throws Exception;1537385496;Verifies that the isReleased() check of the view checks the parent_subpartition.;@Test_	public void testIsReleasedChecksParent() throws Exception {_		PipelinedSubpartition subpartition = mock(PipelinedSubpartition.class)___		PipelinedSubpartitionView reader = new PipelinedSubpartitionView(_				subpartition, mock(BufferAvailabilityListener.class))___		assertFalse(reader.isReleased())__		verify(subpartition, times(1)).isReleased()___		when(subpartition.isReleased()).thenReturn(true)__		assertTrue(reader.isReleased())__		verify(subpartition, times(2)).isReleased()__	};verifies,that,the,is,released,check,of,the,view,checks,the,parent,subpartition;test,public,void,test,is,released,checks,parent,throws,exception,pipelined,subpartition,subpartition,mock,pipelined,subpartition,class,pipelined,subpartition,view,reader,new,pipelined,subpartition,view,subpartition,mock,buffer,availability,listener,class,assert,false,reader,is,released,verify,subpartition,times,1,is,released,when,subpartition,is,released,then,return,true,assert,true,reader,is,released,verify,subpartition,times,2,is,released
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1515510714;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1516285456;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1516285878;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1518785736;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1519039281;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1519039287;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1519039301;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1519049124;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1519718833;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1519834372;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1520610580;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1537385496;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1537385496;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1537385496;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1537385496;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1547722029;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionNoView() throws Exception;1550757917;Tests cleanup of {@link PipelinedSubpartition#release()} with no read view attached.;@Test_	public void testCleanupReleasedPartitionNoView() throws Exception {_		testCleanupReleasedPartition(false)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,no,read,view,attached;test,public,void,test,cleanup,released,partition,no,view,throws,exception,test,cleanup,released,partition,false
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1515510714;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1516285456;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1516285878;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1518785736;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1519039281;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1519039287;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1519039301;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1519049124;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1519718833;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1519834372;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1520610580;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1537385496;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1537385496;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1537385496;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1537385496;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1547722029;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testCleanupReleasedPartitionWithView() throws Exception;1550757917;Tests cleanup of {@link PipelinedSubpartition#release()} with a read view attached.;@Test_	public void testCleanupReleasedPartitionWithView() throws Exception {_		testCleanupReleasedPartition(true)__	};tests,cleanup,of,link,pipelined,subpartition,release,with,a,read,view,attached;test,public,void,test,cleanup,released,partition,with,view,throws,exception,test,cleanup,released,partition,true
PipelinedSubpartitionTest -> @Test 	public void testFlushWithUnfinishedBufferBehindFinished() throws Exception;1519834372;After flush call unfinished BufferConsumers should be reported as available, otherwise we might not flush some_of the data.;@Test_	public void testFlushWithUnfinishedBufferBehindFinished() throws Exception {_		final ResultSubpartition subpartition = createSubpartition()__		AwaitableBufferAvailablityListener availablityListener = new AwaitableBufferAvailablityListener()__		ResultSubpartitionView readView = subpartition.createReadView(availablityListener)___		try {_			subpartition.add(createFilledBufferConsumer(1025))_ _			subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer())_ _			subpartition.flush()___			assertNextBuffer(readView, 1025, true, 1)__			assertNextBuffer(readView, 1024, false, 1)__		} finally {_			subpartition.release()__		}_	};after,flush,call,unfinished,buffer,consumers,should,be,reported,as,available,otherwise,we,might,not,flush,some,of,the,data;test,public,void,test,flush,with,unfinished,buffer,behind,finished,throws,exception,final,result,subpartition,subpartition,create,subpartition,awaitable,buffer,availablity,listener,availablity,listener,new,awaitable,buffer,availablity,listener,result,subpartition,view,read,view,subpartition,create,read,view,availablity,listener,try,subpartition,add,create,filled,buffer,consumer,1025,subpartition,add,create,filled,buffer,builder,1024,create,buffer,consumer,subpartition,flush,assert,next,buffer,read,view,1025,true,1,assert,next,buffer,read,view,1024,false,1,finally,subpartition,release
PipelinedSubpartitionTest -> @Test 	public void testFlushWithUnfinishedBufferBehindFinished() throws Exception;1520610580;After flush call unfinished BufferConsumers should be reported as available, otherwise we might not flush some_of the data.;@Test_	public void testFlushWithUnfinishedBufferBehindFinished() throws Exception {_		final ResultSubpartition subpartition = createSubpartition()__		AwaitableBufferAvailablityListener availablityListener = new AwaitableBufferAvailablityListener()__		ResultSubpartitionView readView = subpartition.createReadView(availablityListener)___		try {_			subpartition.add(createFilledBufferConsumer(1025))_ _			subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer())_ _			subpartition.flush()___			assertNextBuffer(readView, 1025, true, 1, false, true)__			assertNextBuffer(readView, 1024, false, 1, false, false)__		} finally {_			subpartition.release()__		}_	};after,flush,call,unfinished,buffer,consumers,should,be,reported,as,available,otherwise,we,might,not,flush,some,of,the,data;test,public,void,test,flush,with,unfinished,buffer,behind,finished,throws,exception,final,result,subpartition,subpartition,create,subpartition,awaitable,buffer,availablity,listener,availablity,listener,new,awaitable,buffer,availablity,listener,result,subpartition,view,read,view,subpartition,create,read,view,availablity,listener,try,subpartition,add,create,filled,buffer,consumer,1025,subpartition,add,create,filled,buffer,builder,1024,create,buffer,consumer,subpartition,flush,assert,next,buffer,read,view,1025,true,1,false,true,assert,next,buffer,read,view,1024,false,1,false,false,finally,subpartition,release
PipelinedSubpartitionTest -> @Test 	public void testFlushWithUnfinishedBufferBehindFinished() throws Exception;1537385496;After flush call unfinished BufferConsumers should be reported as available, otherwise we might not flush some_of the data.;@Test_	public void testFlushWithUnfinishedBufferBehindFinished() throws Exception {_		final ResultSubpartition subpartition = createSubpartition()__		AwaitableBufferAvailablityListener availablityListener = new AwaitableBufferAvailablityListener()__		ResultSubpartitionView readView = subpartition.createReadView(availablityListener)___		try {_			subpartition.add(createFilledBufferConsumer(1025))_ _			subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer())_ _			subpartition.flush()___			assertNextBuffer(readView, 1025, true, 1, false, true)__			assertNextBuffer(readView, 1024, false, 1, false, false)__		} finally {_			subpartition.release()__		}_	};after,flush,call,unfinished,buffer,consumers,should,be,reported,as,available,otherwise,we,might,not,flush,some,of,the,data;test,public,void,test,flush,with,unfinished,buffer,behind,finished,throws,exception,final,result,subpartition,subpartition,create,subpartition,awaitable,buffer,availablity,listener,availablity,listener,new,awaitable,buffer,availablity,listener,result,subpartition,view,read,view,subpartition,create,read,view,availablity,listener,try,subpartition,add,create,filled,buffer,consumer,1025,subpartition,add,create,filled,buffer,builder,1024,create,buffer,consumer,subpartition,flush,assert,next,buffer,read,view,1025,true,1,false,true,assert,next,buffer,read,view,1024,false,1,false,false,finally,subpartition,release
PipelinedSubpartitionTest -> @Test 	public void testFlushWithUnfinishedBufferBehindFinished() throws Exception;1537385496;After flush call unfinished BufferConsumers should be reported as available, otherwise we might not flush some_of the data.;@Test_	public void testFlushWithUnfinishedBufferBehindFinished() throws Exception {_		final ResultSubpartition subpartition = createSubpartition()__		AwaitableBufferAvailablityListener availablityListener = new AwaitableBufferAvailablityListener()__		ResultSubpartitionView readView = subpartition.createReadView(availablityListener)___		try {_			subpartition.add(createFilledBufferConsumer(1025))_ _			subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer())_ _			subpartition.flush()___			assertNextBuffer(readView, 1025, true, 1, false, true)__			assertNextBuffer(readView, 1024, false, 1, false, false)__		} finally {_			subpartition.release()__		}_	};after,flush,call,unfinished,buffer,consumers,should,be,reported,as,available,otherwise,we,might,not,flush,some,of,the,data;test,public,void,test,flush,with,unfinished,buffer,behind,finished,throws,exception,final,result,subpartition,subpartition,create,subpartition,awaitable,buffer,availablity,listener,availablity,listener,new,awaitable,buffer,availablity,listener,result,subpartition,view,read,view,subpartition,create,read,view,availablity,listener,try,subpartition,add,create,filled,buffer,consumer,1025,subpartition,add,create,filled,buffer,builder,1024,create,buffer,consumer,subpartition,flush,assert,next,buffer,read,view,1025,true,1,false,true,assert,next,buffer,read,view,1024,false,1,false,false,finally,subpartition,release
PipelinedSubpartitionTest -> @Test 	public void testFlushWithUnfinishedBufferBehindFinished() throws Exception;1537385496;After flush call unfinished BufferConsumers should be reported as available, otherwise we might not flush some_of the data.;@Test_	public void testFlushWithUnfinishedBufferBehindFinished() throws Exception {_		final ResultSubpartition subpartition = createSubpartition()__		AwaitableBufferAvailablityListener availablityListener = new AwaitableBufferAvailablityListener()__		ResultSubpartitionView readView = subpartition.createReadView(availablityListener)___		try {_			subpartition.add(createFilledBufferConsumer(1025))_ _			subpartition.add(createFilledBufferBuilder(1024).createBufferConsumer())_ _			long oldNumNotifications = availablityListener.getNumNotifications()__			subpartition.flush()__			_			assertThat(oldNumNotifications, greaterThan(0L))__			assertEquals(oldNumNotifications, availablityListener.getNumNotifications())___			assertNextBuffer(readView, 1025, true, 1, false, true)__			assertNextBuffer(readView, 1024, false, 1, false, false)__			assertNoNextBuffer(readView)__		} finally {_			subpartition.release()__		}_	};after,flush,call,unfinished,buffer,consumers,should,be,reported,as,available,otherwise,we,might,not,flush,some,of,the,data;test,public,void,test,flush,with,unfinished,buffer,behind,finished,throws,exception,final,result,subpartition,subpartition,create,subpartition,awaitable,buffer,availablity,listener,availablity,listener,new,awaitable,buffer,availablity,listener,result,subpartition,view,read,view,subpartition,create,read,view,availablity,listener,try,subpartition,add,create,filled,buffer,consumer,1025,subpartition,add,create,filled,buffer,builder,1024,create,buffer,consumer,long,old,num,notifications,availablity,listener,get,num,notifications,subpartition,flush,assert,that,old,num,notifications,greater,than,0l,assert,equals,old,num,notifications,availablity,listener,get,num,notifications,assert,next,buffer,read,view,1025,true,1,false,true,assert,next,buffer,read,view,1024,false,1,false,false,assert,no,next,buffer,read,view,finally,subpartition,release
