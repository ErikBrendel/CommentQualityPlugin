# id;timestamp;commentText;codeText;commentWords;codeWords
KvStateLocationTest -> @Test 	public void testRegisterAndLookup() throws Exception;1470753725;Simple test registering/unregistereing state and looking it up again.;@Test_	public void testRegisterAndLookup() throws Exception {_		JobID jobId = new JobID()__		JobVertexID jobVertexId = new JobVertexID()__		int numKeyGroups = 123__		String registrationName = "asdasdasdasd"___		KvStateLocation location = new KvStateLocation(jobId, jobVertexId, numKeyGroups, registrationName)___		KvStateID[] kvStateIds = new KvStateID[numKeyGroups]__		KvStateServerAddress[] serverAddresses = new KvStateServerAddress[numKeyGroups]___		InetAddress host = InetAddress.getLocalHost()___		_		for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_			kvStateIds[keyGroupIndex] = new KvStateID()__			serverAddresses[keyGroupIndex] = new KvStateServerAddress(host, 1024 + keyGroupIndex)___			location.registerKvState(keyGroupIndex, kvStateIds[keyGroupIndex], serverAddresses[keyGroupIndex])__			assertEquals(keyGroupIndex + 1, location.getNumRegisteredKeyGroups())__		}__		_		for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_			assertEquals(kvStateIds[keyGroupIndex], location.getKvStateID(keyGroupIndex))__			assertEquals(serverAddresses[keyGroupIndex], location.getKvStateServerAddress(keyGroupIndex))__		}__		_		for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_			kvStateIds[keyGroupIndex] = new KvStateID()__			serverAddresses[keyGroupIndex] = new KvStateServerAddress(host, 1024 + keyGroupIndex)___			location.registerKvState(keyGroupIndex, kvStateIds[keyGroupIndex], serverAddresses[keyGroupIndex])__			assertEquals(numKeyGroups, location.getNumRegisteredKeyGroups())__		}__		_		for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_			assertEquals(kvStateIds[keyGroupIndex], location.getKvStateID(keyGroupIndex))__			assertEquals(serverAddresses[keyGroupIndex], location.getKvStateServerAddress(keyGroupIndex))__		}__		_		for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_			location.unregisterKvState(keyGroupIndex)__			assertEquals(numKeyGroups - keyGroupIndex - 1, location.getNumRegisteredKeyGroups())__		}__		_		for (int keyGroupIndex = 0_ keyGroupIndex < numKeyGroups_ keyGroupIndex++) {_			assertEquals(null, location.getKvStateID(keyGroupIndex))__			assertEquals(null, location.getKvStateServerAddress(keyGroupIndex))__		}__		assertEquals(0, location.getNumRegisteredKeyGroups())__	};simple,test,registering,unregistereing,state,and,looking,it,up,again;test,public,void,test,register,and,lookup,throws,exception,job,id,job,id,new,job,id,job,vertex,id,job,vertex,id,new,job,vertex,id,int,num,key,groups,123,string,registration,name,asdasdasdasd,kv,state,location,location,new,kv,state,location,job,id,job,vertex,id,num,key,groups,registration,name,kv,state,id,kv,state,ids,new,kv,state,id,num,key,groups,kv,state,server,address,server,addresses,new,kv,state,server,address,num,key,groups,inet,address,host,inet,address,get,local,host,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,kv,state,ids,key,group,index,new,kv,state,id,server,addresses,key,group,index,new,kv,state,server,address,host,1024,key,group,index,location,register,kv,state,key,group,index,kv,state,ids,key,group,index,server,addresses,key,group,index,assert,equals,key,group,index,1,location,get,num,registered,key,groups,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,assert,equals,kv,state,ids,key,group,index,location,get,kv,state,id,key,group,index,assert,equals,server,addresses,key,group,index,location,get,kv,state,server,address,key,group,index,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,kv,state,ids,key,group,index,new,kv,state,id,server,addresses,key,group,index,new,kv,state,server,address,host,1024,key,group,index,location,register,kv,state,key,group,index,kv,state,ids,key,group,index,server,addresses,key,group,index,assert,equals,num,key,groups,location,get,num,registered,key,groups,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,assert,equals,kv,state,ids,key,group,index,location,get,kv,state,id,key,group,index,assert,equals,server,addresses,key,group,index,location,get,kv,state,server,address,key,group,index,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,location,unregister,kv,state,key,group,index,assert,equals,num,key,groups,key,group,index,1,location,get,num,registered,key,groups,for,int,key,group,index,0,key,group,index,num,key,groups,key,group,index,assert,equals,null,location,get,kv,state,id,key,group,index,assert,equals,null,location,get,kv,state,server,address,key,group,index,assert,equals,0,location,get,num,registered,key,groups
KvStateLocationTest -> @Test 	public void testRegisterAndLookup() throws Exception;1474626282;Simple test registering/unregistereing state and looking it up again.;@Test_	public void testRegisterAndLookup() throws Exception {_		JobID jobId = new JobID()__		JobVertexID jobVertexId = new JobVertexID()__		int numKeyGroups = 123__		int numRanges = 10__		int fract = numKeyGroups / numRanges__		int remain = numKeyGroups % numRanges__		List<KeyGroupRange> keyGroupRanges = new ArrayList<>(numRanges)___		int start = 0__		for (int i = 0_ i < numRanges_ ++i) {_			int end = start + fract - 1__			if(remain > 0) {_				--remain__				++end__			}_ 			KeyGroupRange range = new KeyGroupRange(start, end)__			keyGroupRanges.add(range)__			start = end + 1__		}__		System.out.println(keyGroupRanges)___		String registrationName = "asdasdasdasd"___		KvStateLocation location = new KvStateLocation(jobId, jobVertexId, numKeyGroups, registrationName)___		KvStateID[] kvStateIds = new KvStateID[numRanges]__		KvStateServerAddress[] serverAddresses = new KvStateServerAddress[numRanges]___		InetAddress host = InetAddress.getLocalHost()___		_		int registeredCount = 0__		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			kvStateIds[rangeIdx] = new KvStateID()__			serverAddresses[rangeIdx] = new KvStateServerAddress(host, 1024 + rangeIdx)__			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			location.registerKvState(keyGroupRange, kvStateIds[rangeIdx], serverAddresses[rangeIdx])__			registeredCount += keyGroupRange.getNumberOfKeyGroups()__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for(int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(kvStateIds[rangeIdx], location.getKvStateID(keyGroup))__				assertEquals(serverAddresses[rangeIdx], location.getKvStateServerAddress(keyGroup))__			}_		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			kvStateIds[rangeIdx] = new KvStateID()__			serverAddresses[rangeIdx] = new KvStateServerAddress(host, 1024 + rangeIdx)___			location.registerKvState(keyGroupRanges.get(rangeIdx), kvStateIds[rangeIdx], serverAddresses[rangeIdx])__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for(int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(kvStateIds[rangeIdx], location.getKvStateID(keyGroup))__				assertEquals(serverAddresses[rangeIdx], location.getKvStateServerAddress(keyGroup))__			}_		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			location.unregisterKvState(keyGroupRange)__			registeredCount -= keyGroupRange.getNumberOfKeyGroups()__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for(int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(null, location.getKvStateID(keyGroup))__				assertEquals(null, location.getKvStateServerAddress(keyGroup))__			}_		}__		assertEquals(0, location.getNumRegisteredKeyGroups())__	};simple,test,registering,unregistereing,state,and,looking,it,up,again;test,public,void,test,register,and,lookup,throws,exception,job,id,job,id,new,job,id,job,vertex,id,job,vertex,id,new,job,vertex,id,int,num,key,groups,123,int,num,ranges,10,int,fract,num,key,groups,num,ranges,int,remain,num,key,groups,num,ranges,list,key,group,range,key,group,ranges,new,array,list,num,ranges,int,start,0,for,int,i,0,i,num,ranges,i,int,end,start,fract,1,if,remain,0,remain,end,key,group,range,range,new,key,group,range,start,end,key,group,ranges,add,range,start,end,1,system,out,println,key,group,ranges,string,registration,name,asdasdasdasd,kv,state,location,location,new,kv,state,location,job,id,job,vertex,id,num,key,groups,registration,name,kv,state,id,kv,state,ids,new,kv,state,id,num,ranges,kv,state,server,address,server,addresses,new,kv,state,server,address,num,ranges,inet,address,host,inet,address,get,local,host,int,registered,count,0,for,int,range,idx,0,range,idx,num,ranges,range,idx,kv,state,ids,range,idx,new,kv,state,id,server,addresses,range,idx,new,kv,state,server,address,host,1024,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,location,register,kv,state,key,group,range,kv,state,ids,range,idx,server,addresses,range,idx,registered,count,key,group,range,get,number,of,key,groups,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,kv,state,ids,range,idx,location,get,kv,state,id,key,group,assert,equals,server,addresses,range,idx,location,get,kv,state,server,address,key,group,for,int,range,idx,0,range,idx,num,ranges,range,idx,kv,state,ids,range,idx,new,kv,state,id,server,addresses,range,idx,new,kv,state,server,address,host,1024,range,idx,location,register,kv,state,key,group,ranges,get,range,idx,kv,state,ids,range,idx,server,addresses,range,idx,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,kv,state,ids,range,idx,location,get,kv,state,id,key,group,assert,equals,server,addresses,range,idx,location,get,kv,state,server,address,key,group,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,location,unregister,kv,state,key,group,range,registered,count,key,group,range,get,number,of,key,groups,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,null,location,get,kv,state,id,key,group,assert,equals,null,location,get,kv,state,server,address,key,group,assert,equals,0,location,get,num,registered,key,groups
KvStateLocationTest -> @Test 	public void testRegisterAndLookup() throws Exception;1487934918;Simple test registering/unregistereing state and looking it up again.;@Test_	public void testRegisterAndLookup() throws Exception {_		JobID jobId = new JobID()__		JobVertexID jobVertexId = new JobVertexID()__		int numKeyGroups = 123__		int numRanges = 10__		int fract = numKeyGroups / numRanges__		int remain = numKeyGroups % numRanges__		List<KeyGroupRange> keyGroupRanges = new ArrayList<>(numRanges)___		int start = 0__		for (int i = 0_ i < numRanges_ ++i) {_			int end = start + fract - 1__			if(remain > 0) {_				--remain__				++end__			}_ 			KeyGroupRange range = new KeyGroupRange(start, end)__			keyGroupRanges.add(range)__			start = end + 1__		}__		String registrationName = "asdasdasdasd"___		KvStateLocation location = new KvStateLocation(jobId, jobVertexId, numKeyGroups, registrationName)___		KvStateID[] kvStateIds = new KvStateID[numRanges]__		KvStateServerAddress[] serverAddresses = new KvStateServerAddress[numRanges]___		InetAddress host = InetAddress.getLocalHost()___		_		int registeredCount = 0__		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			kvStateIds[rangeIdx] = new KvStateID()__			serverAddresses[rangeIdx] = new KvStateServerAddress(host, 1024 + rangeIdx)__			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			location.registerKvState(keyGroupRange, kvStateIds[rangeIdx], serverAddresses[rangeIdx])__			registeredCount += keyGroupRange.getNumberOfKeyGroups()__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for(int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(kvStateIds[rangeIdx], location.getKvStateID(keyGroup))__				assertEquals(serverAddresses[rangeIdx], location.getKvStateServerAddress(keyGroup))__			}_		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			kvStateIds[rangeIdx] = new KvStateID()__			serverAddresses[rangeIdx] = new KvStateServerAddress(host, 1024 + rangeIdx)___			location.registerKvState(keyGroupRanges.get(rangeIdx), kvStateIds[rangeIdx], serverAddresses[rangeIdx])__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for(int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(kvStateIds[rangeIdx], location.getKvStateID(keyGroup))__				assertEquals(serverAddresses[rangeIdx], location.getKvStateServerAddress(keyGroup))__			}_		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			location.unregisterKvState(keyGroupRange)__			registeredCount -= keyGroupRange.getNumberOfKeyGroups()__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for(int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(null, location.getKvStateID(keyGroup))__				assertEquals(null, location.getKvStateServerAddress(keyGroup))__			}_		}__		assertEquals(0, location.getNumRegisteredKeyGroups())__	};simple,test,registering,unregistereing,state,and,looking,it,up,again;test,public,void,test,register,and,lookup,throws,exception,job,id,job,id,new,job,id,job,vertex,id,job,vertex,id,new,job,vertex,id,int,num,key,groups,123,int,num,ranges,10,int,fract,num,key,groups,num,ranges,int,remain,num,key,groups,num,ranges,list,key,group,range,key,group,ranges,new,array,list,num,ranges,int,start,0,for,int,i,0,i,num,ranges,i,int,end,start,fract,1,if,remain,0,remain,end,key,group,range,range,new,key,group,range,start,end,key,group,ranges,add,range,start,end,1,string,registration,name,asdasdasdasd,kv,state,location,location,new,kv,state,location,job,id,job,vertex,id,num,key,groups,registration,name,kv,state,id,kv,state,ids,new,kv,state,id,num,ranges,kv,state,server,address,server,addresses,new,kv,state,server,address,num,ranges,inet,address,host,inet,address,get,local,host,int,registered,count,0,for,int,range,idx,0,range,idx,num,ranges,range,idx,kv,state,ids,range,idx,new,kv,state,id,server,addresses,range,idx,new,kv,state,server,address,host,1024,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,location,register,kv,state,key,group,range,kv,state,ids,range,idx,server,addresses,range,idx,registered,count,key,group,range,get,number,of,key,groups,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,kv,state,ids,range,idx,location,get,kv,state,id,key,group,assert,equals,server,addresses,range,idx,location,get,kv,state,server,address,key,group,for,int,range,idx,0,range,idx,num,ranges,range,idx,kv,state,ids,range,idx,new,kv,state,id,server,addresses,range,idx,new,kv,state,server,address,host,1024,range,idx,location,register,kv,state,key,group,ranges,get,range,idx,kv,state,ids,range,idx,server,addresses,range,idx,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,kv,state,ids,range,idx,location,get,kv,state,id,key,group,assert,equals,server,addresses,range,idx,location,get,kv,state,server,address,key,group,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,location,unregister,kv,state,key,group,range,registered,count,key,group,range,get,number,of,key,groups,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,null,location,get,kv,state,id,key,group,assert,equals,null,location,get,kv,state,server,address,key,group,assert,equals,0,location,get,num,registered,key,groups
KvStateLocationTest -> @Test 	public void testRegisterAndLookup() throws Exception;1499682192;Simple test registering/unregistereing state and looking it up again.;@Test_	public void testRegisterAndLookup() throws Exception {_		JobID jobId = new JobID()__		JobVertexID jobVertexId = new JobVertexID()__		int numKeyGroups = 123__		int numRanges = 10__		int fract = numKeyGroups / numRanges__		int remain = numKeyGroups % numRanges__		List<KeyGroupRange> keyGroupRanges = new ArrayList<>(numRanges)___		int start = 0__		for (int i = 0_ i < numRanges_ ++i) {_			int end = start + fract - 1__			if (remain > 0) {_				--remain__				++end__			}_			KeyGroupRange range = new KeyGroupRange(start, end)__			keyGroupRanges.add(range)__			start = end + 1__		}__		String registrationName = "asdasdasdasd"___		KvStateLocation location = new KvStateLocation(jobId, jobVertexId, numKeyGroups, registrationName)___		KvStateID[] kvStateIds = new KvStateID[numRanges]__		KvStateServerAddress[] serverAddresses = new KvStateServerAddress[numRanges]___		InetAddress host = InetAddress.getLocalHost()___		_		int registeredCount = 0__		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			kvStateIds[rangeIdx] = new KvStateID()__			serverAddresses[rangeIdx] = new KvStateServerAddress(host, 1024 + rangeIdx)__			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			location.registerKvState(keyGroupRange, kvStateIds[rangeIdx], serverAddresses[rangeIdx])__			registeredCount += keyGroupRange.getNumberOfKeyGroups()__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for (int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(kvStateIds[rangeIdx], location.getKvStateID(keyGroup))__				assertEquals(serverAddresses[rangeIdx], location.getKvStateServerAddress(keyGroup))__			}_		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			kvStateIds[rangeIdx] = new KvStateID()__			serverAddresses[rangeIdx] = new KvStateServerAddress(host, 1024 + rangeIdx)___			location.registerKvState(keyGroupRanges.get(rangeIdx), kvStateIds[rangeIdx], serverAddresses[rangeIdx])__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for (int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(kvStateIds[rangeIdx], location.getKvStateID(keyGroup))__				assertEquals(serverAddresses[rangeIdx], location.getKvStateServerAddress(keyGroup))__			}_		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			location.unregisterKvState(keyGroupRange)__			registeredCount -= keyGroupRange.getNumberOfKeyGroups()__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for (int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(null, location.getKvStateID(keyGroup))__				assertEquals(null, location.getKvStateServerAddress(keyGroup))__			}_		}__		assertEquals(0, location.getNumRegisteredKeyGroups())__	};simple,test,registering,unregistereing,state,and,looking,it,up,again;test,public,void,test,register,and,lookup,throws,exception,job,id,job,id,new,job,id,job,vertex,id,job,vertex,id,new,job,vertex,id,int,num,key,groups,123,int,num,ranges,10,int,fract,num,key,groups,num,ranges,int,remain,num,key,groups,num,ranges,list,key,group,range,key,group,ranges,new,array,list,num,ranges,int,start,0,for,int,i,0,i,num,ranges,i,int,end,start,fract,1,if,remain,0,remain,end,key,group,range,range,new,key,group,range,start,end,key,group,ranges,add,range,start,end,1,string,registration,name,asdasdasdasd,kv,state,location,location,new,kv,state,location,job,id,job,vertex,id,num,key,groups,registration,name,kv,state,id,kv,state,ids,new,kv,state,id,num,ranges,kv,state,server,address,server,addresses,new,kv,state,server,address,num,ranges,inet,address,host,inet,address,get,local,host,int,registered,count,0,for,int,range,idx,0,range,idx,num,ranges,range,idx,kv,state,ids,range,idx,new,kv,state,id,server,addresses,range,idx,new,kv,state,server,address,host,1024,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,location,register,kv,state,key,group,range,kv,state,ids,range,idx,server,addresses,range,idx,registered,count,key,group,range,get,number,of,key,groups,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,kv,state,ids,range,idx,location,get,kv,state,id,key,group,assert,equals,server,addresses,range,idx,location,get,kv,state,server,address,key,group,for,int,range,idx,0,range,idx,num,ranges,range,idx,kv,state,ids,range,idx,new,kv,state,id,server,addresses,range,idx,new,kv,state,server,address,host,1024,range,idx,location,register,kv,state,key,group,ranges,get,range,idx,kv,state,ids,range,idx,server,addresses,range,idx,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,kv,state,ids,range,idx,location,get,kv,state,id,key,group,assert,equals,server,addresses,range,idx,location,get,kv,state,server,address,key,group,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,location,unregister,kv,state,key,group,range,registered,count,key,group,range,get,number,of,key,groups,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,null,location,get,kv,state,id,key,group,assert,equals,null,location,get,kv,state,server,address,key,group,assert,equals,0,location,get,num,registered,key,groups
KvStateLocationTest -> @Test 	public void testRegisterAndLookup() throws Exception;1509037054;Simple test registering/unregistereing state and looking it up again.;@Test_	public void testRegisterAndLookup() throws Exception {_		JobID jobId = new JobID()__		JobVertexID jobVertexId = new JobVertexID()__		int numKeyGroups = 123__		int numRanges = 10__		int fract = numKeyGroups / numRanges__		int remain = numKeyGroups % numRanges__		List<KeyGroupRange> keyGroupRanges = new ArrayList<>(numRanges)___		int start = 0__		for (int i = 0_ i < numRanges_ ++i) {_			int end = start + fract - 1__			if (remain > 0) {_				--remain__				++end__			}_			KeyGroupRange range = new KeyGroupRange(start, end)__			keyGroupRanges.add(range)__			start = end + 1__		}__		String registrationName = "asdasdasdasd"___		KvStateLocation location = new KvStateLocation(jobId, jobVertexId, numKeyGroups, registrationName)___		KvStateID[] kvStateIds = new KvStateID[numRanges]__		InetSocketAddress[] serverAddresses = new InetSocketAddress[numRanges]___		InetAddress host = InetAddress.getLocalHost()___		_		int registeredCount = 0__		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			kvStateIds[rangeIdx] = new KvStateID()__			serverAddresses[rangeIdx] = new InetSocketAddress(host, 1024 + rangeIdx)__			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			location.registerKvState(keyGroupRange, kvStateIds[rangeIdx], serverAddresses[rangeIdx])__			registeredCount += keyGroupRange.getNumberOfKeyGroups()__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for (int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(kvStateIds[rangeIdx], location.getKvStateID(keyGroup))__				assertEquals(serverAddresses[rangeIdx], location.getKvStateServerAddress(keyGroup))__			}_		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			kvStateIds[rangeIdx] = new KvStateID()__			serverAddresses[rangeIdx] = new InetSocketAddress(host, 1024 + rangeIdx)___			location.registerKvState(keyGroupRanges.get(rangeIdx), kvStateIds[rangeIdx], serverAddresses[rangeIdx])__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for (int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(kvStateIds[rangeIdx], location.getKvStateID(keyGroup))__				assertEquals(serverAddresses[rangeIdx], location.getKvStateServerAddress(keyGroup))__			}_		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			location.unregisterKvState(keyGroupRange)__			registeredCount -= keyGroupRange.getNumberOfKeyGroups()__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for (int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(null, location.getKvStateID(keyGroup))__				assertEquals(null, location.getKvStateServerAddress(keyGroup))__			}_		}__		assertEquals(0, location.getNumRegisteredKeyGroups())__	};simple,test,registering,unregistereing,state,and,looking,it,up,again;test,public,void,test,register,and,lookup,throws,exception,job,id,job,id,new,job,id,job,vertex,id,job,vertex,id,new,job,vertex,id,int,num,key,groups,123,int,num,ranges,10,int,fract,num,key,groups,num,ranges,int,remain,num,key,groups,num,ranges,list,key,group,range,key,group,ranges,new,array,list,num,ranges,int,start,0,for,int,i,0,i,num,ranges,i,int,end,start,fract,1,if,remain,0,remain,end,key,group,range,range,new,key,group,range,start,end,key,group,ranges,add,range,start,end,1,string,registration,name,asdasdasdasd,kv,state,location,location,new,kv,state,location,job,id,job,vertex,id,num,key,groups,registration,name,kv,state,id,kv,state,ids,new,kv,state,id,num,ranges,inet,socket,address,server,addresses,new,inet,socket,address,num,ranges,inet,address,host,inet,address,get,local,host,int,registered,count,0,for,int,range,idx,0,range,idx,num,ranges,range,idx,kv,state,ids,range,idx,new,kv,state,id,server,addresses,range,idx,new,inet,socket,address,host,1024,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,location,register,kv,state,key,group,range,kv,state,ids,range,idx,server,addresses,range,idx,registered,count,key,group,range,get,number,of,key,groups,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,kv,state,ids,range,idx,location,get,kv,state,id,key,group,assert,equals,server,addresses,range,idx,location,get,kv,state,server,address,key,group,for,int,range,idx,0,range,idx,num,ranges,range,idx,kv,state,ids,range,idx,new,kv,state,id,server,addresses,range,idx,new,inet,socket,address,host,1024,range,idx,location,register,kv,state,key,group,ranges,get,range,idx,kv,state,ids,range,idx,server,addresses,range,idx,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,kv,state,ids,range,idx,location,get,kv,state,id,key,group,assert,equals,server,addresses,range,idx,location,get,kv,state,server,address,key,group,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,location,unregister,kv,state,key,group,range,registered,count,key,group,range,get,number,of,key,groups,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,null,location,get,kv,state,id,key,group,assert,equals,null,location,get,kv,state,server,address,key,group,assert,equals,0,location,get,num,registered,key,groups
KvStateLocationTest -> @Test 	public void testRegisterAndLookup() throws Exception;1515177485;Simple test registering/unregistering state and looking it up again.;@Test_	public void testRegisterAndLookup() throws Exception {_		JobID jobId = new JobID()__		JobVertexID jobVertexId = new JobVertexID()__		int numKeyGroups = 123__		int numRanges = 10__		int fract = numKeyGroups / numRanges__		int remain = numKeyGroups % numRanges__		List<KeyGroupRange> keyGroupRanges = new ArrayList<>(numRanges)___		int start = 0__		for (int i = 0_ i < numRanges_ ++i) {_			int end = start + fract - 1__			if (remain > 0) {_				--remain__				++end__			}_			KeyGroupRange range = new KeyGroupRange(start, end)__			keyGroupRanges.add(range)__			start = end + 1__		}__		String registrationName = "asdasdasdasd"___		KvStateLocation location = new KvStateLocation(jobId, jobVertexId, numKeyGroups, registrationName)___		KvStateID[] kvStateIds = new KvStateID[numRanges]__		InetSocketAddress[] serverAddresses = new InetSocketAddress[numRanges]___		InetAddress host = InetAddress.getLocalHost()___		_		int registeredCount = 0__		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			kvStateIds[rangeIdx] = new KvStateID()__			serverAddresses[rangeIdx] = new InetSocketAddress(host, 1024 + rangeIdx)__			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			location.registerKvState(keyGroupRange, kvStateIds[rangeIdx], serverAddresses[rangeIdx])__			registeredCount += keyGroupRange.getNumberOfKeyGroups()__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for (int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(kvStateIds[rangeIdx], location.getKvStateID(keyGroup))__				assertEquals(serverAddresses[rangeIdx], location.getKvStateServerAddress(keyGroup))__			}_		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			kvStateIds[rangeIdx] = new KvStateID()__			serverAddresses[rangeIdx] = new InetSocketAddress(host, 1024 + rangeIdx)___			location.registerKvState(keyGroupRanges.get(rangeIdx), kvStateIds[rangeIdx], serverAddresses[rangeIdx])__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for (int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(kvStateIds[rangeIdx], location.getKvStateID(keyGroup))__				assertEquals(serverAddresses[rangeIdx], location.getKvStateServerAddress(keyGroup))__			}_		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			location.unregisterKvState(keyGroupRange)__			registeredCount -= keyGroupRange.getNumberOfKeyGroups()__			assertEquals(registeredCount, location.getNumRegisteredKeyGroups())__		}__		_		for (int rangeIdx = 0_ rangeIdx < numRanges_ rangeIdx++) {_			KeyGroupRange keyGroupRange = keyGroupRanges.get(rangeIdx)__			for (int keyGroup = keyGroupRange.getStartKeyGroup()_ keyGroup <= keyGroupRange.getEndKeyGroup()_ ++keyGroup) {_				assertEquals(null, location.getKvStateID(keyGroup))__				assertEquals(null, location.getKvStateServerAddress(keyGroup))__			}_		}__		assertEquals(0, location.getNumRegisteredKeyGroups())__	};simple,test,registering,unregistering,state,and,looking,it,up,again;test,public,void,test,register,and,lookup,throws,exception,job,id,job,id,new,job,id,job,vertex,id,job,vertex,id,new,job,vertex,id,int,num,key,groups,123,int,num,ranges,10,int,fract,num,key,groups,num,ranges,int,remain,num,key,groups,num,ranges,list,key,group,range,key,group,ranges,new,array,list,num,ranges,int,start,0,for,int,i,0,i,num,ranges,i,int,end,start,fract,1,if,remain,0,remain,end,key,group,range,range,new,key,group,range,start,end,key,group,ranges,add,range,start,end,1,string,registration,name,asdasdasdasd,kv,state,location,location,new,kv,state,location,job,id,job,vertex,id,num,key,groups,registration,name,kv,state,id,kv,state,ids,new,kv,state,id,num,ranges,inet,socket,address,server,addresses,new,inet,socket,address,num,ranges,inet,address,host,inet,address,get,local,host,int,registered,count,0,for,int,range,idx,0,range,idx,num,ranges,range,idx,kv,state,ids,range,idx,new,kv,state,id,server,addresses,range,idx,new,inet,socket,address,host,1024,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,location,register,kv,state,key,group,range,kv,state,ids,range,idx,server,addresses,range,idx,registered,count,key,group,range,get,number,of,key,groups,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,kv,state,ids,range,idx,location,get,kv,state,id,key,group,assert,equals,server,addresses,range,idx,location,get,kv,state,server,address,key,group,for,int,range,idx,0,range,idx,num,ranges,range,idx,kv,state,ids,range,idx,new,kv,state,id,server,addresses,range,idx,new,inet,socket,address,host,1024,range,idx,location,register,kv,state,key,group,ranges,get,range,idx,kv,state,ids,range,idx,server,addresses,range,idx,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,kv,state,ids,range,idx,location,get,kv,state,id,key,group,assert,equals,server,addresses,range,idx,location,get,kv,state,server,address,key,group,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,location,unregister,kv,state,key,group,range,registered,count,key,group,range,get,number,of,key,groups,assert,equals,registered,count,location,get,num,registered,key,groups,for,int,range,idx,0,range,idx,num,ranges,range,idx,key,group,range,key,group,range,key,group,ranges,get,range,idx,for,int,key,group,key,group,range,get,start,key,group,key,group,key,group,range,get,end,key,group,key,group,assert,equals,null,location,get,kv,state,id,key,group,assert,equals,null,location,get,kv,state,server,address,key,group,assert,equals,0,location,get,num,registered,key,groups
