# id;timestamp;commentText;codeText;commentWords;codeWords
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultipleFailoverRegions() throws Exception;1494099604;Creates a JobGraph of the following form:__<pre>_v2 ------->\__v1---------> v4 --->|\____v3--------------->|/_</pre>;@Test_	public void testMultipleFailoverRegions() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            Collections.<BlobKey>emptyList(),_            Collections.<URL>emptyList(),_            scheduler,_            ExecutionGraph.class.getClassLoader())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region31 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region32 = strategy.getFailoverRegion(ejv3.getTaskVertices()[1])__        FailoverRegion region51 = strategy.getFailoverRegion(ejv5.getTaskVertices()[0])__        FailoverRegion region52 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        _        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertFalse(region31.equals(region32))__        assertFalse(region51.equals(region52))__	};creates,a,job,graph,of,the,following,form,pre,v2,v1,v4,v3,pre;test,public,void,test,multiple,failover,regions,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,collections,blob,key,empty,list,collections,url,empty,list,scheduler,execution,graph,class,get,class,loader,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region31,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region32,strategy,get,failover,region,ejv3,get,task,vertices,1,failover,region,region51,strategy,get,failover,region,ejv5,get,task,vertices,0,failover,region,region52,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,false,region31,equals,region32,assert,false,region51,equals,region52
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultipleFailoverRegions() throws Exception;1507212387;Creates a JobGraph of the following form:__<pre>_v2 ------->\__v1---------> v4 --->|\____v3--------------->|/_</pre>;@Test_	public void testMultipleFailoverRegions() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            Collections.emptyList(),_            Collections.emptyList(),_            scheduler,_            ExecutionGraph.class.getClassLoader())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region31 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region32 = strategy.getFailoverRegion(ejv3.getTaskVertices()[1])__        FailoverRegion region51 = strategy.getFailoverRegion(ejv5.getTaskVertices()[0])__        FailoverRegion region52 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        _        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertFalse(region31.equals(region32))__        assertFalse(region51.equals(region52))__	};creates,a,job,graph,of,the,following,form,pre,v2,v1,v4,v3,pre;test,public,void,test,multiple,failover,regions,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,collections,empty,list,collections,empty,list,scheduler,execution,graph,class,get,class,loader,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region31,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region32,strategy,get,failover,region,ejv3,get,task,vertices,1,failover,region,region51,strategy,get,failover,region,ejv5,get,task,vertices,0,failover,region,region52,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,false,region31,equals,region32,assert,false,region51,equals,region52
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultipleFailoverRegions() throws Exception;1508861310;Creates a JobGraph of the following form:__<pre>_v2 ------->\__v1---------> v4 --->|\____v3--------------->|/_</pre>;@Test_	public void testMultipleFailoverRegions() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            Collections.emptyList(),_            Collections.emptyList(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region31 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region32 = strategy.getFailoverRegion(ejv3.getTaskVertices()[1])__        FailoverRegion region51 = strategy.getFailoverRegion(ejv5.getTaskVertices()[0])__        FailoverRegion region52 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        _        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertFalse(region31.equals(region32))__        assertFalse(region51.equals(region52))__	};creates,a,job,graph,of,the,following,form,pre,v2,v1,v4,v3,pre;test,public,void,test,multiple,failover,regions,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,collections,empty,list,collections,empty,list,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region31,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region32,strategy,get,failover,region,ejv3,get,task,vertices,1,failover,region,region51,strategy,get,failover,region,ejv5,get,task,vertices,0,failover,region,region52,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,false,region31,equals,region32,assert,false,region51,equals,region52
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultipleFailoverRegions() throws Exception;1508861311;Creates a JobGraph of the following form:__<pre>_v2 ------->\__v1---------> v4 --->|\____v3--------------->|/_</pre>;@Test_	public void testMultipleFailoverRegions() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region31 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region32 = strategy.getFailoverRegion(ejv3.getTaskVertices()[1])__        FailoverRegion region51 = strategy.getFailoverRegion(ejv5.getTaskVertices()[0])__        FailoverRegion region52 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        _        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertFalse(region31.equals(region32))__        assertFalse(region51.equals(region52))__	};creates,a,job,graph,of,the,following,form,pre,v2,v1,v4,v3,pre;test,public,void,test,multiple,failover,regions,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region31,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region32,strategy,get,failover,region,ejv3,get,task,vertices,1,failover,region,region51,strategy,get,failover,region,ejv5,get,task,vertices,0,failover,region,region52,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,false,region31,equals,region32,assert,false,region51,equals,region52
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultipleFailoverRegions() throws Exception;1508861311;Creates a JobGraph of the following form:__<pre>_v2 ------->\__v1---------> v4 --->|\____v3--------------->|/_</pre>;@Test_	public void testMultipleFailoverRegions() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__        final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___		ExecutionGraph eg = new ExecutionGraph(_			jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region31 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region32 = strategy.getFailoverRegion(ejv3.getTaskVertices()[1])__        FailoverRegion region51 = strategy.getFailoverRegion(ejv5.getTaskVertices()[0])__        FailoverRegion region52 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        _        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertFalse(region31.equals(region32))__        assertFalse(region51.equals(region52))__	};creates,a,job,graph,of,the,following,form,pre,v2,v1,v4,v3,pre;test,public,void,test,multiple,failover,regions,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region31,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region32,strategy,get,failover,region,ejv3,get,task,vertices,1,failover,region,region51,strategy,get,failover,region,ejv5,get,task,vertices,0,failover,region,region52,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,false,region31,equals,region32,assert,false,region51,equals,region52
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultipleFailoverRegions() throws Exception;1508861311;Creates a JobGraph of the following form:__<pre>_v2 ------->\__v1---------> v4 --->|\____v3--------------->|/_</pre>;@Test_	public void testMultipleFailoverRegions() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__        final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___		ExecutionGraph eg = new ExecutionGraph(_			jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			VoidBlobWriter.getInstance())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region31 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region32 = strategy.getFailoverRegion(ejv3.getTaskVertices()[1])__        FailoverRegion region51 = strategy.getFailoverRegion(ejv5.getTaskVertices()[0])__        FailoverRegion region52 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        _        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertFalse(region31.equals(region32))__        assertFalse(region51.equals(region52))__	};creates,a,job,graph,of,the,following,form,pre,v2,v1,v4,v3,pre;test,public,void,test,multiple,failover,regions,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,void,blob,writer,get,instance,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region31,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region32,strategy,get,failover,region,ejv3,get,task,vertices,1,failover,region,region51,strategy,get,failover,region,ejv5,get,task,vertices,0,failover,region,region52,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,false,region31,equals,region32,assert,false,region51,equals,region52
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultipleFailoverRegions() throws Exception;1518680774;Creates a JobGraph of the following form:__<pre>_v2 ------->\__v1---------> v4 --->|\____v3--------------->|/_</pre>;@Test_	public void testMultipleFailoverRegions() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__        final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___		ExecutionGraph eg = new ExecutionGraph(_			jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			VoidBlobWriter.getInstance(),_			AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region31 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region32 = strategy.getFailoverRegion(ejv3.getTaskVertices()[1])__        FailoverRegion region51 = strategy.getFailoverRegion(ejv5.getTaskVertices()[0])__        FailoverRegion region52 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        _        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertFalse(region31.equals(region32))__        assertFalse(region51.equals(region52))__	};creates,a,job,graph,of,the,following,form,pre,v2,v1,v4,v3,pre;test,public,void,test,multiple,failover,regions,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,void,blob,writer,get,instance,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region31,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region32,strategy,get,failover,region,ejv3,get,task,vertices,1,failover,region,region51,strategy,get,failover,region,ejv5,get,task,vertices,0,failover,region,region52,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,false,region31,equals,region32,assert,false,region51,equals,region52
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultipleFailoverRegions() throws Exception;1548932775;Creates a JobGraph of the following form:__<pre>_v2 ------->\__v1---------> v4 --->|\____v3--------------->|/_</pre>;@Test_	public void testMultipleFailoverRegions() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___		ExecutionGraph eg = new ExecutionGraph(_			jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_			new TestingSlotProvider(ignored -> new CompletableFuture<>()),_            ExecutionGraph.class.getClassLoader(),_			VoidBlobWriter.getInstance(),_			AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region31 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region32 = strategy.getFailoverRegion(ejv3.getTaskVertices()[1])__        FailoverRegion region51 = strategy.getFailoverRegion(ejv5.getTaskVertices()[0])__        FailoverRegion region52 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        _        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertFalse(region31.equals(region32))__        assertFalse(region51.equals(region52))__	};creates,a,job,graph,of,the,following,form,pre,v2,v1,v4,v3,pre;test,public,void,test,multiple,failover,regions,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,new,testing,slot,provider,ignored,new,completable,future,execution,graph,class,get,class,loader,void,blob,writer,get,instance,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region31,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region32,strategy,get,failover,region,ejv3,get,task,vertices,1,failover,region,region51,strategy,get,failover,region,ejv5,get,task,vertices,0,failover,region,region52,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,false,region31,equals,region32,assert,false,region51,equals,region52
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultiRegionNotAllToAll() throws Exception;1494099604;Creates a JobGraph of the following form:__<pre>_v1-->v2-->|\____v3------>/_</pre>;@Test_	public void testMultiRegionNotAllToAll() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(2)__        v2.setParallelism(2)__        v3.setParallelism(5)__        v4.setParallelism(5)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__        ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            Collections.<BlobKey>emptyList(),_            Collections.<URL>emptyList(),_            scheduler,_            ExecutionGraph.class.getClassLoader())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        FailoverRegion region11 = strategy.getFailoverRegion(ejv1.getTaskVertices()[0])__        FailoverRegion region12 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region21 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region22 = strategy.getFailoverRegion(ejv2.getTaskVertices()[1])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])___        _        assertEquals(region11, region21)__        assertEquals(region12, region22)__        assertFalse(region11.equals(region12))__        assertFalse(region3.equals(region4))__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v3,pre;test,public,void,test,multi,region,not,all,to,all,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,5,v4,set,parallelism,5,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,collections,blob,key,empty,list,collections,url,empty,list,scheduler,execution,graph,class,get,class,loader,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,failover,region,region11,strategy,get,failover,region,ejv1,get,task,vertices,0,failover,region,region12,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region21,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region22,strategy,get,failover,region,ejv2,get,task,vertices,1,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,assert,equals,region11,region21,assert,equals,region12,region22,assert,false,region11,equals,region12,assert,false,region3,equals,region4
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultiRegionNotAllToAll() throws Exception;1507212387;Creates a JobGraph of the following form:__<pre>_v1-->v2-->|\____v3------>/_</pre>;@Test_	public void testMultiRegionNotAllToAll() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(2)__        v2.setParallelism(2)__        v3.setParallelism(5)__        v4.setParallelism(5)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__        ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            Collections.emptyList(),_            Collections.emptyList(),_            scheduler,_            ExecutionGraph.class.getClassLoader())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        FailoverRegion region11 = strategy.getFailoverRegion(ejv1.getTaskVertices()[0])__        FailoverRegion region12 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region21 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region22 = strategy.getFailoverRegion(ejv2.getTaskVertices()[1])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])___        _        assertEquals(region11, region21)__        assertEquals(region12, region22)__        assertFalse(region11.equals(region12))__        assertFalse(region3.equals(region4))__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v3,pre;test,public,void,test,multi,region,not,all,to,all,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,5,v4,set,parallelism,5,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,collections,empty,list,collections,empty,list,scheduler,execution,graph,class,get,class,loader,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,failover,region,region11,strategy,get,failover,region,ejv1,get,task,vertices,0,failover,region,region12,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region21,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region22,strategy,get,failover,region,ejv2,get,task,vertices,1,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,assert,equals,region11,region21,assert,equals,region12,region22,assert,false,region11,equals,region12,assert,false,region3,equals,region4
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultiRegionNotAllToAll() throws Exception;1508861310;Creates a JobGraph of the following form:__<pre>_v1-->v2-->|\____v3------>/_</pre>;@Test_	public void testMultiRegionNotAllToAll() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(2)__        v2.setParallelism(2)__        v3.setParallelism(5)__        v4.setParallelism(5)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__        ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            Collections.emptyList(),_            Collections.emptyList(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        FailoverRegion region11 = strategy.getFailoverRegion(ejv1.getTaskVertices()[0])__        FailoverRegion region12 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region21 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region22 = strategy.getFailoverRegion(ejv2.getTaskVertices()[1])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])___        _        assertEquals(region11, region21)__        assertEquals(region12, region22)__        assertFalse(region11.equals(region12))__        assertFalse(region3.equals(region4))__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v3,pre;test,public,void,test,multi,region,not,all,to,all,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,5,v4,set,parallelism,5,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,collections,empty,list,collections,empty,list,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,failover,region,region11,strategy,get,failover,region,ejv1,get,task,vertices,0,failover,region,region12,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region21,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region22,strategy,get,failover,region,ejv2,get,task,vertices,1,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,assert,equals,region11,region21,assert,equals,region12,region22,assert,false,region11,equals,region12,assert,false,region3,equals,region4
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultiRegionNotAllToAll() throws Exception;1508861311;Creates a JobGraph of the following form:__<pre>_v1-->v2-->|\____v3------>/_</pre>;@Test_	public void testMultiRegionNotAllToAll() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(2)__        v2.setParallelism(2)__        v3.setParallelism(5)__        v4.setParallelism(5)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__        ExecutionGraph eg = new ExecutionGraph(_        	new DummyJobInformation(_        		jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        FailoverRegion region11 = strategy.getFailoverRegion(ejv1.getTaskVertices()[0])__        FailoverRegion region12 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region21 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region22 = strategy.getFailoverRegion(ejv2.getTaskVertices()[1])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])___        _        assertEquals(region11, region21)__        assertEquals(region12, region22)__        assertFalse(region11.equals(region12))__        assertFalse(region3.equals(region4))__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v3,pre;test,public,void,test,multi,region,not,all,to,all,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,5,v4,set,parallelism,5,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,failover,region,region11,strategy,get,failover,region,ejv1,get,task,vertices,0,failover,region,region12,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region21,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region22,strategy,get,failover,region,ejv2,get,task,vertices,1,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,assert,equals,region11,region21,assert,equals,region12,region22,assert,false,region11,equals,region12,assert,false,region3,equals,region4
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultiRegionNotAllToAll() throws Exception;1508861311;Creates a JobGraph of the following form:__<pre>_v1-->v2-->|\____v3------>/_</pre>;@Test_	public void testMultiRegionNotAllToAll() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(2)__        v2.setParallelism(2)__        v3.setParallelism(5)__        v4.setParallelism(5)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___        ExecutionGraph eg = new ExecutionGraph(_        	jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        FailoverRegion region11 = strategy.getFailoverRegion(ejv1.getTaskVertices()[0])__        FailoverRegion region12 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region21 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region22 = strategy.getFailoverRegion(ejv2.getTaskVertices()[1])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])___        _        assertEquals(region11, region21)__        assertEquals(region12, region22)__        assertFalse(region11.equals(region12))__        assertFalse(region3.equals(region4))__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v3,pre;test,public,void,test,multi,region,not,all,to,all,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,5,v4,set,parallelism,5,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,scheduler,scheduler,new,scheduler,testing,utils,default,executor,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,failover,region,region11,strategy,get,failover,region,ejv1,get,task,vertices,0,failover,region,region12,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region21,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region22,strategy,get,failover,region,ejv2,get,task,vertices,1,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,assert,equals,region11,region21,assert,equals,region12,region22,assert,false,region11,equals,region12,assert,false,region3,equals,region4
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultiRegionNotAllToAll() throws Exception;1508861311;Creates a JobGraph of the following form:__<pre>_v1-->v2-->|\____v3------>/_</pre>;@Test_	public void testMultiRegionNotAllToAll() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(2)__        v2.setParallelism(2)__        v3.setParallelism(5)__        v4.setParallelism(5)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___        ExecutionGraph eg = new ExecutionGraph(_        	jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			VoidBlobWriter.getInstance())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        FailoverRegion region11 = strategy.getFailoverRegion(ejv1.getTaskVertices()[0])__        FailoverRegion region12 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region21 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region22 = strategy.getFailoverRegion(ejv2.getTaskVertices()[1])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])___        _        assertEquals(region11, region21)__        assertEquals(region12, region22)__        assertFalse(region11.equals(region12))__        assertFalse(region3.equals(region4))__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v3,pre;test,public,void,test,multi,region,not,all,to,all,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,5,v4,set,parallelism,5,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,scheduler,scheduler,new,scheduler,testing,utils,default,executor,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,void,blob,writer,get,instance,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,failover,region,region11,strategy,get,failover,region,ejv1,get,task,vertices,0,failover,region,region12,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region21,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region22,strategy,get,failover,region,ejv2,get,task,vertices,1,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,assert,equals,region11,region21,assert,equals,region12,region22,assert,false,region11,equals,region12,assert,false,region3,equals,region4
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultiRegionNotAllToAll() throws Exception;1518680774;Creates a JobGraph of the following form:__<pre>_v1-->v2-->|\____v3------>/_</pre>;@Test_	public void testMultiRegionNotAllToAll() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(2)__        v2.setParallelism(2)__        v3.setParallelism(5)__        v4.setParallelism(5)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___        ExecutionGraph eg = new ExecutionGraph(_        	jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			VoidBlobWriter.getInstance(),_			AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        FailoverRegion region11 = strategy.getFailoverRegion(ejv1.getTaskVertices()[0])__        FailoverRegion region12 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region21 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region22 = strategy.getFailoverRegion(ejv2.getTaskVertices()[1])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])___        _        assertEquals(region11, region21)__        assertEquals(region12, region22)__        assertFalse(region11.equals(region12))__        assertFalse(region3.equals(region4))__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v3,pre;test,public,void,test,multi,region,not,all,to,all,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,5,v4,set,parallelism,5,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,scheduler,scheduler,new,scheduler,testing,utils,default,executor,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,void,blob,writer,get,instance,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,failover,region,region11,strategy,get,failover,region,ejv1,get,task,vertices,0,failover,region,region12,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region21,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region22,strategy,get,failover,region,ejv2,get,task,vertices,1,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,assert,equals,region11,region21,assert,equals,region12,region22,assert,false,region11,equals,region12,assert,false,region3,equals,region4
RestartPipelinedRegionStrategyTest -> @Test 	public void testMultiRegionNotAllToAll() throws Exception;1548932775;Creates a JobGraph of the following form:__<pre>_v1-->v2-->|\____v3------>/_</pre>;@Test_	public void testMultiRegionNotAllToAll() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(2)__        v2.setParallelism(2)__        v3.setParallelism(5)__        v4.setParallelism(5)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.POINTWISE, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4))___		final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___        ExecutionGraph eg = new ExecutionGraph(_        	jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_			new TestingSlotProvider(ignored -> new CompletableFuture<>()),_            ExecutionGraph.class.getClassLoader(),_			VoidBlobWriter.getInstance(),_			AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        FailoverRegion region11 = strategy.getFailoverRegion(ejv1.getTaskVertices()[0])__        FailoverRegion region12 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region21 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region22 = strategy.getFailoverRegion(ejv2.getTaskVertices()[1])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])___        _        assertEquals(region11, region21)__        assertEquals(region12, region22)__        assertFalse(region11.equals(region12))__        assertFalse(region3.equals(region4))__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v3,pre;test,public,void,test,multi,region,not,all,to,all,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,2,v2,set,parallelism,2,v3,set,parallelism,5,v4,set,parallelism,5,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,pointwise,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,blocking,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,new,testing,slot,provider,ignored,new,completable,future,execution,graph,class,get,class,loader,void,blob,writer,get,instance,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,failover,region,region11,strategy,get,failover,region,ejv1,get,task,vertices,0,failover,region,region12,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region21,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region22,strategy,get,failover,region,ejv2,get,task,vertices,1,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,assert,equals,region11,region21,assert,equals,region12,region22,assert,false,region11,equals,region12,assert,false,region3,equals,region4
RestartPipelinedRegionStrategyTest -> @Test 	public void testSingleRegionWithMixedInput() throws Exception;1494099604;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->|\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSingleRegionWithMixedInput() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            Collections.<BlobKey>emptyList(),_            Collections.<URL>emptyList(),_            scheduler,_            ExecutionGraph.class.getClassLoader())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertEquals(region3, region2)__        assertEquals(region1, region5)__    };creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,single,region,with,mixed,input,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,collections,blob,key,empty,list,collections,url,empty,list,scheduler,execution,graph,class,get,class,loader,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,equals,region3,region2,assert,equals,region1,region5
RestartPipelinedRegionStrategyTest -> @Test 	public void testSingleRegionWithMixedInput() throws Exception;1507212387;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->|\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSingleRegionWithMixedInput() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            Collections.emptyList(),_            Collections.emptyList(),_            scheduler,_            ExecutionGraph.class.getClassLoader())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertEquals(region3, region2)__        assertEquals(region1, region5)__    };creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,single,region,with,mixed,input,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,collections,empty,list,collections,empty,list,scheduler,execution,graph,class,get,class,loader,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,equals,region3,region2,assert,equals,region1,region5
RestartPipelinedRegionStrategyTest -> @Test 	public void testSingleRegionWithMixedInput() throws Exception;1508861310;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->|\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSingleRegionWithMixedInput() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            Collections.emptyList(),_            Collections.emptyList(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertEquals(region3, region2)__        assertEquals(region1, region5)__    };creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,single,region,with,mixed,input,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,collections,empty,list,collections,empty,list,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,equals,region3,region2,assert,equals,region1,region5
RestartPipelinedRegionStrategyTest -> @Test 	public void testSingleRegionWithMixedInput() throws Exception;1508861311;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->|\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSingleRegionWithMixedInput() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertEquals(region3, region2)__        assertEquals(region1, region5)__    };creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,single,region,with,mixed,input,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,equals,region3,region2,assert,equals,region1,region5
RestartPipelinedRegionStrategyTest -> @Test 	public void testSingleRegionWithMixedInput() throws Exception;1508861311;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->|\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSingleRegionWithMixedInput() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___		ExecutionGraph eg = new ExecutionGraph(_			jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertEquals(region3, region2)__        assertEquals(region1, region5)__    };creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,single,region,with,mixed,input,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,equals,region3,region2,assert,equals,region1,region5
RestartPipelinedRegionStrategyTest -> @Test 	public void testSingleRegionWithMixedInput() throws Exception;1508861311;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->|\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSingleRegionWithMixedInput() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___		ExecutionGraph eg = new ExecutionGraph(_			jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			VoidBlobWriter.getInstance())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertEquals(region3, region2)__        assertEquals(region1, region5)__    };creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,single,region,with,mixed,input,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,void,blob,writer,get,instance,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,equals,region3,region2,assert,equals,region1,region5
RestartPipelinedRegionStrategyTest -> @Test 	public void testSingleRegionWithMixedInput() throws Exception;1518680774;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->|\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSingleRegionWithMixedInput() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___		ExecutionGraph eg = new ExecutionGraph(_			jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			VoidBlobWriter.getInstance(),_			AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertEquals(region3, region2)__        assertEquals(region1, region5)__    };creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,single,region,with,mixed,input,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,void,blob,writer,get,instance,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,equals,region3,region2,assert,equals,region1,region5
RestartPipelinedRegionStrategyTest -> @Test 	public void testSingleRegionWithMixedInput() throws Exception;1548932775;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->|\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSingleRegionWithMixedInput() throws Exception {_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___        JobVertex v1 = new JobVertex("vertex1")__        JobVertex v2 = new JobVertex("vertex2")__        JobVertex v3 = new JobVertex("vertex3")__        JobVertex v4 = new JobVertex("vertex4")__        JobVertex v5 = new JobVertex("vertex5")___        v1.setParallelism(3)__        v2.setParallelism(2)__        v3.setParallelism(2)__        v4.setParallelism(5)__        v5.setParallelism(2)___        v1.setInvokableClass(AbstractInvokable.class)__        v2.setInvokableClass(AbstractInvokable.class)__        v3.setInvokableClass(AbstractInvokable.class)__        v4.setInvokableClass(AbstractInvokable.class)__        v5.setInvokableClass(AbstractInvokable.class)___        v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__        v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.BLOCKING)___        List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___		final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___		ExecutionGraph eg = new ExecutionGraph(_			jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_			new TestingSlotProvider(ignored -> new CompletableFuture<>()),_            ExecutionGraph.class.getClassLoader(),_			VoidBlobWriter.getInstance(),_			AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        _        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[1])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region2, region4)__        assertEquals(region3, region2)__        assertEquals(region1, region5)__    };creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,single,region,with,mixed,input,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,3,v2,set,parallelism,2,v3,set,parallelism,2,v4,set,parallelism,5,v5,set,parallelism,2,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,blocking,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,new,testing,slot,provider,ignored,new,completable,future,execution,graph,class,get,class,loader,void,blob,writer,get,instance,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,1,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region2,region4,assert,equals,region3,region2,assert,equals,region1,region5
RestartPipelinedRegionStrategyTest -> @Test 	public void testSimpleFailoverRegion() throws Exception;1494099604;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSimpleFailoverRegion() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            Collections.<BlobKey>emptyList(),_            Collections.<URL>emptyList(),_            scheduler,_            ExecutionGraph.class.getClassLoader())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[2])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[4])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region3, region2)__        assertEquals(region4, region2)__        assertEquals(region5, region2)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,simple,failover,region,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,collections,blob,key,empty,list,collections,url,empty,list,scheduler,execution,graph,class,get,class,loader,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,2,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,4,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region3,region2,assert,equals,region4,region2,assert,equals,region5,region2
RestartPipelinedRegionStrategyTest -> @Test 	public void testSimpleFailoverRegion() throws Exception;1507212387;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSimpleFailoverRegion() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            Collections.emptyList(),_            Collections.emptyList(),_            scheduler,_            ExecutionGraph.class.getClassLoader())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[2])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[4])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region3, region2)__        assertEquals(region4, region2)__        assertEquals(region5, region2)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,simple,failover,region,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,collections,empty,list,collections,empty,list,scheduler,execution,graph,class,get,class,loader,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,2,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,4,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region3,region2,assert,equals,region4,region2,assert,equals,region5,region2
RestartPipelinedRegionStrategyTest -> @Test 	public void testSimpleFailoverRegion() throws Exception;1508861310;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSimpleFailoverRegion() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"__		final Configuration cfg = new Configuration()__		_		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		ExecutionGraph eg = new ExecutionGraph(_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			jobId, _			jobName, _			cfg,_			new SerializedValue<>(new ExecutionConfig()),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            Collections.emptyList(),_            Collections.emptyList(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[2])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[4])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region3, region2)__        assertEquals(region4, region2)__        assertEquals(region5, region2)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,simple,failover,region,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,final,configuration,cfg,new,configuration,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,testing,utils,default,executor,testing,utils,default,executor,job,id,job,name,cfg,new,serialized,value,new,execution,config,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,collections,empty,list,collections,empty,list,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,2,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,4,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region3,region2,assert,equals,region4,region2,assert,equals,region5,region2
RestartPipelinedRegionStrategyTest -> @Test 	public void testSimpleFailoverRegion() throws Exception;1508861311;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSimpleFailoverRegion() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__		ExecutionGraph eg = new ExecutionGraph(_			new DummyJobInformation(_				jobId,_				jobName),_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[2])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[4])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region3, region2)__        assertEquals(region4, region2)__        assertEquals(region5, region2)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,simple,failover,region,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,execution,graph,eg,new,execution,graph,new,dummy,job,information,job,id,job,name,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,2,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,4,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region3,region2,assert,equals,region4,region2,assert,equals,region5,region2
RestartPipelinedRegionStrategyTest -> @Test 	public void testSimpleFailoverRegion() throws Exception;1508861311;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSimpleFailoverRegion() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__        final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___		ExecutionGraph eg = new ExecutionGraph(_			jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			null)__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[2])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[4])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region3, region2)__        assertEquals(region4, region2)__        assertEquals(region5, region2)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,simple,failover,region,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,null,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,2,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,4,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region3,region2,assert,equals,region4,region2,assert,equals,region5,region2
RestartPipelinedRegionStrategyTest -> @Test 	public void testSimpleFailoverRegion() throws Exception;1508861311;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSimpleFailoverRegion() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__        final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___		ExecutionGraph eg = new ExecutionGraph(_			jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			VoidBlobWriter.getInstance())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[2])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[4])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region3, region2)__        assertEquals(region4, region2)__        assertEquals(region5, region2)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,simple,failover,region,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,void,blob,writer,get,instance,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,2,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,4,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region3,region2,assert,equals,region4,region2,assert,equals,region5,region2
RestartPipelinedRegionStrategyTest -> @Test 	public void testSimpleFailoverRegion() throws Exception;1518680774;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSimpleFailoverRegion() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        Scheduler scheduler = new Scheduler(TestingUtils.defaultExecutor())__        final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___		ExecutionGraph eg = new ExecutionGraph(_			jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_            scheduler,_            ExecutionGraph.class.getClassLoader(),_			VoidBlobWriter.getInstance(),_			AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[2])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[4])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region3, region2)__        assertEquals(region4, region2)__        assertEquals(region5, region2)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,simple,failover,region,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,scheduler,scheduler,new,scheduler,testing,utils,default,executor,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,scheduler,execution,graph,class,get,class,loader,void,blob,writer,get,instance,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,2,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,4,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region3,region2,assert,equals,region4,region2,assert,equals,region5,region2
RestartPipelinedRegionStrategyTest -> @Test 	public void testSimpleFailoverRegion() throws Exception;1548932775;Creates a JobGraph of the following form:__<pre>_v1--->v2-->\__v4 --->\_----->/        \_v3-->/                v5_\               /_------------->/_</pre>;@Test_	public void testSimpleFailoverRegion() throws Exception {_		_		final JobID jobId = new JobID()__		final String jobName = "Test Job Sample Name"___		JobVertex v1 = new JobVertex("vertex1")__		JobVertex v2 = new JobVertex("vertex2")__		JobVertex v3 = new JobVertex("vertex3")__		JobVertex v4 = new JobVertex("vertex4")__		JobVertex v5 = new JobVertex("vertex5")__		_		v1.setParallelism(5)__		v2.setParallelism(7)__		v3.setParallelism(2)__		v4.setParallelism(11)__		v5.setParallelism(4)___		v1.setInvokableClass(AbstractInvokable.class)__		v2.setInvokableClass(AbstractInvokable.class)__		v3.setInvokableClass(AbstractInvokable.class)__		v4.setInvokableClass(AbstractInvokable.class)__		v5.setInvokableClass(AbstractInvokable.class)___		v2.connectNewDataSetAsInput(v1, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v2, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v4.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v4, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		v5.connectNewDataSetAsInput(v3, DistributionPattern.ALL_TO_ALL, ResultPartitionType.PIPELINED)__		_		List<JobVertex> ordered = new ArrayList<JobVertex>(Arrays.asList(v1, v2, v3, v4, v5))___        final JobInformation jobInformation = new DummyJobInformation(_			jobId,_			jobName)___		ExecutionGraph eg = new ExecutionGraph(_			jobInformation,_			TestingUtils.defaultExecutor(),_			TestingUtils.defaultExecutor(),_			AkkaUtils.getDefaultTimeout(),_			new NoRestartStrategy(),_            new RestartPipelinedRegionStrategy.Factory(),_			new TestingSlotProvider(ignored -> new CompletableFuture<>()),_            ExecutionGraph.class.getClassLoader(),_			VoidBlobWriter.getInstance(),_			AkkaUtils.getDefaultTimeout())__		try {_			eg.attachJobGraph(ordered)__		}_		catch (JobException e) {_			e.printStackTrace()__			fail("Job failed with exception: " + e.getMessage())__		}__        RestartPipelinedRegionStrategy strategy = (RestartPipelinedRegionStrategy)eg.getFailoverStrategy()__        ExecutionJobVertex ejv1 = eg.getJobVertex(v1.getID())__        ExecutionJobVertex ejv2 = eg.getJobVertex(v2.getID())__        ExecutionJobVertex ejv3 = eg.getJobVertex(v3.getID())__        ExecutionJobVertex ejv4 = eg.getJobVertex(v4.getID())__        ExecutionJobVertex ejv5 = eg.getJobVertex(v5.getID())__        FailoverRegion region1 = strategy.getFailoverRegion(ejv1.getTaskVertices()[2])__        FailoverRegion region2 = strategy.getFailoverRegion(ejv2.getTaskVertices()[3])__        FailoverRegion region3 = strategy.getFailoverRegion(ejv3.getTaskVertices()[0])__        FailoverRegion region4 = strategy.getFailoverRegion(ejv4.getTaskVertices()[4])__        FailoverRegion region5 = strategy.getFailoverRegion(ejv5.getTaskVertices()[1])___        assertEquals(region1, region2)__        assertEquals(region3, region2)__        assertEquals(region4, region2)__        assertEquals(region5, region2)__	};creates,a,job,graph,of,the,following,form,pre,v1,v2,v4,v3,v5,pre;test,public,void,test,simple,failover,region,throws,exception,final,job,id,job,id,new,job,id,final,string,job,name,test,job,sample,name,job,vertex,v1,new,job,vertex,vertex1,job,vertex,v2,new,job,vertex,vertex2,job,vertex,v3,new,job,vertex,vertex3,job,vertex,v4,new,job,vertex,vertex4,job,vertex,v5,new,job,vertex,vertex5,v1,set,parallelism,5,v2,set,parallelism,7,v3,set,parallelism,2,v4,set,parallelism,11,v5,set,parallelism,4,v1,set,invokable,class,abstract,invokable,class,v2,set,invokable,class,abstract,invokable,class,v3,set,invokable,class,abstract,invokable,class,v4,set,invokable,class,abstract,invokable,class,v5,set,invokable,class,abstract,invokable,class,v2,connect,new,data,set,as,input,v1,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v2,distribution,pattern,result,partition,type,pipelined,v4,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v4,distribution,pattern,result,partition,type,pipelined,v5,connect,new,data,set,as,input,v3,distribution,pattern,result,partition,type,pipelined,list,job,vertex,ordered,new,array,list,job,vertex,arrays,as,list,v1,v2,v3,v4,v5,final,job,information,job,information,new,dummy,job,information,job,id,job,name,execution,graph,eg,new,execution,graph,job,information,testing,utils,default,executor,testing,utils,default,executor,akka,utils,get,default,timeout,new,no,restart,strategy,new,restart,pipelined,region,strategy,factory,new,testing,slot,provider,ignored,new,completable,future,execution,graph,class,get,class,loader,void,blob,writer,get,instance,akka,utils,get,default,timeout,try,eg,attach,job,graph,ordered,catch,job,exception,e,e,print,stack,trace,fail,job,failed,with,exception,e,get,message,restart,pipelined,region,strategy,strategy,restart,pipelined,region,strategy,eg,get,failover,strategy,execution,job,vertex,ejv1,eg,get,job,vertex,v1,get,id,execution,job,vertex,ejv2,eg,get,job,vertex,v2,get,id,execution,job,vertex,ejv3,eg,get,job,vertex,v3,get,id,execution,job,vertex,ejv4,eg,get,job,vertex,v4,get,id,execution,job,vertex,ejv5,eg,get,job,vertex,v5,get,id,failover,region,region1,strategy,get,failover,region,ejv1,get,task,vertices,2,failover,region,region2,strategy,get,failover,region,ejv2,get,task,vertices,3,failover,region,region3,strategy,get,failover,region,ejv3,get,task,vertices,0,failover,region,region4,strategy,get,failover,region,ejv4,get,task,vertices,4,failover,region,region5,strategy,get,failover,region,ejv5,get,task,vertices,1,assert,equals,region1,region2,assert,equals,region3,region2,assert,equals,region4,region2,assert,equals,region5,region2
