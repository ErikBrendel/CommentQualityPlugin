# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperLeaderRetrievalTest -> @Test 	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception;1441011751;Tests that LeaderRetrievalUtils.findConnectingAdress finds the correct connecting address_in case of an old leader address in ZooKeeper and a subsequent election of a new leader._The findConnectingAddress should block until the new leader has been elected and his_address has been written to ZooKeeper.;@Test_	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Configuration config = new Configuration()___		long sleepingTime = 1000___		config.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		config.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())___		LeaderElectionService leaderElectionService = null__		LeaderElectionService faultyLeaderElectionService___		ServerSocket serverSocket__		InetAddress localHost___		Thread thread___		try {__			InetSocketAddress wrongInetSocketAddress = new InetSocketAddress(InetAddress.getByName("1.1.1.1"), 1234)___			String wrongAddress = JobManager.getRemoteJobManagerAkkaURL(wrongInetSocketAddress, Option.<String>empty())___			try {_				localHost = InetAddress.getLocalHost()__				serverSocket = new ServerSocket(0, 50, localHost)__			} catch (UnknownHostException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}_			catch (IOException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}__			InetSocketAddress correctInetSocketAddress = new InetSocketAddress(localHost, serverSocket.getLocalPort())___			String correctAddress = JobManager.getRemoteJobManagerAkkaURL(correctInetSocketAddress, Option.<String>empty())___			faultyLeaderElectionService = LeaderElectionUtils.createLeaderElectionService(config)__			TestingContender wrongLeaderAddressContender = new TestingContender(wrongAddress, faultyLeaderElectionService)___			faultyLeaderElectionService.start(wrongLeaderAddressContender)___			FindConnectingAddress findConnectingAddress = new FindConnectingAddress(config, timeout)___			thread = new Thread(findConnectingAddress)___			thread.start()___			leaderElectionService = LeaderElectionUtils.createLeaderElectionService(config)__			TestingContender correctLeaderAddressContender = new TestingContender(correctAddress, leaderElectionService)___			Thread.sleep(sleepingTime)___			faultyLeaderElectionService.stop()___			leaderElectionService.start(correctLeaderAddressContender)___			thread.join()___			InetAddress result = findConnectingAddress.getInetAddress()___			_			Socket socket = new Socket()__			try {_				_				SocketAddress bindP = new InetSocketAddress(result, 0)__				_				socket.bind(bindP)__				socket.connect(correctInetSocketAddress, 1000)__			} finally {_				socket.close()__			}_		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}_		}_	};tests,that,leader,retrieval,utils,find,connecting,adress,finds,the,correct,connecting,address,in,case,of,an,old,leader,address,in,zoo,keeper,and,a,subsequent,election,of,a,new,leader,the,find,connecting,address,should,block,until,the,new,leader,has,been,elected,and,his,address,has,been,written,to,zoo,keeper;test,public,void,test,connecting,address,retrieval,with,delayed,leader,election,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,configuration,config,new,configuration,long,sleeping,time,1000,config,set,string,config,constants,zookeeper,config,set,string,config,constants,testing,cluster,get,connect,string,leader,election,service,leader,election,service,null,leader,election,service,faulty,leader,election,service,server,socket,server,socket,inet,address,local,host,thread,thread,try,inet,socket,address,wrong,inet,socket,address,new,inet,socket,address,inet,address,get,by,name,1,1,1,1,1234,string,wrong,address,job,manager,get,remote,job,manager,akka,url,wrong,inet,socket,address,option,string,empty,try,local,host,inet,address,get,local,host,server,socket,new,server,socket,0,50,local,host,catch,unknown,host,exception,e,system,err,println,skipping,test,network,interface,selection,test,return,catch,ioexception,e,system,err,println,skipping,test,network,interface,selection,test,return,inet,socket,address,correct,inet,socket,address,new,inet,socket,address,local,host,server,socket,get,local,port,string,correct,address,job,manager,get,remote,job,manager,akka,url,correct,inet,socket,address,option,string,empty,faulty,leader,election,service,leader,election,utils,create,leader,election,service,config,testing,contender,wrong,leader,address,contender,new,testing,contender,wrong,address,faulty,leader,election,service,faulty,leader,election,service,start,wrong,leader,address,contender,find,connecting,address,find,connecting,address,new,find,connecting,address,config,timeout,thread,new,thread,find,connecting,address,thread,start,leader,election,service,leader,election,utils,create,leader,election,service,config,testing,contender,correct,leader,address,contender,new,testing,contender,correct,address,leader,election,service,thread,sleep,sleeping,time,faulty,leader,election,service,stop,leader,election,service,start,correct,leader,address,contender,thread,join,inet,address,result,find,connecting,address,get,inet,address,socket,socket,new,socket,try,socket,address,bind,p,new,inet,socket,address,result,0,socket,bind,bind,p,socket,connect,correct,inet,socket,address,1000,finally,socket,close,finally,if,leader,election,service,null,leader,election,service,stop
ZooKeeperLeaderRetrievalTest -> @Test 	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception;1442999318;Tests that LeaderRetrievalUtils.findConnectingAdress finds the correct connecting address_in case of an old leader address in ZooKeeper and a subsequent election of a new leader._The findConnectingAddress should block until the new leader has been elected and his_address has been written to ZooKeeper.;@Test_	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Configuration config = new Configuration()___		long sleepingTime = 1000___		config.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		config.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())___		LeaderElectionService leaderElectionService = null__		LeaderElectionService faultyLeaderElectionService___		ServerSocket serverSocket__		InetAddress localHost___		Thread thread___		try {__			InetSocketAddress wrongInetSocketAddress = new InetSocketAddress(InetAddress.getByName("1.1.1.1"), 1234)___			String wrongAddress = JobManager.getRemoteJobManagerAkkaURL(wrongInetSocketAddress, Option.<String>empty())___			try {_				localHost = InetAddress.getLocalHost()__				serverSocket = new ServerSocket(0, 50, localHost)__			} catch (UnknownHostException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}_			catch (IOException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}__			InetSocketAddress correctInetSocketAddress = new InetSocketAddress(localHost, serverSocket.getLocalPort())___			String correctAddress = JobManager.getRemoteJobManagerAkkaURL(correctInetSocketAddress, Option.<String>empty())___			faultyLeaderElectionService = LeaderElectionUtils.createLeaderElectionService(config)__			TestingContender wrongLeaderAddressContender = new TestingContender(wrongAddress, faultyLeaderElectionService)___			faultyLeaderElectionService.start(wrongLeaderAddressContender)___			FindConnectingAddress findConnectingAddress = new FindConnectingAddress(config, timeout)___			thread = new Thread(findConnectingAddress)___			thread.start()___			leaderElectionService = LeaderElectionUtils.createLeaderElectionService(config)__			TestingContender correctLeaderAddressContender = new TestingContender(correctAddress, leaderElectionService)___			Thread.sleep(sleepingTime)___			faultyLeaderElectionService.stop()___			leaderElectionService.start(correctLeaderAddressContender)___			thread.join()___			InetAddress result = findConnectingAddress.getInetAddress()___			_			Socket socket = new Socket()__			try {_				_				SocketAddress bindP = new InetSocketAddress(result, 0)__				_				socket.bind(bindP)__				socket.connect(correctInetSocketAddress, 1000)__			} finally {_				socket.close()__			}_		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}_		}_	};tests,that,leader,retrieval,utils,find,connecting,adress,finds,the,correct,connecting,address,in,case,of,an,old,leader,address,in,zoo,keeper,and,a,subsequent,election,of,a,new,leader,the,find,connecting,address,should,block,until,the,new,leader,has,been,elected,and,his,address,has,been,written,to,zoo,keeper;test,public,void,test,connecting,address,retrieval,with,delayed,leader,election,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,configuration,config,new,configuration,long,sleeping,time,1000,config,set,string,config,constants,zookeeper,config,set,string,config,constants,testing,server,get,connect,string,leader,election,service,leader,election,service,null,leader,election,service,faulty,leader,election,service,server,socket,server,socket,inet,address,local,host,thread,thread,try,inet,socket,address,wrong,inet,socket,address,new,inet,socket,address,inet,address,get,by,name,1,1,1,1,1234,string,wrong,address,job,manager,get,remote,job,manager,akka,url,wrong,inet,socket,address,option,string,empty,try,local,host,inet,address,get,local,host,server,socket,new,server,socket,0,50,local,host,catch,unknown,host,exception,e,system,err,println,skipping,test,network,interface,selection,test,return,catch,ioexception,e,system,err,println,skipping,test,network,interface,selection,test,return,inet,socket,address,correct,inet,socket,address,new,inet,socket,address,local,host,server,socket,get,local,port,string,correct,address,job,manager,get,remote,job,manager,akka,url,correct,inet,socket,address,option,string,empty,faulty,leader,election,service,leader,election,utils,create,leader,election,service,config,testing,contender,wrong,leader,address,contender,new,testing,contender,wrong,address,faulty,leader,election,service,faulty,leader,election,service,start,wrong,leader,address,contender,find,connecting,address,find,connecting,address,new,find,connecting,address,config,timeout,thread,new,thread,find,connecting,address,thread,start,leader,election,service,leader,election,utils,create,leader,election,service,config,testing,contender,correct,leader,address,contender,new,testing,contender,correct,address,leader,election,service,thread,sleep,sleeping,time,faulty,leader,election,service,stop,leader,election,service,start,correct,leader,address,contender,thread,join,inet,address,result,find,connecting,address,get,inet,address,socket,socket,new,socket,try,socket,address,bind,p,new,inet,socket,address,result,0,socket,bind,bind,p,socket,connect,correct,inet,socket,address,1000,finally,socket,close,finally,if,leader,election,service,null,leader,election,service,stop
ZooKeeperLeaderRetrievalTest -> @Test 	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception;1445293011;Tests that LeaderRetrievalUtils.findConnectingAdress finds the correct connecting address_in case of an old leader address in ZooKeeper and a subsequent election of a new leader._The findConnectingAddress should block until the new leader has been elected and his_address has been written to ZooKeeper.;@Test_	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Configuration config = new Configuration()___		long sleepingTime = 1000___		config.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		config.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())___		LeaderElectionService leaderElectionService = null__		LeaderElectionService faultyLeaderElectionService___		ServerSocket serverSocket__		InetAddress localHost___		Thread thread___		CuratorFramework[] client = new CuratorFramework[2]___		try {_			client[0] = ZooKeeperUtils.startCuratorFramework(config)__			client[1] = ZooKeeperUtils.startCuratorFramework(config)___			InetSocketAddress wrongInetSocketAddress = new InetSocketAddress(InetAddress.getByName("1.1.1.1"), 1234)___			String wrongAddress = JobManager.getRemoteJobManagerAkkaURL(wrongInetSocketAddress, Option.<String>empty())___			try {_				localHost = InetAddress.getLocalHost()__				serverSocket = new ServerSocket(0, 50, localHost)__			} catch (UnknownHostException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}_			catch (IOException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}__			InetSocketAddress correctInetSocketAddress = new InetSocketAddress(localHost, serverSocket.getLocalPort())___			String correctAddress = JobManager.getRemoteJobManagerAkkaURL(correctInetSocketAddress, Option.<String>empty())___			faultyLeaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[0], config)__			TestingContender wrongLeaderAddressContender = new TestingContender(wrongAddress, faultyLeaderElectionService)___			faultyLeaderElectionService.start(wrongLeaderAddressContender)___			FindConnectingAddress findConnectingAddress = new FindConnectingAddress(config, timeout)___			thread = new Thread(findConnectingAddress)___			thread.start()___			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[1], config)__			TestingContender correctLeaderAddressContender = new TestingContender(correctAddress, leaderElectionService)___			Thread.sleep(sleepingTime)___			faultyLeaderElectionService.stop()___			leaderElectionService.start(correctLeaderAddressContender)___			thread.join()___			InetAddress result = findConnectingAddress.getInetAddress()___			_			Socket socket = new Socket()__			try {_				_				SocketAddress bindP = new InetSocketAddress(result, 0)__				_				socket.bind(bindP)__				socket.connect(correctInetSocketAddress, 1000)__			} finally {_				socket.close()__			}_		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (client[0] != null) {_				client[0].close()__			}__			if (client[1] != null) {_				client[1].close()__			}_		}_	};tests,that,leader,retrieval,utils,find,connecting,adress,finds,the,correct,connecting,address,in,case,of,an,old,leader,address,in,zoo,keeper,and,a,subsequent,election,of,a,new,leader,the,find,connecting,address,should,block,until,the,new,leader,has,been,elected,and,his,address,has,been,written,to,zoo,keeper;test,public,void,test,connecting,address,retrieval,with,delayed,leader,election,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,configuration,config,new,configuration,long,sleeping,time,1000,config,set,string,config,constants,zookeeper,config,set,string,config,constants,testing,server,get,connect,string,leader,election,service,leader,election,service,null,leader,election,service,faulty,leader,election,service,server,socket,server,socket,inet,address,local,host,thread,thread,curator,framework,client,new,curator,framework,2,try,client,0,zoo,keeper,utils,start,curator,framework,config,client,1,zoo,keeper,utils,start,curator,framework,config,inet,socket,address,wrong,inet,socket,address,new,inet,socket,address,inet,address,get,by,name,1,1,1,1,1234,string,wrong,address,job,manager,get,remote,job,manager,akka,url,wrong,inet,socket,address,option,string,empty,try,local,host,inet,address,get,local,host,server,socket,new,server,socket,0,50,local,host,catch,unknown,host,exception,e,system,err,println,skipping,test,network,interface,selection,test,return,catch,ioexception,e,system,err,println,skipping,test,network,interface,selection,test,return,inet,socket,address,correct,inet,socket,address,new,inet,socket,address,local,host,server,socket,get,local,port,string,correct,address,job,manager,get,remote,job,manager,akka,url,correct,inet,socket,address,option,string,empty,faulty,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,0,config,testing,contender,wrong,leader,address,contender,new,testing,contender,wrong,address,faulty,leader,election,service,faulty,leader,election,service,start,wrong,leader,address,contender,find,connecting,address,find,connecting,address,new,find,connecting,address,config,timeout,thread,new,thread,find,connecting,address,thread,start,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,1,config,testing,contender,correct,leader,address,contender,new,testing,contender,correct,address,leader,election,service,thread,sleep,sleeping,time,faulty,leader,election,service,stop,leader,election,service,start,correct,leader,address,contender,thread,join,inet,address,result,find,connecting,address,get,inet,address,socket,socket,new,socket,try,socket,address,bind,p,new,inet,socket,address,result,0,socket,bind,bind,p,socket,connect,correct,inet,socket,address,1000,finally,socket,close,finally,if,leader,election,service,null,leader,election,service,stop,if,client,0,null,client,0,close,if,client,1,null,client,1,close
ZooKeeperLeaderRetrievalTest -> @Test 	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception;1472033364;Tests that LeaderRetrievalUtils.findConnectingAdress finds the correct connecting address_in case of an old leader address in ZooKeeper and a subsequent election of a new leader._The findConnectingAddress should block until the new leader has been elected and his_address has been written to ZooKeeper.;@Test_	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Configuration config = new Configuration()___		long sleepingTime = 1000___		config.setString(ConfigConstants.HIGH_AVAILABILITY, "zookeeper")__		config.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())___		LeaderElectionService leaderElectionService = null__		LeaderElectionService faultyLeaderElectionService___		ServerSocket serverSocket__		InetAddress localHost___		Thread thread___		CuratorFramework[] client = new CuratorFramework[2]___		try {_			client[0] = ZooKeeperUtils.startCuratorFramework(config)__			client[1] = ZooKeeperUtils.startCuratorFramework(config)___			InetSocketAddress wrongInetSocketAddress = new InetSocketAddress(InetAddress.getByName("1.1.1.1"), 1234)___			String wrongAddress = JobManager.getRemoteJobManagerAkkaURL(wrongInetSocketAddress, Option.<String>empty())___			try {_				localHost = InetAddress.getLocalHost()__				serverSocket = new ServerSocket(0, 50, localHost)__			} catch (UnknownHostException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}_			catch (IOException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}__			InetSocketAddress correctInetSocketAddress = new InetSocketAddress(localHost, serverSocket.getLocalPort())___			String correctAddress = JobManager.getRemoteJobManagerAkkaURL(correctInetSocketAddress, Option.<String>empty())___			faultyLeaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[0], config)__			TestingContender wrongLeaderAddressContender = new TestingContender(wrongAddress, faultyLeaderElectionService)___			faultyLeaderElectionService.start(wrongLeaderAddressContender)___			FindConnectingAddress findConnectingAddress = new FindConnectingAddress(config, timeout)___			thread = new Thread(findConnectingAddress)___			thread.start()___			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[1], config)__			TestingContender correctLeaderAddressContender = new TestingContender(correctAddress, leaderElectionService)___			Thread.sleep(sleepingTime)___			faultyLeaderElectionService.stop()___			leaderElectionService.start(correctLeaderAddressContender)___			thread.join()___			InetAddress result = findConnectingAddress.getInetAddress()___			_			Socket socket = new Socket()__			try {_				_				SocketAddress bindP = new InetSocketAddress(result, 0)__				_				socket.bind(bindP)__				socket.connect(correctInetSocketAddress, 1000)__			} finally {_				socket.close()__			}_		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (client[0] != null) {_				client[0].close()__			}__			if (client[1] != null) {_				client[1].close()__			}_		}_	};tests,that,leader,retrieval,utils,find,connecting,adress,finds,the,correct,connecting,address,in,case,of,an,old,leader,address,in,zoo,keeper,and,a,subsequent,election,of,a,new,leader,the,find,connecting,address,should,block,until,the,new,leader,has,been,elected,and,his,address,has,been,written,to,zoo,keeper;test,public,void,test,connecting,address,retrieval,with,delayed,leader,election,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,configuration,config,new,configuration,long,sleeping,time,1000,config,set,string,config,constants,zookeeper,config,set,string,config,constants,testing,server,get,connect,string,leader,election,service,leader,election,service,null,leader,election,service,faulty,leader,election,service,server,socket,server,socket,inet,address,local,host,thread,thread,curator,framework,client,new,curator,framework,2,try,client,0,zoo,keeper,utils,start,curator,framework,config,client,1,zoo,keeper,utils,start,curator,framework,config,inet,socket,address,wrong,inet,socket,address,new,inet,socket,address,inet,address,get,by,name,1,1,1,1,1234,string,wrong,address,job,manager,get,remote,job,manager,akka,url,wrong,inet,socket,address,option,string,empty,try,local,host,inet,address,get,local,host,server,socket,new,server,socket,0,50,local,host,catch,unknown,host,exception,e,system,err,println,skipping,test,network,interface,selection,test,return,catch,ioexception,e,system,err,println,skipping,test,network,interface,selection,test,return,inet,socket,address,correct,inet,socket,address,new,inet,socket,address,local,host,server,socket,get,local,port,string,correct,address,job,manager,get,remote,job,manager,akka,url,correct,inet,socket,address,option,string,empty,faulty,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,0,config,testing,contender,wrong,leader,address,contender,new,testing,contender,wrong,address,faulty,leader,election,service,faulty,leader,election,service,start,wrong,leader,address,contender,find,connecting,address,find,connecting,address,new,find,connecting,address,config,timeout,thread,new,thread,find,connecting,address,thread,start,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,1,config,testing,contender,correct,leader,address,contender,new,testing,contender,correct,address,leader,election,service,thread,sleep,sleeping,time,faulty,leader,election,service,stop,leader,election,service,start,correct,leader,address,contender,thread,join,inet,address,result,find,connecting,address,get,inet,address,socket,socket,new,socket,try,socket,address,bind,p,new,inet,socket,address,result,0,socket,bind,bind,p,socket,connect,correct,inet,socket,address,1000,finally,socket,close,finally,if,leader,election,service,null,leader,election,service,stop,if,client,0,null,client,0,close,if,client,1,null,client,1,close
ZooKeeperLeaderRetrievalTest -> @Test 	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception;1472033371;Tests that LeaderRetrievalUtils.findConnectingAdress finds the correct connecting address_in case of an old leader address in ZooKeeper and a subsequent election of a new leader._The findConnectingAddress should block until the new leader has been elected and his_address has been written to ZooKeeper.;@Test_	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Configuration config = new Configuration()___		long sleepingTime = 1000___		config.setString(ConfigConstants.HA_MODE, "zookeeper")__		config.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())___		LeaderElectionService leaderElectionService = null__		LeaderElectionService faultyLeaderElectionService___		ServerSocket serverSocket__		InetAddress localHost___		Thread thread___		CuratorFramework[] client = new CuratorFramework[2]___		try {_			client[0] = ZooKeeperUtils.startCuratorFramework(config)__			client[1] = ZooKeeperUtils.startCuratorFramework(config)___			InetSocketAddress wrongInetSocketAddress = new InetSocketAddress(InetAddress.getByName("1.1.1.1"), 1234)___			String wrongAddress = JobManager.getRemoteJobManagerAkkaURL(wrongInetSocketAddress, Option.<String>empty())___			try {_				localHost = InetAddress.getLocalHost()__				serverSocket = new ServerSocket(0, 50, localHost)__			} catch (UnknownHostException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}_			catch (IOException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}__			InetSocketAddress correctInetSocketAddress = new InetSocketAddress(localHost, serverSocket.getLocalPort())___			String correctAddress = JobManager.getRemoteJobManagerAkkaURL(correctInetSocketAddress, Option.<String>empty())___			faultyLeaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[0], config)__			TestingContender wrongLeaderAddressContender = new TestingContender(wrongAddress, faultyLeaderElectionService)___			faultyLeaderElectionService.start(wrongLeaderAddressContender)___			FindConnectingAddress findConnectingAddress = new FindConnectingAddress(config, timeout)___			thread = new Thread(findConnectingAddress)___			thread.start()___			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[1], config)__			TestingContender correctLeaderAddressContender = new TestingContender(correctAddress, leaderElectionService)___			Thread.sleep(sleepingTime)___			faultyLeaderElectionService.stop()___			leaderElectionService.start(correctLeaderAddressContender)___			thread.join()___			InetAddress result = findConnectingAddress.getInetAddress()___			_			Socket socket = new Socket()__			try {_				_				SocketAddress bindP = new InetSocketAddress(result, 0)__				_				socket.bind(bindP)__				socket.connect(correctInetSocketAddress, 1000)__			} finally {_				socket.close()__			}_		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (client[0] != null) {_				client[0].close()__			}__			if (client[1] != null) {_				client[1].close()__			}_		}_	};tests,that,leader,retrieval,utils,find,connecting,adress,finds,the,correct,connecting,address,in,case,of,an,old,leader,address,in,zoo,keeper,and,a,subsequent,election,of,a,new,leader,the,find,connecting,address,should,block,until,the,new,leader,has,been,elected,and,his,address,has,been,written,to,zoo,keeper;test,public,void,test,connecting,address,retrieval,with,delayed,leader,election,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,configuration,config,new,configuration,long,sleeping,time,1000,config,set,string,config,constants,zookeeper,config,set,string,config,constants,testing,server,get,connect,string,leader,election,service,leader,election,service,null,leader,election,service,faulty,leader,election,service,server,socket,server,socket,inet,address,local,host,thread,thread,curator,framework,client,new,curator,framework,2,try,client,0,zoo,keeper,utils,start,curator,framework,config,client,1,zoo,keeper,utils,start,curator,framework,config,inet,socket,address,wrong,inet,socket,address,new,inet,socket,address,inet,address,get,by,name,1,1,1,1,1234,string,wrong,address,job,manager,get,remote,job,manager,akka,url,wrong,inet,socket,address,option,string,empty,try,local,host,inet,address,get,local,host,server,socket,new,server,socket,0,50,local,host,catch,unknown,host,exception,e,system,err,println,skipping,test,network,interface,selection,test,return,catch,ioexception,e,system,err,println,skipping,test,network,interface,selection,test,return,inet,socket,address,correct,inet,socket,address,new,inet,socket,address,local,host,server,socket,get,local,port,string,correct,address,job,manager,get,remote,job,manager,akka,url,correct,inet,socket,address,option,string,empty,faulty,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,0,config,testing,contender,wrong,leader,address,contender,new,testing,contender,wrong,address,faulty,leader,election,service,faulty,leader,election,service,start,wrong,leader,address,contender,find,connecting,address,find,connecting,address,new,find,connecting,address,config,timeout,thread,new,thread,find,connecting,address,thread,start,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,1,config,testing,contender,correct,leader,address,contender,new,testing,contender,correct,address,leader,election,service,thread,sleep,sleeping,time,faulty,leader,election,service,stop,leader,election,service,start,correct,leader,address,contender,thread,join,inet,address,result,find,connecting,address,get,inet,address,socket,socket,new,socket,try,socket,address,bind,p,new,inet,socket,address,result,0,socket,bind,bind,p,socket,connect,correct,inet,socket,address,1000,finally,socket,close,finally,if,leader,election,service,null,leader,election,service,stop,if,client,0,null,client,0,close,if,client,1,null,client,1,close
ZooKeeperLeaderRetrievalTest -> @Test 	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception;1476095826;Tests that LeaderRetrievalUtils.findConnectingAdress finds the correct connecting address_in case of an old leader address in ZooKeeper and a subsequent election of a new leader._The findConnectingAddress should block until the new leader has been elected and his_address has been written to ZooKeeper.;@Test_	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Configuration config = new Configuration()___		long sleepingTime = 1000___		config.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		config.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())___		LeaderElectionService leaderElectionService = null__		LeaderElectionService faultyLeaderElectionService___		ServerSocket serverSocket__		InetAddress localHost___		Thread thread___		CuratorFramework[] client = new CuratorFramework[2]___		try {_			client[0] = ZooKeeperUtils.startCuratorFramework(config)__			client[1] = ZooKeeperUtils.startCuratorFramework(config)___			InetSocketAddress wrongInetSocketAddress = new InetSocketAddress(InetAddress.getByName("1.1.1.1"), 1234)___			String wrongAddress = JobManager.getRemoteJobManagerAkkaURL(wrongInetSocketAddress, Option.<String>empty())___			try {_				localHost = InetAddress.getLocalHost()__				serverSocket = new ServerSocket(0, 50, localHost)__			} catch (UnknownHostException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}_			catch (IOException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}__			InetSocketAddress correctInetSocketAddress = new InetSocketAddress(localHost, serverSocket.getLocalPort())___			String correctAddress = JobManager.getRemoteJobManagerAkkaURL(correctInetSocketAddress, Option.<String>empty())___			faultyLeaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[0], config)__			TestingContender wrongLeaderAddressContender = new TestingContender(wrongAddress, faultyLeaderElectionService)___			faultyLeaderElectionService.start(wrongLeaderAddressContender)___			FindConnectingAddress findConnectingAddress = new FindConnectingAddress(config, timeout)___			thread = new Thread(findConnectingAddress)___			thread.start()___			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[1], config)__			TestingContender correctLeaderAddressContender = new TestingContender(correctAddress, leaderElectionService)___			Thread.sleep(sleepingTime)___			faultyLeaderElectionService.stop()___			leaderElectionService.start(correctLeaderAddressContender)___			thread.join()___			InetAddress result = findConnectingAddress.getInetAddress()___			_			Socket socket = new Socket()__			try {_				_				SocketAddress bindP = new InetSocketAddress(result, 0)__				_				socket.bind(bindP)__				socket.connect(correctInetSocketAddress, 1000)__			} finally {_				socket.close()__			}_		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (client[0] != null) {_				client[0].close()__			}__			if (client[1] != null) {_				client[1].close()__			}_		}_	};tests,that,leader,retrieval,utils,find,connecting,adress,finds,the,correct,connecting,address,in,case,of,an,old,leader,address,in,zoo,keeper,and,a,subsequent,election,of,a,new,leader,the,find,connecting,address,should,block,until,the,new,leader,has,been,elected,and,his,address,has,been,written,to,zoo,keeper;test,public,void,test,connecting,address,retrieval,with,delayed,leader,election,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,configuration,config,new,configuration,long,sleeping,time,1000,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,testing,server,get,connect,string,leader,election,service,leader,election,service,null,leader,election,service,faulty,leader,election,service,server,socket,server,socket,inet,address,local,host,thread,thread,curator,framework,client,new,curator,framework,2,try,client,0,zoo,keeper,utils,start,curator,framework,config,client,1,zoo,keeper,utils,start,curator,framework,config,inet,socket,address,wrong,inet,socket,address,new,inet,socket,address,inet,address,get,by,name,1,1,1,1,1234,string,wrong,address,job,manager,get,remote,job,manager,akka,url,wrong,inet,socket,address,option,string,empty,try,local,host,inet,address,get,local,host,server,socket,new,server,socket,0,50,local,host,catch,unknown,host,exception,e,system,err,println,skipping,test,network,interface,selection,test,return,catch,ioexception,e,system,err,println,skipping,test,network,interface,selection,test,return,inet,socket,address,correct,inet,socket,address,new,inet,socket,address,local,host,server,socket,get,local,port,string,correct,address,job,manager,get,remote,job,manager,akka,url,correct,inet,socket,address,option,string,empty,faulty,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,0,config,testing,contender,wrong,leader,address,contender,new,testing,contender,wrong,address,faulty,leader,election,service,faulty,leader,election,service,start,wrong,leader,address,contender,find,connecting,address,find,connecting,address,new,find,connecting,address,config,timeout,thread,new,thread,find,connecting,address,thread,start,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,1,config,testing,contender,correct,leader,address,contender,new,testing,contender,correct,address,leader,election,service,thread,sleep,sleeping,time,faulty,leader,election,service,stop,leader,election,service,start,correct,leader,address,contender,thread,join,inet,address,result,find,connecting,address,get,inet,address,socket,socket,new,socket,try,socket,address,bind,p,new,inet,socket,address,result,0,socket,bind,bind,p,socket,connect,correct,inet,socket,address,1000,finally,socket,close,finally,if,leader,election,service,null,leader,election,service,stop,if,client,0,null,client,0,close,if,client,1,null,client,1,close
ZooKeeperLeaderRetrievalTest -> @Test 	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception;1476696544;Tests that LeaderRetrievalUtils.findConnectingAdress finds the correct connecting address_in case of an old leader address in ZooKeeper and a subsequent election of a new leader._The findConnectingAddress should block until the new leader has been elected and his_address has been written to ZooKeeper.;@Test_	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Configuration config = new Configuration()___		long sleepingTime = 1000___		config.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		config.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())___		LeaderElectionService leaderElectionService = null__		LeaderElectionService faultyLeaderElectionService___		ServerSocket serverSocket__		InetAddress localHost___		Thread thread___		CuratorFramework[] client = new CuratorFramework[2]___		try {_			client[0] = ZooKeeperUtils.startCuratorFramework(config)__			client[1] = ZooKeeperUtils.startCuratorFramework(config)___			InetSocketAddress wrongInetSocketAddress = new InetSocketAddress(InetAddress.getByName("1.1.1.1"), 1234)___			String wrongAddress = JobManager.getRemoteJobManagerAkkaURL(AkkaUtils.getAkkaProtocol(config),_					wrongInetSocketAddress, Option.<String>empty())___			try {_				localHost = InetAddress.getLocalHost()__				serverSocket = new ServerSocket(0, 50, localHost)__			} catch (UnknownHostException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}_			catch (IOException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}__			InetSocketAddress correctInetSocketAddress = new InetSocketAddress(localHost, serverSocket.getLocalPort())___			String correctAddress = JobManager.getRemoteJobManagerAkkaURL(AkkaUtils.getAkkaProtocol(config),_					correctInetSocketAddress, Option.<String>empty())___			faultyLeaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[0], config)__			TestingContender wrongLeaderAddressContender = new TestingContender(wrongAddress, faultyLeaderElectionService)___			faultyLeaderElectionService.start(wrongLeaderAddressContender)___			FindConnectingAddress findConnectingAddress = new FindConnectingAddress(config, timeout)___			thread = new Thread(findConnectingAddress)___			thread.start()___			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[1], config)__			TestingContender correctLeaderAddressContender = new TestingContender(correctAddress, leaderElectionService)___			Thread.sleep(sleepingTime)___			faultyLeaderElectionService.stop()___			leaderElectionService.start(correctLeaderAddressContender)___			thread.join()___			InetAddress result = findConnectingAddress.getInetAddress()___			_			Socket socket = new Socket()__			try {_				_				SocketAddress bindP = new InetSocketAddress(result, 0)__				_				socket.bind(bindP)__				socket.connect(correctInetSocketAddress, 1000)__			} finally {_				socket.close()__			}_		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (client[0] != null) {_				client[0].close()__			}__			if (client[1] != null) {_				client[1].close()__			}_		}_	};tests,that,leader,retrieval,utils,find,connecting,adress,finds,the,correct,connecting,address,in,case,of,an,old,leader,address,in,zoo,keeper,and,a,subsequent,election,of,a,new,leader,the,find,connecting,address,should,block,until,the,new,leader,has,been,elected,and,his,address,has,been,written,to,zoo,keeper;test,public,void,test,connecting,address,retrieval,with,delayed,leader,election,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,configuration,config,new,configuration,long,sleeping,time,1000,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,testing,server,get,connect,string,leader,election,service,leader,election,service,null,leader,election,service,faulty,leader,election,service,server,socket,server,socket,inet,address,local,host,thread,thread,curator,framework,client,new,curator,framework,2,try,client,0,zoo,keeper,utils,start,curator,framework,config,client,1,zoo,keeper,utils,start,curator,framework,config,inet,socket,address,wrong,inet,socket,address,new,inet,socket,address,inet,address,get,by,name,1,1,1,1,1234,string,wrong,address,job,manager,get,remote,job,manager,akka,url,akka,utils,get,akka,protocol,config,wrong,inet,socket,address,option,string,empty,try,local,host,inet,address,get,local,host,server,socket,new,server,socket,0,50,local,host,catch,unknown,host,exception,e,system,err,println,skipping,test,network,interface,selection,test,return,catch,ioexception,e,system,err,println,skipping,test,network,interface,selection,test,return,inet,socket,address,correct,inet,socket,address,new,inet,socket,address,local,host,server,socket,get,local,port,string,correct,address,job,manager,get,remote,job,manager,akka,url,akka,utils,get,akka,protocol,config,correct,inet,socket,address,option,string,empty,faulty,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,0,config,testing,contender,wrong,leader,address,contender,new,testing,contender,wrong,address,faulty,leader,election,service,faulty,leader,election,service,start,wrong,leader,address,contender,find,connecting,address,find,connecting,address,new,find,connecting,address,config,timeout,thread,new,thread,find,connecting,address,thread,start,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,1,config,testing,contender,correct,leader,address,contender,new,testing,contender,correct,address,leader,election,service,thread,sleep,sleeping,time,faulty,leader,election,service,stop,leader,election,service,start,correct,leader,address,contender,thread,join,inet,address,result,find,connecting,address,get,inet,address,socket,socket,new,socket,try,socket,address,bind,p,new,inet,socket,address,result,0,socket,bind,bind,p,socket,connect,correct,inet,socket,address,1000,finally,socket,close,finally,if,leader,election,service,null,leader,election,service,stop,if,client,0,null,client,0,close,if,client,1,null,client,1,close
ZooKeeperLeaderRetrievalTest -> @Test 	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception;1481907119;Tests that LeaderRetrievalUtils.findConnectingAdress finds the correct connecting address_in case of an old leader address in ZooKeeper and a subsequent election of a new leader._The findConnectingAddress should block until the new leader has been elected and his_address has been written to ZooKeeper.;@Test_	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Configuration config = new Configuration()___		long sleepingTime = 1000___		config.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		config.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())___		LeaderElectionService leaderElectionService = null__		LeaderElectionService faultyLeaderElectionService___		ServerSocket serverSocket__		InetAddress localHost___		Thread thread___		CuratorFramework[] client = new CuratorFramework[2]___		try {_			client[0] = ZooKeeperUtils.startCuratorFramework(config)__			client[1] = ZooKeeperUtils.startCuratorFramework(config)___			String wrongHostPort = NetUtils.unresolvedHostAndPortToNormalizedString("1.1.1.1", 1234)___			String wrongAddress = JobManager.getRemoteJobManagerAkkaURL(AkkaUtils.getAkkaProtocol(config),_					wrongHostPort, Option.<String>empty())___			try {_				localHost = InetAddress.getLocalHost()__				serverSocket = new ServerSocket(0, 50, localHost)__			} catch (UnknownHostException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}_			catch (IOException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}__			InetSocketAddress correctInetSocketAddress = new InetSocketAddress(localHost, serverSocket.getLocalPort())__			String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(localHost.getHostName(), correctInetSocketAddress.getPort())___			String correctAddress = JobManager.getRemoteJobManagerAkkaURL(AkkaUtils.getAkkaProtocol(config),_				hostPort, Option.<String>empty())___			faultyLeaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[0], config)__			TestingContender wrongLeaderAddressContender = new TestingContender(wrongAddress, faultyLeaderElectionService)___			faultyLeaderElectionService.start(wrongLeaderAddressContender)___			FindConnectingAddress findConnectingAddress = new FindConnectingAddress(config, timeout)___			thread = new Thread(findConnectingAddress)___			thread.start()___			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[1], config)__			TestingContender correctLeaderAddressContender = new TestingContender(correctAddress, leaderElectionService)___			Thread.sleep(sleepingTime)___			faultyLeaderElectionService.stop()___			leaderElectionService.start(correctLeaderAddressContender)___			thread.join()___			InetAddress result = findConnectingAddress.getInetAddress()___			_			Socket socket = new Socket()__			try {_				_				SocketAddress bindP = new InetSocketAddress(result, 0)__				_				socket.bind(bindP)__				socket.connect(correctInetSocketAddress, 1000)__			} finally {_				socket.close()__			}_		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (client[0] != null) {_				client[0].close()__			}__			if (client[1] != null) {_				client[1].close()__			}_		}_	};tests,that,leader,retrieval,utils,find,connecting,adress,finds,the,correct,connecting,address,in,case,of,an,old,leader,address,in,zoo,keeper,and,a,subsequent,election,of,a,new,leader,the,find,connecting,address,should,block,until,the,new,leader,has,been,elected,and,his,address,has,been,written,to,zoo,keeper;test,public,void,test,connecting,address,retrieval,with,delayed,leader,election,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,configuration,config,new,configuration,long,sleeping,time,1000,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,testing,server,get,connect,string,leader,election,service,leader,election,service,null,leader,election,service,faulty,leader,election,service,server,socket,server,socket,inet,address,local,host,thread,thread,curator,framework,client,new,curator,framework,2,try,client,0,zoo,keeper,utils,start,curator,framework,config,client,1,zoo,keeper,utils,start,curator,framework,config,string,wrong,host,port,net,utils,unresolved,host,and,port,to,normalized,string,1,1,1,1,1234,string,wrong,address,job,manager,get,remote,job,manager,akka,url,akka,utils,get,akka,protocol,config,wrong,host,port,option,string,empty,try,local,host,inet,address,get,local,host,server,socket,new,server,socket,0,50,local,host,catch,unknown,host,exception,e,system,err,println,skipping,test,network,interface,selection,test,return,catch,ioexception,e,system,err,println,skipping,test,network,interface,selection,test,return,inet,socket,address,correct,inet,socket,address,new,inet,socket,address,local,host,server,socket,get,local,port,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,local,host,get,host,name,correct,inet,socket,address,get,port,string,correct,address,job,manager,get,remote,job,manager,akka,url,akka,utils,get,akka,protocol,config,host,port,option,string,empty,faulty,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,0,config,testing,contender,wrong,leader,address,contender,new,testing,contender,wrong,address,faulty,leader,election,service,faulty,leader,election,service,start,wrong,leader,address,contender,find,connecting,address,find,connecting,address,new,find,connecting,address,config,timeout,thread,new,thread,find,connecting,address,thread,start,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,1,config,testing,contender,correct,leader,address,contender,new,testing,contender,correct,address,leader,election,service,thread,sleep,sleeping,time,faulty,leader,election,service,stop,leader,election,service,start,correct,leader,address,contender,thread,join,inet,address,result,find,connecting,address,get,inet,address,socket,socket,new,socket,try,socket,address,bind,p,new,inet,socket,address,result,0,socket,bind,bind,p,socket,connect,correct,inet,socket,address,1000,finally,socket,close,finally,if,leader,election,service,null,leader,election,service,stop,if,client,0,null,client,0,close,if,client,1,null,client,1,close
ZooKeeperLeaderRetrievalTest -> @Test 	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception;1493975155;Tests that LeaderRetrievalUtils.findConnectingAdress finds the correct connecting address_in case of an old leader address in ZooKeeper and a subsequent election of a new leader._The findConnectingAddress should block until the new leader has been elected and his_address has been written to ZooKeeper.;@Test_	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)__		Configuration config = new Configuration()___		long sleepingTime = 1000___		config.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		config.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())___		LeaderElectionService leaderElectionService = null__		LeaderElectionService faultyLeaderElectionService___		ServerSocket serverSocket__		InetAddress localHost___		Thread thread___		CuratorFramework[] client = new CuratorFramework[2]___		try {_			client[0] = ZooKeeperUtils.startCuratorFramework(config)__			client[1] = ZooKeeperUtils.startCuratorFramework(config)___			String wrongAddress = AkkaRpcServiceUtils.getRpcUrl(_				"1.1.1.1",_				1234,_				"foobar",_				HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION,_				config)___			try {_				localHost = InetAddress.getLocalHost()__				serverSocket = new ServerSocket(0, 50, localHost)__			} catch (UnknownHostException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}_			catch (IOException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}__			InetSocketAddress correctInetSocketAddress = new InetSocketAddress(localHost, serverSocket.getLocalPort())__			String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(localHost.getHostName(), correctInetSocketAddress.getPort())___			String correctAddress = AkkaRpcServiceUtils.getRpcUrl(_				localHost.getHostName(),_				correctInetSocketAddress.getPort(),_				JobMaster.JOB_MANAGER_NAME,_				HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION,_				config)___			faultyLeaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[0], config)__			TestingContender wrongLeaderAddressContender = new TestingContender(wrongAddress, faultyLeaderElectionService)___			faultyLeaderElectionService.start(wrongLeaderAddressContender)___			FindConnectingAddress findConnectingAddress = new FindConnectingAddress(config, timeout)___			thread = new Thread(findConnectingAddress)___			thread.start()___			leaderElectionService = ZooKeeperUtils.createLeaderElectionService(client[1], config)__			TestingContender correctLeaderAddressContender = new TestingContender(correctAddress, leaderElectionService)___			Thread.sleep(sleepingTime)___			faultyLeaderElectionService.stop()___			leaderElectionService.start(correctLeaderAddressContender)___			thread.join()___			InetAddress result = findConnectingAddress.getInetAddress()___			_			Socket socket = new Socket()__			try {_				_				SocketAddress bindP = new InetSocketAddress(result, 0)__				_				socket.bind(bindP)__				socket.connect(correctInetSocketAddress, 1000)__			} finally {_				socket.close()__			}_		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}__			if (client[0] != null) {_				client[0].close()__			}__			if (client[1] != null) {_				client[1].close()__			}_		}_	};tests,that,leader,retrieval,utils,find,connecting,adress,finds,the,correct,connecting,address,in,case,of,an,old,leader,address,in,zoo,keeper,and,a,subsequent,election,of,a,new,leader,the,find,connecting,address,should,block,until,the,new,leader,has,been,elected,and,his,address,has,been,written,to,zoo,keeper;test,public,void,test,connecting,address,retrieval,with,delayed,leader,election,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,configuration,config,new,configuration,long,sleeping,time,1000,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,testing,server,get,connect,string,leader,election,service,leader,election,service,null,leader,election,service,faulty,leader,election,service,server,socket,server,socket,inet,address,local,host,thread,thread,curator,framework,client,new,curator,framework,2,try,client,0,zoo,keeper,utils,start,curator,framework,config,client,1,zoo,keeper,utils,start,curator,framework,config,string,wrong,address,akka,rpc,service,utils,get,rpc,url,1,1,1,1,1234,foobar,high,availability,services,utils,address,resolution,config,try,local,host,inet,address,get,local,host,server,socket,new,server,socket,0,50,local,host,catch,unknown,host,exception,e,system,err,println,skipping,test,network,interface,selection,test,return,catch,ioexception,e,system,err,println,skipping,test,network,interface,selection,test,return,inet,socket,address,correct,inet,socket,address,new,inet,socket,address,local,host,server,socket,get,local,port,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,local,host,get,host,name,correct,inet,socket,address,get,port,string,correct,address,akka,rpc,service,utils,get,rpc,url,local,host,get,host,name,correct,inet,socket,address,get,port,job,master,high,availability,services,utils,address,resolution,config,faulty,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,0,config,testing,contender,wrong,leader,address,contender,new,testing,contender,wrong,address,faulty,leader,election,service,faulty,leader,election,service,start,wrong,leader,address,contender,find,connecting,address,find,connecting,address,new,find,connecting,address,config,timeout,thread,new,thread,find,connecting,address,thread,start,leader,election,service,zoo,keeper,utils,create,leader,election,service,client,1,config,testing,contender,correct,leader,address,contender,new,testing,contender,correct,address,leader,election,service,thread,sleep,sleeping,time,faulty,leader,election,service,stop,leader,election,service,start,correct,leader,address,contender,thread,join,inet,address,result,find,connecting,address,get,inet,address,socket,socket,new,socket,try,socket,address,bind,p,new,inet,socket,address,result,0,socket,bind,bind,p,socket,connect,correct,inet,socket,address,1000,finally,socket,close,finally,if,leader,election,service,null,leader,election,service,stop,if,client,0,null,client,0,close,if,client,1,null,client,1,close
ZooKeeperLeaderRetrievalTest -> @Test 	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception;1493975167;Tests that LeaderRetrievalUtils.findConnectingAddress finds the correct connecting address_in case of an old leader address in ZooKeeper and a subsequent election of a new leader._The findConnectingAddress should block until the new leader has been elected and his_address has been written to ZooKeeper.;@Test_	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)___		long sleepingTime = 1000___		LeaderElectionService leaderElectionService = null__		LeaderElectionService faultyLeaderElectionService___		ServerSocket serverSocket__		InetAddress localHost___		Thread thread___		try {_			String wrongAddress = AkkaRpcServiceUtils.getRpcUrl(_				"1.1.1.1",_				1234,_				"foobar",_				HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION,_				config)___			try {_				localHost = InetAddress.getLocalHost()__				serverSocket = new ServerSocket(0, 50, localHost)__			} catch (UnknownHostException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}_			catch (IOException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}__			InetSocketAddress correctInetSocketAddress = new InetSocketAddress(localHost, serverSocket.getLocalPort())___			String correctAddress = AkkaRpcServiceUtils.getRpcUrl(_				localHost.getHostName(),_				correctInetSocketAddress.getPort(),_				JobMaster.JOB_MANAGER_NAME,_				HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION,_				config)___			faultyLeaderElectionService = highAvailabilityServices.getJobManagerLeaderElectionService(_				HighAvailabilityServices.DEFAULT_JOB_ID)__			TestingContender wrongLeaderAddressContender = new TestingContender(wrongAddress, faultyLeaderElectionService)___			faultyLeaderElectionService.start(wrongLeaderAddressContender)___			FindConnectingAddress findConnectingAddress = new FindConnectingAddress(_				timeout,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID))___			thread = new Thread(findConnectingAddress)___			thread.start()___			leaderElectionService = highAvailabilityServices.getJobManagerLeaderElectionService(HighAvailabilityServices.DEFAULT_JOB_ID)__			TestingContender correctLeaderAddressContender = new TestingContender(correctAddress, leaderElectionService)___			Thread.sleep(sleepingTime)___			faultyLeaderElectionService.stop()___			leaderElectionService.start(correctLeaderAddressContender)___			thread.join()___			InetAddress result = findConnectingAddress.getInetAddress()___			_			Socket socket = new Socket()__			try {_				_				SocketAddress bindP = new InetSocketAddress(result, 0)__				_				socket.bind(bindP)__				socket.connect(correctInetSocketAddress, 1000)__			} finally {_				socket.close()__			}_		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}_		}_	};tests,that,leader,retrieval,utils,find,connecting,address,finds,the,correct,connecting,address,in,case,of,an,old,leader,address,in,zoo,keeper,and,a,subsequent,election,of,a,new,leader,the,find,connecting,address,should,block,until,the,new,leader,has,been,elected,and,his,address,has,been,written,to,zoo,keeper;test,public,void,test,connecting,address,retrieval,with,delayed,leader,election,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,long,sleeping,time,1000,leader,election,service,leader,election,service,null,leader,election,service,faulty,leader,election,service,server,socket,server,socket,inet,address,local,host,thread,thread,try,string,wrong,address,akka,rpc,service,utils,get,rpc,url,1,1,1,1,1234,foobar,high,availability,services,utils,address,resolution,config,try,local,host,inet,address,get,local,host,server,socket,new,server,socket,0,50,local,host,catch,unknown,host,exception,e,system,err,println,skipping,test,network,interface,selection,test,return,catch,ioexception,e,system,err,println,skipping,test,network,interface,selection,test,return,inet,socket,address,correct,inet,socket,address,new,inet,socket,address,local,host,server,socket,get,local,port,string,correct,address,akka,rpc,service,utils,get,rpc,url,local,host,get,host,name,correct,inet,socket,address,get,port,job,master,high,availability,services,utils,address,resolution,config,faulty,leader,election,service,high,availability,services,get,job,manager,leader,election,service,high,availability,services,testing,contender,wrong,leader,address,contender,new,testing,contender,wrong,address,faulty,leader,election,service,faulty,leader,election,service,start,wrong,leader,address,contender,find,connecting,address,find,connecting,address,new,find,connecting,address,timeout,high,availability,services,get,job,manager,leader,retriever,high,availability,services,thread,new,thread,find,connecting,address,thread,start,leader,election,service,high,availability,services,get,job,manager,leader,election,service,high,availability,services,testing,contender,correct,leader,address,contender,new,testing,contender,correct,address,leader,election,service,thread,sleep,sleeping,time,faulty,leader,election,service,stop,leader,election,service,start,correct,leader,address,contender,thread,join,inet,address,result,find,connecting,address,get,inet,address,socket,socket,new,socket,try,socket,address,bind,p,new,inet,socket,address,result,0,socket,bind,bind,p,socket,connect,correct,inet,socket,address,1000,finally,socket,close,finally,if,leader,election,service,null,leader,election,service,stop
ZooKeeperLeaderRetrievalTest -> @Test 	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception;1495001929;Tests that LeaderRetrievalUtils.findConnectingAddress finds the correct connecting address_in case of an old leader address in ZooKeeper and a subsequent election of a new leader._The findConnectingAddress should block until the new leader has been elected and his_address has been written to ZooKeeper.;@Test_	public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception {_		FiniteDuration timeout = new FiniteDuration(1, TimeUnit.MINUTES)___		long sleepingTime = 1000___		LeaderElectionService leaderElectionService = null__		LeaderElectionService faultyLeaderElectionService___		ServerSocket serverSocket__		InetAddress localHost___		Thread thread___		try {_			String wrongAddress = AkkaRpcServiceUtils.getRpcUrl(_				"1.1.1.1",_				1234,_				"foobar",_				HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION,_				config)___			try {_				localHost = InetAddress.getLocalHost()__				serverSocket = new ServerSocket(0, 50, localHost)__			} catch (UnknownHostException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}_			catch (IOException e) {_				_				System.err.println("Skipping 'testNetworkInterfaceSelection' test.")__				return__			}__			InetSocketAddress correctInetSocketAddress = new InetSocketAddress(localHost, serverSocket.getLocalPort())___			String correctAddress = AkkaRpcServiceUtils.getRpcUrl(_				localHost.getHostName(),_				correctInetSocketAddress.getPort(),_				JobMaster.JOB_MANAGER_NAME,_				HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION,_				config)___			faultyLeaderElectionService = highAvailabilityServices.getJobManagerLeaderElectionService(_				HighAvailabilityServices.DEFAULT_JOB_ID)__			TestingContender wrongLeaderAddressContender = new TestingContender(wrongAddress, faultyLeaderElectionService)___			faultyLeaderElectionService.start(wrongLeaderAddressContender)___			FindConnectingAddress findConnectingAddress = new FindConnectingAddress(_				timeout,_				highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID))___			thread = new Thread(findConnectingAddress)___			thread.start()___			leaderElectionService = highAvailabilityServices.getJobManagerLeaderElectionService(HighAvailabilityServices.DEFAULT_JOB_ID)__			TestingContender correctLeaderAddressContender = new TestingContender(correctAddress, leaderElectionService)___			Thread.sleep(sleepingTime)___			faultyLeaderElectionService.stop()___			leaderElectionService.start(correctLeaderAddressContender)___			thread.join()___			InetAddress result = findConnectingAddress.getInetAddress()___			_			Socket socket = new Socket()__			try {_				_				SocketAddress bindP = new InetSocketAddress(result, 0)__				_				socket.bind(bindP)__				socket.connect(correctInetSocketAddress, 1000)__			} finally {_				socket.close()__			}_		} finally {_			if (leaderElectionService != null) {_				leaderElectionService.stop()__			}_		}_	};tests,that,leader,retrieval,utils,find,connecting,address,finds,the,correct,connecting,address,in,case,of,an,old,leader,address,in,zoo,keeper,and,a,subsequent,election,of,a,new,leader,the,find,connecting,address,should,block,until,the,new,leader,has,been,elected,and,his,address,has,been,written,to,zoo,keeper;test,public,void,test,connecting,address,retrieval,with,delayed,leader,election,throws,exception,finite,duration,timeout,new,finite,duration,1,time,unit,minutes,long,sleeping,time,1000,leader,election,service,leader,election,service,null,leader,election,service,faulty,leader,election,service,server,socket,server,socket,inet,address,local,host,thread,thread,try,string,wrong,address,akka,rpc,service,utils,get,rpc,url,1,1,1,1,1234,foobar,high,availability,services,utils,address,resolution,config,try,local,host,inet,address,get,local,host,server,socket,new,server,socket,0,50,local,host,catch,unknown,host,exception,e,system,err,println,skipping,test,network,interface,selection,test,return,catch,ioexception,e,system,err,println,skipping,test,network,interface,selection,test,return,inet,socket,address,correct,inet,socket,address,new,inet,socket,address,local,host,server,socket,get,local,port,string,correct,address,akka,rpc,service,utils,get,rpc,url,local,host,get,host,name,correct,inet,socket,address,get,port,job,master,high,availability,services,utils,address,resolution,config,faulty,leader,election,service,high,availability,services,get,job,manager,leader,election,service,high,availability,services,testing,contender,wrong,leader,address,contender,new,testing,contender,wrong,address,faulty,leader,election,service,faulty,leader,election,service,start,wrong,leader,address,contender,find,connecting,address,find,connecting,address,new,find,connecting,address,timeout,high,availability,services,get,job,manager,leader,retriever,high,availability,services,thread,new,thread,find,connecting,address,thread,start,leader,election,service,high,availability,services,get,job,manager,leader,election,service,high,availability,services,testing,contender,correct,leader,address,contender,new,testing,contender,correct,address,leader,election,service,thread,sleep,sleeping,time,faulty,leader,election,service,stop,leader,election,service,start,correct,leader,address,contender,thread,join,inet,address,result,find,connecting,address,get,inet,address,socket,socket,new,socket,try,socket,address,bind,p,new,inet,socket,address,result,0,socket,bind,bind,p,socket,connect,correct,inet,socket,address,1000,finally,socket,close,finally,if,leader,election,service,null,leader,election,service,stop
ZooKeeperLeaderRetrievalTest -> @Test 	public void testTimeoutOfFindConnectingAddress() throws Exception;1441011751;Tests that the LeaderRetrievalUtils.findConnectingAddress stops trying to find the_connecting address if no leader address has been specified. The call should return_then InetAddress.getLocalHost().;@Test_	public void testTimeoutOfFindConnectingAddress() throws Exception {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		config.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingCluster.getConnectString())___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		LeaderRetrievalService leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(config)__		InetAddress result = LeaderRetrievalUtils.findConnectingAddress(leaderRetrievalService, timeout)___		assertEquals(InetAddress.getLocalHost(), result)__	};tests,that,the,leader,retrieval,utils,find,connecting,address,stops,trying,to,find,the,connecting,address,if,no,leader,address,has,been,specified,the,call,should,return,then,inet,address,get,local,host;test,public,void,test,timeout,of,find,connecting,address,throws,exception,configuration,config,new,configuration,config,set,string,config,constants,zookeeper,config,set,string,config,constants,testing,cluster,get,connect,string,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,inet,address,result,leader,retrieval,utils,find,connecting,address,leader,retrieval,service,timeout,assert,equals,inet,address,get,local,host,result
ZooKeeperLeaderRetrievalTest -> @Test 	public void testTimeoutOfFindConnectingAddress() throws Exception;1442999318;Tests that the LeaderRetrievalUtils.findConnectingAddress stops trying to find the_connecting address if no leader address has been specified. The call should return_then InetAddress.getLocalHost().;@Test_	public void testTimeoutOfFindConnectingAddress() throws Exception {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		config.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		LeaderRetrievalService leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(config)__		InetAddress result = LeaderRetrievalUtils.findConnectingAddress(leaderRetrievalService, timeout)___		assertEquals(InetAddress.getLocalHost(), result)__	};tests,that,the,leader,retrieval,utils,find,connecting,address,stops,trying,to,find,the,connecting,address,if,no,leader,address,has,been,specified,the,call,should,return,then,inet,address,get,local,host;test,public,void,test,timeout,of,find,connecting,address,throws,exception,configuration,config,new,configuration,config,set,string,config,constants,zookeeper,config,set,string,config,constants,testing,server,get,connect,string,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,inet,address,result,leader,retrieval,utils,find,connecting,address,leader,retrieval,service,timeout,assert,equals,inet,address,get,local,host,result
ZooKeeperLeaderRetrievalTest -> @Test 	public void testTimeoutOfFindConnectingAddress() throws Exception;1445293011;Tests that the LeaderRetrievalUtils.findConnectingAddress stops trying to find the_connecting address if no leader address has been specified. The call should return_then InetAddress.getLocalHost().;@Test_	public void testTimeoutOfFindConnectingAddress() throws Exception {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.RECOVERY_MODE, "zookeeper")__		config.setString(ConfigConstants.ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		LeaderRetrievalService leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(config)__		InetAddress result = LeaderRetrievalUtils.findConnectingAddress(leaderRetrievalService, timeout)___		assertEquals(InetAddress.getLocalHost(), result)__	};tests,that,the,leader,retrieval,utils,find,connecting,address,stops,trying,to,find,the,connecting,address,if,no,leader,address,has,been,specified,the,call,should,return,then,inet,address,get,local,host;test,public,void,test,timeout,of,find,connecting,address,throws,exception,configuration,config,new,configuration,config,set,string,config,constants,zookeeper,config,set,string,config,constants,testing,server,get,connect,string,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,inet,address,result,leader,retrieval,utils,find,connecting,address,leader,retrieval,service,timeout,assert,equals,inet,address,get,local,host,result
ZooKeeperLeaderRetrievalTest -> @Test 	public void testTimeoutOfFindConnectingAddress() throws Exception;1472033364;Tests that the LeaderRetrievalUtils.findConnectingAddress stops trying to find the_connecting address if no leader address has been specified. The call should return_then InetAddress.getLocalHost().;@Test_	public void testTimeoutOfFindConnectingAddress() throws Exception {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.HIGH_AVAILABILITY, "zookeeper")__		config.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		LeaderRetrievalService leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(config)__		InetAddress result = LeaderRetrievalUtils.findConnectingAddress(leaderRetrievalService, timeout)___		assertEquals(InetAddress.getLocalHost(), result)__	};tests,that,the,leader,retrieval,utils,find,connecting,address,stops,trying,to,find,the,connecting,address,if,no,leader,address,has,been,specified,the,call,should,return,then,inet,address,get,local,host;test,public,void,test,timeout,of,find,connecting,address,throws,exception,configuration,config,new,configuration,config,set,string,config,constants,zookeeper,config,set,string,config,constants,testing,server,get,connect,string,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,inet,address,result,leader,retrieval,utils,find,connecting,address,leader,retrieval,service,timeout,assert,equals,inet,address,get,local,host,result
ZooKeeperLeaderRetrievalTest -> @Test 	public void testTimeoutOfFindConnectingAddress() throws Exception;1472033371;Tests that the LeaderRetrievalUtils.findConnectingAddress stops trying to find the_connecting address if no leader address has been specified. The call should return_then InetAddress.getLocalHost().;@Test_	public void testTimeoutOfFindConnectingAddress() throws Exception {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.HA_MODE, "zookeeper")__		config.setString(ConfigConstants.HA_ZOOKEEPER_QUORUM_KEY, testingServer.getConnectString())___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		LeaderRetrievalService leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(config)__		InetAddress result = LeaderRetrievalUtils.findConnectingAddress(leaderRetrievalService, timeout)___		assertEquals(InetAddress.getLocalHost(), result)__	};tests,that,the,leader,retrieval,utils,find,connecting,address,stops,trying,to,find,the,connecting,address,if,no,leader,address,has,been,specified,the,call,should,return,then,inet,address,get,local,host;test,public,void,test,timeout,of,find,connecting,address,throws,exception,configuration,config,new,configuration,config,set,string,config,constants,zookeeper,config,set,string,config,constants,testing,server,get,connect,string,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,inet,address,result,leader,retrieval,utils,find,connecting,address,leader,retrieval,service,timeout,assert,equals,inet,address,get,local,host,result
ZooKeeperLeaderRetrievalTest -> @Test 	public void testTimeoutOfFindConnectingAddress() throws Exception;1476095826;Tests that the LeaderRetrievalUtils.findConnectingAddress stops trying to find the_connecting address if no leader address has been specified. The call should return_then InetAddress.getLocalHost().;@Test_	public void testTimeoutOfFindConnectingAddress() throws Exception {_		Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		config.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		LeaderRetrievalService leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(config)__		InetAddress result = LeaderRetrievalUtils.findConnectingAddress(leaderRetrievalService, timeout)___		assertEquals(InetAddress.getLocalHost(), result)__	};tests,that,the,leader,retrieval,utils,find,connecting,address,stops,trying,to,find,the,connecting,address,if,no,leader,address,has,been,specified,the,call,should,return,then,inet,address,get,local,host;test,public,void,test,timeout,of,find,connecting,address,throws,exception,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,testing,server,get,connect,string,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,inet,address,result,leader,retrieval,utils,find,connecting,address,leader,retrieval,service,timeout,assert,equals,inet,address,get,local,host,result
ZooKeeperLeaderRetrievalTest -> @Test 	public void testTimeoutOfFindConnectingAddress() throws Exception;1476696544;Tests that the LeaderRetrievalUtils.findConnectingAddress stops trying to find the_connecting address if no leader address has been specified. The call should return_then InetAddress.getLocalHost().;@Test_	public void testTimeoutOfFindConnectingAddress() throws Exception {_		Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		config.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		LeaderRetrievalService leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(config)__		InetAddress result = LeaderRetrievalUtils.findConnectingAddress(leaderRetrievalService, timeout)___		assertEquals(InetAddress.getLocalHost(), result)__	};tests,that,the,leader,retrieval,utils,find,connecting,address,stops,trying,to,find,the,connecting,address,if,no,leader,address,has,been,specified,the,call,should,return,then,inet,address,get,local,host;test,public,void,test,timeout,of,find,connecting,address,throws,exception,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,testing,server,get,connect,string,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,inet,address,result,leader,retrieval,utils,find,connecting,address,leader,retrieval,service,timeout,assert,equals,inet,address,get,local,host,result
ZooKeeperLeaderRetrievalTest -> @Test 	public void testTimeoutOfFindConnectingAddress() throws Exception;1481907119;Tests that the LeaderRetrievalUtils.findConnectingAddress stops trying to find the_connecting address if no leader address has been specified. The call should return_then InetAddress.getLocalHost().;@Test_	public void testTimeoutOfFindConnectingAddress() throws Exception {_		Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		config.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		LeaderRetrievalService leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(config)__		InetAddress result = LeaderRetrievalUtils.findConnectingAddress(leaderRetrievalService, timeout)___		assertEquals(InetAddress.getLocalHost(), result)__	};tests,that,the,leader,retrieval,utils,find,connecting,address,stops,trying,to,find,the,connecting,address,if,no,leader,address,has,been,specified,the,call,should,return,then,inet,address,get,local,host;test,public,void,test,timeout,of,find,connecting,address,throws,exception,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,testing,server,get,connect,string,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,inet,address,result,leader,retrieval,utils,find,connecting,address,leader,retrieval,service,timeout,assert,equals,inet,address,get,local,host,result
ZooKeeperLeaderRetrievalTest -> @Test 	public void testTimeoutOfFindConnectingAddress() throws Exception;1493975155;Tests that the LeaderRetrievalUtils.findConnectingAddress stops trying to find the_connecting address if no leader address has been specified. The call should return_then InetAddress.getLocalHost().;@Test_	public void testTimeoutOfFindConnectingAddress() throws Exception {_		Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		config.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, testingServer.getConnectString())___		FiniteDuration timeout = new FiniteDuration(10, TimeUnit.SECONDS)___		LeaderRetrievalService leaderRetrievalService = LeaderRetrievalUtils.createLeaderRetrievalService(config, false)__		InetAddress result = LeaderRetrievalUtils.findConnectingAddress(leaderRetrievalService, timeout)___		assertEquals(InetAddress.getLocalHost(), result)__	};tests,that,the,leader,retrieval,utils,find,connecting,address,stops,trying,to,find,the,connecting,address,if,no,leader,address,has,been,specified,the,call,should,return,then,inet,address,get,local,host;test,public,void,test,timeout,of,find,connecting,address,throws,exception,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,testing,server,get,connect,string,finite,duration,timeout,new,finite,duration,10,time,unit,seconds,leader,retrieval,service,leader,retrieval,service,leader,retrieval,utils,create,leader,retrieval,service,config,false,inet,address,result,leader,retrieval,utils,find,connecting,address,leader,retrieval,service,timeout,assert,equals,inet,address,get,local,host,result
ZooKeeperLeaderRetrievalTest -> @Test 	public void testTimeoutOfFindConnectingAddress() throws Exception;1493975167;Tests that the LeaderRetrievalUtils.findConnectingAddress stops trying to find the_connecting address if no leader address has been specified. The call should return_then InetAddress.getLocalHost().;@Test_	public void testTimeoutOfFindConnectingAddress() throws Exception {_		FiniteDuration timeout = new FiniteDuration(10L, TimeUnit.SECONDS)___		LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID)__		InetAddress result = LeaderRetrievalUtils.findConnectingAddress(leaderRetrievalService, timeout)___		assertEquals(InetAddress.getLocalHost(), result)__	};tests,that,the,leader,retrieval,utils,find,connecting,address,stops,trying,to,find,the,connecting,address,if,no,leader,address,has,been,specified,the,call,should,return,then,inet,address,get,local,host;test,public,void,test,timeout,of,find,connecting,address,throws,exception,finite,duration,timeout,new,finite,duration,10l,time,unit,seconds,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,high,availability,services,inet,address,result,leader,retrieval,utils,find,connecting,address,leader,retrieval,service,timeout,assert,equals,inet,address,get,local,host,result
ZooKeeperLeaderRetrievalTest -> @Test 	public void testTimeoutOfFindConnectingAddress() throws Exception;1495001929;Tests that the LeaderRetrievalUtils.findConnectingAddress stops trying to find the_connecting address if no leader address has been specified. The call should return_then InetAddress.getLocalHost().;@Test_	public void testTimeoutOfFindConnectingAddress() throws Exception {_		FiniteDuration timeout = new FiniteDuration(10L, TimeUnit.SECONDS)___		LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID)__		InetAddress result = LeaderRetrievalUtils.findConnectingAddress(leaderRetrievalService, timeout)___		assertEquals(InetAddress.getLocalHost(), result)__	};tests,that,the,leader,retrieval,utils,find,connecting,address,stops,trying,to,find,the,connecting,address,if,no,leader,address,has,been,specified,the,call,should,return,then,inet,address,get,local,host;test,public,void,test,timeout,of,find,connecting,address,throws,exception,finite,duration,timeout,new,finite,duration,10l,time,unit,seconds,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,high,availability,services,inet,address,result,leader,retrieval,utils,find,connecting,address,leader,retrieval,service,timeout,assert,equals,inet,address,get,local,host,result
