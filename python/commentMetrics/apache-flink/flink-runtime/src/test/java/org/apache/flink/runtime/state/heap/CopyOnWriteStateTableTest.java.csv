# id;timestamp;commentText;codeText;commentWords;codeWords
CopyOnWriteStateTableTest -> @Test 	public void testIncrementalRehash();1489685642;This test triggers incremental rehash and tests for corruptions.;@Test_	public void testIncrementalRehash() {_		RegisteredBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		int insert = 0__		int remove = 0__		while (!stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())__		while (stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())___		for (int i = 0_ i < insert_ ++i) {_			if (i < remove) {_				Assert.assertFalse(stateTable.containsKey(i, 0))__			} else {_				Assert.assertTrue(stateTable.containsKey(i, 0))__			}_		}_	};this,test,triggers,incremental,rehash,and,tests,for,corruptions;test,public,void,test,incremental,rehash,registered,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,int,insert,0,int,remove,0,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,for,int,i,0,i,insert,i,if,i,remove,assert,assert,false,state,table,contains,key,i,0,else,assert,assert,true,state,table,contains,key,i,0
CopyOnWriteStateTableTest -> @Test 	public void testIncrementalRehash();1490721653;This test triggers incremental rehash and tests for corruptions.;@Test_	public void testIncrementalRehash() {_		RegisteredBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		int insert = 0__		int remove = 0__		while (!stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())__		while (stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())___		for (int i = 0_ i < insert_ ++i) {_			if (i < remove) {_				Assert.assertFalse(stateTable.containsKey(i, 0))__			} else {_				Assert.assertTrue(stateTable.containsKey(i, 0))__			}_		}_	};this,test,triggers,incremental,rehash,and,tests,for,corruptions;test,public,void,test,incremental,rehash,registered,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,int,insert,0,int,remove,0,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,for,int,i,0,i,insert,i,if,i,remove,assert,assert,false,state,table,contains,key,i,0,else,assert,assert,true,state,table,contains,key,i,0
CopyOnWriteStateTableTest -> @Test 	public void testIncrementalRehash();1494180263;This test triggers incremental rehash and tests for corruptions.;@Test_	public void testIncrementalRehash() {_		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		int insert = 0__		int remove = 0__		while (!stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())__		while (stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())___		for (int i = 0_ i < insert_ ++i) {_			if (i < remove) {_				Assert.assertFalse(stateTable.containsKey(i, 0))__			} else {_				Assert.assertTrue(stateTable.containsKey(i, 0))__			}_		}_	};this,test,triggers,incremental,rehash,and,tests,for,corruptions;test,public,void,test,incremental,rehash,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,int,insert,0,int,remove,0,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,for,int,i,0,i,insert,i,if,i,remove,assert,assert,false,state,table,contains,key,i,0,else,assert,assert,true,state,table,contains,key,i,0
CopyOnWriteStateTableTest -> @Test 	public void testIncrementalRehash();1505995902;This test triggers incremental rehash and tests for corruptions.;@Test_	public void testIncrementalRehash() {_		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		int insert = 0__		int remove = 0__		while (!stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())__		while (stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())___		for (int i = 0_ i < insert_ ++i) {_			if (i < remove) {_				Assert.assertFalse(stateTable.containsKey(i, 0))__			} else {_				Assert.assertTrue(stateTable.containsKey(i, 0))__			}_		}_	};this,test,triggers,incremental,rehash,and,tests,for,corruptions;test,public,void,test,incremental,rehash,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,int,insert,0,int,remove,0,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,for,int,i,0,i,insert,i,if,i,remove,assert,assert,false,state,table,contains,key,i,0,else,assert,assert,true,state,table,contains,key,i,0
CopyOnWriteStateTableTest -> @Test 	public void testIncrementalRehash();1529089579;This test triggers incremental rehash and tests for corruptions.;@Test_	public void testIncrementalRehash() {_		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		int insert = 0__		int remove = 0__		while (!stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())__		while (stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())___		for (int i = 0_ i < insert_ ++i) {_			if (i < remove) {_				Assert.assertFalse(stateTable.containsKey(i, 0))__			} else {_				Assert.assertTrue(stateTable.containsKey(i, 0))__			}_		}_	};this,test,triggers,incremental,rehash,and,tests,for,corruptions;test,public,void,test,incremental,rehash,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,int,insert,0,int,remove,0,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,for,int,i,0,i,insert,i,if,i,remove,assert,assert,false,state,table,contains,key,i,0,else,assert,assert,true,state,table,contains,key,i,0
CopyOnWriteStateTableTest -> @Test 	public void testIncrementalRehash();1531404901;This test triggers incremental rehash and tests for corruptions.;@Test_	public void testIncrementalRehash() {_		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyedBackendStateMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		int insert = 0__		int remove = 0__		while (!stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())__		while (stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())___		for (int i = 0_ i < insert_ ++i) {_			if (i < remove) {_				Assert.assertFalse(stateTable.containsKey(i, 0))__			} else {_				Assert.assertTrue(stateTable.containsKey(i, 0))__			}_		}_	};this,test,triggers,incremental,rehash,and,tests,for,corruptions;test,public,void,test,incremental,rehash,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,int,insert,0,int,remove,0,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,for,int,i,0,i,insert,i,if,i,remove,assert,assert,false,state,table,contains,key,i,0,else,assert,assert,true,state,table,contains,key,i,0
CopyOnWriteStateTableTest -> @Test 	public void testIncrementalRehash();1531771917;This test triggers incremental rehash and tests for corruptions.;@Test_	public void testIncrementalRehash() {_		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		int insert = 0__		int remove = 0__		while (!stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())__		while (stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())___		for (int i = 0_ i < insert_ ++i) {_			if (i < remove) {_				Assert.assertFalse(stateTable.containsKey(i, 0))__			} else {_				Assert.assertTrue(stateTable.containsKey(i, 0))__			}_		}_	};this,test,triggers,incremental,rehash,and,tests,for,corruptions;test,public,void,test,incremental,rehash,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,int,insert,0,int,remove,0,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,for,int,i,0,i,insert,i,if,i,remove,assert,assert,false,state,table,contains,key,i,0,else,assert,assert,true,state,table,contains,key,i,0
CopyOnWriteStateTableTest -> @Test 	public void testIncrementalRehash();1539149027;This test triggers incremental rehash and tests for corruptions.;@Test_	public void testIncrementalRehash() {_		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		int insert = 0__		int remove = 0__		while (!stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())__		while (stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())___		for (int i = 0_ i < insert_ ++i) {_			if (i < remove) {_				Assert.assertFalse(stateTable.containsKey(i, 0))__			} else {_				Assert.assertTrue(stateTable.containsKey(i, 0))__			}_		}_	};this,test,triggers,incremental,rehash,and,tests,for,corruptions;test,public,void,test,incremental,rehash,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,int,insert,0,int,remove,0,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,for,int,i,0,i,insert,i,if,i,remove,assert,assert,false,state,table,contains,key,i,0,else,assert,assert,true,state,table,contains,key,i,0
CopyOnWriteStateTableTest -> @Test 	public void testIncrementalRehash();1541669895;This test triggers incremental rehash and tests for corruptions.;@Test_	public void testIncrementalRehash() {_		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		int insert = 0__		int remove = 0__		while (!stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())__		while (stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())___		for (int i = 0_ i < insert_ ++i) {_			if (i < remove) {_				Assert.assertFalse(stateTable.containsKey(i, 0))__			} else {_				Assert.assertTrue(stateTable.containsKey(i, 0))__			}_		}_	};this,test,triggers,incremental,rehash,and,tests,for,corruptions;test,public,void,test,incremental,rehash,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,int,insert,0,int,remove,0,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,for,int,i,0,i,insert,i,if,i,remove,assert,assert,false,state,table,contains,key,i,0,else,assert,assert,true,state,table,contains,key,i,0
CopyOnWriteStateTableTest -> @Test 	public void testIncrementalRehash();1548755874;This test triggers incremental rehash and tests for corruptions.;@Test_	public void testIncrementalRehash() {_		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		int insert = 0__		int remove = 0__		while (!stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())__		while (stateTable.isRehashing()) {_			stateTable.put(insert++, 0, new ArrayList<Integer>())__			if (insert % 8 == 0) {_				stateTable.remove(remove++, 0)__			}_		}_		Assert.assertEquals(insert - remove, stateTable.size())___		for (int i = 0_ i < insert_ ++i) {_			if (i < remove) {_				Assert.assertFalse(stateTable.containsKey(i, 0))__			} else {_				Assert.assertTrue(stateTable.containsKey(i, 0))__			}_		}_	};this,test,triggers,incremental,rehash,and,tests,for,corruptions;test,public,void,test,incremental,rehash,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,int,insert,0,int,remove,0,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,while,state,table,is,rehashing,state,table,put,insert,0,new,array,list,integer,if,insert,8,0,state,table,remove,remove,0,assert,assert,equals,insert,remove,state,table,size,for,int,i,0,i,insert,i,if,i,remove,assert,assert,false,state,table,contains,key,i,0,else,assert,assert,true,state,table,contains,key,i,0
CopyOnWriteStateTableTest -> @Test 	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception;1489685642;This test does some random modifications to a state table and a reference (hash map). Then draws snapshots,_performs more modifications and checks snapshot integrity.;@Test_	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception {__		final RegisteredBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		final HashMap<Tuple2<Integer, Integer>, ArrayList<Integer>> referenceMap = new HashMap<>()___		final Random random = new Random(42)___		_		CopyOnWriteStateTable.StateTableEntry<Integer, Integer, ArrayList<Integer>>[] snapshot = null__		int snapshotSize = 0___		_		Tuple3<Integer, Integer, ArrayList<Integer>>[] reference = null___		int val = 0____		int snapshotCounter = 0__		int referencedSnapshotId = 0___		final StateTransformationFunction<ArrayList<Integer>, Integer> transformationFunction =_				new StateTransformationFunction<ArrayList<Integer>, Integer>() {_					@Override_					public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_						if (previousState == null) {_							previousState = new ArrayList<>()__						}_						previousState.add(value)__						_						return previousState__					}_				}___		_		for (int i = 0_ i < 10_000_000_ ++i) {__			int key = random.nextInt(20)__			int namespace = random.nextInt(4)__			Tuple2<Integer, Integer> compositeKey = new Tuple2<>(key, namespace)___			int op = random.nextInt(7)___			ArrayList<Integer> state = null__			ArrayList<Integer> referenceState = null___			switch (op) {_				case 0:_				case 1: {_					state = stateTable.get(key, namespace)__					referenceState = referenceMap.get(compositeKey)__					if (null == state) {_						state = new ArrayList<>()__						stateTable.put(key, namespace, state)__						referenceState = new ArrayList<>()__						referenceMap.put(compositeKey, referenceState)__					}_					break__				}_				case 2: {_					stateTable.put(key, namespace, new ArrayList<Integer>())__					referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 3: {_					state = stateTable.putAndGetOld(key, namespace, new ArrayList<Integer>())__					referenceState = referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 4: {_					stateTable.remove(key, namespace)__					referenceMap.remove(compositeKey)__					break__				}_				case 5: {_					state = stateTable.removeAndGetOld(key, namespace)__					referenceState = referenceMap.remove(compositeKey)__					break__				}_				case 6: {_					final int updateValue = random.nextInt(1000)__					stateTable.transform(key, namespace, updateValue, transformationFunction)__					referenceMap.put(compositeKey, transformationFunction.apply(_							referenceMap.remove(compositeKey), updateValue))__					break__				}_				default: {_					Assert.fail("Unknown op-code " + op)__				}_			}__			Assert.assertEquals(referenceMap.size(), stateTable.size())___			if (state != null) {_				_				if (random.nextBoolean() && !state.isEmpty()) {_					state.remove(state.size() - 1)__					referenceState.remove(referenceState.size() - 1)__				} else {_					state.add(val)__					referenceState.add(val)__					++val__				}_			}__			Assert.assertEquals(referenceState, state)___			_			if (i > 0 && i % 500 == 0) {__				if (snapshot != null) {_					_					deepCheck(reference, convert(snapshot, snapshotSize))___					if (i % 1_000 == 0) {_						_						++snapshotCounter__						stateTable.snapshotTableArrays()__						stateTable.releaseSnapshot(snapshotCounter)__					}__					_					if (i % 5_000 == 0) {_						snapshot = null__						reference = null__						snapshotSize = 0__						stateTable.releaseSnapshot(referencedSnapshotId)__					}__				} else {_					_					++snapshotCounter__					referencedSnapshotId = snapshotCounter__					snapshot = stateTable.snapshotTableArrays()__					snapshotSize = stateTable.size()__					reference = manualDeepDump(referenceMap)__				}_			}_		}_	};this,test,does,some,random,modifications,to,a,state,table,and,a,reference,hash,map,then,draws,snapshots,performs,more,modifications,and,checks,snapshot,integrity;test,public,void,test,random,modifications,and,copy,on,write,isolation,throws,exception,final,registered,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,final,hash,map,tuple2,integer,integer,array,list,integer,reference,map,new,hash,map,final,random,random,new,random,42,copy,on,write,state,table,state,table,entry,integer,integer,array,list,integer,snapshot,null,int,snapshot,size,0,tuple3,integer,integer,array,list,integer,reference,null,int,val,0,int,snapshot,counter,0,int,referenced,snapshot,id,0,final,state,transformation,function,array,list,integer,integer,transformation,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,if,previous,state,null,previous,state,new,array,list,previous,state,add,value,return,previous,state,for,int,i,0,i,i,int,key,random,next,int,20,int,namespace,random,next,int,4,tuple2,integer,integer,composite,key,new,tuple2,key,namespace,int,op,random,next,int,7,array,list,integer,state,null,array,list,integer,reference,state,null,switch,op,case,0,case,1,state,state,table,get,key,namespace,reference,state,reference,map,get,composite,key,if,null,state,state,new,array,list,state,table,put,key,namespace,state,reference,state,new,array,list,reference,map,put,composite,key,reference,state,break,case,2,state,table,put,key,namespace,new,array,list,integer,reference,map,put,composite,key,new,array,list,integer,break,case,3,state,state,table,put,and,get,old,key,namespace,new,array,list,integer,reference,state,reference,map,put,composite,key,new,array,list,integer,break,case,4,state,table,remove,key,namespace,reference,map,remove,composite,key,break,case,5,state,state,table,remove,and,get,old,key,namespace,reference,state,reference,map,remove,composite,key,break,case,6,final,int,update,value,random,next,int,1000,state,table,transform,key,namespace,update,value,transformation,function,reference,map,put,composite,key,transformation,function,apply,reference,map,remove,composite,key,update,value,break,default,assert,fail,unknown,op,code,op,assert,assert,equals,reference,map,size,state,table,size,if,state,null,if,random,next,boolean,state,is,empty,state,remove,state,size,1,reference,state,remove,reference,state,size,1,else,state,add,val,reference,state,add,val,val,assert,assert,equals,reference,state,state,if,i,0,i,500,0,if,snapshot,null,deep,check,reference,convert,snapshot,snapshot,size,if,i,0,snapshot,counter,state,table,snapshot,table,arrays,state,table,release,snapshot,snapshot,counter,if,i,0,snapshot,null,reference,null,snapshot,size,0,state,table,release,snapshot,referenced,snapshot,id,else,snapshot,counter,referenced,snapshot,id,snapshot,counter,snapshot,state,table,snapshot,table,arrays,snapshot,size,state,table,size,reference,manual,deep,dump,reference,map
CopyOnWriteStateTableTest -> @Test 	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception;1490721653;This test does some random modifications to a state table and a reference (hash map). Then draws snapshots,_performs more modifications and checks snapshot integrity.;@Test_	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception {__		final RegisteredBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		final HashMap<Tuple2<Integer, Integer>, ArrayList<Integer>> referenceMap = new HashMap<>()___		final Random random = new Random(42)___		_		CopyOnWriteStateTable.StateTableEntry<Integer, Integer, ArrayList<Integer>>[] snapshot = null__		int snapshotSize = 0___		_		Tuple3<Integer, Integer, ArrayList<Integer>>[] reference = null___		int val = 0____		int snapshotCounter = 0__		int referencedSnapshotId = 0___		final StateTransformationFunction<ArrayList<Integer>, Integer> transformationFunction =_				new StateTransformationFunction<ArrayList<Integer>, Integer>() {_					@Override_					public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_						if (previousState == null) {_							previousState = new ArrayList<>()__						}_						previousState.add(value)__						_						return previousState__					}_				}___		_		for (int i = 0_ i < 10_000_000_ ++i) {__			int key = random.nextInt(20)__			int namespace = random.nextInt(4)__			Tuple2<Integer, Integer> compositeKey = new Tuple2<>(key, namespace)___			int op = random.nextInt(7)___			ArrayList<Integer> state = null__			ArrayList<Integer> referenceState = null___			switch (op) {_				case 0:_				case 1: {_					state = stateTable.get(key, namespace)__					referenceState = referenceMap.get(compositeKey)__					if (null == state) {_						state = new ArrayList<>()__						stateTable.put(key, namespace, state)__						referenceState = new ArrayList<>()__						referenceMap.put(compositeKey, referenceState)__					}_					break__				}_				case 2: {_					stateTable.put(key, namespace, new ArrayList<Integer>())__					referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 3: {_					state = stateTable.putAndGetOld(key, namespace, new ArrayList<Integer>())__					referenceState = referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 4: {_					stateTable.remove(key, namespace)__					referenceMap.remove(compositeKey)__					break__				}_				case 5: {_					state = stateTable.removeAndGetOld(key, namespace)__					referenceState = referenceMap.remove(compositeKey)__					break__				}_				case 6: {_					final int updateValue = random.nextInt(1000)__					stateTable.transform(key, namespace, updateValue, transformationFunction)__					referenceMap.put(compositeKey, transformationFunction.apply(_							referenceMap.remove(compositeKey), updateValue))__					break__				}_				default: {_					Assert.fail("Unknown op-code " + op)__				}_			}__			Assert.assertEquals(referenceMap.size(), stateTable.size())___			if (state != null) {_				_				if (random.nextBoolean() && !state.isEmpty()) {_					state.remove(state.size() - 1)__					referenceState.remove(referenceState.size() - 1)__				} else {_					state.add(val)__					referenceState.add(val)__					++val__				}_			}__			Assert.assertEquals(referenceState, state)___			_			if (i > 0 && i % 500 == 0) {__				if (snapshot != null) {_					_					deepCheck(reference, convert(snapshot, snapshotSize))___					if (i % 1_000 == 0) {_						_						++snapshotCounter__						stateTable.snapshotTableArrays()__						stateTable.releaseSnapshot(snapshotCounter)__					}__					_					if (i % 5_000 == 0) {_						snapshot = null__						reference = null__						snapshotSize = 0__						stateTable.releaseSnapshot(referencedSnapshotId)__					}__				} else {_					_					++snapshotCounter__					referencedSnapshotId = snapshotCounter__					snapshot = stateTable.snapshotTableArrays()__					snapshotSize = stateTable.size()__					reference = manualDeepDump(referenceMap)__				}_			}_		}_	};this,test,does,some,random,modifications,to,a,state,table,and,a,reference,hash,map,then,draws,snapshots,performs,more,modifications,and,checks,snapshot,integrity;test,public,void,test,random,modifications,and,copy,on,write,isolation,throws,exception,final,registered,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,final,hash,map,tuple2,integer,integer,array,list,integer,reference,map,new,hash,map,final,random,random,new,random,42,copy,on,write,state,table,state,table,entry,integer,integer,array,list,integer,snapshot,null,int,snapshot,size,0,tuple3,integer,integer,array,list,integer,reference,null,int,val,0,int,snapshot,counter,0,int,referenced,snapshot,id,0,final,state,transformation,function,array,list,integer,integer,transformation,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,if,previous,state,null,previous,state,new,array,list,previous,state,add,value,return,previous,state,for,int,i,0,i,i,int,key,random,next,int,20,int,namespace,random,next,int,4,tuple2,integer,integer,composite,key,new,tuple2,key,namespace,int,op,random,next,int,7,array,list,integer,state,null,array,list,integer,reference,state,null,switch,op,case,0,case,1,state,state,table,get,key,namespace,reference,state,reference,map,get,composite,key,if,null,state,state,new,array,list,state,table,put,key,namespace,state,reference,state,new,array,list,reference,map,put,composite,key,reference,state,break,case,2,state,table,put,key,namespace,new,array,list,integer,reference,map,put,composite,key,new,array,list,integer,break,case,3,state,state,table,put,and,get,old,key,namespace,new,array,list,integer,reference,state,reference,map,put,composite,key,new,array,list,integer,break,case,4,state,table,remove,key,namespace,reference,map,remove,composite,key,break,case,5,state,state,table,remove,and,get,old,key,namespace,reference,state,reference,map,remove,composite,key,break,case,6,final,int,update,value,random,next,int,1000,state,table,transform,key,namespace,update,value,transformation,function,reference,map,put,composite,key,transformation,function,apply,reference,map,remove,composite,key,update,value,break,default,assert,fail,unknown,op,code,op,assert,assert,equals,reference,map,size,state,table,size,if,state,null,if,random,next,boolean,state,is,empty,state,remove,state,size,1,reference,state,remove,reference,state,size,1,else,state,add,val,reference,state,add,val,val,assert,assert,equals,reference,state,state,if,i,0,i,500,0,if,snapshot,null,deep,check,reference,convert,snapshot,snapshot,size,if,i,0,snapshot,counter,state,table,snapshot,table,arrays,state,table,release,snapshot,snapshot,counter,if,i,0,snapshot,null,reference,null,snapshot,size,0,state,table,release,snapshot,referenced,snapshot,id,else,snapshot,counter,referenced,snapshot,id,snapshot,counter,snapshot,state,table,snapshot,table,arrays,snapshot,size,state,table,size,reference,manual,deep,dump,reference,map
CopyOnWriteStateTableTest -> @Test 	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception;1494180263;This test does some random modifications to a state table and a reference (hash map). Then draws snapshots,_performs more modifications and checks snapshot integrity.;@Test_	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception {__		final RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		final HashMap<Tuple2<Integer, Integer>, ArrayList<Integer>> referenceMap = new HashMap<>()___		final Random random = new Random(42)___		_		CopyOnWriteStateTable.StateTableEntry<Integer, Integer, ArrayList<Integer>>[] snapshot = null__		int snapshotSize = 0___		_		Tuple3<Integer, Integer, ArrayList<Integer>>[] reference = null___		int val = 0____		int snapshotCounter = 0__		int referencedSnapshotId = 0___		final StateTransformationFunction<ArrayList<Integer>, Integer> transformationFunction =_				new StateTransformationFunction<ArrayList<Integer>, Integer>() {_					@Override_					public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_						if (previousState == null) {_							previousState = new ArrayList<>()__						}_						previousState.add(value)__						_						return previousState__					}_				}___		_		for (int i = 0_ i < 10_000_000_ ++i) {__			int key = random.nextInt(20)__			int namespace = random.nextInt(4)__			Tuple2<Integer, Integer> compositeKey = new Tuple2<>(key, namespace)___			int op = random.nextInt(7)___			ArrayList<Integer> state = null__			ArrayList<Integer> referenceState = null___			switch (op) {_				case 0:_				case 1: {_					state = stateTable.get(key, namespace)__					referenceState = referenceMap.get(compositeKey)__					if (null == state) {_						state = new ArrayList<>()__						stateTable.put(key, namespace, state)__						referenceState = new ArrayList<>()__						referenceMap.put(compositeKey, referenceState)__					}_					break__				}_				case 2: {_					stateTable.put(key, namespace, new ArrayList<Integer>())__					referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 3: {_					state = stateTable.putAndGetOld(key, namespace, new ArrayList<Integer>())__					referenceState = referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 4: {_					stateTable.remove(key, namespace)__					referenceMap.remove(compositeKey)__					break__				}_				case 5: {_					state = stateTable.removeAndGetOld(key, namespace)__					referenceState = referenceMap.remove(compositeKey)__					break__				}_				case 6: {_					final int updateValue = random.nextInt(1000)__					stateTable.transform(key, namespace, updateValue, transformationFunction)__					referenceMap.put(compositeKey, transformationFunction.apply(_							referenceMap.remove(compositeKey), updateValue))__					break__				}_				default: {_					Assert.fail("Unknown op-code " + op)__				}_			}__			Assert.assertEquals(referenceMap.size(), stateTable.size())___			if (state != null) {_				_				if (random.nextBoolean() && !state.isEmpty()) {_					state.remove(state.size() - 1)__					referenceState.remove(referenceState.size() - 1)__				} else {_					state.add(val)__					referenceState.add(val)__					++val__				}_			}__			Assert.assertEquals(referenceState, state)___			_			if (i > 0 && i % 500 == 0) {__				if (snapshot != null) {_					_					deepCheck(reference, convert(snapshot, snapshotSize))___					if (i % 1_000 == 0) {_						_						++snapshotCounter__						stateTable.snapshotTableArrays()__						stateTable.releaseSnapshot(snapshotCounter)__					}__					_					if (i % 5_000 == 0) {_						snapshot = null__						reference = null__						snapshotSize = 0__						stateTable.releaseSnapshot(referencedSnapshotId)__					}__				} else {_					_					++snapshotCounter__					referencedSnapshotId = snapshotCounter__					snapshot = stateTable.snapshotTableArrays()__					snapshotSize = stateTable.size()__					reference = manualDeepDump(referenceMap)__				}_			}_		}_	};this,test,does,some,random,modifications,to,a,state,table,and,a,reference,hash,map,then,draws,snapshots,performs,more,modifications,and,checks,snapshot,integrity;test,public,void,test,random,modifications,and,copy,on,write,isolation,throws,exception,final,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,final,hash,map,tuple2,integer,integer,array,list,integer,reference,map,new,hash,map,final,random,random,new,random,42,copy,on,write,state,table,state,table,entry,integer,integer,array,list,integer,snapshot,null,int,snapshot,size,0,tuple3,integer,integer,array,list,integer,reference,null,int,val,0,int,snapshot,counter,0,int,referenced,snapshot,id,0,final,state,transformation,function,array,list,integer,integer,transformation,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,if,previous,state,null,previous,state,new,array,list,previous,state,add,value,return,previous,state,for,int,i,0,i,i,int,key,random,next,int,20,int,namespace,random,next,int,4,tuple2,integer,integer,composite,key,new,tuple2,key,namespace,int,op,random,next,int,7,array,list,integer,state,null,array,list,integer,reference,state,null,switch,op,case,0,case,1,state,state,table,get,key,namespace,reference,state,reference,map,get,composite,key,if,null,state,state,new,array,list,state,table,put,key,namespace,state,reference,state,new,array,list,reference,map,put,composite,key,reference,state,break,case,2,state,table,put,key,namespace,new,array,list,integer,reference,map,put,composite,key,new,array,list,integer,break,case,3,state,state,table,put,and,get,old,key,namespace,new,array,list,integer,reference,state,reference,map,put,composite,key,new,array,list,integer,break,case,4,state,table,remove,key,namespace,reference,map,remove,composite,key,break,case,5,state,state,table,remove,and,get,old,key,namespace,reference,state,reference,map,remove,composite,key,break,case,6,final,int,update,value,random,next,int,1000,state,table,transform,key,namespace,update,value,transformation,function,reference,map,put,composite,key,transformation,function,apply,reference,map,remove,composite,key,update,value,break,default,assert,fail,unknown,op,code,op,assert,assert,equals,reference,map,size,state,table,size,if,state,null,if,random,next,boolean,state,is,empty,state,remove,state,size,1,reference,state,remove,reference,state,size,1,else,state,add,val,reference,state,add,val,val,assert,assert,equals,reference,state,state,if,i,0,i,500,0,if,snapshot,null,deep,check,reference,convert,snapshot,snapshot,size,if,i,0,snapshot,counter,state,table,snapshot,table,arrays,state,table,release,snapshot,snapshot,counter,if,i,0,snapshot,null,reference,null,snapshot,size,0,state,table,release,snapshot,referenced,snapshot,id,else,snapshot,counter,referenced,snapshot,id,snapshot,counter,snapshot,state,table,snapshot,table,arrays,snapshot,size,state,table,size,reference,manual,deep,dump,reference,map
CopyOnWriteStateTableTest -> @Test 	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception;1505995902;This test does some random modifications to a state table and a reference (hash map). Then draws snapshots,_performs more modifications and checks snapshot integrity.;@Test_	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception {__		final RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		final HashMap<Tuple2<Integer, Integer>, ArrayList<Integer>> referenceMap = new HashMap<>()___		final Random random = new Random(42)___		_		CopyOnWriteStateTable.StateTableEntry<Integer, Integer, ArrayList<Integer>>[] snapshot = null__		int snapshotSize = 0___		_		Tuple3<Integer, Integer, ArrayList<Integer>>[] reference = null___		int val = 0____		int snapshotCounter = 0__		int referencedSnapshotId = 0___		final StateTransformationFunction<ArrayList<Integer>, Integer> transformationFunction =_				new StateTransformationFunction<ArrayList<Integer>, Integer>() {_					@Override_					public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_						if (previousState == null) {_							previousState = new ArrayList<>()__						}_						previousState.add(value)__						_						return previousState__					}_				}___		_		for (int i = 0_ i < 10_000_000_ ++i) {__			int key = random.nextInt(20)__			int namespace = random.nextInt(4)__			Tuple2<Integer, Integer> compositeKey = new Tuple2<>(key, namespace)___			int op = random.nextInt(7)___			ArrayList<Integer> state = null__			ArrayList<Integer> referenceState = null___			switch (op) {_				case 0:_				case 1: {_					state = stateTable.get(key, namespace)__					referenceState = referenceMap.get(compositeKey)__					if (null == state) {_						state = new ArrayList<>()__						stateTable.put(key, namespace, state)__						referenceState = new ArrayList<>()__						referenceMap.put(compositeKey, referenceState)__					}_					break__				}_				case 2: {_					stateTable.put(key, namespace, new ArrayList<Integer>())__					referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 3: {_					state = stateTable.putAndGetOld(key, namespace, new ArrayList<Integer>())__					referenceState = referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 4: {_					stateTable.remove(key, namespace)__					referenceMap.remove(compositeKey)__					break__				}_				case 5: {_					state = stateTable.removeAndGetOld(key, namespace)__					referenceState = referenceMap.remove(compositeKey)__					break__				}_				case 6: {_					final int updateValue = random.nextInt(1000)__					stateTable.transform(key, namespace, updateValue, transformationFunction)__					referenceMap.put(compositeKey, transformationFunction.apply(_							referenceMap.remove(compositeKey), updateValue))__					break__				}_				default: {_					Assert.fail("Unknown op-code " + op)__				}_			}__			Assert.assertEquals(referenceMap.size(), stateTable.size())___			if (state != null) {_				_				if (random.nextBoolean() && !state.isEmpty()) {_					state.remove(state.size() - 1)__					referenceState.remove(referenceState.size() - 1)__				} else {_					state.add(val)__					referenceState.add(val)__					++val__				}_			}__			Assert.assertEquals(referenceState, state)___			_			if (i > 0 && i % 500 == 0) {__				if (snapshot != null) {_					_					deepCheck(reference, convert(snapshot, snapshotSize))___					if (i % 1_000 == 0) {_						_						++snapshotCounter__						stateTable.snapshotTableArrays()__						stateTable.releaseSnapshot(snapshotCounter)__					}__					_					if (i % 5_000 == 0) {_						snapshot = null__						reference = null__						snapshotSize = 0__						stateTable.releaseSnapshot(referencedSnapshotId)__					}__				} else {_					_					++snapshotCounter__					referencedSnapshotId = snapshotCounter__					snapshot = stateTable.snapshotTableArrays()__					snapshotSize = stateTable.size()__					reference = manualDeepDump(referenceMap)__				}_			}_		}_	};this,test,does,some,random,modifications,to,a,state,table,and,a,reference,hash,map,then,draws,snapshots,performs,more,modifications,and,checks,snapshot,integrity;test,public,void,test,random,modifications,and,copy,on,write,isolation,throws,exception,final,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,final,hash,map,tuple2,integer,integer,array,list,integer,reference,map,new,hash,map,final,random,random,new,random,42,copy,on,write,state,table,state,table,entry,integer,integer,array,list,integer,snapshot,null,int,snapshot,size,0,tuple3,integer,integer,array,list,integer,reference,null,int,val,0,int,snapshot,counter,0,int,referenced,snapshot,id,0,final,state,transformation,function,array,list,integer,integer,transformation,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,if,previous,state,null,previous,state,new,array,list,previous,state,add,value,return,previous,state,for,int,i,0,i,i,int,key,random,next,int,20,int,namespace,random,next,int,4,tuple2,integer,integer,composite,key,new,tuple2,key,namespace,int,op,random,next,int,7,array,list,integer,state,null,array,list,integer,reference,state,null,switch,op,case,0,case,1,state,state,table,get,key,namespace,reference,state,reference,map,get,composite,key,if,null,state,state,new,array,list,state,table,put,key,namespace,state,reference,state,new,array,list,reference,map,put,composite,key,reference,state,break,case,2,state,table,put,key,namespace,new,array,list,integer,reference,map,put,composite,key,new,array,list,integer,break,case,3,state,state,table,put,and,get,old,key,namespace,new,array,list,integer,reference,state,reference,map,put,composite,key,new,array,list,integer,break,case,4,state,table,remove,key,namespace,reference,map,remove,composite,key,break,case,5,state,state,table,remove,and,get,old,key,namespace,reference,state,reference,map,remove,composite,key,break,case,6,final,int,update,value,random,next,int,1000,state,table,transform,key,namespace,update,value,transformation,function,reference,map,put,composite,key,transformation,function,apply,reference,map,remove,composite,key,update,value,break,default,assert,fail,unknown,op,code,op,assert,assert,equals,reference,map,size,state,table,size,if,state,null,if,random,next,boolean,state,is,empty,state,remove,state,size,1,reference,state,remove,reference,state,size,1,else,state,add,val,reference,state,add,val,val,assert,assert,equals,reference,state,state,if,i,0,i,500,0,if,snapshot,null,deep,check,reference,convert,snapshot,snapshot,size,if,i,0,snapshot,counter,state,table,snapshot,table,arrays,state,table,release,snapshot,snapshot,counter,if,i,0,snapshot,null,reference,null,snapshot,size,0,state,table,release,snapshot,referenced,snapshot,id,else,snapshot,counter,referenced,snapshot,id,snapshot,counter,snapshot,state,table,snapshot,table,arrays,snapshot,size,state,table,size,reference,manual,deep,dump,reference,map
CopyOnWriteStateTableTest -> @Test 	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception;1529089579;This test does some random modifications to a state table and a reference (hash map). Then draws snapshots,_performs more modifications and checks snapshot integrity.;@Test_	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception {__		final RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		final HashMap<Tuple2<Integer, Integer>, ArrayList<Integer>> referenceMap = new HashMap<>()___		final Random random = new Random(42)___		_		CopyOnWriteStateTable.StateTableEntry<Integer, Integer, ArrayList<Integer>>[] snapshot = null__		int snapshotSize = 0___		_		Tuple3<Integer, Integer, ArrayList<Integer>>[] reference = null___		int val = 0____		int snapshotCounter = 0__		int referencedSnapshotId = 0___		final StateTransformationFunction<ArrayList<Integer>, Integer> transformationFunction =_				new StateTransformationFunction<ArrayList<Integer>, Integer>() {_					@Override_					public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_						if (previousState == null) {_							previousState = new ArrayList<>()__						}_						previousState.add(value)__						_						return previousState__					}_				}___		_		for (int i = 0_ i < 10_000_000_ ++i) {__			int key = random.nextInt(20)__			int namespace = random.nextInt(4)__			Tuple2<Integer, Integer> compositeKey = new Tuple2<>(key, namespace)___			int op = random.nextInt(7)___			ArrayList<Integer> state = null__			ArrayList<Integer> referenceState = null___			switch (op) {_				case 0:_				case 1: {_					state = stateTable.get(key, namespace)__					referenceState = referenceMap.get(compositeKey)__					if (null == state) {_						state = new ArrayList<>()__						stateTable.put(key, namespace, state)__						referenceState = new ArrayList<>()__						referenceMap.put(compositeKey, referenceState)__					}_					break__				}_				case 2: {_					stateTable.put(key, namespace, new ArrayList<Integer>())__					referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 3: {_					state = stateTable.putAndGetOld(key, namespace, new ArrayList<Integer>())__					referenceState = referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 4: {_					stateTable.remove(key, namespace)__					referenceMap.remove(compositeKey)__					break__				}_				case 5: {_					state = stateTable.removeAndGetOld(key, namespace)__					referenceState = referenceMap.remove(compositeKey)__					break__				}_				case 6: {_					final int updateValue = random.nextInt(1000)__					stateTable.transform(key, namespace, updateValue, transformationFunction)__					referenceMap.put(compositeKey, transformationFunction.apply(_							referenceMap.remove(compositeKey), updateValue))__					break__				}_				default: {_					Assert.fail("Unknown op-code " + op)__				}_			}__			Assert.assertEquals(referenceMap.size(), stateTable.size())___			if (state != null) {_				_				if (random.nextBoolean() && !state.isEmpty()) {_					state.remove(state.size() - 1)__					referenceState.remove(referenceState.size() - 1)__				} else {_					state.add(val)__					referenceState.add(val)__					++val__				}_			}__			Assert.assertEquals(referenceState, state)___			_			if (i > 0 && i % 500 == 0) {__				if (snapshot != null) {_					_					deepCheck(reference, convert(snapshot, snapshotSize))___					if (i % 1_000 == 0) {_						_						++snapshotCounter__						stateTable.snapshotTableArrays()__						stateTable.releaseSnapshot(snapshotCounter)__					}__					_					if (i % 5_000 == 0) {_						snapshot = null__						reference = null__						snapshotSize = 0__						stateTable.releaseSnapshot(referencedSnapshotId)__					}__				} else {_					_					++snapshotCounter__					referencedSnapshotId = snapshotCounter__					snapshot = stateTable.snapshotTableArrays()__					snapshotSize = stateTable.size()__					reference = manualDeepDump(referenceMap)__				}_			}_		}_	};this,test,does,some,random,modifications,to,a,state,table,and,a,reference,hash,map,then,draws,snapshots,performs,more,modifications,and,checks,snapshot,integrity;test,public,void,test,random,modifications,and,copy,on,write,isolation,throws,exception,final,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,final,hash,map,tuple2,integer,integer,array,list,integer,reference,map,new,hash,map,final,random,random,new,random,42,copy,on,write,state,table,state,table,entry,integer,integer,array,list,integer,snapshot,null,int,snapshot,size,0,tuple3,integer,integer,array,list,integer,reference,null,int,val,0,int,snapshot,counter,0,int,referenced,snapshot,id,0,final,state,transformation,function,array,list,integer,integer,transformation,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,if,previous,state,null,previous,state,new,array,list,previous,state,add,value,return,previous,state,for,int,i,0,i,i,int,key,random,next,int,20,int,namespace,random,next,int,4,tuple2,integer,integer,composite,key,new,tuple2,key,namespace,int,op,random,next,int,7,array,list,integer,state,null,array,list,integer,reference,state,null,switch,op,case,0,case,1,state,state,table,get,key,namespace,reference,state,reference,map,get,composite,key,if,null,state,state,new,array,list,state,table,put,key,namespace,state,reference,state,new,array,list,reference,map,put,composite,key,reference,state,break,case,2,state,table,put,key,namespace,new,array,list,integer,reference,map,put,composite,key,new,array,list,integer,break,case,3,state,state,table,put,and,get,old,key,namespace,new,array,list,integer,reference,state,reference,map,put,composite,key,new,array,list,integer,break,case,4,state,table,remove,key,namespace,reference,map,remove,composite,key,break,case,5,state,state,table,remove,and,get,old,key,namespace,reference,state,reference,map,remove,composite,key,break,case,6,final,int,update,value,random,next,int,1000,state,table,transform,key,namespace,update,value,transformation,function,reference,map,put,composite,key,transformation,function,apply,reference,map,remove,composite,key,update,value,break,default,assert,fail,unknown,op,code,op,assert,assert,equals,reference,map,size,state,table,size,if,state,null,if,random,next,boolean,state,is,empty,state,remove,state,size,1,reference,state,remove,reference,state,size,1,else,state,add,val,reference,state,add,val,val,assert,assert,equals,reference,state,state,if,i,0,i,500,0,if,snapshot,null,deep,check,reference,convert,snapshot,snapshot,size,if,i,0,snapshot,counter,state,table,snapshot,table,arrays,state,table,release,snapshot,snapshot,counter,if,i,0,snapshot,null,reference,null,snapshot,size,0,state,table,release,snapshot,referenced,snapshot,id,else,snapshot,counter,referenced,snapshot,id,snapshot,counter,snapshot,state,table,snapshot,table,arrays,snapshot,size,state,table,size,reference,manual,deep,dump,reference,map
CopyOnWriteStateTableTest -> @Test 	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception;1531404901;This test does some random modifications to a state table and a reference (hash map). Then draws snapshots,_performs more modifications and checks snapshot integrity.;@Test_	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception {__		final RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyedBackendStateMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		final HashMap<Tuple2<Integer, Integer>, ArrayList<Integer>> referenceMap = new HashMap<>()___		final Random random = new Random(42)___		_		CopyOnWriteStateTable.StateTableEntry<Integer, Integer, ArrayList<Integer>>[] snapshot = null__		int snapshotSize = 0___		_		Tuple3<Integer, Integer, ArrayList<Integer>>[] reference = null___		int val = 0____		int snapshotCounter = 0__		int referencedSnapshotId = 0___		final StateTransformationFunction<ArrayList<Integer>, Integer> transformationFunction =_			new StateTransformationFunction<ArrayList<Integer>, Integer>() {_				@Override_				public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_					if (previousState == null) {_						previousState = new ArrayList<>()__					}_					previousState.add(value)__					_					return previousState__				}_			}___		_		for (int i = 0_ i < 10_000_000_ ++i) {__			int key = random.nextInt(20)__			int namespace = random.nextInt(4)__			Tuple2<Integer, Integer> compositeKey = new Tuple2<>(key, namespace)___			int op = random.nextInt(7)___			ArrayList<Integer> state = null__			ArrayList<Integer> referenceState = null___			switch (op) {_				case 0:_				case 1: {_					state = stateTable.get(key, namespace)__					referenceState = referenceMap.get(compositeKey)__					if (null == state) {_						state = new ArrayList<>()__						stateTable.put(key, namespace, state)__						referenceState = new ArrayList<>()__						referenceMap.put(compositeKey, referenceState)__					}_					break__				}_				case 2: {_					stateTable.put(key, namespace, new ArrayList<Integer>())__					referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 3: {_					state = stateTable.putAndGetOld(key, namespace, new ArrayList<Integer>())__					referenceState = referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 4: {_					stateTable.remove(key, namespace)__					referenceMap.remove(compositeKey)__					break__				}_				case 5: {_					state = stateTable.removeAndGetOld(key, namespace)__					referenceState = referenceMap.remove(compositeKey)__					break__				}_				case 6: {_					final int updateValue = random.nextInt(1000)__					stateTable.transform(key, namespace, updateValue, transformationFunction)__					referenceMap.put(compositeKey, transformationFunction.apply(_						referenceMap.remove(compositeKey), updateValue))__					break__				}_				default: {_					Assert.fail("Unknown op-code " + op)__				}_			}__			Assert.assertEquals(referenceMap.size(), stateTable.size())___			if (state != null) {_				_				if (random.nextBoolean() && !state.isEmpty()) {_					state.remove(state.size() - 1)__					referenceState.remove(referenceState.size() - 1)__				} else {_					state.add(val)__					referenceState.add(val)__					++val__				}_			}__			Assert.assertEquals(referenceState, state)___			_			if (i > 0 && i % 500 == 0) {__				if (snapshot != null) {_					_					deepCheck(reference, convert(snapshot, snapshotSize))___					if (i % 1_000 == 0) {_						_						++snapshotCounter__						stateTable.snapshotTableArrays()__						stateTable.releaseSnapshot(snapshotCounter)__					}__					_					if (i % 5_000 == 0) {_						snapshot = null__						reference = null__						snapshotSize = 0__						stateTable.releaseSnapshot(referencedSnapshotId)__					}__				} else {_					_					++snapshotCounter__					referencedSnapshotId = snapshotCounter__					snapshot = stateTable.snapshotTableArrays()__					snapshotSize = stateTable.size()__					reference = manualDeepDump(referenceMap)__				}_			}_		}_	};this,test,does,some,random,modifications,to,a,state,table,and,a,reference,hash,map,then,draws,snapshots,performs,more,modifications,and,checks,snapshot,integrity;test,public,void,test,random,modifications,and,copy,on,write,isolation,throws,exception,final,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,final,hash,map,tuple2,integer,integer,array,list,integer,reference,map,new,hash,map,final,random,random,new,random,42,copy,on,write,state,table,state,table,entry,integer,integer,array,list,integer,snapshot,null,int,snapshot,size,0,tuple3,integer,integer,array,list,integer,reference,null,int,val,0,int,snapshot,counter,0,int,referenced,snapshot,id,0,final,state,transformation,function,array,list,integer,integer,transformation,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,if,previous,state,null,previous,state,new,array,list,previous,state,add,value,return,previous,state,for,int,i,0,i,i,int,key,random,next,int,20,int,namespace,random,next,int,4,tuple2,integer,integer,composite,key,new,tuple2,key,namespace,int,op,random,next,int,7,array,list,integer,state,null,array,list,integer,reference,state,null,switch,op,case,0,case,1,state,state,table,get,key,namespace,reference,state,reference,map,get,composite,key,if,null,state,state,new,array,list,state,table,put,key,namespace,state,reference,state,new,array,list,reference,map,put,composite,key,reference,state,break,case,2,state,table,put,key,namespace,new,array,list,integer,reference,map,put,composite,key,new,array,list,integer,break,case,3,state,state,table,put,and,get,old,key,namespace,new,array,list,integer,reference,state,reference,map,put,composite,key,new,array,list,integer,break,case,4,state,table,remove,key,namespace,reference,map,remove,composite,key,break,case,5,state,state,table,remove,and,get,old,key,namespace,reference,state,reference,map,remove,composite,key,break,case,6,final,int,update,value,random,next,int,1000,state,table,transform,key,namespace,update,value,transformation,function,reference,map,put,composite,key,transformation,function,apply,reference,map,remove,composite,key,update,value,break,default,assert,fail,unknown,op,code,op,assert,assert,equals,reference,map,size,state,table,size,if,state,null,if,random,next,boolean,state,is,empty,state,remove,state,size,1,reference,state,remove,reference,state,size,1,else,state,add,val,reference,state,add,val,val,assert,assert,equals,reference,state,state,if,i,0,i,500,0,if,snapshot,null,deep,check,reference,convert,snapshot,snapshot,size,if,i,0,snapshot,counter,state,table,snapshot,table,arrays,state,table,release,snapshot,snapshot,counter,if,i,0,snapshot,null,reference,null,snapshot,size,0,state,table,release,snapshot,referenced,snapshot,id,else,snapshot,counter,referenced,snapshot,id,snapshot,counter,snapshot,state,table,snapshot,table,arrays,snapshot,size,state,table,size,reference,manual,deep,dump,reference,map
CopyOnWriteStateTableTest -> @Test 	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception;1531771917;This test does some random modifications to a state table and a reference (hash map). Then draws snapshots,_performs more modifications and checks snapshot integrity.;@Test_	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception {__		final RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		final HashMap<Tuple2<Integer, Integer>, ArrayList<Integer>> referenceMap = new HashMap<>()___		final Random random = new Random(42)___		_		CopyOnWriteStateTable.StateTableEntry<Integer, Integer, ArrayList<Integer>>[] snapshot = null__		int snapshotSize = 0___		_		Tuple3<Integer, Integer, ArrayList<Integer>>[] reference = null___		int val = 0____		int snapshotCounter = 0__		int referencedSnapshotId = 0___		final StateTransformationFunction<ArrayList<Integer>, Integer> transformationFunction =_			new StateTransformationFunction<ArrayList<Integer>, Integer>() {_				@Override_				public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_					if (previousState == null) {_						previousState = new ArrayList<>()__					}_					previousState.add(value)__					_					return previousState__				}_			}___		_		for (int i = 0_ i < 10_000_000_ ++i) {__			int key = random.nextInt(20)__			int namespace = random.nextInt(4)__			Tuple2<Integer, Integer> compositeKey = new Tuple2<>(key, namespace)___			int op = random.nextInt(7)___			ArrayList<Integer> state = null__			ArrayList<Integer> referenceState = null___			switch (op) {_				case 0:_				case 1: {_					state = stateTable.get(key, namespace)__					referenceState = referenceMap.get(compositeKey)__					if (null == state) {_						state = new ArrayList<>()__						stateTable.put(key, namespace, state)__						referenceState = new ArrayList<>()__						referenceMap.put(compositeKey, referenceState)__					}_					break__				}_				case 2: {_					stateTable.put(key, namespace, new ArrayList<Integer>())__					referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 3: {_					state = stateTable.putAndGetOld(key, namespace, new ArrayList<Integer>())__					referenceState = referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 4: {_					stateTable.remove(key, namespace)__					referenceMap.remove(compositeKey)__					break__				}_				case 5: {_					state = stateTable.removeAndGetOld(key, namespace)__					referenceState = referenceMap.remove(compositeKey)__					break__				}_				case 6: {_					final int updateValue = random.nextInt(1000)__					stateTable.transform(key, namespace, updateValue, transformationFunction)__					referenceMap.put(compositeKey, transformationFunction.apply(_						referenceMap.remove(compositeKey), updateValue))__					break__				}_				default: {_					Assert.fail("Unknown op-code " + op)__				}_			}__			Assert.assertEquals(referenceMap.size(), stateTable.size())___			if (state != null) {_				_				if (random.nextBoolean() && !state.isEmpty()) {_					state.remove(state.size() - 1)__					referenceState.remove(referenceState.size() - 1)__				} else {_					state.add(val)__					referenceState.add(val)__					++val__				}_			}__			Assert.assertEquals(referenceState, state)___			_			if (i > 0 && i % 500 == 0) {__				if (snapshot != null) {_					_					deepCheck(reference, convert(snapshot, snapshotSize))___					if (i % 1_000 == 0) {_						_						++snapshotCounter__						stateTable.snapshotTableArrays()__						stateTable.releaseSnapshot(snapshotCounter)__					}__					_					if (i % 5_000 == 0) {_						snapshot = null__						reference = null__						snapshotSize = 0__						stateTable.releaseSnapshot(referencedSnapshotId)__					}__				} else {_					_					++snapshotCounter__					referencedSnapshotId = snapshotCounter__					snapshot = stateTable.snapshotTableArrays()__					snapshotSize = stateTable.size()__					reference = manualDeepDump(referenceMap)__				}_			}_		}_	};this,test,does,some,random,modifications,to,a,state,table,and,a,reference,hash,map,then,draws,snapshots,performs,more,modifications,and,checks,snapshot,integrity;test,public,void,test,random,modifications,and,copy,on,write,isolation,throws,exception,final,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,final,hash,map,tuple2,integer,integer,array,list,integer,reference,map,new,hash,map,final,random,random,new,random,42,copy,on,write,state,table,state,table,entry,integer,integer,array,list,integer,snapshot,null,int,snapshot,size,0,tuple3,integer,integer,array,list,integer,reference,null,int,val,0,int,snapshot,counter,0,int,referenced,snapshot,id,0,final,state,transformation,function,array,list,integer,integer,transformation,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,if,previous,state,null,previous,state,new,array,list,previous,state,add,value,return,previous,state,for,int,i,0,i,i,int,key,random,next,int,20,int,namespace,random,next,int,4,tuple2,integer,integer,composite,key,new,tuple2,key,namespace,int,op,random,next,int,7,array,list,integer,state,null,array,list,integer,reference,state,null,switch,op,case,0,case,1,state,state,table,get,key,namespace,reference,state,reference,map,get,composite,key,if,null,state,state,new,array,list,state,table,put,key,namespace,state,reference,state,new,array,list,reference,map,put,composite,key,reference,state,break,case,2,state,table,put,key,namespace,new,array,list,integer,reference,map,put,composite,key,new,array,list,integer,break,case,3,state,state,table,put,and,get,old,key,namespace,new,array,list,integer,reference,state,reference,map,put,composite,key,new,array,list,integer,break,case,4,state,table,remove,key,namespace,reference,map,remove,composite,key,break,case,5,state,state,table,remove,and,get,old,key,namespace,reference,state,reference,map,remove,composite,key,break,case,6,final,int,update,value,random,next,int,1000,state,table,transform,key,namespace,update,value,transformation,function,reference,map,put,composite,key,transformation,function,apply,reference,map,remove,composite,key,update,value,break,default,assert,fail,unknown,op,code,op,assert,assert,equals,reference,map,size,state,table,size,if,state,null,if,random,next,boolean,state,is,empty,state,remove,state,size,1,reference,state,remove,reference,state,size,1,else,state,add,val,reference,state,add,val,val,assert,assert,equals,reference,state,state,if,i,0,i,500,0,if,snapshot,null,deep,check,reference,convert,snapshot,snapshot,size,if,i,0,snapshot,counter,state,table,snapshot,table,arrays,state,table,release,snapshot,snapshot,counter,if,i,0,snapshot,null,reference,null,snapshot,size,0,state,table,release,snapshot,referenced,snapshot,id,else,snapshot,counter,referenced,snapshot,id,snapshot,counter,snapshot,state,table,snapshot,table,arrays,snapshot,size,state,table,size,reference,manual,deep,dump,reference,map
CopyOnWriteStateTableTest -> @Test 	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception;1539149027;This test does some random modifications to a state table and a reference (hash map). Then draws snapshots,_performs more modifications and checks snapshot integrity.;@Test_	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception {__		final RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		final HashMap<Tuple2<Integer, Integer>, ArrayList<Integer>> referenceMap = new HashMap<>()___		final Random random = new Random(42)___		_		CopyOnWriteStateTable.StateTableEntry<Integer, Integer, ArrayList<Integer>>[] snapshot = null__		int snapshotSize = 0___		_		Tuple3<Integer, Integer, ArrayList<Integer>>[] reference = null___		int val = 0____		int snapshotCounter = 0__		int referencedSnapshotId = 0___		final StateTransformationFunction<ArrayList<Integer>, Integer> transformationFunction =_			new StateTransformationFunction<ArrayList<Integer>, Integer>() {_				@Override_				public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_					if (previousState == null) {_						previousState = new ArrayList<>()__					}_					previousState.add(value)__					_					return previousState__				}_			}___		_		for (int i = 0_ i < 10_000_000_ ++i) {__			int key = random.nextInt(20)__			int namespace = random.nextInt(4)__			Tuple2<Integer, Integer> compositeKey = new Tuple2<>(key, namespace)___			int op = random.nextInt(7)___			ArrayList<Integer> state = null__			ArrayList<Integer> referenceState = null___			switch (op) {_				case 0:_				case 1: {_					state = stateTable.get(key, namespace)__					referenceState = referenceMap.get(compositeKey)__					if (null == state) {_						state = new ArrayList<>()__						stateTable.put(key, namespace, state)__						referenceState = new ArrayList<>()__						referenceMap.put(compositeKey, referenceState)__					}_					break__				}_				case 2: {_					stateTable.put(key, namespace, new ArrayList<Integer>())__					referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 3: {_					state = stateTable.putAndGetOld(key, namespace, new ArrayList<Integer>())__					referenceState = referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 4: {_					stateTable.remove(key, namespace)__					referenceMap.remove(compositeKey)__					break__				}_				case 5: {_					state = stateTable.removeAndGetOld(key, namespace)__					referenceState = referenceMap.remove(compositeKey)__					break__				}_				case 6: {_					final int updateValue = random.nextInt(1000)__					stateTable.transform(key, namespace, updateValue, transformationFunction)__					referenceMap.put(compositeKey, transformationFunction.apply(_						referenceMap.remove(compositeKey), updateValue))__					break__				}_				default: {_					Assert.fail("Unknown op-code " + op)__				}_			}__			Assert.assertEquals(referenceMap.size(), stateTable.size())___			if (state != null) {_				_				if (random.nextBoolean() && !state.isEmpty()) {_					state.remove(state.size() - 1)__					referenceState.remove(referenceState.size() - 1)__				} else {_					state.add(val)__					referenceState.add(val)__					++val__				}_			}__			Assert.assertEquals(referenceState, state)___			_			if (i > 0 && i % 500 == 0) {__				if (snapshot != null) {_					_					deepCheck(reference, convert(snapshot, snapshotSize))___					if (i % 1_000 == 0) {_						_						++snapshotCounter__						stateTable.snapshotTableArrays()__						stateTable.releaseSnapshot(snapshotCounter)__					}__					_					if (i % 5_000 == 0) {_						snapshot = null__						reference = null__						snapshotSize = 0__						stateTable.releaseSnapshot(referencedSnapshotId)__					}__				} else {_					_					++snapshotCounter__					referencedSnapshotId = snapshotCounter__					snapshot = stateTable.snapshotTableArrays()__					snapshotSize = stateTable.size()__					reference = manualDeepDump(referenceMap)__				}_			}_		}_	};this,test,does,some,random,modifications,to,a,state,table,and,a,reference,hash,map,then,draws,snapshots,performs,more,modifications,and,checks,snapshot,integrity;test,public,void,test,random,modifications,and,copy,on,write,isolation,throws,exception,final,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,final,hash,map,tuple2,integer,integer,array,list,integer,reference,map,new,hash,map,final,random,random,new,random,42,copy,on,write,state,table,state,table,entry,integer,integer,array,list,integer,snapshot,null,int,snapshot,size,0,tuple3,integer,integer,array,list,integer,reference,null,int,val,0,int,snapshot,counter,0,int,referenced,snapshot,id,0,final,state,transformation,function,array,list,integer,integer,transformation,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,if,previous,state,null,previous,state,new,array,list,previous,state,add,value,return,previous,state,for,int,i,0,i,i,int,key,random,next,int,20,int,namespace,random,next,int,4,tuple2,integer,integer,composite,key,new,tuple2,key,namespace,int,op,random,next,int,7,array,list,integer,state,null,array,list,integer,reference,state,null,switch,op,case,0,case,1,state,state,table,get,key,namespace,reference,state,reference,map,get,composite,key,if,null,state,state,new,array,list,state,table,put,key,namespace,state,reference,state,new,array,list,reference,map,put,composite,key,reference,state,break,case,2,state,table,put,key,namespace,new,array,list,integer,reference,map,put,composite,key,new,array,list,integer,break,case,3,state,state,table,put,and,get,old,key,namespace,new,array,list,integer,reference,state,reference,map,put,composite,key,new,array,list,integer,break,case,4,state,table,remove,key,namespace,reference,map,remove,composite,key,break,case,5,state,state,table,remove,and,get,old,key,namespace,reference,state,reference,map,remove,composite,key,break,case,6,final,int,update,value,random,next,int,1000,state,table,transform,key,namespace,update,value,transformation,function,reference,map,put,composite,key,transformation,function,apply,reference,map,remove,composite,key,update,value,break,default,assert,fail,unknown,op,code,op,assert,assert,equals,reference,map,size,state,table,size,if,state,null,if,random,next,boolean,state,is,empty,state,remove,state,size,1,reference,state,remove,reference,state,size,1,else,state,add,val,reference,state,add,val,val,assert,assert,equals,reference,state,state,if,i,0,i,500,0,if,snapshot,null,deep,check,reference,convert,snapshot,snapshot,size,if,i,0,snapshot,counter,state,table,snapshot,table,arrays,state,table,release,snapshot,snapshot,counter,if,i,0,snapshot,null,reference,null,snapshot,size,0,state,table,release,snapshot,referenced,snapshot,id,else,snapshot,counter,referenced,snapshot,id,snapshot,counter,snapshot,state,table,snapshot,table,arrays,snapshot,size,state,table,size,reference,manual,deep,dump,reference,map
CopyOnWriteStateTableTest -> @Test 	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception;1541669895;This test does some random modifications to a state table and a reference (hash map). Then draws snapshots,_performs more modifications and checks snapshot integrity.;@Test_	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception {__		final RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		final HashMap<Tuple2<Integer, Integer>, ArrayList<Integer>> referenceMap = new HashMap<>()___		final Random random = new Random(42)___		_		CopyOnWriteStateTable.StateTableEntry<Integer, Integer, ArrayList<Integer>>[] snapshot = null__		int snapshotSize = 0___		_		Tuple3<Integer, Integer, ArrayList<Integer>>[] reference = null___		int val = 0____		int snapshotCounter = 0__		int referencedSnapshotId = 0___		final StateTransformationFunction<ArrayList<Integer>, Integer> transformationFunction =_			new StateTransformationFunction<ArrayList<Integer>, Integer>() {_				@Override_				public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_					if (previousState == null) {_						previousState = new ArrayList<>()__					}_					previousState.add(value)__					_					return previousState__				}_			}___		_		for (int i = 0_ i < 10_000_000_ ++i) {__			int key = random.nextInt(20)__			int namespace = random.nextInt(4)__			Tuple2<Integer, Integer> compositeKey = new Tuple2<>(key, namespace)___			int op = random.nextInt(7)___			ArrayList<Integer> state = null__			ArrayList<Integer> referenceState = null___			switch (op) {_				case 0:_				case 1: {_					state = stateTable.get(key, namespace)__					referenceState = referenceMap.get(compositeKey)__					if (null == state) {_						state = new ArrayList<>()__						stateTable.put(key, namespace, state)__						referenceState = new ArrayList<>()__						referenceMap.put(compositeKey, referenceState)__					}_					break__				}_				case 2: {_					stateTable.put(key, namespace, new ArrayList<Integer>())__					referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 3: {_					state = stateTable.putAndGetOld(key, namespace, new ArrayList<Integer>())__					referenceState = referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 4: {_					stateTable.remove(key, namespace)__					referenceMap.remove(compositeKey)__					break__				}_				case 5: {_					state = stateTable.removeAndGetOld(key, namespace)__					referenceState = referenceMap.remove(compositeKey)__					break__				}_				case 6: {_					final int updateValue = random.nextInt(1000)__					stateTable.transform(key, namespace, updateValue, transformationFunction)__					referenceMap.put(compositeKey, transformationFunction.apply(_						referenceMap.remove(compositeKey), updateValue))__					break__				}_				default: {_					Assert.fail("Unknown op-code " + op)__				}_			}__			Assert.assertEquals(referenceMap.size(), stateTable.size())___			if (state != null) {_				_				if (random.nextBoolean() && !state.isEmpty()) {_					state.remove(state.size() - 1)__					referenceState.remove(referenceState.size() - 1)__				} else {_					state.add(val)__					referenceState.add(val)__					++val__				}_			}__			Assert.assertEquals(referenceState, state)___			_			if (i > 0 && i % 500 == 0) {__				if (snapshot != null) {_					_					deepCheck(reference, convert(snapshot, snapshotSize))___					if (i % 1_000 == 0) {_						_						++snapshotCounter__						stateTable.snapshotTableArrays()__						stateTable.releaseSnapshot(snapshotCounter)__					}__					_					if (i % 5_000 == 0) {_						snapshot = null__						reference = null__						snapshotSize = 0__						stateTable.releaseSnapshot(referencedSnapshotId)__					}__				} else {_					_					++snapshotCounter__					referencedSnapshotId = snapshotCounter__					snapshot = stateTable.snapshotTableArrays()__					snapshotSize = stateTable.size()__					reference = manualDeepDump(referenceMap)__				}_			}_		}_	};this,test,does,some,random,modifications,to,a,state,table,and,a,reference,hash,map,then,draws,snapshots,performs,more,modifications,and,checks,snapshot,integrity;test,public,void,test,random,modifications,and,copy,on,write,isolation,throws,exception,final,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,final,hash,map,tuple2,integer,integer,array,list,integer,reference,map,new,hash,map,final,random,random,new,random,42,copy,on,write,state,table,state,table,entry,integer,integer,array,list,integer,snapshot,null,int,snapshot,size,0,tuple3,integer,integer,array,list,integer,reference,null,int,val,0,int,snapshot,counter,0,int,referenced,snapshot,id,0,final,state,transformation,function,array,list,integer,integer,transformation,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,if,previous,state,null,previous,state,new,array,list,previous,state,add,value,return,previous,state,for,int,i,0,i,i,int,key,random,next,int,20,int,namespace,random,next,int,4,tuple2,integer,integer,composite,key,new,tuple2,key,namespace,int,op,random,next,int,7,array,list,integer,state,null,array,list,integer,reference,state,null,switch,op,case,0,case,1,state,state,table,get,key,namespace,reference,state,reference,map,get,composite,key,if,null,state,state,new,array,list,state,table,put,key,namespace,state,reference,state,new,array,list,reference,map,put,composite,key,reference,state,break,case,2,state,table,put,key,namespace,new,array,list,integer,reference,map,put,composite,key,new,array,list,integer,break,case,3,state,state,table,put,and,get,old,key,namespace,new,array,list,integer,reference,state,reference,map,put,composite,key,new,array,list,integer,break,case,4,state,table,remove,key,namespace,reference,map,remove,composite,key,break,case,5,state,state,table,remove,and,get,old,key,namespace,reference,state,reference,map,remove,composite,key,break,case,6,final,int,update,value,random,next,int,1000,state,table,transform,key,namespace,update,value,transformation,function,reference,map,put,composite,key,transformation,function,apply,reference,map,remove,composite,key,update,value,break,default,assert,fail,unknown,op,code,op,assert,assert,equals,reference,map,size,state,table,size,if,state,null,if,random,next,boolean,state,is,empty,state,remove,state,size,1,reference,state,remove,reference,state,size,1,else,state,add,val,reference,state,add,val,val,assert,assert,equals,reference,state,state,if,i,0,i,500,0,if,snapshot,null,deep,check,reference,convert,snapshot,snapshot,size,if,i,0,snapshot,counter,state,table,snapshot,table,arrays,state,table,release,snapshot,snapshot,counter,if,i,0,snapshot,null,reference,null,snapshot,size,0,state,table,release,snapshot,referenced,snapshot,id,else,snapshot,counter,referenced,snapshot,id,snapshot,counter,snapshot,state,table,snapshot,table,arrays,snapshot,size,state,table,size,reference,manual,deep,dump,reference,map
CopyOnWriteStateTableTest -> @Test 	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception;1548755874;This test does some random modifications to a state table and a reference (hash map). Then draws snapshots,_performs more modifications and checks snapshot integrity.;@Test_	public void testRandomModificationsAndCopyOnWriteIsolation() throws Exception {__		final RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		final HashMap<Tuple2<Integer, Integer>, ArrayList<Integer>> referenceMap = new HashMap<>()___		final Random random = new Random(42)___		_		CopyOnWriteStateTable.StateTableEntry<Integer, Integer, ArrayList<Integer>>[] snapshot = null__		int snapshotSize = 0___		_		Tuple3<Integer, Integer, ArrayList<Integer>>[] reference = null___		int val = 0____		int snapshotCounter = 0__		int referencedSnapshotId = 0___		final StateTransformationFunction<ArrayList<Integer>, Integer> transformationFunction =_			new StateTransformationFunction<ArrayList<Integer>, Integer>() {_				@Override_				public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_					if (previousState == null) {_						previousState = new ArrayList<>()__					}_					previousState.add(value)__					_					return previousState__				}_			}___		StateIncrementalVisitor<Integer, Integer, ArrayList<Integer>> updatingIterator =_			stateTable.getStateIncrementalVisitor(5)___		_		for (int i = 0_ i < 10_000_000_ ++i) {__			int key = random.nextInt(20)__			int namespace = random.nextInt(4)__			Tuple2<Integer, Integer> compositeKey = new Tuple2<>(key, namespace)___			int op = random.nextInt(10)___			ArrayList<Integer> state = null__			ArrayList<Integer> referenceState = null___			switch (op) {_				case 0:_				case 1: {_					state = stateTable.get(key, namespace)__					referenceState = referenceMap.get(compositeKey)__					if (null == state) {_						state = new ArrayList<>()__						stateTable.put(key, namespace, state)__						referenceState = new ArrayList<>()__						referenceMap.put(compositeKey, referenceState)__					}_					break__				}_				case 2: {_					stateTable.put(key, namespace, new ArrayList<Integer>())__					referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 3: {_					state = stateTable.putAndGetOld(key, namespace, new ArrayList<Integer>())__					referenceState = referenceMap.put(compositeKey, new ArrayList<Integer>())__					break__				}_				case 4: {_					stateTable.remove(key, namespace)__					referenceMap.remove(compositeKey)__					break__				}_				case 5: {_					state = stateTable.removeAndGetOld(key, namespace)__					referenceState = referenceMap.remove(compositeKey)__					break__				}_				case 6: {_					final int updateValue = random.nextInt(1000)__					stateTable.transform(key, namespace, updateValue, transformationFunction)__					referenceMap.put(compositeKey, transformationFunction.apply(_						referenceMap.remove(compositeKey), updateValue))__					break__				}_				case 7:_				case 8:_				case 9:_					if (!updatingIterator.hasNext()) {_						updatingIterator = stateTable.getStateIncrementalVisitor(5)__						if (!updatingIterator.hasNext()) {_							break__						}_					}_					testStateIteratorWithUpdate(_						updatingIterator, stateTable, referenceMap, op == 8, op == 9)__					break__				default: {_					Assert.fail("Unknown op-code " + op)__				}_			}__			Assert.assertEquals(referenceMap.size(), stateTable.size())___			if (state != null) {_				_				if (random.nextBoolean() && !state.isEmpty()) {_					state.remove(state.size() - 1)__					referenceState.remove(referenceState.size() - 1)__				} else {_					state.add(val)__					referenceState.add(val)__					++val__				}_			}__			Assert.assertEquals(referenceState, state)___			_			if (i > 0 && i % 500 == 0) {__				if (snapshot != null) {_					_					deepCheck(reference, convert(snapshot, snapshotSize))___					if (i % 1_000 == 0) {_						_						++snapshotCounter__						stateTable.snapshotTableArrays()__						stateTable.releaseSnapshot(snapshotCounter)__					}__					_					if (i % 5_000 == 0) {_						snapshot = null__						reference = null__						snapshotSize = 0__						stateTable.releaseSnapshot(referencedSnapshotId)__					}__				} else {_					_					++snapshotCounter__					referencedSnapshotId = snapshotCounter__					snapshot = stateTable.snapshotTableArrays()__					snapshotSize = stateTable.size()__					reference = manualDeepDump(referenceMap)__				}_			}_		}_	};this,test,does,some,random,modifications,to,a,state,table,and,a,reference,hash,map,then,draws,snapshots,performs,more,modifications,and,checks,snapshot,integrity;test,public,void,test,random,modifications,and,copy,on,write,isolation,throws,exception,final,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,final,hash,map,tuple2,integer,integer,array,list,integer,reference,map,new,hash,map,final,random,random,new,random,42,copy,on,write,state,table,state,table,entry,integer,integer,array,list,integer,snapshot,null,int,snapshot,size,0,tuple3,integer,integer,array,list,integer,reference,null,int,val,0,int,snapshot,counter,0,int,referenced,snapshot,id,0,final,state,transformation,function,array,list,integer,integer,transformation,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,if,previous,state,null,previous,state,new,array,list,previous,state,add,value,return,previous,state,state,incremental,visitor,integer,integer,array,list,integer,updating,iterator,state,table,get,state,incremental,visitor,5,for,int,i,0,i,i,int,key,random,next,int,20,int,namespace,random,next,int,4,tuple2,integer,integer,composite,key,new,tuple2,key,namespace,int,op,random,next,int,10,array,list,integer,state,null,array,list,integer,reference,state,null,switch,op,case,0,case,1,state,state,table,get,key,namespace,reference,state,reference,map,get,composite,key,if,null,state,state,new,array,list,state,table,put,key,namespace,state,reference,state,new,array,list,reference,map,put,composite,key,reference,state,break,case,2,state,table,put,key,namespace,new,array,list,integer,reference,map,put,composite,key,new,array,list,integer,break,case,3,state,state,table,put,and,get,old,key,namespace,new,array,list,integer,reference,state,reference,map,put,composite,key,new,array,list,integer,break,case,4,state,table,remove,key,namespace,reference,map,remove,composite,key,break,case,5,state,state,table,remove,and,get,old,key,namespace,reference,state,reference,map,remove,composite,key,break,case,6,final,int,update,value,random,next,int,1000,state,table,transform,key,namespace,update,value,transformation,function,reference,map,put,composite,key,transformation,function,apply,reference,map,remove,composite,key,update,value,break,case,7,case,8,case,9,if,updating,iterator,has,next,updating,iterator,state,table,get,state,incremental,visitor,5,if,updating,iterator,has,next,break,test,state,iterator,with,update,updating,iterator,state,table,reference,map,op,8,op,9,break,default,assert,fail,unknown,op,code,op,assert,assert,equals,reference,map,size,state,table,size,if,state,null,if,random,next,boolean,state,is,empty,state,remove,state,size,1,reference,state,remove,reference,state,size,1,else,state,add,val,reference,state,add,val,val,assert,assert,equals,reference,state,state,if,i,0,i,500,0,if,snapshot,null,deep,check,reference,convert,snapshot,snapshot,size,if,i,0,snapshot,counter,state,table,snapshot,table,arrays,state,table,release,snapshot,snapshot,counter,if,i,0,snapshot,null,reference,null,snapshot,size,0,state,table,release,snapshot,referenced,snapshot,id,else,snapshot,counter,referenced,snapshot,id,snapshot,counter,snapshot,state,table,snapshot,table,arrays,snapshot,size,state,table,size,reference,manual,deep,dump,reference,map
CopyOnWriteStateTableTest -> @Test 	public void testSerializerDuplicationInSnapshot() throws IOException;1490721653;This tests that serializers used for snapshots are duplicates of the ones used in_processing to avoid race conditions in stateful serializers.;@Test_	public void testSerializerDuplicationInSnapshot() throws IOException {__		final TestDuplicateSerializer namespaceSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer stateSerializer = new TestDuplicateSerializer()___		final TestDuplicateSerializer keySerializer = new TestDuplicateSerializer()____		RegisteredBackendStateMetaInfo<Integer, Integer> metaInfo =_			new RegisteredBackendStateMetaInfo<>(_				StateDescriptor.Type.VALUE,_				"test",_				namespaceSerializer,_				stateSerializer)___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		InternalKeyContext<Integer> mockKeyContext = new InternalKeyContext<Integer>() {_			@Override_			public Integer getCurrentKey() {_				return 0__			}__			@Override_			public int getCurrentKeyGroupIndex() {_				return 0__			}__			@Override_			public int getNumberOfKeyGroups() {_				return 1__			}__			@Override_			public KeyGroupRange getKeyGroupRange() {_				return keyGroupRange__			}__			@Override_			public TypeSerializer<Integer> getKeySerializer() {_				return keySerializer__			}_		}___		CopyOnWriteStateTable<Integer, Integer, Integer> table =_			new CopyOnWriteStateTable<>(mockKeyContext, metaInfo)___		table.put(0, 0, 0, 0)__		table.put(1, 0, 0, 1)__		table.put(2, 0, 1, 2)____		CopyOnWriteStateTableSnapshot<Integer, Integer, Integer> snapshot = table.createSnapshot()___		try {__			namespaceSerializer.disable()__			keySerializer.disable()__			stateSerializer.disable()___			snapshot.writeMappingsInKeyGroup(_				new DataOutputViewStreamWrapper(_					new ByteArrayOutputStreamWithPos(1024)), 0)___		} finally {_			table.releaseSnapshot(snapshot)__		}_	};this,tests,that,serializers,used,for,snapshots,are,duplicates,of,the,ones,used,in,processing,to,avoid,race,conditions,in,stateful,serializers;test,public,void,test,serializer,duplication,in,snapshot,throws,ioexception,final,test,duplicate,serializer,namespace,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,state,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,key,serializer,new,test,duplicate,serializer,registered,backend,state,meta,info,integer,integer,meta,info,new,registered,backend,state,meta,info,state,descriptor,type,value,test,namespace,serializer,state,serializer,final,key,group,range,key,group,range,new,key,group,range,0,0,internal,key,context,integer,mock,key,context,new,internal,key,context,integer,override,public,integer,get,current,key,return,0,override,public,int,get,current,key,group,index,return,0,override,public,int,get,number,of,key,groups,return,1,override,public,key,group,range,get,key,group,range,return,key,group,range,override,public,type,serializer,integer,get,key,serializer,return,key,serializer,copy,on,write,state,table,integer,integer,integer,table,new,copy,on,write,state,table,mock,key,context,meta,info,table,put,0,0,0,0,table,put,1,0,0,1,table,put,2,0,1,2,copy,on,write,state,table,snapshot,integer,integer,integer,snapshot,table,create,snapshot,try,namespace,serializer,disable,key,serializer,disable,state,serializer,disable,snapshot,write,mappings,in,key,group,new,data,output,view,stream,wrapper,new,byte,array,output,stream,with,pos,1024,0,finally,table,release,snapshot,snapshot
CopyOnWriteStateTableTest -> @Test 	public void testSerializerDuplicationInSnapshot() throws IOException;1494180263;This tests that serializers used for snapshots are duplicates of the ones used in_processing to avoid race conditions in stateful serializers.;@Test_	public void testSerializerDuplicationInSnapshot() throws IOException {__		final TestDuplicateSerializer namespaceSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer stateSerializer = new TestDuplicateSerializer()___		final TestDuplicateSerializer keySerializer = new TestDuplicateSerializer()____		RegisteredKeyedBackendStateMetaInfo<Integer, Integer> metaInfo =_			new RegisteredKeyedBackendStateMetaInfo<>(_				StateDescriptor.Type.VALUE,_				"test",_				namespaceSerializer,_				stateSerializer)___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		InternalKeyContext<Integer> mockKeyContext = new InternalKeyContext<Integer>() {_			@Override_			public Integer getCurrentKey() {_				return 0__			}__			@Override_			public int getCurrentKeyGroupIndex() {_				return 0__			}__			@Override_			public int getNumberOfKeyGroups() {_				return 1__			}__			@Override_			public KeyGroupRange getKeyGroupRange() {_				return keyGroupRange__			}__			@Override_			public TypeSerializer<Integer> getKeySerializer() {_				return keySerializer__			}_		}___		CopyOnWriteStateTable<Integer, Integer, Integer> table =_			new CopyOnWriteStateTable<>(mockKeyContext, metaInfo)___		table.put(0, 0, 0, 0)__		table.put(1, 0, 0, 1)__		table.put(2, 0, 1, 2)____		CopyOnWriteStateTableSnapshot<Integer, Integer, Integer> snapshot = table.createSnapshot()___		try {__			namespaceSerializer.disable()__			keySerializer.disable()__			stateSerializer.disable()___			snapshot.writeMappingsInKeyGroup(_				new DataOutputViewStreamWrapper(_					new ByteArrayOutputStreamWithPos(1024)), 0)___		} finally {_			table.releaseSnapshot(snapshot)__		}_	};this,tests,that,serializers,used,for,snapshots,are,duplicates,of,the,ones,used,in,processing,to,avoid,race,conditions,in,stateful,serializers;test,public,void,test,serializer,duplication,in,snapshot,throws,ioexception,final,test,duplicate,serializer,namespace,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,state,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,key,serializer,new,test,duplicate,serializer,registered,keyed,backend,state,meta,info,integer,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,value,test,namespace,serializer,state,serializer,final,key,group,range,key,group,range,new,key,group,range,0,0,internal,key,context,integer,mock,key,context,new,internal,key,context,integer,override,public,integer,get,current,key,return,0,override,public,int,get,current,key,group,index,return,0,override,public,int,get,number,of,key,groups,return,1,override,public,key,group,range,get,key,group,range,return,key,group,range,override,public,type,serializer,integer,get,key,serializer,return,key,serializer,copy,on,write,state,table,integer,integer,integer,table,new,copy,on,write,state,table,mock,key,context,meta,info,table,put,0,0,0,0,table,put,1,0,0,1,table,put,2,0,1,2,copy,on,write,state,table,snapshot,integer,integer,integer,snapshot,table,create,snapshot,try,namespace,serializer,disable,key,serializer,disable,state,serializer,disable,snapshot,write,mappings,in,key,group,new,data,output,view,stream,wrapper,new,byte,array,output,stream,with,pos,1024,0,finally,table,release,snapshot,snapshot
CopyOnWriteStateTableTest -> @Test 	public void testSerializerDuplicationInSnapshot() throws IOException;1505995902;This tests that serializers used for snapshots are duplicates of the ones used in_processing to avoid race conditions in stateful serializers.;@Test_	public void testSerializerDuplicationInSnapshot() throws IOException {__		final TestDuplicateSerializer namespaceSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer stateSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer keySerializer = new TestDuplicateSerializer()___		RegisteredKeyedBackendStateMetaInfo<Integer, Integer> metaInfo =_			new RegisteredKeyedBackendStateMetaInfo<>(_				StateDescriptor.Type.VALUE,_				"test",_				namespaceSerializer,_				stateSerializer)___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		InternalKeyContext<Integer> mockKeyContext = new InternalKeyContext<Integer>() {_			@Override_			public Integer getCurrentKey() {_				return 0__			}__			@Override_			public int getCurrentKeyGroupIndex() {_				return 0__			}__			@Override_			public int getNumberOfKeyGroups() {_				return 1__			}__			@Override_			public KeyGroupRange getKeyGroupRange() {_				return keyGroupRange__			}__			@Override_			public TypeSerializer<Integer> getKeySerializer() {_				return keySerializer__			}_		}___		CopyOnWriteStateTable<Integer, Integer, Integer> table =_			new CopyOnWriteStateTable<>(mockKeyContext, metaInfo)___		table.put(0, 0, 0, 0)__		table.put(1, 0, 0, 1)__		table.put(2, 0, 1, 2)____		CopyOnWriteStateTableSnapshot<Integer, Integer, Integer> snapshot = table.createSnapshot()___		try {__			namespaceSerializer.disable()__			keySerializer.disable()__			stateSerializer.disable()___			snapshot.writeMappingsInKeyGroup(_				new DataOutputViewStreamWrapper(_					new ByteArrayOutputStreamWithPos(1024)), 0)___		} finally {_			table.releaseSnapshot(snapshot)__		}_	};this,tests,that,serializers,used,for,snapshots,are,duplicates,of,the,ones,used,in,processing,to,avoid,race,conditions,in,stateful,serializers;test,public,void,test,serializer,duplication,in,snapshot,throws,ioexception,final,test,duplicate,serializer,namespace,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,state,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,key,serializer,new,test,duplicate,serializer,registered,keyed,backend,state,meta,info,integer,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,value,test,namespace,serializer,state,serializer,final,key,group,range,key,group,range,new,key,group,range,0,0,internal,key,context,integer,mock,key,context,new,internal,key,context,integer,override,public,integer,get,current,key,return,0,override,public,int,get,current,key,group,index,return,0,override,public,int,get,number,of,key,groups,return,1,override,public,key,group,range,get,key,group,range,return,key,group,range,override,public,type,serializer,integer,get,key,serializer,return,key,serializer,copy,on,write,state,table,integer,integer,integer,table,new,copy,on,write,state,table,mock,key,context,meta,info,table,put,0,0,0,0,table,put,1,0,0,1,table,put,2,0,1,2,copy,on,write,state,table,snapshot,integer,integer,integer,snapshot,table,create,snapshot,try,namespace,serializer,disable,key,serializer,disable,state,serializer,disable,snapshot,write,mappings,in,key,group,new,data,output,view,stream,wrapper,new,byte,array,output,stream,with,pos,1024,0,finally,table,release,snapshot,snapshot
CopyOnWriteStateTableTest -> @Test 	public void testSerializerDuplicationInSnapshot() throws IOException;1529089579;This tests that serializers used for snapshots are duplicates of the ones used in_processing to avoid race conditions in stateful serializers.;@Test_	public void testSerializerDuplicationInSnapshot() throws IOException {__		final TestDuplicateSerializer namespaceSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer stateSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer keySerializer = new TestDuplicateSerializer()___		RegisteredKeyedBackendStateMetaInfo<Integer, Integer> metaInfo =_			new RegisteredKeyedBackendStateMetaInfo<>(_				StateDescriptor.Type.VALUE,_				"test",_				namespaceSerializer,_				stateSerializer)___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		InternalKeyContext<Integer> mockKeyContext = new InternalKeyContext<Integer>() {_			@Override_			public Integer getCurrentKey() {_				return 0__			}__			@Override_			public int getCurrentKeyGroupIndex() {_				return 0__			}__			@Override_			public int getNumberOfKeyGroups() {_				return 1__			}__			@Override_			public KeyGroupRange getKeyGroupRange() {_				return keyGroupRange__			}__			@Override_			public TypeSerializer<Integer> getKeySerializer() {_				return keySerializer__			}_		}___		CopyOnWriteStateTable<Integer, Integer, Integer> table =_			new CopyOnWriteStateTable<>(mockKeyContext, metaInfo)___		table.put(0, 0, 0, 0)__		table.put(1, 0, 0, 1)__		table.put(2, 0, 1, 2)____		final CopyOnWriteStateTableSnapshot<Integer, Integer, Integer> snapshot = table.createSnapshot()___		try {_			final StateSnapshot.KeyGroupPartitionedSnapshot partitionedSnapshot = snapshot.partitionByKeyGroup()__			namespaceSerializer.disable()__			keySerializer.disable()__			stateSerializer.disable()___			partitionedSnapshot.writeMappingsInKeyGroup(_				new DataOutputViewStreamWrapper(_					new ByteArrayOutputStreamWithPos(1024)), 0)___		} finally {_			table.releaseSnapshot(snapshot)__		}_	};this,tests,that,serializers,used,for,snapshots,are,duplicates,of,the,ones,used,in,processing,to,avoid,race,conditions,in,stateful,serializers;test,public,void,test,serializer,duplication,in,snapshot,throws,ioexception,final,test,duplicate,serializer,namespace,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,state,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,key,serializer,new,test,duplicate,serializer,registered,keyed,backend,state,meta,info,integer,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,value,test,namespace,serializer,state,serializer,final,key,group,range,key,group,range,new,key,group,range,0,0,internal,key,context,integer,mock,key,context,new,internal,key,context,integer,override,public,integer,get,current,key,return,0,override,public,int,get,current,key,group,index,return,0,override,public,int,get,number,of,key,groups,return,1,override,public,key,group,range,get,key,group,range,return,key,group,range,override,public,type,serializer,integer,get,key,serializer,return,key,serializer,copy,on,write,state,table,integer,integer,integer,table,new,copy,on,write,state,table,mock,key,context,meta,info,table,put,0,0,0,0,table,put,1,0,0,1,table,put,2,0,1,2,final,copy,on,write,state,table,snapshot,integer,integer,integer,snapshot,table,create,snapshot,try,final,state,snapshot,key,group,partitioned,snapshot,partitioned,snapshot,snapshot,partition,by,key,group,namespace,serializer,disable,key,serializer,disable,state,serializer,disable,partitioned,snapshot,write,mappings,in,key,group,new,data,output,view,stream,wrapper,new,byte,array,output,stream,with,pos,1024,0,finally,table,release,snapshot,snapshot
CopyOnWriteStateTableTest -> @Test 	public void testSerializerDuplicationInSnapshot() throws IOException;1531404901;This tests that serializers used for snapshots are duplicates of the ones used in_processing to avoid race conditions in stateful serializers.;@Test_	public void testSerializerDuplicationInSnapshot() throws IOException {__		final TestDuplicateSerializer namespaceSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer stateSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer keySerializer = new TestDuplicateSerializer()___		RegisteredKeyedBackendStateMetaInfo<Integer, Integer> metaInfo =_			new RegisteredKeyedBackendStateMetaInfo<>(_				StateDescriptor.Type.VALUE,_				"test",_				namespaceSerializer,_				stateSerializer)___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		InternalKeyContext<Integer> mockKeyContext = new InternalKeyContext<Integer>() {_			@Override_			public Integer getCurrentKey() {_				return 0__			}__			@Override_			public int getCurrentKeyGroupIndex() {_				return 0__			}__			@Override_			public int getNumberOfKeyGroups() {_				return 1__			}__			@Override_			public KeyGroupRange getKeyGroupRange() {_				return keyGroupRange__			}__			@Override_			public TypeSerializer<Integer> getKeySerializer() {_				return keySerializer__			}_		}___		CopyOnWriteStateTable<Integer, Integer, Integer> table =_			new CopyOnWriteStateTable<>(mockKeyContext, metaInfo)___		table.put(0, 0, 0, 0)__		table.put(1, 0, 0, 1)__		table.put(2, 0, 1, 2)____		final CopyOnWriteStateTableSnapshot<Integer, Integer, Integer> snapshot = table.createSnapshot()___		try {_			final StateSnapshot.KeyGroupPartitionedSnapshot partitionedSnapshot = snapshot.partitionByKeyGroup()__			namespaceSerializer.disable()__			keySerializer.disable()__			stateSerializer.disable()___			partitionedSnapshot.writeMappingsInKeyGroup(_				new DataOutputViewStreamWrapper(_					new ByteArrayOutputStreamWithPos(1024)), 0)___		} finally {_			table.releaseSnapshot(snapshot)__		}_	};this,tests,that,serializers,used,for,snapshots,are,duplicates,of,the,ones,used,in,processing,to,avoid,race,conditions,in,stateful,serializers;test,public,void,test,serializer,duplication,in,snapshot,throws,ioexception,final,test,duplicate,serializer,namespace,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,state,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,key,serializer,new,test,duplicate,serializer,registered,keyed,backend,state,meta,info,integer,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,value,test,namespace,serializer,state,serializer,final,key,group,range,key,group,range,new,key,group,range,0,0,internal,key,context,integer,mock,key,context,new,internal,key,context,integer,override,public,integer,get,current,key,return,0,override,public,int,get,current,key,group,index,return,0,override,public,int,get,number,of,key,groups,return,1,override,public,key,group,range,get,key,group,range,return,key,group,range,override,public,type,serializer,integer,get,key,serializer,return,key,serializer,copy,on,write,state,table,integer,integer,integer,table,new,copy,on,write,state,table,mock,key,context,meta,info,table,put,0,0,0,0,table,put,1,0,0,1,table,put,2,0,1,2,final,copy,on,write,state,table,snapshot,integer,integer,integer,snapshot,table,create,snapshot,try,final,state,snapshot,key,group,partitioned,snapshot,partitioned,snapshot,snapshot,partition,by,key,group,namespace,serializer,disable,key,serializer,disable,state,serializer,disable,partitioned,snapshot,write,mappings,in,key,group,new,data,output,view,stream,wrapper,new,byte,array,output,stream,with,pos,1024,0,finally,table,release,snapshot,snapshot
CopyOnWriteStateTableTest -> @Test 	public void testSerializerDuplicationInSnapshot() throws IOException;1531771917;This tests that serializers used for snapshots are duplicates of the ones used in_processing to avoid race conditions in stateful serializers.;@Test_	public void testSerializerDuplicationInSnapshot() throws IOException {__		final TestDuplicateSerializer namespaceSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer stateSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer keySerializer = new TestDuplicateSerializer()___		RegisteredKeyValueStateBackendMetaInfo<Integer, Integer> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.VALUE,_				"test",_				namespaceSerializer,_				stateSerializer)___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		InternalKeyContext<Integer> mockKeyContext = new InternalKeyContext<Integer>() {_			@Override_			public Integer getCurrentKey() {_				return 0__			}__			@Override_			public int getCurrentKeyGroupIndex() {_				return 0__			}__			@Override_			public int getNumberOfKeyGroups() {_				return 1__			}__			@Override_			public KeyGroupRange getKeyGroupRange() {_				return keyGroupRange__			}__			@Override_			public TypeSerializer<Integer> getKeySerializer() {_				return keySerializer__			}_		}___		CopyOnWriteStateTable<Integer, Integer, Integer> table =_			new CopyOnWriteStateTable<>(mockKeyContext, metaInfo)___		table.put(0, 0, 0, 0)__		table.put(1, 0, 0, 1)__		table.put(2, 0, 1, 2)____		final CopyOnWriteStateTableSnapshot<Integer, Integer, Integer> snapshot = table.stateSnapshot()___		try {_			final StateSnapshot.StateKeyGroupWriter partitionedSnapshot = snapshot.getKeyGroupWriter()__			namespaceSerializer.disable()__			keySerializer.disable()__			stateSerializer.disable()___			partitionedSnapshot.writeStateInKeyGroup(_				new DataOutputViewStreamWrapper(_					new ByteArrayOutputStreamWithPos(1024)), 0)___		} finally {_			table.releaseSnapshot(snapshot)__		}_	};this,tests,that,serializers,used,for,snapshots,are,duplicates,of,the,ones,used,in,processing,to,avoid,race,conditions,in,stateful,serializers;test,public,void,test,serializer,duplication,in,snapshot,throws,ioexception,final,test,duplicate,serializer,namespace,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,state,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,key,serializer,new,test,duplicate,serializer,registered,key,value,state,backend,meta,info,integer,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,value,test,namespace,serializer,state,serializer,final,key,group,range,key,group,range,new,key,group,range,0,0,internal,key,context,integer,mock,key,context,new,internal,key,context,integer,override,public,integer,get,current,key,return,0,override,public,int,get,current,key,group,index,return,0,override,public,int,get,number,of,key,groups,return,1,override,public,key,group,range,get,key,group,range,return,key,group,range,override,public,type,serializer,integer,get,key,serializer,return,key,serializer,copy,on,write,state,table,integer,integer,integer,table,new,copy,on,write,state,table,mock,key,context,meta,info,table,put,0,0,0,0,table,put,1,0,0,1,table,put,2,0,1,2,final,copy,on,write,state,table,snapshot,integer,integer,integer,snapshot,table,state,snapshot,try,final,state,snapshot,state,key,group,writer,partitioned,snapshot,snapshot,get,key,group,writer,namespace,serializer,disable,key,serializer,disable,state,serializer,disable,partitioned,snapshot,write,state,in,key,group,new,data,output,view,stream,wrapper,new,byte,array,output,stream,with,pos,1024,0,finally,table,release,snapshot,snapshot
CopyOnWriteStateTableTest -> @Test 	public void testSerializerDuplicationInSnapshot() throws IOException;1539149027;This tests that serializers used for snapshots are duplicates of the ones used in_processing to avoid race conditions in stateful serializers.;@Test_	public void testSerializerDuplicationInSnapshot() throws IOException {__		final TestDuplicateSerializer namespaceSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer stateSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer keySerializer = new TestDuplicateSerializer()___		RegisteredKeyValueStateBackendMetaInfo<Integer, Integer> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.VALUE,_				"test",_				namespaceSerializer,_				stateSerializer)___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		InternalKeyContext<Integer> mockKeyContext = new InternalKeyContext<Integer>() {_			@Override_			public Integer getCurrentKey() {_				return 0__			}__			@Override_			public int getCurrentKeyGroupIndex() {_				return 0__			}__			@Override_			public int getNumberOfKeyGroups() {_				return 1__			}__			@Override_			public KeyGroupRange getKeyGroupRange() {_				return keyGroupRange__			}__			@Override_			public TypeSerializer<Integer> getKeySerializer() {_				return keySerializer__			}_		}___		CopyOnWriteStateTable<Integer, Integer, Integer> table =_			new CopyOnWriteStateTable<>(mockKeyContext, metaInfo)___		table.put(0, 0, 0, 0)__		table.put(1, 0, 0, 1)__		table.put(2, 0, 1, 2)____		final CopyOnWriteStateTableSnapshot<Integer, Integer, Integer> snapshot = table.stateSnapshot()___		try {_			final StateSnapshot.StateKeyGroupWriter partitionedSnapshot = snapshot.getKeyGroupWriter()__			namespaceSerializer.disable()__			keySerializer.disable()__			stateSerializer.disable()___			partitionedSnapshot.writeStateInKeyGroup(_				new DataOutputViewStreamWrapper(_					new ByteArrayOutputStreamWithPos(1024)), 0)___		} finally {_			table.releaseSnapshot(snapshot)__		}_	};this,tests,that,serializers,used,for,snapshots,are,duplicates,of,the,ones,used,in,processing,to,avoid,race,conditions,in,stateful,serializers;test,public,void,test,serializer,duplication,in,snapshot,throws,ioexception,final,test,duplicate,serializer,namespace,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,state,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,key,serializer,new,test,duplicate,serializer,registered,key,value,state,backend,meta,info,integer,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,value,test,namespace,serializer,state,serializer,final,key,group,range,key,group,range,new,key,group,range,0,0,internal,key,context,integer,mock,key,context,new,internal,key,context,integer,override,public,integer,get,current,key,return,0,override,public,int,get,current,key,group,index,return,0,override,public,int,get,number,of,key,groups,return,1,override,public,key,group,range,get,key,group,range,return,key,group,range,override,public,type,serializer,integer,get,key,serializer,return,key,serializer,copy,on,write,state,table,integer,integer,integer,table,new,copy,on,write,state,table,mock,key,context,meta,info,table,put,0,0,0,0,table,put,1,0,0,1,table,put,2,0,1,2,final,copy,on,write,state,table,snapshot,integer,integer,integer,snapshot,table,state,snapshot,try,final,state,snapshot,state,key,group,writer,partitioned,snapshot,snapshot,get,key,group,writer,namespace,serializer,disable,key,serializer,disable,state,serializer,disable,partitioned,snapshot,write,state,in,key,group,new,data,output,view,stream,wrapper,new,byte,array,output,stream,with,pos,1024,0,finally,table,release,snapshot,snapshot
CopyOnWriteStateTableTest -> @Test 	public void testSerializerDuplicationInSnapshot() throws IOException;1541669895;This tests that serializers used for snapshots are duplicates of the ones used in_processing to avoid race conditions in stateful serializers.;@Test_	public void testSerializerDuplicationInSnapshot() throws IOException {__		final TestDuplicateSerializer namespaceSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer stateSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer keySerializer = new TestDuplicateSerializer()___		RegisteredKeyValueStateBackendMetaInfo<Integer, Integer> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.VALUE,_				"test",_				namespaceSerializer,_				stateSerializer)___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		InternalKeyContext<Integer> mockKeyContext = new InternalKeyContext<Integer>() {_			@Override_			public Integer getCurrentKey() {_				return 0__			}__			@Override_			public int getCurrentKeyGroupIndex() {_				return 0__			}__			@Override_			public int getNumberOfKeyGroups() {_				return 1__			}__			@Override_			public KeyGroupRange getKeyGroupRange() {_				return keyGroupRange__			}__			@Override_			public TypeSerializer<Integer> getKeySerializer() {_				return keySerializer__			}_		}___		CopyOnWriteStateTable<Integer, Integer, Integer> table =_			new CopyOnWriteStateTable<>(mockKeyContext, metaInfo)___		table.put(0, 0, 0, 0)__		table.put(1, 0, 0, 1)__		table.put(2, 0, 1, 2)____		final CopyOnWriteStateTableSnapshot<Integer, Integer, Integer> snapshot = table.stateSnapshot()___		try {_			final StateSnapshot.StateKeyGroupWriter partitionedSnapshot = snapshot.getKeyGroupWriter()__			namespaceSerializer.disable()__			keySerializer.disable()__			stateSerializer.disable()___			partitionedSnapshot.writeStateInKeyGroup(_				new DataOutputViewStreamWrapper(_					new ByteArrayOutputStreamWithPos(1024)), 0)___		} finally {_			table.releaseSnapshot(snapshot)__		}_	};this,tests,that,serializers,used,for,snapshots,are,duplicates,of,the,ones,used,in,processing,to,avoid,race,conditions,in,stateful,serializers;test,public,void,test,serializer,duplication,in,snapshot,throws,ioexception,final,test,duplicate,serializer,namespace,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,state,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,key,serializer,new,test,duplicate,serializer,registered,key,value,state,backend,meta,info,integer,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,value,test,namespace,serializer,state,serializer,final,key,group,range,key,group,range,new,key,group,range,0,0,internal,key,context,integer,mock,key,context,new,internal,key,context,integer,override,public,integer,get,current,key,return,0,override,public,int,get,current,key,group,index,return,0,override,public,int,get,number,of,key,groups,return,1,override,public,key,group,range,get,key,group,range,return,key,group,range,override,public,type,serializer,integer,get,key,serializer,return,key,serializer,copy,on,write,state,table,integer,integer,integer,table,new,copy,on,write,state,table,mock,key,context,meta,info,table,put,0,0,0,0,table,put,1,0,0,1,table,put,2,0,1,2,final,copy,on,write,state,table,snapshot,integer,integer,integer,snapshot,table,state,snapshot,try,final,state,snapshot,state,key,group,writer,partitioned,snapshot,snapshot,get,key,group,writer,namespace,serializer,disable,key,serializer,disable,state,serializer,disable,partitioned,snapshot,write,state,in,key,group,new,data,output,view,stream,wrapper,new,byte,array,output,stream,with,pos,1024,0,finally,table,release,snapshot,snapshot
CopyOnWriteStateTableTest -> @Test 	public void testSerializerDuplicationInSnapshot() throws IOException;1548755874;This tests that serializers used for snapshots are duplicates of the ones used in_processing to avoid race conditions in stateful serializers.;@Test_	public void testSerializerDuplicationInSnapshot() throws IOException {__		final TestDuplicateSerializer namespaceSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer stateSerializer = new TestDuplicateSerializer()__		final TestDuplicateSerializer keySerializer = new TestDuplicateSerializer()___		RegisteredKeyValueStateBackendMetaInfo<Integer, Integer> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.VALUE,_				"test",_				namespaceSerializer,_				stateSerializer)___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 0)__		InternalKeyContext<Integer> mockKeyContext = new InternalKeyContext<Integer>() {_			@Override_			public Integer getCurrentKey() {_				return 0__			}__			@Override_			public int getCurrentKeyGroupIndex() {_				return 0__			}__			@Override_			public int getNumberOfKeyGroups() {_				return 1__			}__			@Override_			public KeyGroupRange getKeyGroupRange() {_				return keyGroupRange__			}__			@Override_			public TypeSerializer<Integer> getKeySerializer() {_				return keySerializer__			}_		}___		CopyOnWriteStateTable<Integer, Integer, Integer> table =_			new CopyOnWriteStateTable<>(mockKeyContext, metaInfo)___		table.put(0, 0, 0, 0)__		table.put(1, 0, 0, 1)__		table.put(2, 0, 1, 2)____		final CopyOnWriteStateTableSnapshot<Integer, Integer, Integer> snapshot = table.stateSnapshot()___		try {_			final StateSnapshot.StateKeyGroupWriter partitionedSnapshot = snapshot.getKeyGroupWriter()__			namespaceSerializer.disable()__			keySerializer.disable()__			stateSerializer.disable()___			partitionedSnapshot.writeStateInKeyGroup(_				new DataOutputViewStreamWrapper(_					new ByteArrayOutputStreamWithPos(1024)), 0)___		} finally {_			table.releaseSnapshot(snapshot)__		}_	};this,tests,that,serializers,used,for,snapshots,are,duplicates,of,the,ones,used,in,processing,to,avoid,race,conditions,in,stateful,serializers;test,public,void,test,serializer,duplication,in,snapshot,throws,ioexception,final,test,duplicate,serializer,namespace,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,state,serializer,new,test,duplicate,serializer,final,test,duplicate,serializer,key,serializer,new,test,duplicate,serializer,registered,key,value,state,backend,meta,info,integer,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,value,test,namespace,serializer,state,serializer,final,key,group,range,key,group,range,new,key,group,range,0,0,internal,key,context,integer,mock,key,context,new,internal,key,context,integer,override,public,integer,get,current,key,return,0,override,public,int,get,current,key,group,index,return,0,override,public,int,get,number,of,key,groups,return,1,override,public,key,group,range,get,key,group,range,return,key,group,range,override,public,type,serializer,integer,get,key,serializer,return,key,serializer,copy,on,write,state,table,integer,integer,integer,table,new,copy,on,write,state,table,mock,key,context,meta,info,table,put,0,0,0,0,table,put,1,0,0,1,table,put,2,0,1,2,final,copy,on,write,state,table,snapshot,integer,integer,integer,snapshot,table,state,snapshot,try,final,state,snapshot,state,key,group,writer,partitioned,snapshot,snapshot,get,key,group,writer,namespace,serializer,disable,key,serializer,disable,state,serializer,disable,partitioned,snapshot,write,state,in,key,group,new,data,output,view,stream,wrapper,new,byte,array,output,stream,with,pos,1024,0,finally,table,release,snapshot,snapshot
CopyOnWriteStateTableTest -> @Test 	public void testPutGetRemoveContainsTransform() throws Exception;1489685642;Testing the basic map operations.;@Test_	public void testPutGetRemoveContainsTransform() throws Exception {_		RegisteredBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> state_1_1 = new ArrayList<>()__		state_1_1.add(41)__		ArrayList<Integer> state_2_1 = new ArrayList<>()__		state_2_1.add(42)__		ArrayList<Integer> state_1_2 = new ArrayList<>()__		state_1_2.add(43)___		Assert.assertNull(stateTable.putAndGetOld(1, 1, state_1_1))__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(2, 1, state_2_1))__		Assert.assertEquals(state_2_1, stateTable.get(2, 1))__		Assert.assertEquals(2, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(1, 2, state_1_2))__		Assert.assertEquals(state_1_2, stateTable.get(1, 2))__		Assert.assertEquals(3, stateTable.size())___		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertFalse(stateTable.containsKey(3, 1))__		Assert.assertFalse(stateTable.containsKey(2, 3))__		stateTable.put(2, 1, null)__		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertEquals(3, stateTable.size())__		Assert.assertNull(stateTable.get(2, 1))__		stateTable.put(2, 1, state_2_1)__		Assert.assertEquals(3, stateTable.size())___		Assert.assertEquals(state_2_1, stateTable.removeAndGetOld(2, 1))__		Assert.assertFalse(stateTable.containsKey(2, 1))__		Assert.assertEquals(2, stateTable.size())___		stateTable.remove(1, 2)__		Assert.assertFalse(stateTable.containsKey(1, 2))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.removeAndGetOld(4, 2))__		Assert.assertEquals(1, stateTable.size())___		StateTransformationFunction<ArrayList<Integer>, Integer> function =_				new StateTransformationFunction<ArrayList<Integer>, Integer>() {_					@Override_					public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_						previousState.add(value)__						return previousState__					}_				}___		final int value = 4711__		stateTable.transform(1, 1, value, function)__		state_1_1 = function.apply(state_1_1, value)__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__	};testing,the,basic,map,operations;test,public,void,test,put,get,remove,contains,transform,throws,exception,registered,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,new,array,list,add,41,array,list,integer,new,array,list,add,42,array,list,integer,new,array,list,add,43,assert,assert,null,state,table,put,and,get,old,1,1,assert,assert,equals,state,table,get,1,1,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,put,and,get,old,2,1,assert,assert,equals,state,table,get,2,1,assert,assert,equals,2,state,table,size,assert,assert,null,state,table,put,and,get,old,1,2,assert,assert,equals,state,table,get,1,2,assert,assert,equals,3,state,table,size,assert,assert,true,state,table,contains,key,2,1,assert,assert,false,state,table,contains,key,3,1,assert,assert,false,state,table,contains,key,2,3,state,table,put,2,1,null,assert,assert,true,state,table,contains,key,2,1,assert,assert,equals,3,state,table,size,assert,assert,null,state,table,get,2,1,state,table,put,2,1,assert,assert,equals,3,state,table,size,assert,assert,equals,state,table,remove,and,get,old,2,1,assert,assert,false,state,table,contains,key,2,1,assert,assert,equals,2,state,table,size,state,table,remove,1,2,assert,assert,false,state,table,contains,key,1,2,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,remove,and,get,old,4,2,assert,assert,equals,1,state,table,size,state,transformation,function,array,list,integer,integer,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,previous,state,add,value,return,previous,state,final,int,value,4711,state,table,transform,1,1,value,function,function,apply,value,assert,assert,equals,state,table,get,1,1
CopyOnWriteStateTableTest -> @Test 	public void testPutGetRemoveContainsTransform() throws Exception;1490721653;Testing the basic map operations.;@Test_	public void testPutGetRemoveContainsTransform() throws Exception {_		RegisteredBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> state_1_1 = new ArrayList<>()__		state_1_1.add(41)__		ArrayList<Integer> state_2_1 = new ArrayList<>()__		state_2_1.add(42)__		ArrayList<Integer> state_1_2 = new ArrayList<>()__		state_1_2.add(43)___		Assert.assertNull(stateTable.putAndGetOld(1, 1, state_1_1))__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(2, 1, state_2_1))__		Assert.assertEquals(state_2_1, stateTable.get(2, 1))__		Assert.assertEquals(2, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(1, 2, state_1_2))__		Assert.assertEquals(state_1_2, stateTable.get(1, 2))__		Assert.assertEquals(3, stateTable.size())___		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertFalse(stateTable.containsKey(3, 1))__		Assert.assertFalse(stateTable.containsKey(2, 3))__		stateTable.put(2, 1, null)__		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertEquals(3, stateTable.size())__		Assert.assertNull(stateTable.get(2, 1))__		stateTable.put(2, 1, state_2_1)__		Assert.assertEquals(3, stateTable.size())___		Assert.assertEquals(state_2_1, stateTable.removeAndGetOld(2, 1))__		Assert.assertFalse(stateTable.containsKey(2, 1))__		Assert.assertEquals(2, stateTable.size())___		stateTable.remove(1, 2)__		Assert.assertFalse(stateTable.containsKey(1, 2))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.removeAndGetOld(4, 2))__		Assert.assertEquals(1, stateTable.size())___		StateTransformationFunction<ArrayList<Integer>, Integer> function =_				new StateTransformationFunction<ArrayList<Integer>, Integer>() {_					@Override_					public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_						previousState.add(value)__						return previousState__					}_				}___		final int value = 4711__		stateTable.transform(1, 1, value, function)__		state_1_1 = function.apply(state_1_1, value)__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__	};testing,the,basic,map,operations;test,public,void,test,put,get,remove,contains,transform,throws,exception,registered,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,new,array,list,add,41,array,list,integer,new,array,list,add,42,array,list,integer,new,array,list,add,43,assert,assert,null,state,table,put,and,get,old,1,1,assert,assert,equals,state,table,get,1,1,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,put,and,get,old,2,1,assert,assert,equals,state,table,get,2,1,assert,assert,equals,2,state,table,size,assert,assert,null,state,table,put,and,get,old,1,2,assert,assert,equals,state,table,get,1,2,assert,assert,equals,3,state,table,size,assert,assert,true,state,table,contains,key,2,1,assert,assert,false,state,table,contains,key,3,1,assert,assert,false,state,table,contains,key,2,3,state,table,put,2,1,null,assert,assert,true,state,table,contains,key,2,1,assert,assert,equals,3,state,table,size,assert,assert,null,state,table,get,2,1,state,table,put,2,1,assert,assert,equals,3,state,table,size,assert,assert,equals,state,table,remove,and,get,old,2,1,assert,assert,false,state,table,contains,key,2,1,assert,assert,equals,2,state,table,size,state,table,remove,1,2,assert,assert,false,state,table,contains,key,1,2,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,remove,and,get,old,4,2,assert,assert,equals,1,state,table,size,state,transformation,function,array,list,integer,integer,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,previous,state,add,value,return,previous,state,final,int,value,4711,state,table,transform,1,1,value,function,function,apply,value,assert,assert,equals,state,table,get,1,1
CopyOnWriteStateTableTest -> @Test 	public void testPutGetRemoveContainsTransform() throws Exception;1494180263;Testing the basic map operations.;@Test_	public void testPutGetRemoveContainsTransform() throws Exception {_		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> state_1_1 = new ArrayList<>()__		state_1_1.add(41)__		ArrayList<Integer> state_2_1 = new ArrayList<>()__		state_2_1.add(42)__		ArrayList<Integer> state_1_2 = new ArrayList<>()__		state_1_2.add(43)___		Assert.assertNull(stateTable.putAndGetOld(1, 1, state_1_1))__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(2, 1, state_2_1))__		Assert.assertEquals(state_2_1, stateTable.get(2, 1))__		Assert.assertEquals(2, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(1, 2, state_1_2))__		Assert.assertEquals(state_1_2, stateTable.get(1, 2))__		Assert.assertEquals(3, stateTable.size())___		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertFalse(stateTable.containsKey(3, 1))__		Assert.assertFalse(stateTable.containsKey(2, 3))__		stateTable.put(2, 1, null)__		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertEquals(3, stateTable.size())__		Assert.assertNull(stateTable.get(2, 1))__		stateTable.put(2, 1, state_2_1)__		Assert.assertEquals(3, stateTable.size())___		Assert.assertEquals(state_2_1, stateTable.removeAndGetOld(2, 1))__		Assert.assertFalse(stateTable.containsKey(2, 1))__		Assert.assertEquals(2, stateTable.size())___		stateTable.remove(1, 2)__		Assert.assertFalse(stateTable.containsKey(1, 2))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.removeAndGetOld(4, 2))__		Assert.assertEquals(1, stateTable.size())___		StateTransformationFunction<ArrayList<Integer>, Integer> function =_				new StateTransformationFunction<ArrayList<Integer>, Integer>() {_					@Override_					public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_						previousState.add(value)__						return previousState__					}_				}___		final int value = 4711__		stateTable.transform(1, 1, value, function)__		state_1_1 = function.apply(state_1_1, value)__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__	};testing,the,basic,map,operations;test,public,void,test,put,get,remove,contains,transform,throws,exception,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,new,array,list,add,41,array,list,integer,new,array,list,add,42,array,list,integer,new,array,list,add,43,assert,assert,null,state,table,put,and,get,old,1,1,assert,assert,equals,state,table,get,1,1,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,put,and,get,old,2,1,assert,assert,equals,state,table,get,2,1,assert,assert,equals,2,state,table,size,assert,assert,null,state,table,put,and,get,old,1,2,assert,assert,equals,state,table,get,1,2,assert,assert,equals,3,state,table,size,assert,assert,true,state,table,contains,key,2,1,assert,assert,false,state,table,contains,key,3,1,assert,assert,false,state,table,contains,key,2,3,state,table,put,2,1,null,assert,assert,true,state,table,contains,key,2,1,assert,assert,equals,3,state,table,size,assert,assert,null,state,table,get,2,1,state,table,put,2,1,assert,assert,equals,3,state,table,size,assert,assert,equals,state,table,remove,and,get,old,2,1,assert,assert,false,state,table,contains,key,2,1,assert,assert,equals,2,state,table,size,state,table,remove,1,2,assert,assert,false,state,table,contains,key,1,2,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,remove,and,get,old,4,2,assert,assert,equals,1,state,table,size,state,transformation,function,array,list,integer,integer,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,previous,state,add,value,return,previous,state,final,int,value,4711,state,table,transform,1,1,value,function,function,apply,value,assert,assert,equals,state,table,get,1,1
CopyOnWriteStateTableTest -> @Test 	public void testPutGetRemoveContainsTransform() throws Exception;1505995902;Testing the basic map operations.;@Test_	public void testPutGetRemoveContainsTransform() throws Exception {_		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> state_1_1 = new ArrayList<>()__		state_1_1.add(41)__		ArrayList<Integer> state_2_1 = new ArrayList<>()__		state_2_1.add(42)__		ArrayList<Integer> state_1_2 = new ArrayList<>()__		state_1_2.add(43)___		Assert.assertNull(stateTable.putAndGetOld(1, 1, state_1_1))__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(2, 1, state_2_1))__		Assert.assertEquals(state_2_1, stateTable.get(2, 1))__		Assert.assertEquals(2, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(1, 2, state_1_2))__		Assert.assertEquals(state_1_2, stateTable.get(1, 2))__		Assert.assertEquals(3, stateTable.size())___		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertFalse(stateTable.containsKey(3, 1))__		Assert.assertFalse(stateTable.containsKey(2, 3))__		stateTable.put(2, 1, null)__		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertEquals(3, stateTable.size())__		Assert.assertNull(stateTable.get(2, 1))__		stateTable.put(2, 1, state_2_1)__		Assert.assertEquals(3, stateTable.size())___		Assert.assertEquals(state_2_1, stateTable.removeAndGetOld(2, 1))__		Assert.assertFalse(stateTable.containsKey(2, 1))__		Assert.assertEquals(2, stateTable.size())___		stateTable.remove(1, 2)__		Assert.assertFalse(stateTable.containsKey(1, 2))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.removeAndGetOld(4, 2))__		Assert.assertEquals(1, stateTable.size())___		StateTransformationFunction<ArrayList<Integer>, Integer> function =_				new StateTransformationFunction<ArrayList<Integer>, Integer>() {_					@Override_					public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_						previousState.add(value)__						return previousState__					}_				}___		final int value = 4711__		stateTable.transform(1, 1, value, function)__		state_1_1 = function.apply(state_1_1, value)__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__	};testing,the,basic,map,operations;test,public,void,test,put,get,remove,contains,transform,throws,exception,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,new,array,list,add,41,array,list,integer,new,array,list,add,42,array,list,integer,new,array,list,add,43,assert,assert,null,state,table,put,and,get,old,1,1,assert,assert,equals,state,table,get,1,1,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,put,and,get,old,2,1,assert,assert,equals,state,table,get,2,1,assert,assert,equals,2,state,table,size,assert,assert,null,state,table,put,and,get,old,1,2,assert,assert,equals,state,table,get,1,2,assert,assert,equals,3,state,table,size,assert,assert,true,state,table,contains,key,2,1,assert,assert,false,state,table,contains,key,3,1,assert,assert,false,state,table,contains,key,2,3,state,table,put,2,1,null,assert,assert,true,state,table,contains,key,2,1,assert,assert,equals,3,state,table,size,assert,assert,null,state,table,get,2,1,state,table,put,2,1,assert,assert,equals,3,state,table,size,assert,assert,equals,state,table,remove,and,get,old,2,1,assert,assert,false,state,table,contains,key,2,1,assert,assert,equals,2,state,table,size,state,table,remove,1,2,assert,assert,false,state,table,contains,key,1,2,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,remove,and,get,old,4,2,assert,assert,equals,1,state,table,size,state,transformation,function,array,list,integer,integer,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,previous,state,add,value,return,previous,state,final,int,value,4711,state,table,transform,1,1,value,function,function,apply,value,assert,assert,equals,state,table,get,1,1
CopyOnWriteStateTableTest -> @Test 	public void testPutGetRemoveContainsTransform() throws Exception;1529089579;Testing the basic map operations.;@Test_	public void testPutGetRemoveContainsTransform() throws Exception {_		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> state_1_1 = new ArrayList<>()__		state_1_1.add(41)__		ArrayList<Integer> state_2_1 = new ArrayList<>()__		state_2_1.add(42)__		ArrayList<Integer> state_1_2 = new ArrayList<>()__		state_1_2.add(43)___		Assert.assertNull(stateTable.putAndGetOld(1, 1, state_1_1))__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(2, 1, state_2_1))__		Assert.assertEquals(state_2_1, stateTable.get(2, 1))__		Assert.assertEquals(2, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(1, 2, state_1_2))__		Assert.assertEquals(state_1_2, stateTable.get(1, 2))__		Assert.assertEquals(3, stateTable.size())___		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertFalse(stateTable.containsKey(3, 1))__		Assert.assertFalse(stateTable.containsKey(2, 3))__		stateTable.put(2, 1, null)__		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertEquals(3, stateTable.size())__		Assert.assertNull(stateTable.get(2, 1))__		stateTable.put(2, 1, state_2_1)__		Assert.assertEquals(3, stateTable.size())___		Assert.assertEquals(state_2_1, stateTable.removeAndGetOld(2, 1))__		Assert.assertFalse(stateTable.containsKey(2, 1))__		Assert.assertEquals(2, stateTable.size())___		stateTable.remove(1, 2)__		Assert.assertFalse(stateTable.containsKey(1, 2))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.removeAndGetOld(4, 2))__		Assert.assertEquals(1, stateTable.size())___		StateTransformationFunction<ArrayList<Integer>, Integer> function =_				new StateTransformationFunction<ArrayList<Integer>, Integer>() {_					@Override_					public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_						previousState.add(value)__						return previousState__					}_				}___		final int value = 4711__		stateTable.transform(1, 1, value, function)__		state_1_1 = function.apply(state_1_1, value)__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__	};testing,the,basic,map,operations;test,public,void,test,put,get,remove,contains,transform,throws,exception,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,new,array,list,add,41,array,list,integer,new,array,list,add,42,array,list,integer,new,array,list,add,43,assert,assert,null,state,table,put,and,get,old,1,1,assert,assert,equals,state,table,get,1,1,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,put,and,get,old,2,1,assert,assert,equals,state,table,get,2,1,assert,assert,equals,2,state,table,size,assert,assert,null,state,table,put,and,get,old,1,2,assert,assert,equals,state,table,get,1,2,assert,assert,equals,3,state,table,size,assert,assert,true,state,table,contains,key,2,1,assert,assert,false,state,table,contains,key,3,1,assert,assert,false,state,table,contains,key,2,3,state,table,put,2,1,null,assert,assert,true,state,table,contains,key,2,1,assert,assert,equals,3,state,table,size,assert,assert,null,state,table,get,2,1,state,table,put,2,1,assert,assert,equals,3,state,table,size,assert,assert,equals,state,table,remove,and,get,old,2,1,assert,assert,false,state,table,contains,key,2,1,assert,assert,equals,2,state,table,size,state,table,remove,1,2,assert,assert,false,state,table,contains,key,1,2,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,remove,and,get,old,4,2,assert,assert,equals,1,state,table,size,state,transformation,function,array,list,integer,integer,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,previous,state,add,value,return,previous,state,final,int,value,4711,state,table,transform,1,1,value,function,function,apply,value,assert,assert,equals,state,table,get,1,1
CopyOnWriteStateTableTest -> @Test 	public void testPutGetRemoveContainsTransform() throws Exception;1531404901;Testing the basic map operations.;@Test_	public void testPutGetRemoveContainsTransform() throws Exception {_		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyedBackendStateMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> state_1_1 = new ArrayList<>()__		state_1_1.add(41)__		ArrayList<Integer> state_2_1 = new ArrayList<>()__		state_2_1.add(42)__		ArrayList<Integer> state_1_2 = new ArrayList<>()__		state_1_2.add(43)___		Assert.assertNull(stateTable.putAndGetOld(1, 1, state_1_1))__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(2, 1, state_2_1))__		Assert.assertEquals(state_2_1, stateTable.get(2, 1))__		Assert.assertEquals(2, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(1, 2, state_1_2))__		Assert.assertEquals(state_1_2, stateTable.get(1, 2))__		Assert.assertEquals(3, stateTable.size())___		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertFalse(stateTable.containsKey(3, 1))__		Assert.assertFalse(stateTable.containsKey(2, 3))__		stateTable.put(2, 1, null)__		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertEquals(3, stateTable.size())__		Assert.assertNull(stateTable.get(2, 1))__		stateTable.put(2, 1, state_2_1)__		Assert.assertEquals(3, stateTable.size())___		Assert.assertEquals(state_2_1, stateTable.removeAndGetOld(2, 1))__		Assert.assertFalse(stateTable.containsKey(2, 1))__		Assert.assertEquals(2, stateTable.size())___		stateTable.remove(1, 2)__		Assert.assertFalse(stateTable.containsKey(1, 2))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.removeAndGetOld(4, 2))__		Assert.assertEquals(1, stateTable.size())___		StateTransformationFunction<ArrayList<Integer>, Integer> function =_			new StateTransformationFunction<ArrayList<Integer>, Integer>() {_				@Override_				public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_					previousState.add(value)__					return previousState__				}_			}___		final int value = 4711__		stateTable.transform(1, 1, value, function)__		state_1_1 = function.apply(state_1_1, value)__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__	};testing,the,basic,map,operations;test,public,void,test,put,get,remove,contains,transform,throws,exception,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,new,array,list,add,41,array,list,integer,new,array,list,add,42,array,list,integer,new,array,list,add,43,assert,assert,null,state,table,put,and,get,old,1,1,assert,assert,equals,state,table,get,1,1,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,put,and,get,old,2,1,assert,assert,equals,state,table,get,2,1,assert,assert,equals,2,state,table,size,assert,assert,null,state,table,put,and,get,old,1,2,assert,assert,equals,state,table,get,1,2,assert,assert,equals,3,state,table,size,assert,assert,true,state,table,contains,key,2,1,assert,assert,false,state,table,contains,key,3,1,assert,assert,false,state,table,contains,key,2,3,state,table,put,2,1,null,assert,assert,true,state,table,contains,key,2,1,assert,assert,equals,3,state,table,size,assert,assert,null,state,table,get,2,1,state,table,put,2,1,assert,assert,equals,3,state,table,size,assert,assert,equals,state,table,remove,and,get,old,2,1,assert,assert,false,state,table,contains,key,2,1,assert,assert,equals,2,state,table,size,state,table,remove,1,2,assert,assert,false,state,table,contains,key,1,2,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,remove,and,get,old,4,2,assert,assert,equals,1,state,table,size,state,transformation,function,array,list,integer,integer,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,previous,state,add,value,return,previous,state,final,int,value,4711,state,table,transform,1,1,value,function,function,apply,value,assert,assert,equals,state,table,get,1,1
CopyOnWriteStateTableTest -> @Test 	public void testPutGetRemoveContainsTransform() throws Exception;1531771917;Testing the basic map operations.;@Test_	public void testPutGetRemoveContainsTransform() throws Exception {_		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> state_1_1 = new ArrayList<>()__		state_1_1.add(41)__		ArrayList<Integer> state_2_1 = new ArrayList<>()__		state_2_1.add(42)__		ArrayList<Integer> state_1_2 = new ArrayList<>()__		state_1_2.add(43)___		Assert.assertNull(stateTable.putAndGetOld(1, 1, state_1_1))__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(2, 1, state_2_1))__		Assert.assertEquals(state_2_1, stateTable.get(2, 1))__		Assert.assertEquals(2, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(1, 2, state_1_2))__		Assert.assertEquals(state_1_2, stateTable.get(1, 2))__		Assert.assertEquals(3, stateTable.size())___		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertFalse(stateTable.containsKey(3, 1))__		Assert.assertFalse(stateTable.containsKey(2, 3))__		stateTable.put(2, 1, null)__		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertEquals(3, stateTable.size())__		Assert.assertNull(stateTable.get(2, 1))__		stateTable.put(2, 1, state_2_1)__		Assert.assertEquals(3, stateTable.size())___		Assert.assertEquals(state_2_1, stateTable.removeAndGetOld(2, 1))__		Assert.assertFalse(stateTable.containsKey(2, 1))__		Assert.assertEquals(2, stateTable.size())___		stateTable.remove(1, 2)__		Assert.assertFalse(stateTable.containsKey(1, 2))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.removeAndGetOld(4, 2))__		Assert.assertEquals(1, stateTable.size())___		StateTransformationFunction<ArrayList<Integer>, Integer> function =_			new StateTransformationFunction<ArrayList<Integer>, Integer>() {_				@Override_				public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_					previousState.add(value)__					return previousState__				}_			}___		final int value = 4711__		stateTable.transform(1, 1, value, function)__		state_1_1 = function.apply(state_1_1, value)__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__	};testing,the,basic,map,operations;test,public,void,test,put,get,remove,contains,transform,throws,exception,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,new,array,list,add,41,array,list,integer,new,array,list,add,42,array,list,integer,new,array,list,add,43,assert,assert,null,state,table,put,and,get,old,1,1,assert,assert,equals,state,table,get,1,1,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,put,and,get,old,2,1,assert,assert,equals,state,table,get,2,1,assert,assert,equals,2,state,table,size,assert,assert,null,state,table,put,and,get,old,1,2,assert,assert,equals,state,table,get,1,2,assert,assert,equals,3,state,table,size,assert,assert,true,state,table,contains,key,2,1,assert,assert,false,state,table,contains,key,3,1,assert,assert,false,state,table,contains,key,2,3,state,table,put,2,1,null,assert,assert,true,state,table,contains,key,2,1,assert,assert,equals,3,state,table,size,assert,assert,null,state,table,get,2,1,state,table,put,2,1,assert,assert,equals,3,state,table,size,assert,assert,equals,state,table,remove,and,get,old,2,1,assert,assert,false,state,table,contains,key,2,1,assert,assert,equals,2,state,table,size,state,table,remove,1,2,assert,assert,false,state,table,contains,key,1,2,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,remove,and,get,old,4,2,assert,assert,equals,1,state,table,size,state,transformation,function,array,list,integer,integer,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,previous,state,add,value,return,previous,state,final,int,value,4711,state,table,transform,1,1,value,function,function,apply,value,assert,assert,equals,state,table,get,1,1
CopyOnWriteStateTableTest -> @Test 	public void testPutGetRemoveContainsTransform() throws Exception;1539149027;Testing the basic map operations.;@Test_	public void testPutGetRemoveContainsTransform() throws Exception {_		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> state_1_1 = new ArrayList<>()__		state_1_1.add(41)__		ArrayList<Integer> state_2_1 = new ArrayList<>()__		state_2_1.add(42)__		ArrayList<Integer> state_1_2 = new ArrayList<>()__		state_1_2.add(43)___		Assert.assertNull(stateTable.putAndGetOld(1, 1, state_1_1))__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(2, 1, state_2_1))__		Assert.assertEquals(state_2_1, stateTable.get(2, 1))__		Assert.assertEquals(2, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(1, 2, state_1_2))__		Assert.assertEquals(state_1_2, stateTable.get(1, 2))__		Assert.assertEquals(3, stateTable.size())___		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertFalse(stateTable.containsKey(3, 1))__		Assert.assertFalse(stateTable.containsKey(2, 3))__		stateTable.put(2, 1, null)__		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertEquals(3, stateTable.size())__		Assert.assertNull(stateTable.get(2, 1))__		stateTable.put(2, 1, state_2_1)__		Assert.assertEquals(3, stateTable.size())___		Assert.assertEquals(state_2_1, stateTable.removeAndGetOld(2, 1))__		Assert.assertFalse(stateTable.containsKey(2, 1))__		Assert.assertEquals(2, stateTable.size())___		stateTable.remove(1, 2)__		Assert.assertFalse(stateTable.containsKey(1, 2))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.removeAndGetOld(4, 2))__		Assert.assertEquals(1, stateTable.size())___		StateTransformationFunction<ArrayList<Integer>, Integer> function =_			new StateTransformationFunction<ArrayList<Integer>, Integer>() {_				@Override_				public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_					previousState.add(value)__					return previousState__				}_			}___		final int value = 4711__		stateTable.transform(1, 1, value, function)__		state_1_1 = function.apply(state_1_1, value)__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__	};testing,the,basic,map,operations;test,public,void,test,put,get,remove,contains,transform,throws,exception,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,new,array,list,add,41,array,list,integer,new,array,list,add,42,array,list,integer,new,array,list,add,43,assert,assert,null,state,table,put,and,get,old,1,1,assert,assert,equals,state,table,get,1,1,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,put,and,get,old,2,1,assert,assert,equals,state,table,get,2,1,assert,assert,equals,2,state,table,size,assert,assert,null,state,table,put,and,get,old,1,2,assert,assert,equals,state,table,get,1,2,assert,assert,equals,3,state,table,size,assert,assert,true,state,table,contains,key,2,1,assert,assert,false,state,table,contains,key,3,1,assert,assert,false,state,table,contains,key,2,3,state,table,put,2,1,null,assert,assert,true,state,table,contains,key,2,1,assert,assert,equals,3,state,table,size,assert,assert,null,state,table,get,2,1,state,table,put,2,1,assert,assert,equals,3,state,table,size,assert,assert,equals,state,table,remove,and,get,old,2,1,assert,assert,false,state,table,contains,key,2,1,assert,assert,equals,2,state,table,size,state,table,remove,1,2,assert,assert,false,state,table,contains,key,1,2,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,remove,and,get,old,4,2,assert,assert,equals,1,state,table,size,state,transformation,function,array,list,integer,integer,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,previous,state,add,value,return,previous,state,final,int,value,4711,state,table,transform,1,1,value,function,function,apply,value,assert,assert,equals,state,table,get,1,1
CopyOnWriteStateTableTest -> @Test 	public void testPutGetRemoveContainsTransform() throws Exception;1541669895;Testing the basic map operations.;@Test_	public void testPutGetRemoveContainsTransform() throws Exception {_		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> state_1_1 = new ArrayList<>()__		state_1_1.add(41)__		ArrayList<Integer> state_2_1 = new ArrayList<>()__		state_2_1.add(42)__		ArrayList<Integer> state_1_2 = new ArrayList<>()__		state_1_2.add(43)___		Assert.assertNull(stateTable.putAndGetOld(1, 1, state_1_1))__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(2, 1, state_2_1))__		Assert.assertEquals(state_2_1, stateTable.get(2, 1))__		Assert.assertEquals(2, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(1, 2, state_1_2))__		Assert.assertEquals(state_1_2, stateTable.get(1, 2))__		Assert.assertEquals(3, stateTable.size())___		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertFalse(stateTable.containsKey(3, 1))__		Assert.assertFalse(stateTable.containsKey(2, 3))__		stateTable.put(2, 1, null)__		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertEquals(3, stateTable.size())__		Assert.assertNull(stateTable.get(2, 1))__		stateTable.put(2, 1, state_2_1)__		Assert.assertEquals(3, stateTable.size())___		Assert.assertEquals(state_2_1, stateTable.removeAndGetOld(2, 1))__		Assert.assertFalse(stateTable.containsKey(2, 1))__		Assert.assertEquals(2, stateTable.size())___		stateTable.remove(1, 2)__		Assert.assertFalse(stateTable.containsKey(1, 2))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.removeAndGetOld(4, 2))__		Assert.assertEquals(1, stateTable.size())___		StateTransformationFunction<ArrayList<Integer>, Integer> function =_			new StateTransformationFunction<ArrayList<Integer>, Integer>() {_				@Override_				public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_					previousState.add(value)__					return previousState__				}_			}___		final int value = 4711__		stateTable.transform(1, 1, value, function)__		state_1_1 = function.apply(state_1_1, value)__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__	};testing,the,basic,map,operations;test,public,void,test,put,get,remove,contains,transform,throws,exception,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,new,array,list,add,41,array,list,integer,new,array,list,add,42,array,list,integer,new,array,list,add,43,assert,assert,null,state,table,put,and,get,old,1,1,assert,assert,equals,state,table,get,1,1,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,put,and,get,old,2,1,assert,assert,equals,state,table,get,2,1,assert,assert,equals,2,state,table,size,assert,assert,null,state,table,put,and,get,old,1,2,assert,assert,equals,state,table,get,1,2,assert,assert,equals,3,state,table,size,assert,assert,true,state,table,contains,key,2,1,assert,assert,false,state,table,contains,key,3,1,assert,assert,false,state,table,contains,key,2,3,state,table,put,2,1,null,assert,assert,true,state,table,contains,key,2,1,assert,assert,equals,3,state,table,size,assert,assert,null,state,table,get,2,1,state,table,put,2,1,assert,assert,equals,3,state,table,size,assert,assert,equals,state,table,remove,and,get,old,2,1,assert,assert,false,state,table,contains,key,2,1,assert,assert,equals,2,state,table,size,state,table,remove,1,2,assert,assert,false,state,table,contains,key,1,2,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,remove,and,get,old,4,2,assert,assert,equals,1,state,table,size,state,transformation,function,array,list,integer,integer,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,previous,state,add,value,return,previous,state,final,int,value,4711,state,table,transform,1,1,value,function,function,apply,value,assert,assert,equals,state,table,get,1,1
CopyOnWriteStateTableTest -> @Test 	public void testPutGetRemoveContainsTransform() throws Exception;1548755874;Testing the basic map operations.;@Test_	public void testPutGetRemoveContainsTransform() throws Exception {_		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> state_1_1 = new ArrayList<>()__		state_1_1.add(41)__		ArrayList<Integer> state_2_1 = new ArrayList<>()__		state_2_1.add(42)__		ArrayList<Integer> state_1_2 = new ArrayList<>()__		state_1_2.add(43)___		Assert.assertNull(stateTable.putAndGetOld(1, 1, state_1_1))__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(2, 1, state_2_1))__		Assert.assertEquals(state_2_1, stateTable.get(2, 1))__		Assert.assertEquals(2, stateTable.size())___		Assert.assertNull(stateTable.putAndGetOld(1, 2, state_1_2))__		Assert.assertEquals(state_1_2, stateTable.get(1, 2))__		Assert.assertEquals(3, stateTable.size())___		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertFalse(stateTable.containsKey(3, 1))__		Assert.assertFalse(stateTable.containsKey(2, 3))__		stateTable.put(2, 1, null)__		Assert.assertTrue(stateTable.containsKey(2, 1))__		Assert.assertEquals(3, stateTable.size())__		Assert.assertNull(stateTable.get(2, 1))__		stateTable.put(2, 1, state_2_1)__		Assert.assertEquals(3, stateTable.size())___		Assert.assertEquals(state_2_1, stateTable.removeAndGetOld(2, 1))__		Assert.assertFalse(stateTable.containsKey(2, 1))__		Assert.assertEquals(2, stateTable.size())___		stateTable.remove(1, 2)__		Assert.assertFalse(stateTable.containsKey(1, 2))__		Assert.assertEquals(1, stateTable.size())___		Assert.assertNull(stateTable.removeAndGetOld(4, 2))__		Assert.assertEquals(1, stateTable.size())___		StateTransformationFunction<ArrayList<Integer>, Integer> function =_			new StateTransformationFunction<ArrayList<Integer>, Integer>() {_				@Override_				public ArrayList<Integer> apply(ArrayList<Integer> previousState, Integer value) throws Exception {_					previousState.add(value)__					return previousState__				}_			}___		final int value = 4711__		stateTable.transform(1, 1, value, function)__		state_1_1 = function.apply(state_1_1, value)__		Assert.assertEquals(state_1_1, stateTable.get(1, 1))__	};testing,the,basic,map,operations;test,public,void,test,put,get,remove,contains,transform,throws,exception,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,new,array,list,add,41,array,list,integer,new,array,list,add,42,array,list,integer,new,array,list,add,43,assert,assert,null,state,table,put,and,get,old,1,1,assert,assert,equals,state,table,get,1,1,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,put,and,get,old,2,1,assert,assert,equals,state,table,get,2,1,assert,assert,equals,2,state,table,size,assert,assert,null,state,table,put,and,get,old,1,2,assert,assert,equals,state,table,get,1,2,assert,assert,equals,3,state,table,size,assert,assert,true,state,table,contains,key,2,1,assert,assert,false,state,table,contains,key,3,1,assert,assert,false,state,table,contains,key,2,3,state,table,put,2,1,null,assert,assert,true,state,table,contains,key,2,1,assert,assert,equals,3,state,table,size,assert,assert,null,state,table,get,2,1,state,table,put,2,1,assert,assert,equals,3,state,table,size,assert,assert,equals,state,table,remove,and,get,old,2,1,assert,assert,false,state,table,contains,key,2,1,assert,assert,equals,2,state,table,size,state,table,remove,1,2,assert,assert,false,state,table,contains,key,1,2,assert,assert,equals,1,state,table,size,assert,assert,null,state,table,remove,and,get,old,4,2,assert,assert,equals,1,state,table,size,state,transformation,function,array,list,integer,integer,function,new,state,transformation,function,array,list,integer,integer,override,public,array,list,integer,apply,array,list,integer,previous,state,integer,value,throws,exception,previous,state,add,value,return,previous,state,final,int,value,4711,state,table,transform,1,1,value,function,function,apply,value,assert,assert,equals,state,table,get,1,1
CopyOnWriteStateTableTest -> @Test 	public void testCopyOnWriteContracts();1489685642;This tests for the copy-on-write contracts, e.g. ensures that no copy-on-write is active after all snapshots are_released.;@Test_	public void testCopyOnWriteContracts() {_		RegisteredBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> originalState1 = new ArrayList<>(1)__		ArrayList<Integer> originalState2 = new ArrayList<>(1)__		ArrayList<Integer> originalState3 = new ArrayList<>(1)__		ArrayList<Integer> originalState4 = new ArrayList<>(1)__		ArrayList<Integer> originalState5 = new ArrayList<>(1)___		originalState1.add(1)__		originalState2.add(2)__		originalState3.add(3)__		originalState4.add(4)__		originalState5.add(5)___		stateTable.put(1, 1, originalState1)__		stateTable.put(2, 1, originalState2)__		stateTable.put(4, 1, originalState4)__		stateTable.put(5, 1, originalState5)___		_		Assert.assertTrue(stateTable.get(1, 1) == originalState1)__		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot1 = stateTable.createSnapshot()__		_		final ArrayList<Integer> copyState = stateTable.get(1, 1)__		Assert.assertFalse(copyState == originalState1)__		_		Assert.assertEquals(originalState1, copyState)___		_		stateTable.put(3, 1, originalState3)___		_		Assert.assertTrue(copyState == stateTable.get(1, 1))___		_		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot2 = stateTable.createSnapshot()__		_		Assert.assertFalse(copyState == stateTable.get(1, 1))__		_		Assert.assertEquals(copyState, stateTable.get(1, 1))___		_		stateTable.releaseSnapshot(snapshot2)__		_		Assert.assertTrue(originalState3 == stateTable.get(3, 1))__		_		Assert.assertFalse(originalState4 == stateTable.get(4, 1))___		_		stateTable.releaseSnapshot(snapshot1)__		_		Assert.assertTrue(originalState5 == stateTable.get(5, 1))__	};this,tests,for,the,copy,on,write,contracts,e,g,ensures,that,no,copy,on,write,is,active,after,all,snapshots,are,released;test,public,void,test,copy,on,write,contracts,registered,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,original,state1,new,array,list,1,array,list,integer,original,state2,new,array,list,1,array,list,integer,original,state3,new,array,list,1,array,list,integer,original,state4,new,array,list,1,array,list,integer,original,state5,new,array,list,1,original,state1,add,1,original,state2,add,2,original,state3,add,3,original,state4,add,4,original,state5,add,5,state,table,put,1,1,original,state1,state,table,put,2,1,original,state2,state,table,put,4,1,original,state4,state,table,put,5,1,original,state5,assert,assert,true,state,table,get,1,1,original,state1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot1,state,table,create,snapshot,final,array,list,integer,copy,state,state,table,get,1,1,assert,assert,false,copy,state,original,state1,assert,assert,equals,original,state1,copy,state,state,table,put,3,1,original,state3,assert,assert,true,copy,state,state,table,get,1,1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot2,state,table,create,snapshot,assert,assert,false,copy,state,state,table,get,1,1,assert,assert,equals,copy,state,state,table,get,1,1,state,table,release,snapshot,snapshot2,assert,assert,true,original,state3,state,table,get,3,1,assert,assert,false,original,state4,state,table,get,4,1,state,table,release,snapshot,snapshot1,assert,assert,true,original,state5,state,table,get,5,1
CopyOnWriteStateTableTest -> @Test 	public void testCopyOnWriteContracts();1490721653;This tests for the copy-on-write contracts, e.g. ensures that no copy-on-write is active after all snapshots are_released.;@Test_	public void testCopyOnWriteContracts() {_		RegisteredBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> originalState1 = new ArrayList<>(1)__		ArrayList<Integer> originalState2 = new ArrayList<>(1)__		ArrayList<Integer> originalState3 = new ArrayList<>(1)__		ArrayList<Integer> originalState4 = new ArrayList<>(1)__		ArrayList<Integer> originalState5 = new ArrayList<>(1)___		originalState1.add(1)__		originalState2.add(2)__		originalState3.add(3)__		originalState4.add(4)__		originalState5.add(5)___		stateTable.put(1, 1, originalState1)__		stateTable.put(2, 1, originalState2)__		stateTable.put(4, 1, originalState4)__		stateTable.put(5, 1, originalState5)___		_		Assert.assertTrue(stateTable.get(1, 1) == originalState1)__		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot1 = stateTable.createSnapshot()__		_		final ArrayList<Integer> copyState = stateTable.get(1, 1)__		Assert.assertFalse(copyState == originalState1)__		_		Assert.assertEquals(originalState1, copyState)___		_		stateTable.put(3, 1, originalState3)___		_		Assert.assertTrue(copyState == stateTable.get(1, 1))___		_		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot2 = stateTable.createSnapshot()__		_		Assert.assertFalse(copyState == stateTable.get(1, 1))__		_		Assert.assertEquals(copyState, stateTable.get(1, 1))___		_		stateTable.releaseSnapshot(snapshot2)__		_		Assert.assertTrue(originalState3 == stateTable.get(3, 1))__		_		Assert.assertFalse(originalState4 == stateTable.get(4, 1))___		_		stateTable.releaseSnapshot(snapshot1)__		_		Assert.assertTrue(originalState5 == stateTable.get(5, 1))__	};this,tests,for,the,copy,on,write,contracts,e,g,ensures,that,no,copy,on,write,is,active,after,all,snapshots,are,released;test,public,void,test,copy,on,write,contracts,registered,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,original,state1,new,array,list,1,array,list,integer,original,state2,new,array,list,1,array,list,integer,original,state3,new,array,list,1,array,list,integer,original,state4,new,array,list,1,array,list,integer,original,state5,new,array,list,1,original,state1,add,1,original,state2,add,2,original,state3,add,3,original,state4,add,4,original,state5,add,5,state,table,put,1,1,original,state1,state,table,put,2,1,original,state2,state,table,put,4,1,original,state4,state,table,put,5,1,original,state5,assert,assert,true,state,table,get,1,1,original,state1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot1,state,table,create,snapshot,final,array,list,integer,copy,state,state,table,get,1,1,assert,assert,false,copy,state,original,state1,assert,assert,equals,original,state1,copy,state,state,table,put,3,1,original,state3,assert,assert,true,copy,state,state,table,get,1,1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot2,state,table,create,snapshot,assert,assert,false,copy,state,state,table,get,1,1,assert,assert,equals,copy,state,state,table,get,1,1,state,table,release,snapshot,snapshot2,assert,assert,true,original,state3,state,table,get,3,1,assert,assert,false,original,state4,state,table,get,4,1,state,table,release,snapshot,snapshot1,assert,assert,true,original,state5,state,table,get,5,1
CopyOnWriteStateTableTest -> @Test 	public void testCopyOnWriteContracts();1494180263;This tests for the copy-on-write contracts, e.g. ensures that no copy-on-write is active after all snapshots are_released.;@Test_	public void testCopyOnWriteContracts() {_		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> originalState1 = new ArrayList<>(1)__		ArrayList<Integer> originalState2 = new ArrayList<>(1)__		ArrayList<Integer> originalState3 = new ArrayList<>(1)__		ArrayList<Integer> originalState4 = new ArrayList<>(1)__		ArrayList<Integer> originalState5 = new ArrayList<>(1)___		originalState1.add(1)__		originalState2.add(2)__		originalState3.add(3)__		originalState4.add(4)__		originalState5.add(5)___		stateTable.put(1, 1, originalState1)__		stateTable.put(2, 1, originalState2)__		stateTable.put(4, 1, originalState4)__		stateTable.put(5, 1, originalState5)___		_		Assert.assertTrue(stateTable.get(1, 1) == originalState1)__		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot1 = stateTable.createSnapshot()__		_		final ArrayList<Integer> copyState = stateTable.get(1, 1)__		Assert.assertFalse(copyState == originalState1)__		_		Assert.assertEquals(originalState1, copyState)___		_		stateTable.put(3, 1, originalState3)___		_		Assert.assertTrue(copyState == stateTable.get(1, 1))___		_		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot2 = stateTable.createSnapshot()__		_		Assert.assertFalse(copyState == stateTable.get(1, 1))__		_		Assert.assertEquals(copyState, stateTable.get(1, 1))___		_		stateTable.releaseSnapshot(snapshot2)__		_		Assert.assertTrue(originalState3 == stateTable.get(3, 1))__		_		Assert.assertFalse(originalState4 == stateTable.get(4, 1))___		_		stateTable.releaseSnapshot(snapshot1)__		_		Assert.assertTrue(originalState5 == stateTable.get(5, 1))__	};this,tests,for,the,copy,on,write,contracts,e,g,ensures,that,no,copy,on,write,is,active,after,all,snapshots,are,released;test,public,void,test,copy,on,write,contracts,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,original,state1,new,array,list,1,array,list,integer,original,state2,new,array,list,1,array,list,integer,original,state3,new,array,list,1,array,list,integer,original,state4,new,array,list,1,array,list,integer,original,state5,new,array,list,1,original,state1,add,1,original,state2,add,2,original,state3,add,3,original,state4,add,4,original,state5,add,5,state,table,put,1,1,original,state1,state,table,put,2,1,original,state2,state,table,put,4,1,original,state4,state,table,put,5,1,original,state5,assert,assert,true,state,table,get,1,1,original,state1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot1,state,table,create,snapshot,final,array,list,integer,copy,state,state,table,get,1,1,assert,assert,false,copy,state,original,state1,assert,assert,equals,original,state1,copy,state,state,table,put,3,1,original,state3,assert,assert,true,copy,state,state,table,get,1,1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot2,state,table,create,snapshot,assert,assert,false,copy,state,state,table,get,1,1,assert,assert,equals,copy,state,state,table,get,1,1,state,table,release,snapshot,snapshot2,assert,assert,true,original,state3,state,table,get,3,1,assert,assert,false,original,state4,state,table,get,4,1,state,table,release,snapshot,snapshot1,assert,assert,true,original,state5,state,table,get,5,1
CopyOnWriteStateTableTest -> @Test 	public void testCopyOnWriteContracts();1505995902;This tests for the copy-on-write contracts, e.g. ensures that no copy-on-write is active after all snapshots are_released.;@Test_	public void testCopyOnWriteContracts() {_		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> originalState1 = new ArrayList<>(1)__		ArrayList<Integer> originalState2 = new ArrayList<>(1)__		ArrayList<Integer> originalState3 = new ArrayList<>(1)__		ArrayList<Integer> originalState4 = new ArrayList<>(1)__		ArrayList<Integer> originalState5 = new ArrayList<>(1)___		originalState1.add(1)__		originalState2.add(2)__		originalState3.add(3)__		originalState4.add(4)__		originalState5.add(5)___		stateTable.put(1, 1, originalState1)__		stateTable.put(2, 1, originalState2)__		stateTable.put(4, 1, originalState4)__		stateTable.put(5, 1, originalState5)___		_		Assert.assertTrue(stateTable.get(1, 1) == originalState1)__		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot1 = stateTable.createSnapshot()__		_		final ArrayList<Integer> copyState = stateTable.get(1, 1)__		Assert.assertFalse(copyState == originalState1)__		_		Assert.assertEquals(originalState1, copyState)___		_		stateTable.put(3, 1, originalState3)___		_		Assert.assertTrue(copyState == stateTable.get(1, 1))___		_		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot2 = stateTable.createSnapshot()__		_		Assert.assertFalse(copyState == stateTable.get(1, 1))__		_		Assert.assertEquals(copyState, stateTable.get(1, 1))___		_		stateTable.releaseSnapshot(snapshot2)__		_		Assert.assertTrue(originalState3 == stateTable.get(3, 1))__		_		Assert.assertFalse(originalState4 == stateTable.get(4, 1))___		_		stateTable.releaseSnapshot(snapshot1)__		_		Assert.assertTrue(originalState5 == stateTable.get(5, 1))__	};this,tests,for,the,copy,on,write,contracts,e,g,ensures,that,no,copy,on,write,is,active,after,all,snapshots,are,released;test,public,void,test,copy,on,write,contracts,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,original,state1,new,array,list,1,array,list,integer,original,state2,new,array,list,1,array,list,integer,original,state3,new,array,list,1,array,list,integer,original,state4,new,array,list,1,array,list,integer,original,state5,new,array,list,1,original,state1,add,1,original,state2,add,2,original,state3,add,3,original,state4,add,4,original,state5,add,5,state,table,put,1,1,original,state1,state,table,put,2,1,original,state2,state,table,put,4,1,original,state4,state,table,put,5,1,original,state5,assert,assert,true,state,table,get,1,1,original,state1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot1,state,table,create,snapshot,final,array,list,integer,copy,state,state,table,get,1,1,assert,assert,false,copy,state,original,state1,assert,assert,equals,original,state1,copy,state,state,table,put,3,1,original,state3,assert,assert,true,copy,state,state,table,get,1,1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot2,state,table,create,snapshot,assert,assert,false,copy,state,state,table,get,1,1,assert,assert,equals,copy,state,state,table,get,1,1,state,table,release,snapshot,snapshot2,assert,assert,true,original,state3,state,table,get,3,1,assert,assert,false,original,state4,state,table,get,4,1,state,table,release,snapshot,snapshot1,assert,assert,true,original,state5,state,table,get,5,1
CopyOnWriteStateTableTest -> @Test 	public void testCopyOnWriteContracts();1529089579;This tests for the copy-on-write contracts, e.g. ensures that no copy-on-write is active after all snapshots are_released.;@Test_	public void testCopyOnWriteContracts() {_		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_				new RegisteredKeyedBackendStateMetaInfo<>(_						StateDescriptor.Type.UNKNOWN,_						"test",_						IntSerializer.INSTANCE,_						new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_				new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> originalState1 = new ArrayList<>(1)__		ArrayList<Integer> originalState2 = new ArrayList<>(1)__		ArrayList<Integer> originalState3 = new ArrayList<>(1)__		ArrayList<Integer> originalState4 = new ArrayList<>(1)__		ArrayList<Integer> originalState5 = new ArrayList<>(1)___		originalState1.add(1)__		originalState2.add(2)__		originalState3.add(3)__		originalState4.add(4)__		originalState5.add(5)___		stateTable.put(1, 1, originalState1)__		stateTable.put(2, 1, originalState2)__		stateTable.put(4, 1, originalState4)__		stateTable.put(5, 1, originalState5)___		_		Assert.assertTrue(stateTable.get(1, 1) == originalState1)__		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot1 = stateTable.createSnapshot()__		_		final ArrayList<Integer> copyState = stateTable.get(1, 1)__		Assert.assertFalse(copyState == originalState1)__		_		Assert.assertEquals(originalState1, copyState)___		_		stateTable.put(3, 1, originalState3)___		_		Assert.assertTrue(copyState == stateTable.get(1, 1))___		_		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot2 = stateTable.createSnapshot()__		_		Assert.assertFalse(copyState == stateTable.get(1, 1))__		_		Assert.assertEquals(copyState, stateTable.get(1, 1))___		_		stateTable.releaseSnapshot(snapshot2)__		_		Assert.assertTrue(originalState3 == stateTable.get(3, 1))__		_		Assert.assertFalse(originalState4 == stateTable.get(4, 1))___		_		stateTable.releaseSnapshot(snapshot1)__		_		Assert.assertTrue(originalState5 == stateTable.get(5, 1))__	};this,tests,for,the,copy,on,write,contracts,e,g,ensures,that,no,copy,on,write,is,active,after,all,snapshots,are,released;test,public,void,test,copy,on,write,contracts,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,original,state1,new,array,list,1,array,list,integer,original,state2,new,array,list,1,array,list,integer,original,state3,new,array,list,1,array,list,integer,original,state4,new,array,list,1,array,list,integer,original,state5,new,array,list,1,original,state1,add,1,original,state2,add,2,original,state3,add,3,original,state4,add,4,original,state5,add,5,state,table,put,1,1,original,state1,state,table,put,2,1,original,state2,state,table,put,4,1,original,state4,state,table,put,5,1,original,state5,assert,assert,true,state,table,get,1,1,original,state1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot1,state,table,create,snapshot,final,array,list,integer,copy,state,state,table,get,1,1,assert,assert,false,copy,state,original,state1,assert,assert,equals,original,state1,copy,state,state,table,put,3,1,original,state3,assert,assert,true,copy,state,state,table,get,1,1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot2,state,table,create,snapshot,assert,assert,false,copy,state,state,table,get,1,1,assert,assert,equals,copy,state,state,table,get,1,1,state,table,release,snapshot,snapshot2,assert,assert,true,original,state3,state,table,get,3,1,assert,assert,false,original,state4,state,table,get,4,1,state,table,release,snapshot,snapshot1,assert,assert,true,original,state5,state,table,get,5,1
CopyOnWriteStateTableTest -> @Test 	public void testCopyOnWriteContracts();1531404901;This tests for the copy-on-write contracts, e.g. ensures that no copy-on-write is active after all snapshots are_released.;@Test_	public void testCopyOnWriteContracts() {_		RegisteredKeyedBackendStateMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyedBackendStateMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> originalState1 = new ArrayList<>(1)__		ArrayList<Integer> originalState2 = new ArrayList<>(1)__		ArrayList<Integer> originalState3 = new ArrayList<>(1)__		ArrayList<Integer> originalState4 = new ArrayList<>(1)__		ArrayList<Integer> originalState5 = new ArrayList<>(1)___		originalState1.add(1)__		originalState2.add(2)__		originalState3.add(3)__		originalState4.add(4)__		originalState5.add(5)___		stateTable.put(1, 1, originalState1)__		stateTable.put(2, 1, originalState2)__		stateTable.put(4, 1, originalState4)__		stateTable.put(5, 1, originalState5)___		_		Assert.assertTrue(stateTable.get(1, 1) == originalState1)__		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot1 = stateTable.createSnapshot()__		_		final ArrayList<Integer> copyState = stateTable.get(1, 1)__		Assert.assertFalse(copyState == originalState1)__		_		Assert.assertEquals(originalState1, copyState)___		_		stateTable.put(3, 1, originalState3)___		_		Assert.assertTrue(copyState == stateTable.get(1, 1))___		_		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot2 = stateTable.createSnapshot()__		_		Assert.assertFalse(copyState == stateTable.get(1, 1))__		_		Assert.assertEquals(copyState, stateTable.get(1, 1))___		_		stateTable.releaseSnapshot(snapshot2)__		_		Assert.assertTrue(originalState3 == stateTable.get(3, 1))__		_		Assert.assertFalse(originalState4 == stateTable.get(4, 1))___		_		stateTable.releaseSnapshot(snapshot1)__		_		Assert.assertTrue(originalState5 == stateTable.get(5, 1))__	};this,tests,for,the,copy,on,write,contracts,e,g,ensures,that,no,copy,on,write,is,active,after,all,snapshots,are,released;test,public,void,test,copy,on,write,contracts,registered,keyed,backend,state,meta,info,integer,array,list,integer,meta,info,new,registered,keyed,backend,state,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,original,state1,new,array,list,1,array,list,integer,original,state2,new,array,list,1,array,list,integer,original,state3,new,array,list,1,array,list,integer,original,state4,new,array,list,1,array,list,integer,original,state5,new,array,list,1,original,state1,add,1,original,state2,add,2,original,state3,add,3,original,state4,add,4,original,state5,add,5,state,table,put,1,1,original,state1,state,table,put,2,1,original,state2,state,table,put,4,1,original,state4,state,table,put,5,1,original,state5,assert,assert,true,state,table,get,1,1,original,state1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot1,state,table,create,snapshot,final,array,list,integer,copy,state,state,table,get,1,1,assert,assert,false,copy,state,original,state1,assert,assert,equals,original,state1,copy,state,state,table,put,3,1,original,state3,assert,assert,true,copy,state,state,table,get,1,1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot2,state,table,create,snapshot,assert,assert,false,copy,state,state,table,get,1,1,assert,assert,equals,copy,state,state,table,get,1,1,state,table,release,snapshot,snapshot2,assert,assert,true,original,state3,state,table,get,3,1,assert,assert,false,original,state4,state,table,get,4,1,state,table,release,snapshot,snapshot1,assert,assert,true,original,state5,state,table,get,5,1
CopyOnWriteStateTableTest -> @Test 	public void testCopyOnWriteContracts();1531771917;This tests for the copy-on-write contracts, e.g. ensures that no copy-on-write is active after all snapshots are_released.;@Test_	public void testCopyOnWriteContracts() {_		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> originalState1 = new ArrayList<>(1)__		ArrayList<Integer> originalState2 = new ArrayList<>(1)__		ArrayList<Integer> originalState3 = new ArrayList<>(1)__		ArrayList<Integer> originalState4 = new ArrayList<>(1)__		ArrayList<Integer> originalState5 = new ArrayList<>(1)___		originalState1.add(1)__		originalState2.add(2)__		originalState3.add(3)__		originalState4.add(4)__		originalState5.add(5)___		stateTable.put(1, 1, originalState1)__		stateTable.put(2, 1, originalState2)__		stateTable.put(4, 1, originalState4)__		stateTable.put(5, 1, originalState5)___		_		Assert.assertTrue(stateTable.get(1, 1) == originalState1)__		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot1 = stateTable.stateSnapshot()__		_		final ArrayList<Integer> copyState = stateTable.get(1, 1)__		Assert.assertFalse(copyState == originalState1)__		_		Assert.assertEquals(originalState1, copyState)___		_		stateTable.put(3, 1, originalState3)___		_		Assert.assertTrue(copyState == stateTable.get(1, 1))___		_		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot2 = stateTable.stateSnapshot()__		_		Assert.assertFalse(copyState == stateTable.get(1, 1))__		_		Assert.assertEquals(copyState, stateTable.get(1, 1))___		_		stateTable.releaseSnapshot(snapshot2)__		_		Assert.assertTrue(originalState3 == stateTable.get(3, 1))__		_		Assert.assertFalse(originalState4 == stateTable.get(4, 1))___		_		stateTable.releaseSnapshot(snapshot1)__		_		Assert.assertTrue(originalState5 == stateTable.get(5, 1))__	};this,tests,for,the,copy,on,write,contracts,e,g,ensures,that,no,copy,on,write,is,active,after,all,snapshots,are,released;test,public,void,test,copy,on,write,contracts,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,original,state1,new,array,list,1,array,list,integer,original,state2,new,array,list,1,array,list,integer,original,state3,new,array,list,1,array,list,integer,original,state4,new,array,list,1,array,list,integer,original,state5,new,array,list,1,original,state1,add,1,original,state2,add,2,original,state3,add,3,original,state4,add,4,original,state5,add,5,state,table,put,1,1,original,state1,state,table,put,2,1,original,state2,state,table,put,4,1,original,state4,state,table,put,5,1,original,state5,assert,assert,true,state,table,get,1,1,original,state1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot1,state,table,state,snapshot,final,array,list,integer,copy,state,state,table,get,1,1,assert,assert,false,copy,state,original,state1,assert,assert,equals,original,state1,copy,state,state,table,put,3,1,original,state3,assert,assert,true,copy,state,state,table,get,1,1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot2,state,table,state,snapshot,assert,assert,false,copy,state,state,table,get,1,1,assert,assert,equals,copy,state,state,table,get,1,1,state,table,release,snapshot,snapshot2,assert,assert,true,original,state3,state,table,get,3,1,assert,assert,false,original,state4,state,table,get,4,1,state,table,release,snapshot,snapshot1,assert,assert,true,original,state5,state,table,get,5,1
CopyOnWriteStateTableTest -> @Test 	public void testCopyOnWriteContracts();1539149027;This tests for the copy-on-write contracts, e.g. ensures that no copy-on-write is active after all snapshots are_released.;@Test_	public void testCopyOnWriteContracts() {_		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> originalState1 = new ArrayList<>(1)__		ArrayList<Integer> originalState2 = new ArrayList<>(1)__		ArrayList<Integer> originalState3 = new ArrayList<>(1)__		ArrayList<Integer> originalState4 = new ArrayList<>(1)__		ArrayList<Integer> originalState5 = new ArrayList<>(1)___		originalState1.add(1)__		originalState2.add(2)__		originalState3.add(3)__		originalState4.add(4)__		originalState5.add(5)___		stateTable.put(1, 1, originalState1)__		stateTable.put(2, 1, originalState2)__		stateTable.put(4, 1, originalState4)__		stateTable.put(5, 1, originalState5)___		_		Assert.assertTrue(stateTable.get(1, 1) == originalState1)__		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot1 = stateTable.stateSnapshot()__		_		final ArrayList<Integer> copyState = stateTable.get(1, 1)__		Assert.assertFalse(copyState == originalState1)__		_		Assert.assertEquals(originalState1, copyState)___		_		stateTable.put(3, 1, originalState3)___		_		Assert.assertTrue(copyState == stateTable.get(1, 1))___		_		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot2 = stateTable.stateSnapshot()__		_		Assert.assertFalse(copyState == stateTable.get(1, 1))__		_		Assert.assertEquals(copyState, stateTable.get(1, 1))___		_		stateTable.releaseSnapshot(snapshot2)__		_		Assert.assertTrue(originalState3 == stateTable.get(3, 1))__		_		Assert.assertFalse(originalState4 == stateTable.get(4, 1))___		_		stateTable.releaseSnapshot(snapshot1)__		_		Assert.assertTrue(originalState5 == stateTable.get(5, 1))__	};this,tests,for,the,copy,on,write,contracts,e,g,ensures,that,no,copy,on,write,is,active,after,all,snapshots,are,released;test,public,void,test,copy,on,write,contracts,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,original,state1,new,array,list,1,array,list,integer,original,state2,new,array,list,1,array,list,integer,original,state3,new,array,list,1,array,list,integer,original,state4,new,array,list,1,array,list,integer,original,state5,new,array,list,1,original,state1,add,1,original,state2,add,2,original,state3,add,3,original,state4,add,4,original,state5,add,5,state,table,put,1,1,original,state1,state,table,put,2,1,original,state2,state,table,put,4,1,original,state4,state,table,put,5,1,original,state5,assert,assert,true,state,table,get,1,1,original,state1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot1,state,table,state,snapshot,final,array,list,integer,copy,state,state,table,get,1,1,assert,assert,false,copy,state,original,state1,assert,assert,equals,original,state1,copy,state,state,table,put,3,1,original,state3,assert,assert,true,copy,state,state,table,get,1,1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot2,state,table,state,snapshot,assert,assert,false,copy,state,state,table,get,1,1,assert,assert,equals,copy,state,state,table,get,1,1,state,table,release,snapshot,snapshot2,assert,assert,true,original,state3,state,table,get,3,1,assert,assert,false,original,state4,state,table,get,4,1,state,table,release,snapshot,snapshot1,assert,assert,true,original,state5,state,table,get,5,1
CopyOnWriteStateTableTest -> @Test 	public void testCopyOnWriteContracts();1541669895;This tests for the copy-on-write contracts, e.g. ensures that no copy-on-write is active after all snapshots are_released.;@Test_	public void testCopyOnWriteContracts() {_		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> originalState1 = new ArrayList<>(1)__		ArrayList<Integer> originalState2 = new ArrayList<>(1)__		ArrayList<Integer> originalState3 = new ArrayList<>(1)__		ArrayList<Integer> originalState4 = new ArrayList<>(1)__		ArrayList<Integer> originalState5 = new ArrayList<>(1)___		originalState1.add(1)__		originalState2.add(2)__		originalState3.add(3)__		originalState4.add(4)__		originalState5.add(5)___		stateTable.put(1, 1, originalState1)__		stateTable.put(2, 1, originalState2)__		stateTable.put(4, 1, originalState4)__		stateTable.put(5, 1, originalState5)___		_		Assert.assertTrue(stateTable.get(1, 1) == originalState1)__		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot1 = stateTable.stateSnapshot()__		_		final ArrayList<Integer> copyState = stateTable.get(1, 1)__		Assert.assertFalse(copyState == originalState1)__		_		Assert.assertEquals(originalState1, copyState)___		_		stateTable.put(3, 1, originalState3)___		_		Assert.assertTrue(copyState == stateTable.get(1, 1))___		_		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot2 = stateTable.stateSnapshot()__		_		Assert.assertFalse(copyState == stateTable.get(1, 1))__		_		Assert.assertEquals(copyState, stateTable.get(1, 1))___		_		stateTable.releaseSnapshot(snapshot2)__		_		Assert.assertTrue(originalState3 == stateTable.get(3, 1))__		_		Assert.assertFalse(originalState4 == stateTable.get(4, 1))___		_		stateTable.releaseSnapshot(snapshot1)__		_		Assert.assertTrue(originalState5 == stateTable.get(5, 1))__	};this,tests,for,the,copy,on,write,contracts,e,g,ensures,that,no,copy,on,write,is,active,after,all,snapshots,are,released;test,public,void,test,copy,on,write,contracts,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,original,state1,new,array,list,1,array,list,integer,original,state2,new,array,list,1,array,list,integer,original,state3,new,array,list,1,array,list,integer,original,state4,new,array,list,1,array,list,integer,original,state5,new,array,list,1,original,state1,add,1,original,state2,add,2,original,state3,add,3,original,state4,add,4,original,state5,add,5,state,table,put,1,1,original,state1,state,table,put,2,1,original,state2,state,table,put,4,1,original,state4,state,table,put,5,1,original,state5,assert,assert,true,state,table,get,1,1,original,state1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot1,state,table,state,snapshot,final,array,list,integer,copy,state,state,table,get,1,1,assert,assert,false,copy,state,original,state1,assert,assert,equals,original,state1,copy,state,state,table,put,3,1,original,state3,assert,assert,true,copy,state,state,table,get,1,1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot2,state,table,state,snapshot,assert,assert,false,copy,state,state,table,get,1,1,assert,assert,equals,copy,state,state,table,get,1,1,state,table,release,snapshot,snapshot2,assert,assert,true,original,state3,state,table,get,3,1,assert,assert,false,original,state4,state,table,get,4,1,state,table,release,snapshot,snapshot1,assert,assert,true,original,state5,state,table,get,5,1
CopyOnWriteStateTableTest -> @Test 	public void testCopyOnWriteContracts();1548755874;This tests for the copy-on-write contracts, e.g. ensures that no copy-on-write is active after all snapshots are_released.;@Test_	public void testCopyOnWriteContracts() {_		RegisteredKeyValueStateBackendMetaInfo<Integer, ArrayList<Integer>> metaInfo =_			new RegisteredKeyValueStateBackendMetaInfo<>(_				StateDescriptor.Type.UNKNOWN,_				"test",_				IntSerializer.INSTANCE,_				new ArrayListSerializer<>(IntSerializer.INSTANCE))_ __		final MockInternalKeyContext<Integer> keyContext = new MockInternalKeyContext<>(IntSerializer.INSTANCE)___		final CopyOnWriteStateTable<Integer, Integer, ArrayList<Integer>> stateTable =_			new CopyOnWriteStateTable<>(keyContext, metaInfo)___		ArrayList<Integer> originalState1 = new ArrayList<>(1)__		ArrayList<Integer> originalState2 = new ArrayList<>(1)__		ArrayList<Integer> originalState3 = new ArrayList<>(1)__		ArrayList<Integer> originalState4 = new ArrayList<>(1)__		ArrayList<Integer> originalState5 = new ArrayList<>(1)___		originalState1.add(1)__		originalState2.add(2)__		originalState3.add(3)__		originalState4.add(4)__		originalState5.add(5)___		stateTable.put(1, 1, originalState1)__		stateTable.put(2, 1, originalState2)__		stateTable.put(4, 1, originalState4)__		stateTable.put(5, 1, originalState5)___		_		Assert.assertTrue(stateTable.get(1, 1) == originalState1)__		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot1 = stateTable.stateSnapshot()__		_		final ArrayList<Integer> copyState = stateTable.get(1, 1)__		Assert.assertFalse(copyState == originalState1)__		_		Assert.assertEquals(originalState1, copyState)___		_		stateTable.put(3, 1, originalState3)___		_		Assert.assertTrue(copyState == stateTable.get(1, 1))___		_		CopyOnWriteStateTableSnapshot<Integer, Integer, ArrayList<Integer>> snapshot2 = stateTable.stateSnapshot()__		_		Assert.assertFalse(copyState == stateTable.get(1, 1))__		_		Assert.assertEquals(copyState, stateTable.get(1, 1))___		_		stateTable.releaseSnapshot(snapshot2)__		_		Assert.assertTrue(originalState3 == stateTable.get(3, 1))__		_		Assert.assertFalse(originalState4 == stateTable.get(4, 1))___		_		stateTable.releaseSnapshot(snapshot1)__		_		Assert.assertTrue(originalState5 == stateTable.get(5, 1))__	};this,tests,for,the,copy,on,write,contracts,e,g,ensures,that,no,copy,on,write,is,active,after,all,snapshots,are,released;test,public,void,test,copy,on,write,contracts,registered,key,value,state,backend,meta,info,integer,array,list,integer,meta,info,new,registered,key,value,state,backend,meta,info,state,descriptor,type,unknown,test,int,serializer,instance,new,array,list,serializer,int,serializer,instance,final,mock,internal,key,context,integer,key,context,new,mock,internal,key,context,int,serializer,instance,final,copy,on,write,state,table,integer,integer,array,list,integer,state,table,new,copy,on,write,state,table,key,context,meta,info,array,list,integer,original,state1,new,array,list,1,array,list,integer,original,state2,new,array,list,1,array,list,integer,original,state3,new,array,list,1,array,list,integer,original,state4,new,array,list,1,array,list,integer,original,state5,new,array,list,1,original,state1,add,1,original,state2,add,2,original,state3,add,3,original,state4,add,4,original,state5,add,5,state,table,put,1,1,original,state1,state,table,put,2,1,original,state2,state,table,put,4,1,original,state4,state,table,put,5,1,original,state5,assert,assert,true,state,table,get,1,1,original,state1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot1,state,table,state,snapshot,final,array,list,integer,copy,state,state,table,get,1,1,assert,assert,false,copy,state,original,state1,assert,assert,equals,original,state1,copy,state,state,table,put,3,1,original,state3,assert,assert,true,copy,state,state,table,get,1,1,copy,on,write,state,table,snapshot,integer,integer,array,list,integer,snapshot2,state,table,state,snapshot,assert,assert,false,copy,state,state,table,get,1,1,assert,assert,equals,copy,state,state,table,get,1,1,state,table,release,snapshot,snapshot2,assert,assert,true,original,state3,state,table,get,3,1,assert,assert,false,original,state4,state,table,get,4,1,state,table,release,snapshot,snapshot1,assert,assert,true,original,state5,state,table,get,5,1
