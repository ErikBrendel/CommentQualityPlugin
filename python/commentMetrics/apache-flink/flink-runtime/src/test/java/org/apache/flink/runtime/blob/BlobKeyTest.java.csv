commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testCreateKey() {     BlobKey key = BlobKey.createKey(PERMANENT_BLOB, KEY_ARRAY_1).     verifyType(PERMANENT_BLOB, key).     assertArrayEquals(KEY_ARRAY_1, key.getHash()).     key = BlobKey.createKey(TRANSIENT_BLOB, KEY_ARRAY_1).     verifyType(TRANSIENT_BLOB, key).     assertArrayEquals(KEY_ARRAY_1, key.getHash()). }
false;public;0;4;;@Test public void testSerializationTransient() throws Exception {     testSerialization(TRANSIENT_BLOB). }
false;public;0;4;;@Test public void testSerializationPermanent() throws Exception {     testSerialization(PERMANENT_BLOB). }
true;private;1;7;/**  * Tests the serialization/deserialization of BLOB keys.  */ ;/**  * Tests the serialization/deserialization of BLOB keys.  */ private void testSerialization(BlobKey.BlobType blobType) throws Exception {     final BlobKey k1 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_1).     final BlobKey k2 = CommonTestUtils.createCopySerializable(k1).     assertEquals(k1, k2).     assertEquals(k1.hashCode(), k2.hashCode()).     assertEquals(0, k1.compareTo(k2)). }
false;public;0;4;;@Test public void testEqualsTransient() {     testEquals(TRANSIENT_BLOB). }
false;public;0;4;;@Test public void testEqualsPermanent() {     testEquals(PERMANENT_BLOB). }
true;private;1;18;/**  * Tests the {@link BlobKey#equals(Object)} and {@link BlobKey#hashCode()} methods.  */ ;/**  * Tests the {@link BlobKey#equals(Object)} and {@link BlobKey#hashCode()} methods.  */ private void testEquals(BlobKey.BlobType blobType) {     final BlobKey k1 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_1).     final BlobKey k2 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_1).     final BlobKey k3 = BlobKey.createKey(blobType, KEY_ARRAY_2, RANDOM_ARRAY_1).     final BlobKey k4 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_2).     assertTrue(k1.equals(k2)).     assertTrue(k2.equals(k1)).     assertEquals(k1.hashCode(), k2.hashCode()).     assertFalse(k1.equals(k3)).     assertFalse(k3.equals(k1)).     assertFalse(k1.equals(k4)).     assertFalse(k4.equals(k1)).     // noinspection ObjectEqualsNull     assertFalse(k1.equals(null)).     // noinspection EqualsBetweenInconvertibleTypes     assertFalse(k1.equals(this)). }
true;public;0;7;/**  * Tests the equals method.  */ ;/**  * Tests the equals method.  */ @Test public void testEqualsDifferentBlobType() {     final BlobKey k1 = BlobKey.createKey(TRANSIENT_BLOB, KEY_ARRAY_1, RANDOM_ARRAY_1).     final BlobKey k2 = BlobKey.createKey(PERMANENT_BLOB, KEY_ARRAY_1, RANDOM_ARRAY_1).     assertFalse(k1.equals(k2)).     assertFalse(k2.equals(k1)). }
false;public;0;4;;@Test public void testComparesTransient() {     testCompares(TRANSIENT_BLOB). }
false;public;0;4;;@Test public void testComparesPermanent() {     testCompares(PERMANENT_BLOB). }
true;private;1;12;/**  * Tests the compares method.  */ ;/**  * Tests the compares method.  */ private void testCompares(BlobKey.BlobType blobType) {     final BlobKey k1 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_1).     final BlobKey k2 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_1).     final BlobKey k3 = BlobKey.createKey(blobType, KEY_ARRAY_2, RANDOM_ARRAY_1).     final BlobKey k4 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_2).     assertThat(k1.compareTo(k2), is(0)).     assertThat(k2.compareTo(k1), is(0)).     assertThat(k1.compareTo(k3), lessThan(0)).     assertThat(k1.compareTo(k4), lessThan(0)).     assertThat(k3.compareTo(k1), greaterThan(0)).     assertThat(k4.compareTo(k1), greaterThan(0)). }
false;public;0;7;;@Test public void testComparesDifferentBlobType() {     final BlobKey k1 = BlobKey.createKey(TRANSIENT_BLOB, KEY_ARRAY_1, RANDOM_ARRAY_1).     final BlobKey k2 = BlobKey.createKey(PERMANENT_BLOB, KEY_ARRAY_1, RANDOM_ARRAY_1).     assertThat(k1.compareTo(k2), greaterThan(0)).     assertThat(k2.compareTo(k1), lessThan(0)). }
false;public;0;4;;@Test public void testStreamsTransient() throws Exception {     testStreams(TRANSIENT_BLOB). }
false;public;0;4;;@Test public void testStreamsPermanent() throws Exception {     testStreams(PERMANENT_BLOB). }
true;private;1;12;/**  * Test the serialization/deserialization using input/output streams.  */ ;/**  * Test the serialization/deserialization using input/output streams.  */ private void testStreams(BlobKey.BlobType blobType) throws IOException {     final BlobKey k1 = BlobKey.createKey(blobType, KEY_ARRAY_1, RANDOM_ARRAY_1).     final ByteArrayOutputStream baos = new ByteArrayOutputStream(20).     k1.writeToOutputStream(baos).     baos.close().     final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray()).     final BlobKey k2 = BlobKey.readFromInputStream(bais).     assertEquals(k1, k2). }
true;static;2;4;/**  * Verifies that the two given key's are different in total but share the same hash.  *  * @param key1 first blob key  * @param key2 second blob key  */ ;/**  * Verifies that the two given key's are different in total but share the same hash.  *  * @param key1 first blob key  * @param key2 second blob key  */ static void verifyKeyDifferentHashEquals(BlobKey key1, BlobKey key2) {     assertNotEquals(key1, key2).     assertThat(key1.getHash(), equalTo(key2.getHash())). }
true;static;2;4;/**  * Verifies that the two given key's are different in total and also have different hashes.  *  * @param key1 first blob key  * @param key2 second blob key  */ ;/**  * Verifies that the two given key's are different in total and also have different hashes.  *  * @param key1 first blob key  * @param key2 second blob key  */ static void verifyKeyDifferentHashDifferent(BlobKey key1, BlobKey key2) {     assertNotEquals(key1, key2).     assertThat(key1.getHash(), not(equalTo(key2.getHash()))). }
true;static;2;7;/**  * Verifies that the given <tt>key</tt> is of an expected type.  *  * @param expected the type the key should have  * @param key      the key to verify  */ ;/**  * Verifies that the given <tt>key</tt> is of an expected type.  *  * @param expected the type the key should have  * @param key      the key to verify  */ static void verifyType(BlobKey.BlobType expected, BlobKey key) {     if (expected == PERMANENT_BLOB) {         assertThat(key, is(instanceOf(PermanentBlobKey.class))).     } else {         assertThat(key, is(instanceOf(TransientBlobKey.class))).     } }
