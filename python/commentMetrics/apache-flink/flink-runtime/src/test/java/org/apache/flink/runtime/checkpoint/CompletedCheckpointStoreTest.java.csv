commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;1;2;/**  * Creates the {@link CompletedCheckpointStore} implementation to be tested.  */ ;/**  * Creates the {@link CompletedCheckpointStore} implementation to be tested.  */ protected abstract CompletedCheckpointStore createCompletedCheckpoints(int maxNumberOfCheckpointsToRetain) throws Exception.
true;public;0;4;/**  * Tests that at least one checkpoint needs to be retained.  */ ;// --------------------------------------------------------------------------------------------- /**  * Tests that at least one checkpoint needs to be retained.  */ @Test(expected = Exception.class) public void testExceptionOnNoRetainedCheckpoints() throws Exception {     createCompletedCheckpoints(0). }
true;public;0;21;/**  * Tests adding and getting a checkpoint.  */ ;/**  * Tests adding and getting a checkpoint.  */ @Test public void testAddAndGetLatestCheckpoint() throws Exception {     SharedStateRegistry sharedStateRegistry = new SharedStateRegistry().     CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4).     // Empty state     assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints()).     assertEquals(0, checkpoints.getAllCheckpoints().size()).     TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] { createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry) }.     // Add and get latest     checkpoints.addCheckpoint(expected[0]).     assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints()).     verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint()).     checkpoints.addCheckpoint(expected[1]).     assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints()).     verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint()). }
true;public;0;25;/**  * Tests that adding more checkpoints than retained discards the correct checkpoints (using  * the correct class loader).  */ ;/**  * Tests that adding more checkpoints than retained discards the correct checkpoints (using  * the correct class loader).  */ @Test public void testAddCheckpointMoreThanMaxRetained() throws Exception {     SharedStateRegistry sharedStateRegistry = new SharedStateRegistry().     CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1).     TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] { createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry), createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry) }.     // Add checkpoints     checkpoints.addCheckpoint(expected[0]).     assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints()).     for (int i = 1. i < expected.length. i++) {         Collection<OperatorState> taskStates = expected[i - 1].getOperatorStates().values().         checkpoints.addCheckpoint(expected[i]).         // The ZooKeeper implementation discards asynchronously         expected[i - 1].awaitDiscard().         assertTrue(expected[i - 1].isDiscarded()).         assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints()).     } }
true;public;0;8;/**  * Tests that  * <ul>  * <li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>  * <li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>  * <li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>  * </ul>  */ ;/**  * Tests that  * <ul>  * <li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>  * <li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>  * <li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>  * </ul>  */ @Test public void testEmptyState() throws Exception {     CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1).     assertNull(checkpoints.getLatestCheckpoint()).     assertEquals(0, checkpoints.getAllCheckpoints().size()).     assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints()). }
true;public;0;22;/**  * Tests that all added checkpoints are returned.  */ ;/**  * Tests that all added checkpoints are returned.  */ @Test public void testGetAllCheckpoints() throws Exception {     SharedStateRegistry sharedStateRegistry = new SharedStateRegistry().     CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4).     TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] { createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry), createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry) }.     for (TestCompletedCheckpoint checkpoint : expected) {         checkpoints.addCheckpoint(checkpoint).     }     List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints().     assertEquals(expected.length, actual.size()).     for (int i = 0. i < expected.length. i++) {         assertEquals(expected[i], actual.get(i)).     } }
true;public;0;28;/**  * Tests that all checkpoints are discarded (using the correct class loader).  */ ;/**  * Tests that all checkpoints are discarded (using the correct class loader).  */ @Test public void testDiscardAllCheckpoints() throws Exception {     SharedStateRegistry sharedStateRegistry = new SharedStateRegistry().     CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4).     TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] { createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry), createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry) }.     for (TestCompletedCheckpoint checkpoint : expected) {         checkpoints.addCheckpoint(checkpoint).     }     checkpoints.shutdown(JobStatus.FINISHED).     // Empty state     assertNull(checkpoints.getLatestCheckpoint()).     assertEquals(0, checkpoints.getAllCheckpoints().size()).     assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints()).     // All have been discarded     for (TestCompletedCheckpoint checkpoint : expected) {         // The ZooKeeper implementation discards asynchronously         checkpoint.awaitDiscard().         assertTrue(checkpoint.isDiscarded()).     } }
false;public,static;2;24;;// --------------------------------------------------------------------------------------------- public static TestCompletedCheckpoint createCheckpoint(int id, SharedStateRegistry sharedStateRegistry) throws IOException {     int numberOfStates = 4.     CheckpointProperties props = CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION).     OperatorID operatorID = new OperatorID().     Map<OperatorID, OperatorState> operatorGroupState = new HashMap<>().     OperatorState operatorState = new OperatorState(operatorID, numberOfStates, numberOfStates).     operatorGroupState.put(operatorID, operatorState).     for (int i = 0. i < numberOfStates. i++) {         OperatorSubtaskState subtaskState = new TestOperatorSubtaskState().         operatorState.putState(i, subtaskState).     }     operatorState.registerSharedStates(sharedStateRegistry).     return new TestCompletedCheckpoint(new JobID(), id, 0, operatorGroupState, props). }
false;protected;2;7;;protected void verifyCheckpointRegistered(Collection<OperatorState> operatorStates, SharedStateRegistry registry) {     for (OperatorState operatorState : operatorStates) {         for (OperatorSubtaskState subtaskState : operatorState.getStates()) {             Assert.assertTrue(((TestOperatorSubtaskState) subtaskState).registered).         }     } }
false;public,static;1;4;;public static void verifyCheckpointDiscarded(TestCompletedCheckpoint completedCheckpoint) {     assertTrue(completedCheckpoint.isDiscarded()).     verifyCheckpointDiscarded(completedCheckpoint.getOperatorStates().values()). }
false;protected,static;1;7;;protected static void verifyCheckpointDiscarded(Collection<OperatorState> operatorStates) {     for (OperatorState operatorState : operatorStates) {         for (OperatorSubtaskState subtaskState : operatorState.getStates()) {             Assert.assertTrue(((TestOperatorSubtaskState) subtaskState).discarded).         }     } }
false;private;2;3;;private void verifyCheckpoint(CompletedCheckpoint expected, CompletedCheckpoint actual) {     assertEquals(expected, actual). }
false;public;0;9;;@Override public boolean discardOnSubsume() throws Exception {     if (super.discardOnSubsume()) {         discard().         return true.     } else {         return false.     } }
false;public;1;9;;@Override public boolean discardOnShutdown(JobStatus jobStatus) throws Exception {     if (super.discardOnShutdown(jobStatus)) {         discard().         return true.     } else {         return false.     } }
false;;0;9;;void discard() {     if (!isDiscarded) {         this.isDiscarded = true.         if (discardLatch != null) {             discardLatch.countDown().         }     } }
false;public;0;3;;public boolean isDiscarded() {     return isDiscarded. }
false;public;0;5;;public void awaitDiscard() throws InterruptedException {     if (discardLatch != null) {         discardLatch.await().     } }
false;public;1;7;;public boolean awaitDiscard(long timeout) throws InterruptedException {     if (discardLatch != null) {         return discardLatch.await(timeout, TimeUnit.MILLISECONDS).     } else {         return false.     } }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (o == null || getClass() != o.getClass())         return false.     TestCompletedCheckpoint that = (TestCompletedCheckpoint) o.     return getJobId().equals(that.getJobId()) && getCheckpointID() == that.getCheckpointID(). }
false;public;0;4;;@Override public int hashCode() {     return getJobId().hashCode() + (int) getCheckpointID(). }
false;public;0;7;;@Override public void discardState() {     super.discardState().     Assert.assertFalse(discarded).     discarded = true.     registered = false. }
false;public;1;6;;@Override public void registerSharedStates(SharedStateRegistry sharedStateRegistry) {     super.registerSharedStates(sharedStateRegistry).     Assert.assertFalse(discarded).     registered = true. }
false;public;0;4;;public void reset() {     registered = false.     discarded = false. }
false;public;0;3;;public boolean isRegistered() {     return registered. }
false;public;0;3;;public boolean isDiscarded() {     return discarded. }
