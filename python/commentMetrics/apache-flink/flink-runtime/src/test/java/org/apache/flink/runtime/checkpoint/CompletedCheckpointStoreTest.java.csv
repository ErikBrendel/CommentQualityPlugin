# id;timestamp;commentText;codeText;commentWords;codeWords
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1445293011;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0, userClassLoader)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0,user,class,loader
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1451519127;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0, userClassLoader)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0,user,class,loader
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1461666173;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0, userClassLoader)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0,user,class,loader
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1468854249;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0, userClassLoader)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0,user,class,loader
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1469190400;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0, userClassLoader)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0,user,class,loader
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1469525443;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0, userClassLoader)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0,user,class,loader
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1471454287;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0, userClassLoader)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0,user,class,loader
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1472663401;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0, userClassLoader)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0,user,class,loader
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1475231926;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0, userClassLoader)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0,user,class,loader
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1476432306;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1476972861;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1481295943;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1484038132;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1488304750;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1492867556;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1492867556;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1493236605;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1493403095;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1495184252;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1495184252;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1495287945;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1502801814;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1516295283;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1517489696;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1519568061;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test(expected = Exception.class) 	public void testExceptionOnNoRetainedCheckpoints() throws Exception;1536763178;Tests that at least one checkpoint needs to be retained.;@Test(expected = Exception.class)_	public void testExceptionOnNoRetainedCheckpoints() throws Exception {_		createCompletedCheckpoints(0)__	};tests,that,at,least,one,checkpoint,needs,to,be,retained;test,expected,exception,class,public,void,test,exception,on,no,retained,checkpoints,throws,exception,create,completed,checkpoints,0
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1445293011;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1451519127;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1461666173;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1468854249;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1469190400;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1469525443;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1471454287;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1472663401;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1475231926;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1476432306;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1476972861;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1481295943;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1484038132;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1488304750;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1492867556;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1492867556;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1493236605;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1493403095;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1495184252;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1495184252;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1495287945;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1502801814;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1516295283;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1517489696;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1519568061;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testEmptyState() throws Exception;1536763178;Tests that_<ul>_<li>{@link CompletedCheckpointStore#getLatestCheckpoint()} returns <code>null</code>,</li>_<li>{@link CompletedCheckpointStore#getAllCheckpoints()} returns an empty list,</li>_<li>{@link CompletedCheckpointStore#getNumberOfRetainedCheckpoints()} returns 0.</li>_</ul>;@Test_	public void testEmptyState() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__	};tests,that,ul,li,link,completed,checkpoint,store,get,latest,checkpoint,returns,code,null,code,li,li,link,completed,checkpoint,store,get,all,checkpoints,returns,an,empty,list,li,li,link,completed,checkpoint,store,get,number,of,retained,checkpoints,returns,0,li,ul;test,public,void,test,empty,state,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1445293011;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(userClassLoader, expected[i - 1].getDiscardClassLoader())___			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,user,class,loader,expected,i,1,get,discard,class,loader,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1451519127;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(userClassLoader, expected[i - 1].getDiscardClassLoader())___			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,user,class,loader,expected,i,1,get,discard,class,loader,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1461666173;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(userClassLoader, expected[i - 1].getDiscardClassLoader())___			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,user,class,loader,expected,i,1,get,discard,class,loader,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1468854249;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(userClassLoader, expected[i - 1].getDiscardClassLoader())___			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,user,class,loader,expected,i,1,get,discard,class,loader,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1469190400;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(userClassLoader, expected[i - 1].getDiscardClassLoader())___			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,user,class,loader,expected,i,1,get,discard,class,loader,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1469525443;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(userClassLoader, expected[i - 1].getDiscardClassLoader())___			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,user,class,loader,expected,i,1,get,discard,class,loader,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1471454287;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(userClassLoader, expected[i - 1].getDiscardClassLoader())___			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,user,class,loader,expected,i,1,get,discard,class,loader,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1472663401;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1475231926;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1, userClassLoader)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,user,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1476432306;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1476972861;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1481295943;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1484038132;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1488304750;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1492867556;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)_   _		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0], sharedStateRegistry)__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			Collection<TaskState> taskStates = expected[i - 1].getTaskStates().values()___			checkpoints.addCheckpoint(expected[i], sharedStateRegistry)___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___			for (TaskState taskState : taskStates) {_				for (SubtaskState subtaskState : taskState.getStates()) {_					verify(subtaskState, times(1)).unregisterSharedStates(sharedStateRegistry)__				}_			}_		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,shared,state,registry,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,collection,task,state,task,states,expected,i,1,get,task,states,values,checkpoints,add,checkpoint,expected,i,shared,state,registry,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,task,state,task,state,task,states,for,subtask,state,subtask,state,task,state,get,states,verify,subtask,state,times,1,unregister,shared,states,shared,state,registry
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1492867556;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			Collection<TaskState> taskStates = expected[i - 1].getTaskStates().values()___			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___			for (TaskState taskState : taskStates) {_				for (SubtaskState subtaskState : taskState.getStates()) {_					verify(subtaskState, times(1)).unregisterSharedStates(any(SharedStateRegistry.class))__				}_			}_		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,collection,task,state,task,states,expected,i,1,get,task,states,values,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,task,state,task,state,task,states,for,subtask,state,subtask,state,task,state,get,states,verify,subtask,state,times,1,unregister,shared,states,any,shared,state,registry,class
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1493236605;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			Collection<TaskState> taskStates = expected[i - 1].getTaskStates().values()___			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___			for (TaskState taskState : taskStates) {_				for (SubtaskState subtaskState : taskState.getStates()) {_					verify(subtaskState, times(1)).unregisterSharedStates(any(SharedStateRegistry.class))__				}_			}_		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,collection,task,state,task,states,expected,i,1,get,task,states,values,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,task,state,task,state,task,states,for,subtask,state,subtask,state,task,state,get,states,verify,subtask,state,times,1,unregister,shared,states,any,shared,state,registry,class
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1493403095;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			Collection<OperatorState> taskStates = expected[i - 1].getOperatorStates().values()___			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___			for (OperatorState operatorState : taskStates) {_				for (OperatorSubtaskState subtaskState : operatorState.getStates()) {_					verify(subtaskState, times(1)).unregisterSharedStates(any(SharedStateRegistry.class))__				}_			}_		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,collection,operator,state,task,states,expected,i,1,get,operator,states,values,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,operator,state,operator,state,task,states,for,operator,subtask,state,subtask,state,operator,state,get,states,verify,subtask,state,times,1,unregister,shared,states,any,shared,state,registry,class
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1495184252;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			Collection<OperatorState> taskStates = expected[i - 1].getOperatorStates().values()___			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___			for (OperatorState operatorState : taskStates) {_				for (OperatorSubtaskState subtaskState : operatorState.getStates()) {_					verify(subtaskState, times(1)).unregisterSharedStates(any(SharedStateRegistry.class))__				}_			}_		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,collection,operator,state,task,states,expected,i,1,get,operator,states,values,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,operator,state,operator,state,task,states,for,operator,subtask,state,subtask,state,operator,state,get,states,verify,subtask,state,times,1,unregister,shared,states,any,shared,state,registry,class
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1495184252;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			Collection<OperatorState> taskStates = expected[i - 1].getOperatorStates().values()___			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,collection,operator,state,task,states,expected,i,1,get,operator,states,values,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1495287945;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			Collection<OperatorState> taskStates = expected[i - 1].getOperatorStates().values()___			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,collection,operator,state,task,states,expected,i,1,get,operator,states,values,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1502801814;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			Collection<OperatorState> taskStates = expected[i - 1].getOperatorStates().values()___			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,collection,operator,state,task,states,expected,i,1,get,operator,states,values,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1516295283;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			Collection<OperatorState> taskStates = expected[i - 1].getOperatorStates().values()___			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,collection,operator,state,task,states,expected,i,1,get,operator,states,values,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1517489696;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			Collection<OperatorState> taskStates = expected[i - 1].getOperatorStates().values()___			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,collection,operator,state,task,states,expected,i,1,get,operator,states,values,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1519568061;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			Collection<OperatorState> taskStates = expected[i - 1].getOperatorStates().values()___			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,collection,operator,state,task,states,expected,i,1,get,operator,states,values,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointMoreThanMaxRetained() throws Exception;1536763178;Tests that adding more checkpoints than retained discards the correct checkpoints (using_the correct class loader).;@Test_	public void testAddCheckpointMoreThanMaxRetained() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(1)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())___		for (int i = 1_ i < expected.length_ i++) {_			Collection<OperatorState> taskStates = expected[i - 1].getOperatorStates().values()___			checkpoints.addCheckpoint(expected[i])___			_			expected[i - 1].awaitDiscard()__			assertTrue(expected[i - 1].isDiscarded())__			assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		}_	};tests,that,adding,more,checkpoints,than,retained,discards,the,correct,checkpoints,using,the,correct,class,loader;test,public,void,test,add,checkpoint,more,than,max,retained,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,1,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,for,int,i,1,i,expected,length,i,collection,operator,state,task,states,expected,i,1,get,operator,states,values,checkpoints,add,checkpoint,expected,i,expected,i,1,await,discard,assert,true,expected,i,1,is,discarded,assert,equals,1,checkpoints,get,number,of,retained,checkpoints
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;1445293011;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,class,loader,user,loader,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;1451519127;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,class,loader,user,loader,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;1461666173;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,class,loader,user,loader,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;1468854249;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,class,loader,user,loader,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;1469190400;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,class,loader,user,loader,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;1469525443;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,class,loader,user,loader,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;1471454287;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,class,loader,user,loader,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;1472663401;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,class,loader,user,loader,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;1475231926;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain, ClassLoader userLoader) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,class,loader,user,loader,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1476432306;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1476972861;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1481295943;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1484038132;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1488304750;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1492867556;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1492867556;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1493236605;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1493403095;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1495184252;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1495184252;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1495287945;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1502801814;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1516295283;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1517489696;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1519568061;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> protected abstract CompletedCheckpointStore createCompletedCheckpoints( 			int maxNumberOfCheckpointsToRetain) throws Exception_;1536763178;Creates the {@link CompletedCheckpointStore} implementation to be tested.;protected abstract CompletedCheckpointStore createCompletedCheckpoints(_			int maxNumberOfCheckpointsToRetain) throws Exception_;creates,the,link,completed,checkpoint,store,implementation,to,be,tested;protected,abstract,completed,checkpoint,store,create,completed,checkpoints,int,max,number,of,checkpoints,to,retain,throws,exception
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1445293011;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1451519127;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1461666173;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1468854249;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1469190400;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1469525443;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1471454287;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1472663401;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1475231926;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1476432306;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1476972861;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1481295943;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1484038132;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1488304750;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1492867556;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		_		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0], sharedStateRegistry)__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1], sharedStateRegistry)__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,shared,state,registry,shared,state,registry,new,shared,state,registry,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,shared,state,registry,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,shared,state,registry,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1492867556;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		_		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1493236605;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		_		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1493403095;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		_		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1495184252;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		_		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1495184252;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		_		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1495287945;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		_		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1502801814;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		_		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1516295283;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		_		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1517489696;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		_		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1519568061;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		_		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testAddAndGetLatestCheckpoint() throws Exception;1536763178;Tests adding and getting a checkpoint.;@Test_	public void testAddAndGetLatestCheckpoint() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		_		_		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(0, checkpoints.getAllCheckpoints().size())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry) }___		_		checkpoints.addCheckpoint(expected[0])__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[0], checkpoints.getLatestCheckpoint())___		checkpoints.addCheckpoint(expected[1])__		assertEquals(2, checkpoints.getNumberOfRetainedCheckpoints())__		verifyCheckpoint(expected[1], checkpoints.getLatestCheckpoint())__	};tests,adding,and,getting,a,checkpoint;test,public,void,test,add,and,get,latest,checkpoint,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,assert,equals,0,checkpoints,get,all,checkpoints,size,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,checkpoints,add,checkpoint,expected,0,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,0,checkpoints,get,latest,checkpoint,checkpoints,add,checkpoint,expected,1,assert,equals,2,checkpoints,get,number,of,retained,checkpoints,verify,checkpoint,expected,1,checkpoints,get,latest,checkpoint
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1445293011;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1451519127;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1461666173;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1468854249;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1469190400;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1469525443;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1471454287;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1472663401;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1475231926;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1476432306;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1476972861;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1481295943;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1484038132;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1488304750;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1492867556;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint, sharedStateRegistry)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,shared,state,registry,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1492867556;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1493236605;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1493403095;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1495184252;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1495184252;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1495287945;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1502801814;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1516295283;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1517489696;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1519568061;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testGetAllCheckpoints() throws Exception;1536763178;Tests that all added checkpoints are returned.;@Test_	public void testGetAllCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		List<CompletedCheckpoint> actual = checkpoints.getAllCheckpoints()___		assertEquals(expected.length, actual.size())___		for (int i = 0_ i < expected.length_ i++) {_			assertEquals(expected[i], actual.get(i))__		}_	};tests,that,all,added,checkpoints,are,returned;test,public,void,test,get,all,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,list,completed,checkpoint,actual,checkpoints,get,all,checkpoints,assert,equals,expected,length,actual,size,for,int,i,0,i,expected,length,i,assert,equals,expected,i,actual,get,i
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1445293011;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.discardAllCheckpoints()___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__			assertEquals(userClassLoader, checkpoint.getDiscardClassLoader())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,discard,all,checkpoints,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded,assert,equals,user,class,loader,checkpoint,get,discard,class,loader
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1451519127;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.discardAllCheckpoints()___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__			assertEquals(userClassLoader, checkpoint.getDiscardClassLoader())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,discard,all,checkpoints,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded,assert,equals,user,class,loader,checkpoint,get,discard,class,loader
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1461666173;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.discardAllCheckpoints()___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__			assertEquals(userClassLoader, checkpoint.getDiscardClassLoader())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,discard,all,checkpoints,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded,assert,equals,user,class,loader,checkpoint,get,discard,class,loader
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1468854249;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.discardAllCheckpoints()___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__			assertEquals(userClassLoader, checkpoint.getDiscardClassLoader())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,discard,all,checkpoints,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded,assert,equals,user,class,loader,checkpoint,get,discard,class,loader
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1469190400;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown()___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__			assertEquals(userClassLoader, checkpoint.getDiscardClassLoader())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded,assert,equals,user,class,loader,checkpoint,get,discard,class,loader
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1469525443;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown()___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__			assertEquals(userClassLoader, checkpoint.getDiscardClassLoader())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded,assert,equals,user,class,loader,checkpoint,get,discard,class,loader
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1471454287;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown()___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__			assertEquals(userClassLoader, checkpoint.getDiscardClassLoader())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded,assert,equals,user,class,loader,checkpoint,get,discard,class,loader
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1472663401;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown()___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1475231926;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4, userClassLoader)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown()___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,user,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1476432306;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1476972861;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1481295943;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1484038132;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1488304750;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1492867556;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint, sharedStateRegistry)__		}__		checkpoints.shutdown(JobStatus.FINISHED, sharedStateRegistry)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,shared,state,registry,checkpoints,shutdown,job,status,finished,shared,state,registry,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1492867556;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1493236605;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1493403095;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1495184252;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1495184252;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1),_				createCheckpoint(2), createCheckpoint(3)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,create,checkpoint,3,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1495287945;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1502801814;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1516295283;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1517489696;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1519568061;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
CompletedCheckpointStoreTest -> @Test 	public void testDiscardAllCheckpoints() throws Exception;1536763178;Tests that all checkpoints are discarded (using the correct class loader).;@Test_	public void testDiscardAllCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(4)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0, sharedStateRegistry), createCheckpoint(1, sharedStateRegistry),_				createCheckpoint(2, sharedStateRegistry), createCheckpoint(3, sharedStateRegistry)_		}___		for (TestCompletedCheckpoint checkpoint : expected) {_			checkpoints.addCheckpoint(checkpoint)__		}__		checkpoints.shutdown(JobStatus.FINISHED)___		_		assertNull(checkpoints.getLatestCheckpoint())__		assertEquals(0, checkpoints.getAllCheckpoints().size())__		assertEquals(0, checkpoints.getNumberOfRetainedCheckpoints())___		_		for (TestCompletedCheckpoint checkpoint : expected) {_			_			checkpoint.awaitDiscard()__			assertTrue(checkpoint.isDiscarded())__		}_	};tests,that,all,checkpoints,are,discarded,using,the,correct,class,loader;test,public,void,test,discard,all,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,4,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,create,checkpoint,3,shared,state,registry,for,test,completed,checkpoint,checkpoint,expected,checkpoints,add,checkpoint,checkpoint,checkpoints,shutdown,job,status,finished,assert,null,checkpoints,get,latest,checkpoint,assert,equals,0,checkpoints,get,all,checkpoints,size,assert,equals,0,checkpoints,get,number,of,retained,checkpoints,for,test,completed,checkpoint,checkpoint,expected,checkpoint,await,discard,assert,true,checkpoint,is,discarded
