commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Class<TaskManagerDetailsInfo> getTestResponseClass() {     return TaskManagerDetailsInfo.class. }
false;protected;0;9;;@Override protected TaskManagerDetailsInfo getTestResponseInstance() throws Exception {     final TaskManagerInfo taskManagerInfo = TaskManagerInfoTest.createRandomTaskManagerInfo().     final TaskManagerMetricsInfo taskManagerMetricsInfo = createRandomTaskManagerMetricsInfo().     return new TaskManagerDetailsInfo(taskManagerInfo, taskManagerMetricsInfo). }
false;static;0;20;;static TaskManagerMetricsInfo createRandomTaskManagerMetricsInfo() {     final List<TaskManagerMetricsInfo.GarbageCollectorInfo> garbageCollectorsInfo = createRandomGarbageCollectorsInfo().     return new TaskManagerMetricsInfo(random.nextLong(), random.nextLong(), random.nextLong(), random.nextLong(), random.nextLong(), random.nextLong(), random.nextLong(), random.nextLong(), random.nextLong(), random.nextLong(), random.nextLong(), random.nextLong(), random.nextLong(), random.nextLong(), garbageCollectorsInfo). }
false;static;0;13;;static List<TaskManagerMetricsInfo.GarbageCollectorInfo> createRandomGarbageCollectorsInfo() {     final int numberGCs = random.nextInt(10).     final List<TaskManagerMetricsInfo.GarbageCollectorInfo> garbageCollectorInfos = new ArrayList<>(numberGCs).     for (int i = 0. i < numberGCs. i++) {         garbageCollectorInfos.add(new TaskManagerMetricsInfo.GarbageCollectorInfo(UUID.randomUUID().toString(), random.nextLong(), random.nextLong())).     }     return garbageCollectorInfos. }
