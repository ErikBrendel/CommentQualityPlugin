# id;timestamp;commentText;codeText;commentWords;codeWords
SpanningRecordSerializationTest -> private void test(Util.MockRecords records, int segmentSize,  			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1421838095;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link AdaptiveSpanningRecordDeserializer}_interact as expected._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize, _			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception_	{_		final int SERIALIZATION_OVERHEAD = 4_ __		final Buffer buffer = new Buffer(new MemorySegment(new byte[segmentSize]), segmentSize, null)___		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<SerializationTestType>()___		__		serializer.setNextBuffer(buffer)___		int numBytes = 0__		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				while (serializer.setNextBuffer(buffer).isFullBuffer()) {_					deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)__				}____			}_		}__		_		deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), (numBytes % segmentSize))___		serializer.clear()___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}___		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,adaptive,spanning,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,int,4,final,buffer,buffer,new,buffer,new,memory,segment,new,byte,segment,size,segment,size,null,final,array,deque,serialization,test,type,serialized,records,new,array,deque,serialization,test,type,serializer,set,next,buffer,buffer,int,num,bytes,0,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,num,bytes,record,length,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serializer,set,next,buffer,buffer,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,num,bytes,segment,size,serializer,clear,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private void test(Util.MockRecords records, int segmentSize,  			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1421838119;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link AdaptiveSpanningRecordDeserializer}_interact as expected._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize, _			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception_	{_		final int SERIALIZATION_OVERHEAD = 4_ __		final Buffer buffer = new Buffer(new MemorySegment(new byte[segmentSize]), mock(BufferRecycler.class))___		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<SerializationTestType>()___		__		serializer.setNextBuffer(buffer)___		int numBytes = 0__		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				while (serializer.setNextBuffer(buffer).isFullBuffer()) {_					deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)__				}____			}_		}__		_		deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), (numBytes % segmentSize))___		serializer.clear()___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}___		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,adaptive,spanning,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,int,4,final,buffer,buffer,new,buffer,new,memory,segment,new,byte,segment,size,mock,buffer,recycler,class,final,array,deque,serialization,test,type,serialized,records,new,array,deque,serialization,test,type,serializer,set,next,buffer,buffer,int,num,bytes,0,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,num,bytes,record,length,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serializer,set,next,buffer,buffer,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,num,bytes,segment,size,serializer,clear,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private void test(Util.MockRecords records, int segmentSize,  			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1426697080;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link AdaptiveSpanningRecordDeserializer}_interact as expected._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize, _			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception_	{_		final int SERIALIZATION_OVERHEAD = 4_ __		final Buffer buffer = new Buffer(new MemorySegment(new byte[segmentSize]), mock(BufferRecycler.class))___		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<SerializationTestType>()___		__		serializer.setNextBuffer(buffer)___		int numBytes = 0__		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				while (serializer.setNextBuffer(buffer).isFullBuffer()) {_					deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)__				}____			}_		}__		_		deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), (numBytes % segmentSize))___		serializer.clear()___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}___		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,adaptive,spanning,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,int,4,final,buffer,buffer,new,buffer,new,memory,segment,new,byte,segment,size,mock,buffer,recycler,class,final,array,deque,serialization,test,type,serialized,records,new,array,deque,serialization,test,type,serializer,set,next,buffer,buffer,int,num,bytes,0,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,num,bytes,record,length,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serializer,set,next,buffer,buffer,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,num,bytes,segment,size,serializer,clear,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private void test(Util.MockRecords records, int segmentSize,  			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1441738685;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link AdaptiveSpanningRecordDeserializer}_interact as expected._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize, _			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception_	{_		final int SERIALIZATION_OVERHEAD = 4_ __		final Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(segmentSize), mock(BufferRecycler.class))___		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<SerializationTestType>()___		__		serializer.setNextBuffer(buffer)___		int numBytes = 0__		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				while (serializer.setNextBuffer(buffer).isFullBuffer()) {_					deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)__				}____			}_		}__		_		deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), (numBytes % segmentSize))___		serializer.clear()___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}___		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,adaptive,spanning,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,int,4,final,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,segment,size,mock,buffer,recycler,class,final,array,deque,serialization,test,type,serialized,records,new,array,deque,serialization,test,type,serializer,set,next,buffer,buffer,int,num,bytes,0,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,num,bytes,record,length,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serializer,set,next,buffer,buffer,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,num,bytes,segment,size,serializer,clear,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private void test(Util.MockRecords records, int segmentSize,  			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1464290120;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link AdaptiveSpanningRecordDeserializer}_interact as expected._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize, _			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception_	{_		final int SERIALIZATION_OVERHEAD = 4_ __		final Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(segmentSize), mock(BufferRecycler.class))___		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<SerializationTestType>()___		__		serializer.setNextBuffer(buffer)___		int numBytes = 0__		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				while (serializer.setNextBuffer(buffer).isFullBuffer()) {_					deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)__				}____			}_		}__		_		deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), (numBytes % segmentSize))___		serializer.clear()___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}___		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,adaptive,spanning,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,int,4,final,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,segment,size,mock,buffer,recycler,class,final,array,deque,serialization,test,type,serialized,records,new,array,deque,serialization,test,type,serializer,set,next,buffer,buffer,int,num,bytes,0,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,num,bytes,record,length,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serializer,set,next,buffer,buffer,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,num,bytes,segment,size,serializer,clear,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private void test(Util.MockRecords records, int segmentSize,  			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1509646806;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link AdaptiveSpanningRecordDeserializer}_interact as expected._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize, _			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception_	{_		final int SERIALIZATION_OVERHEAD = 4_ __		final Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(segmentSize), mock(BufferRecycler.class))___		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<SerializationTestType>()___		__		serializer.setNextBuffer(buffer)___		int numBytes = 0__		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				while (serializer.setNextBuffer(buffer).isFullBuffer()) {_					deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)__				}____			}_		}__		_		deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), (numBytes % segmentSize))___		serializer.clear()___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}___		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,adaptive,spanning,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,int,4,final,buffer,buffer,new,buffer,memory,segment,factory,allocate,unpooled,segment,segment,size,mock,buffer,recycler,class,final,array,deque,serialization,test,type,serialized,records,new,array,deque,serialization,test,type,serializer,set,next,buffer,buffer,int,num,bytes,0,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,num,bytes,record,length,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serializer,set,next,buffer,buffer,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,num,bytes,segment,size,serializer,clear,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private void test(Util.MockRecords records, int segmentSize,  			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1515408360;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link AdaptiveSpanningRecordDeserializer}_interact as expected._<p>_Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize, _			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception_	{_		final int SERIALIZATION_OVERHEAD = 4_ __		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<SerializationTestType>()___		__		serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))___		int numBytes = 0__		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++__			numBytes += record.length() + SERIALIZATION_OVERHEAD___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				while (serializer.setNextBufferBuilder(createBufferBuilder(segmentSize)).isFullBuffer()) {_					deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)__				}____			}_		}__		_		deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), (numBytes % segmentSize))___		serializer.clear()___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}___		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,adaptive,spanning,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,int,4,final,array,deque,serialization,test,type,serialized,records,new,array,deque,serialization,test,type,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,int,num,bytes,0,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,num,bytes,record,length,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,num,bytes,segment,size,serializer,clear,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private void test(Util.MockRecords records, int segmentSize, 			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) throws Exception;1517489696;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link AdaptiveSpanningRecordDeserializer}_interact as expected.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize,_			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer) throws Exception {__		final int serializationOverhead = 4_ __		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()___		__		serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))___		int numBytes = 0__		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++__			numBytes += record.length() + serializationOverhead___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				while (serializer.setNextBufferBuilder(createBufferBuilder(segmentSize)).isFullBuffer()) {_					deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)__				}_			}_		}__		_		deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), (numBytes % segmentSize))___		serializer.clear()___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}__		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,adaptive,spanning,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,int,serialization,overhead,4,final,array,deque,serialization,test,type,serialized,records,new,array,deque,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,int,num,bytes,0,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,num,bytes,record,length,serialization,overhead,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,num,bytes,segment,size,serializer,clear,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private void test(Util.MockRecords records, int segmentSize, 			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) throws Exception;1519039269;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link AdaptiveSpanningRecordDeserializer}_interact as expected.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize,_			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer) throws Exception {__		final int serializationOverhead = 4_ __		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()___		__		serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))___		int numBytes = 0__		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++__			numBytes += record.length() + serializationOverhead___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				while (serializer.setNextBufferBuilder(createBufferBuilder(segmentSize)).isFullBuffer()) {_					deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)__				}_			}_		}__		_		deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), (numBytes % segmentSize))___		serializer.clear()___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}__		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,adaptive,spanning,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,int,serialization,overhead,4,final,array,deque,serialization,test,type,serialized,records,new,array,deque,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,int,num,bytes,0,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,num,bytes,record,length,serialization,overhead,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,num,bytes,segment,size,serializer,clear,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private void test(Util.MockRecords records, int segmentSize, 			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) throws Exception;1519039270;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link AdaptiveSpanningRecordDeserializer}_interact as expected.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private void test(Util.MockRecords records, int segmentSize,_			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer) throws Exception {__		final int serializationOverhead = 4_ __		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()___		__		serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))___		int numBytes = 0__		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++__			numBytes += record.length() + serializationOverhead___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				while (serializer.setNextBufferBuilder(createBufferBuilder(segmentSize)).isFullBuffer()) {_					deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)__				}_			}_		}__		_		deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), (numBytes % segmentSize))___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}__		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasSerializedData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,adaptive,spanning,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,void,test,util,mock,records,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,int,serialization,overhead,4,final,array,deque,serialization,test,type,serialized,records,new,array,deque,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,int,num,bytes,0,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,num,bytes,record,length,serialization,overhead,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,num,bytes,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,serialized,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private static void testSerializationRoundTrip( 			Iterable<SerializationTestType> records, 			int segmentSize, 			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1519039273;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link AdaptiveSpanningRecordDeserializer}_interact as expected.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private static void testSerializationRoundTrip(_			Iterable<SerializationTestType> records,_			int segmentSize,_			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception {_		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()___		__		serializer.setNextBufferBuilder(createBufferBuilder(segmentSize))___		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				_				while (serializer.setNextBufferBuilder(createBufferBuilder(segmentSize)).isFullBuffer()) {_					deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)__				}_			}_		}__		_		deserializer.setNextMemorySegment(serializer.getCurrentBuffer().getMemorySegment(), segmentSize)___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}__		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasSerializedData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,adaptive,spanning,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,static,void,test,serialization,round,trip,iterable,serialization,test,type,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,array,deque,serialization,test,type,serialized,records,new,array,deque,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serializer,set,next,buffer,builder,create,buffer,builder,segment,size,is,full,buffer,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,deserializer,set,next,memory,segment,serializer,get,current,buffer,get,memory,segment,segment,size,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,serialized,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private static void testSerializationRoundTrip( 			Iterable<SerializationTestType> records, 			int segmentSize, 			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1519039274;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link AdaptiveSpanningRecordDeserializer}_interact as expected.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private static void testSerializationRoundTrip(_			Iterable<SerializationTestType> records,_			int segmentSize,_			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception {_		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()___		__		BufferBuilder bufferBuilder = createBufferBuilder(segmentSize)__		serializer.setNextBufferBuilder(bufferBuilder)___		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextBuffer(buildSingleBuffer(bufferBuilder))___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				_				bufferBuilder = createBufferBuilder(segmentSize)__				serializer.clear()__				while (serializer.setNextBufferBuilder(bufferBuilder).isFullBuffer()) {_					deserializer.setNextBuffer(buildSingleBuffer(bufferBuilder))__					bufferBuilder = createBufferBuilder(segmentSize)__					serializer.clear()__				}_			}_		}__		_		deserializer.setNextBuffer(buildSingleBuffer(bufferBuilder))___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}__		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasSerializedData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,adaptive,spanning,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,static,void,test,serialization,round,trip,iterable,serialization,test,type,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,array,deque,serialization,test,type,serialized,records,new,array,deque,buffer,builder,buffer,builder,create,buffer,builder,segment,size,serializer,set,next,buffer,builder,buffer,builder,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,buffer,build,single,buffer,buffer,builder,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,buffer,builder,create,buffer,builder,segment,size,serializer,clear,while,serializer,set,next,buffer,builder,buffer,builder,is,full,buffer,deserializer,set,next,buffer,build,single,buffer,buffer,builder,buffer,builder,create,buffer,builder,segment,size,serializer,clear,deserializer,set,next,buffer,build,single,buffer,buffer,builder,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,serialized,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private static void testSerializationRoundTrip( 			Iterable<SerializationTestType> records, 			int segmentSize, 			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1519039297;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link RecordDeserializer}_interact as expected.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private static void testSerializationRoundTrip(_			Iterable<SerializationTestType> records,_			int segmentSize,_			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception {_		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()___		__		BufferBuilder bufferBuilder = createBufferBuilder(segmentSize)__		serializer.setNextBufferBuilder(bufferBuilder)___		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextBuffer(buildSingleBuffer(bufferBuilder))___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				_				bufferBuilder = createBufferBuilder(segmentSize)__				serializer.clear()__				while (serializer.setNextBufferBuilder(bufferBuilder).isFullBuffer()) {_					deserializer.setNextBuffer(buildSingleBuffer(bufferBuilder))__					bufferBuilder = createBufferBuilder(segmentSize)__					serializer.clear()__				}_			}_		}__		_		deserializer.setNextBuffer(buildSingleBuffer(bufferBuilder))___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}__		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasSerializedData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,static,void,test,serialization,round,trip,iterable,serialization,test,type,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,array,deque,serialization,test,type,serialized,records,new,array,deque,buffer,builder,buffer,builder,create,buffer,builder,segment,size,serializer,set,next,buffer,builder,buffer,builder,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,buffer,build,single,buffer,buffer,builder,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,buffer,builder,create,buffer,builder,segment,size,serializer,clear,while,serializer,set,next,buffer,builder,buffer,builder,is,full,buffer,deserializer,set,next,buffer,build,single,buffer,buffer,builder,buffer,builder,create,buffer,builder,segment,size,serializer,clear,deserializer,set,next,buffer,build,single,buffer,buffer,builder,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,serialized,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private static void testSerializationRoundTrip( 			Iterable<SerializationTestType> records, 			int segmentSize, 			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1519039299;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link RecordDeserializer}_interact as expected.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private static void testSerializationRoundTrip(_			Iterable<SerializationTestType> records,_			int segmentSize,_			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception {_		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()___		__		BufferConsumerAndSerializerResult serializationResult = setNextBufferForSerializer(serializer, segmentSize)___		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextBuffer(serializationResult.buildBuffer())___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				_				while ((serializationResult = setNextBufferForSerializer(serializer, segmentSize)).isFullBuffer()) {_					deserializer.setNextBuffer(serializationResult.buildBuffer())__					serializer.clear()__				}_			}_		}__		_		deserializer.setNextBuffer(serializationResult.buildBuffer())___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}__		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasSerializedData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,static,void,test,serialization,round,trip,iterable,serialization,test,type,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,array,deque,serialization,test,type,serialized,records,new,array,deque,buffer,consumer,and,serializer,result,serialization,result,set,next,buffer,for,serializer,serializer,segment,size,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,buffer,serialization,result,build,buffer,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serialization,result,set,next,buffer,for,serializer,serializer,segment,size,is,full,buffer,deserializer,set,next,buffer,serialization,result,build,buffer,serializer,clear,deserializer,set,next,buffer,serialization,result,build,buffer,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,serialized,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private static void testSerializationRoundTrip( 			Iterable<SerializationTestType> records, 			int segmentSize, 			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1519049134;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link RecordDeserializer}_interact as expected.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private static void testSerializationRoundTrip(_			Iterable<SerializationTestType> records,_			int segmentSize,_			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception {_		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()___		__		BufferConsumerAndSerializerResult serializationResult = setNextBufferForSerializer(serializer, segmentSize)___		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextBuffer(serializationResult.buildBuffer())___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				_				while ((serializationResult = setNextBufferForSerializer(serializer, segmentSize)).isFullBuffer()) {_					deserializer.setNextBuffer(serializationResult.buildBuffer())__					serializer.clear()__				}_			}_		}__		_		deserializer.setNextBuffer(serializationResult.buildBuffer())___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}__		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasSerializedData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,static,void,test,serialization,round,trip,iterable,serialization,test,type,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,array,deque,serialization,test,type,serialized,records,new,array,deque,buffer,consumer,and,serializer,result,serialization,result,set,next,buffer,for,serializer,serializer,segment,size,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,buffer,serialization,result,build,buffer,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serialization,result,set,next,buffer,for,serializer,serializer,segment,size,is,full,buffer,deserializer,set,next,buffer,serialization,result,build,buffer,serializer,clear,deserializer,set,next,buffer,serialization,result,build,buffer,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,serialized,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private static void testSerializationRoundTrip( 			Iterable<SerializationTestType> records, 			int segmentSize, 			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1522217464;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link RecordDeserializer}_interact as expected.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private static void testSerializationRoundTrip(_			Iterable<SerializationTestType> records,_			int segmentSize,_			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception {_		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()___		__		BufferConsumerAndSerializerResult serializationResult = setNextBufferForSerializer(serializer, segmentSize)___		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++___			_			if (serializer.addRecord(record).isFullBuffer()) {_				_				deserializer.setNextBuffer(serializationResult.buildBuffer())___				while (!serializedRecords.isEmpty()) {_					SerializationTestType expected = serializedRecords.poll()__					SerializationTestType actual = expected.getClass().newInstance()___					if (deserializer.getNextRecord(actual).isFullRecord()) {_						Assert.assertEquals(expected, actual)__						numRecords--__					} else {_						serializedRecords.addFirst(expected)__						break__					}_				}__				_				while ((serializationResult = setNextBufferForSerializer(serializer, segmentSize)).isFullBuffer()) {_					deserializer.setNextBuffer(serializationResult.buildBuffer())__					serializer.clear()__				}_			}_		}__		_		deserializer.setNextBuffer(serializationResult.buildBuffer())___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}__		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasSerializedData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,static,void,test,serialization,round,trip,iterable,serialization,test,type,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,array,deque,serialization,test,type,serialized,records,new,array,deque,buffer,consumer,and,serializer,result,serialization,result,set,next,buffer,for,serializer,serializer,segment,size,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,if,serializer,add,record,record,is,full,buffer,deserializer,set,next,buffer,serialization,result,build,buffer,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,if,deserializer,get,next,record,actual,is,full,record,assert,assert,equals,expected,actual,num,records,else,serialized,records,add,first,expected,break,while,serialization,result,set,next,buffer,for,serializer,serializer,segment,size,is,full,buffer,deserializer,set,next,buffer,serialization,result,build,buffer,serializer,clear,deserializer,set,next,buffer,serialization,result,build,buffer,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,serialized,data,assert,assert,false,deserializer,has,unfinished,data
SpanningRecordSerializationTest -> private static void testSerializationRoundTrip( 			Iterable<SerializationTestType> records, 			int segmentSize, 			RecordSerializer<SerializationTestType> serializer, 			RecordDeserializer<SerializationTestType> deserializer) 		throws Exception;1537529044;Iterates over the provided records and tests whether {@link SpanningRecordSerializer} and {@link RecordDeserializer}_interact as expected.__<p>Only a single {@link MemorySegment} will be allocated.__@param records records to test_@param segmentSize size for the {@link MemorySegment};private static void testSerializationRoundTrip(_			Iterable<SerializationTestType> records,_			int segmentSize,_			RecordSerializer<SerializationTestType> serializer,_			RecordDeserializer<SerializationTestType> deserializer)_		throws Exception {_		final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>()___		__		BufferAndSerializerResult serializationResult = setNextBufferForSerializer(serializer, segmentSize)___		int numRecords = 0__		for (SerializationTestType record : records) {__			serializedRecords.add(record)___			numRecords++___			_			serializer.serializeRecord(record)__			if (serializer.copyToBufferBuilder(serializationResult.getBufferBuilder()).isFullBuffer()) {_				_				deserializer.setNextBuffer(serializationResult.buildBuffer())___				numRecords -= DeserializationUtils.deserializeRecords(serializedRecords, deserializer)___				_				while ((serializationResult = setNextBufferForSerializer(serializer, segmentSize)).isFullBuffer()) {_					deserializer.setNextBuffer(serializationResult.buildBuffer())__				}_			}_		}__		_		deserializer.setNextBuffer(serializationResult.buildBuffer())___		while (!serializedRecords.isEmpty()) {_			SerializationTestType expected = serializedRecords.poll()___			SerializationTestType actual = expected.getClass().newInstance()__			RecordDeserializer.DeserializationResult result = deserializer.getNextRecord(actual)___			Assert.assertTrue(result.isFullRecord())__			Assert.assertEquals(expected, actual)__			numRecords--__		}__		_		Assert.assertEquals(0, numRecords)__		Assert.assertFalse(serializer.hasSerializedData())__		Assert.assertFalse(deserializer.hasUnfinishedData())__	};iterates,over,the,provided,records,and,tests,whether,link,spanning,record,serializer,and,link,record,deserializer,interact,as,expected,p,only,a,single,link,memory,segment,will,be,allocated,param,records,records,to,test,param,segment,size,size,for,the,link,memory,segment;private,static,void,test,serialization,round,trip,iterable,serialization,test,type,records,int,segment,size,record,serializer,serialization,test,type,serializer,record,deserializer,serialization,test,type,deserializer,throws,exception,final,array,deque,serialization,test,type,serialized,records,new,array,deque,buffer,and,serializer,result,serialization,result,set,next,buffer,for,serializer,serializer,segment,size,int,num,records,0,for,serialization,test,type,record,records,serialized,records,add,record,num,records,serializer,serialize,record,record,if,serializer,copy,to,buffer,builder,serialization,result,get,buffer,builder,is,full,buffer,deserializer,set,next,buffer,serialization,result,build,buffer,num,records,deserialization,utils,deserialize,records,serialized,records,deserializer,while,serialization,result,set,next,buffer,for,serializer,serializer,segment,size,is,full,buffer,deserializer,set,next,buffer,serialization,result,build,buffer,deserializer,set,next,buffer,serialization,result,build,buffer,while,serialized,records,is,empty,serialization,test,type,expected,serialized,records,poll,serialization,test,type,actual,expected,get,class,new,instance,record,deserializer,deserialization,result,result,deserializer,get,next,record,actual,assert,assert,true,result,is,full,record,assert,assert,equals,expected,actual,num,records,assert,assert,equals,0,num,records,assert,assert,false,serializer,has,serialized,data,assert,assert,false,deserializer,has,unfinished,data
