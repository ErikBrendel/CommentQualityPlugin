# id;timestamp;commentText;codeText;commentWords;codeWords
CheckpointIDCounterTest -> @Test 	public void testSerialIncrementAndGet() throws Exception;1445293011;Tests serial increment and get calls.;@Test_	public void testSerialIncrementAndGet() throws Exception {_		final CheckpointIDCounter counter = createCompletedCheckpoints()___		try {_			counter.start()___			assertEquals(1, counter.getAndIncrement())__			assertEquals(2, counter.getAndIncrement())__			assertEquals(3, counter.getAndIncrement())__			assertEquals(4, counter.getAndIncrement())__		}_		finally {_			counter.stop()__		}_	};tests,serial,increment,and,get,calls;test,public,void,test,serial,increment,and,get,throws,exception,final,checkpoint,idcounter,counter,create,completed,checkpoints,try,counter,start,assert,equals,1,counter,get,and,increment,assert,equals,2,counter,get,and,increment,assert,equals,3,counter,get,and,increment,assert,equals,4,counter,get,and,increment,finally,counter,stop
CheckpointIDCounterTest -> @Test 	public void testSerialIncrementAndGet() throws Exception;1452526243;Tests serial increment and get calls.;@Test_	public void testSerialIncrementAndGet() throws Exception {_		final CheckpointIDCounter counter = createCompletedCheckpoints()___		try {_			counter.start()___			assertEquals(1, counter.getAndIncrement())__			assertEquals(2, counter.getAndIncrement())__			assertEquals(3, counter.getAndIncrement())__			assertEquals(4, counter.getAndIncrement())__		}_		finally {_			counter.stop()__		}_	};tests,serial,increment,and,get,calls;test,public,void,test,serial,increment,and,get,throws,exception,final,checkpoint,idcounter,counter,create,completed,checkpoints,try,counter,start,assert,equals,1,counter,get,and,increment,assert,equals,2,counter,get,and,increment,assert,equals,3,counter,get,and,increment,assert,equals,4,counter,get,and,increment,finally,counter,stop
CheckpointIDCounterTest -> @Test 	public void testSerialIncrementAndGet() throws Exception;1469190400;Tests serial increment and get calls.;@Test_	public void testSerialIncrementAndGet() throws Exception {_		final CheckpointIDCounter counter = createCompletedCheckpoints()___		try {_			counter.start()___			assertEquals(1, counter.getAndIncrement())__			assertEquals(2, counter.getAndIncrement())__			assertEquals(3, counter.getAndIncrement())__			assertEquals(4, counter.getAndIncrement())__		}_		finally {_			counter.shutdown()__		}_	};tests,serial,increment,and,get,calls;test,public,void,test,serial,increment,and,get,throws,exception,final,checkpoint,idcounter,counter,create,completed,checkpoints,try,counter,start,assert,equals,1,counter,get,and,increment,assert,equals,2,counter,get,and,increment,assert,equals,3,counter,get,and,increment,assert,equals,4,counter,get,and,increment,finally,counter,shutdown
CheckpointIDCounterTest -> @Test 	public void testSerialIncrementAndGet() throws Exception;1474998400;Tests serial increment and get calls.;@Test_	public void testSerialIncrementAndGet() throws Exception {_		final CheckpointIDCounter counter = createCompletedCheckpoints()___		try {_			counter.start()___			assertEquals(1, counter.getAndIncrement())__			assertEquals(2, counter.getAndIncrement())__			assertEquals(3, counter.getAndIncrement())__			assertEquals(4, counter.getAndIncrement())__		}_		finally {_			counter.shutdown()__		}_	};tests,serial,increment,and,get,calls;test,public,void,test,serial,increment,and,get,throws,exception,final,checkpoint,idcounter,counter,create,completed,checkpoints,try,counter,start,assert,equals,1,counter,get,and,increment,assert,equals,2,counter,get,and,increment,assert,equals,3,counter,get,and,increment,assert,equals,4,counter,get,and,increment,finally,counter,shutdown
CheckpointIDCounterTest -> @Test 	public void testSerialIncrementAndGet() throws Exception;1476432306;Tests serial increment and get calls.;@Test_	public void testSerialIncrementAndGet() throws Exception {_		final CheckpointIDCounter counter = createCompletedCheckpoints()___		try {_			counter.start()___			assertEquals(1, counter.getAndIncrement())__			assertEquals(2, counter.getAndIncrement())__			assertEquals(3, counter.getAndIncrement())__			assertEquals(4, counter.getAndIncrement())__		}_		finally {_			counter.shutdown(JobStatus.FINISHED)__		}_	};tests,serial,increment,and,get,calls;test,public,void,test,serial,increment,and,get,throws,exception,final,checkpoint,idcounter,counter,create,completed,checkpoints,try,counter,start,assert,equals,1,counter,get,and,increment,assert,equals,2,counter,get,and,increment,assert,equals,3,counter,get,and,increment,assert,equals,4,counter,get,and,increment,finally,counter,shutdown,job,status,finished
CheckpointIDCounterTest -> @Test 	public void testSetCount() throws Exception;1452526243;Tests a simple {@link CheckpointIDCounter#setCount(long)} operation.;@Test_	public void testSetCount() throws Exception {_		final CheckpointIDCounter counter = createCompletedCheckpoints()__		counter.start()___		_		counter.setCount(1337)__		assertEquals(1337, counter.getAndIncrement())__		assertEquals(1338, counter.getAndIncrement())___		counter.stop()__	};tests,a,simple,link,checkpoint,idcounter,set,count,long,operation;test,public,void,test,set,count,throws,exception,final,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,counter,set,count,1337,assert,equals,1337,counter,get,and,increment,assert,equals,1338,counter,get,and,increment,counter,stop
CheckpointIDCounterTest -> @Test 	public void testSetCount() throws Exception;1469190400;Tests a simple {@link CheckpointIDCounter#setCount(long)} operation.;@Test_	public void testSetCount() throws Exception {_		final CheckpointIDCounter counter = createCompletedCheckpoints()__		counter.start()___		_		counter.setCount(1337)__		assertEquals(1337, counter.getAndIncrement())__		assertEquals(1338, counter.getAndIncrement())___		counter.shutdown()__	};tests,a,simple,link,checkpoint,idcounter,set,count,long,operation;test,public,void,test,set,count,throws,exception,final,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,counter,set,count,1337,assert,equals,1337,counter,get,and,increment,assert,equals,1338,counter,get,and,increment,counter,shutdown
CheckpointIDCounterTest -> @Test 	public void testSetCount() throws Exception;1474998400;Tests a simple {@link CheckpointIDCounter#setCount(long)} operation.;@Test_	public void testSetCount() throws Exception {_		final CheckpointIDCounter counter = createCompletedCheckpoints()__		counter.start()___		_		counter.setCount(1337)__		assertEquals(1337, counter.getAndIncrement())__		assertEquals(1338, counter.getAndIncrement())___		counter.shutdown()__	};tests,a,simple,link,checkpoint,idcounter,set,count,long,operation;test,public,void,test,set,count,throws,exception,final,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,counter,set,count,1337,assert,equals,1337,counter,get,and,increment,assert,equals,1338,counter,get,and,increment,counter,shutdown
CheckpointIDCounterTest -> @Test 	public void testSetCount() throws Exception;1476432306;Tests a simple {@link CheckpointIDCounter#setCount(long)} operation.;@Test_	public void testSetCount() throws Exception {_		final CheckpointIDCounter counter = createCompletedCheckpoints()__		counter.start()___		_		counter.setCount(1337)__		assertEquals(1337, counter.getAndIncrement())__		assertEquals(1338, counter.getAndIncrement())___		counter.shutdown(JobStatus.FINISHED)__	};tests,a,simple,link,checkpoint,idcounter,set,count,long,operation;test,public,void,test,set,count,throws,exception,final,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,counter,set,count,1337,assert,equals,1337,counter,get,and,increment,assert,equals,1338,counter,get,and,increment,counter,shutdown,job,status,finished
CheckpointIDCounterTest -> @Test 	public void testConcurrentGetAndIncrement() throws Exception;1445293011;Tests concurrent increment and get calls from multiple Threads and verifies that the numbers_counts strictly increasing.;@Test_	public void testConcurrentGetAndIncrement() throws Exception {_		_		final int numThreads = 8___		_		final CountDownLatch startLatch = new CountDownLatch(1)__		final CheckpointIDCounter counter = createCompletedCheckpoints()__		counter.start()___		ExecutorService executor = null__		try {_			executor = Executors.newFixedThreadPool(numThreads)___			List<Future<List<Long>>> resultFutures = new ArrayList<>(numThreads)___			for (int i = 0_ i < numThreads_ i++) {_				resultFutures.add(executor.submit(new Incrementer(startLatch, counter)))__			}__			_			startLatch.countDown()___			final int expectedTotal = numThreads * Incrementer.NumIncrements___			List<Long> all = new ArrayList<>(expectedTotal)___			_			for (Future<List<Long>> result : resultFutures) {_				List<Long> counts = result.get()___				for (long val : counts) {_					all.add(val)__				}_			}__			_			Collections.sort(all)___			assertEquals(expectedTotal, all.size())___			long current = 0__			for (long val : all) {_				_				assertEquals(++current, val)__			}__			_			assertEquals(expectedTotal + 1, counter.getAndIncrement())__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}__			counter.stop()__		}_	};tests,concurrent,increment,and,get,calls,from,multiple,threads,and,verifies,that,the,numbers,counts,strictly,increasing;test,public,void,test,concurrent,get,and,increment,throws,exception,final,int,num,threads,8,final,count,down,latch,start,latch,new,count,down,latch,1,final,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,executor,service,executor,null,try,executor,executors,new,fixed,thread,pool,num,threads,list,future,list,long,result,futures,new,array,list,num,threads,for,int,i,0,i,num,threads,i,result,futures,add,executor,submit,new,incrementer,start,latch,counter,start,latch,count,down,final,int,expected,total,num,threads,incrementer,num,increments,list,long,all,new,array,list,expected,total,for,future,list,long,result,result,futures,list,long,counts,result,get,for,long,val,counts,all,add,val,collections,sort,all,assert,equals,expected,total,all,size,long,current,0,for,long,val,all,assert,equals,current,val,assert,equals,expected,total,1,counter,get,and,increment,finally,if,executor,null,executor,shutdown,counter,stop
CheckpointIDCounterTest -> @Test 	public void testConcurrentGetAndIncrement() throws Exception;1452526243;Tests concurrent increment and get calls from multiple Threads and verifies that the numbers_counts strictly increasing.;@Test_	public void testConcurrentGetAndIncrement() throws Exception {_		_		final int numThreads = 8___		_		final CountDownLatch startLatch = new CountDownLatch(1)__		final CheckpointIDCounter counter = createCompletedCheckpoints()__		counter.start()___		ExecutorService executor = null__		try {_			executor = Executors.newFixedThreadPool(numThreads)___			List<Future<List<Long>>> resultFutures = new ArrayList<>(numThreads)___			for (int i = 0_ i < numThreads_ i++) {_				resultFutures.add(executor.submit(new Incrementer(startLatch, counter)))__			}__			_			startLatch.countDown()___			final int expectedTotal = numThreads * Incrementer.NumIncrements___			List<Long> all = new ArrayList<>(expectedTotal)___			_			for (Future<List<Long>> result : resultFutures) {_				List<Long> counts = result.get()___				for (long val : counts) {_					all.add(val)__				}_			}__			_			Collections.sort(all)___			assertEquals(expectedTotal, all.size())___			long current = 0__			for (long val : all) {_				_				assertEquals(++current, val)__			}__			_			assertEquals(expectedTotal + 1, counter.getAndIncrement())__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}__			counter.stop()__		}_	};tests,concurrent,increment,and,get,calls,from,multiple,threads,and,verifies,that,the,numbers,counts,strictly,increasing;test,public,void,test,concurrent,get,and,increment,throws,exception,final,int,num,threads,8,final,count,down,latch,start,latch,new,count,down,latch,1,final,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,executor,service,executor,null,try,executor,executors,new,fixed,thread,pool,num,threads,list,future,list,long,result,futures,new,array,list,num,threads,for,int,i,0,i,num,threads,i,result,futures,add,executor,submit,new,incrementer,start,latch,counter,start,latch,count,down,final,int,expected,total,num,threads,incrementer,num,increments,list,long,all,new,array,list,expected,total,for,future,list,long,result,result,futures,list,long,counts,result,get,for,long,val,counts,all,add,val,collections,sort,all,assert,equals,expected,total,all,size,long,current,0,for,long,val,all,assert,equals,current,val,assert,equals,expected,total,1,counter,get,and,increment,finally,if,executor,null,executor,shutdown,counter,stop
CheckpointIDCounterTest -> @Test 	public void testConcurrentGetAndIncrement() throws Exception;1469190400;Tests concurrent increment and get calls from multiple Threads and verifies that the numbers_counts strictly increasing.;@Test_	public void testConcurrentGetAndIncrement() throws Exception {_		_		final int numThreads = 8___		_		final CountDownLatch startLatch = new CountDownLatch(1)__		final CheckpointIDCounter counter = createCompletedCheckpoints()__		counter.start()___		ExecutorService executor = null__		try {_			executor = Executors.newFixedThreadPool(numThreads)___			List<Future<List<Long>>> resultFutures = new ArrayList<>(numThreads)___			for (int i = 0_ i < numThreads_ i++) {_				resultFutures.add(executor.submit(new Incrementer(startLatch, counter)))__			}__			_			startLatch.countDown()___			final int expectedTotal = numThreads * Incrementer.NumIncrements___			List<Long> all = new ArrayList<>(expectedTotal)___			_			for (Future<List<Long>> result : resultFutures) {_				List<Long> counts = result.get()___				for (long val : counts) {_					all.add(val)__				}_			}__			_			Collections.sort(all)___			assertEquals(expectedTotal, all.size())___			long current = 0__			for (long val : all) {_				_				assertEquals(++current, val)__			}__			_			assertEquals(expectedTotal + 1, counter.getAndIncrement())__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}__			counter.shutdown()__		}_	};tests,concurrent,increment,and,get,calls,from,multiple,threads,and,verifies,that,the,numbers,counts,strictly,increasing;test,public,void,test,concurrent,get,and,increment,throws,exception,final,int,num,threads,8,final,count,down,latch,start,latch,new,count,down,latch,1,final,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,executor,service,executor,null,try,executor,executors,new,fixed,thread,pool,num,threads,list,future,list,long,result,futures,new,array,list,num,threads,for,int,i,0,i,num,threads,i,result,futures,add,executor,submit,new,incrementer,start,latch,counter,start,latch,count,down,final,int,expected,total,num,threads,incrementer,num,increments,list,long,all,new,array,list,expected,total,for,future,list,long,result,result,futures,list,long,counts,result,get,for,long,val,counts,all,add,val,collections,sort,all,assert,equals,expected,total,all,size,long,current,0,for,long,val,all,assert,equals,current,val,assert,equals,expected,total,1,counter,get,and,increment,finally,if,executor,null,executor,shutdown,counter,shutdown
CheckpointIDCounterTest -> @Test 	public void testConcurrentGetAndIncrement() throws Exception;1474998400;Tests concurrent increment and get calls from multiple Threads and verifies that the numbers_counts strictly increasing.;@Test_	public void testConcurrentGetAndIncrement() throws Exception {_		_		final int numThreads = 8___		_		final CountDownLatch startLatch = new CountDownLatch(1)__		final CheckpointIDCounter counter = createCompletedCheckpoints()__		counter.start()___		ExecutorService executor = null__		try {_			executor = Executors.newFixedThreadPool(numThreads)___			List<Future<List<Long>>> resultFutures = new ArrayList<>(numThreads)___			for (int i = 0_ i < numThreads_ i++) {_				resultFutures.add(executor.submit(new Incrementer(startLatch, counter)))__			}__			_			startLatch.countDown()___			final int expectedTotal = numThreads * Incrementer.NumIncrements___			List<Long> all = new ArrayList<>(expectedTotal)___			_			for (Future<List<Long>> result : resultFutures) {_				List<Long> counts = result.get()___				for (long val : counts) {_					all.add(val)__				}_			}__			_			Collections.sort(all)___			assertEquals(expectedTotal, all.size())___			long current = 0__			for (long val : all) {_				_				assertEquals(++current, val)__			}__			_			assertEquals(expectedTotal + 1, counter.getAndIncrement())__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}__			counter.shutdown()__		}_	};tests,concurrent,increment,and,get,calls,from,multiple,threads,and,verifies,that,the,numbers,counts,strictly,increasing;test,public,void,test,concurrent,get,and,increment,throws,exception,final,int,num,threads,8,final,count,down,latch,start,latch,new,count,down,latch,1,final,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,executor,service,executor,null,try,executor,executors,new,fixed,thread,pool,num,threads,list,future,list,long,result,futures,new,array,list,num,threads,for,int,i,0,i,num,threads,i,result,futures,add,executor,submit,new,incrementer,start,latch,counter,start,latch,count,down,final,int,expected,total,num,threads,incrementer,num,increments,list,long,all,new,array,list,expected,total,for,future,list,long,result,result,futures,list,long,counts,result,get,for,long,val,counts,all,add,val,collections,sort,all,assert,equals,expected,total,all,size,long,current,0,for,long,val,all,assert,equals,current,val,assert,equals,expected,total,1,counter,get,and,increment,finally,if,executor,null,executor,shutdown,counter,shutdown
CheckpointIDCounterTest -> @Test 	public void testConcurrentGetAndIncrement() throws Exception;1476432306;Tests concurrent increment and get calls from multiple Threads and verifies that the numbers_counts strictly increasing.;@Test_	public void testConcurrentGetAndIncrement() throws Exception {_		_		final int numThreads = 8___		_		final CountDownLatch startLatch = new CountDownLatch(1)__		final CheckpointIDCounter counter = createCompletedCheckpoints()__		counter.start()___		ExecutorService executor = null__		try {_			executor = Executors.newFixedThreadPool(numThreads)___			List<Future<List<Long>>> resultFutures = new ArrayList<>(numThreads)___			for (int i = 0_ i < numThreads_ i++) {_				resultFutures.add(executor.submit(new Incrementer(startLatch, counter)))__			}__			_			startLatch.countDown()___			final int expectedTotal = numThreads * Incrementer.NumIncrements___			List<Long> all = new ArrayList<>(expectedTotal)___			_			for (Future<List<Long>> result : resultFutures) {_				List<Long> counts = result.get()___				for (long val : counts) {_					all.add(val)__				}_			}__			_			Collections.sort(all)___			assertEquals(expectedTotal, all.size())___			long current = 0__			for (long val : all) {_				_				assertEquals(++current, val)__			}__			_			assertEquals(expectedTotal + 1, counter.getAndIncrement())__		}_		finally {_			if (executor != null) {_				executor.shutdown()__			}__			counter.shutdown(JobStatus.FINISHED)__		}_	};tests,concurrent,increment,and,get,calls,from,multiple,threads,and,verifies,that,the,numbers,counts,strictly,increasing;test,public,void,test,concurrent,get,and,increment,throws,exception,final,int,num,threads,8,final,count,down,latch,start,latch,new,count,down,latch,1,final,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,executor,service,executor,null,try,executor,executors,new,fixed,thread,pool,num,threads,list,future,list,long,result,futures,new,array,list,num,threads,for,int,i,0,i,num,threads,i,result,futures,add,executor,submit,new,incrementer,start,latch,counter,start,latch,count,down,final,int,expected,total,num,threads,incrementer,num,increments,list,long,all,new,array,list,expected,total,for,future,list,long,result,result,futures,list,long,counts,result,get,for,long,val,counts,all,add,val,collections,sort,all,assert,equals,expected,total,all,size,long,current,0,for,long,val,all,assert,equals,current,val,assert,equals,expected,total,1,counter,get,and,increment,finally,if,executor,null,executor,shutdown,counter,shutdown,job,status,finished
CheckpointIDCounterTest -> ZooKeeperCheckpointIDCounterITCase -> @Test 		public void testShutdownRemovesState() throws Exception;1469190400;Tests that counter node is removed from ZooKeeper after shutdown.;@Test_		public void testShutdownRemovesState() throws Exception {_			CheckpointIDCounter counter = createCompletedCheckpoints()__			counter.start()___			CuratorFramework client = ZooKeeper.getClient()__			assertNotNull(client.checkExists().forPath("/checkpoint-id-counter"))___			counter.shutdown()__			assertNull(client.checkExists().forPath("/checkpoint-id-counter"))__		};tests,that,counter,node,is,removed,from,zoo,keeper,after,shutdown;test,public,void,test,shutdown,removes,state,throws,exception,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,curator,framework,client,zoo,keeper,get,client,assert,not,null,client,check,exists,for,path,checkpoint,id,counter,counter,shutdown,assert,null,client,check,exists,for,path,checkpoint,id,counter
CheckpointIDCounterTest -> ZooKeeperCheckpointIDCounterITCase -> @Test 		public void testShutdownRemovesState() throws Exception;1474998400;Tests that counter node is removed from ZooKeeper after shutdown.;@Test_		public void testShutdownRemovesState() throws Exception {_			CheckpointIDCounter counter = createCompletedCheckpoints()__			counter.start()___			CuratorFramework client = ZooKeeper.getClient()__			assertNotNull(client.checkExists().forPath("/checkpoint-id-counter"))___			counter.shutdown()__			assertNull(client.checkExists().forPath("/checkpoint-id-counter"))__		};tests,that,counter,node,is,removed,from,zoo,keeper,after,shutdown;test,public,void,test,shutdown,removes,state,throws,exception,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,curator,framework,client,zoo,keeper,get,client,assert,not,null,client,check,exists,for,path,checkpoint,id,counter,counter,shutdown,assert,null,client,check,exists,for,path,checkpoint,id,counter
CheckpointIDCounterTest -> ZooKeeperCheckpointIDCounterITCase -> @Test 		public void testShutdownRemovesState() throws Exception;1476432306;Tests that counter node is removed from ZooKeeper after shutdown.;@Test_		public void testShutdownRemovesState() throws Exception {_			CheckpointIDCounter counter = createCompletedCheckpoints()__			counter.start()___			CuratorFramework client = ZooKeeper.getClient()__			assertNotNull(client.checkExists().forPath("/checkpoint-id-counter"))___			counter.shutdown(JobStatus.FINISHED)__			assertNull(client.checkExists().forPath("/checkpoint-id-counter"))__		};tests,that,counter,node,is,removed,from,zoo,keeper,after,shutdown;test,public,void,test,shutdown,removes,state,throws,exception,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,curator,framework,client,zoo,keeper,get,client,assert,not,null,client,check,exists,for,path,checkpoint,id,counter,counter,shutdown,job,status,finished,assert,null,client,check,exists,for,path,checkpoint,id,counter
CheckpointIDCounterTest -> ZooKeeperCheckpointIDCounterITCase -> @Test 		public void testSuspendKeepsState() throws Exception;1469190400;Tests that counter node is NOT removed from ZooKeeper after suspend.;@Test_		public void testSuspendKeepsState() throws Exception {_			CheckpointIDCounter counter = createCompletedCheckpoints()__			counter.start()___			CuratorFramework client = ZooKeeper.getClient()__			assertNotNull(client.checkExists().forPath("/checkpoint-id-counter"))___			counter.suspend()__			assertNotNull(client.checkExists().forPath("/checkpoint-id-counter"))__		};tests,that,counter,node,is,not,removed,from,zoo,keeper,after,suspend;test,public,void,test,suspend,keeps,state,throws,exception,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,curator,framework,client,zoo,keeper,get,client,assert,not,null,client,check,exists,for,path,checkpoint,id,counter,counter,suspend,assert,not,null,client,check,exists,for,path,checkpoint,id,counter
CheckpointIDCounterTest -> ZooKeeperCheckpointIDCounterITCase -> @Test 		public void testSuspendKeepsState() throws Exception;1474998400;Tests that counter node is NOT removed from ZooKeeper after suspend.;@Test_		public void testSuspendKeepsState() throws Exception {_			CheckpointIDCounter counter = createCompletedCheckpoints()__			counter.start()___			CuratorFramework client = ZooKeeper.getClient()__			assertNotNull(client.checkExists().forPath("/checkpoint-id-counter"))___			counter.suspend()__			assertNotNull(client.checkExists().forPath("/checkpoint-id-counter"))__		};tests,that,counter,node,is,not,removed,from,zoo,keeper,after,suspend;test,public,void,test,suspend,keeps,state,throws,exception,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,curator,framework,client,zoo,keeper,get,client,assert,not,null,client,check,exists,for,path,checkpoint,id,counter,counter,suspend,assert,not,null,client,check,exists,for,path,checkpoint,id,counter
CheckpointIDCounterTest -> ZooKeeperCheckpointIDCounterITCase -> @Test 		public void testSuspendKeepsState() throws Exception;1476432306;Tests that counter node is NOT removed from ZooKeeper after suspend.;@Test_		public void testSuspendKeepsState() throws Exception {_			CheckpointIDCounter counter = createCompletedCheckpoints()__			counter.start()___			CuratorFramework client = ZooKeeper.getClient()__			assertNotNull(client.checkExists().forPath("/checkpoint-id-counter"))___			counter.shutdown(JobStatus.SUSPENDED)__			assertNotNull(client.checkExists().forPath("/checkpoint-id-counter"))__		};tests,that,counter,node,is,not,removed,from,zoo,keeper,after,suspend;test,public,void,test,suspend,keeps,state,throws,exception,checkpoint,idcounter,counter,create,completed,checkpoints,counter,start,curator,framework,client,zoo,keeper,get,client,assert,not,null,client,check,exists,for,path,checkpoint,id,counter,counter,shutdown,job,status,suspended,assert,not,null,client,check,exists,for,path,checkpoint,id,counter
