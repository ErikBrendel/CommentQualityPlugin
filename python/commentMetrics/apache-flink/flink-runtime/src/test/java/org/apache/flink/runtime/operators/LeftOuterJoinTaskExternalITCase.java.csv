commented;modifiers;parameterAmount;loc;comment;code
false;protected;4;4;;@Override protected int calculateExpectedCount(int keyCnt1, int valCnt1, int keyCnt2, int valCnt2) {     return valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2) + (keyCnt1 > keyCnt2 ? (keyCnt1 - keyCnt2) * valCnt1 : 0). }
false;protected;0;4;;@Override protected AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> getOuterJoinDriver() {     return new LeftOuterJoinDriver<>(). }
false;protected;0;4;;@Override protected DriverStrategy getSortStrategy() {     return DriverStrategy.LEFT_OUTER_MERGE. }
false;public;0;26;;@Test public void testExternalHashLeftOuterJoinTask() throws Exception {     final int keyCnt1 = 65536.     final int valCnt1 = 8.     final int keyCnt2 = 32768.     final int valCnt2 = 8.     final int expCnt = calculateExpectedCount(keyCnt1, valCnt1, keyCnt2, valCnt2).     setOutput(this.output).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(DriverStrategy.LEFT_HYBRIDHASH_BUILD_SECOND).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInputSorted(new UniformIntTupleGenerator(keyCnt1, valCnt1, false), serializer, this.comparator1.duplicate()).     addInputSorted(new UniformIntTupleGenerator(keyCnt2, valCnt2, false), serializer, this.comparator2.duplicate()).     testDriver(testTask, MockJoinStub.class).     Assert.assertEquals("Wrong result set size.", expCnt, this.output.getNumberOfRecords()). }
