commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TypeSerializer<K> getKeySerializer() {     return null. }
false;public;0;4;;@Override public TypeSerializer<N> getNamespaceSerializer() {     return null. }
false;public;0;4;;@Override public TypeSerializer<T> getValueSerializer() {     return null. }
false;public;1;4;;@Override public void setCurrentNamespace(N namespace) {     currentNamespace = namespace. }
false;public;4;8;;@Override public byte[] getSerializedValue(byte[] serializedKeyAndNamespace, TypeSerializer safeKeySerializer, TypeSerializer safeNamespaceSerializer, TypeSerializer safeValueSerializer) {     return null. }
false;public;0;4;;@Override public void clear() {     getCurrentKeyValues().remove(currentNamespace). }
false;public;0;4;;@SuppressWarnings("unchecked") public T getInternal() {     return (T) getCurrentKeyValues().computeIfAbsent(currentNamespace, n -> emptyValue.get()). }
false;public;1;4;;@SuppressWarnings("WeakerAccess") public void updateInternal(T valueToStore) {     getCurrentKeyValues().put(currentNamespace, valueToStore). }
false;private;0;3;;private Map<Object, Object> getCurrentKeyValues() {     return values.get(). }
false;public;1;4;;@Override public StateIncrementalVisitor<K, N, T> getStateIncrementalVisitor(int recommendedMaxNumberOfReturnedRecords) {     throw new UnsupportedOperationException(). }
