commented;modifiers;parameterAmount;loc;comment;code
false;public;1;20;;@Override public void writeParametersToConfig(Configuration config) {     for (int i = 0. i < this.positions.length. i++) {         if (this.positions[i] < 0) {             throw new IllegalArgumentException("The key position " + i + " is invalid: " + this.positions[i]).         }         if (this.types[i] == null || !Value.class.isAssignableFrom(this.types[i])) {             throw new IllegalArgumentException("The key type " + i + " is null or not implenting the interface " + Value.class.getName() + ".").         }     }     // write the config     config.setInteger(NUM_KEYS, this.positions.length).     for (int i = 0. i < this.positions.length. i++) {         config.setInteger(KEY_POS_PREFIX + i, this.positions[i]).         config.setString(KEY_CLASS_PREFIX + i, this.types[i].getName()).         config.setBoolean(KEY_SORT_DIRECTION_PREFIX + i, this.sortDirections[i]).     } }
false;public;2;40;;@SuppressWarnings("unchecked") @Override public void readParametersFromConfig(Configuration config, ClassLoader cl) throws ClassNotFoundException {     // figure out how many key fields there are     final int numKeyFields = config.getInteger(NUM_KEYS, -1).     if (numKeyFields < 0) {         throw new IllegalConfigurationException("The number of keys for the comparator is invalid: " + numKeyFields).     }     final int[] positions = new int[numKeyFields].     final Class<? extends Value>[] types = new Class[numKeyFields].     final boolean[] direction = new boolean[numKeyFields].     // read the individual key positions and types     for (int i = 0. i < numKeyFields. i++) {         // next key position         final int p = config.getInteger(KEY_POS_PREFIX + i, -1).         if (p >= 0) {             positions[i] = p.         } else {             throw new IllegalConfigurationException("Contained invalid position for key no positions for keys.").         }         // next key type         final String name = config.getString(KEY_CLASS_PREFIX + i, null).         if (name != null) {             types[i] = (Class<? extends Value>) Class.forName(name, true, cl).asSubclass(Value.class).         } else {             throw new IllegalConfigurationException("The key type (" + i + ") for the comparator is null").         }         // next key sort direction         direction[i] = config.getBoolean(KEY_SORT_DIRECTION_PREFIX + i, true).     }     this.positions = positions.     this.types = types.     this.sortDirections = direction. }
false;public;0;4;;@Override public RecordComparator createComparator() {     return new RecordComparator(this.positions, this.types, this.sortDirections). }
