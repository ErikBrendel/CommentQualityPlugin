commented;modifiers;parameterAmount;loc;comment;code
true;public;0;15;/**  * Tests HA mode configuration.  */ ;/**  * Tests HA mode configuration.  */ @Test public void testFromConfig() throws Exception {     Configuration config = new Configuration().     // Check default     assertEquals(DEFAULT_HA_MODE, HighAvailabilityMode.fromConfig(config)).     // Check not equals default     config.setString(HighAvailabilityOptions.HA_MODE, HighAvailabilityMode.ZOOKEEPER.name().toLowerCase()).     assertEquals(HighAvailabilityMode.ZOOKEEPER, HighAvailabilityMode.fromConfig(config)).     // Check factory class     config.setString(HighAvailabilityOptions.HA_MODE, "factory.class.FQN").     assertEquals(HighAvailabilityMode.FACTORY_CLASS, HighAvailabilityMode.fromConfig(config)). }
true;public;0;18;/**  * Tests HA mode configuration with deprecated config values.  */ ;/**  * Tests HA mode configuration with deprecated config values.  */ @Test public void testDeprecatedFromConfig() throws Exception {     Configuration config = new Configuration().     // Check mapping of old default to new default     config.setString("recovery.mode", ConfigConstants.DEFAULT_RECOVERY_MODE).     assertEquals(DEFAULT_HA_MODE, HighAvailabilityMode.fromConfig(config)).     // Check deprecated config     config.setString("recovery.mode", HighAvailabilityMode.ZOOKEEPER.name().toLowerCase()).     assertEquals(HighAvailabilityMode.ZOOKEEPER, HighAvailabilityMode.fromConfig(config)).     // Check precedence over deprecated config     config.setString("high-availability", HighAvailabilityMode.NONE.name().toLowerCase()).     config.setString("recovery.mode", HighAvailabilityMode.ZOOKEEPER.name().toLowerCase()).     assertEquals(HighAvailabilityMode.NONE, HighAvailabilityMode.fromConfig(config)). }
false;public;0;19;;@Test public void testCheckHighAvailabilityModeActivated() throws Exception {     Configuration config = new Configuration().     // check defaults     assertTrue(!HighAvailabilityMode.isHighAvailabilityModeActivated(config)).     // check NONE     config.setString("high-availability", HighAvailabilityMode.NONE.name().toLowerCase()).     assertTrue(!HighAvailabilityMode.isHighAvailabilityModeActivated(config)).     // check ZOOKEEPER     config.setString("high-availability", HighAvailabilityMode.ZOOKEEPER.name().toLowerCase()).     assertTrue(HighAvailabilityMode.isHighAvailabilityModeActivated(config)).     // check FACTORY_CLASS     config.setString("high-availability", HighAvailabilityMode.FACTORY_CLASS.name().toLowerCase()).     assertTrue(HighAvailabilityMode.isHighAvailabilityModeActivated(config)). }
