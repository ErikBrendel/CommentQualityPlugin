commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void setup() {     actorSystem = AkkaUtils.createDefaultActorSystem().     rpcService = new AkkaRpcService(actorSystem, AkkaRpcServiceConfiguration.defaultConfiguration()). }
false;public,static;0;10;;@AfterClass public static void teardown() throws Exception {     final CompletableFuture<Void> rpcTerminationFuture = rpcService.stopService().     final CompletableFuture<Terminated> actorSystemTerminationFuture = FutureUtils.toJava(actorSystem.terminate()).     FutureUtils.waitForAll(Arrays.asList(rpcTerminationFuture, actorSystemTerminationFuture)).get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS). }
true;public;0;17;/**  * Tests that we can obtain the self gateway from a RpcEndpoint and can interact with  * it via the self gateway.  */ ;/**  * Tests that we can obtain the self gateway from a RpcEndpoint and can interact with  * it via the self gateway.  */ @Test public void testSelfGateway() throws Exception {     int expectedValue = 1337.     BaseEndpoint baseEndpoint = new BaseEndpoint(rpcService, expectedValue).     try {         baseEndpoint.start().         BaseGateway baseGateway = baseEndpoint.getSelfGateway(BaseGateway.class).         CompletableFuture<Integer> foobar = baseGateway.foobar().         assertEquals(Integer.valueOf(expectedValue), foobar.get()).     } finally {         RpcUtils.terminateRpcEndpoint(baseEndpoint, TIMEOUT).     } }
true;public;0;15;/**  * Tests that we cannot accidentally obtain a wrong self gateway type which is  * not implemented by the RpcEndpoint.  */ ;/**  * Tests that we cannot accidentally obtain a wrong self gateway type which is  * not implemented by the RpcEndpoint.  */ @Test(expected = RuntimeException.class) public void testWrongSelfGateway() throws Exception {     int expectedValue = 1337.     BaseEndpoint baseEndpoint = new BaseEndpoint(rpcService, expectedValue).     try {         baseEndpoint.start().         DifferentGateway differentGateway = baseEndpoint.getSelfGateway(DifferentGateway.class).         fail("Expected to fail with a RuntimeException since we requested the wrong gateway type.").     } finally {         RpcUtils.terminateRpcEndpoint(baseEndpoint, TIMEOUT).     } }
true;public;0;24;/**  * Tests that we can extend existing RpcEndpoints and can communicate with them via the  * self gateways.  */ ;/**  * Tests that we can extend existing RpcEndpoints and can communicate with them via the  * self gateways.  */ @Test public void testEndpointInheritance() throws Exception {     int foobar = 1.     int barfoo = 2.     String foo = "foobar".     ExtendedEndpoint endpoint = new ExtendedEndpoint(rpcService, foobar, barfoo, foo).     try {         endpoint.start().         BaseGateway baseGateway = endpoint.getSelfGateway(BaseGateway.class).         ExtendedGateway extendedGateway = endpoint.getSelfGateway(ExtendedGateway.class).         DifferentGateway differentGateway = endpoint.getSelfGateway(DifferentGateway.class).         assertEquals(Integer.valueOf(foobar), baseGateway.foobar().get()).         assertEquals(Integer.valueOf(foobar), extendedGateway.foobar().get()).         assertEquals(Integer.valueOf(barfoo), extendedGateway.barfoo().get()).         assertEquals(foo, differentGateway.foo().get()).     } finally {         RpcUtils.terminateRpcEndpoint(endpoint, TIMEOUT).     } }
false;;0;1;;CompletableFuture<Integer> foobar().
false;;0;1;;CompletableFuture<Integer> barfoo().
false;;0;1;;CompletableFuture<String> foo().
false;public;0;4;;@Override public CompletableFuture<Integer> foobar() {     return CompletableFuture.completedFuture(foobarValue). }
false;public;0;4;;@Override public CompletableFuture<Integer> barfoo() {     return CompletableFuture.completedFuture(barfooValue). }
false;public;0;4;;@Override public CompletableFuture<String> foo() {     return CompletableFuture.completedFuture(fooString). }
