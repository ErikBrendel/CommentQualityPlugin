commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Test public void testReduceTaskWithSortingInput() {     final int keyCnt = 100.     final int valCnt = 20.     addDriverComparator(this.comparator).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_REDUCE).     try {         addInputSorted(new UniformRecordGenerator(keyCnt, valCnt, false), this.comparator.duplicate()).         GroupReduceDriver<Record, Record> testTask = new GroupReduceDriver<>().         testDriver(testTask, MockReduceStub.class).     } catch (Exception e) {         LOG.info("Exception while running the test task.", e).         Assert.fail("Exception in Test: " + e.getMessage()).     }     Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was " + keyCnt, this.outList.size() == keyCnt).     for (Record record : this.outList) {         Assert.assertTrue("Incorrect result", record.getField(1, IntValue.class).getValue() == valCnt - record.getField(0, IntValue.class).getValue()).     }     this.outList.clear(). }
false;public;0;27;;@Test public void testReduceTaskOnPreSortedInput() {     final int keyCnt = 100.     final int valCnt = 20.     addInput(new UniformRecordGenerator(keyCnt, valCnt, true)).     addDriverComparator(this.comparator).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_REDUCE).     GroupReduceDriver<Record, Record> testTask = new GroupReduceDriver<>().     try {         testDriver(testTask, MockReduceStub.class).     } catch (Exception e) {         LOG.info("Exception while running the test task.", e).         Assert.fail("Invoke method caused exception: " + e.getMessage()).     }     Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was " + keyCnt, this.outList.size() == keyCnt).     for (Record record : this.outList) {         Assert.assertTrue("Incorrect result", record.getField(1, IntValue.class).getValue() == valCnt - record.getField(0, IntValue.class).getValue()).     }     this.outList.clear(). }
false;public;0;43;;@Test public void testCombiningReduceTask() {     final int keyCnt = 100.     final int valCnt = 20.     addDriverComparator(this.comparator).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_REDUCE).     CombiningUnilateralSortMerger<Record> sorter = null.     try {         sorter = new CombiningUnilateralSortMerger<>(new MockCombiningReduceStub(), getMemoryManager(), getIOManager(), new UniformRecordGenerator(keyCnt, valCnt, false), getContainingTask(), RecordSerializerFactory.get(), this.comparator.duplicate(), this.perSortFractionMem, 4, 0.8f, true, /* use large record handler */         true).         addInput(sorter.getIterator()).         GroupReduceDriver<Record, Record> testTask = new GroupReduceDriver<>().         testDriver(testTask, MockCombiningReduceStub.class).     } catch (Exception e) {         LOG.info("Exception while running the test task.", e).         Assert.fail("Invoke method caused exception: " + e.getMessage()).     } finally {         if (sorter != null) {             sorter.close().         }     }     int expSum = 0.     for (int i = 1. i < valCnt. i++) {         expSum += i.     }     Assert.assertTrue("Resultset size was " + this.outList.size() + ". Expected was " + keyCnt, this.outList.size() == keyCnt).     for (Record record : this.outList) {         Assert.assertTrue("Incorrect result", record.getField(1, IntValue.class).getValue() == expSum - record.getField(0, IntValue.class).getValue()).     }     this.outList.clear(). }
false;public;0;24;;@Test public void testFailingReduceTask() {     final int keyCnt = 100.     final int valCnt = 20.     addInput(new UniformRecordGenerator(keyCnt, valCnt, true)).     addDriverComparator(this.comparator).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_REDUCE).     GroupReduceDriver<Record, Record> testTask = new GroupReduceDriver<>().     try {         testDriver(testTask, MockFailingReduceStub.class).         Assert.fail("Function exception was not forwarded.").     } catch (ExpectedTestException eetex) {     // Good!     } catch (Exception e) {         LOG.info("Exception which was not the ExpectedTestException while running the test task.", e).         Assert.fail("Test caused exception: " + e.getMessage()).     }     this.outList.clear(). }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockReduceStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;43;;@Test public void testCancelReduceTaskWhileSorting() {     addDriverComparator(this.comparator).     setOutput(new NirvanaOutputList()).     getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_REDUCE).     final GroupReduceDriver<Record, Record> testTask = new GroupReduceDriver<>().     try {         addInputSorted(new DelayingInfinitiveInputIterator(100), this.comparator.duplicate()).     } catch (Exception e) {         e.printStackTrace().         Assert.fail().     }     final AtomicBoolean success = new AtomicBoolean(false).     Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockReduceStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(1, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     }     Assert.assertTrue("Test threw an exception even though it was properly canceled.", success.get()). }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockDelayingReduceStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;39;;@Test public void testCancelReduceTaskWhileReducing() {     final int keyCnt = 1000.     final int valCnt = 2.     addInput(new UniformRecordGenerator(keyCnt, valCnt, true)).     addDriverComparator(this.comparator).     setOutput(new NirvanaOutputList()).     getTaskConfig().setDriverStrategy(DriverStrategy.SORTED_GROUP_REDUCE).     final GroupReduceDriver<Record, Record> testTask = new GroupReduceDriver<>().     final AtomicBoolean success = new AtomicBoolean(false).     Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockDelayingReduceStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(2, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     } }
false;public;2;14;;@Override public void reduce(Iterable<Record> records, Collector<Record> out) {     Record element = null.     int cnt = 0.     for (Record next : records) {         element = next.         cnt++.     }     element.getField(0, this.key).     this.value.setValue(cnt - this.key.getValue()).     element.setField(1, this.value).     out.collect(element). }
false;public;2;16;;@Override public void reduce(Iterable<Record> records, Collector<Record> out) {     Record element = null.     int sum = 0.     for (Record next : records) {         element = next.         element.getField(1, this.value).         sum += this.value.getValue().     }     element.getField(0, this.key).     this.value.setValue(sum - this.key.getValue()).     element.setField(1, this.value).     out.collect(element). }
false;public;2;16;;@Override public void combine(Iterable<Record> records, Collector<Record> out) {     Record element = null.     int sum = 0.     for (Record next : records) {         element = next.         element.getField(1, this.combineValue).         sum += this.combineValue.getValue().     }     this.combineValue.setValue(sum).     element.setField(1, this.combineValue).     out.collect(element). }
false;public;2;19;;@Override public void reduce(Iterable<Record> records, Collector<Record> out) {     Record element = null.     int valCnt = 0.     for (Record next : records) {         element = next.         valCnt++.     }     if (++this.cnt >= 10) {         throw new ExpectedTestException().     }     element.getField(0, this.key).     this.value.setValue(valCnt - this.key.getValue()).     element.setField(1, this.value).     out.collect(element). }
false;public;2;8;;@Override public void reduce(Iterable<Record> records, Collector<Record> out) {     for (@SuppressWarnings("unused") Record r : records) {         try {             Thread.sleep(100).         } catch (InterruptedException e) {         }     } }
