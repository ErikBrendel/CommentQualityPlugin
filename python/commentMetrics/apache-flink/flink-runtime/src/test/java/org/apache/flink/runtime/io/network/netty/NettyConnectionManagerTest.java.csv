commented;modifiers;parameterAmount;loc;comment;code
true;public;0;56;/**  * Tests that the number of arenas and number of threads of the client and  * server are set to the same number, that is the number of configured  * task slots.  */ ;/**  * Tests that the number of arenas and number of threads of the client and  * server are set to the same number, that is the number of configured  * task slots.  */ @Test public void testMatchingNumberOfArenasAndThreadsAsDefault() throws Exception {     // Expected number of arenas and threads     int numberOfSlots = 2.     NettyConfig config = new NettyConfig(InetAddress.getLocalHost(), NetUtils.getAvailablePort(), 1024, numberOfSlots, new Configuration()).     NettyConnectionManager connectionManager = new NettyConnectionManager(config).     connectionManager.start(mock(ResultPartitionProvider.class), mock(TaskEventDispatcher.class)).     assertEquals(numberOfSlots, connectionManager.getBufferPool().getNumberOfArenas()).     {         // Client event loop group         Bootstrap boostrap = connectionManager.getClient().getBootstrap().         EventLoopGroup group = boostrap.group().         Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children").         f.setAccessible(true).         Object[] eventExecutors = (Object[]) f.get(group).         assertEquals(numberOfSlots, eventExecutors.length).     }     {         // Server event loop group         ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap().         EventLoopGroup group = bootstrap.group().         Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children").         f.setAccessible(true).         Object[] eventExecutors = (Object[]) f.get(group).         assertEquals(numberOfSlots, eventExecutors.length).     }     {         // Server child event loop group         ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap().         EventLoopGroup group = bootstrap.childGroup().         Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children").         f.setAccessible(true).         Object[] eventExecutors = (Object[]) f.get(group).         assertEquals(numberOfSlots, eventExecutors.length).     } }
true;public;0;64;/**  * Tests that the number of arenas and threads can be configured manually.  */ ;/**  * Tests that the number of arenas and threads can be configured manually.  */ @Test public void testManualConfiguration() throws Exception {     // Expected numbers     int numberOfArenas = 1.     int numberOfClientThreads = 3.     int numberOfServerThreads = 4.     // Expected number of threads     Configuration flinkConfig = new Configuration().     flinkConfig.setInteger(NettyConfig.NUM_ARENAS, numberOfArenas).     flinkConfig.setInteger(NettyConfig.NUM_THREADS_CLIENT, 3).     flinkConfig.setInteger(NettyConfig.NUM_THREADS_SERVER, 4).     NettyConfig config = new NettyConfig(InetAddress.getLocalHost(), NetUtils.getAvailablePort(), 1024, 1337, flinkConfig).     NettyConnectionManager connectionManager = new NettyConnectionManager(config).     connectionManager.start(mock(ResultPartitionProvider.class), mock(TaskEventDispatcher.class)).     assertEquals(numberOfArenas, connectionManager.getBufferPool().getNumberOfArenas()).     {         // Client event loop group         Bootstrap boostrap = connectionManager.getClient().getBootstrap().         EventLoopGroup group = boostrap.group().         Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children").         f.setAccessible(true).         Object[] eventExecutors = (Object[]) f.get(group).         assertEquals(numberOfClientThreads, eventExecutors.length).     }     {         // Server event loop group         ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap().         EventLoopGroup group = bootstrap.group().         Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children").         f.setAccessible(true).         Object[] eventExecutors = (Object[]) f.get(group).         assertEquals(numberOfServerThreads, eventExecutors.length).     }     {         // Server child event loop group         ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap().         EventLoopGroup group = bootstrap.childGroup().         Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children").         f.setAccessible(true).         Object[] eventExecutors = (Object[]) f.get(group).         assertEquals(numberOfServerThreads, eventExecutors.length).     } }
