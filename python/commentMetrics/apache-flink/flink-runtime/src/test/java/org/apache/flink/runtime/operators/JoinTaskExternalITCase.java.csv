commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;@Test public void testExternalSort1MatchTask() {     final int keyCnt1 = 16384 * 4.     final int valCnt1 = 2.     final int keyCnt2 = 8192.     final int valCnt2 = 4 * 2.     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     setOutput(this.output).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     getTaskConfig().setDriverStrategy(DriverStrategy.INNER_MERGE).     getTaskConfig().setRelativeMemoryDriver(bnljn_frac).     setNumFileHandlesForSort(4).     final JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         addInputSorted(new UniformRecordGenerator(keyCnt1, valCnt1, false), this.comparator1.duplicate()).         addInputSorted(new UniformRecordGenerator(keyCnt2, valCnt2, false), this.comparator2.duplicate()).         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("The test caused an exception.").     }     Assert.assertEquals("Wrong result set size.", expCnt, this.output.getNumberOfRecords()). }
false;public;0;30;;@Test public void testExternalHash1MatchTask() {     final int keyCnt1 = 32768.     final int valCnt1 = 8.     final int keyCnt2 = 65536.     final int valCnt2 = 8.     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(this.output).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     }     Assert.assertEquals("Wrong result set size.", expCnt, this.output.getNumberOfRecords()). }
false;public;0;30;;@Test public void testExternalHash2MatchTask() {     final int keyCnt1 = 32768.     final int valCnt1 = 8.     final int keyCnt2 = 65536.     final int valCnt2 = 8.     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(this.output).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND).     getTaskConfig().setRelativeMemoryDriver(hash_frac).     JoinDriver<Record, Record, Record> testTask = new JoinDriver<>().     try {         testDriver(testTask, MockMatchStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     }     Assert.assertEquals("Wrong result set size.", expCnt, this.output.getNumberOfRecords()). }
false;public;3;4;;@Override public void join(Record value1, Record value2, Collector<Record> out) throws Exception {     out.collect(value1). }
