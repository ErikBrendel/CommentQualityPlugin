commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void mediation() throws Exception {     Random random = new Random().     for (int n = 0. n < 20. n++) {         mediate(random.nextInt(10) + 1).     } }
false;;1;30;;void mediate(int subtasks) throws InterruptedException, ExecutionException {     final ExecutorService executorService = Executors.newFixedThreadPool(subtasks * 2).     try {         List<Callable<StringPair>> tasks = new ArrayList<>().         Broker<String> broker = new Broker<String>().         for (int subtask = 0. subtask < subtasks. subtask++) {             tasks.add(new IterationHead(broker, subtask, "value" + subtask)).             tasks.add(new IterationTail(broker, subtask)).         }         Collections.shuffle(tasks).         int numSuccessfulHandovers = 0.         for (Future<StringPair> future : executorService.invokeAll(tasks)) {             StringPair stringPair = future.get().             if (stringPair != null) {                 assertEquals("value" + stringPair.getFirst(), stringPair.getSecond()).                 numSuccessfulHandovers++.             }         }         assertEquals(subtasks, numSuccessfulHandovers).     } finally {         executorService.shutdownNow().     } }
false;public;0;8;;@Override public StringPair call() throws Exception {     Thread.sleep(random.nextInt(10)).     // System.out.println("Head " + key + " hands in " + value).     broker.handIn(key, value).     Thread.sleep(random.nextInt(10)).     return null. }
false;public;0;12;;@Override public StringPair call() throws Exception {     Thread.sleep(random.nextInt(10)).     // System.out.println("Tail " + key + " asks for handover").     String value = broker.getAndRemove(key).     // System.out.println("Tail " + key + " received " + value).     Preconditions.checkNotNull(value).     return new StringPair(key, value). }
