commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CompletableFuture<DispatcherGateway> getFuture() {     return CompletableFuture.completedFuture(mockDispatcherGateway). }
false;public;0;18;;@Before public void setUp() {     MockitoAnnotations.initMocks(this).     this.leaderRetriever = new GatewayRetriever<DispatcherGateway>() {          @Override         public CompletableFuture<DispatcherGateway> getFuture() {             return CompletableFuture.completedFuture(mockDispatcherGateway).         }     }.     this.pathParameters = getPathParameters().     this.metricsHandler = getMetricsHandler().     final MetricStore metricStore = new MetricStore().     metricStore.add(new MetricDump.CounterDump(getQueryScopeInfo(), TEST_METRIC_NAME, TEST_METRIC_VALUE)).     when(mockMetricFetcher.getMetricStore()).thenReturn(metricStore). }
true;public;0;19;/**  * Tests that the metric with name defined under {@link #TEST_METRIC_NAME} can be retrieved  * from the {@link MetricStore.ComponentMetricStore} returned from  * {@link AbstractMetricsHandler#getComponentMetricStore(HandlerRequest, MetricStore)}.  */ ;/**  * Tests that the metric with name defined under {@link #TEST_METRIC_NAME} can be retrieved  * from the {@link MetricStore.ComponentMetricStore} returned from  * {@link AbstractMetricsHandler#getComponentMetricStore(HandlerRequest, MetricStore)}.  */ @Test public void testGetMetric() throws Exception {     @SuppressWarnings("unchecked")     final CompletableFuture<MetricCollectionResponseBody> completableFuture = metricsHandler.handleRequest(new HandlerRequest<>(EmptyRequestBody.getInstance(), metricsHandler.getMessageHeaders().getUnresolvedMessageParameters(), pathParameters, Collections.emptyMap()), mockDispatcherGateway).     assertTrue(completableFuture.isDone()).     final MetricCollectionResponseBody metricCollectionResponseBody = completableFuture.get().     assertThat(metricCollectionResponseBody.getMetrics(), hasSize(1)).     final Metric metric = metricCollectionResponseBody.getMetrics().iterator().next().     assertThat(metric.getId(), equalTo(getExpectedIdForMetricName(TEST_METRIC_NAME))). }
true;abstract;0;1;/**  * Returns instance under test.  */ ;/**  * Returns instance under test.  */ abstract T getMetricsHandler().
false;abstract;0;1;;abstract QueryScopeInfo getQueryScopeInfo().
false;abstract;0;1;;abstract Map<String, String> getPathParameters().
true;;1;3;/**  * Returns the expected metric id for a given metric name. By default the metric name without  * any modifications is returned.  *  * @param metricName The metric name.  * @return The id of the metric name possibly with additional information, e.g., subtask index  * as a prefix.  */ ;/**  * Returns the expected metric id for a given metric name. By default the metric name without  * any modifications is returned.  *  * @param metricName The metric name.  * @return The id of the metric name possibly with additional information, e.g., subtask index  * as a prefix.  */ String getExpectedIdForMetricName(final String metricName) {     return metricName. }
