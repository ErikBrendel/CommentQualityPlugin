commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setUp() throws Exception {     final MemorySegment segment = MemorySegmentFactory.allocateUnpooledSegment(BUFFER_SIZE).     buffer = new NetworkBuffer(segment, FreeingBufferRecycler.INSTANCE, true, 0).     for (int i = 0. i < DATA_SIZE. ++i) {         buffer.writeByte(i).     } }
false;public;0;8;;@Test public void testForwardsIsBuffer() throws IOException {     assertEquals(buffer.isBuffer(), buffer.readOnlySlice().isBuffer()).     assertEquals(buffer.isBuffer(), buffer.readOnlySlice(1, 2).isBuffer()).     Buffer eventBuffer = EventSerializer.toBuffer(EndOfPartitionEvent.INSTANCE).     assertEquals(eventBuffer.isBuffer(), eventBuffer.readOnlySlice().isBuffer()).     assertEquals(eventBuffer.isBuffer(), eventBuffer.readOnlySlice(1, 2).isBuffer()). }
false;public;0;4;;@Test(expected = ReadOnlyBufferException.class) public void testTagAsEventThrows1() {     buffer.readOnlySlice().tagAsEvent(). }
false;public;0;4;;@Test(expected = ReadOnlyBufferException.class) public void testTagAsEventThrows2() {     buffer.readOnlySlice(1, 2).tagAsEvent(). }
false;public;0;5;;@Test public void testForwardsGetMemorySegment() {     assertSame(buffer.getMemorySegment(), buffer.readOnlySlice().getMemorySegment()).     assertSame(buffer.getMemorySegment(), buffer.readOnlySlice(1, 2).getMemorySegment()). }
false;public;0;5;;@Test public void testForwardsGetRecycler() {     assertSame(buffer.getRecycler(), buffer.readOnlySlice().getRecycler()).     assertSame(buffer.getRecycler(), buffer.readOnlySlice(1, 2).getRecycler()). }
true;public;0;8;/**  * Tests forwarding of both {@link ReadOnlySlicedNetworkBuffer#recycleBuffer()} and  * {@link ReadOnlySlicedNetworkBuffer#isRecycled()}.  */ ;/**  * Tests forwarding of both {@link ReadOnlySlicedNetworkBuffer#recycleBuffer()} and  * {@link ReadOnlySlicedNetworkBuffer#isRecycled()}.  */ @Test public void testForwardsRecycleBuffer1() {     ReadOnlySlicedNetworkBuffer slice = buffer.readOnlySlice().     assertFalse(slice.isRecycled()).     slice.recycleBuffer().     assertTrue(slice.isRecycled()).     assertTrue(buffer.isRecycled()). }
true;public;0;8;/**  * Tests forwarding of both {@link ReadOnlySlicedNetworkBuffer#recycleBuffer()} and  * {@link ReadOnlySlicedNetworkBuffer#isRecycled()}.  */ ;/**  * Tests forwarding of both {@link ReadOnlySlicedNetworkBuffer#recycleBuffer()} and  * {@link ReadOnlySlicedNetworkBuffer#isRecycled()}.  */ @Test public void testForwardsRecycleBuffer2() {     ReadOnlySlicedNetworkBuffer slice = buffer.readOnlySlice(1, 2).     assertFalse(slice.isRecycled()).     slice.recycleBuffer().     assertTrue(slice.isRecycled()).     assertTrue(buffer.isRecycled()). }
true;public;0;7;/**  * Tests forwarding of both {@link ReadOnlySlicedNetworkBuffer#recycleBuffer()} and  * {@link ReadOnlySlicedNetworkBuffer#isRecycled()}.  */ ;/**  * Tests forwarding of both {@link ReadOnlySlicedNetworkBuffer#recycleBuffer()} and  * {@link ReadOnlySlicedNetworkBuffer#isRecycled()}.  */ @Test public void testForwardsRetainBuffer1() {     ReadOnlySlicedNetworkBuffer slice = buffer.readOnlySlice().     assertEquals(buffer.refCnt(), slice.refCnt()).     slice.retainBuffer().     assertEquals(buffer.refCnt(), slice.refCnt()). }
true;public;0;7;/**  * Tests forwarding of both {@link ReadOnlySlicedNetworkBuffer#retainBuffer()} and  * {@link ReadOnlySlicedNetworkBuffer#isRecycled()}.  */ ;/**  * Tests forwarding of both {@link ReadOnlySlicedNetworkBuffer#retainBuffer()} and  * {@link ReadOnlySlicedNetworkBuffer#isRecycled()}.  */ @Test public void testForwardsRetainBuffer2() {     ReadOnlySlicedNetworkBuffer slice = buffer.readOnlySlice(1, 2).     assertEquals(buffer.refCnt(), slice.refCnt()).     slice.retainBuffer().     assertEquals(buffer.refCnt(), slice.refCnt()). }
false;public;0;14;;@Test public void testCreateSlice1() {     // so that we do not start at position 0     buffer.readByte().     ReadOnlySlicedNetworkBuffer slice1 = buffer.readOnlySlice().     // should not influence the second slice at all     buffer.readByte().     ReadOnlySlicedNetworkBuffer slice2 = slice1.readOnlySlice().     assertSame(buffer, slice2.unwrap().unwrap()).     assertSame(slice1.getMemorySegment(), slice2.getMemorySegment()).     assertEquals(1, slice1.getMemorySegmentOffset()).     assertEquals(slice1.getMemorySegmentOffset(), slice2.getMemorySegmentOffset()).     assertReadableBytes(slice1, 1, 2, 3, 4, 5, 6, 7, 8, 9).     assertReadableBytes(slice2, 1, 2, 3, 4, 5, 6, 7, 8, 9). }
false;public;0;14;;@Test public void testCreateSlice2() {     // so that we do not start at position 0     buffer.readByte().     ReadOnlySlicedNetworkBuffer slice1 = buffer.readOnlySlice().     // should not influence the second slice at all     buffer.readByte().     ReadOnlySlicedNetworkBuffer slice2 = slice1.readOnlySlice(1, 2).     assertSame(buffer, slice2.unwrap().unwrap()).     assertSame(slice1.getMemorySegment(), slice2.getMemorySegment()).     assertEquals(1, slice1.getMemorySegmentOffset()).     assertEquals(2, slice2.getMemorySegmentOffset()).     assertReadableBytes(slice1, 1, 2, 3, 4, 5, 6, 7, 8, 9).     assertReadableBytes(slice2, 2, 3). }
false;public;0;13;;@Test public void testCreateSlice3() {     ReadOnlySlicedNetworkBuffer slice1 = buffer.readOnlySlice(1, 2).     // should not influence the second slice at all     buffer.readByte().     ReadOnlySlicedNetworkBuffer slice2 = slice1.readOnlySlice().     assertSame(buffer, slice2.unwrap().unwrap()).     assertSame(slice1.getMemorySegment(), slice2.getMemorySegment()).     assertEquals(1, slice1.getMemorySegmentOffset()).     assertEquals(1, slice2.getMemorySegmentOffset()).     assertReadableBytes(slice1, 1, 2).     assertReadableBytes(slice2, 1, 2). }
false;public;0;13;;@Test public void testCreateSlice4() {     ReadOnlySlicedNetworkBuffer slice1 = buffer.readOnlySlice(1, 5).     // should not influence the second slice at all     buffer.readByte().     ReadOnlySlicedNetworkBuffer slice2 = slice1.readOnlySlice(1, 2).     assertSame(buffer, slice2.unwrap().unwrap()).     assertSame(slice1.getMemorySegment(), slice2.getMemorySegment()).     assertEquals(1, slice1.getMemorySegmentOffset()).     assertEquals(2, slice2.getMemorySegmentOffset()).     assertReadableBytes(slice1, 1, 2, 3, 4, 5).     assertReadableBytes(slice2, 2, 3). }
false;public;0;5;;@Test public void testGetMaxCapacity() {     assertEquals(DATA_SIZE, buffer.readOnlySlice().getMaxCapacity()).     assertEquals(2, buffer.readOnlySlice(1, 2).getMaxCapacity()). }
true;public;0;4;/**  * Tests the independence of the reader index via  * {@link ReadOnlySlicedNetworkBuffer#setReaderIndex(int)} and  * {@link ReadOnlySlicedNetworkBuffer#getReaderIndex()}.  */ ;/**  * Tests the independence of the reader index via  * {@link ReadOnlySlicedNetworkBuffer#setReaderIndex(int)} and  * {@link ReadOnlySlicedNetworkBuffer#getReaderIndex()}.  */ @Test public void testGetSetReaderIndex1() {     testGetSetReaderIndex(buffer.readOnlySlice()). }
true;public;0;4;/**  * Tests the independence of the reader index via  * {@link ReadOnlySlicedNetworkBuffer#setReaderIndex(int)} and  * {@link ReadOnlySlicedNetworkBuffer#getReaderIndex()}.  */ ;/**  * Tests the independence of the reader index via  * {@link ReadOnlySlicedNetworkBuffer#setReaderIndex(int)} and  * {@link ReadOnlySlicedNetworkBuffer#getReaderIndex()}.  */ @Test public void testGetSetReaderIndex2() {     testGetSetReaderIndex(buffer.readOnlySlice(1, 2)). }
false;private;1;7;;private void testGetSetReaderIndex(ReadOnlySlicedNetworkBuffer slice) {     assertEquals(0, buffer.getReaderIndex()).     assertEquals(0, slice.getReaderIndex()).     slice.setReaderIndex(1).     assertEquals(0, buffer.getReaderIndex()).     assertEquals(1, slice.getReaderIndex()). }
true;public;0;4;/**  * Tests the independence of the writer index via  * {@link ReadOnlySlicedNetworkBuffer#setSize(int)},  * {@link ReadOnlySlicedNetworkBuffer#getSize()}, and  * {@link ReadOnlySlicedNetworkBuffer#getSizeUnsafe()}.  */ ;/**  * Tests the independence of the writer index via  * {@link ReadOnlySlicedNetworkBuffer#setSize(int)},  * {@link ReadOnlySlicedNetworkBuffer#getSize()}, and  * {@link ReadOnlySlicedNetworkBuffer#getSizeUnsafe()}.  */ @Test public void testGetSetSize1() {     testGetSetSize(buffer.readOnlySlice(), DATA_SIZE). }
true;public;0;4;/**  * Tests the independence of the writer index via  * {@link ReadOnlySlicedNetworkBuffer#setSize(int)},  * {@link ReadOnlySlicedNetworkBuffer#getSize()}, and  * {@link ReadOnlySlicedNetworkBuffer#getSizeUnsafe()}.  */ ;/**  * Tests the independence of the writer index via  * {@link ReadOnlySlicedNetworkBuffer#setSize(int)},  * {@link ReadOnlySlicedNetworkBuffer#getSize()}, and  * {@link ReadOnlySlicedNetworkBuffer#getSizeUnsafe()}.  */ @Test public void testGetSetSize2() {     testGetSetSize(buffer.readOnlySlice(1, 2), 2). }
false;private;2;11;;private void testGetSetSize(ReadOnlySlicedNetworkBuffer slice, int sliceSize) {     assertEquals(DATA_SIZE, buffer.getSize()).     assertEquals(DATA_SIZE, buffer.getSizeUnsafe()).     assertEquals(sliceSize, slice.getSize()).     assertEquals(sliceSize, slice.getSizeUnsafe()).     buffer.setSize(DATA_SIZE + 1).     assertEquals(DATA_SIZE + 1, buffer.getSize()).     assertEquals(DATA_SIZE + 1, buffer.getSizeUnsafe()).     assertEquals(sliceSize, slice.getSize()).     assertEquals(sliceSize, slice.getSizeUnsafe()). }
false;public;0;5;;@Test public void testReadableBytes() {     assertEquals(buffer.readableBytes(), buffer.readOnlySlice().readableBytes()).     assertEquals(2, buffer.readOnlySlice(1, 2).readableBytes()). }
false;public;0;4;;@Test public void testGetNioBufferReadable1() {     testGetNioBufferReadable(buffer.readOnlySlice(), DATA_SIZE). }
false;public;0;4;;@Test public void testGetNioBufferReadable2() {     testGetNioBufferReadable(buffer.readOnlySlice(1, 2), 2). }
false;private;2;14;;private void testGetNioBufferReadable(ReadOnlySlicedNetworkBuffer slice, int sliceSize) {     ByteBuffer sliceByteBuffer = slice.getNioBufferReadable().     assertTrue(sliceByteBuffer.isReadOnly()).     assertEquals(sliceSize, sliceByteBuffer.remaining()).     assertEquals(sliceSize, sliceByteBuffer.limit()).     assertEquals(sliceSize, sliceByteBuffer.capacity()).     // modify sliceByteBuffer position and verify nothing has changed in the original buffer     sliceByteBuffer.position(1).     assertEquals(0, buffer.getReaderIndex()).     assertEquals(0, slice.getReaderIndex()).     assertEquals(DATA_SIZE, buffer.getSize()).     assertEquals(sliceSize, slice.getSize()). }
false;public;0;4;;@Test public void testGetNioBuffer1() {     testGetNioBuffer(buffer.readOnlySlice(), DATA_SIZE). }
false;public;0;4;;@Test public void testGetNioBuffer2() {     testGetNioBuffer(buffer.readOnlySlice(1, 2), 2). }
false;private;2;14;;private void testGetNioBuffer(ReadOnlySlicedNetworkBuffer slice, int sliceSize) {     ByteBuffer sliceByteBuffer = slice.getNioBuffer(1, 1).     assertTrue(sliceByteBuffer.isReadOnly()).     assertEquals(1, sliceByteBuffer.remaining()).     assertEquals(1, sliceByteBuffer.limit()).     assertEquals(1, sliceByteBuffer.capacity()).     // modify sliceByteBuffer position and verify nothing has changed in the original buffer     sliceByteBuffer.position(1).     assertEquals(0, buffer.getReaderIndex()).     assertEquals(0, slice.getReaderIndex()).     assertEquals(DATA_SIZE, buffer.getSize()).     assertEquals(sliceSize, slice.getSize()). }
false;public;0;4;;@Test public void testGetNioBufferReadableThreadSafe1() {     NetworkBufferTest.testGetNioBufferReadableThreadSafe(buffer.readOnlySlice()). }
false;public;0;4;;@Test public void testGetNioBufferReadableThreadSafe2() {     NetworkBufferTest.testGetNioBufferReadableThreadSafe(buffer.readOnlySlice(1, 2)). }
false;public;0;4;;@Test public void testGetNioBufferThreadSafe1() {     NetworkBufferTest.testGetNioBufferThreadSafe(buffer.readOnlySlice(), DATA_SIZE). }
false;public;0;4;;@Test public void testGetNioBufferThreadSafe2() {     NetworkBufferTest.testGetNioBufferThreadSafe(buffer.readOnlySlice(1, 2), 2). }
false;public;0;5;;@Test public void testForwardsSetAllocator() {     testForwardsSetAllocator(buffer.readOnlySlice()).     testForwardsSetAllocator(buffer.readOnlySlice(1, 2)). }
false;private;1;6;;private void testForwardsSetAllocator(ReadOnlySlicedNetworkBuffer slice) {     NettyBufferPool allocator = new NettyBufferPool(1).     slice.setAllocator(allocator).     assertSame(buffer.alloc(), slice.alloc()).     assertSame(allocator, slice.alloc()). }
false;private,static;2;21;;private static void assertReadableBytes(Buffer actualBuffer, int... expectedBytes) {     ByteBuffer actualBytesBuffer = actualBuffer.getNioBufferReadable().     int[] actual = new int[actualBytesBuffer.limit()].     for (int i = 0. i < actual.length. ++i) {         actual[i] = actualBytesBuffer.get().     }     assertArrayEquals(expectedBytes, actual).     // verify absolutely positioned read method:     ByteBuf buffer = (ByteBuf) actualBuffer.     for (int i = 0. i < buffer.readableBytes(). ++i) {         actual[i] = buffer.getByte(buffer.readerIndex() + i).     }     assertArrayEquals(expectedBytes, actual).     // verify relatively positioned read method:     for (int i = 0. i < buffer.readableBytes(). ++i) {         actual[i] = buffer.readByte().     }     assertArrayEquals(expectedBytes, actual). }
