# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphCaching() throws Exception;1506967078;Tests that we can cache AccessExecutionGraphs over multiple accesses.;@Test_	public void testExecutionGraphCaching() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID jobId = new JobID()__		final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn(CompletableFuture.completedFuture(accessExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, accessExecutionGraphFuture.get())___			CompletableFuture<AccessExecutionGraph> accessExecutionGraphFuture2 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, accessExecutionGraphFuture2.get())___			_			verify(jobManagerGateway, times(1)).requestJob(eq(jobId), any(Time.class))__		}_	};tests,that,we,can,cache,access,execution,graphs,over,multiple,accesses;test,public,void,test,execution,graph,caching,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,job,id,new,job,id,final,access,execution,graph,access,execution,graph,mock,access,execution,graph,class,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id,any,time,class,then,return,completable,future,completed,future,access,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,access,execution,graph,future,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,access,execution,graph,future,get,completable,future,access,execution,graph,access,execution,graph,future2,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,access,execution,graph,future2,get,verify,job,manager,gateway,times,1,request,job,eq,job,id,any,time,class
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphCaching() throws Exception;1512567202;Tests that we can cache AccessExecutionGraphs over multiple accesses.;@Test_	public void testExecutionGraphCaching() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID jobId = new JobID()__		final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn(CompletableFuture.completedFuture(accessExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, accessExecutionGraphFuture.get())___			CompletableFuture<AccessExecutionGraph> accessExecutionGraphFuture2 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, accessExecutionGraphFuture2.get())___			_			verify(jobManagerGateway, times(1)).requestJob(eq(jobId), any(Time.class))__		}_	};tests,that,we,can,cache,access,execution,graphs,over,multiple,accesses;test,public,void,test,execution,graph,caching,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,job,id,new,job,id,final,access,execution,graph,access,execution,graph,mock,access,execution,graph,class,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id,any,time,class,then,return,completable,future,completed,future,access,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,access,execution,graph,future,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,access,execution,graph,future,get,completable,future,access,execution,graph,access,execution,graph,future2,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,access,execution,graph,future2,get,verify,job,manager,gateway,times,1,request,job,eq,job,id,any,time,class
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphCaching() throws Exception;1516970998;Tests that we can cache AccessExecutionGraphs over multiple accesses.;@Test_	public void testExecutionGraphCaching() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(expectedJobId, CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, accessExecutionGraphFuture.get())___			accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, accessExecutionGraphFuture.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(1))__		}_	};tests,that,we,can,cache,access,execution,graphs,over,multiple,accesses;test,public,void,test,execution,graph,caching,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,access,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,access,execution,graph,future,get,access,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,access,execution,graph,future,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,1
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphCaching() throws Exception;1519317157;Tests that we can cache AccessExecutionGraphs over multiple accesses.;@Test_	public void testExecutionGraphCaching() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(expectedJobId, CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, accessExecutionGraphFuture.get())___			accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, accessExecutionGraphFuture.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(1))__		}_	};tests,that,we,can,cache,access,execution,graphs,over,multiple,accesses;test,public,void,test,execution,graph,caching,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,access,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,access,execution,graph,future,get,access,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,access,execution,graph,future,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,1
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphCaching() throws Exception;1550568580;Tests that we can cache AccessExecutionGraphs over multiple accesses.;@Test_	public void testExecutionGraphCaching() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(expectedJobId, CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, accessExecutionGraphFuture.get())___			accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, accessExecutionGraphFuture.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(1))__		}_	};tests,that,we,can,cache,access,execution,graphs,over,multiple,accesses;test,public,void,test,execution,graph,caching,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,access,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,access,execution,graph,future,get,access,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,access,execution,graph,future,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,1
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphCaching() throws Exception;1550683188;Tests that we can cache AccessExecutionGraphs over multiple accesses.;@Test_	public void testExecutionGraphCaching() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(expectedJobId, CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, accessExecutionGraphFuture.get())___			accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, accessExecutionGraphFuture.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(1))__		}_	};tests,that,we,can,cache,access,execution,graphs,over,multiple,accesses;test,public,void,test,execution,graph,caching,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,access,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,access,execution,graph,future,get,access,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,access,execution,graph,future,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,1
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphCaching() throws Exception;1550683189;Tests that we can cache AccessExecutionGraphs over multiple accesses.;@Test_	public void testExecutionGraphCaching() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(expectedJobId, CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, accessExecutionGraphFuture.get())___			accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, accessExecutionGraphFuture.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(1))__		}_	};tests,that,we,can,cache,access,execution,graphs,over,multiple,accesses;test,public,void,test,execution,graph,caching,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,access,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,access,execution,graph,future,get,access,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,access,execution,graph,future,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,1
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphCaching() throws Exception;1550683189;Tests that we can cache AccessExecutionGraphs over multiple accesses.;@Test_	public void testExecutionGraphCaching() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(expectedJobId, CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, accessExecutionGraphFuture.get())___			accessExecutionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, accessExecutionGraphFuture.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(1))__		}_	};tests,that,we,can,cache,access,execution,graphs,over,multiple,accesses;test,public,void,test,execution,graph,caching,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,access,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,access,execution,graph,future,get,access,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,access,execution,graph,future,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,1
ExecutionGraphCacheTest -> @Test 	public void testConcurrentAccess() throws Exception;1506967078;Tests that concurrent accesses only trigger a single AccessExecutionGraph request.;@Test_	public void testConcurrentAccess() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID jobId = new JobID()___		final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn(CompletableFuture.completedFuture(accessExecutionGraph))___		final int numConcurrentAccesses = 10___		final ArrayList<CompletableFuture<AccessExecutionGraph>> executionGraphFutures = new ArrayList<>(numConcurrentAccesses)___		final ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(numConcurrentAccesses)___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			for (int i = 0_ i < numConcurrentAccesses_ i++) {_				CompletableFuture<AccessExecutionGraph> executionGraphFuture = CompletableFuture_					.supplyAsync(_						() -> executionGraphCache.getExecutionGraph(jobId, jobManagerGateway),_						executor)_					.thenCompose(Function.identity())___				executionGraphFutures.add(executionGraphFuture)__			}__			final CompletableFuture<Collection<AccessExecutionGraph>> allExecutionGraphFutures = FutureUtils.combineAll(executionGraphFutures)___			Collection<AccessExecutionGraph> allExecutionGraphs = allExecutionGraphFutures.get()___			for (AccessExecutionGraph executionGraph : allExecutionGraphs) {_				assertEquals(accessExecutionGraph, executionGraph)__			}__			verify(jobManagerGateway, times(1)).requestJob(eq(jobId), any(Time.class))__		} finally {_			Executors.gracefulShutdown(5000L, TimeUnit.MILLISECONDS, executor)__		}_	};tests,that,concurrent,accesses,only,trigger,a,single,access,execution,graph,request;test,public,void,test,concurrent,access,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,job,id,new,job,id,final,access,execution,graph,access,execution,graph,mock,access,execution,graph,class,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id,any,time,class,then,return,completable,future,completed,future,access,execution,graph,final,int,num,concurrent,accesses,10,final,array,list,completable,future,access,execution,graph,execution,graph,futures,new,array,list,num,concurrent,accesses,final,executor,service,executor,java,util,concurrent,executors,new,fixed,thread,pool,num,concurrent,accesses,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,for,int,i,0,i,num,concurrent,accesses,i,completable,future,access,execution,graph,execution,graph,future,completable,future,supply,async,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,executor,then,compose,function,identity,execution,graph,futures,add,execution,graph,future,final,completable,future,collection,access,execution,graph,all,execution,graph,futures,future,utils,combine,all,execution,graph,futures,collection,access,execution,graph,all,execution,graphs,all,execution,graph,futures,get,for,access,execution,graph,execution,graph,all,execution,graphs,assert,equals,access,execution,graph,execution,graph,verify,job,manager,gateway,times,1,request,job,eq,job,id,any,time,class,finally,executors,graceful,shutdown,5000l,time,unit,milliseconds,executor
ExecutionGraphCacheTest -> @Test 	public void testConcurrentAccess() throws Exception;1512567202;Tests that concurrent accesses only trigger a single AccessExecutionGraph request.;@Test_	public void testConcurrentAccess() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID jobId = new JobID()___		final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn(CompletableFuture.completedFuture(accessExecutionGraph))___		final int numConcurrentAccesses = 10___		final ArrayList<CompletableFuture<AccessExecutionGraph>> executionGraphFutures = new ArrayList<>(numConcurrentAccesses)___		final ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(numConcurrentAccesses)___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			for (int i = 0_ i < numConcurrentAccesses_ i++) {_				CompletableFuture<AccessExecutionGraph> executionGraphFuture = CompletableFuture_					.supplyAsync(_						() -> executionGraphCache.getExecutionGraph(jobId, jobManagerGateway),_						executor)_					.thenCompose(Function.identity())___				executionGraphFutures.add(executionGraphFuture)__			}__			final CompletableFuture<Collection<AccessExecutionGraph>> allExecutionGraphFutures = FutureUtils.combineAll(executionGraphFutures)___			Collection<AccessExecutionGraph> allExecutionGraphs = allExecutionGraphFutures.get()___			for (AccessExecutionGraph executionGraph : allExecutionGraphs) {_				assertEquals(accessExecutionGraph, executionGraph)__			}__			verify(jobManagerGateway, times(1)).requestJob(eq(jobId), any(Time.class))__		} finally {_			ExecutorUtils.gracefulShutdown(5000L, TimeUnit.MILLISECONDS, executor)__		}_	};tests,that,concurrent,accesses,only,trigger,a,single,access,execution,graph,request;test,public,void,test,concurrent,access,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,job,id,new,job,id,final,access,execution,graph,access,execution,graph,mock,access,execution,graph,class,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id,any,time,class,then,return,completable,future,completed,future,access,execution,graph,final,int,num,concurrent,accesses,10,final,array,list,completable,future,access,execution,graph,execution,graph,futures,new,array,list,num,concurrent,accesses,final,executor,service,executor,java,util,concurrent,executors,new,fixed,thread,pool,num,concurrent,accesses,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,for,int,i,0,i,num,concurrent,accesses,i,completable,future,access,execution,graph,execution,graph,future,completable,future,supply,async,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,executor,then,compose,function,identity,execution,graph,futures,add,execution,graph,future,final,completable,future,collection,access,execution,graph,all,execution,graph,futures,future,utils,combine,all,execution,graph,futures,collection,access,execution,graph,all,execution,graphs,all,execution,graph,futures,get,for,access,execution,graph,execution,graph,all,execution,graphs,assert,equals,access,execution,graph,execution,graph,verify,job,manager,gateway,times,1,request,job,eq,job,id,any,time,class,finally,executor,utils,graceful,shutdown,5000l,time,unit,milliseconds,executor
ExecutionGraphCacheTest -> @Test 	public void testConcurrentAccess() throws Exception;1516970998;Tests that concurrent accesses only trigger a single AccessExecutionGraph request.;@Test_	public void testConcurrentAccess() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(expectedJobId, CompletableFuture.completedFuture(expectedExecutionGraph))___		final int numConcurrentAccesses = 10___		final ArrayList<CompletableFuture<AccessExecutionGraph>> executionGraphFutures = new ArrayList<>(numConcurrentAccesses)___		final ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(numConcurrentAccesses)___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			for (int i = 0_ i < numConcurrentAccesses_ i++) {_				CompletableFuture<AccessExecutionGraph> executionGraphFuture = CompletableFuture_					.supplyAsync(_						() -> executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway),_						executor)_					.thenCompose(Function.identity())___				executionGraphFutures.add(executionGraphFuture)__			}__			final CompletableFuture<Collection<AccessExecutionGraph>> allExecutionGraphFutures = FutureUtils.combineAll(executionGraphFutures)___			Collection<AccessExecutionGraph> allExecutionGraphs = allExecutionGraphFutures.get()___			for (AccessExecutionGraph executionGraph : allExecutionGraphs) {_				assertEquals(expectedExecutionGraph, executionGraph)__			}__			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(1))__		} finally {_			ExecutorUtils.gracefulShutdown(5000L, TimeUnit.MILLISECONDS, executor)__		}_	};tests,that,concurrent,accesses,only,trigger,a,single,access,execution,graph,request;test,public,void,test,concurrent,access,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,final,int,num,concurrent,accesses,10,final,array,list,completable,future,access,execution,graph,execution,graph,futures,new,array,list,num,concurrent,accesses,final,executor,service,executor,java,util,concurrent,executors,new,fixed,thread,pool,num,concurrent,accesses,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,for,int,i,0,i,num,concurrent,accesses,i,completable,future,access,execution,graph,execution,graph,future,completable,future,supply,async,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,executor,then,compose,function,identity,execution,graph,futures,add,execution,graph,future,final,completable,future,collection,access,execution,graph,all,execution,graph,futures,future,utils,combine,all,execution,graph,futures,collection,access,execution,graph,all,execution,graphs,all,execution,graph,futures,get,for,access,execution,graph,execution,graph,all,execution,graphs,assert,equals,expected,execution,graph,execution,graph,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,1,finally,executor,utils,graceful,shutdown,5000l,time,unit,milliseconds,executor
ExecutionGraphCacheTest -> @Test 	public void testConcurrentAccess() throws Exception;1519317157;Tests that concurrent accesses only trigger a single AccessExecutionGraph request.;@Test_	public void testConcurrentAccess() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(expectedJobId, CompletableFuture.completedFuture(expectedExecutionGraph))___		final int numConcurrentAccesses = 10___		final ArrayList<CompletableFuture<AccessExecutionGraph>> executionGraphFutures = new ArrayList<>(numConcurrentAccesses)___		final ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(numConcurrentAccesses)___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			for (int i = 0_ i < numConcurrentAccesses_ i++) {_				CompletableFuture<AccessExecutionGraph> executionGraphFuture = CompletableFuture_					.supplyAsync(_						() -> executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway),_						executor)_					.thenCompose(Function.identity())___				executionGraphFutures.add(executionGraphFuture)__			}__			final CompletableFuture<Collection<AccessExecutionGraph>> allExecutionGraphFutures = FutureUtils.combineAll(executionGraphFutures)___			Collection<AccessExecutionGraph> allExecutionGraphs = allExecutionGraphFutures.get()___			for (AccessExecutionGraph executionGraph : allExecutionGraphs) {_				assertEquals(expectedExecutionGraph, executionGraph)__			}__			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(1))__		} finally {_			ExecutorUtils.gracefulShutdown(5000L, TimeUnit.MILLISECONDS, executor)__		}_	};tests,that,concurrent,accesses,only,trigger,a,single,access,execution,graph,request;test,public,void,test,concurrent,access,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,final,int,num,concurrent,accesses,10,final,array,list,completable,future,access,execution,graph,execution,graph,futures,new,array,list,num,concurrent,accesses,final,executor,service,executor,java,util,concurrent,executors,new,fixed,thread,pool,num,concurrent,accesses,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,for,int,i,0,i,num,concurrent,accesses,i,completable,future,access,execution,graph,execution,graph,future,completable,future,supply,async,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,executor,then,compose,function,identity,execution,graph,futures,add,execution,graph,future,final,completable,future,collection,access,execution,graph,all,execution,graph,futures,future,utils,combine,all,execution,graph,futures,collection,access,execution,graph,all,execution,graphs,all,execution,graph,futures,get,for,access,execution,graph,execution,graph,all,execution,graphs,assert,equals,expected,execution,graph,execution,graph,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,1,finally,executor,utils,graceful,shutdown,5000l,time,unit,milliseconds,executor
ExecutionGraphCacheTest -> @Test 	public void testConcurrentAccess() throws Exception;1550568580;Tests that concurrent accesses only trigger a single AccessExecutionGraph request.;@Test_	public void testConcurrentAccess() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(expectedJobId, CompletableFuture.completedFuture(expectedExecutionGraph))___		final int numConcurrentAccesses = 10___		final ArrayList<CompletableFuture<AccessExecutionGraph>> executionGraphFutures = new ArrayList<>(numConcurrentAccesses)___		final ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(numConcurrentAccesses)___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			for (int i = 0_ i < numConcurrentAccesses_ i++) {_				CompletableFuture<AccessExecutionGraph> executionGraphFuture = CompletableFuture_					.supplyAsync(_						() -> executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway),_						executor)_					.thenCompose(Function.identity())___				executionGraphFutures.add(executionGraphFuture)__			}__			final CompletableFuture<Collection<AccessExecutionGraph>> allExecutionGraphFutures = FutureUtils.combineAll(executionGraphFutures)___			Collection<AccessExecutionGraph> allExecutionGraphs = allExecutionGraphFutures.get()___			for (AccessExecutionGraph executionGraph : allExecutionGraphs) {_				assertEquals(expectedExecutionGraph, executionGraph)__			}__			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(1))__		} finally {_			ExecutorUtils.gracefulShutdown(5000L, TimeUnit.MILLISECONDS, executor)__		}_	};tests,that,concurrent,accesses,only,trigger,a,single,access,execution,graph,request;test,public,void,test,concurrent,access,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,final,int,num,concurrent,accesses,10,final,array,list,completable,future,access,execution,graph,execution,graph,futures,new,array,list,num,concurrent,accesses,final,executor,service,executor,java,util,concurrent,executors,new,fixed,thread,pool,num,concurrent,accesses,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,for,int,i,0,i,num,concurrent,accesses,i,completable,future,access,execution,graph,execution,graph,future,completable,future,supply,async,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,executor,then,compose,function,identity,execution,graph,futures,add,execution,graph,future,final,completable,future,collection,access,execution,graph,all,execution,graph,futures,future,utils,combine,all,execution,graph,futures,collection,access,execution,graph,all,execution,graphs,all,execution,graph,futures,get,for,access,execution,graph,execution,graph,all,execution,graphs,assert,equals,expected,execution,graph,execution,graph,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,1,finally,executor,utils,graceful,shutdown,5000l,time,unit,milliseconds,executor
ExecutionGraphCacheTest -> @Test 	public void testConcurrentAccess() throws Exception;1550683188;Tests that concurrent accesses only trigger a single AccessExecutionGraph request.;@Test_	public void testConcurrentAccess() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(expectedJobId, CompletableFuture.completedFuture(expectedExecutionGraph))___		final int numConcurrentAccesses = 10___		final ArrayList<CompletableFuture<AccessExecutionGraph>> executionGraphFutures = new ArrayList<>(numConcurrentAccesses)___		final ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(numConcurrentAccesses)___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			for (int i = 0_ i < numConcurrentAccesses_ i++) {_				CompletableFuture<AccessExecutionGraph> executionGraphFuture = CompletableFuture_					.supplyAsync(_						() -> executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway),_						executor)_					.thenCompose(Function.identity())___				executionGraphFutures.add(executionGraphFuture)__			}__			final CompletableFuture<Collection<AccessExecutionGraph>> allExecutionGraphFutures = FutureUtils.combineAll(executionGraphFutures)___			Collection<AccessExecutionGraph> allExecutionGraphs = allExecutionGraphFutures.get()___			for (AccessExecutionGraph executionGraph : allExecutionGraphs) {_				assertEquals(expectedExecutionGraph, executionGraph)__			}__			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(1))__		} finally {_			ExecutorUtils.gracefulShutdown(5000L, TimeUnit.MILLISECONDS, executor)__		}_	};tests,that,concurrent,accesses,only,trigger,a,single,access,execution,graph,request;test,public,void,test,concurrent,access,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,final,int,num,concurrent,accesses,10,final,array,list,completable,future,access,execution,graph,execution,graph,futures,new,array,list,num,concurrent,accesses,final,executor,service,executor,java,util,concurrent,executors,new,fixed,thread,pool,num,concurrent,accesses,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,for,int,i,0,i,num,concurrent,accesses,i,completable,future,access,execution,graph,execution,graph,future,completable,future,supply,async,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,executor,then,compose,function,identity,execution,graph,futures,add,execution,graph,future,final,completable,future,collection,access,execution,graph,all,execution,graph,futures,future,utils,combine,all,execution,graph,futures,collection,access,execution,graph,all,execution,graphs,all,execution,graph,futures,get,for,access,execution,graph,execution,graph,all,execution,graphs,assert,equals,expected,execution,graph,execution,graph,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,1,finally,executor,utils,graceful,shutdown,5000l,time,unit,milliseconds,executor
ExecutionGraphCacheTest -> @Test 	public void testConcurrentAccess() throws Exception;1550683189;Tests that concurrent accesses only trigger a single AccessExecutionGraph request.;@Test_	public void testConcurrentAccess() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(expectedJobId, CompletableFuture.completedFuture(expectedExecutionGraph))___		final int numConcurrentAccesses = 10___		final ArrayList<CompletableFuture<AccessExecutionGraph>> executionGraphFutures = new ArrayList<>(numConcurrentAccesses)___		final ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(numConcurrentAccesses)___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			for (int i = 0_ i < numConcurrentAccesses_ i++) {_				CompletableFuture<AccessExecutionGraph> executionGraphFuture = CompletableFuture_					.supplyAsync(_						() -> executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway),_						executor)_					.thenCompose(Function.identity())___				executionGraphFutures.add(executionGraphFuture)__			}__			final CompletableFuture<Collection<AccessExecutionGraph>> allExecutionGraphFutures = FutureUtils.combineAll(executionGraphFutures)___			Collection<AccessExecutionGraph> allExecutionGraphs = allExecutionGraphFutures.get()___			for (AccessExecutionGraph executionGraph : allExecutionGraphs) {_				assertEquals(expectedExecutionGraph, executionGraph)__			}__			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(1))__		} finally {_			ExecutorUtils.gracefulShutdown(5000L, TimeUnit.MILLISECONDS, executor)__		}_	};tests,that,concurrent,accesses,only,trigger,a,single,access,execution,graph,request;test,public,void,test,concurrent,access,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,final,int,num,concurrent,accesses,10,final,array,list,completable,future,access,execution,graph,execution,graph,futures,new,array,list,num,concurrent,accesses,final,executor,service,executor,java,util,concurrent,executors,new,fixed,thread,pool,num,concurrent,accesses,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,for,int,i,0,i,num,concurrent,accesses,i,completable,future,access,execution,graph,execution,graph,future,completable,future,supply,async,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,executor,then,compose,function,identity,execution,graph,futures,add,execution,graph,future,final,completable,future,collection,access,execution,graph,all,execution,graph,futures,future,utils,combine,all,execution,graph,futures,collection,access,execution,graph,all,execution,graphs,all,execution,graph,futures,get,for,access,execution,graph,execution,graph,all,execution,graphs,assert,equals,expected,execution,graph,execution,graph,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,1,finally,executor,utils,graceful,shutdown,5000l,time,unit,milliseconds,executor
ExecutionGraphCacheTest -> @Test 	public void testConcurrentAccess() throws Exception;1550683189;Tests that concurrent accesses only trigger a single AccessExecutionGraph request.;@Test_	public void testConcurrentAccess() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(expectedJobId, CompletableFuture.completedFuture(expectedExecutionGraph))___		final int numConcurrentAccesses = 10___		final ArrayList<CompletableFuture<AccessExecutionGraph>> executionGraphFutures = new ArrayList<>(numConcurrentAccesses)___		final ExecutorService executor = java.util.concurrent.Executors.newFixedThreadPool(numConcurrentAccesses)___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			for (int i = 0_ i < numConcurrentAccesses_ i++) {_				CompletableFuture<AccessExecutionGraph> executionGraphFuture = CompletableFuture_					.supplyAsync(_						() -> executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway),_						executor)_					.thenCompose(Function.identity())___				executionGraphFutures.add(executionGraphFuture)__			}__			final CompletableFuture<Collection<AccessExecutionGraph>> allExecutionGraphFutures = FutureUtils.combineAll(executionGraphFutures)___			Collection<AccessExecutionGraph> allExecutionGraphs = allExecutionGraphFutures.get()___			for (AccessExecutionGraph executionGraph : allExecutionGraphs) {_				assertEquals(expectedExecutionGraph, executionGraph)__			}__			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(1))__		} finally {_			ExecutorUtils.gracefulShutdown(5000L, TimeUnit.MILLISECONDS, executor)__		}_	};tests,that,concurrent,accesses,only,trigger,a,single,access,execution,graph,request;test,public,void,test,concurrent,access,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,final,int,num,concurrent,accesses,10,final,array,list,completable,future,access,execution,graph,execution,graph,futures,new,array,list,num,concurrent,accesses,final,executor,service,executor,java,util,concurrent,executors,new,fixed,thread,pool,num,concurrent,accesses,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,for,int,i,0,i,num,concurrent,accesses,i,completable,future,access,execution,graph,execution,graph,future,completable,future,supply,async,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,executor,then,compose,function,identity,execution,graph,futures,add,execution,graph,future,final,completable,future,collection,access,execution,graph,all,execution,graph,futures,future,utils,combine,all,execution,graph,futures,collection,access,execution,graph,all,execution,graphs,all,execution,graph,futures,get,for,access,execution,graph,execution,graph,all,execution,graphs,assert,equals,expected,execution,graph,execution,graph,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,1,finally,executor,utils,graceful,shutdown,5000l,time,unit,milliseconds,executor
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSuspended() throws Exception;1506967078;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} is in_state {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_{@link JobManager}.;@Test_	public void testCacheInvalidationIfSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID jobId = new JobID()___		final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class)___		final AccessExecutionGraph suspendedExecutionGraph = mock(AccessExecutionGraph.class)__		when(suspendedExecutionGraph.getState()).thenReturn(JobStatus.SUSPENDED)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		_		when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn(_			CompletableFuture.completedFuture(suspendedExecutionGraph),_			CompletableFuture.completedFuture(accessExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(suspendedExecutionGraph, executionGraphFuture.get())___			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, executionGraphFuture2.get())__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,is,in,state,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,link,job,manager;test,public,void,test,cache,invalidation,if,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,job,id,new,job,id,final,access,execution,graph,access,execution,graph,mock,access,execution,graph,class,final,access,execution,graph,suspended,execution,graph,mock,access,execution,graph,class,when,suspended,execution,graph,get,state,then,return,job,status,suspended,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id,any,time,class,then,return,completable,future,completed,future,suspended,execution,graph,completable,future,completed,future,access,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,suspended,execution,graph,execution,graph,future,get,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,execution,graph,future2,get
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSuspended() throws Exception;1512567202;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} is in_state {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_{@link JobManager}.;@Test_	public void testCacheInvalidationIfSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID jobId = new JobID()___		final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class)___		final AccessExecutionGraph suspendedExecutionGraph = mock(AccessExecutionGraph.class)__		when(suspendedExecutionGraph.getState()).thenReturn(JobStatus.SUSPENDED)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		_		when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn(_			CompletableFuture.completedFuture(suspendedExecutionGraph),_			CompletableFuture.completedFuture(accessExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(suspendedExecutionGraph, executionGraphFuture.get())___			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, executionGraphFuture2.get())__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,is,in,state,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,link,job,manager;test,public,void,test,cache,invalidation,if,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,job,id,new,job,id,final,access,execution,graph,access,execution,graph,mock,access,execution,graph,class,final,access,execution,graph,suspended,execution,graph,mock,access,execution,graph,class,when,suspended,execution,graph,get,state,then,return,job,status,suspended,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id,any,time,class,then,return,completable,future,completed,future,suspended,execution,graph,completable,future,completed,future,access,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,suspended,execution,graph,execution,graph,future,get,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,execution,graph,future2,get
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSuspended() throws Exception;1516970998;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} is in_state {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_{@link JobManager}.;@Test_	public void testCacheInvalidationIfSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID expectedJobId = new JobID()___		final ArchivedExecutionGraph suspendedExecutionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.SUSPENDED).build()__		final ConcurrentLinkedQueue<CompletableFuture<? extends AccessExecutionGraph>> requestJobAnswers = new ConcurrentLinkedQueue<>()___		requestJobAnswers.offer(CompletableFuture.completedFuture(suspendedExecutionGraph))__		requestJobAnswers.offer(CompletableFuture.completedFuture(expectedExecutionGraph))___		final TestingRestfulGateway restfulGateway = TestingRestfulGateway.newBuilder()_			.setRequestJobFunction(_				jobId -> {_					assertThat(jobId, Matchers.equalTo(expectedJobId))___					return requestJobAnswers.poll()__				}_			)_			.build()___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(suspendedExecutionGraph, executionGraphFuture.get())___			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,is,in,state,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,link,job,manager;test,public,void,test,cache,invalidation,if,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,expected,job,id,new,job,id,final,archived,execution,graph,suspended,execution,graph,new,archived,execution,graph,builder,set,state,job,status,suspended,build,final,concurrent,linked,queue,completable,future,extends,access,execution,graph,request,job,answers,new,concurrent,linked,queue,request,job,answers,offer,completable,future,completed,future,suspended,execution,graph,request,job,answers,offer,completable,future,completed,future,expected,execution,graph,final,testing,restful,gateway,restful,gateway,testing,restful,gateway,new,builder,set,request,job,function,job,id,assert,that,job,id,matchers,equal,to,expected,job,id,return,request,job,answers,poll,build,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,suspended,execution,graph,execution,graph,future,get,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSuspended() throws Exception;1519317157;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} is in_state {@link JobStatus#SUSPENDING} or {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_{@link JobManager}.;@Test_	public void testCacheInvalidationIfSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID expectedJobId = new JobID()___		final ArchivedExecutionGraph suspendingExecutionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.SUSPENDING).build()__		final ArchivedExecutionGraph suspendedExecutionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.SUSPENDED).build()__		final ConcurrentLinkedQueue<CompletableFuture<? extends AccessExecutionGraph>> requestJobAnswers = new ConcurrentLinkedQueue<>()___		requestJobAnswers.offer(CompletableFuture.completedFuture(suspendingExecutionGraph))__		requestJobAnswers.offer(CompletableFuture.completedFuture(suspendedExecutionGraph))__		requestJobAnswers.offer(CompletableFuture.completedFuture(expectedExecutionGraph))___		final TestingRestfulGateway restfulGateway = TestingRestfulGateway.newBuilder()_			.setRequestJobFunction(_				jobId -> {_					assertThat(jobId, Matchers.equalTo(expectedJobId))___					return requestJobAnswers.poll()__				}_			)_			.build()___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(suspendingExecutionGraph, executionGraphFuture.get())___			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(suspendedExecutionGraph, executionGraphFuture.get())___			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,is,in,state,link,job,status,suspending,or,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,link,job,manager;test,public,void,test,cache,invalidation,if,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,expected,job,id,new,job,id,final,archived,execution,graph,suspending,execution,graph,new,archived,execution,graph,builder,set,state,job,status,suspending,build,final,archived,execution,graph,suspended,execution,graph,new,archived,execution,graph,builder,set,state,job,status,suspended,build,final,concurrent,linked,queue,completable,future,extends,access,execution,graph,request,job,answers,new,concurrent,linked,queue,request,job,answers,offer,completable,future,completed,future,suspending,execution,graph,request,job,answers,offer,completable,future,completed,future,suspended,execution,graph,request,job,answers,offer,completable,future,completed,future,expected,execution,graph,final,testing,restful,gateway,restful,gateway,testing,restful,gateway,new,builder,set,request,job,function,job,id,assert,that,job,id,matchers,equal,to,expected,job,id,return,request,job,answers,poll,build,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,suspending,execution,graph,execution,graph,future,get,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,suspended,execution,graph,execution,graph,future,get,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSuspended() throws Exception;1550568580;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} is in_state {@link JobStatus#SUSPENDING} or {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_JobManager.;@Test_	public void testCacheInvalidationIfSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID expectedJobId = new JobID()___		final ArchivedExecutionGraph suspendingExecutionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.SUSPENDING).build()__		final ArchivedExecutionGraph suspendedExecutionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.SUSPENDED).build()__		final ConcurrentLinkedQueue<CompletableFuture<? extends AccessExecutionGraph>> requestJobAnswers = new ConcurrentLinkedQueue<>()___		requestJobAnswers.offer(CompletableFuture.completedFuture(suspendingExecutionGraph))__		requestJobAnswers.offer(CompletableFuture.completedFuture(suspendedExecutionGraph))__		requestJobAnswers.offer(CompletableFuture.completedFuture(expectedExecutionGraph))___		final TestingRestfulGateway restfulGateway = TestingRestfulGateway.newBuilder()_			.setRequestJobFunction(_				jobId -> {_					assertThat(jobId, Matchers.equalTo(expectedJobId))___					return requestJobAnswers.poll()__				}_			)_			.build()___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(suspendingExecutionGraph, executionGraphFuture.get())___			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(suspendedExecutionGraph, executionGraphFuture.get())___			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,is,in,state,link,job,status,suspending,or,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,job,manager;test,public,void,test,cache,invalidation,if,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,expected,job,id,new,job,id,final,archived,execution,graph,suspending,execution,graph,new,archived,execution,graph,builder,set,state,job,status,suspending,build,final,archived,execution,graph,suspended,execution,graph,new,archived,execution,graph,builder,set,state,job,status,suspended,build,final,concurrent,linked,queue,completable,future,extends,access,execution,graph,request,job,answers,new,concurrent,linked,queue,request,job,answers,offer,completable,future,completed,future,suspending,execution,graph,request,job,answers,offer,completable,future,completed,future,suspended,execution,graph,request,job,answers,offer,completable,future,completed,future,expected,execution,graph,final,testing,restful,gateway,restful,gateway,testing,restful,gateway,new,builder,set,request,job,function,job,id,assert,that,job,id,matchers,equal,to,expected,job,id,return,request,job,answers,poll,build,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,suspending,execution,graph,execution,graph,future,get,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,suspended,execution,graph,execution,graph,future,get,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSuspended() throws Exception;1550683188;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} is in_state {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_JobManager.;@Test_	public void testCacheInvalidationIfSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID expectedJobId = new JobID()___		final ArchivedExecutionGraph suspendedExecutionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.SUSPENDED).build()__		final ConcurrentLinkedQueue<CompletableFuture<? extends AccessExecutionGraph>> requestJobAnswers = new ConcurrentLinkedQueue<>()___		requestJobAnswers.offer(CompletableFuture.completedFuture(suspendedExecutionGraph))__		requestJobAnswers.offer(CompletableFuture.completedFuture(expectedExecutionGraph))___		final TestingRestfulGateway restfulGateway = TestingRestfulGateway.newBuilder()_			.setRequestJobFunction(_				jobId -> {_					assertThat(jobId, Matchers.equalTo(expectedJobId))___					return requestJobAnswers.poll()__				}_			)_			.build()___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(suspendedExecutionGraph, executionGraphFuture.get())___			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,is,in,state,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,job,manager;test,public,void,test,cache,invalidation,if,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,expected,job,id,new,job,id,final,archived,execution,graph,suspended,execution,graph,new,archived,execution,graph,builder,set,state,job,status,suspended,build,final,concurrent,linked,queue,completable,future,extends,access,execution,graph,request,job,answers,new,concurrent,linked,queue,request,job,answers,offer,completable,future,completed,future,suspended,execution,graph,request,job,answers,offer,completable,future,completed,future,expected,execution,graph,final,testing,restful,gateway,restful,gateway,testing,restful,gateway,new,builder,set,request,job,function,job,id,assert,that,job,id,matchers,equal,to,expected,job,id,return,request,job,answers,poll,build,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,suspended,execution,graph,execution,graph,future,get,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSuspended() throws Exception;1550683189;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} is in_state {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_JobManager.;@Test_	public void testCacheInvalidationIfSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID expectedJobId = new JobID()___		final ArchivedExecutionGraph suspendedExecutionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.SUSPENDED).build()__		final ConcurrentLinkedQueue<CompletableFuture<ArchivedExecutionGraph>> requestJobAnswers = new ConcurrentLinkedQueue<>()___		requestJobAnswers.offer(CompletableFuture.completedFuture(suspendedExecutionGraph))__		requestJobAnswers.offer(CompletableFuture.completedFuture(expectedExecutionGraph))___		final TestingRestfulGateway restfulGateway = TestingRestfulGateway.newBuilder()_			.setRequestJobFunction(_				jobId -> {_					assertThat(jobId, Matchers.equalTo(expectedJobId))___					return requestJobAnswers.poll()__				}_			)_			.build()___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(suspendedExecutionGraph, executionGraphFuture.get())___			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,is,in,state,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,job,manager;test,public,void,test,cache,invalidation,if,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,expected,job,id,new,job,id,final,archived,execution,graph,suspended,execution,graph,new,archived,execution,graph,builder,set,state,job,status,suspended,build,final,concurrent,linked,queue,completable,future,archived,execution,graph,request,job,answers,new,concurrent,linked,queue,request,job,answers,offer,completable,future,completed,future,suspended,execution,graph,request,job,answers,offer,completable,future,completed,future,expected,execution,graph,final,testing,restful,gateway,restful,gateway,testing,restful,gateway,new,builder,set,request,job,function,job,id,assert,that,job,id,matchers,equal,to,expected,job,id,return,request,job,answers,poll,build,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,suspended,execution,graph,execution,graph,future,get,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get
ExecutionGraphCacheTest -> @Test 	public void testImmediateCacheInvalidationAfterFailure() throws Exception;1506967078;Tests that a failure in requesting an AccessExecutionGraph from the gateway, will not create_a cache entry --> another cache request will trigger a new gateway request.;@Test_	public void testImmediateCacheInvalidationAfterFailure() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID jobId = new JobID()___		final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		_		when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn(_			FutureUtils.completedExceptionally(new FlinkJobNotFoundException(jobId)),_			CompletableFuture.completedFuture(accessExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			try {_				executionGraphFuture.get()___				fail("The execution graph future should have been completed exceptionally.")__			} catch (ExecutionException ee) {_				assertTrue(ee.getCause() instanceof FlinkException)__			}__			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, executionGraphFuture2.get())__		}_	};tests,that,a,failure,in,requesting,an,access,execution,graph,from,the,gateway,will,not,create,a,cache,entry,another,cache,request,will,trigger,a,new,gateway,request;test,public,void,test,immediate,cache,invalidation,after,failure,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,job,id,new,job,id,final,access,execution,graph,access,execution,graph,mock,access,execution,graph,class,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id,any,time,class,then,return,future,utils,completed,exceptionally,new,flink,job,not,found,exception,job,id,completable,future,completed,future,access,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,try,execution,graph,future,get,fail,the,execution,graph,future,should,have,been,completed,exceptionally,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,flink,exception,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,execution,graph,future2,get
ExecutionGraphCacheTest -> @Test 	public void testImmediateCacheInvalidationAfterFailure() throws Exception;1512567202;Tests that a failure in requesting an AccessExecutionGraph from the gateway, will not create_a cache entry --> another cache request will trigger a new gateway request.;@Test_	public void testImmediateCacheInvalidationAfterFailure() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID jobId = new JobID()___		final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		_		when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn(_			FutureUtils.completedExceptionally(new FlinkJobNotFoundException(jobId)),_			CompletableFuture.completedFuture(accessExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			try {_				executionGraphFuture.get()___				fail("The execution graph future should have been completed exceptionally.")__			} catch (ExecutionException ee) {_				assertTrue(ee.getCause() instanceof FlinkException)__			}__			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, executionGraphFuture2.get())__		}_	};tests,that,a,failure,in,requesting,an,access,execution,graph,from,the,gateway,will,not,create,a,cache,entry,another,cache,request,will,trigger,a,new,gateway,request;test,public,void,test,immediate,cache,invalidation,after,failure,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,job,id,new,job,id,final,access,execution,graph,access,execution,graph,mock,access,execution,graph,class,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id,any,time,class,then,return,future,utils,completed,exceptionally,new,flink,job,not,found,exception,job,id,completable,future,completed,future,access,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,try,execution,graph,future,get,fail,the,execution,graph,future,should,have,been,completed,exceptionally,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,flink,exception,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,execution,graph,future2,get
ExecutionGraphCacheTest -> @Test 	public void testImmediateCacheInvalidationAfterFailure() throws Exception;1516970998;Tests that a failure in requesting an AccessExecutionGraph from the gateway, will not create_a cache entry --> another cache request will trigger a new gateway request.;@Test_	public void testImmediateCacheInvalidationAfterFailure() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		_		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			FutureUtils.completedExceptionally(new FlinkJobNotFoundException(expectedJobId)),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			try {_				executionGraphFuture.get()___				fail("The execution graph future should have been completed exceptionally.")__			} catch (ExecutionException ee) {_				assertTrue(ee.getCause() instanceof FlinkException)__			}__			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())__		}_	};tests,that,a,failure,in,requesting,an,access,execution,graph,from,the,gateway,will,not,create,a,cache,entry,another,cache,request,will,trigger,a,new,gateway,request;test,public,void,test,immediate,cache,invalidation,after,failure,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,future,utils,completed,exceptionally,new,flink,job,not,found,exception,expected,job,id,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,try,execution,graph,future,get,fail,the,execution,graph,future,should,have,been,completed,exceptionally,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,flink,exception,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get
ExecutionGraphCacheTest -> @Test 	public void testImmediateCacheInvalidationAfterFailure() throws Exception;1519317157;Tests that a failure in requesting an AccessExecutionGraph from the gateway, will not create_a cache entry --> another cache request will trigger a new gateway request.;@Test_	public void testImmediateCacheInvalidationAfterFailure() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		_		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			FutureUtils.completedExceptionally(new FlinkJobNotFoundException(expectedJobId)),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			try {_				executionGraphFuture.get()___				fail("The execution graph future should have been completed exceptionally.")__			} catch (ExecutionException ee) {_				assertTrue(ee.getCause() instanceof FlinkException)__			}__			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())__		}_	};tests,that,a,failure,in,requesting,an,access,execution,graph,from,the,gateway,will,not,create,a,cache,entry,another,cache,request,will,trigger,a,new,gateway,request;test,public,void,test,immediate,cache,invalidation,after,failure,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,future,utils,completed,exceptionally,new,flink,job,not,found,exception,expected,job,id,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,try,execution,graph,future,get,fail,the,execution,graph,future,should,have,been,completed,exceptionally,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,flink,exception,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get
ExecutionGraphCacheTest -> @Test 	public void testImmediateCacheInvalidationAfterFailure() throws Exception;1550568580;Tests that a failure in requesting an AccessExecutionGraph from the gateway, will not create_a cache entry --> another cache request will trigger a new gateway request.;@Test_	public void testImmediateCacheInvalidationAfterFailure() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		_		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			FutureUtils.completedExceptionally(new FlinkJobNotFoundException(expectedJobId)),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			try {_				executionGraphFuture.get()___				fail("The execution graph future should have been completed exceptionally.")__			} catch (ExecutionException ee) {_				assertTrue(ee.getCause() instanceof FlinkException)__			}__			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())__		}_	};tests,that,a,failure,in,requesting,an,access,execution,graph,from,the,gateway,will,not,create,a,cache,entry,another,cache,request,will,trigger,a,new,gateway,request;test,public,void,test,immediate,cache,invalidation,after,failure,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,future,utils,completed,exceptionally,new,flink,job,not,found,exception,expected,job,id,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,try,execution,graph,future,get,fail,the,execution,graph,future,should,have,been,completed,exceptionally,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,flink,exception,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get
ExecutionGraphCacheTest -> @Test 	public void testImmediateCacheInvalidationAfterFailure() throws Exception;1550683188;Tests that a failure in requesting an AccessExecutionGraph from the gateway, will not create_a cache entry --> another cache request will trigger a new gateway request.;@Test_	public void testImmediateCacheInvalidationAfterFailure() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		_		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			FutureUtils.completedExceptionally(new FlinkJobNotFoundException(expectedJobId)),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			try {_				executionGraphFuture.get()___				fail("The execution graph future should have been completed exceptionally.")__			} catch (ExecutionException ee) {_				assertTrue(ee.getCause() instanceof FlinkException)__			}__			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())__		}_	};tests,that,a,failure,in,requesting,an,access,execution,graph,from,the,gateway,will,not,create,a,cache,entry,another,cache,request,will,trigger,a,new,gateway,request;test,public,void,test,immediate,cache,invalidation,after,failure,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,future,utils,completed,exceptionally,new,flink,job,not,found,exception,expected,job,id,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,try,execution,graph,future,get,fail,the,execution,graph,future,should,have,been,completed,exceptionally,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,flink,exception,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get
ExecutionGraphCacheTest -> @Test 	public void testImmediateCacheInvalidationAfterFailure() throws Exception;1550683189;Tests that a failure in requesting an AccessExecutionGraph from the gateway, will not create_a cache entry --> another cache request will trigger a new gateway request.;@Test_	public void testImmediateCacheInvalidationAfterFailure() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		_		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			FutureUtils.completedExceptionally(new FlinkJobNotFoundException(expectedJobId)),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			try {_				executionGraphFuture.get()___				fail("The execution graph future should have been completed exceptionally.")__			} catch (ExecutionException ee) {_				assertTrue(ee.getCause() instanceof FlinkException)__			}__			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())__		}_	};tests,that,a,failure,in,requesting,an,access,execution,graph,from,the,gateway,will,not,create,a,cache,entry,another,cache,request,will,trigger,a,new,gateway,request;test,public,void,test,immediate,cache,invalidation,after,failure,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,future,utils,completed,exceptionally,new,flink,job,not,found,exception,expected,job,id,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,try,execution,graph,future,get,fail,the,execution,graph,future,should,have,been,completed,exceptionally,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,flink,exception,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get
ExecutionGraphCacheTest -> @Test 	public void testImmediateCacheInvalidationAfterFailure() throws Exception;1550683189;Tests that a failure in requesting an AccessExecutionGraph from the gateway, will not create_a cache entry --> another cache request will trigger a new gateway request.;@Test_	public void testImmediateCacheInvalidationAfterFailure() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)___		_		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			FutureUtils.completedExceptionally(new FlinkJobNotFoundException(expectedJobId)),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			try {_				executionGraphFuture.get()___				fail("The execution graph future should have been completed exceptionally.")__			} catch (ExecutionException ee) {_				assertTrue(ee.getCause() instanceof FlinkException)__			}__			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())__		}_	};tests,that,a,failure,in,requesting,an,access,execution,graph,from,the,gateway,will,not,create,a,cache,entry,another,cache,request,will,trigger,a,new,gateway,request;test,public,void,test,immediate,cache,invalidation,after,failure,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,future,utils,completed,exceptionally,new,flink,job,not,found,exception,expected,job,id,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,try,execution,graph,future,get,fail,the,execution,graph,future,should,have,been,completed,exceptionally,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,flink,exception,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSwitchToSuspended() throws Exception;1506967078;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} changes its_state to {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_{@link JobManager}.;@Test_	public void testCacheInvalidationIfSwitchToSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID jobId = new JobID()___		final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class)___		final SuspendableAccessExecutionGraph toBeSuspendedExecutionGraph = new SuspendableAccessExecutionGraph(jobId)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		_		when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn(_			CompletableFuture.completedFuture(toBeSuspendedExecutionGraph),_			CompletableFuture.completedFuture(accessExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(toBeSuspendedExecutionGraph, executionGraphFuture.get())___			toBeSuspendedExecutionGraph.setJobStatus(JobStatus.SUSPENDED)___			_			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, executionGraphFuture2.get())___			CompletableFuture<AccessExecutionGraph> executionGraphFuture3 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, executionGraphFuture3.get())___			verify(jobManagerGateway, times(2)).requestJob(eq(jobId), any(Time.class))__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,changes,its,state,to,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,link,job,manager;test,public,void,test,cache,invalidation,if,switch,to,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,job,id,new,job,id,final,access,execution,graph,access,execution,graph,mock,access,execution,graph,class,final,suspendable,access,execution,graph,to,be,suspended,execution,graph,new,suspendable,access,execution,graph,job,id,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id,any,time,class,then,return,completable,future,completed,future,to,be,suspended,execution,graph,completable,future,completed,future,access,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,to,be,suspended,execution,graph,execution,graph,future,get,to,be,suspended,execution,graph,set,job,status,job,status,suspended,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,execution,graph,future2,get,completable,future,access,execution,graph,execution,graph,future3,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,execution,graph,future3,get,verify,job,manager,gateway,times,2,request,job,eq,job,id,any,time,class
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSwitchToSuspended() throws Exception;1512567202;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} changes its_state to {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_{@link JobManager}.;@Test_	public void testCacheInvalidationIfSwitchToSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID jobId = new JobID()___		final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class)___		final SuspendableAccessExecutionGraph toBeSuspendedExecutionGraph = new SuspendableAccessExecutionGraph(jobId)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		_		when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn(_			CompletableFuture.completedFuture(toBeSuspendedExecutionGraph),_			CompletableFuture.completedFuture(accessExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(toBeSuspendedExecutionGraph, executionGraphFuture.get())___			toBeSuspendedExecutionGraph.setJobStatus(JobStatus.SUSPENDED)___			_			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, executionGraphFuture2.get())___			CompletableFuture<AccessExecutionGraph> executionGraphFuture3 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, executionGraphFuture3.get())___			verify(jobManagerGateway, times(2)).requestJob(eq(jobId), any(Time.class))__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,changes,its,state,to,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,link,job,manager;test,public,void,test,cache,invalidation,if,switch,to,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,job,id,new,job,id,final,access,execution,graph,access,execution,graph,mock,access,execution,graph,class,final,suspendable,access,execution,graph,to,be,suspended,execution,graph,new,suspendable,access,execution,graph,job,id,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id,any,time,class,then,return,completable,future,completed,future,to,be,suspended,execution,graph,completable,future,completed,future,access,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,to,be,suspended,execution,graph,execution,graph,future,get,to,be,suspended,execution,graph,set,job,status,job,status,suspended,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,execution,graph,future2,get,completable,future,access,execution,graph,execution,graph,future3,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,execution,graph,future3,get,verify,job,manager,gateway,times,2,request,job,eq,job,id,any,time,class
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSwitchToSuspended() throws Exception;1516970998;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} changes its_state to {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_{@link JobManager}.;@Test_	public void testCacheInvalidationIfSwitchToSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID expectedJobId = new JobID()___		final SuspendableAccessExecutionGraph toBeSuspendedExecutionGraph = new SuspendableAccessExecutionGraph(expectedJobId)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			CompletableFuture.completedFuture(toBeSuspendedExecutionGraph),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(toBeSuspendedExecutionGraph, executionGraphFuture.get())___			toBeSuspendedExecutionGraph.setJobStatus(JobStatus.SUSPENDED)___			_			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())___			CompletableFuture<AccessExecutionGraph> executionGraphFuture3 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture3.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(2))__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,changes,its,state,to,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,link,job,manager;test,public,void,test,cache,invalidation,if,switch,to,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,expected,job,id,new,job,id,final,suspendable,access,execution,graph,to,be,suspended,execution,graph,new,suspendable,access,execution,graph,expected,job,id,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,to,be,suspended,execution,graph,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,to,be,suspended,execution,graph,execution,graph,future,get,to,be,suspended,execution,graph,set,job,status,job,status,suspended,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get,completable,future,access,execution,graph,execution,graph,future3,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future3,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,2
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSwitchToSuspended() throws Exception;1519317157;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} changes its_state to {@link JobStatus#SUSPENDING} or {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_{@link JobManager}.;@Test_	public void testCacheInvalidationIfSwitchToSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID expectedJobId = new JobID()___		final SuspendableAccessExecutionGraph toBeSuspendingExecutionGraph = new SuspendableAccessExecutionGraph(expectedJobId)__		final SuspendableAccessExecutionGraph toBeSuspendedExecutionGraph = new SuspendableAccessExecutionGraph(expectedJobId)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			CompletableFuture.completedFuture(toBeSuspendingExecutionGraph),_			CompletableFuture.completedFuture(toBeSuspendedExecutionGraph),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(toBeSuspendingExecutionGraph, executionGraphFuture.get())___			toBeSuspendingExecutionGraph.setJobStatus(JobStatus.SUSPENDING)___			_			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(toBeSuspendedExecutionGraph, executionGraphFuture.get())___			toBeSuspendedExecutionGraph.setJobStatus(JobStatus.SUSPENDED)___			_			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(3))__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,changes,its,state,to,link,job,status,suspending,or,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,link,job,manager;test,public,void,test,cache,invalidation,if,switch,to,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,expected,job,id,new,job,id,final,suspendable,access,execution,graph,to,be,suspending,execution,graph,new,suspendable,access,execution,graph,expected,job,id,final,suspendable,access,execution,graph,to,be,suspended,execution,graph,new,suspendable,access,execution,graph,expected,job,id,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,to,be,suspending,execution,graph,completable,future,completed,future,to,be,suspended,execution,graph,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,to,be,suspending,execution,graph,execution,graph,future,get,to,be,suspending,execution,graph,set,job,status,job,status,suspending,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,to,be,suspended,execution,graph,execution,graph,future,get,to,be,suspended,execution,graph,set,job,status,job,status,suspended,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,3
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSwitchToSuspended() throws Exception;1550568580;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} changes its_state to {@link JobStatus#SUSPENDING} or {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_JobManager.;@Test_	public void testCacheInvalidationIfSwitchToSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID expectedJobId = new JobID()___		final SuspendableAccessExecutionGraph toBeSuspendingExecutionGraph = new SuspendableAccessExecutionGraph(expectedJobId)__		final SuspendableAccessExecutionGraph toBeSuspendedExecutionGraph = new SuspendableAccessExecutionGraph(expectedJobId)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			CompletableFuture.completedFuture(toBeSuspendingExecutionGraph),_			CompletableFuture.completedFuture(toBeSuspendedExecutionGraph),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(toBeSuspendingExecutionGraph, executionGraphFuture.get())___			toBeSuspendingExecutionGraph.setJobStatus(JobStatus.SUSPENDING)___			_			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(toBeSuspendedExecutionGraph, executionGraphFuture.get())___			toBeSuspendedExecutionGraph.setJobStatus(JobStatus.SUSPENDED)___			_			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(3))__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,changes,its,state,to,link,job,status,suspending,or,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,job,manager;test,public,void,test,cache,invalidation,if,switch,to,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,expected,job,id,new,job,id,final,suspendable,access,execution,graph,to,be,suspending,execution,graph,new,suspendable,access,execution,graph,expected,job,id,final,suspendable,access,execution,graph,to,be,suspended,execution,graph,new,suspendable,access,execution,graph,expected,job,id,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,to,be,suspending,execution,graph,completable,future,completed,future,to,be,suspended,execution,graph,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,to,be,suspending,execution,graph,execution,graph,future,get,to,be,suspending,execution,graph,set,job,status,job,status,suspending,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,to,be,suspended,execution,graph,execution,graph,future,get,to,be,suspended,execution,graph,set,job,status,job,status,suspended,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,3
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSwitchToSuspended() throws Exception;1550683188;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} changes its_state to {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_JobManager.;@Test_	public void testCacheInvalidationIfSwitchToSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID expectedJobId = new JobID()___		final SuspendableAccessExecutionGraph toBeSuspendedExecutionGraph = new SuspendableAccessExecutionGraph(expectedJobId)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			CompletableFuture.completedFuture(toBeSuspendedExecutionGraph),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(toBeSuspendedExecutionGraph, executionGraphFuture.get())___			toBeSuspendedExecutionGraph.setJobStatus(JobStatus.SUSPENDED)___			_			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(2))__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,changes,its,state,to,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,job,manager;test,public,void,test,cache,invalidation,if,switch,to,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,expected,job,id,new,job,id,final,suspendable,access,execution,graph,to,be,suspended,execution,graph,new,suspendable,access,execution,graph,expected,job,id,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,to,be,suspended,execution,graph,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,to,be,suspended,execution,graph,execution,graph,future,get,to,be,suspended,execution,graph,set,job,status,job,status,suspended,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,2
ExecutionGraphCacheTest -> @Test 	public void testCacheInvalidationIfSwitchToSuspended() throws Exception;1550683189;Tests that a cache entry is invalidated if the retrieved {@link AccessExecutionGraph} changes its_state to {@link JobStatus#SUSPENDED}.__<p>This test can be removed once we no longer request the actual {@link ExecutionGraph} from the_JobManager.;@Test_	public void testCacheInvalidationIfSwitchToSuspended() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.hours(1L)__		final JobID expectedJobId = new JobID()___		final SuspendableAccessExecutionGraph toBeSuspendedExecutionGraph = new SuspendableAccessExecutionGraph(expectedJobId)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			CompletableFuture.completedFuture(toBeSuspendedExecutionGraph),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(toBeSuspendedExecutionGraph, executionGraphFuture.get())___			toBeSuspendedExecutionGraph.setJobStatus(JobStatus.SUSPENDED)___			_			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(2))__		}_	};tests,that,a,cache,entry,is,invalidated,if,the,retrieved,link,access,execution,graph,changes,its,state,to,link,job,status,suspended,p,this,test,can,be,removed,once,we,no,longer,request,the,actual,link,execution,graph,from,the,job,manager;test,public,void,test,cache,invalidation,if,switch,to,suspended,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,hours,1l,final,job,id,expected,job,id,new,job,id,final,suspendable,access,execution,graph,to,be,suspended,execution,graph,new,suspendable,access,execution,graph,expected,job,id,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,to,be,suspended,execution,graph,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,to,be,suspended,execution,graph,execution,graph,future,get,to,be,suspended,execution,graph,set,job,status,job,status,suspended,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,2
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphEntryInvalidation() throws Exception;1506967078;Tests that an AccessExecutionGraph is invalidated after its TTL expired.;@Test_	public void testExecutionGraphEntryInvalidation() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)__		final JobID jobId = new JobID()__		final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn(CompletableFuture.completedFuture(accessExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, executionGraphFuture.get())___			_			Thread.sleep(timeToLive.toMilliseconds())___			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, executionGraphFuture2.get())___			verify(jobManagerGateway, times(2)).requestJob(eq(jobId), any(Time.class))__		}_	};tests,that,an,access,execution,graph,is,invalidated,after,its,ttl,expired;test,public,void,test,execution,graph,entry,invalidation,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,job,id,job,id,new,job,id,final,access,execution,graph,access,execution,graph,mock,access,execution,graph,class,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id,any,time,class,then,return,completable,future,completed,future,access,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,execution,graph,future,get,thread,sleep,time,to,live,to,milliseconds,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,execution,graph,future2,get,verify,job,manager,gateway,times,2,request,job,eq,job,id,any,time,class
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphEntryInvalidation() throws Exception;1512567202;Tests that an AccessExecutionGraph is invalidated after its TTL expired.;@Test_	public void testExecutionGraphEntryInvalidation() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)__		final JobID jobId = new JobID()__		final AccessExecutionGraph accessExecutionGraph = mock(AccessExecutionGraph.class)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		when(jobManagerGateway.requestJob(eq(jobId), any(Time.class))).thenReturn(CompletableFuture.completedFuture(accessExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, executionGraphFuture.get())___			_			Thread.sleep(timeToLive.toMilliseconds())___			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(jobId, jobManagerGateway)___			assertEquals(accessExecutionGraph, executionGraphFuture2.get())___			verify(jobManagerGateway, times(2)).requestJob(eq(jobId), any(Time.class))__		}_	};tests,that,an,access,execution,graph,is,invalidated,after,its,ttl,expired;test,public,void,test,execution,graph,entry,invalidation,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,job,id,job,id,new,job,id,final,access,execution,graph,access,execution,graph,mock,access,execution,graph,class,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id,any,time,class,then,return,completable,future,completed,future,access,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,execution,graph,future,get,thread,sleep,time,to,live,to,milliseconds,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,job,id,job,manager,gateway,assert,equals,access,execution,graph,execution,graph,future2,get,verify,job,manager,gateway,times,2,request,job,eq,job,id,any,time,class
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphEntryInvalidation() throws Exception;1516970998;Tests that an AccessExecutionGraph is invalidated after its TTL expired.;@Test_	public void testExecutionGraphEntryInvalidation() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			CompletableFuture.completedFuture(expectedExecutionGraph),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			_			Thread.sleep(timeToLive.toMilliseconds() * 5L)___			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(2))__		}_	};tests,that,an,access,execution,graph,is,invalidated,after,its,ttl,expired;test,public,void,test,execution,graph,entry,invalidation,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,thread,sleep,time,to,live,to,milliseconds,5l,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,2
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphEntryInvalidation() throws Exception;1519317157;Tests that an AccessExecutionGraph is invalidated after its TTL expired.;@Test_	public void testExecutionGraphEntryInvalidation() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			CompletableFuture.completedFuture(expectedExecutionGraph),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			_			Thread.sleep(timeToLive.toMilliseconds() * 5L)___			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(2))__		}_	};tests,that,an,access,execution,graph,is,invalidated,after,its,ttl,expired;test,public,void,test,execution,graph,entry,invalidation,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,thread,sleep,time,to,live,to,milliseconds,5l,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,2
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphEntryInvalidation() throws Exception;1550568580;Tests that an AccessExecutionGraph is invalidated after its TTL expired.;@Test_	public void testExecutionGraphEntryInvalidation() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			CompletableFuture.completedFuture(expectedExecutionGraph),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			_			Thread.sleep(timeToLive.toMilliseconds() * 5L)___			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(2))__		}_	};tests,that,an,access,execution,graph,is,invalidated,after,its,ttl,expired;test,public,void,test,execution,graph,entry,invalidation,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,thread,sleep,time,to,live,to,milliseconds,5l,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,2
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphEntryInvalidation() throws Exception;1550683188;Tests that an AccessExecutionGraph is invalidated after its TTL expired.;@Test_	public void testExecutionGraphEntryInvalidation() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			CompletableFuture.completedFuture(expectedExecutionGraph),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			_			Thread.sleep(timeToLive.toMilliseconds() * 5L)___			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(2))__		}_	};tests,that,an,access,execution,graph,is,invalidated,after,its,ttl,expired;test,public,void,test,execution,graph,entry,invalidation,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,thread,sleep,time,to,live,to,milliseconds,5l,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,2
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphEntryInvalidation() throws Exception;1550683189;Tests that an AccessExecutionGraph is invalidated after its TTL expired.;@Test_	public void testExecutionGraphEntryInvalidation() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			CompletableFuture.completedFuture(expectedExecutionGraph),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			_			Thread.sleep(timeToLive.toMilliseconds() * 5L)___			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(2))__		}_	};tests,that,an,access,execution,graph,is,invalidated,after,its,ttl,expired;test,public,void,test,execution,graph,entry,invalidation,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,thread,sleep,time,to,live,to,milliseconds,5l,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,2
ExecutionGraphCacheTest -> @Test 	public void testExecutionGraphEntryInvalidation() throws Exception;1550683189;Tests that an AccessExecutionGraph is invalidated after its TTL expired.;@Test_	public void testExecutionGraphEntryInvalidation() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)___		final CountingRestfulGateway restfulGateway = createCountingRestfulGateway(_			expectedJobId,_			CompletableFuture.completedFuture(expectedExecutionGraph),_			CompletableFuture.completedFuture(expectedExecutionGraph))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {_			CompletableFuture<AccessExecutionGraph> executionGraphFuture = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture.get())___			_			Thread.sleep(timeToLive.toMilliseconds() * 5L)___			CompletableFuture<AccessExecutionGraph> executionGraphFuture2 = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraphFuture2.get())___			assertThat(restfulGateway.getNumRequestJobCalls(), Matchers.equalTo(2))__		}_	};tests,that,an,access,execution,graph,is,invalidated,after,its,ttl,expired;test,public,void,test,execution,graph,entry,invalidation,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,counting,restful,gateway,restful,gateway,create,counting,restful,gateway,expected,job,id,completable,future,completed,future,expected,execution,graph,completable,future,completed,future,expected,execution,graph,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph,future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future,get,thread,sleep,time,to,live,to,milliseconds,5l,completable,future,access,execution,graph,execution,graph,future2,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,assert,equals,expected,execution,graph,execution,graph,future2,get,assert,that,restful,gateway,get,num,request,job,calls,matchers,equal,to,2
ExecutionGraphCacheTest -> @Test 	public void testCacheEntryCleanup() throws Exception;1506967078;Tests that cache entries are cleaned up when their TTL has expired upon_calling {@link ExecutionGraphCache#cleanup()}.;@Test_	public void testCacheEntryCleanup() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)__		final JobID jobId1 = new JobID()__		final JobID jobId2 = new JobID()__		final AccessExecutionGraph accessExecutionGraph1 = mock(AccessExecutionGraph.class)__		final AccessExecutionGraph accessExecutionGraph2 = mock(AccessExecutionGraph.class)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		when(jobManagerGateway.requestJob(eq(jobId1), any(Time.class))).thenReturn(CompletableFuture.completedFuture(accessExecutionGraph1))__		when(jobManagerGateway.requestJob(eq(jobId2), any(Time.class))).thenReturn(CompletableFuture.completedFuture(accessExecutionGraph2))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {__			CompletableFuture<AccessExecutionGraph> executionGraph1Future = executionGraphCache.getExecutionGraph(jobId1, jobManagerGateway)___			CompletableFuture<AccessExecutionGraph> executionGraph2Future = executionGraphCache.getExecutionGraph(jobId2, jobManagerGateway)___			assertEquals(accessExecutionGraph1, executionGraph1Future.get())___			assertEquals(accessExecutionGraph2, executionGraph2Future.get())___			verify(jobManagerGateway, times(1)).requestJob(eq(jobId1), any(Time.class))__			verify(jobManagerGateway, times(1)).requestJob(eq(jobId2), any(Time.class))___			Thread.sleep(timeToLive.toMilliseconds())___			executionGraphCache.cleanup()___			assertTrue(executionGraphCache.size() == 0)__		}_	};tests,that,cache,entries,are,cleaned,up,when,their,ttl,has,expired,upon,calling,link,execution,graph,cache,cleanup;test,public,void,test,cache,entry,cleanup,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,job,id,job,id1,new,job,id,final,job,id,job,id2,new,job,id,final,access,execution,graph,access,execution,graph1,mock,access,execution,graph,class,final,access,execution,graph,access,execution,graph2,mock,access,execution,graph,class,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id1,any,time,class,then,return,completable,future,completed,future,access,execution,graph1,when,job,manager,gateway,request,job,eq,job,id2,any,time,class,then,return,completable,future,completed,future,access,execution,graph2,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph1future,execution,graph,cache,get,execution,graph,job,id1,job,manager,gateway,completable,future,access,execution,graph,execution,graph2future,execution,graph,cache,get,execution,graph,job,id2,job,manager,gateway,assert,equals,access,execution,graph1,execution,graph1future,get,assert,equals,access,execution,graph2,execution,graph2future,get,verify,job,manager,gateway,times,1,request,job,eq,job,id1,any,time,class,verify,job,manager,gateway,times,1,request,job,eq,job,id2,any,time,class,thread,sleep,time,to,live,to,milliseconds,execution,graph,cache,cleanup,assert,true,execution,graph,cache,size,0
ExecutionGraphCacheTest -> @Test 	public void testCacheEntryCleanup() throws Exception;1512567202;Tests that cache entries are cleaned up when their TTL has expired upon_calling {@link ExecutionGraphCache#cleanup()}.;@Test_	public void testCacheEntryCleanup() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)__		final JobID jobId1 = new JobID()__		final JobID jobId2 = new JobID()__		final AccessExecutionGraph accessExecutionGraph1 = mock(AccessExecutionGraph.class)__		final AccessExecutionGraph accessExecutionGraph2 = mock(AccessExecutionGraph.class)___		final JobManagerGateway jobManagerGateway = mock(JobManagerGateway.class)__		when(jobManagerGateway.requestJob(eq(jobId1), any(Time.class))).thenReturn(CompletableFuture.completedFuture(accessExecutionGraph1))__		when(jobManagerGateway.requestJob(eq(jobId2), any(Time.class))).thenReturn(CompletableFuture.completedFuture(accessExecutionGraph2))___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {__			CompletableFuture<AccessExecutionGraph> executionGraph1Future = executionGraphCache.getExecutionGraph(jobId1, jobManagerGateway)___			CompletableFuture<AccessExecutionGraph> executionGraph2Future = executionGraphCache.getExecutionGraph(jobId2, jobManagerGateway)___			assertEquals(accessExecutionGraph1, executionGraph1Future.get())___			assertEquals(accessExecutionGraph2, executionGraph2Future.get())___			verify(jobManagerGateway, times(1)).requestJob(eq(jobId1), any(Time.class))__			verify(jobManagerGateway, times(1)).requestJob(eq(jobId2), any(Time.class))___			Thread.sleep(timeToLive.toMilliseconds())___			executionGraphCache.cleanup()___			assertTrue(executionGraphCache.size() == 0)__		}_	};tests,that,cache,entries,are,cleaned,up,when,their,ttl,has,expired,upon,calling,link,execution,graph,cache,cleanup;test,public,void,test,cache,entry,cleanup,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,job,id,job,id1,new,job,id,final,job,id,job,id2,new,job,id,final,access,execution,graph,access,execution,graph1,mock,access,execution,graph,class,final,access,execution,graph,access,execution,graph2,mock,access,execution,graph,class,final,job,manager,gateway,job,manager,gateway,mock,job,manager,gateway,class,when,job,manager,gateway,request,job,eq,job,id1,any,time,class,then,return,completable,future,completed,future,access,execution,graph1,when,job,manager,gateway,request,job,eq,job,id2,any,time,class,then,return,completable,future,completed,future,access,execution,graph2,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph1future,execution,graph,cache,get,execution,graph,job,id1,job,manager,gateway,completable,future,access,execution,graph,execution,graph2future,execution,graph,cache,get,execution,graph,job,id2,job,manager,gateway,assert,equals,access,execution,graph1,execution,graph1future,get,assert,equals,access,execution,graph2,execution,graph2future,get,verify,job,manager,gateway,times,1,request,job,eq,job,id1,any,time,class,verify,job,manager,gateway,times,1,request,job,eq,job,id2,any,time,class,thread,sleep,time,to,live,to,milliseconds,execution,graph,cache,cleanup,assert,true,execution,graph,cache,size,0
ExecutionGraphCacheTest -> @Test 	public void testCacheEntryCleanup() throws Exception;1516970998;Tests that cache entries are cleaned up when their TTL has expired upon_calling {@link ExecutionGraphCache#cleanup()}.;@Test_	public void testCacheEntryCleanup() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)__		final JobID expectedJobId2 = new JobID()__		final ArchivedExecutionGraph expectedExecutionGraph2 = new ArchivedExecutionGraphBuilder().build()___		final AtomicInteger requestJobCalls = new AtomicInteger(0)__		final TestingRestfulGateway restfulGateway = TestingRestfulGateway.newBuilder()_			.setRequestJobFunction(_				jobId -> {_					requestJobCalls.incrementAndGet()__					if (jobId.equals(expectedJobId)) {_						return CompletableFuture.completedFuture(expectedExecutionGraph)__					} else if (jobId.equals(expectedJobId2)) {_						return CompletableFuture.completedFuture(expectedExecutionGraph2)__					} else {_						throw new AssertionError("Invalid job id received.")__					}_				}_			)_			.build()___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {__			CompletableFuture<AccessExecutionGraph> executionGraph1Future = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			CompletableFuture<AccessExecutionGraph> executionGraph2Future = executionGraphCache.getExecutionGraph(expectedJobId2, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraph1Future.get())___			assertEquals(expectedExecutionGraph2, executionGraph2Future.get())___			assertThat(requestJobCalls.get(), Matchers.equalTo(2))___			Thread.sleep(timeToLive.toMilliseconds())___			executionGraphCache.cleanup()___			assertTrue(executionGraphCache.size() == 0)__		}_	};tests,that,cache,entries,are,cleaned,up,when,their,ttl,has,expired,upon,calling,link,execution,graph,cache,cleanup;test,public,void,test,cache,entry,cleanup,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,job,id,expected,job,id2,new,job,id,final,archived,execution,graph,expected,execution,graph2,new,archived,execution,graph,builder,build,final,atomic,integer,request,job,calls,new,atomic,integer,0,final,testing,restful,gateway,restful,gateway,testing,restful,gateway,new,builder,set,request,job,function,job,id,request,job,calls,increment,and,get,if,job,id,equals,expected,job,id,return,completable,future,completed,future,expected,execution,graph,else,if,job,id,equals,expected,job,id2,return,completable,future,completed,future,expected,execution,graph2,else,throw,new,assertion,error,invalid,job,id,received,build,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph1future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,completable,future,access,execution,graph,execution,graph2future,execution,graph,cache,get,execution,graph,expected,job,id2,restful,gateway,assert,equals,expected,execution,graph,execution,graph1future,get,assert,equals,expected,execution,graph2,execution,graph2future,get,assert,that,request,job,calls,get,matchers,equal,to,2,thread,sleep,time,to,live,to,milliseconds,execution,graph,cache,cleanup,assert,true,execution,graph,cache,size,0
ExecutionGraphCacheTest -> @Test 	public void testCacheEntryCleanup() throws Exception;1519317157;Tests that cache entries are cleaned up when their TTL has expired upon_calling {@link ExecutionGraphCache#cleanup()}.;@Test_	public void testCacheEntryCleanup() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)__		final JobID expectedJobId2 = new JobID()__		final ArchivedExecutionGraph expectedExecutionGraph2 = new ArchivedExecutionGraphBuilder().build()___		final AtomicInteger requestJobCalls = new AtomicInteger(0)__		final TestingRestfulGateway restfulGateway = TestingRestfulGateway.newBuilder()_			.setRequestJobFunction(_				jobId -> {_					requestJobCalls.incrementAndGet()__					if (jobId.equals(expectedJobId)) {_						return CompletableFuture.completedFuture(expectedExecutionGraph)__					} else if (jobId.equals(expectedJobId2)) {_						return CompletableFuture.completedFuture(expectedExecutionGraph2)__					} else {_						throw new AssertionError("Invalid job id received.")__					}_				}_			)_			.build()___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {__			CompletableFuture<AccessExecutionGraph> executionGraph1Future = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			CompletableFuture<AccessExecutionGraph> executionGraph2Future = executionGraphCache.getExecutionGraph(expectedJobId2, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraph1Future.get())___			assertEquals(expectedExecutionGraph2, executionGraph2Future.get())___			assertThat(requestJobCalls.get(), Matchers.equalTo(2))___			Thread.sleep(timeToLive.toMilliseconds())___			executionGraphCache.cleanup()___			assertTrue(executionGraphCache.size() == 0)__		}_	};tests,that,cache,entries,are,cleaned,up,when,their,ttl,has,expired,upon,calling,link,execution,graph,cache,cleanup;test,public,void,test,cache,entry,cleanup,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,job,id,expected,job,id2,new,job,id,final,archived,execution,graph,expected,execution,graph2,new,archived,execution,graph,builder,build,final,atomic,integer,request,job,calls,new,atomic,integer,0,final,testing,restful,gateway,restful,gateway,testing,restful,gateway,new,builder,set,request,job,function,job,id,request,job,calls,increment,and,get,if,job,id,equals,expected,job,id,return,completable,future,completed,future,expected,execution,graph,else,if,job,id,equals,expected,job,id2,return,completable,future,completed,future,expected,execution,graph2,else,throw,new,assertion,error,invalid,job,id,received,build,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph1future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,completable,future,access,execution,graph,execution,graph2future,execution,graph,cache,get,execution,graph,expected,job,id2,restful,gateway,assert,equals,expected,execution,graph,execution,graph1future,get,assert,equals,expected,execution,graph2,execution,graph2future,get,assert,that,request,job,calls,get,matchers,equal,to,2,thread,sleep,time,to,live,to,milliseconds,execution,graph,cache,cleanup,assert,true,execution,graph,cache,size,0
ExecutionGraphCacheTest -> @Test 	public void testCacheEntryCleanup() throws Exception;1550568580;Tests that cache entries are cleaned up when their TTL has expired upon_calling {@link ExecutionGraphCache#cleanup()}.;@Test_	public void testCacheEntryCleanup() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)__		final JobID expectedJobId2 = new JobID()__		final ArchivedExecutionGraph expectedExecutionGraph2 = new ArchivedExecutionGraphBuilder().build()___		final AtomicInteger requestJobCalls = new AtomicInteger(0)__		final TestingRestfulGateway restfulGateway = TestingRestfulGateway.newBuilder()_			.setRequestJobFunction(_				jobId -> {_					requestJobCalls.incrementAndGet()__					if (jobId.equals(expectedJobId)) {_						return CompletableFuture.completedFuture(expectedExecutionGraph)__					} else if (jobId.equals(expectedJobId2)) {_						return CompletableFuture.completedFuture(expectedExecutionGraph2)__					} else {_						throw new AssertionError("Invalid job id received.")__					}_				}_			)_			.build()___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {__			CompletableFuture<AccessExecutionGraph> executionGraph1Future = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			CompletableFuture<AccessExecutionGraph> executionGraph2Future = executionGraphCache.getExecutionGraph(expectedJobId2, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraph1Future.get())___			assertEquals(expectedExecutionGraph2, executionGraph2Future.get())___			assertThat(requestJobCalls.get(), Matchers.equalTo(2))___			Thread.sleep(timeToLive.toMilliseconds())___			executionGraphCache.cleanup()___			assertTrue(executionGraphCache.size() == 0)__		}_	};tests,that,cache,entries,are,cleaned,up,when,their,ttl,has,expired,upon,calling,link,execution,graph,cache,cleanup;test,public,void,test,cache,entry,cleanup,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,job,id,expected,job,id2,new,job,id,final,archived,execution,graph,expected,execution,graph2,new,archived,execution,graph,builder,build,final,atomic,integer,request,job,calls,new,atomic,integer,0,final,testing,restful,gateway,restful,gateway,testing,restful,gateway,new,builder,set,request,job,function,job,id,request,job,calls,increment,and,get,if,job,id,equals,expected,job,id,return,completable,future,completed,future,expected,execution,graph,else,if,job,id,equals,expected,job,id2,return,completable,future,completed,future,expected,execution,graph2,else,throw,new,assertion,error,invalid,job,id,received,build,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph1future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,completable,future,access,execution,graph,execution,graph2future,execution,graph,cache,get,execution,graph,expected,job,id2,restful,gateway,assert,equals,expected,execution,graph,execution,graph1future,get,assert,equals,expected,execution,graph2,execution,graph2future,get,assert,that,request,job,calls,get,matchers,equal,to,2,thread,sleep,time,to,live,to,milliseconds,execution,graph,cache,cleanup,assert,true,execution,graph,cache,size,0
ExecutionGraphCacheTest -> @Test 	public void testCacheEntryCleanup() throws Exception;1550683188;Tests that cache entries are cleaned up when their TTL has expired upon_calling {@link ExecutionGraphCache#cleanup()}.;@Test_	public void testCacheEntryCleanup() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)__		final JobID expectedJobId2 = new JobID()__		final ArchivedExecutionGraph expectedExecutionGraph2 = new ArchivedExecutionGraphBuilder().build()___		final AtomicInteger requestJobCalls = new AtomicInteger(0)__		final TestingRestfulGateway restfulGateway = TestingRestfulGateway.newBuilder()_			.setRequestJobFunction(_				jobId -> {_					requestJobCalls.incrementAndGet()__					if (jobId.equals(expectedJobId)) {_						return CompletableFuture.completedFuture(expectedExecutionGraph)__					} else if (jobId.equals(expectedJobId2)) {_						return CompletableFuture.completedFuture(expectedExecutionGraph2)__					} else {_						throw new AssertionError("Invalid job id received.")__					}_				}_			)_			.build()___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {__			CompletableFuture<AccessExecutionGraph> executionGraph1Future = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			CompletableFuture<AccessExecutionGraph> executionGraph2Future = executionGraphCache.getExecutionGraph(expectedJobId2, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraph1Future.get())___			assertEquals(expectedExecutionGraph2, executionGraph2Future.get())___			assertThat(requestJobCalls.get(), Matchers.equalTo(2))___			Thread.sleep(timeToLive.toMilliseconds())___			executionGraphCache.cleanup()___			assertTrue(executionGraphCache.size() == 0)__		}_	};tests,that,cache,entries,are,cleaned,up,when,their,ttl,has,expired,upon,calling,link,execution,graph,cache,cleanup;test,public,void,test,cache,entry,cleanup,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,job,id,expected,job,id2,new,job,id,final,archived,execution,graph,expected,execution,graph2,new,archived,execution,graph,builder,build,final,atomic,integer,request,job,calls,new,atomic,integer,0,final,testing,restful,gateway,restful,gateway,testing,restful,gateway,new,builder,set,request,job,function,job,id,request,job,calls,increment,and,get,if,job,id,equals,expected,job,id,return,completable,future,completed,future,expected,execution,graph,else,if,job,id,equals,expected,job,id2,return,completable,future,completed,future,expected,execution,graph2,else,throw,new,assertion,error,invalid,job,id,received,build,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph1future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,completable,future,access,execution,graph,execution,graph2future,execution,graph,cache,get,execution,graph,expected,job,id2,restful,gateway,assert,equals,expected,execution,graph,execution,graph1future,get,assert,equals,expected,execution,graph2,execution,graph2future,get,assert,that,request,job,calls,get,matchers,equal,to,2,thread,sleep,time,to,live,to,milliseconds,execution,graph,cache,cleanup,assert,true,execution,graph,cache,size,0
ExecutionGraphCacheTest -> @Test 	public void testCacheEntryCleanup() throws Exception;1550683189;Tests that cache entries are cleaned up when their TTL has expired upon_calling {@link ExecutionGraphCache#cleanup()}.;@Test_	public void testCacheEntryCleanup() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)__		final JobID expectedJobId2 = new JobID()__		final ArchivedExecutionGraph expectedExecutionGraph2 = new ArchivedExecutionGraphBuilder().build()___		final AtomicInteger requestJobCalls = new AtomicInteger(0)__		final TestingRestfulGateway restfulGateway = TestingRestfulGateway.newBuilder()_			.setRequestJobFunction(_				jobId -> {_					requestJobCalls.incrementAndGet()__					if (jobId.equals(expectedJobId)) {_						return CompletableFuture.completedFuture(expectedExecutionGraph)__					} else if (jobId.equals(expectedJobId2)) {_						return CompletableFuture.completedFuture(expectedExecutionGraph2)__					} else {_						throw new AssertionError("Invalid job id received.")__					}_				}_			)_			.build()___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {__			CompletableFuture<AccessExecutionGraph> executionGraph1Future = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			CompletableFuture<AccessExecutionGraph> executionGraph2Future = executionGraphCache.getExecutionGraph(expectedJobId2, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraph1Future.get())___			assertEquals(expectedExecutionGraph2, executionGraph2Future.get())___			assertThat(requestJobCalls.get(), Matchers.equalTo(2))___			Thread.sleep(timeToLive.toMilliseconds())___			executionGraphCache.cleanup()___			assertTrue(executionGraphCache.size() == 0)__		}_	};tests,that,cache,entries,are,cleaned,up,when,their,ttl,has,expired,upon,calling,link,execution,graph,cache,cleanup;test,public,void,test,cache,entry,cleanup,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,job,id,expected,job,id2,new,job,id,final,archived,execution,graph,expected,execution,graph2,new,archived,execution,graph,builder,build,final,atomic,integer,request,job,calls,new,atomic,integer,0,final,testing,restful,gateway,restful,gateway,testing,restful,gateway,new,builder,set,request,job,function,job,id,request,job,calls,increment,and,get,if,job,id,equals,expected,job,id,return,completable,future,completed,future,expected,execution,graph,else,if,job,id,equals,expected,job,id2,return,completable,future,completed,future,expected,execution,graph2,else,throw,new,assertion,error,invalid,job,id,received,build,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph1future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,completable,future,access,execution,graph,execution,graph2future,execution,graph,cache,get,execution,graph,expected,job,id2,restful,gateway,assert,equals,expected,execution,graph,execution,graph1future,get,assert,equals,expected,execution,graph2,execution,graph2future,get,assert,that,request,job,calls,get,matchers,equal,to,2,thread,sleep,time,to,live,to,milliseconds,execution,graph,cache,cleanup,assert,true,execution,graph,cache,size,0
ExecutionGraphCacheTest -> @Test 	public void testCacheEntryCleanup() throws Exception;1550683189;Tests that cache entries are cleaned up when their TTL has expired upon_calling {@link ExecutionGraphCache#cleanup()}.;@Test_	public void testCacheEntryCleanup() throws Exception {_		final Time timeout = Time.milliseconds(100L)__		final Time timeToLive = Time.milliseconds(1L)__		final JobID expectedJobId2 = new JobID()__		final ArchivedExecutionGraph expectedExecutionGraph2 = new ArchivedExecutionGraphBuilder().build()___		final AtomicInteger requestJobCalls = new AtomicInteger(0)__		final TestingRestfulGateway restfulGateway = TestingRestfulGateway.newBuilder()_			.setRequestJobFunction(_				jobId -> {_					requestJobCalls.incrementAndGet()__					if (jobId.equals(expectedJobId)) {_						return CompletableFuture.completedFuture(expectedExecutionGraph)__					} else if (jobId.equals(expectedJobId2)) {_						return CompletableFuture.completedFuture(expectedExecutionGraph2)__					} else {_						throw new AssertionError("Invalid job id received.")__					}_				}_			)_			.build()___		try (ExecutionGraphCache executionGraphCache = new ExecutionGraphCache(timeout, timeToLive)) {__			CompletableFuture<AccessExecutionGraph> executionGraph1Future = executionGraphCache.getExecutionGraph(expectedJobId, restfulGateway)___			CompletableFuture<AccessExecutionGraph> executionGraph2Future = executionGraphCache.getExecutionGraph(expectedJobId2, restfulGateway)___			assertEquals(expectedExecutionGraph, executionGraph1Future.get())___			assertEquals(expectedExecutionGraph2, executionGraph2Future.get())___			assertThat(requestJobCalls.get(), Matchers.equalTo(2))___			Thread.sleep(timeToLive.toMilliseconds())___			executionGraphCache.cleanup()___			assertTrue(executionGraphCache.size() == 0)__		}_	};tests,that,cache,entries,are,cleaned,up,when,their,ttl,has,expired,upon,calling,link,execution,graph,cache,cleanup;test,public,void,test,cache,entry,cleanup,throws,exception,final,time,timeout,time,milliseconds,100l,final,time,time,to,live,time,milliseconds,1l,final,job,id,expected,job,id2,new,job,id,final,archived,execution,graph,expected,execution,graph2,new,archived,execution,graph,builder,build,final,atomic,integer,request,job,calls,new,atomic,integer,0,final,testing,restful,gateway,restful,gateway,testing,restful,gateway,new,builder,set,request,job,function,job,id,request,job,calls,increment,and,get,if,job,id,equals,expected,job,id,return,completable,future,completed,future,expected,execution,graph,else,if,job,id,equals,expected,job,id2,return,completable,future,completed,future,expected,execution,graph2,else,throw,new,assertion,error,invalid,job,id,received,build,try,execution,graph,cache,execution,graph,cache,new,execution,graph,cache,timeout,time,to,live,completable,future,access,execution,graph,execution,graph1future,execution,graph,cache,get,execution,graph,expected,job,id,restful,gateway,completable,future,access,execution,graph,execution,graph2future,execution,graph,cache,get,execution,graph,expected,job,id2,restful,gateway,assert,equals,expected,execution,graph,execution,graph1future,get,assert,equals,expected,execution,graph2,execution,graph2future,get,assert,that,request,job,calls,get,matchers,equal,to,2,thread,sleep,time,to,live,to,milliseconds,execution,graph,cache,cleanup,assert,true,execution,graph,cache,size,0
