commented;modifiers;parameterAmount;loc;comment;code
true;public;1;6;/**  * Executes the given supplier with the main thread executor until completion, returns the result or a exception.  * This method blocks until the execution is complete.  */ ;/**  * Executes the given supplier with the main thread executor until completion, returns the result or a exception.  * This method blocks until the execution is complete.  */ public <U> U execute(@Nonnull SupplierWithException<U, Throwable> supplierWithException) {     return CompletableFuture.supplyAsync(FunctionUtils.uncheckedSupplier(supplierWithException), mainThreadExecutor).join(). }
true;public;1;6;/**  * Executes the given runnable with the main thread executor and blocks until completion.  */ ;/**  * Executes the given runnable with the main thread executor and blocks until completion.  */ public void execute(@Nonnull ThrowingRunnable<Throwable> throwingRunnable) {     execute(() -> {         throwingRunnable.run().         return null.     }). }
false;public;0;4;;@Nonnull public TestingComponentMainThreadExecutorServiceAdapter getMainThreadExecutor() {     return mainThreadExecutor. }
false;protected;0;7;;@Override protected void before() {     this.innerExecutorService = Executors.newSingleThreadScheduledExecutor().     this.componentMainThreadTestExecutor = new TestingComponentMainThreadExecutor(TestingComponentMainThreadExecutorServiceAdapter.forSingleThreadExecutor(innerExecutorService)). }
false;protected;0;4;;@Override protected void after() {     ExecutorUtils.gracefulShutdown(shutdownTimeoutMillis, TimeUnit.MILLISECONDS, innerExecutorService). }
false;public;0;3;;public TestingComponentMainThreadExecutor getComponentMainThreadTestExecutor() {     return componentMainThreadTestExecutor. }
