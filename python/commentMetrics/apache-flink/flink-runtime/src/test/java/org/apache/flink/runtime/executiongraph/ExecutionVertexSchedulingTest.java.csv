commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Test public void testSlotReleasedWhenScheduledImmediately() {     try {         final ExecutionJobVertex ejv = getExecutionVertex(new JobVertexID()).         final ExecutionVertex vertex = new ExecutionVertex(ejv, 0, new IntermediateResult[0], AkkaUtils.getDefaultTimeout()).         // a slot than cannot be deployed to         final LogicalSlot slot = new TestingLogicalSlot().         slot.releaseSlot(new Exception("Test Exception")).         assertFalse(slot.isAlive()).         CompletableFuture<LogicalSlot> future = new CompletableFuture<>().         future.complete(slot).         assertEquals(ExecutionState.CREATED, vertex.getExecutionState()).         // try to deploy to the slot         vertex.scheduleForExecution(new TestingSlotProvider((i) -> future), false, LocationPreferenceConstraint.ALL, Collections.emptySet()).         // will have failed         assertEquals(ExecutionState.FAILED, vertex.getExecutionState()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;36;;@Test public void testSlotReleasedWhenScheduledQueued() {     try {         final ExecutionJobVertex ejv = getExecutionVertex(new JobVertexID()).         final ExecutionVertex vertex = new ExecutionVertex(ejv, 0, new IntermediateResult[0], AkkaUtils.getDefaultTimeout()).         // a slot than cannot be deployed to         final LogicalSlot slot = new TestingLogicalSlot().         slot.releaseSlot(new Exception("Test Exception")).         assertFalse(slot.isAlive()).         final CompletableFuture<LogicalSlot> future = new CompletableFuture<>().         assertEquals(ExecutionState.CREATED, vertex.getExecutionState()).         // try to deploy to the slot         vertex.scheduleForExecution(new TestingSlotProvider(ignore -> future), true, LocationPreferenceConstraint.ALL, Collections.emptySet()).         // future has not yet a slot         assertEquals(ExecutionState.SCHEDULED, vertex.getExecutionState()).         future.complete(slot).         // will have failed         assertEquals(ExecutionState.FAILED, vertex.getExecutionState()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
false;public;0;26;;@Test public void testScheduleToDeploying() {     try {         final ExecutionJobVertex ejv = getExecutionVertex(new JobVertexID()).         final ExecutionVertex vertex = new ExecutionVertex(ejv, 0, new IntermediateResult[0], AkkaUtils.getDefaultTimeout()).         final LogicalSlot slot = new TestingLogicalSlot().         CompletableFuture<LogicalSlot> future = CompletableFuture.completedFuture(slot).         assertEquals(ExecutionState.CREATED, vertex.getExecutionState()).         // try to deploy to the slot         vertex.scheduleForExecution(new TestingSlotProvider(ignore -> future), false, LocationPreferenceConstraint.ALL, Collections.emptySet()).         assertEquals(ExecutionState.DEPLOYING, vertex.getExecutionState()).     } catch (Exception e) {         e.printStackTrace().         fail(e.getMessage()).     } }
