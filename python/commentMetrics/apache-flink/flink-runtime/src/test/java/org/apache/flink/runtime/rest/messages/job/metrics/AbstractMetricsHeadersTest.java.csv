commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public EmptyMessageParameters getUnresolvedMessageParameters() {     return EmptyMessageParameters.getInstance(). }
false;public;0;4;;@Override public String getTargetRestEndpointURL() {     return "/". }
false;public;0;4;;@Override public String getDescription() {     return "". }
false;public;0;19;;@Before public void setUp() throws Exception {     metricsHandlerHeaders = new AbstractMetricsHeaders<EmptyMessageParameters>() {          @Override         public EmptyMessageParameters getUnresolvedMessageParameters() {             return EmptyMessageParameters.getInstance().         }          @Override         public String getTargetRestEndpointURL() {             return "/".         }          @Override         public String getDescription() {             return "".         }     }. }
false;public;0;4;;@Test public void testHttpMethod() {     assertThat(metricsHandlerHeaders.getHttpMethod(), equalTo(HttpMethodWrapper.GET)). }
false;public;0;4;;@Test public void testResponseStatus() {     assertThat(metricsHandlerHeaders.getResponseStatusCode(), equalTo(HttpResponseStatus.OK)). }
false;public;0;4;;@Test public void testRequestClass() {     assertThat(metricsHandlerHeaders.getRequestClass(), equalTo(EmptyRequestBody.class)). }
false;public;0;4;;@Test public void testResponseClass() {     assertThat(metricsHandlerHeaders.getResponseClass(), equalTo(MetricCollectionResponseBody.class)). }
