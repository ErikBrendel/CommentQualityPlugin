commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getNumberSlots() {     return numberSlots. }
false;public;0;3;;public MiniCluster getMiniCluster() {     return miniCluster. }
false;public;0;3;;public UnmodifiableConfiguration getClientConfiguration() {     return restClusterClientConfig. }
false;public;0;3;;public URI getRestAddres() {     return miniCluster.getRestAddress().join(). }
false;public;0;8;;@Override public void before() throws Exception {     temporaryFolder.create().     startMiniCluster().     numberSlots = miniClusterResourceConfiguration.getNumberSlotsPerTaskManager() * miniClusterResourceConfiguration.getNumberTaskManagers(). }
false;public;0;24;;@Override public void after() {     temporaryFolder.delete().     Exception exception = null.     if (miniCluster != null) {         final CompletableFuture<?> terminationFuture = miniCluster.closeAsync().         try {             terminationFuture.get(miniClusterResourceConfiguration.getShutdownTimeout().toMilliseconds(), TimeUnit.MILLISECONDS).         } catch (Exception e) {             exception = ExceptionUtils.firstOrSuppressed(e, exception).         }         miniCluster = null.     }     if (exception != null) {         log.warn("Could not properly shut down the MiniClusterResource.", exception).     } }
false;private;0;31;;private void startMiniCluster() throws Exception {     final Configuration configuration = new Configuration(miniClusterResourceConfiguration.getConfiguration()).     configuration.setString(CoreOptions.TMP_DIRS, temporaryFolder.newFolder().getAbsolutePath()).     // enabled this by default     if (!configuration.contains(CoreOptions.FILESYTEM_DEFAULT_OVERRIDE)) {         configuration.setBoolean(CoreOptions.FILESYTEM_DEFAULT_OVERRIDE, true).     }     if (!configuration.contains(TaskManagerOptions.MANAGED_MEMORY_SIZE)) {         configuration.setString(TaskManagerOptions.MANAGED_MEMORY_SIZE, DEFAULT_MANAGED_MEMORY_SIZE).     }     // set rest and rpc port to 0 to avoid clashes with concurrent MiniClusters     configuration.setInteger(JobManagerOptions.PORT, 0).     configuration.setString(RestOptions.BIND_PORT, "0").     final MiniClusterConfiguration miniClusterConfiguration = new MiniClusterConfiguration.Builder().setConfiguration(configuration).setNumTaskManagers(miniClusterResourceConfiguration.getNumberTaskManagers()).setNumSlotsPerTaskManager(miniClusterResourceConfiguration.getNumberSlotsPerTaskManager()).build().     miniCluster = new MiniCluster(miniClusterConfiguration).     miniCluster.start().     final URI restAddress = miniCluster.getRestAddress().get().     createClientConfiguration(restAddress). }
false;private;1;6;;private void createClientConfiguration(URI restAddress) {     Configuration restClientConfig = new Configuration().     restClientConfig.setString(JobManagerOptions.ADDRESS, restAddress.getHost()).     restClientConfig.setInteger(RestOptions.PORT, restAddress.getPort()).     this.restClusterClientConfig = new UnmodifiableConfiguration(restClientConfig). }
