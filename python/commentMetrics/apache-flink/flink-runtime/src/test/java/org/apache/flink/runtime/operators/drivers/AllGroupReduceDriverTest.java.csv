commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testAllReduceDriverImmutableEmpty() {     try {         TestTaskContext<GroupReduceFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>, Tuple2<String, Integer>> context = new TestTaskContext<GroupReduceFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>, Tuple2<String, Integer>>().         List<Tuple2<String, Integer>> data = DriverTestData.createReduceImmutableData().         TypeInformation<Tuple2<String, Integer>> typeInfo = TypeExtractor.getForObject(data.get(0)).         MutableObjectIterator<Tuple2<String, Integer>> input = EmptyMutableObjectIterator.get().         context.setDriverStrategy(DriverStrategy.ALL_GROUP_REDUCE).         context.setInput1(input, typeInfo.createSerializer(new ExecutionConfig())).         context.setCollector(new DiscardingOutputCollector<Tuple2<String, Integer>>()).         AllGroupReduceDriver<Tuple2<String, Integer>, Tuple2<String, Integer>> driver = new AllGroupReduceDriver<Tuple2<String, Integer>, Tuple2<String, Integer>>().         driver.setup(context).         driver.prepare().         driver.run().     } catch (Exception e) {         System.err.println(e.getMessage()).         e.printStackTrace().         Assert.fail(e.getMessage()).     } }
false;public;0;39;;@Test public void testAllReduceDriverImmutable() {     try {         TestTaskContext<GroupReduceFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>, Tuple2<String, Integer>> context = new TestTaskContext<GroupReduceFunction<Tuple2<String, Integer>, Tuple2<String, Integer>>, Tuple2<String, Integer>>().         List<Tuple2<String, Integer>> data = DriverTestData.createReduceImmutableData().         TypeInformation<Tuple2<String, Integer>> typeInfo = TypeExtractor.getForObject(data.get(0)).         MutableObjectIterator<Tuple2<String, Integer>> input = new RegularToMutableObjectIterator<Tuple2<String, Integer>>(data.iterator(), typeInfo.createSerializer(new ExecutionConfig())).         GatheringCollector<Tuple2<String, Integer>> result = new GatheringCollector<Tuple2<String, Integer>>(typeInfo.createSerializer(new ExecutionConfig())).         context.setDriverStrategy(DriverStrategy.ALL_GROUP_REDUCE).         context.setInput1(input, typeInfo.createSerializer(new ExecutionConfig())).         context.setCollector(result).         context.setUdf(new ConcatSumReducer()).         AllGroupReduceDriver<Tuple2<String, Integer>, Tuple2<String, Integer>> driver = new AllGroupReduceDriver<Tuple2<String, Integer>, Tuple2<String, Integer>>().         driver.setup(context).         driver.prepare().         driver.run().         Tuple2<String, Integer> res = result.getList().get(0).         char[] foundString = res.f0.toCharArray().         Arrays.sort(foundString).         char[] expectedString = "abcddeeeffff".toCharArray().         Arrays.sort(expectedString).         Assert.assertArrayEquals(expectedString, foundString).         Assert.assertEquals(78, res.f1.intValue()).     } catch (Exception e) {         System.err.println(e.getMessage()).         e.printStackTrace().         Assert.fail(e.getMessage()).     } }
false;public;0;39;;@Test public void testAllReduceDriverMutable() {     try {         TestTaskContext<GroupReduceFunction<Tuple2<StringValue, IntValue>, Tuple2<StringValue, IntValue>>, Tuple2<StringValue, IntValue>> context = new TestTaskContext<GroupReduceFunction<Tuple2<StringValue, IntValue>, Tuple2<StringValue, IntValue>>, Tuple2<StringValue, IntValue>>().         List<Tuple2<StringValue, IntValue>> data = DriverTestData.createReduceMutableData().         TypeInformation<Tuple2<StringValue, IntValue>> typeInfo = TypeExtractor.getForObject(data.get(0)).         MutableObjectIterator<Tuple2<StringValue, IntValue>> input = new RegularToMutableObjectIterator<Tuple2<StringValue, IntValue>>(data.iterator(), typeInfo.createSerializer(new ExecutionConfig())).         GatheringCollector<Tuple2<StringValue, IntValue>> result = new GatheringCollector<Tuple2<StringValue, IntValue>>(typeInfo.createSerializer(new ExecutionConfig())).         context.setDriverStrategy(DriverStrategy.ALL_GROUP_REDUCE).         context.setInput1(input, typeInfo.createSerializer(new ExecutionConfig())).         context.setCollector(result).         context.setUdf(new ConcatSumMutableReducer()).         AllGroupReduceDriver<Tuple2<StringValue, IntValue>, Tuple2<StringValue, IntValue>> driver = new AllGroupReduceDriver<Tuple2<StringValue, IntValue>, Tuple2<StringValue, IntValue>>().         driver.setup(context).         driver.prepare().         driver.run().         Tuple2<StringValue, IntValue> res = result.getList().get(0).         char[] foundString = res.f0.getValue().toCharArray().         Arrays.sort(foundString).         char[] expectedString = "abcddeeeffff".toCharArray().         Arrays.sort(expectedString).         Assert.assertArrayEquals(expectedString, foundString).         Assert.assertEquals(78, res.f1.getValue()).     } catch (Exception e) {         System.err.println(e.getMessage()).         e.printStackTrace().         Assert.fail(e.getMessage()).     } }
false;public;2;12;;@Override public void reduce(Iterable<Tuple2<String, Integer>> values, Collector<Tuple2<String, Integer>> out) {     Tuple2<String, Integer> current = new Tuple2<String, Integer>("", 0).     for (Tuple2<String, Integer> next : values) {         next.f0 = current.f0 + next.f0.         next.f1 = current.f1 + next.f1.         current = next.     }     out.collect(current). }
false;public;2;12;;@Override public void reduce(Iterable<Tuple2<StringValue, IntValue>> values, Collector<Tuple2<StringValue, IntValue>> out) {     Tuple2<StringValue, IntValue> current = new Tuple2<StringValue, IntValue>(new StringValue(""), new IntValue(0)).     for (Tuple2<StringValue, IntValue> next : values) {         next.f0.append(current.f0).         next.f1.setValue(current.f1.getValue() + next.f1.getValue()).         current = next.     }     out.collect(current). }
