commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before public void startup() {     // set up IO and memory manager     this.memman = new MemoryManager(MEMORY_CAPACITY, 1, 32 * 1024, MemoryType.HEAP, true).     this.ioman = new IOManagerAsync().     // create test objects     ArrayList<IntValue> objects = new ArrayList<IntValue>(NUM_TESTRECORDS).     for (int i = 0. i < NUM_TESTRECORDS. ++i) {         IntValue tmp = new IntValue(i).         objects.add(tmp).     }     this.reader = objects.iterator(). }
false;public;0;14;;@After public void shutdown() {     this.ioman.shutdown().     if (!this.ioman.isProperlyShutDown()) {         Assert.fail("I/O Manager Shutdown was not completed properly.").     }     this.ioman = null.     if (!this.memman.verifyEmpty()) {         Assert.fail("A memory leak has occurred: Not all memory was properly returned to the memory manager.").     }     this.memman.shutdown().     this.memman = null. }
true;public;0;35;/**  * Tests the resettable iterator with too few memory, so that the data  * has to be written to disk.  */ ;/**  * Tests the resettable iterator with too few memory, so that the data  * has to be written to disk.  */ @Test public void testResettableIterator() {     try {         // create the resettable Iterator         SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner).         // open the iterator         iterator.open().         // now test walking through the iterator         int count = 0.         while (iterator.hasNext()) {             Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++, iterator.next().getValue()).         }         Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count).         // test resetting the iterator a few times         for (int j = 0. j < 10. ++j) {             count = 0.             iterator.reset().             // now we should get the same results             while (iterator.hasNext()) {                 Assert.assertEquals("After reset nr. " + j + 1 + " element " + count + " does not match expected value!", count++, iterator.next().getValue()).             }             Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS, count).         }         // close the iterator         iterator.close().     } catch (Exception ex) {         ex.printStackTrace().         Assert.fail("Test encountered an exception.").     } }
true;public;0;35;/**  * Tests the resettable iterator with enough memory so that all data  * is kept locally in a membuffer.  */ ;/**  * Tests the resettable iterator with enough memory so that all data  * is kept locally in a membuffer.  */ @Test public void testResettableIteratorInMemory() {     try {         // create the resettable Iterator         SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(this.reader, this.serializer, this.memman, this.ioman, 20, this.memOwner).         // open the iterator         iterator.open().         // now test walking through the iterator         int count = 0.         while (iterator.hasNext()) {             Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++, iterator.next().getValue()).         }         Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count).         // test resetting the iterator a few times         for (int j = 0. j < 10. ++j) {             count = 0.             iterator.reset().             // now we should get the same results             while (iterator.hasNext()) {                 Assert.assertEquals("After reset nr. " + j + 1 + " element " + count + " does not match expected value!", count++, iterator.next().getValue()).             }             Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS, count).         }         // close the iterator         iterator.close().     } catch (Exception ex) {         ex.printStackTrace().         Assert.fail("Test encountered an exception.").     } }
true;public;0;25;/**  * Tests whether multiple call of hasNext() changes the state of the iterator  */ ;/**  * Tests whether multiple call of hasNext() changes the state of the iterator  */ @Test public void testHasNext() {     try {         // create the resettable Iterator         SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner).         // open the iterator         iterator.open().         int cnt = 0.         while (iterator.hasNext()) {             iterator.hasNext().             iterator.next().             cnt++.         }         Assert.assertTrue(cnt + " elements read from iterator, but " + NUM_TESTRECORDS + " expected", cnt == NUM_TESTRECORDS).         iterator.close().     } catch (Exception ex) {         ex.printStackTrace().         Assert.fail("Test encountered an exception.").     } }
true;public;0;30;/**  * Test whether next() depends on previous call of hasNext()  */ ;/**  * Test whether next() depends on previous call of hasNext()  */ @Test public void testNext() {     try {         // create the resettable Iterator         SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner).         // open the iterator         iterator.open().         IntValue record.         int cnt = 0.         while (cnt < NUM_TESTRECORDS) {             record = iterator.next().             Assert.assertTrue("Record was not read from iterator", record != null).             cnt++.         }         try {             record = iterator.next().             Assert.fail("Too many records were read from iterator.").         } catch (NoSuchElementException nseex) {         // expected         }         iterator.close().     } catch (Exception ex) {         ex.printStackTrace().         Assert.fail("Test encountered an exception.").     } }
