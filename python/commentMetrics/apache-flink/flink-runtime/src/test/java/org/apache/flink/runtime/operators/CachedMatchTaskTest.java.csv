commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;@Test public void testHash1MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 1.     int keyCnt2 = 10.     int valCnt2 = 2.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST_CACHED).     getTaskConfig().setRelativeMemoryDriver(1.0f).     BuildFirstCachedJoinDriver<Record, Record, Record> testTask = new BuildFirstCachedJoinDriver<Record, Record, Record>().     try {         testResettableDriver(testTask, MockMatchStub.class, 3).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     }     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertEquals("Wrong result set size.", expCnt, this.outList.size()).     this.outList.clear(). }
false;public;0;30;;@Test public void testHash2MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 1.     int keyCnt2 = 20.     int valCnt2 = 1.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED).     getTaskConfig().setRelativeMemoryDriver(1.0f).     BuildSecondCachedJoinDriver<Record, Record, Record> testTask = new BuildSecondCachedJoinDriver<Record, Record, Record>().     try {         testResettableDriver(testTask, MockMatchStub.class, 3).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     }     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertEquals("Wrong result set size.", expCnt, this.outList.size()).     this.outList.clear(). }
false;public;0;30;;@Test public void testHash3MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 1.     int keyCnt2 = 20.     int valCnt2 = 20.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST_CACHED).     getTaskConfig().setRelativeMemoryDriver(1.0f).     BuildFirstCachedJoinDriver<Record, Record, Record> testTask = new BuildFirstCachedJoinDriver<Record, Record, Record>().     try {         testResettableDriver(testTask, MockMatchStub.class, 3).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     }     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertEquals("Wrong result set size.", expCnt, this.outList.size()).     this.outList.clear(). }
false;public;0;30;;@Test public void testHash4MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 1.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED).     getTaskConfig().setRelativeMemoryDriver(1.0f).     BuildSecondCachedJoinDriver<Record, Record, Record> testTask = new BuildSecondCachedJoinDriver<Record, Record, Record>().     try {         testResettableDriver(testTask, MockMatchStub.class, 3).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     }     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertEquals("Wrong result set size.", expCnt, this.outList.size()).     this.outList.clear(). }
false;public;0;30;;@Test public void testHash5MatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(this.outList).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST_CACHED).     getTaskConfig().setRelativeMemoryDriver(1.0f).     BuildFirstCachedJoinDriver<Record, Record, Record> testTask = new BuildFirstCachedJoinDriver<Record, Record, Record>().     try {         testResettableDriver(testTask, MockMatchStub.class, 3).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     }     final int expCnt = valCnt1 * valCnt2 * Math.min(keyCnt1, keyCnt2).     Assert.assertEquals("Wrong result set size.", expCnt, this.outList.size()).     this.outList.clear(). }
false;public;0;29;;@Test public void testFailingHashFirstMatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(new NirvanaOutputList()).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST_CACHED).     getTaskConfig().setRelativeMemoryDriver(1.0f).     BuildFirstCachedJoinDriver<Record, Record, Record> testTask = new BuildFirstCachedJoinDriver<Record, Record, Record>().     try {         testResettableDriver(testTask, MockFailingMatchStub.class, 3).         Assert.fail("Function exception was not forwarded.").     } catch (ExpectedTestException etex) {     // good!     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     } }
false;public;0;29;;@Test public void testFailingHashSecondMatchTask() {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(new NirvanaOutputList()).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED).     getTaskConfig().setRelativeMemoryDriver(1.0f).     BuildSecondCachedJoinDriver<Record, Record, Record> testTask = new BuildSecondCachedJoinDriver<Record, Record, Record>().     try {         testResettableDriver(testTask, MockFailingMatchStub.class, 3).         Assert.fail("Function exception was not forwarded.").     } catch (ExpectedTestException etex) {     // good!     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test caused an exception.").     } }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockFailingMatchStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;47;;@Test public void testCancelHashMatchTaskWhileBuildFirst() {     int keyCnt = 20.     int valCnt = 20.     addInput(new DelayingInfinitiveInputIterator(100)).     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(new NirvanaOutputList()).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST_CACHED).     getTaskConfig().setRelativeMemoryDriver(1.0f).     final BuildFirstCachedJoinDriver<Record, Record, Record> testTask = new BuildFirstCachedJoinDriver<Record, Record, Record>().     final AtomicBoolean success = new AtomicBoolean(false).     Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockFailingMatchStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(1, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     }     Assert.assertTrue("Test threw an exception even though it was properly canceled.", success.get()). }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockMatchStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;43;;@Test public void testHashCancelMatchTaskWhileBuildSecond() {     int keyCnt = 20.     int valCnt = 20.     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addInput(new DelayingInfinitiveInputIterator(100)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(new NirvanaOutputList()).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND_CACHED).     getTaskConfig().setRelativeMemoryDriver(1.0f).     final BuildSecondCachedJoinDriver<Record, Record, Record> testTask = new BuildSecondCachedJoinDriver<Record, Record, Record>().     final AtomicBoolean success = new AtomicBoolean(false).     Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockMatchStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(1, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     }     Assert.assertTrue("Test threw an exception even though it was properly canceled.", success.get()). }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockMatchStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;43;;@Test public void testHashFirstCancelMatchTaskWhileMatching() {     int keyCnt = 20.     int valCnt = 20.     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(new NirvanaOutputList()).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_FIRST).     getTaskConfig().setRelativeMemoryDriver(1.0f).     final BuildFirstCachedJoinDriver<Record, Record, Record> testTask = new BuildFirstCachedJoinDriver<Record, Record, Record>().     final AtomicBoolean success = new AtomicBoolean(false).     Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockMatchStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(1, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     }     Assert.assertTrue("Test threw an exception even though it was properly canceled.", success.get()). }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockMatchStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;44;;@Test public void testHashSecondCancelMatchTaskWhileMatching() {     int keyCnt = 20.     int valCnt = 20.     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(RecordPairComparatorFactory.get()).     setOutput(new NirvanaOutputList()).     getTaskConfig().setDriverStrategy(DriverStrategy.HYBRIDHASH_BUILD_SECOND).     getTaskConfig().setRelativeMemoryDriver(1.0f).     final BuildSecondCachedJoinDriver<Record, Record, Record> testTask = new BuildSecondCachedJoinDriver<Record, Record, Record>().     final AtomicBoolean success = new AtomicBoolean(false).     Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockMatchStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(1, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     }     Assert.assertTrue("Test threw an exception even though it was properly canceled.", success.get()). }
false;public;3;4;;@Override public void join(Record record1, Record record2, Collector<Record> out) throws Exception {     out.collect(record1). }
false;public;3;8;;@Override public void join(Record record1, Record record2, Collector<Record> out) throws Exception {     if (++this.cnt >= 10) {         throw new ExpectedTestException().     }     out.collect(record1). }
false;public;3;6;;@Override public void join(Record record1, Record record2, Collector<Record> out) {     try {         Thread.sleep(100).     } catch (InterruptedException e) {     } }
