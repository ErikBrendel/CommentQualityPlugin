commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static BufferBuilder createBufferBuilder() {     return createBufferBuilder(BUFFER_SIZE). }
false;public,static;1;3;;public static BufferBuilder createBufferBuilder(int size) {     return createFilledBufferBuilder(size, 0). }
false;public,static;1;3;;public static BufferBuilder createFilledBufferBuilder(int dataSize) {     return createFilledBufferBuilder(BUFFER_SIZE, dataSize). }
false;public,static;2;7;;public static BufferBuilder createFilledBufferBuilder(int size, int dataSize) {     checkArgument(size >= dataSize).     BufferBuilder bufferBuilder = new BufferBuilder(MemorySegmentFactory.allocateUnpooledSegment(size), FreeingBufferRecycler.INSTANCE).     return fillBufferBuilder(bufferBuilder, dataSize). }
false;public,static;2;4;;public static BufferBuilder fillBufferBuilder(BufferBuilder bufferBuilder, int dataSize) {     bufferBuilder.appendAndCommit(ByteBuffer.allocate(dataSize)).     return bufferBuilder. }
false;public,static;1;5;;public static Buffer buildSingleBuffer(BufferBuilder bufferBuilder) {     try (BufferConsumer bufferConsumer = bufferBuilder.createBufferConsumer()) {         return bufferConsumer.build().     } }
false;public,static;1;5;;public static Buffer buildSingleBuffer(BufferConsumer bufferConsumer) {     Buffer buffer = bufferConsumer.build().     bufferConsumer.close().     return buffer. }
false;public,static;2;5;;public static BufferConsumer createFilledBufferConsumer(int size, int dataSize) {     BufferBuilder bufferBuilder = createFilledBufferBuilder(size, dataSize).     bufferBuilder.finish().     return bufferBuilder.createBufferConsumer(). }
false;public,static;1;3;;public static BufferConsumer createFilledBufferConsumer(int dataSize) {     return createFilledBufferConsumer(BUFFER_SIZE, dataSize). }
false;public,static;1;6;;public static BufferConsumer createEventBufferConsumer(int size) {     return new BufferConsumer(MemorySegmentFactory.allocateUnpooledSegment(size), FreeingBufferRecycler.INSTANCE, false). }
