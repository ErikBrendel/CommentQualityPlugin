commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUp() {     final SimpleModule simpleModule = new SimpleModule().     simpleModule.addDeserializer(SerializedThrowable.class, new SerializedThrowableDeserializer()).     simpleModule.addSerializer(SerializedThrowable.class, new SerializedThrowableSerializer()).     objectMapper = new ObjectMapper().     objectMapper.registerModule(simpleModule). }
false;public;0;19;;@Test public void testSerializationDeserialization() throws Exception {     final String lastExceptionMessage = "message".     final String causeMessage = "cause".     final SerializedThrowable serializedThrowable = new SerializedThrowable(new RuntimeException(lastExceptionMessage, new RuntimeException(causeMessage))).     final String json = objectMapper.writeValueAsString(serializedThrowable).     final SerializedThrowable deserializedSerializedThrowable = objectMapper.readValue(json, SerializedThrowable.class).     assertThat(deserializedSerializedThrowable.getMessage(), equalTo(lastExceptionMessage)).     assertThat(deserializedSerializedThrowable.getFullStringifiedStackTrace(), equalTo(serializedThrowable.getFullStringifiedStackTrace())).     assertThat(deserializedSerializedThrowable.getCause().getMessage(), equalTo(causeMessage)).     assertThat(deserializedSerializedThrowable.getCause(), instanceOf(SerializedThrowable.class)). }
