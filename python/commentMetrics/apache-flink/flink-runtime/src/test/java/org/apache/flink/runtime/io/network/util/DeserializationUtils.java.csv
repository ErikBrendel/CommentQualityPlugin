commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;20;/**  * Iterates over the provided records to deserialize, verifies the results and stats  * the number of full records.  *  * @param records records to be deserialized  * @param deserializer the record deserializer  * @return the number of full deserialized records  */ ;/**  * Iterates over the provided records to deserialize, verifies the results and stats  * the number of full records.  *  * @param records records to be deserialized  * @param deserializer the record deserializer  * @return the number of full deserialized records  */ public static int deserializeRecords(ArrayDeque<SerializationTestType> records, RecordDeserializer<SerializationTestType> deserializer) throws Exception {     int deserializedRecords = 0.     while (!records.isEmpty()) {         SerializationTestType expected = records.poll().         SerializationTestType actual = expected.getClass().newInstance().         if (deserializer.getNextRecord(actual).isFullRecord()) {             Assert.assertEquals(expected, actual).             deserializedRecords++.         } else {             records.addFirst(expected).             break.         }     }     return deserializedRecords. }
