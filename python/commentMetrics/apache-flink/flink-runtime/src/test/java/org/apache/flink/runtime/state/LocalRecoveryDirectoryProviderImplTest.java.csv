commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() throws IOException {     this.allocBaseFolders = new File[] { tmpFolder.newFolder(), tmpFolder.newFolder(), tmpFolder.newFolder() }.     this.directoryProvider = new LocalRecoveryDirectoryProviderImpl(allocBaseFolders, JOB_ID, JOB_VERTEX_ID, SUBTASK_INDEX). }
false;public;0;6;;@Test public void allocationBaseDir() {     for (int i = 0. i < 10. ++i) {         Assert.assertEquals(allocBaseFolders[i % allocBaseFolders.length], directoryProvider.allocationBaseDirectory(i)).     } }
false;public;0;6;;@Test public void selectAllocationBaseDir() {     for (int i = 0. i < allocBaseFolders.length. ++i) {         Assert.assertEquals(allocBaseFolders[i], directoryProvider.selectAllocationBaseDirectory(i)).     } }
false;public;0;4;;@Test public void allocationBaseDirectoriesCount() {     Assert.assertEquals(allocBaseFolders.length, directoryProvider.allocationBaseDirsCount()). }
false;public;0;10;;@Test public void subtaskSpecificDirectory() {     for (int i = 0. i < 10. ++i) {         Assert.assertEquals(new File(directoryProvider.allocationBaseDirectory(i), directoryProvider.subtaskDirString()), directoryProvider.subtaskBaseDirectory(i)).     } }
false;public;0;10;;@Test public void subtaskCheckpointSpecificDirectory() {     for (int i = 0. i < 10. ++i) {         Assert.assertEquals(new File(directoryProvider.subtaskBaseDirectory(i), directoryProvider.checkpointDirString(i)), directoryProvider.subtaskSpecificCheckpointDirectory(i)).     } }
false;public;0;12;;@Test public void testPathStringConstants() {     Assert.assertEquals(directoryProvider.subtaskDirString(), "jid_" + JOB_ID + Path.SEPARATOR + "vtx_" + JOB_VERTEX_ID + "_sti_" + SUBTASK_INDEX).     final long checkpointId = 42.     Assert.assertEquals(directoryProvider.checkpointDirString(checkpointId), "chk_" + checkpointId). }
false;public;0;8;;@Test public void testPreconditionsNotNullFiles() {     try {         new LocalRecoveryDirectoryProviderImpl(new File[] { null }, JOB_ID, JOB_VERTEX_ID, SUBTASK_INDEX).         Assert.fail().     } catch (NullPointerException ignore) {     } }
