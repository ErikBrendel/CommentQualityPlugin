commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testSerializationOfEmptyEvent() {     AllWorkersDoneEvent e = new AllWorkersDoneEvent().     IterationEventWithAggregators deserialized = pipeThroughSerialization(e).     Assert.assertEquals(0, deserialized.getAggregatorNames().length).     Assert.assertEquals(0, deserialized.getAggregates(cl).length). }
false;public;0;45;;@Test public void testSerializationOfEventWithAggregateValues() {     StringValue stringValue = new StringValue("test string").     LongValue longValue = new LongValue(68743254).     String stringValueName = "stringValue".     String longValueName = "longValue".     Aggregator<StringValue> stringAgg = new TestAggregator<StringValue>(stringValue).     Aggregator<LongValue> longAgg = new TestAggregator<LongValue>(longValue).     Map<String, Aggregator<?>> aggMap = new HashMap<String, Aggregator<?>>().     aggMap.put(stringValueName, stringAgg).     aggMap.put(longValueName, longAgg).     Set<String> allNames = new HashSet<String>().     allNames.add(stringValueName).     allNames.add(longValueName).     Set<Value> allVals = new HashSet<Value>().     allVals.add(stringValue).     allVals.add(longValue).     // run the serialization     AllWorkersDoneEvent e = new AllWorkersDoneEvent(aggMap).     IterationEventWithAggregators deserialized = pipeThroughSerialization(e).     // verify the result     String[] names = deserialized.getAggregatorNames().     Value[] aggregates = deserialized.getAggregates(cl).     Assert.assertEquals(allNames.size(), names.length).     Assert.assertEquals(allVals.size(), aggregates.length).     // check that all the correct names and values are returned     for (String s : names) {         allNames.remove(s).     }     for (Value v : aggregates) {         allVals.remove(v).     }     Assert.assertTrue(allNames.isEmpty()).     Assert.assertTrue(allVals.isEmpty()). }
false;private;1;22;;private IterationEventWithAggregators pipeThroughSerialization(IterationEventWithAggregators event) {     try {         ByteArrayOutputStream baos = new ByteArrayOutputStream().         event.write(new DataOutputViewStreamWrapper(baos)).         byte[] data = baos.toByteArray().         baos.close().         DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(new ByteArrayInputStream(data)).         IterationEventWithAggregators newEvent = event.getClass().newInstance().         newEvent.read(in).         in.close().         return newEvent.     } catch (Exception e) {         System.err.println(e.getMessage()).         e.printStackTrace().         Assert.fail("Test threw an exception: " + e.getMessage()).         return null.     } }
false;public;0;4;;@Override public T getAggregate() {     return val. }
false;public;1;4;;@Override public void aggregate(T element) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public void reset() {     throw new UnsupportedOperationException(). }
