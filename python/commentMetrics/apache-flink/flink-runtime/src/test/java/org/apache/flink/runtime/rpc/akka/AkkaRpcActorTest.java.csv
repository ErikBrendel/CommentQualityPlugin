# id;timestamp;commentText;codeText;commentWords;codeWords
AkkaRpcActorTest -> @Test(timeout=1000) 	public void testRpcEndpointTerminationFuture() throws Exception;1482522864;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=1000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		Future<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		FlinkFuture.supplyAsync(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				rpcEndpoint.shutDown()___				return null__			}_		}, actorSystem.dispatcher())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,1000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,rpc,endpoint,shut,down,return,null,actor,system,dispatcher,termination,future,get
AkkaRpcActorTest -> @Test(timeout=1000) 	public void testRpcEndpointTerminationFuture() throws Exception;1482522865;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=1000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		Future<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		FlinkFuture.supplyAsync(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				rpcEndpoint.shutDown()___				return null__			}_		}, actorSystem.dispatcher())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,1000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,rpc,endpoint,shut,down,return,null,actor,system,dispatcher,termination,future,get
AkkaRpcActorTest -> @Test(timeout=1000) 	public void testRpcEndpointTerminationFuture() throws Exception;1482522867;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=1000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		Future<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		FlinkFuture.supplyAsync(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				rpcEndpoint.shutDown()___				return null__			}_		}, actorSystem.dispatcher())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,1000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,rpc,endpoint,shut,down,return,null,actor,system,dispatcher,termination,future,get
AkkaRpcActorTest -> @Test 	public void testActorTerminationWithAsynchronousOnStopAction() throws Exception;1550005039;Tests that the {@link AkkaRpcActor} only completes after the asynchronous_post stop action has completed.;@Test_	public void testActorTerminationWithAsynchronousOnStopAction() throws Exception {_		final CompletableFuture<Void> onStopFuture = new CompletableFuture<>()__		final AsynchronousOnStopEndpoint endpoint = new AsynchronousOnStopEndpoint(akkaRpcService, onStopFuture)___		try {_			endpoint.start()___			final CompletableFuture<Void> terminationFuture = endpoint.getTerminationFuture()___			endpoint.shutDown()___			assertFalse(terminationFuture.isDone())___			onStopFuture.complete(null)___			_			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,only,completes,after,the,asynchronous,post,stop,action,has,completed;test,public,void,test,actor,termination,with,asynchronous,on,stop,action,throws,exception,final,completable,future,void,on,stop,future,new,completable,future,final,asynchronous,on,stop,endpoint,endpoint,new,asynchronous,on,stop,endpoint,akka,rpc,service,on,stop,future,try,endpoint,start,final,completable,future,void,termination,future,endpoint,get,termination,future,endpoint,shut,down,assert,false,termination,future,is,done,on,stop,future,complete,null,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWithAsynchronousOnStopAction() throws Exception;1550005040;Tests that the {@link AkkaRpcActor} only completes after the asynchronous_post stop action has completed.;@Test_	public void testActorTerminationWithAsynchronousOnStopAction() throws Exception {_		final CompletableFuture<Void> onStopFuture = new CompletableFuture<>()__		final AsynchronousOnStopEndpoint endpoint = new AsynchronousOnStopEndpoint(akkaRpcService, onStopFuture)___		try {_			endpoint.start()___			final CompletableFuture<Void> terminationFuture = endpoint.closeAsync()___			assertFalse(terminationFuture.isDone())___			onStopFuture.complete(null)___			_			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,only,completes,after,the,asynchronous,post,stop,action,has,completed;test,public,void,test,actor,termination,with,asynchronous,on,stop,action,throws,exception,final,completable,future,void,on,stop,future,new,completable,future,final,asynchronous,on,stop,endpoint,endpoint,new,asynchronous,on,stop,endpoint,akka,rpc,service,on,stop,future,try,endpoint,start,final,completable,future,void,termination,future,endpoint,close,async,assert,false,termination,future,is,done,on,stop,future,complete,null,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWithAsynchronousOnStopAction() throws Exception;1550509694;Tests that the {@link AkkaRpcActor} only completes after the asynchronous_post stop action has completed.;@Test_	public void testActorTerminationWithAsynchronousOnStopAction() throws Exception {_		final CompletableFuture<Void> onStopFuture = new CompletableFuture<>()__		final AsynchronousOnStopEndpoint endpoint = new AsynchronousOnStopEndpoint(akkaRpcService, onStopFuture)___		try {_			endpoint.start()___			final CompletableFuture<Void> terminationFuture = endpoint.closeAsync()___			assertFalse(terminationFuture.isDone())___			onStopFuture.complete(null)___			_			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,only,completes,after,the,asynchronous,post,stop,action,has,completed;test,public,void,test,actor,termination,with,asynchronous,on,stop,action,throws,exception,final,completable,future,void,on,stop,future,new,completable,future,final,asynchronous,on,stop,endpoint,endpoint,new,asynchronous,on,stop,endpoint,akka,rpc,service,on,stop,future,try,endpoint,start,final,completable,future,void,termination,future,endpoint,close,async,assert,false,termination,future,is,done,on,stop,future,complete,null,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1482522860;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		Future<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = Await.result(futureGateway, timeout.duration())___		_		gateway.tell("foobar")___		Future<Boolean> result = gateway.barfoo()___		try {_			Await.result(result, timeout.duration())__			fail("We expected a RpcConnectionException.")__		} catch (RpcConnectionException rpcConnectionException) {_			_		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,await,result,future,gateway,timeout,duration,gateway,tell,foobar,future,boolean,result,gateway,barfoo,try,await,result,result,timeout,duration,fail,we,expected,a,rpc,connection,exception,catch,rpc,connection,exception,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1482522860;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		Future<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		Future<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1482522861;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		Future<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		Future<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1482522864;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		Future<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		Future<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1482522865;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		Future<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		Future<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1482522867;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		Future<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		Future<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1486122374;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		Future<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		Future<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1501485811;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		Future<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		Future<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1501760738;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		CompletableFuture<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		CompletableFuture<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,completable,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1502452184;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		CompletableFuture<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		CompletableFuture<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,completable,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1507207963;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		CompletableFuture<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		CompletableFuture<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,completable,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1515481550;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		CompletableFuture<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		CompletableFuture<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,completable,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1519406526;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		CompletableFuture<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		CompletableFuture<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,completable,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1519406526;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		CompletableFuture<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		CompletableFuture<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,completable,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1519406528;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		CompletableFuture<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		CompletableFuture<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,completable,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testWrongGatewayEndpointConnection() throws Exception;1522681180;Tests that we receive a RpcConnectionException when calling a rpc method (with return type)_on a wrong rpc endpoint.__@throws Exception;@Test_	public void testWrongGatewayEndpointConnection() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		rpcEndpoint.start()___		CompletableFuture<WrongRpcGateway> futureGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), WrongRpcGateway.class)___		WrongRpcGateway gateway = futureGateway.get(timeout.getSize(), timeout.getUnit())___		_		gateway.tell("foobar")___		CompletableFuture<Boolean> result = gateway.barfoo()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("We expected a RpcConnectionException.")__		} catch (ExecutionException executionException) {_			assertTrue(executionException.getCause() instanceof RpcConnectionException)__		}_	};tests,that,we,receive,a,rpc,connection,exception,when,calling,a,rpc,method,with,return,type,on,a,wrong,rpc,endpoint,throws,exception;test,public,void,test,wrong,gateway,endpoint,connection,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,wrong,rpc,gateway,future,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,wrong,rpc,gateway,class,wrong,rpc,gateway,gateway,future,gateway,get,timeout,get,size,timeout,get,unit,gateway,tell,foobar,completable,future,boolean,result,gateway,barfoo,try,result,get,timeout,get,size,timeout,get,unit,fail,we,expected,a,rpc,connection,exception,catch,execution,exception,execution,exception,assert,true,execution,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1482522858;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			DummyRpcGateway gateway = Await.result(futureRpcGateway, timeout.duration())___			fail("The rpc connection resolution should have failed.")__		} catch (RpcConnectionException exception) {_			_		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,dummy,rpc,gateway,gateway,await,result,future,rpc,gateway,timeout,duration,fail,the,rpc,connection,resolution,should,have,failed,catch,rpc,connection,exception,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1482522859;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			DummyRpcGateway gateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,dummy,rpc,gateway,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1482522860;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			DummyRpcGateway gateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,dummy,rpc,gateway,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1482522860;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			DummyRpcGateway gateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,dummy,rpc,gateway,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1482522861;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			DummyRpcGateway gateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,dummy,rpc,gateway,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1482522864;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			DummyRpcGateway gateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,dummy,rpc,gateway,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1482522865;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			DummyRpcGateway gateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,dummy,rpc,gateway,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1482522867;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1486122374;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1501485811;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1501760738;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1502452184;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1507207963;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1515481550;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1519406526;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1519406526;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1519406528;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1522681180;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1526387042;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1526494919;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1533829432;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1548326020;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1548326025;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1548326025;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1550005039;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1550005040;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testFailingAddressResolution() throws Exception;1550509694;Tests that a {@link RpcConnectionException} is thrown if the rpc endpoint cannot be connected to.;@Test_	public void testFailingAddressResolution() throws Exception {_		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect("foobar", DummyRpcGateway.class)___		try {_			futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___			fail("The rpc connection resolution should have failed.")__		} catch (ExecutionException exception) {_			_			assertTrue(exception.getCause() instanceof RpcConnectionException)__		}_	};tests,that,a,link,rpc,connection,exception,is,thrown,if,the,rpc,endpoint,cannot,be,connected,to;test,public,void,test,failing,address,resolution,throws,exception,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,foobar,dummy,rpc,gateway,class,try,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,fail,the,rpc,connection,resolution,should,have,failed,catch,execution,exception,exception,assert,true,exception,get,cause,instanceof,rpc,connection,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1501485811;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		Future<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1501760738;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1502452184;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1507207963;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Boolean> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,boolean,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1515481550;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Boolean> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,boolean,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1519406526;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Boolean> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,boolean,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1519406526;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1519406528;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1522681180;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1526387042;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1526494919;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1533829432;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1548326020;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1548326025;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testPostStopExecutedByMainThread() throws Exception;1548326025;Checks that the postStop callback is executed within the main thread.;@Test_	public void testPostStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,post,stop,callback,is,executed,within,the,main,thread;test,public,void,test,post,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1486122374;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		Future<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		FlinkFuture.supplyAsync(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				rpcEndpoint.shutDown()___				return null__			}_		}, actorSystem.dispatcher())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,rpc,endpoint,shut,down,return,null,actor,system,dispatcher,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1501485811;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		Future<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		FlinkFuture.supplyAsync(new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				rpcEndpoint.shutDown()___				return null__			}_		}, actorSystem.dispatcher())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,rpc,endpoint,shut,down,return,null,actor,system,dispatcher,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1501760738;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			actorSystem.dispatcher())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,actor,system,dispatcher,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1502452184;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			actorSystem.dispatcher())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,actor,system,dispatcher,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1507207963;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			actorSystem.dispatcher())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,boolean,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,actor,system,dispatcher,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1515481550;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			actorSystem.dispatcher())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,boolean,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,actor,system,dispatcher,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1519406526;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			actorSystem.dispatcher())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,boolean,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,actor,system,dispatcher,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1519406526;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			actorSystem.dispatcher())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,actor,system,dispatcher,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1519406528;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			akkaRpcService.getExecutor())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,akka,rpc,service,get,executor,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1522681180;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			akkaRpcService.getExecutor())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,akka,rpc,service,get,executor,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1526387042;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			akkaRpcService.getExecutor())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,akka,rpc,service,get,executor,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1526494919;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			akkaRpcService.getExecutor())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,akka,rpc,service,get,executor,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1533829432;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			akkaRpcService.getExecutor())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,akka,rpc,service,get,executor,termination,future,get
AkkaRpcActorTest -> @Test(timeout=5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1548326020;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout=5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			akkaRpcService.getExecutor())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,akka,rpc,service,get,executor,termination,future,get
AkkaRpcActorTest -> @Test 	public void testMainThreadExecutionOnStop() throws Exception;1550005039;Tests that we can still run commands via the main thread executor when the onStop method_is called.;@Test_	public void testMainThreadExecutionOnStop() throws Exception {_		final MainThreadExecutorOnStopEndpoint endpoint = new MainThreadExecutorOnStopEndpoint(akkaRpcService)___		try {_			endpoint.start()___			CompletableFuture<Void> terminationFuture = endpoint.terminate()___			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,we,can,still,run,commands,via,the,main,thread,executor,when,the,on,stop,method,is,called;test,public,void,test,main,thread,execution,on,stop,throws,exception,final,main,thread,executor,on,stop,endpoint,endpoint,new,main,thread,executor,on,stop,endpoint,akka,rpc,service,try,endpoint,start,completable,future,void,termination,future,endpoint,terminate,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testMainThreadExecutionOnStop() throws Exception;1550005040;Tests that we can still run commands via the main thread executor when the onStop method_is called.;@Test_	public void testMainThreadExecutionOnStop() throws Exception {_		final MainThreadExecutorOnStopEndpoint endpoint = new MainThreadExecutorOnStopEndpoint(akkaRpcService)___		try {_			endpoint.start()___			CompletableFuture<Void> terminationFuture = endpoint.closeAsync()___			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,we,can,still,run,commands,via,the,main,thread,executor,when,the,on,stop,method,is,called;test,public,void,test,main,thread,execution,on,stop,throws,exception,final,main,thread,executor,on,stop,endpoint,endpoint,new,main,thread,executor,on,stop,endpoint,akka,rpc,service,try,endpoint,start,completable,future,void,termination,future,endpoint,close,async,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testMainThreadExecutionOnStop() throws Exception;1550509694;Tests that we can still run commands via the main thread executor when the onStop method_is called.;@Test_	public void testMainThreadExecutionOnStop() throws Exception {_		final MainThreadExecutorOnStopEndpoint endpoint = new MainThreadExecutorOnStopEndpoint(akkaRpcService)___		try {_			endpoint.start()___			CompletableFuture<Void> terminationFuture = endpoint.closeAsync()___			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,we,can,still,run,commands,via,the,main,thread,executor,when,the,on,stop,method,is,called;test,public,void,test,main,thread,execution,on,stop,throws,exception,final,main,thread,executor,on,stop,endpoint,endpoint,new,main,thread,executor,on,stop,endpoint,akka,rpc,service,try,endpoint,start,completable,future,void,termination,future,endpoint,close,async,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testMessageStashing() throws Exception;1482522856;Tests that the {@link AkkaRpcActor} stashes messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageStashing() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		Future<Integer> result = rpcGateway.foobar()___		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		Integer actualValue = Await.result(result, timeout.duration())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,stashes,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,stashing,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,future,integer,result,rpc,gateway,foobar,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,integer,actual,value,await,result,result,timeout,duration,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageStashing() throws Exception;1482522857;Tests that the {@link AkkaRpcActor} stashes messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageStashing() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		Future<Integer> result = rpcGateway.foobar()___		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		Integer actualValue = Await.result(result, timeout.duration())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,stashes,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,stashing,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,future,integer,result,rpc,gateway,foobar,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,integer,actual,value,await,result,result,timeout,duration,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageStashing() throws Exception;1482522858;Tests that the {@link AkkaRpcActor} stashes messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageStashing() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		Future<Integer> result = rpcGateway.foobar()___		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		Integer actualValue = Await.result(result, timeout.duration())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,stashes,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,stashing,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,future,integer,result,rpc,gateway,foobar,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,integer,actual,value,await,result,result,timeout,duration,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageStashing() throws Exception;1482522859;Tests that the {@link AkkaRpcActor} stashes messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageStashing() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		Future<Integer> result = rpcGateway.foobar()___		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,stashes,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,stashing,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,future,integer,result,rpc,gateway,foobar,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageStashing() throws Exception;1482522860;Tests that the {@link AkkaRpcActor} stashes messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageStashing() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		Future<Integer> result = rpcGateway.foobar()___		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,stashes,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,stashing,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,future,integer,result,rpc,gateway,foobar,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageStashing() throws Exception;1482522860;Tests that the {@link AkkaRpcActor} stashes messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageStashing() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		Future<Integer> result = rpcGateway.foobar()___		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,stashes,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,stashing,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,future,integer,result,rpc,gateway,foobar,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageStashing() throws Exception;1482522861;Tests that the {@link AkkaRpcActor} stashes messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageStashing() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		Future<Integer> result = rpcGateway.foobar()___		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,stashes,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,stashing,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,future,integer,result,rpc,gateway,foobar,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageStashing() throws Exception;1482522864;Tests that the {@link AkkaRpcActor} stashes messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageStashing() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		Future<Integer> result = rpcGateway.foobar()___		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,stashes,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,stashing,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,future,integer,result,rpc,gateway,foobar,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1482522865;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		Future<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1482522867;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		Future<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1486122374;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		Future<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1501485811;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		Future<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1501760738;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelf()___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1502452184;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1507207963;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1515481550;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1519406526;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1519406526;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1519406528;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1522681180;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1526387042;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1526494919;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1533829432;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1548326020;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1548326025;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1548326025;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1550005039;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		_		result = rpcGateway.foobar()___		_		Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___		assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))___		rpcEndpoint.shutDown()__	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,rpc,endpoint,shut,down
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1550005040;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		try {_			_			result = rpcGateway.foobar()___			_			Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___			assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))__		} finally {_			RpcUtils.terminateRpcEndpoint(rpcEndpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,try,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,finally,rpc,utils,terminate,rpc,endpoint,rpc,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testMessageDiscarding() throws Exception;1550509694;Tests that the {@link AkkaRpcActor} discards messages until the corresponding_{@link RpcEndpoint} has been started.;@Test_	public void testMessageDiscarding() throws Exception {_		int expectedValue = 1337___		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		DummyRpcGateway rpcGateway = rpcEndpoint.getSelfGateway(DummyRpcGateway.class)___		_		CompletableFuture<Integer> result = rpcGateway.foobar()___		try {_			result.get(timeout.getSize(), timeout.getUnit())__			fail("Expected an AkkaRpcException.")__		} catch (ExecutionException ee) {_			_			assertTrue(ee.getCause() instanceof AkkaRpcException)__		}__		_		rpcEndpoint.setFoobar(expectedValue)___		_		rpcEndpoint.start()___		try {_			_			result = rpcGateway.foobar()___			_			Integer actualValue = result.get(timeout.getSize(), timeout.getUnit())___			assertThat("The new foobar value should have been returned.", actualValue, Is.is(expectedValue))__		} finally {_			RpcUtils.terminateRpcEndpoint(rpcEndpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,discards,messages,until,the,corresponding,link,rpc,endpoint,has,been,started;test,public,void,test,message,discarding,throws,exception,int,expected,value,1337,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,dummy,rpc,gateway,rpc,gateway,rpc,endpoint,get,self,gateway,dummy,rpc,gateway,class,completable,future,integer,result,rpc,gateway,foobar,try,result,get,timeout,get,size,timeout,get,unit,fail,expected,an,akka,rpc,exception,catch,execution,exception,ee,assert,true,ee,get,cause,instanceof,akka,rpc,exception,rpc,endpoint,set,foobar,expected,value,rpc,endpoint,start,try,result,rpc,gateway,foobar,integer,actual,value,result,get,timeout,get,size,timeout,get,unit,assert,that,the,new,foobar,value,should,have,been,returned,actual,value,is,is,expected,value,finally,rpc,utils,terminate,rpc,endpoint,rpc,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception;1519406528;Tests that the {@link AkkaRpcActor} only completes after the asynchronous_post stop action has completed.;@Test_	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception {_		final CompletableFuture<Void> postStopFuture = new CompletableFuture<>()__		final AsynchronousPostStopEndpoint endpoint = new AsynchronousPostStopEndpoint(akkaRpcService, postStopFuture)___		try {_			endpoint.start()___			final CompletableFuture<Void> terminationFuture = endpoint.getTerminationFuture()___			endpoint.shutDown()___			assertFalse(terminationFuture.isDone())___			postStopFuture.complete(null)___			_			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,only,completes,after,the,asynchronous,post,stop,action,has,completed;test,public,void,test,actor,termination,with,asynchronous,post,stop,action,throws,exception,final,completable,future,void,post,stop,future,new,completable,future,final,asynchronous,post,stop,endpoint,endpoint,new,asynchronous,post,stop,endpoint,akka,rpc,service,post,stop,future,try,endpoint,start,final,completable,future,void,termination,future,endpoint,get,termination,future,endpoint,shut,down,assert,false,termination,future,is,done,post,stop,future,complete,null,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception;1522681180;Tests that the {@link AkkaRpcActor} only completes after the asynchronous_post stop action has completed.;@Test_	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception {_		final CompletableFuture<Void> postStopFuture = new CompletableFuture<>()__		final AsynchronousPostStopEndpoint endpoint = new AsynchronousPostStopEndpoint(akkaRpcService, postStopFuture)___		try {_			endpoint.start()___			final CompletableFuture<Void> terminationFuture = endpoint.getTerminationFuture()___			endpoint.shutDown()___			assertFalse(terminationFuture.isDone())___			postStopFuture.complete(null)___			_			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,only,completes,after,the,asynchronous,post,stop,action,has,completed;test,public,void,test,actor,termination,with,asynchronous,post,stop,action,throws,exception,final,completable,future,void,post,stop,future,new,completable,future,final,asynchronous,post,stop,endpoint,endpoint,new,asynchronous,post,stop,endpoint,akka,rpc,service,post,stop,future,try,endpoint,start,final,completable,future,void,termination,future,endpoint,get,termination,future,endpoint,shut,down,assert,false,termination,future,is,done,post,stop,future,complete,null,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception;1526387042;Tests that the {@link AkkaRpcActor} only completes after the asynchronous_post stop action has completed.;@Test_	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception {_		final CompletableFuture<Void> postStopFuture = new CompletableFuture<>()__		final AsynchronousPostStopEndpoint endpoint = new AsynchronousPostStopEndpoint(akkaRpcService, postStopFuture)___		try {_			endpoint.start()___			final CompletableFuture<Void> terminationFuture = endpoint.getTerminationFuture()___			endpoint.shutDown()___			assertFalse(terminationFuture.isDone())___			postStopFuture.complete(null)___			_			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,only,completes,after,the,asynchronous,post,stop,action,has,completed;test,public,void,test,actor,termination,with,asynchronous,post,stop,action,throws,exception,final,completable,future,void,post,stop,future,new,completable,future,final,asynchronous,post,stop,endpoint,endpoint,new,asynchronous,post,stop,endpoint,akka,rpc,service,post,stop,future,try,endpoint,start,final,completable,future,void,termination,future,endpoint,get,termination,future,endpoint,shut,down,assert,false,termination,future,is,done,post,stop,future,complete,null,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception;1526494919;Tests that the {@link AkkaRpcActor} only completes after the asynchronous_post stop action has completed.;@Test_	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception {_		final CompletableFuture<Void> postStopFuture = new CompletableFuture<>()__		final AsynchronousPostStopEndpoint endpoint = new AsynchronousPostStopEndpoint(akkaRpcService, postStopFuture)___		try {_			endpoint.start()___			final CompletableFuture<Void> terminationFuture = endpoint.getTerminationFuture()___			endpoint.shutDown()___			assertFalse(terminationFuture.isDone())___			postStopFuture.complete(null)___			_			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,only,completes,after,the,asynchronous,post,stop,action,has,completed;test,public,void,test,actor,termination,with,asynchronous,post,stop,action,throws,exception,final,completable,future,void,post,stop,future,new,completable,future,final,asynchronous,post,stop,endpoint,endpoint,new,asynchronous,post,stop,endpoint,akka,rpc,service,post,stop,future,try,endpoint,start,final,completable,future,void,termination,future,endpoint,get,termination,future,endpoint,shut,down,assert,false,termination,future,is,done,post,stop,future,complete,null,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception;1533829432;Tests that the {@link AkkaRpcActor} only completes after the asynchronous_post stop action has completed.;@Test_	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception {_		final CompletableFuture<Void> postStopFuture = new CompletableFuture<>()__		final AsynchronousPostStopEndpoint endpoint = new AsynchronousPostStopEndpoint(akkaRpcService, postStopFuture)___		try {_			endpoint.start()___			final CompletableFuture<Void> terminationFuture = endpoint.getTerminationFuture()___			endpoint.shutDown()___			assertFalse(terminationFuture.isDone())___			postStopFuture.complete(null)___			_			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,only,completes,after,the,asynchronous,post,stop,action,has,completed;test,public,void,test,actor,termination,with,asynchronous,post,stop,action,throws,exception,final,completable,future,void,post,stop,future,new,completable,future,final,asynchronous,post,stop,endpoint,endpoint,new,asynchronous,post,stop,endpoint,akka,rpc,service,post,stop,future,try,endpoint,start,final,completable,future,void,termination,future,endpoint,get,termination,future,endpoint,shut,down,assert,false,termination,future,is,done,post,stop,future,complete,null,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception;1548326020;Tests that the {@link AkkaRpcActor} only completes after the asynchronous_post stop action has completed.;@Test_	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception {_		final CompletableFuture<Void> postStopFuture = new CompletableFuture<>()__		final AsynchronousPostStopEndpoint endpoint = new AsynchronousPostStopEndpoint(akkaRpcService, postStopFuture)___		try {_			endpoint.start()___			final CompletableFuture<Void> terminationFuture = endpoint.getTerminationFuture()___			endpoint.shutDown()___			assertFalse(terminationFuture.isDone())___			postStopFuture.complete(null)___			_			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,only,completes,after,the,asynchronous,post,stop,action,has,completed;test,public,void,test,actor,termination,with,asynchronous,post,stop,action,throws,exception,final,completable,future,void,post,stop,future,new,completable,future,final,asynchronous,post,stop,endpoint,endpoint,new,asynchronous,post,stop,endpoint,akka,rpc,service,post,stop,future,try,endpoint,start,final,completable,future,void,termination,future,endpoint,get,termination,future,endpoint,shut,down,assert,false,termination,future,is,done,post,stop,future,complete,null,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception;1548326025;Tests that the {@link AkkaRpcActor} only completes after the asynchronous_post stop action has completed.;@Test_	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception {_		final CompletableFuture<Void> postStopFuture = new CompletableFuture<>()__		final AsynchronousPostStopEndpoint endpoint = new AsynchronousPostStopEndpoint(akkaRpcService, postStopFuture)___		try {_			endpoint.start()___			final CompletableFuture<Void> terminationFuture = endpoint.getTerminationFuture()___			endpoint.shutDown()___			assertFalse(terminationFuture.isDone())___			postStopFuture.complete(null)___			_			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,only,completes,after,the,asynchronous,post,stop,action,has,completed;test,public,void,test,actor,termination,with,asynchronous,post,stop,action,throws,exception,final,completable,future,void,post,stop,future,new,completable,future,final,asynchronous,post,stop,endpoint,endpoint,new,asynchronous,post,stop,endpoint,akka,rpc,service,post,stop,future,try,endpoint,start,final,completable,future,void,termination,future,endpoint,get,termination,future,endpoint,shut,down,assert,false,termination,future,is,done,post,stop,future,complete,null,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception;1548326025;Tests that the {@link AkkaRpcActor} only completes after the asynchronous_post stop action has completed.;@Test_	public void testActorTerminationWithAsynchronousPostStopAction() throws Exception {_		final CompletableFuture<Void> postStopFuture = new CompletableFuture<>()__		final AsynchronousPostStopEndpoint endpoint = new AsynchronousPostStopEndpoint(akkaRpcService, postStopFuture)___		try {_			endpoint.start()___			final CompletableFuture<Void> terminationFuture = endpoint.getTerminationFuture()___			endpoint.shutDown()___			assertFalse(terminationFuture.isDone())___			postStopFuture.complete(null)___			_			terminationFuture.get()__		} finally {_			RpcUtils.terminateRpcEndpoint(endpoint, timeout)__		}_	};tests,that,the,link,akka,rpc,actor,only,completes,after,the,asynchronous,post,stop,action,has,completed;test,public,void,test,actor,termination,with,asynchronous,post,stop,action,throws,exception,final,completable,future,void,post,stop,future,new,completable,future,final,asynchronous,post,stop,endpoint,endpoint,new,asynchronous,post,stop,endpoint,akka,rpc,service,post,stop,future,try,endpoint,start,final,completable,future,void,termination,future,endpoint,get,termination,future,endpoint,shut,down,assert,false,termination,future,is,done,post,stop,future,complete,null,termination,future,get,finally,rpc,utils,terminate,rpc,endpoint,endpoint,timeout
AkkaRpcActorTest -> @Test 	public void testOnStopExecutedByMainThread() throws Exception;1550005039;Checks that the onStop callback is executed within the main thread.;@Test_	public void testOnStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		simpleRpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.getTerminationFuture()___		_		_		terminationFuture.get()__	};checks,that,the,on,stop,callback,is,executed,within,the,main,thread;test,public,void,test,on,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,simple,rpc,endpoint,shut,down,completable,future,void,termination,future,simple,rpc,endpoint,get,termination,future,termination,future,get
AkkaRpcActorTest -> @Test 	public void testOnStopExecutedByMainThread() throws Exception;1550005040;Checks that the onStop callback is executed within the main thread.;@Test_	public void testOnStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.closeAsync()___		_		_		terminationFuture.get()__	};checks,that,the,on,stop,callback,is,executed,within,the,main,thread;test,public,void,test,on,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,completable,future,void,termination,future,simple,rpc,endpoint,close,async,termination,future,get
AkkaRpcActorTest -> @Test 	public void testOnStopExecutedByMainThread() throws Exception;1550509694;Checks that the onStop callback is executed within the main thread.;@Test_	public void testOnStopExecutedByMainThread() throws Exception {_		SimpleRpcEndpoint simpleRpcEndpoint = new SimpleRpcEndpoint(akkaRpcService, "SimpleRpcEndpoint")__		simpleRpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = simpleRpcEndpoint.closeAsync()___		_		_		terminationFuture.get()__	};checks,that,the,on,stop,callback,is,executed,within,the,main,thread;test,public,void,test,on,stop,executed,by,main,thread,throws,exception,simple,rpc,endpoint,simple,rpc,endpoint,new,simple,rpc,endpoint,akka,rpc,service,simple,rpc,endpoint,simple,rpc,endpoint,start,completable,future,void,termination,future,simple,rpc,endpoint,close,async,termination,future,get
AkkaRpcActorTest -> @Test 	public void testOnStopExceptionPropagation() throws Exception;1550005039;Tests that exception thrown in the onStop method are returned by the termination_future.;@Test_	public void testOnStopExceptionPropagation() throws Exception {_		FailingOnStopEndpoint rpcEndpoint = new FailingOnStopEndpoint(akkaRpcService, "FailingOnStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingOnStopEndpoint.OnStopException)__		}_	};tests,that,exception,thrown,in,the,on,stop,method,are,returned,by,the,termination,future;test,public,void,test,on,stop,exception,propagation,throws,exception,failing,on,stop,endpoint,rpc,endpoint,new,failing,on,stop,endpoint,akka,rpc,service,failing,on,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,on,stop,endpoint,on,stop,exception
AkkaRpcActorTest -> @Test 	public void testOnStopExceptionPropagation() throws Exception;1550005040;Tests that exception thrown in the onStop method are returned by the termination_future.;@Test_	public void testOnStopExceptionPropagation() throws Exception {_		FailingOnStopEndpoint rpcEndpoint = new FailingOnStopEndpoint(akkaRpcService, "FailingOnStopEndpoint")__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.closeAsync()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingOnStopEndpoint.OnStopException)__		}_	};tests,that,exception,thrown,in,the,on,stop,method,are,returned,by,the,termination,future;test,public,void,test,on,stop,exception,propagation,throws,exception,failing,on,stop,endpoint,rpc,endpoint,new,failing,on,stop,endpoint,akka,rpc,service,failing,on,stop,endpoint,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,close,async,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,on,stop,endpoint,on,stop,exception
AkkaRpcActorTest -> @Test 	public void testOnStopExceptionPropagation() throws Exception;1550509694;Tests that exception thrown in the onStop method are returned by the termination_future.;@Test_	public void testOnStopExceptionPropagation() throws Exception {_		FailingOnStopEndpoint rpcEndpoint = new FailingOnStopEndpoint(akkaRpcService, "FailingOnStopEndpoint")__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.closeAsync()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingOnStopEndpoint.OnStopException)__		}_	};tests,that,exception,thrown,in,the,on,stop,method,are,returned,by,the,termination,future;test,public,void,test,on,stop,exception,propagation,throws,exception,failing,on,stop,endpoint,rpc,endpoint,new,failing,on,stop,endpoint,akka,rpc,service,failing,on,stop,endpoint,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,close,async,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,on,stop,endpoint,on,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1501485811;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		Future<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1501760738;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1502452184;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1507207963;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,boolean,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1515481550;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,boolean,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1519406526;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,boolean,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1519406526;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1519406528;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1522681180;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1526387042;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1526494919;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1533829432;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1548326020;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1548326025;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testPostStopExceptionPropagation() throws Exception;1548326025;Tests that exception thrown in the postStop method are returned by the termination_future.;@Test_	public void testPostStopExceptionPropagation() throws Exception {_		FailingPostStopEndpoint rpcEndpoint = new FailingPostStopEndpoint(akkaRpcService, "FailingPostStopEndpoint")__		rpcEndpoint.start()___		rpcEndpoint.shutDown()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		try {_			terminationFuture.get()__		} catch (ExecutionException e) {_			assertTrue(e.getCause() instanceof FailingPostStopEndpoint.PostStopException)__		}_	};tests,that,exception,thrown,in,the,post,stop,method,are,returned,by,the,termination,future;test,public,void,test,post,stop,exception,propagation,throws,exception,failing,post,stop,endpoint,rpc,endpoint,new,failing,post,stop,endpoint,akka,rpc,service,failing,post,stop,endpoint,rpc,endpoint,start,rpc,endpoint,shut,down,completable,future,void,termination,future,rpc,endpoint,get,termination,future,try,termination,future,get,catch,execution,exception,e,assert,true,e,get,cause,instanceof,failing,post,stop,endpoint,post,stop,exception
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1482522857;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = Await.result(futureRpcGateway, timeout.duration())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,await,result,future,rpc,gateway,timeout,duration,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1482522858;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = Await.result(futureRpcGateway, timeout.duration())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,await,result,future,rpc,gateway,timeout,duration,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1482522859;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1482522860;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1482522860;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1482522861;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1482522864;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1482522865;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1482522867;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1486122374;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1501485811;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		Future<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1501760738;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1502452184;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1507207963;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1515481550;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1519406526;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1519406526;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1519406528;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1522681180;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1526387042;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1526494919;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1533829432;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1548326020;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1548326025;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1548326025;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1550005039;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1550005040;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testAddressResolution() throws Exception;1550509694;Tests that the rpc endpoint and the associated rpc gateway have the same addresses._@throws Exception;@Test_	public void testAddressResolution() throws Exception {_		DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)___		CompletableFuture<DummyRpcGateway> futureRpcGateway = akkaRpcService.connect(rpcEndpoint.getAddress(), DummyRpcGateway.class)___		DummyRpcGateway rpcGateway = futureRpcGateway.get(timeout.getSize(), timeout.getUnit())___		assertEquals(rpcEndpoint.getAddress(), rpcGateway.getAddress())__	};tests,that,the,rpc,endpoint,and,the,associated,rpc,gateway,have,the,same,addresses,throws,exception;test,public,void,test,address,resolution,throws,exception,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,completable,future,dummy,rpc,gateway,future,rpc,gateway,akka,rpc,service,connect,rpc,endpoint,get,address,dummy,rpc,gateway,class,dummy,rpc,gateway,rpc,gateway,future,rpc,gateway,get,timeout,get,size,timeout,get,unit,assert,equals,rpc,endpoint,get,address,rpc,gateway,get,address
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1507207963;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(rpcActorSystem, timeout)___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.shutdown()__			rpcActorSystem.awaitTermination(FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,timeout,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,boolean,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,shutdown,rpc,actor,system,await,termination,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1515481550;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(rpcActorSystem, timeout)___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.shutdown()__			rpcActorSystem.awaitTermination(FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,timeout,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,boolean,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,shutdown,rpc,actor,system,await,termination,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1519406526;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(rpcActorSystem, timeout)___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Boolean> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.shutdown()__			rpcActorSystem.awaitTermination(FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,timeout,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,boolean,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,shutdown,rpc,actor,system,await,termination,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1519406526;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(rpcActorSystem, timeout)___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.shutdown()__			rpcActorSystem.awaitTermination(FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,timeout,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,shutdown,rpc,actor,system,await,termination,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1519406528;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(rpcActorSystem, timeout)___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.shutdown()__			rpcActorSystem.awaitTermination(FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,timeout,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,shutdown,rpc,actor,system,await,termination,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1522681180;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(rpcActorSystem, timeout)___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.shutdown()__			rpcActorSystem.awaitTermination(FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,timeout,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,shutdown,rpc,actor,system,await,termination,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1526387042;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(rpcActorSystem, timeout)___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.shutdown()__			rpcActorSystem.awaitTermination(FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,timeout,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,shutdown,rpc,actor,system,await,termination,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1526494919;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(rpcActorSystem, timeout)___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.shutdown()__			rpcActorSystem.awaitTermination(FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,timeout,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,shutdown,rpc,actor,system,await,termination,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1533829432;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(rpcActorSystem, timeout)___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.terminate()__			Await.ready(rpcActorSystem.whenTerminated(), FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,timeout,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,terminate,await,ready,rpc,actor,system,when,terminated,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1548326020;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(_			rpcActorSystem, AkkaRpcServiceConfiguration.defaultConfiguration())___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.terminate()__			Await.ready(rpcActorSystem.whenTerminated(), FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,akka,rpc,service,configuration,default,configuration,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,terminate,await,ready,rpc,actor,system,when,terminated,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1548326025;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(_			rpcActorSystem, AkkaRpcServiceConfiguration.defaultConfiguration())___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.terminate()__			Await.ready(rpcActorSystem.whenTerminated(), FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,akka,rpc,service,configuration,default,configuration,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,terminate,await,ready,rpc,actor,system,when,terminated,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1548326025;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(_			rpcActorSystem, AkkaRpcServiceConfiguration.defaultConfiguration())___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.terminate()__			Await.ready(rpcActorSystem.whenTerminated(), FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,akka,rpc,service,configuration,default,configuration,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,terminate,await,ready,rpc,actor,system,when,terminated,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1550005039;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(_			rpcActorSystem, AkkaRpcServiceConfiguration.defaultConfiguration())___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.terminate()__			Await.ready(rpcActorSystem.whenTerminated(), FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,akka,rpc,service,configuration,default,configuration,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,terminate,await,ready,rpc,actor,system,when,terminated,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1550005040;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(_			rpcActorSystem, AkkaRpcServiceConfiguration.defaultConfiguration())___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.terminate()__			Await.ready(rpcActorSystem.whenTerminated(), FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,akka,rpc,service,configuration,default,configuration,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,terminate,await,ready,rpc,actor,system,when,terminated,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test 	public void testActorTerminationWhenServiceShutdown() throws Exception;1550509694;Tests that actors are properly terminated when the AkkaRpcService is shut down.;@Test_	public void testActorTerminationWhenServiceShutdown() throws Exception {_		final ActorSystem rpcActorSystem = AkkaUtils.createDefaultActorSystem()__		final RpcService rpcService = new AkkaRpcService(_			rpcActorSystem, AkkaRpcServiceConfiguration.defaultConfiguration())___		try {_			SimpleRpcEndpoint rpcEndpoint = new SimpleRpcEndpoint(rpcService, SimpleRpcEndpoint.class.getSimpleName())___			rpcEndpoint.start()___			CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___			rpcService.stopService()___			terminationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} finally {_			rpcActorSystem.terminate()__			Await.ready(rpcActorSystem.whenTerminated(), FutureUtils.toFiniteDuration(timeout))__		}_	};tests,that,actors,are,properly,terminated,when,the,akka,rpc,service,is,shut,down;test,public,void,test,actor,termination,when,service,shutdown,throws,exception,final,actor,system,rpc,actor,system,akka,utils,create,default,actor,system,final,rpc,service,rpc,service,new,akka,rpc,service,rpc,actor,system,akka,rpc,service,configuration,default,configuration,try,simple,rpc,endpoint,rpc,endpoint,new,simple,rpc,endpoint,rpc,service,simple,rpc,endpoint,class,get,simple,name,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,rpc,service,stop,service,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds,finally,rpc,actor,system,terminate,await,ready,rpc,actor,system,when,terminated,future,utils,to,finite,duration,timeout
AkkaRpcActorTest -> @Test(timeout = 5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1548326025;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			akkaRpcService.getExecutor())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,akka,rpc,service,get,executor,termination,future,get
AkkaRpcActorTest -> @Test(timeout = 5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1548326025;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			() -> rpcEndpoint.shutDown(),_			akkaRpcService.getExecutor())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,akka,rpc,service,get,executor,termination,future,get
AkkaRpcActorTest -> @Test(timeout = 5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1550005039;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			rpcEndpoint::shutDown,_			akkaRpcService.getExecutor())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,shut,down,akka,rpc,service,get,executor,termination,future,get
AkkaRpcActorTest -> @Test(timeout = 5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1550005040;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			rpcEndpoint::closeAsync,_			akkaRpcService.getExecutor())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,close,async,akka,rpc,service,get,executor,termination,future,get
AkkaRpcActorTest -> @Test(timeout = 5000) 	public void testRpcEndpointTerminationFuture() throws Exception;1550509694;Tests that we can wait for a RpcEndpoint to terminate.__@throws ExecutionException_@throws InterruptedException;@Test(timeout = 5000)_	public void testRpcEndpointTerminationFuture() throws Exception {_		final DummyRpcEndpoint rpcEndpoint = new DummyRpcEndpoint(akkaRpcService)__		rpcEndpoint.start()___		CompletableFuture<Void> terminationFuture = rpcEndpoint.getTerminationFuture()___		assertFalse(terminationFuture.isDone())___		CompletableFuture.runAsync(_			rpcEndpoint::closeAsync,_			akkaRpcService.getExecutor())___		_		terminationFuture.get()__	};tests,that,we,can,wait,for,a,rpc,endpoint,to,terminate,throws,execution,exception,throws,interrupted,exception;test,timeout,5000,public,void,test,rpc,endpoint,termination,future,throws,exception,final,dummy,rpc,endpoint,rpc,endpoint,new,dummy,rpc,endpoint,akka,rpc,service,rpc,endpoint,start,completable,future,void,termination,future,rpc,endpoint,get,termination,future,assert,false,termination,future,is,done,completable,future,run,async,rpc,endpoint,close,async,akka,rpc,service,get,executor,termination,future,get
