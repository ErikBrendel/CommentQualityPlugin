commented;modifiers;parameterAmount;loc;comment;code
true;public;0;91;/**  * Tests the scheduling of two tasks with a parallelism of 2 and a co-location constraint.  */ ;/**  * Tests the scheduling of two tasks with a parallelism of 2 and a co-location constraint.  */ @Test public void testSimpleCoLocatedSlotScheduling() throws ExecutionException, InterruptedException {     final BlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(2).     final TestingResourceManagerGateway testingResourceManagerGateway = slotPoolResource.getTestingResourceManagerGateway().     testingResourceManagerGateway.setRequestSlotConsumer((SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId())).     final TaskManagerLocation taskManagerLocation = new LocalTaskManagerLocation().     final SlotPool slotPoolGateway = slotPoolResource.getSlotPool().     slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).     CoLocationGroup group = new CoLocationGroup().     CoLocationConstraint coLocationConstraint1 = group.getLocationConstraint(0).     CoLocationConstraint coLocationConstraint2 = group.getLocationConstraint(1).     final SlotSharingGroupId slotSharingGroupId = new SlotSharingGroupId().     JobVertexID jobVertexId1 = new JobVertexID().     JobVertexID jobVertexId2 = new JobVertexID().     final SlotProvider slotProvider = slotPoolResource.getSlotProvider().     CompletableFuture<LogicalSlot> logicalSlotFuture11 = slotProvider.allocateSlot(new ScheduledUnit(jobVertexId1, slotSharingGroupId, coLocationConstraint1), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     CompletableFuture<LogicalSlot> logicalSlotFuture22 = slotProvider.allocateSlot(new ScheduledUnit(jobVertexId2, slotSharingGroupId, coLocationConstraint2), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     CompletableFuture<LogicalSlot> logicalSlotFuture12 = slotProvider.allocateSlot(new ScheduledUnit(jobVertexId2, slotSharingGroupId, coLocationConstraint1), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     CompletableFuture<LogicalSlot> logicalSlotFuture21 = slotProvider.allocateSlot(new ScheduledUnit(jobVertexId1, slotSharingGroupId, coLocationConstraint2), true, SlotProfile.noRequirements(), TestingUtils.infiniteTime()).     final AllocationID allocationId1 = allocationIds.take().     final AllocationID allocationId2 = allocationIds.take().     Collection<SlotOffer> slotOfferFuture1 = slotPoolGateway.offerSlots(taskManagerLocation, new SimpleAckingTaskManagerGateway(), Collections.singletonList(new SlotOffer(allocationId1, 0, ResourceProfile.UNKNOWN))).     Collection<SlotOffer> slotOfferFuture2 = slotPoolGateway.offerSlots(taskManagerLocation, new SimpleAckingTaskManagerGateway(), Collections.singletonList(new SlotOffer(allocationId2, 0, ResourceProfile.UNKNOWN))).     assertFalse(slotOfferFuture1.isEmpty()).     assertFalse(slotOfferFuture2.isEmpty()).     LogicalSlot logicalSlot11 = logicalSlotFuture11.get().     LogicalSlot logicalSlot12 = logicalSlotFuture12.get().     LogicalSlot logicalSlot21 = logicalSlotFuture21.get().     LogicalSlot logicalSlot22 = logicalSlotFuture22.get().     assertEquals(logicalSlot11.getAllocationId(), logicalSlot12.getAllocationId()).     assertEquals(logicalSlot21.getAllocationId(), logicalSlot22.getAllocationId()).     assertNotEquals(logicalSlot11.getAllocationId(), logicalSlot21.getAllocationId()). }
