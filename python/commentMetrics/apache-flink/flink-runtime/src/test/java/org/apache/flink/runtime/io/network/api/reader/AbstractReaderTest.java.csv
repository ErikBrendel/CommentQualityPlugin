commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test @SuppressWarnings("unchecked") public void testTaskEvent() throws Exception {     final AbstractReader reader = new MockReader(createInputGate(1)).     final EventListener<TaskEvent> listener1 = mock(EventListener.class).     final EventListener<TaskEvent> listener2 = mock(EventListener.class).     final EventListener<TaskEvent> listener3 = mock(EventListener.class).     reader.registerTaskEventListener(listener1, TestTaskEvent1.class).     reader.registerTaskEventListener(listener2, TestTaskEvent2.class).     reader.registerTaskEventListener(listener3, TaskEvent.class).     // for listener1 only     reader.handleEvent(new TestTaskEvent1()).     // for listener2 only     reader.handleEvent(new TestTaskEvent2()).     verify(listener1, times(1)).onEvent(Matchers.any(TaskEvent.class)).     verify(listener2, times(1)).onEvent(Matchers.any(TaskEvent.class)).     verify(listener3, times(0)).onEvent(Matchers.any(TaskEvent.class)). }
false;public;0;6;;@Test public void testEndOfPartitionEvent() throws Exception {     final AbstractReader reader = new MockReader(createInputGate(1)).     assertTrue(reader.handleEvent(EndOfPartitionEvent.INSTANCE)). }
true;public;0;26;/**  * Ensure that all end of superstep event related methods throw an Exception when used with a  * non-iterative reader.  */ ;/**  * Ensure that all end of superstep event related methods throw an Exception when used with a  * non-iterative reader.  */ @Test public void testExceptionsNonIterativeReader() throws Exception {     final AbstractReader reader = new MockReader(createInputGate(4)).     // Non-iterative reader cannot reach end of superstep     assertFalse(reader.hasReachedEndOfSuperstep()).     try {         reader.startNextSuperstep().         fail("Did not throw expected exception when starting next superstep with non-iterative reader.").     } catch (Throwable t) {     // All good, expected exception.     }     try {         reader.handleEvent(EndOfSuperstepEvent.INSTANCE).         fail("Did not throw expected exception when handling end of superstep event with non-iterative reader.").     } catch (Throwable t) {     // All good, expected exception.     } }
false;public;0;44;;@Test public void testEndOfSuperstepEventLogic() throws IOException {     final int numberOfInputChannels = 4.     final AbstractReader reader = new MockReader(createInputGate(numberOfInputChannels)).     reader.setIterativeReader().     try {         // The first superstep does not need not to be explicitly started         reader.startNextSuperstep().         fail("Did not throw expected exception when starting next superstep before receiving all end of superstep events.").     } catch (Throwable t) {     // All good, expected exception.     }     EndOfSuperstepEvent eos = EndOfSuperstepEvent.INSTANCE.     // received event.     for (int i = 0. i < numberOfInputChannels - 1. i++) {         assertFalse(reader.handleEvent(eos)).         assertFalse(reader.hasReachedEndOfSuperstep()).     }     assertTrue(reader.handleEvent(eos)).     assertTrue(reader.hasReachedEndOfSuperstep()).     try {         // Verify exception, when receiving too many end of superstep events.         reader.handleEvent(eos).         fail("Did not throw expected exception when receiving too many end of superstep events.").     } catch (Throwable t) {     // All good, expected exception.     }     // Start next superstep.     reader.startNextSuperstep().     assertFalse(reader.hasReachedEndOfSuperstep()). }
false;private;1;6;;private InputGate createInputGate(int numberOfInputChannels) {     final InputGate inputGate = mock(InputGate.class).     when(inputGate.getNumberOfInputChannels()).thenReturn(numberOfInputChannels).     return inputGate. }
false;public;1;3;;@Override public void write(DataOutputView out) throws IOException { }
false;public;1;3;;@Override public void read(DataInputView in) throws IOException { }
false;public;1;3;;@Override public void write(DataOutputView out) throws IOException { }
false;public;1;3;;@Override public void read(DataInputView in) throws IOException { }
