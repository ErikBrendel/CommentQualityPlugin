commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getAddress() {     return address. }
false;public;0;3;;public UUID getLeaderSessionID() {     return leaderSessionID. }
false;public;1;28;;public String waitForNewLeader(long timeout) throws Exception {     long start = System.currentTimeMillis().     long curTimeout.     synchronized (lock) {         while (exception == null && (address == null || address.equals(oldAddress)) && (curTimeout = timeout - System.currentTimeMillis() + start) > 0) {             try {                 lock.wait(curTimeout).             } catch (InterruptedException e) {             // we got interrupted so check again for the condition             }         }     }     if (exception != null) {         throw exception.     } else if (address == null || address.equals(oldAddress)) {         throw new TimeoutException("Listener was not notified about a leader within " + timeout + "ms").     }     oldAddress = address.     return address. }
false;public;2;11;;@Override public void notifyLeaderAddress(String leaderAddress, UUID leaderSessionID) {     synchronized (lock) {         LOG.debug("Notified about new leader address {} with session ID {}.", leaderAddress, leaderSessionID).         this.address = leaderAddress.         this.leaderSessionID = leaderSessionID.         lock.notifyAll().     } }
false;public;1;4;;@Override public void handleError(Exception exception) {     this.exception = exception. }
