commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;// ------------------------------------------------------------------------ // Direct Executor // ------------------------------------------------------------------------ @Override public void execute(Runnable command) {     if (!isShutdown()) {         command.run().     } else {         throw new RejectedExecutionException().     } }
false;public;3;4;;// ------------------------------------------------------------------------ // Scheduled Executor // ------------------------------------------------------------------------ @Override public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit) {     return scheduledService.schedule(command, delay, unit). }
false;public;3;4;;@Override public <V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit) {     return scheduledService.schedule(callable, delay, unit). }
false;public;4;4;;@Override public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit) {     return scheduledService.scheduleAtFixedRate(command, initialDelay, period, unit). }
false;public;4;4;;@Override public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) {     return scheduledService.scheduleWithFixedDelay(command, initialDelay, delay, unit). }
false;public;0;4;;// ------------------------------------------------------------------------ // Shutdown // ------------------------------------------------------------------------ @Override public void shutdown() {     scheduledService.shutdown(). }
false;public;0;4;;@Override public List<Runnable> shutdownNow() {     return scheduledService.shutdownNow(). }
false;public;0;4;;@Override public boolean isShutdown() {     return scheduledService.isShutdown(). }
false;public;0;4;;@Override public boolean isTerminated() {     return scheduledService.isTerminated(). }
false;public;2;4;;@Override public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {     return scheduledService.awaitTermination(timeout, unit). }
