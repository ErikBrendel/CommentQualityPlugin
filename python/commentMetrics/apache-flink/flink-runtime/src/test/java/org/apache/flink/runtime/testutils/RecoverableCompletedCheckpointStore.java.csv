commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void recover() throws Exception {     checkpoints.addAll(suspended).     suspended.clear(). }
false;public;1;9;;@Override public void addCheckpoint(CompletedCheckpoint checkpoint) throws Exception {     checkpoints.addLast(checkpoint).     if (checkpoints.size() > maxRetainedCheckpoints) {         removeOldestCheckpoint().     } }
false;public;0;4;;public void removeOldestCheckpoint() throws Exception {     CompletedCheckpoint checkpointToSubsume = checkpoints.removeFirst().     checkpointToSubsume.discardOnSubsume(). }
false;public;0;4;;@Override public CompletedCheckpoint getLatestCheckpoint() throws Exception {     return checkpoints.isEmpty() ? null : checkpoints.getLast(). }
false;public;1;15;;@Override public void shutdown(JobStatus jobStatus) throws Exception {     if (jobStatus.isGloballyTerminalState()) {         checkpoints.clear().         suspended.clear().     } else {         suspended.clear().         for (CompletedCheckpoint checkpoint : checkpoints) {             suspended.add(checkpoint).         }         checkpoints.clear().     } }
false;public;0;4;;@Override public List<CompletedCheckpoint> getAllCheckpoints() throws Exception {     return new ArrayList<>(checkpoints). }
false;public;0;4;;@Override public int getNumberOfRetainedCheckpoints() {     return checkpoints.size(). }
false;public;0;4;;@Override public int getMaxNumberOfRetainedCheckpoints() {     return maxRetainedCheckpoints. }
false;public;0;4;;@Override public boolean requiresExternalizedCheckpoints() {     return false. }
