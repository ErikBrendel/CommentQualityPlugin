commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;8;;public static AccessExecutionGraph getTestJob() throws Exception {     synchronized (lock) {         if (originalJob == null) {             generateArchivedJob().         }     }     return originalJob. }
false;public,static;0;8;;public static AccessExecutionJobVertex getTestTask() throws Exception {     synchronized (lock) {         if (originalJob == null) {             generateArchivedJob().         }     }     return originalTask. }
false;public,static;0;8;;public static AccessExecutionVertex getTestSubtask() throws Exception {     synchronized (lock) {         if (originalJob == null) {             generateArchivedJob().         }     }     return originalSubtask. }
false;public,static;0;8;;public static AccessExecution getTestAttempt() throws Exception {     synchronized (lock) {         if (originalJob == null) {             generateArchivedJob().         }     }     return originalAttempt. }
false;private,static;0;38;;private static void generateArchivedJob() throws Exception {     // Attempt     StringifiedAccumulatorResult acc1 = new StringifiedAccumulatorResult("name1", "type1", "value1").     StringifiedAccumulatorResult acc2 = new StringifiedAccumulatorResult("name2", "type2", "value2").     TaskManagerLocation location = new TaskManagerLocation(new ResourceID("hello"), InetAddress.getLocalHost(), 1234).     AllocationID allocationID = new AllocationID(42L, 43L).     originalAttempt = new ArchivedExecutionBuilder().setStateTimestamps(new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }).setParallelSubtaskIndex(1).setAttemptNumber(0).setAssignedResourceLocation(location).setAssignedAllocationID(allocationID).setUserAccumulators(new StringifiedAccumulatorResult[] { acc1, acc2 }).setState(ExecutionState.FINISHED).setFailureCause("attemptException").build().     // Subtask     originalSubtask = new ArchivedExecutionVertexBuilder().setSubtaskIndex(originalAttempt.getParallelSubtaskIndex()).setTaskNameWithSubtask("hello(1/1)").setCurrentExecution(originalAttempt).build().     // Task     originalTask = new ArchivedExecutionJobVertexBuilder().setTaskVertices(new ArchivedExecutionVertex[] { originalSubtask }).build().     // Job     Map<JobVertexID, ArchivedExecutionJobVertex> tasks = new HashMap<>().     tasks.put(originalTask.getJobVertexId(), originalTask).     originalJob = new ArchivedExecutionGraphBuilder().setJobID(new JobID()).setTasks(tasks).setFailureCause(new ErrorInfo(new Exception("jobException"), originalAttempt.getStateTimestamp(ExecutionState.FAILED))).setState(JobStatus.FINISHED).setStateTimestamps(new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }).setArchivedUserAccumulators(new StringifiedAccumulatorResult[] { acc1, acc2 }).build(). }
false;public,static;2;10;;// ======================================================================== // utility methods // ======================================================================== public static void compareStringifiedAccumulators(StringifiedAccumulatorResult[] expectedAccs, ArrayNode writtenAccs) {     assertEquals(expectedAccs.length, writtenAccs.size()).     for (int x = 0. x < expectedAccs.length. x++) {         JsonNode acc = writtenAccs.get(x).         assertEquals(expectedAccs[x].getName(), acc.get("name").asText()).         assertEquals(expectedAccs[x].getType(), acc.get("type").asText()).         assertEquals(expectedAccs[x].getValue(), acc.get("value").asText()).     } }
false;public,static;2;6;;public static void compareIoMetrics(IOMetrics expectedMetrics, JsonNode writtenMetrics) {     assertEquals(expectedMetrics.getNumBytesInTotal(), writtenMetrics.get("read-bytes").asLong()).     assertEquals(expectedMetrics.getNumBytesOut(), writtenMetrics.get("write-bytes").asLong()).     assertEquals(expectedMetrics.getNumRecordsIn(), writtenMetrics.get("read-records").asLong()).     assertEquals(expectedMetrics.getNumRecordsOut(), writtenMetrics.get("write-records").asLong()). }
