commented;modifiers;parameterAmount;loc;comment;code
false;public;0;85;;@Test public void testEncodeDecode() {     testEncodeDecodeBuffer(false).     testEncodeDecodeBuffer(true).     {         {             IllegalStateException expectedError = new IllegalStateException().             InputChannelID receiverId = new InputChannelID().             NettyMessage.ErrorResponse expected = new NettyMessage.ErrorResponse(expectedError, receiverId).             NettyMessage.ErrorResponse actual = encodeAndDecode(expected).             assertEquals(expected.cause.getClass(), actual.cause.getClass()).             assertEquals(expected.cause.getMessage(), actual.cause.getMessage()).             assertEquals(receiverId, actual.receiverId).         }         {             IllegalStateException expectedError = new IllegalStateException("Illegal illegal illegal").             InputChannelID receiverId = new InputChannelID().             NettyMessage.ErrorResponse expected = new NettyMessage.ErrorResponse(expectedError, receiverId).             NettyMessage.ErrorResponse actual = encodeAndDecode(expected).             assertEquals(expected.cause.getClass(), actual.cause.getClass()).             assertEquals(expected.cause.getMessage(), actual.cause.getMessage()).             assertEquals(receiverId, actual.receiverId).         }         {             IllegalStateException expectedError = new IllegalStateException("Illegal illegal illegal").             NettyMessage.ErrorResponse expected = new NettyMessage.ErrorResponse(expectedError).             NettyMessage.ErrorResponse actual = encodeAndDecode(expected).             assertEquals(expected.cause.getClass(), actual.cause.getClass()).             assertEquals(expected.cause.getMessage(), actual.cause.getMessage()).             assertNull(actual.receiverId).             assertTrue(actual.isFatalError()).         }     }     {         NettyMessage.PartitionRequest expected = new NettyMessage.PartitionRequest(new ResultPartitionID(new IntermediateResultPartitionID(), new ExecutionAttemptID()), random.nextInt(), new InputChannelID(), random.nextInt()).         NettyMessage.PartitionRequest actual = encodeAndDecode(expected).         assertEquals(expected.partitionId, actual.partitionId).         assertEquals(expected.queueIndex, actual.queueIndex).         assertEquals(expected.receiverId, actual.receiverId).         assertEquals(expected.credit, actual.credit).     }     {         NettyMessage.TaskEventRequest expected = new NettyMessage.TaskEventRequest(new IntegerTaskEvent(random.nextInt()), new ResultPartitionID(new IntermediateResultPartitionID(), new ExecutionAttemptID()), new InputChannelID()).         NettyMessage.TaskEventRequest actual = encodeAndDecode(expected).         assertEquals(expected.event, actual.event).         assertEquals(expected.partitionId, actual.partitionId).         assertEquals(expected.receiverId, actual.receiverId).     }     {         NettyMessage.CancelPartitionRequest expected = new NettyMessage.CancelPartitionRequest(new InputChannelID()).         NettyMessage.CancelPartitionRequest actual = encodeAndDecode(expected).         assertEquals(expected.receiverId, actual.receiverId).     }     {         NettyMessage.CloseRequest expected = new NettyMessage.CloseRequest().         NettyMessage.CloseRequest actual = encodeAndDecode(expected).         assertEquals(expected.getClass(), actual.getClass()).     }     {         NettyMessage.AddCredit expected = new NettyMessage.AddCredit(new ResultPartitionID(new IntermediateResultPartitionID(), new ExecutionAttemptID()), random.nextInt(Integer.MAX_VALUE) + 1, new InputChannelID()).         NettyMessage.AddCredit actual = encodeAndDecode(expected).         assertEquals(expected.partitionId, actual.partitionId).         assertEquals(expected.credit, actual.credit).         assertEquals(expected.receiverId, actual.receiverId).     } }
false;private;1;38;;private void testEncodeDecodeBuffer(boolean testReadOnlyBuffer) {     NetworkBuffer buffer = new NetworkBuffer(MemorySegmentFactory.allocateUnpooledSegment(1024), FreeingBufferRecycler.INSTANCE).     for (int i = 0. i < 1024. i += 4) {         buffer.writeInt(i).     }     Buffer testBuffer = testReadOnlyBuffer ? buffer.readOnlySlice() : buffer.     NettyMessage.BufferResponse expected = new NettyMessage.BufferResponse(testBuffer, random.nextInt(), new InputChannelID(), random.nextInt()).     NettyMessage.BufferResponse actual = encodeAndDecode(expected).     // Netty 4.1 is not copying the messages, but retaining slices of them. BufferResponse actual is in this case     // holding a reference to the buffer. Buffer will be recycled only once "actual" will be released.     assertFalse(buffer.isRecycled()).     assertFalse(testBuffer.isRecycled()).     final ByteBuf retainedSlice = actual.getNettyBuffer().     // Ensure not recycled and same size as original buffer     assertEquals(1, retainedSlice.refCnt()).     assertEquals(1024, retainedSlice.readableBytes()).     for (int i = 0. i < 1024. i += 4) {         assertEquals(i, retainedSlice.readInt()).     }     // Release the retained slice     actual.releaseBuffer().     assertEquals(0, retainedSlice.refCnt()).     assertTrue(buffer.isRecycled()).     assertTrue(testBuffer.isRecycled()).     assertEquals(expected.sequenceNumber, actual.sequenceNumber).     assertEquals(expected.receiverId, actual.receiverId).     assertEquals(expected.backlog, actual.backlog). }
false;private;1;9;;@SuppressWarnings("unchecked") private <T extends NettyMessage> T encodeAndDecode(T msg) {     channel.writeOutbound(msg).     ByteBuf encoded = (ByteBuf) channel.readOutbound().     assertTrue(channel.writeInbound(encoded)).     return (T) channel.readInbound(). }
