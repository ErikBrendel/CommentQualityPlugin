commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void beforeClass() throws IOException {     temporaryFolder = new TemporaryFolder().     temporaryFolder.create(). }
false;public,static;0;4;;@AfterClass public static void afterClass() {     temporaryFolder.delete(). }
true;public;0;19;/**  * Tests if mkdirs for snapshot directories works.  */ ;/**  * Tests if mkdirs for snapshot directories works.  */ @Test public void mkdirs() throws Exception {     File folderRoot = temporaryFolder.getRoot().     File newFolder = new File(folderRoot, String.valueOf(UUID.randomUUID())).     File innerNewFolder = new File(newFolder, String.valueOf(UUID.randomUUID())).     Path path = new Path(innerNewFolder.toURI()).     Assert.assertFalse(newFolder.isDirectory()).     Assert.assertFalse(innerNewFolder.isDirectory()).     SnapshotDirectory snapshotDirectory = SnapshotDirectory.permanent(path).     Assert.assertFalse(snapshotDirectory.exists()).     Assert.assertFalse(newFolder.isDirectory()).     Assert.assertFalse(innerNewFolder.isDirectory()).     Assert.assertTrue(snapshotDirectory.mkdirs()).     Assert.assertTrue(newFolder.isDirectory()).     Assert.assertTrue(innerNewFolder.isDirectory()).     Assert.assertTrue(snapshotDirectory.exists()). }
true;public;0;14;/**  * Tests if indication of directory existence works.  */ ;/**  * Tests if indication of directory existence works.  */ @Test public void exists() throws Exception {     File folderRoot = temporaryFolder.getRoot().     File folderA = new File(folderRoot, String.valueOf(UUID.randomUUID())).     Assert.assertFalse(folderA.isDirectory()).     Path path = new Path(folderA.toURI()).     SnapshotDirectory snapshotDirectory = SnapshotDirectory.permanent(path).     Assert.assertFalse(snapshotDirectory.exists()).     Assert.assertTrue(folderA.mkdirs()).     Assert.assertTrue(snapshotDirectory.exists()).     Assert.assertTrue(folderA.delete()).     Assert.assertFalse(snapshotDirectory.exists()). }
true;public;0;18;/**  * Tests listing of file statuses works like listing on the path directly.  */ ;/**  * Tests listing of file statuses works like listing on the path directly.  */ @Test public void listStatus() throws Exception {     File folderRoot = temporaryFolder.getRoot().     File folderA = new File(folderRoot, String.valueOf(UUID.randomUUID())).     File folderB = new File(folderA, String.valueOf(UUID.randomUUID())).     Assert.assertTrue(folderB.mkdirs()).     File file = new File(folderA, "test.txt").     Assert.assertTrue(file.createNewFile()).     Path path = new Path(folderA.toURI()).     FileSystem fileSystem = path.getFileSystem().     SnapshotDirectory snapshotDirectory = SnapshotDirectory.permanent(path).     Assert.assertTrue(snapshotDirectory.exists()).     Assert.assertEquals(Arrays.toString(fileSystem.listStatus(path)), Arrays.toString(snapshotDirectory.listStatus())). }
true;public;0;27;/**  * Tests that reporting the handle of a completed snapshot works as expected and that the directory for completed  * snapshot is not deleted by {@link #deleteIfNotCompeltedSnapshot()}.  */ ;/**  * Tests that reporting the handle of a completed snapshot works as expected and that the directory for completed  * snapshot is not deleted by {@link #deleteIfNotCompeltedSnapshot()}.  */ @Test public void completeSnapshotAndGetHandle() throws Exception {     File folderRoot = temporaryFolder.getRoot().     File folderA = new File(folderRoot, String.valueOf(UUID.randomUUID())).     Assert.assertTrue(folderA.mkdirs()).     Path folderAPath = new Path(folderA.toURI()).     SnapshotDirectory snapshotDirectory = SnapshotDirectory.permanent(folderAPath).     // check that completed checkpoint dirs are not deleted as incomplete.     DirectoryStateHandle handle = snapshotDirectory.completeSnapshotAndGetHandle().     Assert.assertNotNull(handle).     Assert.assertTrue(snapshotDirectory.cleanup()).     Assert.assertTrue(folderA.isDirectory()).     Assert.assertEquals(folderAPath, handle.getDirectory()).     handle.discardState().     Assert.assertFalse(folderA.isDirectory()).     Assert.assertTrue(folderA.mkdirs()).     snapshotDirectory = SnapshotDirectory.permanent(folderAPath).     Assert.assertTrue(snapshotDirectory.cleanup()).     try {         snapshotDirectory.completeSnapshotAndGetHandle().         Assert.fail().     } catch (IOException ignore) {     } }
true;public;0;20;/**  * Tests that snapshot director behaves correct for delete calls. Completed snapshots should not be deleted,  * only ongoing snapshots can.  */ ;/**  * Tests that snapshot director behaves correct for delete calls. Completed snapshots should not be deleted,  * only ongoing snapshots can.  */ @Test public void deleteIfNotCompeltedSnapshot() throws Exception {     File folderRoot = temporaryFolder.getRoot().     File folderA = new File(folderRoot, String.valueOf(UUID.randomUUID())).     File folderB = new File(folderA, String.valueOf(UUID.randomUUID())).     Assert.assertTrue(folderB.mkdirs()).     File file = new File(folderA, "test.txt").     Assert.assertTrue(file.createNewFile()).     Path folderAPath = new Path(folderA.toURI()).     SnapshotDirectory snapshotDirectory = SnapshotDirectory.permanent(folderAPath).     Assert.assertTrue(snapshotDirectory.cleanup()).     Assert.assertFalse(folderA.isDirectory()).     Assert.assertTrue(folderA.mkdirs()).     Assert.assertTrue(file.createNewFile()).     snapshotDirectory = SnapshotDirectory.permanent(folderAPath).     snapshotDirectory.completeSnapshotAndGetHandle().     Assert.assertTrue(snapshotDirectory.cleanup()).     Assert.assertTrue(folderA.isDirectory()).     Assert.assertTrue(file.exists()). }
true;public;0;15;/**  * This test checks that completing or deleting the snapshot influence the #isSnapshotOngoing() flag.  */ ;/**  * This test checks that completing or deleting the snapshot influence the #isSnapshotOngoing() flag.  */ @Test public void isSnapshotOngoing() throws Exception {     File folderRoot = temporaryFolder.getRoot().     File folderA = new File(folderRoot, String.valueOf(UUID.randomUUID())).     Assert.assertTrue(folderA.mkdirs()).     Path pathA = new Path(folderA.toURI()).     SnapshotDirectory snapshotDirectory = SnapshotDirectory.permanent(pathA).     Assert.assertFalse(snapshotDirectory.isSnapshotCompleted()).     Assert.assertNotNull(snapshotDirectory.completeSnapshotAndGetHandle()).     Assert.assertTrue(snapshotDirectory.isSnapshotCompleted()).     snapshotDirectory = SnapshotDirectory.permanent(pathA).     Assert.assertFalse(snapshotDirectory.isSnapshotCompleted()).     snapshotDirectory.cleanup().     Assert.assertFalse(snapshotDirectory.isSnapshotCompleted()). }
true;public;0;13;/**  * Tests that temporary directories have the right behavior on completion and deletion.  */ ;/**  * Tests that temporary directories have the right behavior on completion and deletion.  */ @Test public void temporary() throws Exception {     File folderRoot = temporaryFolder.getRoot().     File folder = new File(folderRoot, String.valueOf(UUID.randomUUID())).     Assert.assertTrue(folder.mkdirs()).     Path folderPath = new Path(folder.toURI()).     SnapshotDirectory tmpSnapshotDirectory = SnapshotDirectory.temporary(folderPath).     // temporary snapshot directories should not return a handle, because they will be deleted.     Assert.assertNull(tmpSnapshotDirectory.completeSnapshotAndGetHandle()).     // check that the directory is deleted even after we called #completeSnapshotAndGetHandle.     Assert.assertTrue(tmpSnapshotDirectory.cleanup()).     Assert.assertFalse(folder.exists()). }
