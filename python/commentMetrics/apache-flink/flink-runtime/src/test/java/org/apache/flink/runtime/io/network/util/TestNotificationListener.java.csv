commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public void onNotification() {     synchronized (numberOfNotifications) {         numberOfNotifications.incrementAndGet().         numberOfNotifications.notifyAll().     } }
true;public;1;7;/**  * Waits on a notification.  *  * <p> <strong>Important</strong>: It's necessary to get the current number of notifications  * <em>before</em> registering the listener. Otherwise the wait call may block indefinitely.  *  * <pre>  * MockNotificationListener listener = new MockNotificationListener().  *  * int current = listener.getNumberOfNotifications().  *  * // Register the listener  * register(listener).  *  * listener.waitForNotification(current).  * </pre>  */ ;/**  * Waits on a notification.  *  * <p> <strong>Important</strong>: It's necessary to get the current number of notifications  * <em>before</em> registering the listener. Otherwise the wait call may block indefinitely.  *  * <pre>  * MockNotificationListener listener = new MockNotificationListener().  *  * int current = listener.getNumberOfNotifications().  *  * // Register the listener  * register(listener).  *  * listener.waitForNotification(current).  * </pre>  */ public void waitForNotification(int current) throws InterruptedException {     synchronized (numberOfNotifications) {         while (current == numberOfNotifications.get()) {             numberOfNotifications.wait().         }     } }
false;public;0;3;;public int getNumberOfNotifications() {     return numberOfNotifications.get(). }
false;public;0;3;;public void reset() {     numberOfNotifications.set(0). }
