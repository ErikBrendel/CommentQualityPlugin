commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * {@inheritDoc}  * @param event  */ ;/**  * {@inheritDoc}  * @param event  */ @Override public void onEvent(TaskEvent event) {     this.receivedEvent = event. }
true;public;0;4;/**  * Returns the event which was last received by this event listener. If no event  * has been received so far the return value is <code>null</code>.  *  * @return the event which was last received, possibly <code>null</code>  */ ;/**  * Returns the event which was last received by this event listener. If no event  * has been received so far the return value is <code>null</code>.  *  * @return the event which was last received, possibly <code>null</code>  */ public TaskEvent getLastReceivedEvent() {     return this.receivedEvent. }
true;public;0;17;/**  * Tests the publish/subscribe mechanisms implemented in the {@link TaskEventHandler}.  */ ;/**  * Tests the publish/subscribe mechanisms implemented in the {@link TaskEventHandler}.  */ @Test public void testEventNotificationManager() {     final TaskEventHandler evm = new TaskEventHandler().     final TestEventListener listener = new TestEventListener().     evm.subscribe(listener, StringTaskEvent.class).     final StringTaskEvent stringTaskEvent1 = new StringTaskEvent("Test 1").     evm.publish(stringTaskEvent1).     evm.publish(new IntegerTaskEvent(5)).     assertNotNull(listener.getLastReceivedEvent()).     StringTaskEvent receivedStringEvent = (StringTaskEvent) listener.getLastReceivedEvent().     assertEquals(stringTaskEvent1, receivedStringEvent). }
