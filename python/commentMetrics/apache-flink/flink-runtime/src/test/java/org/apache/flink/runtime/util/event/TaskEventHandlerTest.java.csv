# id;timestamp;commentText;codeText;commentWords;codeWords
TaskEventHandlerTest -> TestEventListener -> @Override 		public void onEvent(TaskEvent event);1424683371;{@inheritDoc}_@param event;@Override_		public void onEvent(TaskEvent event) {__			this.receivedEvent = event__		};inherit,doc,param,event;override,public,void,on,event,task,event,event,this,received,event,event
TaskEventHandlerTest -> TestEventListener -> @Override 		public void onEvent(TaskEvent event);1438523908;{@inheritDoc}_@param event;@Override_		public void onEvent(TaskEvent event) {__			this.receivedEvent = event__		};inherit,doc,param,event;override,public,void,on,event,task,event,event,this,received,event,event
TaskEventHandlerTest -> TestEventListener -> @Override 		public void onEvent(TaskEvent event);1515408360;{@inheritDoc}_@param event;@Override_		public void onEvent(TaskEvent event) {__			this.receivedEvent = event__		};inherit,doc,param,event;override,public,void,on,event,task,event,event,this,received,event,event
TaskEventHandlerTest -> @Test 	public void testEventNotificationManager();1424683371;Tests the publish/subscribe mechanisms implemented in the {@link TaskEventHandler}.;@Test_	public void testEventNotificationManager() {__		final TaskEventHandler evm = new TaskEventHandler()__		final TestEventListener listener = new TestEventListener()___		evm.subscribe(listener, StringTaskEvent.class)___		final StringTaskEvent stringTaskEvent1 = new StringTaskEvent("Test 1")__		final StringTaskEvent stringTaskEvent2 = new StringTaskEvent("Test 2")___		evm.publish(stringTaskEvent1)__		evm.publish(new IntegerTaskEvent(5))___		assertNotNull(listener.getLastReceivedEvent())__		StringTaskEvent receivedStringEvent = (StringTaskEvent) listener.getLastReceivedEvent()__		assertEquals(stringTaskEvent1, receivedStringEvent)___		evm.unsubscribe(listener, StringTaskEvent.class)___		evm.publish(stringTaskEvent2)___		assertNotNull(listener.getLastReceivedEvent())__		receivedStringEvent = (StringTaskEvent) listener.getLastReceivedEvent()__		assertEquals(stringTaskEvent1, receivedStringEvent)__	};tests,the,publish,subscribe,mechanisms,implemented,in,the,link,task,event,handler;test,public,void,test,event,notification,manager,final,task,event,handler,evm,new,task,event,handler,final,test,event,listener,listener,new,test,event,listener,evm,subscribe,listener,string,task,event,class,final,string,task,event,string,task,event1,new,string,task,event,test,1,final,string,task,event,string,task,event2,new,string,task,event,test,2,evm,publish,string,task,event1,evm,publish,new,integer,task,event,5,assert,not,null,listener,get,last,received,event,string,task,event,received,string,event,string,task,event,listener,get,last,received,event,assert,equals,string,task,event1,received,string,event,evm,unsubscribe,listener,string,task,event,class,evm,publish,string,task,event2,assert,not,null,listener,get,last,received,event,received,string,event,string,task,event,listener,get,last,received,event,assert,equals,string,task,event1,received,string,event
TaskEventHandlerTest -> @Test 	public void testEventNotificationManager();1438523908;Tests the publish/subscribe mechanisms implemented in the {@link TaskEventHandler}.;@Test_	public void testEventNotificationManager() {__		final TaskEventHandler evm = new TaskEventHandler()__		final TestEventListener listener = new TestEventListener()___		evm.subscribe(listener, StringTaskEvent.class)___		final StringTaskEvent stringTaskEvent1 = new StringTaskEvent("Test 1")__		final StringTaskEvent stringTaskEvent2 = new StringTaskEvent("Test 2")___		evm.publish(stringTaskEvent1)__		evm.publish(new IntegerTaskEvent(5))___		assertNotNull(listener.getLastReceivedEvent())__		StringTaskEvent receivedStringEvent = (StringTaskEvent) listener.getLastReceivedEvent()__		assertEquals(stringTaskEvent1, receivedStringEvent)___		evm.unsubscribe(listener, StringTaskEvent.class)___		evm.publish(stringTaskEvent2)___		assertNotNull(listener.getLastReceivedEvent())__		receivedStringEvent = (StringTaskEvent) listener.getLastReceivedEvent()__		assertEquals(stringTaskEvent1, receivedStringEvent)__	};tests,the,publish,subscribe,mechanisms,implemented,in,the,link,task,event,handler;test,public,void,test,event,notification,manager,final,task,event,handler,evm,new,task,event,handler,final,test,event,listener,listener,new,test,event,listener,evm,subscribe,listener,string,task,event,class,final,string,task,event,string,task,event1,new,string,task,event,test,1,final,string,task,event,string,task,event2,new,string,task,event,test,2,evm,publish,string,task,event1,evm,publish,new,integer,task,event,5,assert,not,null,listener,get,last,received,event,string,task,event,received,string,event,string,task,event,listener,get,last,received,event,assert,equals,string,task,event1,received,string,event,evm,unsubscribe,listener,string,task,event,class,evm,publish,string,task,event2,assert,not,null,listener,get,last,received,event,received,string,event,string,task,event,listener,get,last,received,event,assert,equals,string,task,event1,received,string,event
TaskEventHandlerTest -> @Test 	public void testEventNotificationManager();1515408360;Tests the publish/subscribe mechanisms implemented in the {@link TaskEventHandler}.;@Test_	public void testEventNotificationManager() {__		final TaskEventHandler evm = new TaskEventHandler()__		final TestEventListener listener = new TestEventListener()___		evm.subscribe(listener, StringTaskEvent.class)___		final StringTaskEvent stringTaskEvent1 = new StringTaskEvent("Test 1")___		evm.publish(stringTaskEvent1)__		evm.publish(new IntegerTaskEvent(5))___		assertNotNull(listener.getLastReceivedEvent())__		StringTaskEvent receivedStringEvent = (StringTaskEvent) listener.getLastReceivedEvent()__		assertEquals(stringTaskEvent1, receivedStringEvent)__	};tests,the,publish,subscribe,mechanisms,implemented,in,the,link,task,event,handler;test,public,void,test,event,notification,manager,final,task,event,handler,evm,new,task,event,handler,final,test,event,listener,listener,new,test,event,listener,evm,subscribe,listener,string,task,event,class,final,string,task,event,string,task,event1,new,string,task,event,test,1,evm,publish,string,task,event1,evm,publish,new,integer,task,event,5,assert,not,null,listener,get,last,received,event,string,task,event,received,string,event,string,task,event,listener,get,last,received,event,assert,equals,string,task,event1,received,string,event
TaskEventHandlerTest -> TestEventListener -> public TaskEvent getLastReceivedEvent();1424683371;Returns the event which was last received by this event listener. If no event_has been received so far the return value is <code>null</code>.__@return the event which was last received, possibly <code>null</code>;public TaskEvent getLastReceivedEvent() {__			return this.receivedEvent__		};returns,the,event,which,was,last,received,by,this,event,listener,if,no,event,has,been,received,so,far,the,return,value,is,code,null,code,return,the,event,which,was,last,received,possibly,code,null,code;public,task,event,get,last,received,event,return,this,received,event
TaskEventHandlerTest -> TestEventListener -> public TaskEvent getLastReceivedEvent();1438523908;Returns the event which was last received by this event listener. If no event_has been received so far the return value is <code>null</code>.__@return the event which was last received, possibly <code>null</code>;public TaskEvent getLastReceivedEvent() {__			return this.receivedEvent__		};returns,the,event,which,was,last,received,by,this,event,listener,if,no,event,has,been,received,so,far,the,return,value,is,code,null,code,return,the,event,which,was,last,received,possibly,code,null,code;public,task,event,get,last,received,event,return,this,received,event
TaskEventHandlerTest -> TestEventListener -> public TaskEvent getLastReceivedEvent();1515408360;Returns the event which was last received by this event listener. If no event_has been received so far the return value is <code>null</code>.__@return the event which was last received, possibly <code>null</code>;public TaskEvent getLastReceivedEvent() {__			return this.receivedEvent__		};returns,the,event,which,was,last,received,by,this,event,listener,if,no,event,has,been,received,so,far,the,return,value,is,code,null,code,return,the,event,which,was,last,received,possibly,code,null,code;public,task,event,get,last,received,event,return,this,received,event
