# id;timestamp;commentText;codeText;commentWords;codeWords
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1478068461;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_				new JobID(),_				Integer.MAX_VALUE,_				Integer.MAX_VALUE,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] {},_				new ExecutionVertex[] {},_				new ExecutionVertex[] {},_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				new DisabledCheckpointStatsTracker())___		ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest_				.generateChainedStateHandle(new SerializableObject())___		_		Map<JobVertexID, TaskState> checkpointTaskStates = new HashMap<>()__		{_			TaskState taskState = new TaskState(jobVertexId1, 3, 3, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(1, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(2, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(jobVertexId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(new JobID(), 0, 1, 2, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()___		_		{_			TaskState taskState = new TaskState(jobVertexId1, 1, 1, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(newJobVertexID, taskState)__		}__		checkpoint = new CompletedCheckpoint(new JobID(), 1, 2, 3, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,new,disabled,checkpoint,stats,tracker,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,map,job,vertex,id,task,state,checkpoint,task,states,new,hash,map,task,state,task,state,new,task,state,job,vertex,id1,3,3,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,1,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,2,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,job,vertex,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,task,state,task,state,new,task,state,job,vertex,id1,1,1,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,new,job,vertex,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1479852017;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			null,_			new DisabledCheckpointStatsTracker(),_			Executors.directExecutor())___		ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest_				.generateChainedStateHandle(new SerializableObject())___		_		Map<JobVertexID, TaskState> checkpointTaskStates = new HashMap<>()__		{_			TaskState taskState = new TaskState(jobVertexId1, 3, 3, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(1, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(2, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(jobVertexId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(new JobID(), 0, 1, 2, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()___		_		{_			TaskState taskState = new TaskState(jobVertexId1, 1, 1, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(newJobVertexID, taskState)__		}__		checkpoint = new CompletedCheckpoint(new JobID(), 1, 2, 3, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,new,disabled,checkpoint,stats,tracker,executors,direct,executor,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,map,job,vertex,id,task,state,checkpoint,task,states,new,hash,map,task,state,task,state,new,task,state,job,vertex,id1,3,3,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,1,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,2,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,job,vertex,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,task,state,task,state,new,task,state,job,vertex,id1,1,1,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,new,job,vertex,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1484038132;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			null,_			Executors.directExecutor())___		ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest_				.generateChainedStateHandle(new SerializableObject())___		_		Map<JobVertexID, TaskState> checkpointTaskStates = new HashMap<>()__		{_			TaskState taskState = new TaskState(jobVertexId1, 3, 3, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(1, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(2, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(jobVertexId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(new JobID(), 0, 1, 2, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()___		_		{_			TaskState taskState = new TaskState(jobVertexId1, 1, 1, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(newJobVertexID, taskState)__		}__		checkpoint = new CompletedCheckpoint(new JobID(), 1, 2, 3, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,map,job,vertex,id,task,state,checkpoint,task,states,new,hash,map,task,state,task,state,new,task,state,job,vertex,id1,3,3,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,1,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,2,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,job,vertex,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,task,state,task,state,new,task,state,job,vertex,id1,1,1,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,new,job,vertex,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1487762095;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			null,_			Executors.directExecutor())___		ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest_				.generateChainedStateHandle(new SerializableObject())___		_		Map<JobVertexID, TaskState> checkpointTaskStates = new HashMap<>()__		{_			TaskState taskState = new TaskState(jobVertexId1, 3, 3, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(1, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(2, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(jobVertexId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(new JobID(), 0, 1, 2, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()___		_		{_			TaskState taskState = new TaskState(jobVertexId1, 1, 1, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(newJobVertexID, taskState)__		}__		checkpoint = new CompletedCheckpoint(new JobID(), 1, 2, 3, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,map,job,vertex,id,task,state,checkpoint,task,states,new,hash,map,task,state,task,state,new,task,state,job,vertex,id1,3,3,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,1,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,2,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,job,vertex,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,task,state,task,state,new,task,state,job,vertex,id1,1,1,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,new,job,vertex,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1490724328;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			null,_			Executors.directExecutor())___		ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest_				.generateChainedStateHandle(new SerializableObject())___		_		Map<JobVertexID, TaskState> checkpointTaskStates = new HashMap<>()__		{_			TaskState taskState = new TaskState(jobVertexId1, 3, 3, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(1, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(2, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(jobVertexId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(new JobID(), 0, 1, 2, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()___		_		{_			TaskState taskState = new TaskState(jobVertexId1, 1, 1, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(newJobVertexID, taskState)__		}__		checkpoint = new CompletedCheckpoint(new JobID(), 1, 2, 3, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,map,job,vertex,id,task,state,checkpoint,task,states,new,hash,map,task,state,task,state,new,task,state,job,vertex,id1,3,3,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,1,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,2,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,job,vertex,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,task,state,task,state,new,task,state,job,vertex,id1,1,1,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,new,job,vertex,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1492867556;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			null,_			Executors.directExecutor())___		ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest_				.generateChainedStateHandle(new SerializableObject())___		_		Map<JobVertexID, TaskState> checkpointTaskStates = new HashMap<>()__		{_			TaskState taskState = new TaskState(jobVertexId1, 3, 3, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(1, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(2, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(jobVertexId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(new JobID(), 0, 1, 2, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint, coord.getSharedStateRegistry())___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()___		_		{_			TaskState taskState = new TaskState(jobVertexId1, 1, 1, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(newJobVertexID, taskState)__		}__		checkpoint = new CompletedCheckpoint(new JobID(), 1, 2, 3, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint, coord.getSharedStateRegistry())___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,map,job,vertex,id,task,state,checkpoint,task,states,new,hash,map,task,state,task,state,new,task,state,job,vertex,id1,3,3,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,1,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,2,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,job,vertex,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,get,shared,state,registry,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,task,state,task,state,new,task,state,job,vertex,id1,1,1,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,new,job,vertex,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,get,shared,state,registry,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1492867556;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			null,_			Executors.directExecutor())___		ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest_				.generateChainedStateHandle(new SerializableObject())___		_		Map<JobVertexID, TaskState> checkpointTaskStates = new HashMap<>()__		{_			TaskState taskState = new TaskState(jobVertexId1, 3, 3, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(1, new SubtaskState(serializedState, null, null, null, null))__			taskState.putState(2, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(jobVertexId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(new JobID(), 0, 1, 2, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()___		_		{_			TaskState taskState = new TaskState(jobVertexId1, 1, 1, 1)__			taskState.putState(0, new SubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(newJobVertexID, taskState)__		}__		checkpoint = new CompletedCheckpoint(new JobID(), 1, 2, 3, new HashMap<>(checkpointTaskStates))___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,map,job,vertex,id,task,state,checkpoint,task,states,new,hash,map,task,state,task,state,new,task,state,job,vertex,id1,3,3,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,1,new,subtask,state,serialized,state,null,null,null,null,task,state,put,state,2,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,job,vertex,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,task,state,task,state,new,task,state,job,vertex,id1,1,1,1,task,state,put,state,0,new,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,new,job,vertex,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1493403095;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		OperatorID operatorId1 = OperatorID.fromJobVertexID(jobVertexId1)___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			null,_			Executors.directExecutor())___		StreamStateHandle serializedState = CheckpointCoordinatorTest_				.generateChainedStateHandle(new SerializableObject())_				.get(0)___		_		Map<OperatorID, OperatorState> checkpointTaskStates = new HashMap<>()__		{_			OperatorState taskState = new OperatorState(operatorId1, 3, 3)__			taskState.putState(0, new OperatorSubtaskState(serializedState, null, null, null, null))__			taskState.putState(1, new OperatorSubtaskState(serializedState, null, null, null, null))__			taskState.putState(2, new OperatorSubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(operatorId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_			new JobID(),_			0,_			1,_			2,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()__		OperatorID newOperatorID = OperatorID.fromJobVertexID(newJobVertexID)___		_		{_			OperatorState taskState = new OperatorState(newOperatorID, 1, 1)__			taskState.putState(0, new OperatorSubtaskState(serializedState, null, null, null, null))___			checkpointTaskStates.put(newOperatorID, taskState)__		}__		checkpoint = new CompletedCheckpoint(_			new JobID(),_			1,_			2,_			3,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,operator,id,operator,id1,operator,id,from,job,vertex,id,job,vertex,id1,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,get,0,map,operator,id,operator,state,checkpoint,task,states,new,hash,map,operator,state,task,state,new,operator,state,operator,id1,3,3,task,state,put,state,0,new,operator,subtask,state,serialized,state,null,null,null,null,task,state,put,state,1,new,operator,subtask,state,serialized,state,null,null,null,null,task,state,put,state,2,new,operator,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,operator,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,operator,id,new,operator,id,operator,id,from,job,vertex,id,new,job,vertex,id,operator,state,task,state,new,operator,state,new,operator,id,1,1,task,state,put,state,0,new,operator,subtask,state,serialized,state,null,null,null,null,checkpoint,task,states,put,new,operator,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1502801814;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		OperatorID operatorId1 = OperatorID.fromJobVertexID(jobVertexId1)___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			null,_			Executors.directExecutor())___		StreamStateHandle serializedState = CheckpointCoordinatorTest_				.generateChainedStateHandle(new SerializableObject())_				.get(0)___		_		Map<OperatorID, OperatorState> checkpointTaskStates = new HashMap<>()__		{_			OperatorState taskState = new OperatorState(operatorId1, 3, 3)__			taskState.putState(0, new OperatorSubtaskState(serializedState))__			taskState.putState(1, new OperatorSubtaskState(serializedState))__			taskState.putState(2, new OperatorSubtaskState(serializedState))___			checkpointTaskStates.put(operatorId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_			new JobID(),_			0,_			1,_			2,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()__		OperatorID newOperatorID = OperatorID.fromJobVertexID(newJobVertexID)___		_		{_			OperatorState taskState = new OperatorState(newOperatorID, 1, 1)__			taskState.putState(0, new OperatorSubtaskState(serializedState))___			checkpointTaskStates.put(newOperatorID, taskState)__		}__		checkpoint = new CompletedCheckpoint(_			new JobID(),_			1,_			2,_			3,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,operator,id,operator,id1,operator,id,from,job,vertex,id,job,vertex,id1,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,get,0,map,operator,id,operator,state,checkpoint,task,states,new,hash,map,operator,state,task,state,new,operator,state,operator,id1,3,3,task,state,put,state,0,new,operator,subtask,state,serialized,state,task,state,put,state,1,new,operator,subtask,state,serialized,state,task,state,put,state,2,new,operator,subtask,state,serialized,state,checkpoint,task,states,put,operator,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,operator,id,new,operator,id,operator,id,from,job,vertex,id,new,job,vertex,id,operator,state,task,state,new,operator,state,new,operator,id,1,1,task,state,put,state,0,new,operator,subtask,state,serialized,state,checkpoint,task,states,put,new,operator,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1502801814;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		OperatorID operatorId1 = OperatorID.fromJobVertexID(jobVertexId1)___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			null,_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		StreamStateHandle serializedState = CheckpointCoordinatorTest_				.generateChainedStateHandle(new SerializableObject())_				.get(0)___		_		Map<OperatorID, OperatorState> checkpointTaskStates = new HashMap<>()__		{_			OperatorState taskState = new OperatorState(operatorId1, 3, 3)__			taskState.putState(0, new OperatorSubtaskState(serializedState))__			taskState.putState(1, new OperatorSubtaskState(serializedState))__			taskState.putState(2, new OperatorSubtaskState(serializedState))___			checkpointTaskStates.put(operatorId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_			new JobID(),_			0,_			1,_			2,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()__		OperatorID newOperatorID = OperatorID.fromJobVertexID(newJobVertexID)___		_		{_			OperatorState taskState = new OperatorState(newOperatorID, 1, 1)__			taskState.putState(0, new OperatorSubtaskState(serializedState))___			checkpointTaskStates.put(newOperatorID, taskState)__		}__		checkpoint = new CompletedCheckpoint(_			new JobID(),_			1,_			2,_			3,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,operator,id,operator,id1,operator,id,from,job,vertex,id,job,vertex,id1,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,shared,state,registry,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,get,0,map,operator,id,operator,state,checkpoint,task,states,new,hash,map,operator,state,task,state,new,operator,state,operator,id1,3,3,task,state,put,state,0,new,operator,subtask,state,serialized,state,task,state,put,state,1,new,operator,subtask,state,serialized,state,task,state,put,state,2,new,operator,subtask,state,serialized,state,checkpoint,task,states,put,operator,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,operator,id,new,operator,id,operator,id,from,job,vertex,id,new,job,vertex,id,operator,state,task,state,new,operator,state,new,operator,id,1,1,task,state,put,state,0,new,operator,subtask,state,serialized,state,checkpoint,task,states,put,new,operator,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1503598628;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		OperatorID operatorId1 = OperatorID.fromJobVertexID(jobVertexId1)___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			null,_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		_		Map<OperatorID, OperatorState> checkpointTaskStates = new HashMap<>()__		{_			OperatorState taskState = new OperatorState(operatorId1, 3, 3)__			taskState.putState(0, new OperatorSubtaskState())__			taskState.putState(1, new OperatorSubtaskState())__			taskState.putState(2, new OperatorSubtaskState())___			checkpointTaskStates.put(operatorId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_			new JobID(),_			0,_			1,_			2,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()__		OperatorID newOperatorID = OperatorID.fromJobVertexID(newJobVertexID)___		_		{_			OperatorState taskState = new OperatorState(newOperatorID, 1, 1)__			taskState.putState(0, new OperatorSubtaskState())___			checkpointTaskStates.put(newOperatorID, taskState)__		}__		checkpoint = new CompletedCheckpoint(_			new JobID(),_			1,_			2,_			3,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,operator,id,operator,id1,operator,id,from,job,vertex,id,job,vertex,id1,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,shared,state,registry,map,operator,id,operator,state,checkpoint,task,states,new,hash,map,operator,state,task,state,new,operator,state,operator,id1,3,3,task,state,put,state,0,new,operator,subtask,state,task,state,put,state,1,new,operator,subtask,state,task,state,put,state,2,new,operator,subtask,state,checkpoint,task,states,put,operator,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,operator,id,new,operator,id,operator,id,from,job,vertex,id,new,job,vertex,id,operator,state,task,state,new,operator,state,new,operator,id,1,1,task,state,put,state,0,new,operator,subtask,state,checkpoint,task,states,put,new,operator,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1508317940;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		OperatorID operatorId1 = OperatorID.fromJobVertexID(jobVertexId1)___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			null,_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		_		Map<OperatorID, OperatorState> checkpointTaskStates = new HashMap<>()__		{_			OperatorState taskState = new OperatorState(operatorId1, 3, 3)__			taskState.putState(0, new OperatorSubtaskState())__			taskState.putState(1, new OperatorSubtaskState())__			taskState.putState(2, new OperatorSubtaskState())___			checkpointTaskStates.put(operatorId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_			new JobID(),_			0,_			1,_			2,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()__		OperatorID newOperatorID = OperatorID.fromJobVertexID(newJobVertexID)___		_		{_			OperatorState taskState = new OperatorState(newOperatorID, 1, 1)__			taskState.putState(0, new OperatorSubtaskState())___			checkpointTaskStates.put(newOperatorID, taskState)__		}__		checkpoint = new CompletedCheckpoint(_			new JobID(),_			1,_			2,_			3,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,operator,id,operator,id1,operator,id,from,job,vertex,id,job,vertex,id1,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,shared,state,registry,map,operator,id,operator,state,checkpoint,task,states,new,hash,map,operator,state,task,state,new,operator,state,operator,id1,3,3,task,state,put,state,0,new,operator,subtask,state,task,state,put,state,1,new,operator,subtask,state,task,state,put,state,2,new,operator,subtask,state,checkpoint,task,states,put,operator,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,operator,id,new,operator,id,operator,id,from,job,vertex,id,new,job,vertex,id,operator,state,task,state,new,operator,state,new,operator,id,1,1,task,state,put,state,0,new,operator,subtask,state,checkpoint,task,states,put,new,operator,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1516295283;Tests that the allow non restored state flag is correctly handled.__The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		OperatorID operatorId1 = OperatorID.fromJobVertexID(jobVertexId1)___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			ExternalizedCheckpointSettings.none(),_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			null,_			new MemoryStateBackend(),_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		_		Map<OperatorID, OperatorState> checkpointTaskStates = new HashMap<>()__		{_			OperatorState taskState = new OperatorState(operatorId1, 3, 3)__			taskState.putState(0, new OperatorSubtaskState())__			taskState.putState(1, new OperatorSubtaskState())__			taskState.putState(2, new OperatorSubtaskState())___			checkpointTaskStates.put(operatorId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_			new JobID(),_			0,_			1,_			2,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()__		OperatorID newOperatorID = OperatorID.fromJobVertexID(newJobVertexID)___		_		{_			OperatorState taskState = new OperatorState(newOperatorID, 1, 1)__			taskState.putState(0, new OperatorSubtaskState())___			checkpointTaskStates.put(newOperatorID, taskState)__		}__		checkpoint = new CompletedCheckpoint(_			new JobID(),_			1,_			2,_			3,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,operator,id,operator,id1,operator,id,from,job,vertex,id,job,vertex,id1,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,new,memory,state,backend,executors,direct,executor,shared,state,registry,map,operator,id,operator,state,checkpoint,task,states,new,hash,map,operator,state,task,state,new,operator,state,operator,id1,3,3,task,state,put,state,0,new,operator,subtask,state,task,state,put,state,1,new,operator,subtask,state,task,state,put,state,2,new,operator,subtask,state,checkpoint,task,states,put,operator,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,operator,id,new,operator,id,operator,id,from,job,vertex,id,new,job,vertex,id,operator,state,task,state,new,operator,state,new,operator,id,1,1,task,state,put,state,0,new,operator,subtask,state,checkpoint,task,states,put,new,operator,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1516295283;Tests that the allow non restored state flag is correctly handled.__<p>The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		OperatorID operatorId1 = OperatorID.fromJobVertexID(jobVertexId1)___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			new MemoryStateBackend(),_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		_		Map<OperatorID, OperatorState> checkpointTaskStates = new HashMap<>()__		{_			OperatorState taskState = new OperatorState(operatorId1, 3, 3)__			taskState.putState(0, new OperatorSubtaskState())__			taskState.putState(1, new OperatorSubtaskState())__			taskState.putState(2, new OperatorSubtaskState())___			checkpointTaskStates.put(operatorId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_			new JobID(),_			0,_			1,_			2,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new EmptyStreamStateHandle(),_			"<pointer>")___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()__		OperatorID newOperatorID = OperatorID.fromJobVertexID(newJobVertexID)___		_		{_			OperatorState taskState = new OperatorState(newOperatorID, 1, 1)__			taskState.putState(0, new OperatorSubtaskState())___			checkpointTaskStates.put(newOperatorID, taskState)__		}__		checkpoint = new CompletedCheckpoint(_			new JobID(),_			1,_			2,_			3,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new EmptyStreamStateHandle(),_			"pointer")___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,p,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,operator,id,operator,id1,operator,id,from,job,vertex,id,job,vertex,id1,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,checkpoint,retention,policy,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,executors,direct,executor,shared,state,registry,map,operator,id,operator,state,checkpoint,task,states,new,hash,map,operator,state,task,state,new,operator,state,operator,id1,3,3,task,state,put,state,0,new,operator,subtask,state,task,state,put,state,1,new,operator,subtask,state,task,state,put,state,2,new,operator,subtask,state,checkpoint,task,states,put,operator,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,empty,stream,state,handle,pointer,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,operator,id,new,operator,id,operator,id,from,job,vertex,id,new,job,vertex,id,operator,state,task,state,new,operator,state,new,operator,id,1,1,task,state,put,state,0,new,operator,subtask,state,checkpoint,task,states,put,new,operator,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,empty,stream,state,handle,pointer,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1516626377;Tests that the allow non restored state flag is correctly handled.__<p>The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		OperatorID operatorId1 = OperatorID.fromJobVertexID(jobVertexId1)___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			new MemoryStateBackend(),_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		_		Map<OperatorID, OperatorState> checkpointTaskStates = new HashMap<>()__		{_			OperatorState taskState = new OperatorState(operatorId1, 3, 3)__			taskState.putState(0, new OperatorSubtaskState())__			taskState.putState(1, new OperatorSubtaskState())__			taskState.putState(2, new OperatorSubtaskState())___			checkpointTaskStates.put(operatorId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_			new JobID(),_			0,_			1,_			2,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new EmptyStreamStateHandle(),_			"<pointer>")___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()__		OperatorID newOperatorID = OperatorID.fromJobVertexID(newJobVertexID)___		_		{_			OperatorState taskState = new OperatorState(newOperatorID, 1, 1)__			taskState.putState(0, new OperatorSubtaskState())___			checkpointTaskStates.put(newOperatorID, taskState)__		}__		checkpoint = new CompletedCheckpoint(_			new JobID(),_			1,_			2,_			3,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new EmptyStreamStateHandle(),_			"pointer")___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,p,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,operator,id,operator,id1,operator,id,from,job,vertex,id,job,vertex,id1,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,checkpoint,retention,policy,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,executors,direct,executor,shared,state,registry,map,operator,id,operator,state,checkpoint,task,states,new,hash,map,operator,state,task,state,new,operator,state,operator,id1,3,3,task,state,put,state,0,new,operator,subtask,state,task,state,put,state,1,new,operator,subtask,state,task,state,put,state,2,new,operator,subtask,state,checkpoint,task,states,put,operator,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,empty,stream,state,handle,pointer,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,operator,id,new,operator,id,operator,id,from,job,vertex,id,new,job,vertex,id,operator,state,task,state,new,operator,state,new,operator,id,1,1,task,state,put,state,0,new,operator,subtask,state,checkpoint,task,states,put,new,operator,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,empty,stream,state,handle,pointer,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1517489696;Tests that the allow non restored state flag is correctly handled.__<p>The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		OperatorID operatorId1 = OperatorID.fromJobVertexID(jobVertexId1)___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			new MemoryStateBackend(),_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		_		Map<OperatorID, OperatorState> checkpointTaskStates = new HashMap<>()__		{_			OperatorState taskState = new OperatorState(operatorId1, 3, 3)__			taskState.putState(0, new OperatorSubtaskState())__			taskState.putState(1, new OperatorSubtaskState())__			taskState.putState(2, new OperatorSubtaskState())___			checkpointTaskStates.put(operatorId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_			new JobID(),_			0,_			1,_			2,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new TestCompletedCheckpointStorageLocation())___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()__		OperatorID newOperatorID = OperatorID.fromJobVertexID(newJobVertexID)___		_		{_			OperatorState taskState = new OperatorState(newOperatorID, 1, 1)__			taskState.putState(0, new OperatorSubtaskState())___			checkpointTaskStates.put(newOperatorID, taskState)__		}__		checkpoint = new CompletedCheckpoint(_			new JobID(),_			1,_			2,_			3,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new TestCompletedCheckpointStorageLocation())___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,p,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,operator,id,operator,id1,operator,id,from,job,vertex,id,job,vertex,id1,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,checkpoint,retention,policy,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,executors,direct,executor,shared,state,registry,map,operator,id,operator,state,checkpoint,task,states,new,hash,map,operator,state,task,state,new,operator,state,operator,id1,3,3,task,state,put,state,0,new,operator,subtask,state,task,state,put,state,1,new,operator,subtask,state,task,state,put,state,2,new,operator,subtask,state,checkpoint,task,states,put,operator,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,operator,id,new,operator,id,operator,id,from,job,vertex,id,new,job,vertex,id,operator,state,task,state,new,operator,state,new,operator,id,1,1,task,state,put,state,0,new,operator,subtask,state,checkpoint,task,states,put,new,operator,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1519568061;Tests that the allow non restored state flag is correctly handled.__<p>The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		OperatorID operatorId1 = OperatorID.fromJobVertexID(jobVertexId1)___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			new MemoryStateBackend(),_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		_		Map<OperatorID, OperatorState> checkpointTaskStates = new HashMap<>()__		{_			OperatorState taskState = new OperatorState(operatorId1, 3, 3)__			taskState.putState(0, new OperatorSubtaskState())__			taskState.putState(1, new OperatorSubtaskState())__			taskState.putState(2, new OperatorSubtaskState())___			checkpointTaskStates.put(operatorId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_			new JobID(),_			0,_			1,_			2,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new TestCompletedCheckpointStorageLocation())___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()__		OperatorID newOperatorID = OperatorID.fromJobVertexID(newJobVertexID)___		_		{_			OperatorState taskState = new OperatorState(newOperatorID, 1, 1)__			taskState.putState(0, new OperatorSubtaskState())___			checkpointTaskStates.put(newOperatorID, taskState)__		}__		checkpoint = new CompletedCheckpoint(_			new JobID(),_			1,_			2,_			3,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new TestCompletedCheckpointStorageLocation())___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,p,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,operator,id,operator,id1,operator,id,from,job,vertex,id,job,vertex,id1,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,checkpoint,retention,policy,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,executors,direct,executor,shared,state,registry,map,operator,id,operator,state,checkpoint,task,states,new,hash,map,operator,state,task,state,new,operator,state,operator,id1,3,3,task,state,put,state,0,new,operator,subtask,state,task,state,put,state,1,new,operator,subtask,state,task,state,put,state,2,new,operator,subtask,state,checkpoint,task,states,put,operator,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,operator,id,new,operator,id,operator,id,from,job,vertex,id,new,job,vertex,id,operator,state,task,state,new,operator,state,new,operator,id,1,1,task,state,put,state,0,new,operator,subtask,state,checkpoint,task,states,put,new,operator,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testNonRestoredState() throws Exception;1538998760;Tests that the allow non restored state flag is correctly handled.__<p>The flag only applies for state that is part of the checkpoint.;@Test_	public void testNonRestoredState() throws Exception {_		_		JobVertexID jobVertexId1 = new JobVertexID()__		JobVertexID jobVertexId2 = new JobVertexID()___		OperatorID operatorId1 = OperatorID.fromJobVertexID(jobVertexId1)___		_		ExecutionVertex vertex11 = mockExecutionVertex(mockExecution(), jobVertexId1, 0, 3)__		ExecutionVertex vertex12 = mockExecutionVertex(mockExecution(), jobVertexId1, 1, 3)__		ExecutionVertex vertex13 = mockExecutionVertex(mockExecution(), jobVertexId1, 2, 3)__		_		ExecutionVertex vertex21 = mockExecutionVertex(mockExecution(), jobVertexId2, 0, 2)__		ExecutionVertex vertex22 = mockExecutionVertex(mockExecution(), jobVertexId2, 1, 2)___		ExecutionJobVertex jobVertex1 = mockExecutionJobVertex(jobVertexId1, new ExecutionVertex[] { vertex11, vertex12, vertex13 })__		ExecutionJobVertex jobVertex2 = mockExecutionJobVertex(jobVertexId2, new ExecutionVertex[] { vertex21, vertex22 })___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexId1, jobVertex1)__		tasks.put(jobVertexId2, jobVertex2)___		CheckpointCoordinator coord = new CheckpointCoordinator(_			new JobID(),_			Integer.MAX_VALUE,_			Integer.MAX_VALUE,_			0,_			Integer.MAX_VALUE,_			CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new ExecutionVertex[] {},_			new StandaloneCheckpointIDCounter(),_			new StandaloneCompletedCheckpointStore(1),_			new MemoryStateBackend(),_			Executors.directExecutor(),_			SharedStateRegistry.DEFAULT_FACTORY)___		_		Map<OperatorID, OperatorState> checkpointTaskStates = new HashMap<>()__		{_			OperatorState taskState = new OperatorState(operatorId1, 3, 3)__			taskState.putState(0, new OperatorSubtaskState())__			taskState.putState(1, new OperatorSubtaskState())__			taskState.putState(2, new OperatorSubtaskState())___			checkpointTaskStates.put(operatorId1, taskState)__		}_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_			new JobID(),_			0,_			1,_			2,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new TestCompletedCheckpointStorageLocation())___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		coord.restoreLatestCheckpointedState(tasks, true, false)__		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		JobVertexID newJobVertexID = new JobVertexID()__		OperatorID newOperatorID = OperatorID.fromJobVertexID(newJobVertexID)___		_		{_			OperatorState taskState = new OperatorState(newOperatorID, 1, 1)__			taskState.putState(0, new OperatorSubtaskState())___			checkpointTaskStates.put(newOperatorID, taskState)__		}__		checkpoint = new CompletedCheckpoint(_			new JobID(),_			1,_			2,_			3,_			new HashMap<>(checkpointTaskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new TestCompletedCheckpointStorageLocation())___		coord.getCheckpointStore().addCheckpoint(checkpoint)___		_		coord.restoreLatestCheckpointedState(tasks, true, true)___		_		try {_			coord.restoreLatestCheckpointedState(tasks, true, false)__			fail("Did not throw the expected Exception.")__		} catch (IllegalStateException ignored) {_		}_	};tests,that,the,allow,non,restored,state,flag,is,correctly,handled,p,the,flag,only,applies,for,state,that,is,part,of,the,checkpoint;test,public,void,test,non,restored,state,throws,exception,job,vertex,id,job,vertex,id1,new,job,vertex,id,job,vertex,id,job,vertex,id2,new,job,vertex,id,operator,id,operator,id1,operator,id,from,job,vertex,id,job,vertex,id1,execution,vertex,vertex11,mock,execution,vertex,mock,execution,job,vertex,id1,0,3,execution,vertex,vertex12,mock,execution,vertex,mock,execution,job,vertex,id1,1,3,execution,vertex,vertex13,mock,execution,vertex,mock,execution,job,vertex,id1,2,3,execution,vertex,vertex21,mock,execution,vertex,mock,execution,job,vertex,id2,0,2,execution,vertex,vertex22,mock,execution,vertex,mock,execution,job,vertex,id2,1,2,execution,job,vertex,job,vertex1,mock,execution,job,vertex,job,vertex,id1,new,execution,vertex,vertex11,vertex12,vertex13,execution,job,vertex,job,vertex2,mock,execution,job,vertex,job,vertex,id2,new,execution,vertex,vertex21,vertex22,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id1,job,vertex1,tasks,put,job,vertex,id2,job,vertex2,checkpoint,coordinator,coord,new,checkpoint,coordinator,new,job,id,integer,integer,0,integer,checkpoint,retention,policy,new,execution,vertex,new,execution,vertex,new,execution,vertex,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,executors,direct,executor,shared,state,registry,map,operator,id,operator,state,checkpoint,task,states,new,hash,map,operator,state,task,state,new,operator,state,operator,id1,3,3,task,state,put,state,0,new,operator,subtask,state,task,state,put,state,1,new,operator,subtask,state,task,state,put,state,2,new,operator,subtask,state,checkpoint,task,states,put,operator,id1,task,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,1,2,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,false,coord,restore,latest,checkpointed,state,tasks,true,true,job,vertex,id,new,job,vertex,id,new,job,vertex,id,operator,id,new,operator,id,operator,id,from,job,vertex,id,new,job,vertex,id,operator,state,task,state,new,operator,state,new,operator,id,1,1,task,state,put,state,0,new,operator,subtask,state,checkpoint,task,states,put,new,operator,id,task,state,checkpoint,new,completed,checkpoint,new,job,id,1,2,3,new,hash,map,checkpoint,task,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,coord,get,checkpoint,store,add,checkpoint,checkpoint,coord,restore,latest,checkpointed,state,tasks,true,true,try,coord,restore,latest,checkpointed,state,tasks,true,false,fail,did,not,throw,the,expected,exception,catch,illegal,state,exception,ignored
CheckpointStateRestoreTest -> @Test 	public void testSetState();1478068461;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			final ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest.generateChainedStateHandle(new SerializableObject())__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyGroupsStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_					jid,_					200000L,_					200000L,_					0,_					Integer.MAX_VALUE,_					ExternalizedCheckpointSettings.none(),_					new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_					new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_					new ExecutionVertex[0],_					new StandaloneCheckpointIDCounter(),_					new StandaloneCompletedCheckpointStore(1),_					null,_					new DisabledCheckpointStatsTracker())___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			SubtaskState checkpointStateHandles = new SubtaskState(serializedState, null, null, serializedKeyGroupStates, null, 0L)__			CheckpointMetaData checkpointMetaData = new CheckpointMetaData(checkpointId, 0L)__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointMetaData, checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointMetaData, checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointMetaData, checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointMetaData))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointMetaData))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			final TaskStateHandles taskStateHandles = new TaskStateHandles(_					serializedState,_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.singletonList(serializedKeyGroupStates),_					null)___			BaseMatcher<TaskStateHandles> matcher = new BaseMatcher<TaskStateHandles>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateHandles) {_						return o.equals(taskStateHandles)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(taskStateHandles)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,final,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,key,groups,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,new,disabled,checkpoint,stats,tracker,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,subtask,state,checkpoint,state,handles,new,subtask,state,serialized,state,null,null,serialized,key,group,states,null,0l,checkpoint,meta,data,checkpoint,meta,data,new,checkpoint,meta,data,checkpoint,id,0l,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,meta,data,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,meta,data,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,meta,data,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,meta,data,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,meta,data,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,final,task,state,handles,task,state,handles,new,task,state,handles,serialized,state,collections,collection,operator,state,handle,singleton,list,null,collections,collection,operator,state,handle,singleton,list,null,collections,singleton,list,serialized,key,group,states,null,base,matcher,task,state,handles,matcher,new,base,matcher,task,state,handles,override,public,boolean,matches,object,o,if,o,instanceof,task,state,handles,return,o,equals,task,state,handles,return,false,override,public,void,describe,to,description,description,description,append,value,task,state,handles,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,handles,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,handles,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1479852017;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			final ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest.generateChainedStateHandle(new SerializableObject())__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyGroupsStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				new DisabledCheckpointStatsTracker(),_				Executors.directExecutor())___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			SubtaskState checkpointStateHandles = new SubtaskState(serializedState, null, null, serializedKeyGroupStates, null, 0L)__			CheckpointMetaData checkpointMetaData = new CheckpointMetaData(checkpointId, 0L)__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointMetaData, checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointMetaData, checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointMetaData, checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointMetaData))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointMetaData))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			final TaskStateHandles taskStateHandles = new TaskStateHandles(_					serializedState,_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.singletonList(serializedKeyGroupStates),_					null)___			BaseMatcher<TaskStateHandles> matcher = new BaseMatcher<TaskStateHandles>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateHandles) {_						return o.equals(taskStateHandles)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(taskStateHandles)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,final,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,key,groups,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,new,disabled,checkpoint,stats,tracker,executors,direct,executor,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,subtask,state,checkpoint,state,handles,new,subtask,state,serialized,state,null,null,serialized,key,group,states,null,0l,checkpoint,meta,data,checkpoint,meta,data,new,checkpoint,meta,data,checkpoint,id,0l,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,meta,data,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,meta,data,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,meta,data,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,meta,data,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,meta,data,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,final,task,state,handles,task,state,handles,new,task,state,handles,serialized,state,collections,collection,operator,state,handle,singleton,list,null,collections,collection,operator,state,handle,singleton,list,null,collections,singleton,list,serialized,key,group,states,null,base,matcher,task,state,handles,matcher,new,base,matcher,task,state,handles,override,public,boolean,matches,object,o,if,o,instanceof,task,state,handles,return,o,equals,task,state,handles,return,false,override,public,void,describe,to,description,description,description,append,value,task,state,handles,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,handles,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,handles,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1484038132;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			final ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest.generateChainedStateHandle(new SerializableObject())__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyGroupsStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				Executors.directExecutor())___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			SubtaskState checkpointStateHandles = new SubtaskState(serializedState, null, null, serializedKeyGroupStates, null)__			CheckpointMetaData checkpointMetaData = new CheckpointMetaData(checkpointId, 0L)__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointMetaData, checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointMetaData, checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointMetaData, checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointMetaData))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointMetaData))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			final TaskStateHandles taskStateHandles = new TaskStateHandles(_					serializedState,_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.singletonList(serializedKeyGroupStates),_					null)___			BaseMatcher<TaskStateHandles> matcher = new BaseMatcher<TaskStateHandles>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateHandles) {_						return o.equals(taskStateHandles)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(taskStateHandles)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,final,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,key,groups,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,subtask,state,checkpoint,state,handles,new,subtask,state,serialized,state,null,null,serialized,key,group,states,null,checkpoint,meta,data,checkpoint,meta,data,new,checkpoint,meta,data,checkpoint,id,0l,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,meta,data,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,meta,data,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,meta,data,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,meta,data,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,meta,data,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,final,task,state,handles,task,state,handles,new,task,state,handles,serialized,state,collections,collection,operator,state,handle,singleton,list,null,collections,collection,operator,state,handle,singleton,list,null,collections,singleton,list,serialized,key,group,states,null,base,matcher,task,state,handles,matcher,new,base,matcher,task,state,handles,override,public,boolean,matches,object,o,if,o,instanceof,task,state,handles,return,o,equals,task,state,handles,return,false,override,public,void,describe,to,description,description,description,append,value,task,state,handles,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,handles,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,handles,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1487762095;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			final ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest.generateChainedStateHandle(new SerializableObject())__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyGroupsStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				Executors.directExecutor())___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			SubtaskState checkpointStateHandles = new SubtaskState(serializedState, null, null, serializedKeyGroupStates, null)__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			final TaskStateHandles taskStateHandles = new TaskStateHandles(_					serializedState,_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.singletonList(serializedKeyGroupStates),_					null)___			BaseMatcher<TaskStateHandles> matcher = new BaseMatcher<TaskStateHandles>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateHandles) {_						return o.equals(taskStateHandles)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(taskStateHandles)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,final,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,key,groups,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,subtask,state,checkpoint,state,handles,new,subtask,state,serialized,state,null,null,serialized,key,group,states,null,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,final,task,state,handles,task,state,handles,new,task,state,handles,serialized,state,collections,collection,operator,state,handle,singleton,list,null,collections,collection,operator,state,handle,singleton,list,null,collections,singleton,list,serialized,key,group,states,null,base,matcher,task,state,handles,matcher,new,base,matcher,task,state,handles,override,public,boolean,matches,object,o,if,o,instanceof,task,state,handles,return,o,equals,task,state,handles,return,false,override,public,void,describe,to,description,description,description,append,value,task,state,handles,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,handles,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,handles,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1490724328;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			final ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest.generateChainedStateHandle(new SerializableObject())__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				Executors.directExecutor())___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			SubtaskState checkpointStateHandles = new SubtaskState(serializedState, null, null, serializedKeyGroupStates, null)__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			final TaskStateHandles taskStateHandles = new TaskStateHandles(_					serializedState,_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.singletonList(serializedKeyGroupStates),_					null)___			BaseMatcher<TaskStateHandles> matcher = new BaseMatcher<TaskStateHandles>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateHandles) {_						return o.equals(taskStateHandles)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(taskStateHandles)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,final,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,subtask,state,checkpoint,state,handles,new,subtask,state,serialized,state,null,null,serialized,key,group,states,null,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,final,task,state,handles,task,state,handles,new,task,state,handles,serialized,state,collections,collection,operator,state,handle,singleton,list,null,collections,collection,operator,state,handle,singleton,list,null,collections,singleton,list,serialized,key,group,states,null,base,matcher,task,state,handles,matcher,new,base,matcher,task,state,handles,override,public,boolean,matches,object,o,if,o,instanceof,task,state,handles,return,o,equals,task,state,handles,return,false,override,public,void,describe,to,description,description,description,append,value,task,state,handles,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,handles,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,handles,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1492867556;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			final ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest.generateChainedStateHandle(new SerializableObject())__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				Executors.directExecutor())___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			SubtaskState checkpointStateHandles = new SubtaskState(serializedState, null, null, serializedKeyGroupStates, null)__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			final TaskStateHandles taskStateHandles = new TaskStateHandles(_					serializedState,_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.singletonList(serializedKeyGroupStates),_					null)___			BaseMatcher<TaskStateHandles> matcher = new BaseMatcher<TaskStateHandles>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateHandles) {_						return o.equals(taskStateHandles)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(taskStateHandles)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,final,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,subtask,state,checkpoint,state,handles,new,subtask,state,serialized,state,null,null,serialized,key,group,states,null,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,final,task,state,handles,task,state,handles,new,task,state,handles,serialized,state,collections,collection,operator,state,handle,singleton,list,null,collections,collection,operator,state,handle,singleton,list,null,collections,singleton,list,serialized,key,group,states,null,base,matcher,task,state,handles,matcher,new,base,matcher,task,state,handles,override,public,boolean,matches,object,o,if,o,instanceof,task,state,handles,return,o,equals,task,state,handles,return,false,override,public,void,describe,to,description,description,description,append,value,task,state,handles,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,handles,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,handles,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1492867556;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			final ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest.generateChainedStateHandle(new SerializableObject())__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				Executors.directExecutor())___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			SubtaskState checkpointStateHandles = new SubtaskState(serializedState, null, null, serializedKeyGroupStates, null)__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			final TaskStateHandles taskStateHandles = new TaskStateHandles(_					serializedState,_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.singletonList(serializedKeyGroupStates),_					null)___			BaseMatcher<TaskStateHandles> matcher = new BaseMatcher<TaskStateHandles>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateHandles) {_						return o.equals(taskStateHandles)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(taskStateHandles)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,final,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,subtask,state,checkpoint,state,handles,new,subtask,state,serialized,state,null,null,serialized,key,group,states,null,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,final,task,state,handles,task,state,handles,new,task,state,handles,serialized,state,collections,collection,operator,state,handle,singleton,list,null,collections,collection,operator,state,handle,singleton,list,null,collections,singleton,list,serialized,key,group,states,null,base,matcher,task,state,handles,matcher,new,base,matcher,task,state,handles,override,public,boolean,matches,object,o,if,o,instanceof,task,state,handles,return,o,equals,task,state,handles,return,false,override,public,void,describe,to,description,description,description,append,value,task,state,handles,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,handles,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,handles,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1493403095;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			final ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest.generateChainedStateHandle(new SerializableObject())__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				Executors.directExecutor())___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			SubtaskState checkpointStateHandles = new SubtaskState(serializedState, null, null, serializedKeyGroupStates, null)__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), checkpointStateHandles))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			final TaskStateHandles taskStateHandles = new TaskStateHandles(_					serializedState,_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.<Collection<OperatorStateHandle>>singletonList(null),_					Collections.singletonList(serializedKeyGroupStates),_					null)___			BaseMatcher<TaskStateHandles> matcher = new BaseMatcher<TaskStateHandles>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateHandles) {_						return o.equals(taskStateHandles)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(taskStateHandles)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateHandles>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,final,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,subtask,state,checkpoint,state,handles,new,subtask,state,serialized,state,null,null,serialized,key,group,states,null,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,checkpoint,state,handles,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,final,task,state,handles,task,state,handles,new,task,state,handles,serialized,state,collections,collection,operator,state,handle,singleton,list,null,collections,collection,operator,state,handle,singleton,list,null,collections,singleton,list,serialized,key,group,states,null,base,matcher,task,state,handles,matcher,new,base,matcher,task,state,handles,override,public,boolean,matches,object,o,if,o,instanceof,task,state,handles,return,o,equals,task,state,handles,return,false,override,public,void,describe,to,description,description,description,append,value,task,state,handles,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,handles,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,handles,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1502801814;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			final ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest.generateChainedStateHandle(new SerializableObject())__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				Executors.directExecutor())___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			final TaskStateSnapshot subtaskStates = new TaskStateSnapshot()___			subtaskStates.putSubtaskStateByOperatorID(_				OperatorID.fromJobVertexID(statefulId),_				new OperatorSubtaskState(_					serializedState.get(0),_					Collections.<OperatorStateHandle>emptyList(),_					Collections.<OperatorStateHandle>emptyList(),_					Collections.singletonList(serializedKeyGroupStates),_					Collections.<KeyedStateHandle>emptyList()))___			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			BaseMatcher<TaskStateSnapshot> matcher = new BaseMatcher<TaskStateSnapshot>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateSnapshot) {_						return Objects.equals(o, subtaskStates)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(subtaskStates)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateSnapshot>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateSnapshot>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,final,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,final,task,state,snapshot,subtask,states,new,task,state,snapshot,subtask,states,put,subtask,state,by,operator,id,operator,id,from,job,vertex,id,stateful,id,new,operator,subtask,state,serialized,state,get,0,collections,operator,state,handle,empty,list,collections,operator,state,handle,empty,list,collections,singleton,list,serialized,key,group,states,collections,keyed,state,handle,empty,list,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,base,matcher,task,state,snapshot,matcher,new,base,matcher,task,state,snapshot,override,public,boolean,matches,object,o,if,o,instanceof,task,state,snapshot,return,objects,equals,o,subtask,states,return,false,override,public,void,describe,to,description,description,description,append,value,subtask,states,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,snapshot,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,snapshot,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1502801814;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			final ChainedStateHandle<StreamStateHandle> serializedState = CheckpointCoordinatorTest.generateChainedStateHandle(new SerializableObject())__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				Executors.directExecutor(),_				SharedStateRegistry.DEFAULT_FACTORY)___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			final TaskStateSnapshot subtaskStates = new TaskStateSnapshot()___			subtaskStates.putSubtaskStateByOperatorID(_				OperatorID.fromJobVertexID(statefulId),_				new OperatorSubtaskState(_					serializedState.get(0),_					Collections.<OperatorStateHandle>emptyList(),_					Collections.<OperatorStateHandle>emptyList(),_					Collections.singletonList(serializedKeyGroupStates),_					Collections.<KeyedStateHandle>emptyList()))___			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			BaseMatcher<TaskStateSnapshot> matcher = new BaseMatcher<TaskStateSnapshot>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateSnapshot) {_						return Objects.equals(o, subtaskStates)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(subtaskStates)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateSnapshot>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateSnapshot>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,final,chained,state,handle,stream,state,handle,serialized,state,checkpoint,coordinator,test,generate,chained,state,handle,new,serializable,object,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,shared,state,registry,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,final,task,state,snapshot,subtask,states,new,task,state,snapshot,subtask,states,put,subtask,state,by,operator,id,operator,id,from,job,vertex,id,stateful,id,new,operator,subtask,state,serialized,state,get,0,collections,operator,state,handle,empty,list,collections,operator,state,handle,empty,list,collections,singleton,list,serialized,key,group,states,collections,keyed,state,handle,empty,list,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,base,matcher,task,state,snapshot,matcher,new,base,matcher,task,state,snapshot,override,public,boolean,matches,object,o,if,o,instanceof,task,state,snapshot,return,objects,equals,o,subtask,states,return,false,override,public,void,describe,to,description,description,description,append,value,subtask,states,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,snapshot,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,snapshot,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1503598628;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				Executors.directExecutor(),_				SharedStateRegistry.DEFAULT_FACTORY)___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			final TaskStateSnapshot subtaskStates = new TaskStateSnapshot()___			subtaskStates.putSubtaskStateByOperatorID(_				OperatorID.fromJobVertexID(statefulId),_				new OperatorSubtaskState(_					Collections.<OperatorStateHandle>emptyList(),_					Collections.<OperatorStateHandle>emptyList(),_					Collections.singletonList(serializedKeyGroupStates),_					Collections.<KeyedStateHandle>emptyList()))___			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			BaseMatcher<TaskStateSnapshot> matcher = new BaseMatcher<TaskStateSnapshot>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateSnapshot) {_						return Objects.equals(o, subtaskStates)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(subtaskStates)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateSnapshot>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateSnapshot>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,shared,state,registry,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,final,task,state,snapshot,subtask,states,new,task,state,snapshot,subtask,states,put,subtask,state,by,operator,id,operator,id,from,job,vertex,id,stateful,id,new,operator,subtask,state,collections,operator,state,handle,empty,list,collections,operator,state,handle,empty,list,collections,singleton,list,serialized,key,group,states,collections,keyed,state,handle,empty,list,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,base,matcher,task,state,snapshot,matcher,new,base,matcher,task,state,snapshot,override,public,boolean,matches,object,o,if,o,instanceof,task,state,snapshot,return,objects,equals,o,subtask,states,return,false,override,public,void,describe,to,description,description,description,append,value,subtask,states,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,snapshot,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,snapshot,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1508317940;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				Executors.directExecutor(),_				SharedStateRegistry.DEFAULT_FACTORY)___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			final TaskStateSnapshot subtaskStates = new TaskStateSnapshot()___			subtaskStates.putSubtaskStateByOperatorID(_				OperatorID.fromJobVertexID(statefulId),_				new OperatorSubtaskState(_					Collections.<OperatorStateHandle>emptyList(),_					Collections.<OperatorStateHandle>emptyList(),_					Collections.singletonList(serializedKeyGroupStates),_					Collections.<KeyedStateHandle>emptyList()))___			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			BaseMatcher<TaskStateSnapshot> matcher = new BaseMatcher<TaskStateSnapshot>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateSnapshot) {_						return Objects.equals(o, subtaskStates)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(subtaskStates)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateSnapshot>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateSnapshot>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,executors,direct,executor,shared,state,registry,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,final,task,state,snapshot,subtask,states,new,task,state,snapshot,subtask,states,put,subtask,state,by,operator,id,operator,id,from,job,vertex,id,stateful,id,new,operator,subtask,state,collections,operator,state,handle,empty,list,collections,operator,state,handle,empty,list,collections,singleton,list,serialized,key,group,states,collections,keyed,state,handle,empty,list,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,base,matcher,task,state,snapshot,matcher,new,base,matcher,task,state,snapshot,override,public,boolean,matches,object,o,if,o,instanceof,task,state,snapshot,return,objects,equals,o,subtask,states,return,false,override,public,void,describe,to,description,description,description,append,value,subtask,states,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,snapshot,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,snapshot,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1516295283;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				ExternalizedCheckpointSettings.none(),_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				null,_				new MemoryStateBackend(),_				Executors.directExecutor(),_				SharedStateRegistry.DEFAULT_FACTORY)___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			final TaskStateSnapshot subtaskStates = new TaskStateSnapshot()___			subtaskStates.putSubtaskStateByOperatorID(_				OperatorID.fromJobVertexID(statefulId),_				new OperatorSubtaskState(_					Collections.<OperatorStateHandle>emptyList(),_					Collections.<OperatorStateHandle>emptyList(),_					Collections.singletonList(serializedKeyGroupStates),_					Collections.<KeyedStateHandle>emptyList()))___			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			BaseMatcher<TaskStateSnapshot> matcher = new BaseMatcher<TaskStateSnapshot>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateSnapshot) {_						return Objects.equals(o, subtaskStates)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(subtaskStates)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateSnapshot>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateSnapshot>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,externalized,checkpoint,settings,none,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,null,new,memory,state,backend,executors,direct,executor,shared,state,registry,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,final,task,state,snapshot,subtask,states,new,task,state,snapshot,subtask,states,put,subtask,state,by,operator,id,operator,id,from,job,vertex,id,stateful,id,new,operator,subtask,state,collections,operator,state,handle,empty,list,collections,operator,state,handle,empty,list,collections,singleton,list,serialized,key,group,states,collections,keyed,state,handle,empty,list,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,base,matcher,task,state,snapshot,matcher,new,base,matcher,task,state,snapshot,override,public,boolean,matches,object,o,if,o,instanceof,task,state,snapshot,return,objects,equals,o,subtask,states,return,false,override,public,void,describe,to,description,description,description,append,value,subtask,states,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,snapshot,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,snapshot,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1516295283;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				new MemoryStateBackend(),_				Executors.directExecutor(),_				SharedStateRegistry.DEFAULT_FACTORY)___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			final TaskStateSnapshot subtaskStates = new TaskStateSnapshot()___			subtaskStates.putSubtaskStateByOperatorID(_				OperatorID.fromJobVertexID(statefulId),_				new OperatorSubtaskState(_					Collections.<OperatorStateHandle>emptyList(),_					Collections.<OperatorStateHandle>emptyList(),_					Collections.singletonList(serializedKeyGroupStates),_					Collections.<KeyedStateHandle>emptyList()))___			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			BaseMatcher<TaskStateSnapshot> matcher = new BaseMatcher<TaskStateSnapshot>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof TaskStateSnapshot) {_						return Objects.equals(o, subtaskStates)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(subtaskStates)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<TaskStateSnapshot>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<TaskStateSnapshot>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,checkpoint,retention,policy,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,executors,direct,executor,shared,state,registry,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,final,task,state,snapshot,subtask,states,new,task,state,snapshot,subtask,states,put,subtask,state,by,operator,id,operator,id,from,job,vertex,id,stateful,id,new,operator,subtask,state,collections,operator,state,handle,empty,list,collections,operator,state,handle,empty,list,collections,singleton,list,serialized,key,group,states,collections,keyed,state,handle,empty,list,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,base,matcher,task,state,snapshot,matcher,new,base,matcher,task,state,snapshot,override,public,boolean,matches,object,o,if,o,instanceof,task,state,snapshot,return,objects,equals,o,subtask,states,return,false,override,public,void,describe,to,description,description,description,append,value,subtask,states,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,task,state,snapshot,any,verify,stateless,exec2,times,0,set,initial,state,mockito,task,state,snapshot,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1516626377;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				new MemoryStateBackend(),_				Executors.directExecutor(),_				SharedStateRegistry.DEFAULT_FACTORY)___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			final TaskStateSnapshot subtaskStates = new TaskStateSnapshot()___			subtaskStates.putSubtaskStateByOperatorID(_				OperatorID.fromJobVertexID(statefulId),_				new OperatorSubtaskState(_					Collections.<OperatorStateHandle>emptyList(),_					Collections.<OperatorStateHandle>emptyList(),_					Collections.singletonList(serializedKeyGroupStates),_					Collections.<KeyedStateHandle>emptyList()))___			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			BaseMatcher<JobManagerTaskRestore> matcher = new BaseMatcher<JobManagerTaskRestore>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof JobManagerTaskRestore) {_						JobManagerTaskRestore taskRestore = (JobManagerTaskRestore) o__						return Objects.equals(taskRestore.getTaskStateSnapshot(), subtaskStates)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(subtaskStates)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<JobManagerTaskRestore>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<JobManagerTaskRestore>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,checkpoint,retention,policy,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,executors,direct,executor,shared,state,registry,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,final,task,state,snapshot,subtask,states,new,task,state,snapshot,subtask,states,put,subtask,state,by,operator,id,operator,id,from,job,vertex,id,stateful,id,new,operator,subtask,state,collections,operator,state,handle,empty,list,collections,operator,state,handle,empty,list,collections,singleton,list,serialized,key,group,states,collections,keyed,state,handle,empty,list,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,base,matcher,job,manager,task,restore,matcher,new,base,matcher,job,manager,task,restore,override,public,boolean,matches,object,o,if,o,instanceof,job,manager,task,restore,job,manager,task,restore,task,restore,job,manager,task,restore,o,return,objects,equals,task,restore,get,task,state,snapshot,subtask,states,return,false,override,public,void,describe,to,description,description,description,append,value,subtask,states,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,job,manager,task,restore,any,verify,stateless,exec2,times,0,set,initial,state,mockito,job,manager,task,restore,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1517489696;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				new MemoryStateBackend(),_				Executors.directExecutor(),_				SharedStateRegistry.DEFAULT_FACTORY)___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			final TaskStateSnapshot subtaskStates = new TaskStateSnapshot()___			subtaskStates.putSubtaskStateByOperatorID(_				OperatorID.fromJobVertexID(statefulId),_				new OperatorSubtaskState(_					Collections.<OperatorStateHandle>emptyList(),_					Collections.<OperatorStateHandle>emptyList(),_					Collections.singletonList(serializedKeyGroupStates),_					Collections.<KeyedStateHandle>emptyList()))___			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			BaseMatcher<JobManagerTaskRestore> matcher = new BaseMatcher<JobManagerTaskRestore>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof JobManagerTaskRestore) {_						JobManagerTaskRestore taskRestore = (JobManagerTaskRestore) o__						return Objects.equals(taskRestore.getTaskStateSnapshot(), subtaskStates)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(subtaskStates)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<JobManagerTaskRestore>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<JobManagerTaskRestore>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,checkpoint,retention,policy,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,executors,direct,executor,shared,state,registry,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,final,task,state,snapshot,subtask,states,new,task,state,snapshot,subtask,states,put,subtask,state,by,operator,id,operator,id,from,job,vertex,id,stateful,id,new,operator,subtask,state,collections,operator,state,handle,empty,list,collections,operator,state,handle,empty,list,collections,singleton,list,serialized,key,group,states,collections,keyed,state,handle,empty,list,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,base,matcher,job,manager,task,restore,matcher,new,base,matcher,job,manager,task,restore,override,public,boolean,matches,object,o,if,o,instanceof,job,manager,task,restore,job,manager,task,restore,task,restore,job,manager,task,restore,o,return,objects,equals,task,restore,get,task,state,snapshot,subtask,states,return,false,override,public,void,describe,to,description,description,description,append,value,subtask,states,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,job,manager,task,restore,any,verify,stateless,exec2,times,0,set,initial,state,mockito,job,manager,task,restore,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1519568061;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				new MemoryStateBackend(),_				Executors.directExecutor(),_				SharedStateRegistry.DEFAULT_FACTORY)___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			final TaskStateSnapshot subtaskStates = new TaskStateSnapshot()___			subtaskStates.putSubtaskStateByOperatorID(_				OperatorID.fromJobVertexID(statefulId),_				new OperatorSubtaskState(_					StateObjectCollection.empty(),_					StateObjectCollection.empty(),_					StateObjectCollection.singleton(serializedKeyGroupStates),_					StateObjectCollection.empty()))___			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			BaseMatcher<JobManagerTaskRestore> matcher = new BaseMatcher<JobManagerTaskRestore>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof JobManagerTaskRestore) {_						JobManagerTaskRestore taskRestore = (JobManagerTaskRestore) o__						return Objects.equals(taskRestore.getTaskStateSnapshot(), subtaskStates)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(subtaskStates)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(Mockito.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<JobManagerTaskRestore>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<JobManagerTaskRestore>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,checkpoint,retention,policy,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,executors,direct,executor,shared,state,registry,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,final,task,state,snapshot,subtask,states,new,task,state,snapshot,subtask,states,put,subtask,state,by,operator,id,operator,id,from,job,vertex,id,stateful,id,new,operator,subtask,state,state,object,collection,empty,state,object,collection,empty,state,object,collection,singleton,serialized,key,group,states,state,object,collection,empty,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,base,matcher,job,manager,task,restore,matcher,new,base,matcher,job,manager,task,restore,override,public,boolean,matches,object,o,if,o,instanceof,job,manager,task,restore,job,manager,task,restore,task,restore,job,manager,task,restore,o,return,objects,equals,task,restore,get,task,state,snapshot,subtask,states,return,false,override,public,void,describe,to,description,description,description,append,value,subtask,states,verify,stateful,exec1,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,job,manager,task,restore,any,verify,stateless,exec2,times,0,set,initial,state,mockito,job,manager,task,restore,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
CheckpointStateRestoreTest -> @Test 	public void testSetState();1538998760;Tests that on restore the task state is reset for each stateful task.;@Test_	public void testSetState() {_		try {__			KeyGroupRange keyGroupRange = KeyGroupRange.of(0,0)__			List<SerializableObject> testStates = Collections.singletonList(new SerializableObject())__			final KeyedStateHandle serializedKeyGroupStates = CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange, testStates)___			final JobID jid = new JobID()__			final JobVertexID statefulId = new JobVertexID()__			final JobVertexID statelessId = new JobVertexID()___			Execution statefulExec1 = mockExecution()__			Execution statefulExec2 = mockExecution()__			Execution statefulExec3 = mockExecution()__			Execution statelessExec1 = mockExecution()__			Execution statelessExec2 = mockExecution()___			ExecutionVertex stateful1 = mockExecutionVertex(statefulExec1, statefulId, 0, 3)__			ExecutionVertex stateful2 = mockExecutionVertex(statefulExec2, statefulId, 1, 3)__			ExecutionVertex stateful3 = mockExecutionVertex(statefulExec3, statefulId, 2, 3)__			ExecutionVertex stateless1 = mockExecutionVertex(statelessExec1, statelessId, 0, 2)__			ExecutionVertex stateless2 = mockExecutionVertex(statelessExec2, statelessId, 1, 2)___			ExecutionJobVertex stateful = mockExecutionJobVertex(statefulId,_					new ExecutionVertex[] { stateful1, stateful2, stateful3 })__			ExecutionJobVertex stateless = mockExecutionJobVertex(statelessId,_					new ExecutionVertex[] { stateless1, stateless2 })___			Map<JobVertexID, ExecutionJobVertex> map = new HashMap<JobVertexID, ExecutionJobVertex>()__			map.put(statefulId, stateful)__			map.put(statelessId, stateless)___			CheckpointCoordinator coord = new CheckpointCoordinator(_				jid,_				200000L,_				200000L,_				0,_				Integer.MAX_VALUE,_				CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[] { stateful1, stateful2, stateful3, stateless1, stateless2 },_				new ExecutionVertex[0],_				new StandaloneCheckpointIDCounter(),_				new StandaloneCompletedCheckpointStore(1),_				new MemoryStateBackend(),_				Executors.directExecutor(),_				SharedStateRegistry.DEFAULT_FACTORY)___			_			final long timestamp = 34623786L__			coord.triggerCheckpoint(timestamp, false)___			PendingCheckpoint pending = coord.getPendingCheckpoints().values().iterator().next()__			final long checkpointId = pending.getCheckpointId()___			final TaskStateSnapshot subtaskStates = new TaskStateSnapshot()___			subtaskStates.putSubtaskStateByOperatorID(_				OperatorID.fromJobVertexID(statefulId),_				new OperatorSubtaskState(_					StateObjectCollection.empty(),_					StateObjectCollection.empty(),_					StateObjectCollection.singleton(serializedKeyGroupStates),_					StateObjectCollection.empty()))___			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec1.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec2.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statefulExec3.getAttemptId(), checkpointId, new CheckpointMetrics(), subtaskStates))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec1.getAttemptId(), checkpointId))__			coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid, statelessExec2.getAttemptId(), checkpointId))___			assertEquals(1, coord.getNumberOfRetainedSuccessfulCheckpoints())__			assertEquals(0, coord.getNumberOfPendingCheckpoints())___			_			coord.restoreLatestCheckpointedState(map, true, false)___			__			BaseMatcher<JobManagerTaskRestore> matcher = new BaseMatcher<JobManagerTaskRestore>() {_				@Override_				public boolean matches(Object o) {_					if (o instanceof JobManagerTaskRestore) {_						JobManagerTaskRestore taskRestore = (JobManagerTaskRestore) o__						return Objects.equals(taskRestore.getTaskStateSnapshot(), subtaskStates)__					}_					return false__				}__				@Override_				public void describeTo(Description description) {_					description.appendValue(subtaskStates)__				}_			}___			verify(statefulExec1, times(1)).setInitialState(MockitoHamcrest.argThat(matcher))__			verify(statefulExec2, times(1)).setInitialState(MockitoHamcrest.argThat(matcher))__			verify(statefulExec3, times(1)).setInitialState(MockitoHamcrest.argThat(matcher))__			verify(statelessExec1, times(0)).setInitialState(Mockito.<JobManagerTaskRestore>any())__			verify(statelessExec2, times(0)).setInitialState(Mockito.<JobManagerTaskRestore>any())__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,that,on,restore,the,task,state,is,reset,for,each,stateful,task;test,public,void,test,set,state,try,key,group,range,key,group,range,key,group,range,of,0,0,list,serializable,object,test,states,collections,singleton,list,new,serializable,object,final,keyed,state,handle,serialized,key,group,states,checkpoint,coordinator,test,generate,key,group,state,key,group,range,test,states,final,job,id,jid,new,job,id,final,job,vertex,id,stateful,id,new,job,vertex,id,final,job,vertex,id,stateless,id,new,job,vertex,id,execution,stateful,exec1,mock,execution,execution,stateful,exec2,mock,execution,execution,stateful,exec3,mock,execution,execution,stateless,exec1,mock,execution,execution,stateless,exec2,mock,execution,execution,vertex,stateful1,mock,execution,vertex,stateful,exec1,stateful,id,0,3,execution,vertex,stateful2,mock,execution,vertex,stateful,exec2,stateful,id,1,3,execution,vertex,stateful3,mock,execution,vertex,stateful,exec3,stateful,id,2,3,execution,vertex,stateless1,mock,execution,vertex,stateless,exec1,stateless,id,0,2,execution,vertex,stateless2,mock,execution,vertex,stateless,exec2,stateless,id,1,2,execution,job,vertex,stateful,mock,execution,job,vertex,stateful,id,new,execution,vertex,stateful1,stateful2,stateful3,execution,job,vertex,stateless,mock,execution,job,vertex,stateless,id,new,execution,vertex,stateless1,stateless2,map,job,vertex,id,execution,job,vertex,map,new,hash,map,job,vertex,id,execution,job,vertex,map,put,stateful,id,stateful,map,put,stateless,id,stateless,checkpoint,coordinator,coord,new,checkpoint,coordinator,jid,200000l,200000l,0,integer,checkpoint,retention,policy,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,stateful1,stateful2,stateful3,stateless1,stateless2,new,execution,vertex,0,new,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,executors,direct,executor,shared,state,registry,final,long,timestamp,34623786l,coord,trigger,checkpoint,timestamp,false,pending,checkpoint,pending,coord,get,pending,checkpoints,values,iterator,next,final,long,checkpoint,id,pending,get,checkpoint,id,final,task,state,snapshot,subtask,states,new,task,state,snapshot,subtask,states,put,subtask,state,by,operator,id,operator,id,from,job,vertex,id,stateful,id,new,operator,subtask,state,state,object,collection,empty,state,object,collection,empty,state,object,collection,singleton,serialized,key,group,states,state,object,collection,empty,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec1,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec2,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateful,exec3,get,attempt,id,checkpoint,id,new,checkpoint,metrics,subtask,states,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec1,get,attempt,id,checkpoint,id,coord,receive,acknowledge,message,new,acknowledge,checkpoint,jid,stateless,exec2,get,attempt,id,checkpoint,id,assert,equals,1,coord,get,number,of,retained,successful,checkpoints,assert,equals,0,coord,get,number,of,pending,checkpoints,coord,restore,latest,checkpointed,state,map,true,false,base,matcher,job,manager,task,restore,matcher,new,base,matcher,job,manager,task,restore,override,public,boolean,matches,object,o,if,o,instanceof,job,manager,task,restore,job,manager,task,restore,task,restore,job,manager,task,restore,o,return,objects,equals,task,restore,get,task,state,snapshot,subtask,states,return,false,override,public,void,describe,to,description,description,description,append,value,subtask,states,verify,stateful,exec1,times,1,set,initial,state,mockito,hamcrest,arg,that,matcher,verify,stateful,exec2,times,1,set,initial,state,mockito,hamcrest,arg,that,matcher,verify,stateful,exec3,times,1,set,initial,state,mockito,hamcrest,arg,that,matcher,verify,stateless,exec1,times,0,set,initial,state,mockito,job,manager,task,restore,any,verify,stateless,exec2,times,0,set,initial,state,mockito,job,manager,task,restore,any,catch,exception,e,e,print,stack,trace,fail,e,get,message
