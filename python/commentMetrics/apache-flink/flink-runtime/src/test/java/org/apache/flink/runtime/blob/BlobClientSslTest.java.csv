commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;10;/**  * Starts the SSL enabled BLOB server.  */ ;/**  * Starts the SSL enabled BLOB server.  */ @BeforeClass public static void startSSLServer() throws IOException {     Configuration config = SSLUtilsTest.createInternalSslConfigWithKeyAndTrustStores().     config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporarySslFolder.newFolder().getAbsolutePath()).     blobSslServer = new BlobServer(config, new VoidBlobStore()).     blobSslServer.start().     sslClientConfig = config. }
false;public,static;0;11;;@BeforeClass public static void startNonSSLServer() throws IOException {     Configuration config = SSLUtilsTest.createInternalSslConfigWithKeyAndTrustStores().     config.setString(BlobServerOptions.STORAGE_DIRECTORY, temporarySslFolder.newFolder().getAbsolutePath()).     config.setBoolean(BlobServerOptions.SSL_ENABLED, false).     blobNonSslServer = new BlobServer(config, new VoidBlobStore()).     blobNonSslServer.start().     nonSslClientConfig = config. }
true;public,static;0;9;/**  * Shuts the BLOB server down.  */ ;/**  * Shuts the BLOB server down.  */ @AfterClass public static void stopServers() throws IOException {     if (blobSslServer != null) {         blobSslServer.close().     }     if (blobNonSslServer != null) {         blobNonSslServer.close().     } }
false;protected;0;3;;protected Configuration getBlobClientConfig() {     return sslClientConfig. }
false;protected;0;3;;protected BlobServer getBlobServer() {     return blobSslServer. }
true;public;0;4;/**  * Verify ssl client to ssl server upload.  */ ;/**  * Verify ssl client to ssl server upload.  */ @Test public void testUploadJarFilesHelper() throws Exception {     uploadJarFile(blobSslServer, sslClientConfig). }
true;public;0;5;/**  * Verify ssl client to non-ssl server failure.  */ ;/**  * Verify ssl client to non-ssl server failure.  */ @Test(expected = IOException.class) public void testSSLClientFailure() throws Exception {     // SSL client connected to non-ssl server     uploadJarFile(blobServer, sslClientConfig). }
true;public;0;5;/**  * Verify ssl client to non-ssl server failure.  */ ;/**  * Verify ssl client to non-ssl server failure.  */ @Test(expected = IOException.class) public void testSSLClientFailure2() throws Exception {     // SSL client connected to non-ssl server     uploadJarFile(blobNonSslServer, sslClientConfig). }
true;public;0;5;/**  * Verify non-ssl client to ssl server failure.  */ ;/**  * Verify non-ssl client to ssl server failure.  */ @Test(expected = IOException.class) public void testSSLServerFailure() throws Exception {     // Non-SSL client connected to ssl server     uploadJarFile(blobSslServer, clientConfig). }
true;public;0;5;/**  * Verify non-ssl client to ssl server failure.  */ ;/**  * Verify non-ssl client to ssl server failure.  */ @Test(expected = IOException.class) public void testSSLServerFailure2() throws Exception {     // Non-SSL client connected to ssl server     uploadJarFile(blobSslServer, nonSslClientConfig). }
true;public;0;4;/**  * Verify non-ssl connection sanity.  */ ;/**  * Verify non-ssl connection sanity.  */ @Test public void testNonSSLConnection() throws Exception {     uploadJarFile(blobServer, clientConfig). }
true;public;0;4;/**  * Verify non-ssl connection sanity.  */ ;/**  * Verify non-ssl connection sanity.  */ @Test public void testNonSSLConnection2() throws Exception {     uploadJarFile(blobServer, nonSslClientConfig). }
true;public;0;4;/**  * Verify non-ssl connection sanity.  */ ;/**  * Verify non-ssl connection sanity.  */ @Test public void testNonSSLConnection3() throws Exception {     uploadJarFile(blobNonSslServer, clientConfig). }
true;public;0;4;/**  * Verify non-ssl connection sanity.  */ ;/**  * Verify non-ssl connection sanity.  */ @Test public void testNonSSLConnection4() throws Exception {     uploadJarFile(blobNonSslServer, nonSslClientConfig). }
