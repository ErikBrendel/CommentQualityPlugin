# id;timestamp;commentText;codeText;commentWords;codeWords
StateBackendLoadingTest -> @Test 	public void testLoadFileSystemStateBackend() throws Exception;1516295283;Validates loading a file system state backend with additional parameters from the cluster configuration.;@Test_	public void testLoadFileSystemStateBackend() throws Exception {_		final String checkpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String savepointDir = new Path(tmp.newFolder().toURI()).toString()__		final Path expectedCheckpointsPath = new Path(checkpointDir)__		final Path expectedSavepointsPath = new Path(savepointDir)__		final int threshold = 1000000__		final boolean async = !CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue()___		_		_		final Configuration config1 = new Configuration()__		config1.setString(backendKey, "filesystem")__		config1.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)__		config1.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)__		config1.setInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD, threshold)__		config1.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS, async)___		final Configuration config2 = new Configuration()__		config2.setString(backendKey, FsStateBackendFactory.class.getName())__		config2.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)__		config2.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)__		config2.setInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD, threshold)__		config2.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS, async)___		StateBackend backend1 = StateBackendLoader.loadStateBackendFromConfig(config1, cl, null)__		StateBackend backend2 = StateBackendLoader.loadStateBackendFromConfig(config2, cl, null)___		assertTrue(backend1 instanceof FsStateBackend)__		assertTrue(backend2 instanceof FsStateBackend)___		FsStateBackend fs1 = (FsStateBackend) backend1__		FsStateBackend fs2 = (FsStateBackend) backend2___		assertEquals(expectedCheckpointsPath, fs1.getCheckpointPath())__		assertEquals(expectedCheckpointsPath, fs2.getCheckpointPath())__		assertEquals(expectedSavepointsPath, fs1.getSavepointPath())__		assertEquals(expectedSavepointsPath, fs2.getSavepointPath())__		assertEquals(threshold, fs1.getMinFileSizeThreshold())__		assertEquals(threshold, fs2.getMinFileSizeThreshold())__		assertEquals(async, fs1.isUsingAsynchronousSnapshots())__		assertEquals(async, fs2.isUsingAsynchronousSnapshots())__	};validates,loading,a,file,system,state,backend,with,additional,parameters,from,the,cluster,configuration;test,public,void,test,load,file,system,state,backend,throws,exception,final,string,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,savepoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,path,expected,checkpoints,path,new,path,checkpoint,dir,final,path,expected,savepoints,path,new,path,savepoint,dir,final,int,threshold,1000000,final,boolean,async,checkpointing,options,default,value,final,configuration,config1,new,configuration,config1,set,string,backend,key,filesystem,config1,set,string,checkpointing,options,checkpoint,dir,config1,set,string,checkpointing,options,savepoint,dir,config1,set,integer,checkpointing,options,threshold,config1,set,boolean,checkpointing,options,async,final,configuration,config2,new,configuration,config2,set,string,backend,key,fs,state,backend,factory,class,get,name,config2,set,string,checkpointing,options,checkpoint,dir,config2,set,string,checkpointing,options,savepoint,dir,config2,set,integer,checkpointing,options,threshold,config2,set,boolean,checkpointing,options,async,state,backend,backend1,state,backend,loader,load,state,backend,from,config,config1,cl,null,state,backend,backend2,state,backend,loader,load,state,backend,from,config,config2,cl,null,assert,true,backend1,instanceof,fs,state,backend,assert,true,backend2,instanceof,fs,state,backend,fs,state,backend,fs1,fs,state,backend,backend1,fs,state,backend,fs2,fs,state,backend,backend2,assert,equals,expected,checkpoints,path,fs1,get,checkpoint,path,assert,equals,expected,checkpoints,path,fs2,get,checkpoint,path,assert,equals,expected,savepoints,path,fs1,get,savepoint,path,assert,equals,expected,savepoints,path,fs2,get,savepoint,path,assert,equals,threshold,fs1,get,min,file,size,threshold,assert,equals,threshold,fs2,get,min,file,size,threshold,assert,equals,async,fs1,is,using,asynchronous,snapshots,assert,equals,async,fs2,is,using,asynchronous,snapshots
StateBackendLoadingTest -> @Test 	public void testLoadFileSystemStateBackend() throws Exception;1550681446;Validates loading a file system state backend with additional parameters from the cluster configuration.;@Test_	public void testLoadFileSystemStateBackend() throws Exception {_		final String checkpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String savepointDir = new Path(tmp.newFolder().toURI()).toString()__		final Path expectedCheckpointsPath = new Path(checkpointDir)__		final Path expectedSavepointsPath = new Path(savepointDir)__		final int threshold = 1000000__		final boolean async = !CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue()___		_		_		final Configuration config1 = new Configuration()__		config1.setString(backendKey, "filesystem")__		config1.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)__		config1.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)__		config1.setInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD, threshold)__		config1.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS, async)___		final Configuration config2 = new Configuration()__		config2.setString(backendKey, FsStateBackendFactory.class.getName())__		config2.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)__		config2.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)__		config2.setInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD, threshold)__		config2.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS, async)___		StateBackend backend1 = StateBackendLoader.loadStateBackendFromConfig(config1, cl, null)__		StateBackend backend2 = StateBackendLoader.loadStateBackendFromConfig(config2, cl, null)___		assertTrue(backend1 instanceof FsStateBackend)__		assertTrue(backend2 instanceof FsStateBackend)___		FsStateBackend fs1 = (FsStateBackend) backend1__		FsStateBackend fs2 = (FsStateBackend) backend2___		assertEquals(expectedCheckpointsPath, fs1.getCheckpointPath())__		assertEquals(expectedCheckpointsPath, fs2.getCheckpointPath())__		assertEquals(expectedSavepointsPath, fs1.getSavepointPath())__		assertEquals(expectedSavepointsPath, fs2.getSavepointPath())__		assertEquals(threshold, fs1.getMinFileSizeThreshold())__		assertEquals(threshold, fs2.getMinFileSizeThreshold())__		assertEquals(async, fs1.isUsingAsynchronousSnapshots())__		assertEquals(async, fs2.isUsingAsynchronousSnapshots())__	};validates,loading,a,file,system,state,backend,with,additional,parameters,from,the,cluster,configuration;test,public,void,test,load,file,system,state,backend,throws,exception,final,string,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,savepoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,path,expected,checkpoints,path,new,path,checkpoint,dir,final,path,expected,savepoints,path,new,path,savepoint,dir,final,int,threshold,1000000,final,boolean,async,checkpointing,options,default,value,final,configuration,config1,new,configuration,config1,set,string,backend,key,filesystem,config1,set,string,checkpointing,options,checkpoint,dir,config1,set,string,checkpointing,options,savepoint,dir,config1,set,integer,checkpointing,options,threshold,config1,set,boolean,checkpointing,options,async,final,configuration,config2,new,configuration,config2,set,string,backend,key,fs,state,backend,factory,class,get,name,config2,set,string,checkpointing,options,checkpoint,dir,config2,set,string,checkpointing,options,savepoint,dir,config2,set,integer,checkpointing,options,threshold,config2,set,boolean,checkpointing,options,async,state,backend,backend1,state,backend,loader,load,state,backend,from,config,config1,cl,null,state,backend,backend2,state,backend,loader,load,state,backend,from,config,config2,cl,null,assert,true,backend1,instanceof,fs,state,backend,assert,true,backend2,instanceof,fs,state,backend,fs,state,backend,fs1,fs,state,backend,backend1,fs,state,backend,fs2,fs,state,backend,backend2,assert,equals,expected,checkpoints,path,fs1,get,checkpoint,path,assert,equals,expected,checkpoints,path,fs2,get,checkpoint,path,assert,equals,expected,savepoints,path,fs1,get,savepoint,path,assert,equals,expected,savepoints,path,fs2,get,savepoint,path,assert,equals,threshold,fs1,get,min,file,size,threshold,assert,equals,threshold,fs2,get,min,file,size,threshold,assert,equals,async,fs1,is,using,asynchronous,snapshots,assert,equals,async,fs2,is,using,asynchronous,snapshots
StateBackendLoadingTest -> @Test 	public void testLoadMemoryStateBackendNoParameters() throws Exception;1516295283;Validates loading a memory state backend from the cluster configuration.;@Test_	public void testLoadMemoryStateBackendNoParameters() throws Exception {_		_		__		final Configuration config1 = new Configuration()__		config1.setString(backendKey, "jobmanager")___		final Configuration config2 = new Configuration()__		config2.setString(backendKey, MemoryStateBackendFactory.class.getName())___		StateBackend backend1 = StateBackendLoader.loadStateBackendFromConfig(config1, cl, null)__		StateBackend backend2 = StateBackendLoader.loadStateBackendFromConfig(config2, cl, null)___		assertTrue(backend1 instanceof MemoryStateBackend)__		assertTrue(backend2 instanceof MemoryStateBackend)__	};validates,loading,a,memory,state,backend,from,the,cluster,configuration;test,public,void,test,load,memory,state,backend,no,parameters,throws,exception,final,configuration,config1,new,configuration,config1,set,string,backend,key,jobmanager,final,configuration,config2,new,configuration,config2,set,string,backend,key,memory,state,backend,factory,class,get,name,state,backend,backend1,state,backend,loader,load,state,backend,from,config,config1,cl,null,state,backend,backend2,state,backend,loader,load,state,backend,from,config,config2,cl,null,assert,true,backend1,instanceof,memory,state,backend,assert,true,backend2,instanceof,memory,state,backend
StateBackendLoadingTest -> @Test 	public void testLoadMemoryStateBackendNoParameters() throws Exception;1550681446;Validates loading a memory state backend from the cluster configuration.;@Test_	public void testLoadMemoryStateBackendNoParameters() throws Exception {_		_		__		final Configuration config1 = new Configuration()__		config1.setString(backendKey, "jobmanager")___		final Configuration config2 = new Configuration()__		config2.setString(backendKey, MemoryStateBackendFactory.class.getName())___		StateBackend backend1 = StateBackendLoader.loadStateBackendFromConfig(config1, cl, null)__		StateBackend backend2 = StateBackendLoader.loadStateBackendFromConfig(config2, cl, null)___		assertTrue(backend1 instanceof MemoryStateBackend)__		assertTrue(backend2 instanceof MemoryStateBackend)__	};validates,loading,a,memory,state,backend,from,the,cluster,configuration;test,public,void,test,load,memory,state,backend,no,parameters,throws,exception,final,configuration,config1,new,configuration,config1,set,string,backend,key,jobmanager,final,configuration,config2,new,configuration,config2,set,string,backend,key,memory,state,backend,factory,class,get,name,state,backend,backend1,state,backend,loader,load,state,backend,from,config,config1,cl,null,state,backend,backend2,state,backend,loader,load,state,backend,from,config,config2,cl,null,assert,true,backend1,instanceof,memory,state,backend,assert,true,backend2,instanceof,memory,state,backend
StateBackendLoadingTest -> @Test 	public void testLoadMemoryStateWithParameters() throws Exception;1516295283;Validates loading a memory state backend with additional parameters from the cluster configuration.;@Test_	public void testLoadMemoryStateWithParameters() throws Exception {_		final String checkpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String savepointDir = new Path(tmp.newFolder().toURI()).toString()__		final Path expectedCheckpointPath = new Path(checkpointDir)__		final Path expectedSavepointPath = new Path(savepointDir)___		final boolean async = !CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue()___		_		__		final Configuration config1 = new Configuration()__		config1.setString(backendKey, "jobmanager")__		config1.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)__		config1.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)__		config1.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS, async)___		final Configuration config2 = new Configuration()__		config2.setString(backendKey, MemoryStateBackendFactory.class.getName())__		config2.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)__		config2.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)__		config2.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS, async)___		MemoryStateBackend backend1 = (MemoryStateBackend)_				StateBackendLoader.loadStateBackendFromConfig(config1, cl, null)__		MemoryStateBackend backend2 = (MemoryStateBackend)_				StateBackendLoader.loadStateBackendFromConfig(config2, cl, null)___		assertNotNull(backend1)__		assertNotNull(backend2)___		assertEquals(expectedCheckpointPath, backend1.getCheckpointPath())__		assertEquals(expectedCheckpointPath, backend2.getCheckpointPath())__		assertEquals(expectedSavepointPath, backend1.getSavepointPath())__		assertEquals(expectedSavepointPath, backend2.getSavepointPath())__		assertEquals(async, backend1.isUsingAsynchronousSnapshots())__		assertEquals(async, backend2.isUsingAsynchronousSnapshots())__	};validates,loading,a,memory,state,backend,with,additional,parameters,from,the,cluster,configuration;test,public,void,test,load,memory,state,with,parameters,throws,exception,final,string,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,savepoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,path,expected,checkpoint,path,new,path,checkpoint,dir,final,path,expected,savepoint,path,new,path,savepoint,dir,final,boolean,async,checkpointing,options,default,value,final,configuration,config1,new,configuration,config1,set,string,backend,key,jobmanager,config1,set,string,checkpointing,options,checkpoint,dir,config1,set,string,checkpointing,options,savepoint,dir,config1,set,boolean,checkpointing,options,async,final,configuration,config2,new,configuration,config2,set,string,backend,key,memory,state,backend,factory,class,get,name,config2,set,string,checkpointing,options,checkpoint,dir,config2,set,string,checkpointing,options,savepoint,dir,config2,set,boolean,checkpointing,options,async,memory,state,backend,backend1,memory,state,backend,state,backend,loader,load,state,backend,from,config,config1,cl,null,memory,state,backend,backend2,memory,state,backend,state,backend,loader,load,state,backend,from,config,config2,cl,null,assert,not,null,backend1,assert,not,null,backend2,assert,equals,expected,checkpoint,path,backend1,get,checkpoint,path,assert,equals,expected,checkpoint,path,backend2,get,checkpoint,path,assert,equals,expected,savepoint,path,backend1,get,savepoint,path,assert,equals,expected,savepoint,path,backend2,get,savepoint,path,assert,equals,async,backend1,is,using,asynchronous,snapshots,assert,equals,async,backend2,is,using,asynchronous,snapshots
StateBackendLoadingTest -> @Test 	public void testLoadMemoryStateWithParameters() throws Exception;1550681446;Validates loading a memory state backend with additional parameters from the cluster configuration.;@Test_	public void testLoadMemoryStateWithParameters() throws Exception {_		final String checkpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String savepointDir = new Path(tmp.newFolder().toURI()).toString()__		final Path expectedCheckpointPath = new Path(checkpointDir)__		final Path expectedSavepointPath = new Path(savepointDir)___		final boolean async = !CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue()___		_		__		final Configuration config1 = new Configuration()__		config1.setString(backendKey, "jobmanager")__		config1.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)__		config1.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)__		config1.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS, async)___		final Configuration config2 = new Configuration()__		config2.setString(backendKey, MemoryStateBackendFactory.class.getName())__		config2.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)__		config2.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)__		config2.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS, async)___		MemoryStateBackend backend1 = (MemoryStateBackend)_				StateBackendLoader.loadStateBackendFromConfig(config1, cl, null)__		MemoryStateBackend backend2 = (MemoryStateBackend)_				StateBackendLoader.loadStateBackendFromConfig(config2, cl, null)___		assertNotNull(backend1)__		assertNotNull(backend2)___		assertEquals(expectedCheckpointPath, backend1.getCheckpointPath())__		assertEquals(expectedCheckpointPath, backend2.getCheckpointPath())__		assertEquals(expectedSavepointPath, backend1.getSavepointPath())__		assertEquals(expectedSavepointPath, backend2.getSavepointPath())__		assertEquals(async, backend1.isUsingAsynchronousSnapshots())__		assertEquals(async, backend2.isUsingAsynchronousSnapshots())__	};validates,loading,a,memory,state,backend,with,additional,parameters,from,the,cluster,configuration;test,public,void,test,load,memory,state,with,parameters,throws,exception,final,string,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,savepoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,path,expected,checkpoint,path,new,path,checkpoint,dir,final,path,expected,savepoint,path,new,path,savepoint,dir,final,boolean,async,checkpointing,options,default,value,final,configuration,config1,new,configuration,config1,set,string,backend,key,jobmanager,config1,set,string,checkpointing,options,checkpoint,dir,config1,set,string,checkpointing,options,savepoint,dir,config1,set,boolean,checkpointing,options,async,final,configuration,config2,new,configuration,config2,set,string,backend,key,memory,state,backend,factory,class,get,name,config2,set,string,checkpointing,options,checkpoint,dir,config2,set,string,checkpointing,options,savepoint,dir,config2,set,boolean,checkpointing,options,async,memory,state,backend,backend1,memory,state,backend,state,backend,loader,load,state,backend,from,config,config1,cl,null,memory,state,backend,backend2,memory,state,backend,state,backend,loader,load,state,backend,from,config,config2,cl,null,assert,not,null,backend1,assert,not,null,backend2,assert,equals,expected,checkpoint,path,backend1,get,checkpoint,path,assert,equals,expected,checkpoint,path,backend2,get,checkpoint,path,assert,equals,expected,savepoint,path,backend1,get,savepoint,path,assert,equals,expected,savepoint,path,backend2,get,savepoint,path,assert,equals,async,backend1,is,using,asynchronous,snapshots,assert,equals,async,backend2,is,using,asynchronous,snapshots
StateBackendLoadingTest -> @Test 	public void testLoadingFails() throws Exception;1488304933;This test makes sure that failures properly manifest when the state backend could not be loaded.;@Test_	public void testLoadingFails() throws Exception {_		final Configuration config = new Configuration()___		_		config.setString(backendKey, "does.not.exist")__		try {_			AbstractStateBackend.loadStateBackendFromConfigOrCreateDefault(config, cl, null)__			fail("should fail with an exception")__		} catch (DynamicCodeLoadingException ignored) {_			_		}__		_		config.setString(backendKey, java.io.File.class.getName())__		try {_			AbstractStateBackend.loadStateBackendFromConfigOrCreateDefault(config, cl, null)__			fail("should fail with an exception")__		} catch (DynamicCodeLoadingException ignored) {_			_		}__		_		config.setString(backendKey, FailingFactory.class.getName())__		try {_			AbstractStateBackend.loadStateBackendFromConfigOrCreateDefault(config, cl, null)__			fail("should fail with an exception")__		} catch (IOException ignored) {_			_		}_	};this,test,makes,sure,that,failures,properly,manifest,when,the,state,backend,could,not,be,loaded;test,public,void,test,loading,fails,throws,exception,final,configuration,config,new,configuration,config,set,string,backend,key,does,not,exist,try,abstract,state,backend,load,state,backend,from,config,or,create,default,config,cl,null,fail,should,fail,with,an,exception,catch,dynamic,code,loading,exception,ignored,config,set,string,backend,key,java,io,file,class,get,name,try,abstract,state,backend,load,state,backend,from,config,or,create,default,config,cl,null,fail,should,fail,with,an,exception,catch,dynamic,code,loading,exception,ignored,config,set,string,backend,key,failing,factory,class,get,name,try,abstract,state,backend,load,state,backend,from,config,or,create,default,config,cl,null,fail,should,fail,with,an,exception,catch,ioexception,ignored
StateBackendLoadingTest -> @Test 	public void testLoadingFails() throws Exception;1516295283;This test makes sure that failures properly manifest when the state backend could not be loaded.;@Test_	public void testLoadingFails() throws Exception {_		final Configuration config = new Configuration()___		_		config.setString(backendKey, "does.not.exist")__		try {_			StateBackendLoader.fromApplicationOrConfigOrDefault(null, config, cl, null)__			fail("should fail with an exception")__		} catch (DynamicCodeLoadingException ignored) {_			_		}__		_		config.setString(backendKey, java.io.File.class.getName())__		try {_			StateBackendLoader.fromApplicationOrConfigOrDefault(null, config, cl, null)__			fail("should fail with an exception")__		} catch (DynamicCodeLoadingException ignored) {_			_		}__		_		config.setString(backendKey, FailingFactory.class.getName())__		try {_			StateBackendLoader.fromApplicationOrConfigOrDefault(null, config, cl, null)__			fail("should fail with an exception")__		} catch (IOException ignored) {_			_		}_	};this,test,makes,sure,that,failures,properly,manifest,when,the,state,backend,could,not,be,loaded;test,public,void,test,loading,fails,throws,exception,final,configuration,config,new,configuration,config,set,string,backend,key,does,not,exist,try,state,backend,loader,from,application,or,config,or,default,null,config,cl,null,fail,should,fail,with,an,exception,catch,dynamic,code,loading,exception,ignored,config,set,string,backend,key,java,io,file,class,get,name,try,state,backend,loader,from,application,or,config,or,default,null,config,cl,null,fail,should,fail,with,an,exception,catch,dynamic,code,loading,exception,ignored,config,set,string,backend,key,failing,factory,class,get,name,try,state,backend,loader,from,application,or,config,or,default,null,config,cl,null,fail,should,fail,with,an,exception,catch,ioexception,ignored
StateBackendLoadingTest -> @Test 	public void testLoadingFails() throws Exception;1550681446;This test makes sure that failures properly manifest when the state backend could not be loaded.;@Test_	public void testLoadingFails() throws Exception {_		final Configuration config = new Configuration()___		_		config.setString(backendKey, "does.not.exist")__		try {_			StateBackendLoader.fromApplicationOrConfigOrDefault(null, config, cl, null)__			fail("should fail with an exception")__		} catch (DynamicCodeLoadingException ignored) {_			_		}__		_		config.setString(backendKey, java.io.File.class.getName())__		try {_			StateBackendLoader.fromApplicationOrConfigOrDefault(null, config, cl, null)__			fail("should fail with an exception")__		} catch (DynamicCodeLoadingException ignored) {_			_		}__		_		config.setString(backendKey, FailingFactory.class.getName())__		try {_			StateBackendLoader.fromApplicationOrConfigOrDefault(null, config, cl, null)__			fail("should fail with an exception")__		} catch (IOException ignored) {_			_		}_	};this,test,makes,sure,that,failures,properly,manifest,when,the,state,backend,could,not,be,loaded;test,public,void,test,loading,fails,throws,exception,final,configuration,config,new,configuration,config,set,string,backend,key,does,not,exist,try,state,backend,loader,from,application,or,config,or,default,null,config,cl,null,fail,should,fail,with,an,exception,catch,dynamic,code,loading,exception,ignored,config,set,string,backend,key,java,io,file,class,get,name,try,state,backend,loader,from,application,or,config,or,default,null,config,cl,null,fail,should,fail,with,an,exception,catch,dynamic,code,loading,exception,ignored,config,set,string,backend,key,failing,factory,class,get,name,try,state,backend,loader,from,application,or,config,or,default,null,config,cl,null,fail,should,fail,with,an,exception,catch,ioexception,ignored
StateBackendLoadingTest -> @Test 	public void testConfigureMemoryStateBackend() throws Exception;1516295283;Validates taking the application-defined memory state backend and adding additional_parameters from the cluster configuration.;@Test_	public void testConfigureMemoryStateBackend() throws Exception {_		final String checkpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String savepointDir = new Path(tmp.newFolder().toURI()).toString()__		final Path expectedCheckpointPath = new Path(checkpointDir)__		final Path expectedSavepointPath = new Path(savepointDir)___		final int maxSize = 100__		final boolean async = !CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue()___		final MemoryStateBackend backend = new MemoryStateBackend(maxSize, async)___		final Configuration config = new Configuration()__		config.setString(backendKey, "filesystem")_ _		config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)__		config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)__		config.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS, !async)___		StateBackend loadedBackend = StateBackendLoader.fromApplicationOrConfigOrDefault(backend, config, cl, null)__		assertTrue(loadedBackend instanceof MemoryStateBackend)___		final MemoryStateBackend memBackend = (MemoryStateBackend) loadedBackend__		assertEquals(expectedCheckpointPath, memBackend.getCheckpointPath())__		assertEquals(expectedSavepointPath, memBackend.getSavepointPath())__		assertEquals(maxSize, memBackend.getMaxStateSize())__		assertEquals(async, memBackend.isUsingAsynchronousSnapshots())__	};validates,taking,the,application,defined,memory,state,backend,and,adding,additional,parameters,from,the,cluster,configuration;test,public,void,test,configure,memory,state,backend,throws,exception,final,string,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,savepoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,path,expected,checkpoint,path,new,path,checkpoint,dir,final,path,expected,savepoint,path,new,path,savepoint,dir,final,int,max,size,100,final,boolean,async,checkpointing,options,default,value,final,memory,state,backend,backend,new,memory,state,backend,max,size,async,final,configuration,config,new,configuration,config,set,string,backend,key,filesystem,config,set,string,checkpointing,options,checkpoint,dir,config,set,string,checkpointing,options,savepoint,dir,config,set,boolean,checkpointing,options,async,state,backend,loaded,backend,state,backend,loader,from,application,or,config,or,default,backend,config,cl,null,assert,true,loaded,backend,instanceof,memory,state,backend,final,memory,state,backend,mem,backend,memory,state,backend,loaded,backend,assert,equals,expected,checkpoint,path,mem,backend,get,checkpoint,path,assert,equals,expected,savepoint,path,mem,backend,get,savepoint,path,assert,equals,max,size,mem,backend,get,max,state,size,assert,equals,async,mem,backend,is,using,asynchronous,snapshots
StateBackendLoadingTest -> @Test 	public void testConfigureMemoryStateBackend() throws Exception;1550681446;Validates taking the application-defined memory state backend and adding additional_parameters from the cluster configuration.;@Test_	public void testConfigureMemoryStateBackend() throws Exception {_		final String checkpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String savepointDir = new Path(tmp.newFolder().toURI()).toString()__		final Path expectedCheckpointPath = new Path(checkpointDir)__		final Path expectedSavepointPath = new Path(savepointDir)___		final int maxSize = 100__		final boolean async = !CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue()___		final MemoryStateBackend backend = new MemoryStateBackend(maxSize, async)___		final Configuration config = new Configuration()__		config.setString(backendKey, "filesystem")_ _		config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)__		config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)__		config.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS, !async)___		StateBackend loadedBackend = StateBackendLoader.fromApplicationOrConfigOrDefault(backend, config, cl, null)__		assertTrue(loadedBackend instanceof MemoryStateBackend)___		final MemoryStateBackend memBackend = (MemoryStateBackend) loadedBackend__		assertEquals(expectedCheckpointPath, memBackend.getCheckpointPath())__		assertEquals(expectedSavepointPath, memBackend.getSavepointPath())__		assertEquals(maxSize, memBackend.getMaxStateSize())__		assertEquals(async, memBackend.isUsingAsynchronousSnapshots())__	};validates,taking,the,application,defined,memory,state,backend,and,adding,additional,parameters,from,the,cluster,configuration;test,public,void,test,configure,memory,state,backend,throws,exception,final,string,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,savepoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,path,expected,checkpoint,path,new,path,checkpoint,dir,final,path,expected,savepoint,path,new,path,savepoint,dir,final,int,max,size,100,final,boolean,async,checkpointing,options,default,value,final,memory,state,backend,backend,new,memory,state,backend,max,size,async,final,configuration,config,new,configuration,config,set,string,backend,key,filesystem,config,set,string,checkpointing,options,checkpoint,dir,config,set,string,checkpointing,options,savepoint,dir,config,set,boolean,checkpointing,options,async,state,backend,loaded,backend,state,backend,loader,from,application,or,config,or,default,backend,config,cl,null,assert,true,loaded,backend,instanceof,memory,state,backend,final,memory,state,backend,mem,backend,memory,state,backend,loaded,backend,assert,equals,expected,checkpoint,path,mem,backend,get,checkpoint,path,assert,equals,expected,savepoint,path,mem,backend,get,savepoint,path,assert,equals,max,size,mem,backend,get,max,state,size,assert,equals,async,mem,backend,is,using,asynchronous,snapshots
StateBackendLoadingTest -> @Test 	public void testHighAvailabilityDefaultFallback() throws Exception;1516295283;This tests that in the case of configured high-availability, the memory state backend_automatically grabs the HA persistence directory.;@Test_	public void testHighAvailabilityDefaultFallback() throws Exception {_		final String haPersistenceDir = new Path(tmp.newFolder().toURI()).toString()__		final Path expectedCheckpointPath = new Path(haPersistenceDir)___		final Configuration config1 = new Configuration()__		config1.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		config1.setString(HighAvailabilityOptions.HA_CLUSTER_ID, "myCluster")__		config1.setString(HighAvailabilityOptions.HA_STORAGE_PATH, haPersistenceDir)___		final Configuration config2 = new Configuration()__		config2.setString(backendKey, "jobmanager")__		config2.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		config2.setString(HighAvailabilityOptions.HA_CLUSTER_ID, "myCluster")__		config2.setString(HighAvailabilityOptions.HA_STORAGE_PATH, haPersistenceDir)___		final MemoryStateBackend appBackend = new MemoryStateBackend()___		final StateBackend loaded1 = StateBackendLoader.fromApplicationOrConfigOrDefault(appBackend, config1, cl, null)__		final StateBackend loaded2 = StateBackendLoader.fromApplicationOrConfigOrDefault(null, config1, cl, null)__		final StateBackend loaded3 = StateBackendLoader.fromApplicationOrConfigOrDefault(null, config2, cl, null)___		assertTrue(loaded1 instanceof MemoryStateBackend)__		assertTrue(loaded2 instanceof MemoryStateBackend)__		assertTrue(loaded3 instanceof MemoryStateBackend)___		final MemoryStateBackend memBackend1 = (MemoryStateBackend) loaded1__		final MemoryStateBackend memBackend2 = (MemoryStateBackend) loaded2__		final MemoryStateBackend memBackend3 = (MemoryStateBackend) loaded3___		assertNotNull(memBackend1.getCheckpointPath())__		assertNotNull(memBackend2.getCheckpointPath())__		assertNotNull(memBackend3.getCheckpointPath())__		assertNull(memBackend1.getSavepointPath())__		assertNull(memBackend2.getSavepointPath())__		assertNull(memBackend3.getSavepointPath())___		assertEquals(expectedCheckpointPath, memBackend1.getCheckpointPath().getParent())__		assertEquals(expectedCheckpointPath, memBackend2.getCheckpointPath().getParent())__		assertEquals(expectedCheckpointPath, memBackend3.getCheckpointPath().getParent())__	};this,tests,that,in,the,case,of,configured,high,availability,the,memory,state,backend,automatically,grabs,the,ha,persistence,directory;test,public,void,test,high,availability,default,fallback,throws,exception,final,string,ha,persistence,dir,new,path,tmp,new,folder,to,uri,to,string,final,path,expected,checkpoint,path,new,path,ha,persistence,dir,final,configuration,config1,new,configuration,config1,set,string,high,availability,options,zookeeper,config1,set,string,high,availability,options,my,cluster,config1,set,string,high,availability,options,ha,persistence,dir,final,configuration,config2,new,configuration,config2,set,string,backend,key,jobmanager,config2,set,string,high,availability,options,zookeeper,config2,set,string,high,availability,options,my,cluster,config2,set,string,high,availability,options,ha,persistence,dir,final,memory,state,backend,app,backend,new,memory,state,backend,final,state,backend,loaded1,state,backend,loader,from,application,or,config,or,default,app,backend,config1,cl,null,final,state,backend,loaded2,state,backend,loader,from,application,or,config,or,default,null,config1,cl,null,final,state,backend,loaded3,state,backend,loader,from,application,or,config,or,default,null,config2,cl,null,assert,true,loaded1,instanceof,memory,state,backend,assert,true,loaded2,instanceof,memory,state,backend,assert,true,loaded3,instanceof,memory,state,backend,final,memory,state,backend,mem,backend1,memory,state,backend,loaded1,final,memory,state,backend,mem,backend2,memory,state,backend,loaded2,final,memory,state,backend,mem,backend3,memory,state,backend,loaded3,assert,not,null,mem,backend1,get,checkpoint,path,assert,not,null,mem,backend2,get,checkpoint,path,assert,not,null,mem,backend3,get,checkpoint,path,assert,null,mem,backend1,get,savepoint,path,assert,null,mem,backend2,get,savepoint,path,assert,null,mem,backend3,get,savepoint,path,assert,equals,expected,checkpoint,path,mem,backend1,get,checkpoint,path,get,parent,assert,equals,expected,checkpoint,path,mem,backend2,get,checkpoint,path,get,parent,assert,equals,expected,checkpoint,path,mem,backend3,get,checkpoint,path,get,parent
StateBackendLoadingTest -> @Test 	public void testHighAvailabilityDefaultFallback() throws Exception;1550681446;This tests that in the case of configured high-availability, the memory state backend_automatically grabs the HA persistence directory.;@Test_	public void testHighAvailabilityDefaultFallback() throws Exception {_		final String haPersistenceDir = new Path(tmp.newFolder().toURI()).toString()__		final Path expectedCheckpointPath = new Path(haPersistenceDir)___		final Configuration config1 = new Configuration()__		config1.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		config1.setString(HighAvailabilityOptions.HA_CLUSTER_ID, "myCluster")__		config1.setString(HighAvailabilityOptions.HA_STORAGE_PATH, haPersistenceDir)___		final Configuration config2 = new Configuration()__		config2.setString(backendKey, "jobmanager")__		config2.setString(HighAvailabilityOptions.HA_MODE, "zookeeper")__		config2.setString(HighAvailabilityOptions.HA_CLUSTER_ID, "myCluster")__		config2.setString(HighAvailabilityOptions.HA_STORAGE_PATH, haPersistenceDir)___		final MemoryStateBackend appBackend = new MemoryStateBackend()___		final StateBackend loaded1 = StateBackendLoader.fromApplicationOrConfigOrDefault(appBackend, config1, cl, null)__		final StateBackend loaded2 = StateBackendLoader.fromApplicationOrConfigOrDefault(null, config1, cl, null)__		final StateBackend loaded3 = StateBackendLoader.fromApplicationOrConfigOrDefault(null, config2, cl, null)___		assertTrue(loaded1 instanceof MemoryStateBackend)__		assertTrue(loaded2 instanceof MemoryStateBackend)__		assertTrue(loaded3 instanceof MemoryStateBackend)___		final MemoryStateBackend memBackend1 = (MemoryStateBackend) loaded1__		final MemoryStateBackend memBackend2 = (MemoryStateBackend) loaded2__		final MemoryStateBackend memBackend3 = (MemoryStateBackend) loaded3___		assertNotNull(memBackend1.getCheckpointPath())__		assertNotNull(memBackend2.getCheckpointPath())__		assertNotNull(memBackend3.getCheckpointPath())__		assertNull(memBackend1.getSavepointPath())__		assertNull(memBackend2.getSavepointPath())__		assertNull(memBackend3.getSavepointPath())___		assertEquals(expectedCheckpointPath, memBackend1.getCheckpointPath().getParent())__		assertEquals(expectedCheckpointPath, memBackend2.getCheckpointPath().getParent())__		assertEquals(expectedCheckpointPath, memBackend3.getCheckpointPath().getParent())__	};this,tests,that,in,the,case,of,configured,high,availability,the,memory,state,backend,automatically,grabs,the,ha,persistence,directory;test,public,void,test,high,availability,default,fallback,throws,exception,final,string,ha,persistence,dir,new,path,tmp,new,folder,to,uri,to,string,final,path,expected,checkpoint,path,new,path,ha,persistence,dir,final,configuration,config1,new,configuration,config1,set,string,high,availability,options,zookeeper,config1,set,string,high,availability,options,my,cluster,config1,set,string,high,availability,options,ha,persistence,dir,final,configuration,config2,new,configuration,config2,set,string,backend,key,jobmanager,config2,set,string,high,availability,options,zookeeper,config2,set,string,high,availability,options,my,cluster,config2,set,string,high,availability,options,ha,persistence,dir,final,memory,state,backend,app,backend,new,memory,state,backend,final,state,backend,loaded1,state,backend,loader,from,application,or,config,or,default,app,backend,config1,cl,null,final,state,backend,loaded2,state,backend,loader,from,application,or,config,or,default,null,config1,cl,null,final,state,backend,loaded3,state,backend,loader,from,application,or,config,or,default,null,config2,cl,null,assert,true,loaded1,instanceof,memory,state,backend,assert,true,loaded2,instanceof,memory,state,backend,assert,true,loaded3,instanceof,memory,state,backend,final,memory,state,backend,mem,backend1,memory,state,backend,loaded1,final,memory,state,backend,mem,backend2,memory,state,backend,loaded2,final,memory,state,backend,mem,backend3,memory,state,backend,loaded3,assert,not,null,mem,backend1,get,checkpoint,path,assert,not,null,mem,backend2,get,checkpoint,path,assert,not,null,mem,backend3,get,checkpoint,path,assert,null,mem,backend1,get,savepoint,path,assert,null,mem,backend2,get,savepoint,path,assert,null,mem,backend3,get,savepoint,path,assert,equals,expected,checkpoint,path,mem,backend1,get,checkpoint,path,get,parent,assert,equals,expected,checkpoint,path,mem,backend2,get,checkpoint,path,get,parent,assert,equals,expected,checkpoint,path,mem,backend3,get,checkpoint,path,get,parent
StateBackendLoadingTest -> @Test 	public void testLoadFileSystemStateBackendMixed() throws Exception;1516295283;Validates taking the application-defined file system state backend and adding with additional_parameters from the cluster configuration, but giving precedence to application-defined_parameters over configuration-defined parameters.;@Test_	public void testLoadFileSystemStateBackendMixed() throws Exception {_		final String appCheckpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String checkpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String savepointDir = new Path(tmp.newFolder().toURI()).toString()___		final Path expectedCheckpointsPath = new Path(new URI(appCheckpointDir))__		final Path expectedSavepointsPath = new Path(savepointDir)___		final int threshold = 1000000___		final FsStateBackend backend = new FsStateBackend(new URI(appCheckpointDir), threshold)___		final Configuration config = new Configuration()__		config.setString(backendKey, "jobmanager")_ _		config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)_ _		config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)__		config.setInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD, 20)_ __		final StateBackend loadedBackend =_				StateBackendLoader.fromApplicationOrConfigOrDefault(backend, config, cl, null)__		assertTrue(loadedBackend instanceof FsStateBackend)___		final FsStateBackend fs = (FsStateBackend) loadedBackend__		assertEquals(expectedCheckpointsPath, fs.getCheckpointPath())__		assertEquals(expectedSavepointsPath, fs.getSavepointPath())__		assertEquals(threshold, fs.getMinFileSizeThreshold())__	};validates,taking,the,application,defined,file,system,state,backend,and,adding,with,additional,parameters,from,the,cluster,configuration,but,giving,precedence,to,application,defined,parameters,over,configuration,defined,parameters;test,public,void,test,load,file,system,state,backend,mixed,throws,exception,final,string,app,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,savepoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,path,expected,checkpoints,path,new,path,new,uri,app,checkpoint,dir,final,path,expected,savepoints,path,new,path,savepoint,dir,final,int,threshold,1000000,final,fs,state,backend,backend,new,fs,state,backend,new,uri,app,checkpoint,dir,threshold,final,configuration,config,new,configuration,config,set,string,backend,key,jobmanager,config,set,string,checkpointing,options,checkpoint,dir,config,set,string,checkpointing,options,savepoint,dir,config,set,integer,checkpointing,options,20,final,state,backend,loaded,backend,state,backend,loader,from,application,or,config,or,default,backend,config,cl,null,assert,true,loaded,backend,instanceof,fs,state,backend,final,fs,state,backend,fs,fs,state,backend,loaded,backend,assert,equals,expected,checkpoints,path,fs,get,checkpoint,path,assert,equals,expected,savepoints,path,fs,get,savepoint,path,assert,equals,threshold,fs,get,min,file,size,threshold
StateBackendLoadingTest -> @Test 	public void testLoadFileSystemStateBackendMixed() throws Exception;1550681446;Validates taking the application-defined file system state backend and adding with additional_parameters from the cluster configuration, but giving precedence to application-defined_parameters over configuration-defined parameters.;@Test_	public void testLoadFileSystemStateBackendMixed() throws Exception {_		final String appCheckpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String checkpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String savepointDir = new Path(tmp.newFolder().toURI()).toString()___		final Path expectedCheckpointsPath = new Path(new URI(appCheckpointDir))__		final Path expectedSavepointsPath = new Path(savepointDir)___		final int threshold = 1000000___		final FsStateBackend backend = new FsStateBackend(new URI(appCheckpointDir), threshold)___		final Configuration config = new Configuration()__		config.setString(backendKey, "jobmanager")_ _		config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)_ _		config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)__		config.setInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD, 20)_ __		final StateBackend loadedBackend =_				StateBackendLoader.fromApplicationOrConfigOrDefault(backend, config, cl, null)__		assertTrue(loadedBackend instanceof FsStateBackend)___		final FsStateBackend fs = (FsStateBackend) loadedBackend__		assertEquals(expectedCheckpointsPath, fs.getCheckpointPath())__		assertEquals(expectedSavepointsPath, fs.getSavepointPath())__		assertEquals(threshold, fs.getMinFileSizeThreshold())__	};validates,taking,the,application,defined,file,system,state,backend,and,adding,with,additional,parameters,from,the,cluster,configuration,but,giving,precedence,to,application,defined,parameters,over,configuration,defined,parameters;test,public,void,test,load,file,system,state,backend,mixed,throws,exception,final,string,app,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,savepoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,path,expected,checkpoints,path,new,path,new,uri,app,checkpoint,dir,final,path,expected,savepoints,path,new,path,savepoint,dir,final,int,threshold,1000000,final,fs,state,backend,backend,new,fs,state,backend,new,uri,app,checkpoint,dir,threshold,final,configuration,config,new,configuration,config,set,string,backend,key,jobmanager,config,set,string,checkpointing,options,checkpoint,dir,config,set,string,checkpointing,options,savepoint,dir,config,set,integer,checkpointing,options,20,final,state,backend,loaded,backend,state,backend,loader,from,application,or,config,or,default,backend,config,cl,null,assert,true,loaded,backend,instanceof,fs,state,backend,final,fs,state,backend,fs,fs,state,backend,loaded,backend,assert,equals,expected,checkpoints,path,fs,get,checkpoint,path,assert,equals,expected,savepoints,path,fs,get,savepoint,path,assert,equals,threshold,fs,get,min,file,size,threshold
StateBackendLoadingTest -> @Test 	public void testConfigureMemoryStateBackendMixed() throws Exception;1516295283;Validates taking the application-defined memory state backend and adding additional_parameters from the cluster configuration, but giving precedence to application-defined_parameters over configuration-defined parameters.;@Test_	public void testConfigureMemoryStateBackendMixed() throws Exception {_		final String appCheckpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String checkpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String savepointDir = new Path(tmp.newFolder().toURI()).toString()___		final Path expectedCheckpointPath = new Path(appCheckpointDir)__		final Path expectedSavepointPath = new Path(savepointDir)___		final MemoryStateBackend backend = new MemoryStateBackend(appCheckpointDir, null)___		final Configuration config = new Configuration()__		config.setString(backendKey, "filesystem")_ _		config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)_ _		config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)___		StateBackend loadedBackend = StateBackendLoader.fromApplicationOrConfigOrDefault(backend, config, cl, null)__		assertTrue(loadedBackend instanceof MemoryStateBackend)___		final MemoryStateBackend memBackend = (MemoryStateBackend) loadedBackend__		assertEquals(expectedCheckpointPath, memBackend.getCheckpointPath())__		assertEquals(expectedSavepointPath, memBackend.getSavepointPath())__	};validates,taking,the,application,defined,memory,state,backend,and,adding,additional,parameters,from,the,cluster,configuration,but,giving,precedence,to,application,defined,parameters,over,configuration,defined,parameters;test,public,void,test,configure,memory,state,backend,mixed,throws,exception,final,string,app,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,savepoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,path,expected,checkpoint,path,new,path,app,checkpoint,dir,final,path,expected,savepoint,path,new,path,savepoint,dir,final,memory,state,backend,backend,new,memory,state,backend,app,checkpoint,dir,null,final,configuration,config,new,configuration,config,set,string,backend,key,filesystem,config,set,string,checkpointing,options,checkpoint,dir,config,set,string,checkpointing,options,savepoint,dir,state,backend,loaded,backend,state,backend,loader,from,application,or,config,or,default,backend,config,cl,null,assert,true,loaded,backend,instanceof,memory,state,backend,final,memory,state,backend,mem,backend,memory,state,backend,loaded,backend,assert,equals,expected,checkpoint,path,mem,backend,get,checkpoint,path,assert,equals,expected,savepoint,path,mem,backend,get,savepoint,path
StateBackendLoadingTest -> @Test 	public void testConfigureMemoryStateBackendMixed() throws Exception;1550681446;Validates taking the application-defined memory state backend and adding additional_parameters from the cluster configuration, but giving precedence to application-defined_parameters over configuration-defined parameters.;@Test_	public void testConfigureMemoryStateBackendMixed() throws Exception {_		final String appCheckpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String checkpointDir = new Path(tmp.newFolder().toURI()).toString()__		final String savepointDir = new Path(tmp.newFolder().toURI()).toString()___		final Path expectedCheckpointPath = new Path(appCheckpointDir)__		final Path expectedSavepointPath = new Path(savepointDir)___		final MemoryStateBackend backend = new MemoryStateBackend(appCheckpointDir, null)___		final Configuration config = new Configuration()__		config.setString(backendKey, "filesystem")_ _		config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, checkpointDir)_ _		config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY, savepointDir)___		StateBackend loadedBackend = StateBackendLoader.fromApplicationOrConfigOrDefault(backend, config, cl, null)__		assertTrue(loadedBackend instanceof MemoryStateBackend)___		final MemoryStateBackend memBackend = (MemoryStateBackend) loadedBackend__		assertEquals(expectedCheckpointPath, memBackend.getCheckpointPath())__		assertEquals(expectedSavepointPath, memBackend.getSavepointPath())__	};validates,taking,the,application,defined,memory,state,backend,and,adding,additional,parameters,from,the,cluster,configuration,but,giving,precedence,to,application,defined,parameters,over,configuration,defined,parameters;test,public,void,test,configure,memory,state,backend,mixed,throws,exception,final,string,app,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,checkpoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,string,savepoint,dir,new,path,tmp,new,folder,to,uri,to,string,final,path,expected,checkpoint,path,new,path,app,checkpoint,dir,final,path,expected,savepoint,path,new,path,savepoint,dir,final,memory,state,backend,backend,new,memory,state,backend,app,checkpoint,dir,null,final,configuration,config,new,configuration,config,set,string,backend,key,filesystem,config,set,string,checkpointing,options,checkpoint,dir,config,set,string,checkpointing,options,savepoint,dir,state,backend,loaded,backend,state,backend,loader,from,application,or,config,or,default,backend,config,cl,null,assert,true,loaded,backend,instanceof,memory,state,backend,final,memory,state,backend,mem,backend,memory,state,backend,loaded,backend,assert,equals,expected,checkpoint,path,mem,backend,get,checkpoint,path,assert,equals,expected,savepoint,path,mem,backend,get,savepoint,path
