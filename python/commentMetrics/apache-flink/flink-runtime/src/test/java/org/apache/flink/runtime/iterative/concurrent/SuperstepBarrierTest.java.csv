commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void syncAllWorkersDone() throws InterruptedException {     for (int n = 0. n < 20. n++) {         sync(new AllWorkersDoneEvent()).     } }
false;public;0;6;;@Test public void syncTermination() throws InterruptedException {     for (int n = 0. n < 20. n++) {         sync(new TerminationEvent()).     } }
false;private;1;22;;private void sync(TaskEvent event) throws InterruptedException {     TerminationSignaled terminationSignaled = new TerminationSignaled().     SuperstepBarrier barrier = new SuperstepBarrier(getClass().getClassLoader()).     barrier.setup().     Thread headThread = new Thread(new IterationHead(barrier, terminationSignaled)).     Thread syncThread = new Thread(new IterationSync(barrier, event)).     headThread.start().     syncThread.start().     headThread.join().     syncThread.join().     if (event instanceof TerminationEvent) {         assertTrue(terminationSignaled.isTerminationSignaled()).     } else {         assertFalse(terminationSignaled.isTerminationSignaled()).     } }
false;public;0;15;;@Override public void run() {     try {         Thread.sleep(random.nextInt(10)).         barrier.waitForOtherWorkers().         if (barrier.terminationSignaled()) {             terminationSignaled.setTerminationSignaled().         }     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;public;0;11;;@Override public void run() {     try {         Thread.sleep(random.nextInt(10)).         barrier.onEvent(event).     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;public;0;3;;public boolean isTerminationSignaled() {     return terminationSignaled. }
false;public;0;3;;public void setTerminationSignaled() {     terminationSignaled = true. }
