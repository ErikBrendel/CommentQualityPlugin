commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected NetworkBuffer newBuffer(int length, int maxCapacity) {     return newBuffer(length, maxCapacity, false). }
true;private,static;3;3;/**  * Creates a new buffer for testing.  *  * @param length  * 		buffer capacity  * @param maxCapacity  * 		buffer maximum capacity (will be used for the underlying {@link MemorySegment})  * @param isBuffer  * 		whether the buffer should represent data (<tt>true</tt>) or an event (<tt>false</tt>)  *  * @return the buffer  */ ;/**  * Creates a new buffer for testing.  *  * @param length  * 		buffer capacity  * @param maxCapacity  * 		buffer maximum capacity (will be used for the underlying {@link MemorySegment})  * @param isBuffer  * 		whether the buffer should represent data (<tt>true</tt>) or an event (<tt>false</tt>)  *  * @return the buffer  */ private static NetworkBuffer newBuffer(int length, int maxCapacity, boolean isBuffer) {     return newBuffer(length, maxCapacity, isBuffer, FreeingBufferRecycler.INSTANCE). }
true;private,static;4;14;/**  * Creates a new buffer for testing.  *  * @param length  * 		buffer capacity  * @param maxCapacity  * 		buffer maximum capacity (will be used for the underlying {@link MemorySegment})  * @param isBuffer  * 		whether the buffer should represent data (<tt>true</tt>) or an event (<tt>false</tt>)  * @param recycler  * 		the buffer recycler to use  *  * @return the buffer  */ ;/**  * Creates a new buffer for testing.  *  * @param length  * 		buffer capacity  * @param maxCapacity  * 		buffer maximum capacity (will be used for the underlying {@link MemorySegment})  * @param isBuffer  * 		whether the buffer should represent data (<tt>true</tt>) or an event (<tt>false</tt>)  * @param recycler  * 		the buffer recycler to use  *  * @return the buffer  */ private static NetworkBuffer newBuffer(int length, int maxCapacity, boolean isBuffer, BufferRecycler recycler) {     final MemorySegment segment = MemorySegmentFactory.allocateUnpooledSegment(Math.min(maxCapacity, MAX_CAPACITY_UPPER_BOUND)).     NetworkBuffer buffer = new NetworkBuffer(segment, recycler, isBuffer).     buffer.capacity(length).     buffer.setAllocator(NETTY_BUFFER_POOL).     assertSame(ByteOrder.BIG_ENDIAN, buffer.order()).     assertEquals(0, buffer.readerIndex()).     assertEquals(0, buffer.writerIndex()).     return buffer. }
false;public;0;4;;@Test public void testDataBufferIsBuffer() {     assertFalse(newBuffer(1024, 1024, false).isBuffer()). }
false;public;0;4;;@Test public void testEventBufferIsBuffer() {     assertFalse(newBuffer(1024, 1024, false).isBuffer()). }
false;public;0;4;;@Test public void testDataBufferTagAsEvent() {     testTagAsEvent(true). }
false;public;0;4;;@Test public void testEventBufferTagAsEvent() {     testTagAsEvent(false). }
false;private,static;1;5;;private static void testTagAsEvent(boolean isBuffer) {     NetworkBuffer buffer = newBuffer(1024, 1024, isBuffer).     buffer.tagAsEvent().     assertFalse(buffer.isBuffer()). }
false;public;0;4;;@Test public void testDataBufferGetMemorySegment() {     testGetMemorySegment(true). }
false;public;0;4;;@Test public void testEventBufferGetMemorySegment() {     testGetMemorySegment(false). }
false;private,static;1;5;;private static void testGetMemorySegment(boolean isBuffer) {     final MemorySegment segment = MemorySegmentFactory.allocateUnpooledSegment(1024).     NetworkBuffer buffer = new NetworkBuffer(segment, FreeingBufferRecycler.INSTANCE, isBuffer).     assertSame(segment, buffer.getMemorySegment()). }
false;public;0;4;;@Test public void testDataBufferGetRecycler() {     testGetRecycler(true). }
false;public;0;4;;@Test public void testEventBufferGetRecycler() {     testGetRecycler(false). }
false;private,static;1;6;;private static void testGetRecycler(boolean isBuffer) {     BufferRecycler recycler = MemorySegment::free.     NetworkBuffer dataBuffer = newBuffer(1024, 1024, isBuffer, recycler).     assertSame(recycler, dataBuffer.getRecycler()). }
false;public;0;4;;@Test public void testDataBufferRecycleBuffer() {     testRecycleBuffer(true). }
false;public;0;4;;@Test public void testEventBufferRecycleBuffer() {     testRecycleBuffer(false). }
true;private,static;1;7;/**  * Tests that {@link NetworkBuffer#recycleBuffer()} and {@link NetworkBuffer#isRecycled()} are  * coupled and are also consistent with {@link NetworkBuffer#refCnt()}.  */ ;/**  * Tests that {@link NetworkBuffer#recycleBuffer()} and {@link NetworkBuffer#isRecycled()} are  * coupled and are also consistent with {@link NetworkBuffer#refCnt()}.  */ private static void testRecycleBuffer(boolean isBuffer) {     NetworkBuffer buffer = newBuffer(1024, 1024, isBuffer).     assertFalse(buffer.isRecycled()).     buffer.recycleBuffer().     assertTrue(buffer.isRecycled()).     assertEquals(0, buffer.refCnt()). }
false;public;0;4;;@Test public void testDataBufferRetainBuffer() {     testRetainBuffer(true). }
false;public;0;4;;@Test public void testEventBufferRetainBuffer() {     testRetainBuffer(false). }
true;private,static;1;7;/**  * Tests that {@link NetworkBuffer#retainBuffer()} and {@link NetworkBuffer#isRecycled()} are  * coupled and are also consistent with {@link NetworkBuffer#refCnt()}.  */ ;/**  * Tests that {@link NetworkBuffer#retainBuffer()} and {@link NetworkBuffer#isRecycled()} are  * coupled and are also consistent with {@link NetworkBuffer#refCnt()}.  */ private static void testRetainBuffer(boolean isBuffer) {     NetworkBuffer buffer = newBuffer(1024, 1024, isBuffer).     assertFalse(buffer.isRecycled()).     buffer.retainBuffer().     assertFalse(buffer.isRecycled()).     assertEquals(2, buffer.refCnt()). }
false;public;0;4;;@Test public void testDataBufferCreateSlice1() {     testCreateSlice1(true). }
false;public;0;4;;@Test public void testEventBufferCreateSlice1() {     testCreateSlice1(false). }
false;private,static;1;17;;private static void testCreateSlice1(boolean isBuffer) {     NetworkBuffer buffer = newBuffer(1024, 1024, isBuffer).     // fake some data     buffer.setSize(10).     ReadOnlySlicedNetworkBuffer slice = buffer.readOnlySlice().     assertEquals(0, slice.getReaderIndex()).     assertEquals(10, slice.getSize()).     assertEquals(10, slice.getSizeUnsafe()).     assertSame(buffer, slice.unwrap().unwrap()).     // slice indices should be independent:     buffer.setSize(8).     buffer.setReaderIndex(2).     assertEquals(0, slice.getReaderIndex()).     assertEquals(10, slice.getSize()).     assertEquals(10, slice.getSizeUnsafe()). }
false;public;0;4;;@Test public void testDataBufferCreateSlice2() {     testCreateSlice2(true). }
false;public;0;4;;@Test public void testEventBufferCreateSlice2() {     testCreateSlice2(false). }
false;private,static;1;17;;private static void testCreateSlice2(boolean isBuffer) {     NetworkBuffer buffer = newBuffer(1024, 1024, isBuffer).     // fake some data     buffer.setSize(2).     ReadOnlySlicedNetworkBuffer slice = buffer.readOnlySlice(1, 10).     assertEquals(0, slice.getReaderIndex()).     assertEquals(10, slice.getSize()).     assertEquals(10, slice.getSizeUnsafe()).     assertSame(buffer, slice.unwrap().unwrap()).     // slice indices should be independent:     buffer.setSize(8).     buffer.setReaderIndex(2).     assertEquals(0, slice.getReaderIndex()).     assertEquals(10, slice.getSize()).     assertEquals(10, slice.getSizeUnsafe()). }
false;public;0;4;;@Test public void testDataBufferGetMaxCapacity() {     testGetMaxCapacity(true). }
false;public;0;4;;@Test public void testEventBufferGetMaxCapacity() {     testGetMaxCapacity(false). }
false;private,static;1;7;;private static void testGetMaxCapacity(boolean isBuffer) {     NetworkBuffer buffer = newBuffer(100, 1024, isBuffer).     assertEquals(1024, buffer.getMaxCapacity()).     MemorySegment segment = buffer.getMemorySegment().     Assert.assertEquals(segment.size(), buffer.getMaxCapacity()).     Assert.assertEquals(segment.size(), buffer.maxCapacity()). }
false;public;0;4;;@Test public void testDataBufferGetSetReaderIndex() {     testGetSetReaderIndex(true). }
false;public;0;4;;@Test public void testEventBufferGetSetReaderIndex() {     testGetSetReaderIndex(false). }
true;private,static;1;10;/**  * Tests that {@link NetworkBuffer#setReaderIndex(int)} and  * {@link NetworkBuffer#getReaderIndex()} are consistent.  */ ;/**  * Tests that {@link NetworkBuffer#setReaderIndex(int)} and  * {@link NetworkBuffer#getReaderIndex()} are consistent.  */ private static void testGetSetReaderIndex(boolean isBuffer) {     NetworkBuffer buffer = newBuffer(100, 1024, isBuffer).     assertEquals(0, buffer.getReaderIndex()).     // fake some data     buffer.setSize(100).     assertEquals(0, buffer.getReaderIndex()).     buffer.setReaderIndex(1).     assertEquals(1, buffer.getReaderIndex()). }
false;public;0;4;;@Test public void testDataBufferSetGetSize() {     testSetGetSize(true). }
false;public;0;4;;@Test public void testEventBufferSetGetSize() {     testSetGetSize(false). }
false;private,static;1;14;;private static void testSetGetSize(boolean isBuffer) {     NetworkBuffer buffer = newBuffer(1024, 1024, isBuffer).     // initially 0     assertEquals(0, buffer.getSize()).     assertEquals(0, buffer.getSizeUnsafe()).     assertEquals(buffer.writerIndex(), buffer.getSize()).     // initially 0     assertEquals(0, buffer.readerIndex()).     buffer.setSize(10).     assertEquals(10, buffer.getSize()).     assertEquals(10, buffer.getSizeUnsafe()).     assertEquals(buffer.writerIndex(), buffer.getSize()).     // independent     assertEquals(0, buffer.readerIndex()). }
false;public;0;4;;@Test public void testDataBufferReadableBytes() {     testReadableBytes(true). }
false;public;0;4;;@Test public void testEventBufferReadableBytes() {     testReadableBytes(false). }
false;private,static;1;11;;private static void testReadableBytes(boolean isBuffer) {     NetworkBuffer buffer = newBuffer(1024, 1024, isBuffer).     assertEquals(0, buffer.readableBytes()).     buffer.setSize(10).     assertEquals(10, buffer.readableBytes()).     buffer.setReaderIndex(2).     assertEquals(8, buffer.readableBytes()).     buffer.setReaderIndex(10).     assertEquals(0, buffer.readableBytes()). }
false;public;0;4;;@Test public void testDataBufferGetNioBufferReadable() {     testGetNioBufferReadable(true). }
false;public;0;4;;@Test public void testEventBufferGetNioBufferReadable() {     testGetNioBufferReadable(false). }
false;private;1;27;;private void testGetNioBufferReadable(boolean isBuffer) {     NetworkBuffer buffer = newBuffer(1024, 1024, isBuffer).     ByteBuffer byteBuffer = buffer.getNioBufferReadable().     assertFalse(byteBuffer.isReadOnly()).     assertEquals(0, byteBuffer.remaining()).     assertEquals(0, byteBuffer.limit()).     assertEquals(0, byteBuffer.capacity()).     // add some data     buffer.setSize(10).     // nothing changes in the byteBuffer     assertEquals(0, byteBuffer.remaining()).     assertEquals(0, byteBuffer.limit()).     assertEquals(0, byteBuffer.capacity()).     // get a new byteBuffer (should have updated indices)     byteBuffer = buffer.getNioBufferReadable().     assertFalse(byteBuffer.isReadOnly()).     assertEquals(10, byteBuffer.remaining()).     assertEquals(10, byteBuffer.limit()).     assertEquals(10, byteBuffer.capacity()).     // modify byteBuffer position and verify nothing has changed in the original buffer     byteBuffer.position(1).     assertEquals(0, buffer.getReaderIndex()).     assertEquals(10, buffer.getSize()). }
false;public;0;5;;@Test public void testGetNioBufferReadableThreadSafe() {     NetworkBuffer buffer = newBuffer(1024, 1024).     testGetNioBufferReadableThreadSafe(buffer). }
false;static;1;9;;static void testGetNioBufferReadableThreadSafe(Buffer buffer) {     ByteBuffer buf1 = buffer.getNioBufferReadable().     ByteBuffer buf2 = buffer.getNioBufferReadable().     assertNotNull(buf1).     assertNotNull(buf2).     assertTrue("Repeated call to getNioBuffer() returns the same nio buffer", buf1 != buf2). }
false;public;0;4;;@Test public void testDataBufferGetNioBuffer() {     testGetNioBuffer(true). }
false;public;0;4;;@Test public void testEventBufferGetNioBuffer() {     testGetNioBuffer(false). }
false;private;1;27;;private void testGetNioBuffer(boolean isBuffer) {     NetworkBuffer buffer = newBuffer(1024, 1024, isBuffer).     ByteBuffer byteBuffer = buffer.getNioBuffer(1, 1).     assertFalse(byteBuffer.isReadOnly()).     assertEquals(1, byteBuffer.remaining()).     assertEquals(1, byteBuffer.limit()).     assertEquals(1, byteBuffer.capacity()).     // add some data     buffer.setSize(10).     // nothing changes in the byteBuffer     assertEquals(1, byteBuffer.remaining()).     assertEquals(1, byteBuffer.limit()).     assertEquals(1, byteBuffer.capacity()).     // get a new byteBuffer (should have updated indices)     byteBuffer = buffer.getNioBuffer(1, 2).     assertFalse(byteBuffer.isReadOnly()).     assertEquals(2, byteBuffer.remaining()).     assertEquals(2, byteBuffer.limit()).     assertEquals(2, byteBuffer.capacity()).     // modify byteBuffer position and verify nothing has changed in the original buffer     byteBuffer.position(1).     assertEquals(0, buffer.getReaderIndex()).     assertEquals(10, buffer.getSize()). }
false;public;0;5;;@Test public void testGetNioBufferThreadSafe() {     NetworkBuffer buffer = newBuffer(1024, 1024).     testGetNioBufferThreadSafe(buffer, 10). }
false;static;2;9;;static void testGetNioBufferThreadSafe(Buffer buffer, int length) {     ByteBuffer buf1 = buffer.getNioBuffer(0, length).     ByteBuffer buf2 = buffer.getNioBuffer(0, length).     assertNotNull(buf1).     assertNotNull(buf2).     assertTrue("Repeated call to getNioBuffer(int, int) returns the same nio buffer", buf1 != buf2). }
false;public;0;4;;@Test public void testDataBufferSetAllocator() {     testSetAllocator(true). }
false;public;0;4;;@Test public void testEventBufferSetAllocator() {     testSetAllocator(false). }
false;private;1;7;;private void testSetAllocator(boolean isBuffer) {     NetworkBuffer buffer = newBuffer(1024, 1024, isBuffer).     NettyBufferPool allocator = new NettyBufferPool(1).     buffer.setAllocator(allocator).     assertSame(allocator, buffer.alloc()). }
