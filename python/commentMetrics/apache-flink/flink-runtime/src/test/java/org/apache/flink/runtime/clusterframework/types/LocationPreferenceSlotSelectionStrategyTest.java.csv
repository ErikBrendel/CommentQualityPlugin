commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testResourceProfileRespected() {     SlotProfile slotProfile = new SlotProfile(biggerResourceProfile, Collections.emptyList(), Collections.emptySet()).     Optional<SlotSelectionStrategy.SlotInfoAndLocality> match = runMatching(slotProfile).     Assert.assertTrue(match.get().getSlotInfo().getResourceProfile().isMatching(slotProfile.getResourceProfile())).     ResourceProfile evenBiggerResourceProfile = new ResourceProfile(biggerResourceProfile.getCpuCores() + 1, resourceProfile.getHeapMemoryInMB()).     slotProfile = new SlotProfile(evenBiggerResourceProfile, Collections.emptyList(), Collections.emptySet()).     match = runMatching(slotProfile).     Assert.assertFalse(match.isPresent()). }
false;public;0;8;;@Test public void matchNoRequirements() {     SlotProfile slotProfile = new SlotProfile(ResourceProfile.UNKNOWN, Collections.emptyList(), Collections.emptySet()).     Optional<SlotSelectionStrategy.SlotInfoAndLocality> match = runMatching(slotProfile).     Assert.assertTrue(candidates.contains(match.get().getSlotInfo())). }
false;public;0;8;;@Test public void matchPreferredLocationNotAvailable() {     SlotProfile slotProfile = new SlotProfile(resourceProfile, Collections.singletonList(tmlX), Collections.emptySet()).     Optional<SlotSelectionStrategy.SlotInfoAndLocality> match = runMatching(slotProfile).     Assert.assertTrue(candidates.contains(match.get().getSlotInfo())). }
false;public;0;18;;@Test public void matchPreferredLocation() {     SlotProfile slotProfile = new SlotProfile(resourceProfile, Collections.singletonList(tml2), Collections.emptySet()).     Optional<SlotSelectionStrategy.SlotInfoAndLocality> match = runMatching(slotProfile).     Assert.assertEquals(ssc2, match.get().getSlotInfo()).     slotProfile = new SlotProfile(resourceProfile, Arrays.asList(tmlX, tml4), Collections.emptySet()).     match = runMatching(slotProfile).     Assert.assertEquals(ssc4, match.get().getSlotInfo()).     slotProfile = new SlotProfile(resourceProfile, Arrays.asList(tml3, tml1, tml3, tmlX), Collections.emptySet()).     match = runMatching(slotProfile).     Assert.assertEquals(ssc3, match.get().getSlotInfo()). }
false;public;0;13;;@Test public void matchPreviousLocationAvailableButAlsoBlacklisted() {     HashSet<AllocationID> blacklisted = new HashSet<>(4).     blacklisted.add(aid1).     blacklisted.add(aid2).     blacklisted.add(aid3).     blacklisted.add(aid4).     SlotProfile slotProfile = new SlotProfile(resourceProfile, Collections.singletonList(tml3), Collections.singletonList(aid3), blacklisted).     Optional<SlotSelectionStrategy.SlotInfoAndLocality> match = runMatching(slotProfile).     // available previous allocation should override blacklisting     Assert.assertEquals(ssc3, match.get().getSlotInfo()). }
