commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected QueryScopeInfo createQueryServiceMetricInfo(CharacterFilter filter) {     return null. }
false;protected;1;4;;@Override protected String getGroupName(CharacterFilter filter) {     return "". }
true;public;0;19;/**  * Verifies that no {@link NullPointerException} is thrown when {@link AbstractMetricGroup#getAllVariables()} is  * called and the parent is null.  */ ;/**  * Verifies that no {@link NullPointerException} is thrown when {@link AbstractMetricGroup#getAllVariables()} is  * called and the parent is null.  */ @Test public void testGetAllVariables() throws Exception {     MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration()).     AbstractMetricGroup group = new AbstractMetricGroup<AbstractMetricGroup<?>>(registry, new String[0], null) {          @Override         protected QueryScopeInfo createQueryServiceMetricInfo(CharacterFilter filter) {             return null.         }          @Override         protected String getGroupName(CharacterFilter filter) {             return "".         }     }.     assertTrue(group.getAllVariables().isEmpty()).     registry.shutdown().get(). }
false;public;1;4;;@Override public String filterCharacters(String input) {     return input.replace("C", "X"). }
false;public;1;4;;@Override public String filterCharacters(String input) {     return input.replace("B", "X"). }
false;public;0;24;;@Test public void testScopeCachingForMultipleReporters() throws Exception {     Configuration config = new Configuration().     config.setString(MetricOptions.SCOPE_NAMING_TM, "A.B.C.D").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter1.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, "-").     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter2.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, "!").     MetricRegistryImpl testRegistry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config)).     try {         MetricGroup tmGroup = new TaskManagerMetricGroup(testRegistry, "host", "id").         tmGroup.counter("1").         assertEquals("Reporters were not properly instantiated", 2, testRegistry.getReporters().size()).         for (MetricReporter reporter : testRegistry.getReporters()) {             ScopeCheckingTestReporter typedReporter = (ScopeCheckingTestReporter) reporter.             if (typedReporter.failureCause != null) {                 throw typedReporter.failureCause.             }         }     } finally {         testRegistry.shutdown().get().     } }
false;public;0;23;;@Test public void testLogicalScopeCachingForMultipleReporters() throws Exception {     Configuration config = new Configuration().     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, LogicalScopeReporter1.class.getName()).     config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, LogicalScopeReporter2.class.getName()).     MetricRegistryImpl testRegistry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config)).     try {         MetricGroup tmGroup = new TaskManagerMetricGroup(testRegistry, "host", "id").addGroup("B").addGroup("C").         tmGroup.counter("1").         assertEquals("Reporters were not properly instantiated", 2, testRegistry.getReporters().size()).         for (MetricReporter reporter : testRegistry.getReporters()) {             ScopeCheckingTestReporter typedReporter = (ScopeCheckingTestReporter) reporter.             if (typedReporter.failureCause != null) {                 throw typedReporter.failureCause.             }         }     } finally {         testRegistry.shutdown().get().     } }
false;public;3;10;;@Override public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group) {     try {         checkScopes(metric, metricName, group).     } catch (Exception e) {         if (failureCause == null) {             failureCause = e.         }     } }
false;public,abstract;3;1;;public abstract void checkScopes(Metric metric, String metricName, MetricGroup group).
false;public;1;4;;@Override public String filterCharacters(String input) {     return FILTER_B.filterCharacters(input). }
false;public;1;4;;@Override public String filterCharacters(String input) {     return input.replace("B", "X").replace("1", "4"). }
false;public;3;15;;@Override public void checkScopes(Metric metric, String metricName, MetricGroup group) {     // the first call determines which filter is applied to all future calls. in this case no filter is used at all     assertEquals("A-B-C-D-1", group.getMetricIdentifier(metricName)).     // from now on the scope string is cached and should not be reliant on the given filter     assertEquals("A-B-C-D-1", group.getMetricIdentifier(metricName, FILTER_C)).     assertEquals("A-B-C-D-1", group.getMetricIdentifier(metricName, this)).     // the metric name however is still affected by the filter as it is not cached     assertEquals("A-B-C-D-4", group.getMetricIdentifier(metricName, new CharacterFilter() {          @Override         public String filterCharacters(String input) {             return input.replace("B", "X").replace("1", "4").         }     })). }
false;public;1;4;;@Override public String filterCharacters(String input) {     return FILTER_C.filterCharacters(input). }
false;public;1;4;;@Override public String filterCharacters(String input) {     return input.replace("A", "X").replace("1", "3"). }
false;public;3;15;;@Override public void checkScopes(Metric metric, String metricName, MetricGroup group) {     // the first call determines which filter is applied to all future calls     assertEquals("A!B!X!D!1", group.getMetricIdentifier(metricName, this)).     // from now on the scope string is cached and should not be reliant on the given filter     assertEquals("A!B!X!D!1", group.getMetricIdentifier(metricName)).     assertEquals("A!B!X!D!1", group.getMetricIdentifier(metricName, FILTER_C)).     // the metric name however is still affected by the filter as it is not cached     assertEquals("A!B!X!D!3", group.getMetricIdentifier(metricName, new CharacterFilter() {          @Override         public String filterCharacters(String input) {             return input.replace("A", "X").replace("1", "3").         }     })). }
false;public;1;4;;@Override public String filterCharacters(String input) {     return FILTER_B.filterCharacters(input). }
false;public;3;5;;@Override public void checkScopes(Metric metric, String metricName, MetricGroup group) {     final String logicalScope = ((FrontMetricGroup<AbstractMetricGroup<?>>) group).getLogicalScope(this, '-').     assertEquals("taskmanager-X-C", logicalScope). }
false;public;1;4;;@Override public String filterCharacters(String input) {     return FILTER_C.filterCharacters(input). }
false;public;3;5;;@Override public void checkScopes(Metric metric, String metricName, MetricGroup group) {     final String logicalScope = ((FrontMetricGroup<AbstractMetricGroup<?>>) group).getLogicalScope(this, ',').     assertEquals("taskmanager,B,X", logicalScope). }
false;public;0;21;;@Test public void testScopeGenerationWithoutReporters() throws Exception {     Configuration config = new Configuration().     config.setString(MetricOptions.SCOPE_NAMING_TM, "A.B.C.D").     MetricRegistryImpl testRegistry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config)).     try {         TaskManagerMetricGroup group = new TaskManagerMetricGroup(testRegistry, "host", "id").         assertEquals("MetricReporters list should be empty", 0, testRegistry.getReporters().size()).         // default delimiter should be used         assertEquals("A.B.X.D.1", group.getMetricIdentifier("1", FILTER_C)).         // no caching should occur         assertEquals("A.X.C.D.1", group.getMetricIdentifier("1", FILTER_B)).         // invalid reporter indices do not throw errors         assertEquals("A.X.C.D.1", group.getMetricIdentifier("1", FILTER_B, -1)).         assertEquals("A.X.C.D.1", group.getMetricIdentifier("1", FILTER_B, 2)).     } finally {         testRegistry.shutdown().get().     } }
false;public;0;39;;@Test public void testGetAllVariablesDoesNotDeadlock() throws InterruptedException {     final TestMetricRegistry registry = new TestMetricRegistry().     final MetricGroup parent = new GenericMetricGroup(registry, UnregisteredMetricGroups.createUnregisteredTaskManagerMetricGroup(), "parent").     final MetricGroup child = parent.addGroup("child").     final Thread parentRegisteringThread = new Thread(() -> parent.counter("parent_counter")).     final Thread childRegisteringThread = new Thread(() -> child.counter("child_counter")).     final BlockerSync parentSync = new BlockerSync().     final BlockerSync childSync = new BlockerSync().     try {         // start both threads and have them block in the registry, so they acquire the lock of their respective group         registry.setOnRegistrationAction(childSync::blockNonInterruptible).         childRegisteringThread.start().         childSync.awaitBlocker().         registry.setOnRegistrationAction(parentSync::blockNonInterruptible).         parentRegisteringThread.start().         parentSync.awaitBlocker().         // the parent thread remains blocked to simulate the child thread holding some lock in the registry/reporter         // the child thread continues execution and calls getAllVariables()         // in the past this would block indefinitely since the method acquires the locks of all parent groups         childSync.releaseBlocker().         // wait with a timeout to ensure the finally block is executed _at some point_, un-blocking the parent         childRegisteringThread.join(1000 * 10).         parentSync.releaseBlocker().         parentRegisteringThread.join().     } finally {         parentSync.releaseBlocker().         childSync.releaseBlocker().         parentRegisteringThread.join().         childRegisteringThread.join().     } }
false;;1;3;;void setOnRegistrationAction(Runnable onRegistrationAction) {     this.onRegistrationAction = onRegistrationAction. }
false;public;0;4;;@Override public char getDelimiter() {     return 0. }
false;public;1;4;;@Override public char getDelimiter(int index) {     return 0. }
false;public;0;4;;@Override public int getNumberReporters() {     return 0. }
false;public;3;5;;@Override public void register(Metric metric, String metricName, AbstractMetricGroup group) {     onRegistrationAction.run().     group.getAllVariables(). }
false;public;3;3;;@Override public void unregister(Metric metric, String metricName, AbstractMetricGroup group) { }
false;public;0;4;;@Override public ScopeFormats getScopeFormats() {     return null. }
false;public;0;5;;@Nullable @Override public String getMetricQueryServicePath() {     return null. }
