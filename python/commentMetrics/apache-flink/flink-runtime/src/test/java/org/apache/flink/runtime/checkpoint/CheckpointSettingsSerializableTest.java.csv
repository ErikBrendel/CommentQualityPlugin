commented;modifiers;parameterAmount;loc;comment;code
false;public;0;51;;@Test public void testDeserializationOfUserCodeWithUserClassLoader() throws Exception {     final ClassLoader classLoader = new URLClassLoader(new URL[0], getClass().getClassLoader()).     final Serializable outOfClassPath = CommonTestUtils.createObjectForClassNotInClassPath(classLoader).     final MasterTriggerRestoreHook.Factory[] hooks = { new TestFactory(outOfClassPath) }.     final SerializedValue<MasterTriggerRestoreHook.Factory[]> serHooks = new SerializedValue<>(hooks).     final JobCheckpointingSettings checkpointingSettings = new JobCheckpointingSettings(Collections.<JobVertexID>emptyList(), Collections.<JobVertexID>emptyList(), Collections.<JobVertexID>emptyList(), new CheckpointCoordinatorConfiguration(1000L, 10000L, 0L, 1, CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION, true), new SerializedValue<StateBackend>(new CustomStateBackend(outOfClassPath)), serHooks).     final JobGraph jobGraph = new JobGraph(new JobID(), "test job").     jobGraph.setSnapshotSettings(checkpointingSettings).     // to serialize/deserialize the job graph to see if the behavior is correct under     // distributed execution     final JobGraph copy = CommonTestUtils.createCopySerializable(jobGraph).     final Time timeout = Time.seconds(10L).     final ExecutionGraph eg = ExecutionGraphBuilder.buildGraph(null, copy, new Configuration(), TestingUtils.defaultExecutor(), TestingUtils.defaultExecutor(), mock(SlotProvider.class), classLoader, new StandaloneCheckpointRecoveryFactory(), timeout, new NoRestartStrategy(), new UnregisteredMetricsGroup(), 10, VoidBlobWriter.getInstance(), timeout, log).     assertEquals(1, eg.getCheckpointCoordinator().getNumberOfRegisteredMasterHooks()).     assertTrue(jobGraph.getCheckpointingSettings().getDefaultStateBackend().deserializeValue(classLoader) instanceof CustomStateBackend). }
false;public;0;7;;@SuppressWarnings("unchecked") @Override public <V> MasterTriggerRestoreHook<V> create() {     MasterTriggerRestoreHook<V> hook = mock(MasterTriggerRestoreHook.class).     when(hook.getIdentifier()).thenReturn("id").     return hook. }
false;public;1;4;;@Override public CompletedCheckpointStorageLocation resolveCheckpoint(String pointer) throws IOException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException {     return mock(CheckpointStorage.class). }
false;public;10;14;;@Override public <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(Environment env, JobID jobID, String operatorIdentifier, TypeSerializer<K> keySerializer, int numberOfKeyGroups, KeyGroupRange keyGroupRange, TaskKvStateRegistry kvStateRegistry, TtlTimeProvider ttlTimeProvider, MetricGroup metricGroup, Collection<KeyedStateHandle> stateHandles) throws Exception {     throw new UnsupportedOperationException(). }
false;public;2;5;;@Override public OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception {     throw new UnsupportedOperationException(). }
