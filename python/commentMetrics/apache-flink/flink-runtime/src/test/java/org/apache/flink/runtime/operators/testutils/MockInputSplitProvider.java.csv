commented;modifiers;parameterAmount;loc;comment;code
true;public;2;26;/**  * Generates a set of input splits from an input path  *  * @param path  *        the path of the local file to generate the input splits from  * @param noSplits  *        the number of input splits to be generated from the given input file  */ ;/**  * Generates a set of input splits from an input path  *  * @param path  *        the path of the local file to generate the input splits from  * @param noSplits  *        the number of input splits to be generated from the given input file  */ public void addInputSplits(final String path, final int noSplits) {     final InputSplit[] tmp = new InputSplit[noSplits].     final String[] hosts = { "localhost" }.     final String localPath.     try {         localPath = new URI(path).getPath().     } catch (URISyntaxException e) {         throw new IllegalArgumentException("Path URI can not be transformed to local path.").     }     final File inFile = new File(localPath).     final long splitLength = inFile.length() / noSplits.     long pos = 0.     for (int i = 0. i < noSplits - 1. i++) {         tmp[i] = new FileInputSplit(i, new Path(path), pos, splitLength, hosts).         pos += splitLength.     }     tmp[noSplits - 1] = new FileInputSplit(noSplits - 1, new Path(path), pos, inFile.length() - pos, hosts).     this.inputSplits = tmp. }
false;public;1;9;;@Override public InputSplit getNextInputSplit(ClassLoader userCodeClassLoader) {     if (this.nextSplit < this.inputSplits.length) {         return this.inputSplits[this.nextSplit++].     }     return null. }
