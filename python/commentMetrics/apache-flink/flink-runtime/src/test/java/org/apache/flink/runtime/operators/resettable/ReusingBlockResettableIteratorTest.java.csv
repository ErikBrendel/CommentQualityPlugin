commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before public void startup() {     // set up IO and memory manager     this.memman = new MemoryManager(MEMORY_CAPACITY, 1).     // create test objects     this.objects = new ArrayList<Record>(20000).     for (int i = 0. i < NUM_VALUES. ++i) {         this.objects.add(new Record(new IntValue(i))).     }     // create the reader     this.reader = objects.iterator(). }
false;public;0;12;;@After public void shutdown() {     this.objects = null.     // check that the memory manager got all segments back     if (!this.memman.verifyEmpty()) {         Assert.fail("A memory leak has occurred: Not all memory was properly returned to the memory manager.").     }     this.memman.shutdown().     this.memman = null. }
false;public;0;38;;@Test public void testSerialBlockResettableIterator() throws Exception {     final AbstractInvokable memOwner = new DummyInvokable().     // create the resettable Iterator     final ReusingBlockResettableIterator<Record> iterator = new ReusingBlockResettableIterator<Record>(this.memman, this.reader, this.serializer, 1, memOwner).     // open the iterator     iterator.open().     // now test walking through the iterator     int lower = 0.     int upper = 0.     do {         lower = upper.         upper = lower.         // find the upper bound         while (iterator.hasNext()) {             Record target = iterator.next().             int val = target.getField(0, IntValue.class).getValue().             Assert.assertEquals(upper++, val).         }         // now reset the buffer a few times         for (int i = 0. i < 5. ++i) {             iterator.reset().             int count = 0.             while (iterator.hasNext()) {                 Record target = iterator.next().                 int val = target.getField(0, IntValue.class).getValue().                 Assert.assertEquals(lower + (count++), val).             }             Assert.assertEquals(upper - lower, count).         }     } while (iterator.nextBlock()).     Assert.assertEquals(NUM_VALUES, upper).     // close the iterator     iterator.close(). }
false;public;0;39;;@Test public void testDoubleBufferedBlockResettableIterator() throws Exception {     final AbstractInvokable memOwner = new DummyInvokable().     // create the resettable Iterator     final ReusingBlockResettableIterator<Record> iterator = new ReusingBlockResettableIterator<Record>(this.memman, this.reader, this.serializer, 2, memOwner).     // open the iterator     iterator.open().     // now test walking through the iterator     int lower = 0.     int upper = 0.     do {         lower = upper.         upper = lower.         // find the upper bound         while (iterator.hasNext()) {             Record target = iterator.next().             int val = target.getField(0, IntValue.class).getValue().             Assert.assertEquals(upper++, val).         }         // now reset the buffer a few times         for (int i = 0. i < 5. ++i) {             iterator.reset().             int count = 0.             while (iterator.hasNext()) {                 Record target = iterator.next().                 int val = target.getField(0, IntValue.class).getValue().                 Assert.assertEquals(lower + (count++), val).             }             Assert.assertEquals(upper - lower, count).         }     } while (iterator.nextBlock()).     Assert.assertEquals(NUM_VALUES, upper).     // close the iterator     iterator.close(). }
false;public;0;39;;@Test public void testTwelveFoldBufferedBlockResettableIterator() throws Exception {     final AbstractInvokable memOwner = new DummyInvokable().     // create the resettable Iterator     final ReusingBlockResettableIterator<Record> iterator = new ReusingBlockResettableIterator<Record>(this.memman, this.reader, this.serializer, 12, memOwner).     // open the iterator     iterator.open().     // now test walking through the iterator     int lower = 0.     int upper = 0.     do {         lower = upper.         upper = lower.         // find the upper bound         while (iterator.hasNext()) {             Record target = iterator.next().             int val = target.getField(0, IntValue.class).getValue().             Assert.assertEquals(upper++, val).         }         // now reset the buffer a few times         for (int i = 0. i < 5. ++i) {             iterator.reset().             int count = 0.             while (iterator.hasNext()) {                 Record target = iterator.next().                 int val = target.getField(0, IntValue.class).getValue().                 Assert.assertEquals(lower + (count++), val).             }             Assert.assertEquals(upper - lower, count).         }     } while (iterator.nextBlock()).     Assert.assertEquals(NUM_VALUES, upper).     // close the iterator     iterator.close(). }
