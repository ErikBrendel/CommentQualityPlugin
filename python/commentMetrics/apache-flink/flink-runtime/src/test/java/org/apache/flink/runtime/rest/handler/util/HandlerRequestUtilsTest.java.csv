commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testGetQueryParameter() throws Exception {     final Boolean queryParameter = HandlerRequestUtils.getQueryParameter(new HandlerRequest<>(EmptyRequestBody.getInstance(), new TestMessageParameters(), Collections.emptyMap(), Collections.singletonMap("key", Collections.singletonList("true"))), TestBooleanQueryParameter.class).     assertThat(queryParameter, equalTo(true)). }
false;public;0;14;;@Test public void testGetQueryParameterRepeated() throws Exception {     try {         HandlerRequestUtils.getQueryParameter(new HandlerRequest<>(EmptyRequestBody.getInstance(), new TestMessageParameters(), Collections.emptyMap(), Collections.singletonMap("key", Arrays.asList("true", "false"))), TestBooleanQueryParameter.class).     } catch (final RestHandlerException e) {         assertThat(e.getMessage(), containsString("Expected only one value")).     } }
false;public;0;11;;@Test public void testGetQueryParameterDefaultValue() throws Exception {     final Boolean allowNonRestoredState = HandlerRequestUtils.getQueryParameter(new HandlerRequest<>(EmptyRequestBody.getInstance(), new TestMessageParameters(), Collections.emptyMap(), Collections.singletonMap("key", Collections.emptyList())), TestBooleanQueryParameter.class, true).     assertThat(allowNonRestoredState, equalTo(true)). }
false;public;0;4;;@Override public Collection<MessagePathParameter<?>> getPathParameters() {     return Collections.emptyList(). }
false;public;0;5;;@Override public Collection<MessageQueryParameter<?>> getQueryParameters() {     testBooleanQueryParameter = new TestBooleanQueryParameter().     return Collections.singletonList(testBooleanQueryParameter). }
false;public;1;4;;@Override public Boolean convertStringToValue(final String value) {     return Boolean.parseBoolean(value). }
false;public;1;4;;@Override public String convertValueToString(final Boolean value) {     return value.toString(). }
false;public;0;4;;@Override public String getDescription() {     return "boolean query parameter". }
