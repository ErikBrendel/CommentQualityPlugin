# id;timestamp;commentText;codeText;commentWords;codeWords
BlobCacheRetriesTest -> @Test 	public void testBlobFetchWithTooManyFailuresHa() throws IOException;1495001929;A test where the connection fails twice and then the get operation succeeds_(with high availability set).;@Test_	public void testBlobFetchWithTooManyFailuresHa() throws IOException {_		final Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.getRoot().getPath())___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(config)___			testBlobFetchWithTooManyFailures(config, blobStoreService)__		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set;test,public,void,test,blob,fetch,with,too,many,failures,ha,throws,ioexception,final,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,get,root,get,path,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,config,test,blob,fetch,with,too,many,failures,config,blob,store,service,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheRetriesTest -> @Test 	public void testBlobFetchWithTooManyFailuresHa() throws IOException;1502100084;A test where the connection fails twice and then the get operation succeeds_(with high availability set).;@Test_	public void testBlobFetchWithTooManyFailuresHa() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.getRoot().getPath())___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(config)___			testBlobFetchWithTooManyFailures(config, blobStoreService)__		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set;test,public,void,test,blob,fetch,with,too,many,failures,ha,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,get,root,get,path,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,config,test,blob,fetch,with,too,many,failures,config,blob,store,service,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheRetriesTest -> @Test 	public void testBlobFetchWithTooManyFailuresHa() throws IOException;1502692653;A test where the connection fails twice and then the get operation succeeds_(with high availability set).;@Test_	public void testBlobFetchWithTooManyFailuresHa() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.getRoot().getPath())___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(config)___			testBlobFetchWithTooManyFailures(config, blobStoreService)__		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set;test,public,void,test,blob,fetch,with,too,many,failures,ha,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,get,root,get,path,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,config,test,blob,fetch,with,too,many,failures,config,blob,store,service,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchWithTooManyFailuresHa() throws IOException;1502701584;A test where the connection fails twice and then the get operation succeeds_(with high availability set, job-related blob).;@Test_	public void testBlobForJobFetchWithTooManyFailuresHa() throws IOException {_		testBlobFetchWithTooManyFailuresHa(new JobID())__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set,job,related,blob;test,public,void,test,blob,for,job,fetch,with,too,many,failures,ha,throws,ioexception,test,blob,fetch,with,too,many,failures,ha,new,job,id
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchWithTooManyFailuresHa() throws IOException;1503041372;A test where the connection fails twice and then the get operation succeeds_(with high availability set, job-related blob).;@Test_	public void testBlobForJobFetchWithTooManyFailuresHa() throws IOException {_		testBlobFetchWithTooManyFailuresHa(new JobID())__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set,job,related,blob;test,public,void,test,blob,for,job,fetch,with,too,many,failures,ha,throws,ioexception,test,blob,fetch,with,too,many,failures,ha,new,job,id
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchWithTooManyFailuresHa() throws IOException;1507212387;A test where the connection fails too often and eventually fails the GET request_(with high availability set, job-related blob).;@Test_	public void testBlobForJobFetchWithTooManyFailuresHa() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.getRoot().getPath())___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(config)___			testBlobFetchWithTooManyFailures(config, blobStoreService, new JobID(), true)__		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,with,high,availability,set,job,related,blob;test,public,void,test,blob,for,job,fetch,with,too,many,failures,ha,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,get,root,get,path,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,config,test,blob,fetch,with,too,many,failures,config,blob,store,service,new,job,id,true,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchWithTooManyFailuresHa() throws IOException;1507212387;A test where the connection fails too often and eventually fails the GET request_(with high availability set, job-related blob).;@Test_	public void testBlobForJobFetchWithTooManyFailuresHa() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.getRoot().getPath())___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(config)___			testBlobFetchWithTooManyFailures(config, blobStoreService, new JobID(), PERMANENT_BLOB)__		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,with,high,availability,set,job,related,blob;test,public,void,test,blob,for,job,fetch,with,too,many,failures,ha,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,get,root,get,path,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,config,test,blob,fetch,with,too,many,failures,config,blob,store,service,new,job,id,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchWithTooManyFailuresHa() throws IOException;1517915730;A test where the connection fails too often and eventually fails the GET request_(with high availability set, job-related blob).;@Test_	public void testBlobForJobFetchWithTooManyFailuresHa() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.getRoot().getPath())___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(config)___			testBlobFetchWithTooManyFailures(config, blobStoreService, new JobID(), PERMANENT_BLOB)__		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,with,high,availability,set,job,related,blob;test,public,void,test,blob,for,job,fetch,with,too,many,failures,ha,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,get,root,get,path,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,config,test,blob,fetch,with,too,many,failures,config,blob,store,service,new,job,id,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheRetriesTest -> @Test 	public void testBlobFetchWithTooManyFailures();1424264340;A test where the connection fails too often and eventually fails the GET request.;@Test_	public void testBlobFetchWithTooManyFailures() {__		final byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }___		BlobServer server = null__		BlobCache cache = null__		try {_			final Configuration config = new Configuration()___			server = new TestingFailingBlobServer(config, 10)___			final InetSocketAddress serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress)___				key = blobClient.put(data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config)___			_			try {_				cache.getURL(key)__				fail("This should fail")__			}_			catch (IOException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (cache != null) {_				cache.shutdown()__			}_			if (server != null) {_				server.shutdown()__			}_		}_	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request;test,public,void,test,blob,fetch,with,too,many,failures,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,final,configuration,config,new,configuration,server,new,testing,failing,blob,server,config,10,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,key,blob,client,put,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,try,cache,get,url,key,fail,this,should,fail,catch,ioexception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,cache,null,cache,shutdown,if,server,null,server,shutdown
BlobCacheRetriesTest -> @Test 	public void testBlobFetchWithTooManyFailures();1476696544;A test where the connection fails too often and eventually fails the GET request.;@Test_	public void testBlobFetchWithTooManyFailures() {__		final byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }___		BlobServer server = null__		BlobCache cache = null__		try {_			final Configuration config = new Configuration()___			server = new TestingFailingBlobServer(config, 10)___			final InetSocketAddress serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress, config)___				key = blobClient.put(data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config)___			_			try {_				cache.getURL(key)__				fail("This should fail")__			}_			catch (IOException e) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (cache != null) {_				cache.shutdown()__			}_			if (server != null) {_				server.shutdown()__			}_		}_	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request;test,public,void,test,blob,fetch,with,too,many,failures,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,final,configuration,config,new,configuration,server,new,testing,failing,blob,server,config,10,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,config,key,blob,client,put,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,try,cache,get,url,key,fail,this,should,fail,catch,ioexception,e,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,cache,null,cache,shutdown,if,server,null,server,shutdown
BlobCacheRetriesTest -> @Test 	public void testBlobFetchWithTooManyFailures();1487441974;A test where the connection fails too often and eventually fails the GET request.;@Test_	public void testBlobFetchWithTooManyFailures() {_		final Configuration config = new Configuration()___		testBlobFetchWithTooManyFailures(config)__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request;test,public,void,test,blob,fetch,with,too,many,failures,final,configuration,config,new,configuration,test,blob,fetch,with,too,many,failures,config
BlobCacheRetriesTest -> private static void testBlobFetchWithTooManyFailures( 			final Configuration config, final BlobStore blobStore, @Nullable final JobID jobId, 			BlobKey.BlobType blobType) throws IOException;1507212387;A test where the BlobCache must use the BlobServer and the connection_fails too often which eventually fails the GET request.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one)_@param blobType_whether the BLOB should become permanent or transient;private static void testBlobFetchWithTooManyFailures(_			final Configuration config, final BlobStore blobStore, @Nullable final JobID jobId,_			BlobKey.BlobType blobType) throws IOException {__		final byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }___		try (_			BlobServer server = new TestingFailingBlobServer(config, blobStore, 0, 10)__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			_			final BlobKey key = put(server, jobId, data, blobType)___			_			try {_				verifyContents(cache, jobId, key, data)__				fail("This should fail")__			}_			catch (IOException e) {_				_			}_		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,too,often,which,eventually,fails,the,get,request,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,static,void,test,blob,fetch,with,too,many,failures,final,configuration,config,final,blob,store,blob,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,try,blob,server,server,new,testing,failing,blob,server,config,blob,store,0,10,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,final,blob,key,key,put,server,job,id,data,blob,type,try,verify,contents,cache,job,id,key,data,fail,this,should,fail,catch,ioexception,e
BlobCacheRetriesTest -> private static void testBlobFetchWithTooManyFailures( 			final Configuration config, final BlobStore blobStore, @Nullable final JobID jobId, 			BlobKey.BlobType blobType) throws IOException;1517915730;A test where the BlobCache must use the BlobServer and the connection_fails too often which eventually fails the GET request.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one)_@param blobType_whether the BLOB should become permanent or transient;private static void testBlobFetchWithTooManyFailures(_			final Configuration config, final BlobStore blobStore, @Nullable final JobID jobId,_			BlobKey.BlobType blobType) throws IOException {__		final byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }___		try (_			BlobServer server = new TestingFailingBlobServer(config, blobStore, 0, 10)__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			_			final BlobKey key = put(server, jobId, data, blobType)___			_			try {_				verifyContents(cache, jobId, key, data)__				fail("This should fail")__			}_			catch (IOException e) {_				_			}_		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,too,often,which,eventually,fails,the,get,request,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,static,void,test,blob,fetch,with,too,many,failures,final,configuration,config,final,blob,store,blob,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,try,blob,server,server,new,testing,failing,blob,server,config,blob,store,0,10,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,final,blob,key,key,put,server,job,id,data,blob,type,try,verify,contents,cache,job,id,key,data,fail,this,should,fail,catch,ioexception,e
BlobCacheRetriesTest -> private static void testBlobFetchRetries( 			final Configuration config, final BlobStore blobStore, @Nullable final JobID jobId, 			BlobKey.BlobType blobType) throws IOException;1507212387;A test where the BlobCache must use the BlobServer and the connection_fails twice and then the get operation succeeds.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one)_@param blobType_whether the BLOB should become permanent or transient;private static void testBlobFetchRetries(_			final Configuration config, final BlobStore blobStore, @Nullable final JobID jobId,_			BlobKey.BlobType blobType) throws IOException {__		final byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}___		try (_			BlobServer server = new TestingFailingBlobServer(config, blobStore, 2)__			BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_				config, new VoidBlobStore())) {__			server.start()___			_			final BlobKey key = put(server, jobId, data, blobType)___			_			verifyContents(cache, jobId, key, data)__		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,twice,and,then,the,get,operation,succeeds,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,static,void,test,blob,fetch,retries,final,configuration,config,final,blob,store,blob,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,try,blob,server,server,new,testing,failing,blob,server,config,blob,store,2,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,config,new,void,blob,store,server,start,final,blob,key,key,put,server,job,id,data,blob,type,verify,contents,cache,job,id,key,data
BlobCacheRetriesTest -> private static void testBlobFetchRetries( 			final Configuration config, final BlobStore blobStore, @Nullable final JobID jobId, 			BlobKey.BlobType blobType) throws IOException;1517915730;A test where the BlobCache must use the BlobServer and the connection_fails twice and then the get operation succeeds.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one)_@param blobType_whether the BLOB should become permanent or transient;private static void testBlobFetchRetries(_			final Configuration config, final BlobStore blobStore, @Nullable final JobID jobId,_			BlobKey.BlobType blobType) throws IOException {__		final byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}___		try (_			BlobServer server = new TestingFailingBlobServer(config, blobStore, 2)__			BlobCacheService cache = new BlobCacheService(config, new VoidBlobStore(), new InetSocketAddress("localhost", server.getPort())_			)) {__			server.start()___			_			final BlobKey key = put(server, jobId, data, blobType)___			_			verifyContents(cache, jobId, key, data)__		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,twice,and,then,the,get,operation,succeeds,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,static,void,test,blob,fetch,retries,final,configuration,config,final,blob,store,blob,store,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,try,blob,server,server,new,testing,failing,blob,server,config,blob,store,2,blob,cache,service,cache,new,blob,cache,service,config,new,void,blob,store,new,inet,socket,address,localhost,server,get,port,server,start,final,blob,key,key,put,server,job,id,data,blob,type,verify,contents,cache,job,id,key,data
BlobCacheRetriesTest -> @Test 	public void testBlobNoJobFetchRetriesHa() throws IOException;1502701584;A test where the connection fails twice and then the get operation succeeds_(with high availability set, job-unrelated blob).;@Test_	public void testBlobNoJobFetchRetriesHa() throws IOException {_		testBlobFetchRetriesHa(null)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set,job,unrelated,blob;test,public,void,test,blob,no,job,fetch,retries,ha,throws,ioexception,test,blob,fetch,retries,ha,null
BlobCacheRetriesTest -> @Test 	public void testBlobNoJobFetchRetriesHa() throws IOException;1503041372;A test where the connection fails twice and then the get operation succeeds_(with high availability set, job-unrelated blob).;@Test_	public void testBlobNoJobFetchRetriesHa() throws IOException {_		testBlobFetchRetriesHa(null)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set,job,unrelated,blob;test,public,void,test,blob,no,job,fetch,retries,ha,throws,ioexception,test,blob,fetch,retries,ha,null
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetries();1424264340;A test where the connection fails twice and then the get operation succeeds.;@Test_	public void testBlobFetchRetries() {__		final byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}___		BlobServer server = null__		BlobCache cache = null__		try {_			final Configuration config = new Configuration()___			server = new TestingFailingBlobServer(config, 2)___			final InetSocketAddress serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress)___				key = blobClient.put(data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config)___			_			URL url = cache.getURL(key)__			InputStream is = url.openStream()__			try {_				byte[] received = new byte[data.length]__				assertEquals(data.length, is.read(received))__				assertArrayEquals(data, received)__			}_			finally {_				is.close()__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (cache != null) {_				cache.shutdown()__			}_			if (server != null) {_				server.shutdown()__			}_		}_	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds;test,public,void,test,blob,fetch,retries,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,final,configuration,config,new,configuration,server,new,testing,failing,blob,server,config,2,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,key,blob,client,put,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,url,url,cache,get,url,key,input,stream,is,url,open,stream,try,byte,received,new,byte,data,length,assert,equals,data,length,is,read,received,assert,array,equals,data,received,finally,is,close,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,cache,null,cache,shutdown,if,server,null,server,shutdown
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetries();1476696544;A test where the connection fails twice and then the get operation succeeds.;@Test_	public void testBlobFetchRetries() {__		final byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}___		BlobServer server = null__		BlobCache cache = null__		try {_			final Configuration config = new Configuration()___			server = new TestingFailingBlobServer(config, 2)___			final InetSocketAddress serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress, config)___				key = blobClient.put(data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config)___			_			URL url = cache.getURL(key)__			InputStream is = url.openStream()__			try {_				byte[] received = new byte[data.length]__				assertEquals(data.length, is.read(received))__				assertArrayEquals(data, received)__			}_			finally {_				is.close()__			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (cache != null) {_				cache.shutdown()__			}_			if (server != null) {_				server.shutdown()__			}_		}_	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds;test,public,void,test,blob,fetch,retries,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,final,configuration,config,new,configuration,server,new,testing,failing,blob,server,config,2,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,config,key,blob,client,put,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,url,url,cache,get,url,key,input,stream,is,url,open,stream,try,byte,received,new,byte,data,length,assert,equals,data,length,is,read,received,assert,array,equals,data,received,finally,is,close,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,cache,null,cache,shutdown,if,server,null,server,shutdown
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetries();1487441974;A test where the connection fails twice and then the get operation succeeds.;@Test_	public void testBlobFetchRetries() {_		final Configuration config = new Configuration()___		testBlobFetchRetries(config)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds;test,public,void,test,blob,fetch,retries,final,configuration,config,new,configuration,test,blob,fetch,retries,config
BlobCacheRetriesTest -> private static void testBlobFetchWithTooManyFailures( 		final Configuration config, final BlobStore blobStore, final JobID jobId) 			throws IOException;1502701584;A test where the BlobCache must use the BlobServer and the connection_fails too often which eventually fails the GET request.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one);private static void testBlobFetchWithTooManyFailures(_		final Configuration config, final BlobStore blobStore, final JobID jobId)_			throws IOException {_		final byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }___		BlobServer server = null__		BlobCache cache = null__		try {__			server = new TestingFailingBlobServer(config, blobStore, 10)___			final InetSocketAddress_				serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress, config)___				key = blobClient.put(jobId, data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config, new VoidBlobStore())___			_			try {_				if (jobId == null) {_					cache.getFile(key)__				} else {_					cache.getFile(jobId, key)__				}_				fail("This should fail")__			}_			catch (IOException e) {_				_			}_		}_		finally {_			if (cache != null) {_				cache.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,too,often,which,eventually,fails,the,get,request,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one;private,static,void,test,blob,fetch,with,too,many,failures,final,configuration,config,final,blob,store,blob,store,final,job,id,job,id,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,server,new,testing,failing,blob,server,config,blob,store,10,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,config,key,blob,client,put,job,id,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,new,void,blob,store,try,if,job,id,null,cache,get,file,key,else,cache,get,file,job,id,key,fail,this,should,fail,catch,ioexception,e,finally,if,cache,null,cache,close,if,server,null,server,close
BlobCacheRetriesTest -> private static void testBlobFetchWithTooManyFailures( 		final Configuration config, final BlobStore blobStore, final JobID jobId) 			throws IOException;1503041372;A test where the BlobCache must use the BlobServer and the connection_fails too often which eventually fails the GET request.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one);private static void testBlobFetchWithTooManyFailures(_		final Configuration config, final BlobStore blobStore, final JobID jobId)_			throws IOException {_		final byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }___		BlobServer server = null__		BlobCache cache = null__		try {__			server = new TestingFailingBlobServer(config, blobStore, 10)___			final InetSocketAddress_				serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress, config)___				key = blobClient.put(jobId, data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config, new VoidBlobStore())___			_			try {_				if (jobId == null) {_					cache.getFile(key)__				} else {_					cache.getFile(jobId, key)__				}_				fail("This should fail")__			}_			catch (IOException e) {_				_			}_		}_		finally {_			if (cache != null) {_				cache.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,too,often,which,eventually,fails,the,get,request,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one;private,static,void,test,blob,fetch,with,too,many,failures,final,configuration,config,final,blob,store,blob,store,final,job,id,job,id,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,server,new,testing,failing,blob,server,config,blob,store,10,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,config,key,blob,client,put,job,id,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,new,void,blob,store,try,if,job,id,null,cache,get,file,key,else,cache,get,file,job,id,key,fail,this,should,fail,catch,ioexception,e,finally,if,cache,null,cache,close,if,server,null,server,close
BlobCacheRetriesTest -> private static void testBlobFetchRetries( 			final Configuration config, final BlobStore blobStore, final JobID jobId) 			throws IOException;1502701584;A test where the BlobCache must use the BlobServer and the connection_fails twice and then the get operation succeeds.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one);private static void testBlobFetchRetries(_			final Configuration config, final BlobStore blobStore, final JobID jobId)_			throws IOException {_		final byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}___		BlobServer server = null__		BlobCache cache = null__		try {__			server = new TestingFailingBlobServer(config, blobStore, 2)___			final InetSocketAddress_				serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress, config)___				key = blobClient.put(jobId, data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config, new VoidBlobStore())___			_			File file = jobId == null ? cache.getFile(key) : cache.getFile(jobId, key)__			URL url = file.toURI().toURL()__			try (InputStream is = url.openStream()) {_				byte[] received = new byte[data.length]__				assertEquals(data.length, is.read(received))__				assertArrayEquals(data, received)__			}_		} finally {_			if (cache != null) {_				cache.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,twice,and,then,the,get,operation,succeeds,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one;private,static,void,test,blob,fetch,retries,final,configuration,config,final,blob,store,blob,store,final,job,id,job,id,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,server,new,testing,failing,blob,server,config,blob,store,2,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,config,key,blob,client,put,job,id,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,new,void,blob,store,file,file,job,id,null,cache,get,file,key,cache,get,file,job,id,key,url,url,file,to,uri,to,url,try,input,stream,is,url,open,stream,byte,received,new,byte,data,length,assert,equals,data,length,is,read,received,assert,array,equals,data,received,finally,if,cache,null,cache,close,if,server,null,server,close
BlobCacheRetriesTest -> private static void testBlobFetchRetries( 			final Configuration config, final BlobStore blobStore, final JobID jobId) 			throws IOException;1503041372;A test where the BlobCache must use the BlobServer and the connection_fails twice and then the get operation succeeds.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one);private static void testBlobFetchRetries(_			final Configuration config, final BlobStore blobStore, final JobID jobId)_			throws IOException {_		final byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}___		BlobServer server = null__		BlobCache cache = null__		try {__			server = new TestingFailingBlobServer(config, blobStore, 2)___			final InetSocketAddress_				serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress, config)___				key = blobClient.put(jobId, data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config, new VoidBlobStore())___			_			File file = jobId == null ? cache.getFile(key) : cache.getFile(jobId, key)__			URL url = file.toURI().toURL()__			try (InputStream is = url.openStream()) {_				byte[] received = new byte[data.length]__				assertEquals(data.length, is.read(received))__				assertArrayEquals(data, received)__			}_		} finally {_			if (cache != null) {_				cache.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,twice,and,then,the,get,operation,succeeds,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one;private,static,void,test,blob,fetch,retries,final,configuration,config,final,blob,store,blob,store,final,job,id,job,id,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,server,new,testing,failing,blob,server,config,blob,store,2,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,config,key,blob,client,put,job,id,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,new,void,blob,store,file,file,job,id,null,cache,get,file,key,cache,get,file,job,id,key,url,url,file,to,uri,to,url,try,input,stream,is,url,open,stream,byte,received,new,byte,data,length,assert,equals,data,length,is,read,received,assert,array,equals,data,received,finally,if,cache,null,cache,close,if,server,null,server,close
BlobCacheRetriesTest -> @Test 	public void testBlobFetchWithTooManyFailures() throws IOException;1495001929;A test where the connection fails too often and eventually fails the GET request.;@Test_	public void testBlobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore())__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request;test,public,void,test,blob,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,test,blob,fetch,with,too,many,failures,config,new,void,blob,store
BlobCacheRetriesTest -> @Test 	public void testBlobFetchWithTooManyFailures() throws IOException;1502100084;A test where the connection fails too often and eventually fails the GET request.;@Test_	public void testBlobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore())__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request;test,public,void,test,blob,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,with,too,many,failures,config,new,void,blob,store
BlobCacheRetriesTest -> @Test 	public void testBlobFetchWithTooManyFailures() throws IOException;1502692653;A test where the connection fails too often and eventually fails the GET request.;@Test_	public void testBlobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore())__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request;test,public,void,test,blob,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,with,too,many,failures,config,new,void,blob,store
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchRetries() throws IOException;1502701584;A test where the connection fails twice and then the get operation succeeds_(job-related blob).;@Test_	public void testBlobForJobFetchRetries() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchRetries(config, new VoidBlobStore(), new JobID())__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,job,related,blob;test,public,void,test,blob,for,job,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,retries,config,new,void,blob,store,new,job,id
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchRetries() throws IOException;1503041372;A test where the connection fails twice and then the get operation succeeds_(job-related blob).;@Test_	public void testBlobForJobFetchRetries() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchRetries(config, new VoidBlobStore(), new JobID())__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,job,related,blob;test,public,void,test,blob,for,job,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,retries,config,new,void,blob,store,new,job,id
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchRetries() throws IOException;1507212387;A test where the connection fails twice and then the get operation succeeds_(job-related blob).;@Test_	public void testBlobForJobFetchRetries() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchRetries(config, new VoidBlobStore(), new JobID(), false)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,job,related,blob;test,public,void,test,blob,for,job,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,retries,config,new,void,blob,store,new,job,id,false
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchRetries() throws IOException;1507212387;A test where the connection fails twice and then the get operation succeeds_(job-related blob).;@Test_	public void testBlobForJobFetchRetries() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchRetries(config, new VoidBlobStore(), new JobID(), TRANSIENT_BLOB)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,job,related,blob;test,public,void,test,blob,for,job,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,retries,config,new,void,blob,store,new,job,id
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchRetries() throws IOException;1517915730;A test where the connection fails twice and then the get operation succeeds_(job-related blob).;@Test_	public void testBlobForJobFetchRetries() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchRetries(config, new VoidBlobStore(), new JobID(), TRANSIENT_BLOB)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,job,related,blob;test,public,void,test,blob,for,job,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,retries,config,new,void,blob,store,new,job,id
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetriesHa() throws IOException;1495001929;A test where the connection fails twice and then the get operation succeeds_(with high availability set).;@Test_	public void testBlobFetchRetriesHa() throws IOException {_		final Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.getRoot().getPath())___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(config)___			testBlobFetchRetries(config, blobStoreService)__		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set;test,public,void,test,blob,fetch,retries,ha,throws,ioexception,final,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,get,root,get,path,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,config,test,blob,fetch,retries,config,blob,store,service,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetriesHa() throws IOException;1502100084;A test where the connection fails twice and then the get operation succeeds_(with high availability set).;@Test_	public void testBlobFetchRetriesHa() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(config)___			testBlobFetchRetries(config, blobStoreService)__		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set;test,public,void,test,blob,fetch,retries,ha,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,config,test,blob,fetch,retries,config,blob,store,service,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetriesHa() throws IOException;1502692653;A test where the connection fails twice and then the get operation succeeds_(with high availability set).;@Test_	public void testBlobFetchRetriesHa() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(config)___			testBlobFetchRetries(config, blobStoreService)__		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set;test,public,void,test,blob,fetch,retries,ha,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,config,test,blob,fetch,retries,config,blob,store,service,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetriesHa() throws IOException;1502701584;A test where the connection fails twice and then the get operation succeeds_(with high availability set, job-related job).;@Test_	public void testBlobFetchRetriesHa() throws IOException {_		testBlobFetchRetriesHa(new JobID())__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set,job,related,job;test,public,void,test,blob,fetch,retries,ha,throws,ioexception,test,blob,fetch,retries,ha,new,job,id
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetriesHa() throws IOException;1503041372;A test where the connection fails twice and then the get operation succeeds_(with high availability set, job-related job).;@Test_	public void testBlobFetchRetriesHa() throws IOException {_		testBlobFetchRetriesHa(new JobID())__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set,job,related,job;test,public,void,test,blob,fetch,retries,ha,throws,ioexception,test,blob,fetch,retries,ha,new,job,id
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetriesHa() throws IOException;1507212387;A test where the connection fails twice and then the get operation succeeds_(with high availability set, job-related job).;@Test_	public void testBlobFetchRetriesHa() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(config)___			testBlobFetchRetries(config, blobStoreService, new JobID(), true)__		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set,job,related,job;test,public,void,test,blob,fetch,retries,ha,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,config,test,blob,fetch,retries,config,blob,store,service,new,job,id,true,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetriesHa() throws IOException;1507212387;A test where the connection fails twice and then the get operation succeeds_(with high availability set, job-related job).;@Test_	public void testBlobFetchRetriesHa() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(config)___			testBlobFetchRetries(config, blobStoreService, new JobID(), PERMANENT_BLOB)__		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set,job,related,job;test,public,void,test,blob,fetch,retries,ha,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,config,test,blob,fetch,retries,config,blob,store,service,new,job,id,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetriesHa() throws IOException;1517915730;A test where the connection fails twice and then the get operation succeeds_(with high availability set, job-related job).;@Test_	public void testBlobFetchRetriesHa() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(config)___			testBlobFetchRetries(config, blobStoreService, new JobID(), PERMANENT_BLOB)__		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set,job,related,job;test,public,void,test,blob,fetch,retries,ha,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,config,test,blob,fetch,retries,config,blob,store,service,new,job,id,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheRetriesTest -> private void testBlobFetchRetries(final Configuration config, final BlobStore blobStore) throws IOException;1495001929;A test where the BlobCache must use the BlobServer and the connection_fails twice and then the get operation succeeds.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one);private void testBlobFetchRetries(final Configuration config, final BlobStore blobStore) throws IOException {_		final byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}___		BlobServer server = null__		BlobCache cache = null__		try {__			server = new TestingFailingBlobServer(config, blobStore, 2)___			final InetSocketAddress_				serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress, config)___				key = blobClient.put(data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config, new VoidBlobStore())___			_			URL url = cache.getURL(key)__			InputStream is = url.openStream()__			try {_				byte[] received = new byte[data.length]__				assertEquals(data.length, is.read(received))__				assertArrayEquals(data, received)__			}_			finally {_				is.close()__			}_		} finally {_			if (cache != null) {_				cache.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,twice,and,then,the,get,operation,succeeds,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one;private,void,test,blob,fetch,retries,final,configuration,config,final,blob,store,blob,store,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,server,new,testing,failing,blob,server,config,blob,store,2,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,config,key,blob,client,put,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,new,void,blob,store,url,url,cache,get,url,key,input,stream,is,url,open,stream,try,byte,received,new,byte,data,length,assert,equals,data,length,is,read,received,assert,array,equals,data,received,finally,is,close,finally,if,cache,null,cache,close,if,server,null,server,close
BlobCacheRetriesTest -> private void testBlobFetchRetries(final Configuration config, final BlobStore blobStore) throws IOException;1502100084;A test where the BlobCache must use the BlobServer and the connection_fails twice and then the get operation succeeds.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one);private void testBlobFetchRetries(final Configuration config, final BlobStore blobStore) throws IOException {_		final byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}___		BlobServer server = null__		BlobCache cache = null__		try {__			server = new TestingFailingBlobServer(config, blobStore, 2)___			final InetSocketAddress_				serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress, config)___				key = blobClient.put(data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config, new VoidBlobStore())___			_			URL url = cache.getURL(key)__			InputStream is = url.openStream()__			try {_				byte[] received = new byte[data.length]__				assertEquals(data.length, is.read(received))__				assertArrayEquals(data, received)__			}_			finally {_				is.close()__			}_		} finally {_			if (cache != null) {_				cache.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,twice,and,then,the,get,operation,succeeds,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one;private,void,test,blob,fetch,retries,final,configuration,config,final,blob,store,blob,store,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,server,new,testing,failing,blob,server,config,blob,store,2,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,config,key,blob,client,put,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,new,void,blob,store,url,url,cache,get,url,key,input,stream,is,url,open,stream,try,byte,received,new,byte,data,length,assert,equals,data,length,is,read,received,assert,array,equals,data,received,finally,is,close,finally,if,cache,null,cache,close,if,server,null,server,close
BlobCacheRetriesTest -> private void testBlobFetchRetries(final Configuration config, final BlobStore blobStore) throws IOException;1502692653;A test where the BlobCache must use the BlobServer and the connection_fails twice and then the get operation succeeds.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one);private void testBlobFetchRetries(final Configuration config, final BlobStore blobStore) throws IOException {_		final byte[] data = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}___		BlobServer server = null__		BlobCache cache = null__		try {__			server = new TestingFailingBlobServer(config, blobStore, 2)___			final InetSocketAddress_				serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress, config)___				key = blobClient.put(data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config, new VoidBlobStore())___			_			URL url = cache.getFile(key).toURI().toURL()__			InputStream is = url.openStream()__			try {_				byte[] received = new byte[data.length]__				assertEquals(data.length, is.read(received))__				assertArrayEquals(data, received)__			}_			finally {_				is.close()__			}_		} finally {_			if (cache != null) {_				cache.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,twice,and,then,the,get,operation,succeeds,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one;private,void,test,blob,fetch,retries,final,configuration,config,final,blob,store,blob,store,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,server,new,testing,failing,blob,server,config,blob,store,2,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,config,key,blob,client,put,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,new,void,blob,store,url,url,cache,get,file,key,to,uri,to,url,input,stream,is,url,open,stream,try,byte,received,new,byte,data,length,assert,equals,data,length,is,read,received,assert,array,equals,data,received,finally,is,close,finally,if,cache,null,cache,close,if,server,null,server,close
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetries() throws IOException;1495001929;A test where the connection fails twice and then the get operation succeeds.;@Test_	public void testBlobFetchRetries() throws IOException {_		final Configuration config = new Configuration()___		testBlobFetchRetries(config, new VoidBlobStore())__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds;test,public,void,test,blob,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,test,blob,fetch,retries,config,new,void,blob,store
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetries() throws IOException;1502100084;A test where the connection fails twice and then the get operation succeeds.;@Test_	public void testBlobFetchRetries() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchRetries(config, new VoidBlobStore())__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds;test,public,void,test,blob,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,retries,config,new,void,blob,store
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetries() throws IOException;1502692653;A test where the connection fails twice and then the get operation succeeds.;@Test_	public void testBlobFetchRetries() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchRetries(config, new VoidBlobStore())__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds;test,public,void,test,blob,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,retries,config,new,void,blob,store
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetries() throws IOException;1502701584;A test where the connection fails twice and then the get operation succeeds_(job-unrelated blob).;@Test_	public void testBlobFetchRetries() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchRetries(config, new VoidBlobStore(), null)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,job,unrelated,blob;test,public,void,test,blob,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,retries,config,new,void,blob,store,null
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetries() throws IOException;1503041372;A test where the connection fails twice and then the get operation succeeds_(job-unrelated blob).;@Test_	public void testBlobFetchRetries() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchRetries(config, new VoidBlobStore(), null)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,job,unrelated,blob;test,public,void,test,blob,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,retries,config,new,void,blob,store,null
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetries() throws IOException;1507212387;A test where the connection fails twice and then the get operation succeeds_(job-unrelated blob).;@Test_	public void testBlobFetchRetries() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchRetries(config, new VoidBlobStore(), null, false)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,job,unrelated,blob;test,public,void,test,blob,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,retries,config,new,void,blob,store,null,false
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetries() throws IOException;1507212387;A test where the connection fails twice and then the get operation succeeds_(job-unrelated blob).;@Test_	public void testBlobFetchRetries() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchRetries(config, new VoidBlobStore(), null, TRANSIENT_BLOB)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,job,unrelated,blob;test,public,void,test,blob,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,retries,config,new,void,blob,store,null
BlobCacheRetriesTest -> @Test 	public void testBlobFetchRetries() throws IOException;1517915730;A test where the connection fails twice and then the get operation succeeds_(job-unrelated blob).;@Test_	public void testBlobFetchRetries() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchRetries(config, new VoidBlobStore(), null, TRANSIENT_BLOB)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,job,unrelated,blob;test,public,void,test,blob,fetch,retries,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,retries,config,new,void,blob,store,null
BlobCacheRetriesTest -> @Test 	public void testBlobNoJobFetchWithTooManyFailuresHa() throws IOException;1502701584;A test where the connection fails twice and then the get operation succeeds_(with high availability set, job-unrelated blob).;@Test_	public void testBlobNoJobFetchWithTooManyFailuresHa() throws IOException {_		testBlobFetchWithTooManyFailuresHa(null)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set,job,unrelated,blob;test,public,void,test,blob,no,job,fetch,with,too,many,failures,ha,throws,ioexception,test,blob,fetch,with,too,many,failures,ha,null
BlobCacheRetriesTest -> @Test 	public void testBlobNoJobFetchWithTooManyFailuresHa() throws IOException;1503041372;A test where the connection fails twice and then the get operation succeeds_(with high availability set, job-unrelated blob).;@Test_	public void testBlobNoJobFetchWithTooManyFailuresHa() throws IOException {_		testBlobFetchWithTooManyFailuresHa(null)__	};a,test,where,the,connection,fails,twice,and,then,the,get,operation,succeeds,with,high,availability,set,job,unrelated,blob;test,public,void,test,blob,no,job,fetch,with,too,many,failures,ha,throws,ioexception,test,blob,fetch,with,too,many,failures,ha,null
BlobCacheRetriesTest -> @Test 	public void testBlobNoJobFetchWithTooManyFailures() throws IOException;1502701584;A test where the connection fails too often and eventually fails the GET request_(job-unrelated blob).;@Test_	public void testBlobNoJobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore(), null)__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,job,unrelated,blob;test,public,void,test,blob,no,job,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,with,too,many,failures,config,new,void,blob,store,null
BlobCacheRetriesTest -> @Test 	public void testBlobNoJobFetchWithTooManyFailures() throws IOException;1503041372;A test where the connection fails too often and eventually fails the GET request_(job-unrelated blob).;@Test_	public void testBlobNoJobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore(), null)__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,job,unrelated,blob;test,public,void,test,blob,no,job,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,with,too,many,failures,config,new,void,blob,store,null
BlobCacheRetriesTest -> @Test 	public void testBlobNoJobFetchWithTooManyFailures() throws IOException;1507212387;A test where the connection fails too often and eventually fails the GET request_(job-unrelated blob).;@Test_	public void testBlobNoJobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore(), null, false)__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,job,unrelated,blob;test,public,void,test,blob,no,job,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,with,too,many,failures,config,new,void,blob,store,null,false
BlobCacheRetriesTest -> @Test 	public void testBlobNoJobFetchWithTooManyFailures() throws IOException;1507212387;A test where the connection fails too often and eventually fails the GET request_(job-unrelated blob).;@Test_	public void testBlobNoJobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore(), null, TRANSIENT_BLOB)__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,job,unrelated,blob;test,public,void,test,blob,no,job,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,with,too,many,failures,config,new,void,blob,store,null
BlobCacheRetriesTest -> @Test 	public void testBlobNoJobFetchWithTooManyFailures() throws IOException;1517915730;A test where the connection fails too often and eventually fails the GET request_(job-unrelated blob).;@Test_	public void testBlobNoJobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore(), null, TRANSIENT_BLOB)__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,job,unrelated,blob;test,public,void,test,blob,no,job,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,with,too,many,failures,config,new,void,blob,store,null
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchWithTooManyFailures() throws IOException;1502701584;A test where the connection fails too often and eventually fails the GET request (job-related_blob).;@Test_	public void testBlobForJobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore(), new JobID())__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,job,related,blob;test,public,void,test,blob,for,job,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,with,too,many,failures,config,new,void,blob,store,new,job,id
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchWithTooManyFailures() throws IOException;1503041372;A test where the connection fails too often and eventually fails the GET request (job-related_blob).;@Test_	public void testBlobForJobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore(), new JobID())__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,job,related,blob;test,public,void,test,blob,for,job,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,with,too,many,failures,config,new,void,blob,store,new,job,id
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchWithTooManyFailures() throws IOException;1507212387;A test where the connection fails too often and eventually fails the GET request (job-related_blob).;@Test_	public void testBlobForJobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore(), new JobID(), false)__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,job,related,blob;test,public,void,test,blob,for,job,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,with,too,many,failures,config,new,void,blob,store,new,job,id,false
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchWithTooManyFailures() throws IOException;1507212387;A test where the connection fails too often and eventually fails the GET request (job-related_blob).;@Test_	public void testBlobForJobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore(), new JobID(), TRANSIENT_BLOB)__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,job,related,blob;test,public,void,test,blob,for,job,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,with,too,many,failures,config,new,void,blob,store,new,job,id
BlobCacheRetriesTest -> @Test 	public void testBlobForJobFetchWithTooManyFailures() throws IOException;1517915730;A test where the connection fails too often and eventually fails the GET request (job-related_blob).;@Test_	public void testBlobForJobFetchWithTooManyFailures() throws IOException {_		final Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		testBlobFetchWithTooManyFailures(config, new VoidBlobStore(), new JobID(), TRANSIENT_BLOB)__	};a,test,where,the,connection,fails,too,often,and,eventually,fails,the,get,request,job,related,blob;test,public,void,test,blob,for,job,fetch,with,too,many,failures,throws,ioexception,final,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,test,blob,fetch,with,too,many,failures,config,new,void,blob,store,new,job,id
BlobCacheRetriesTest -> private void testBlobFetchWithTooManyFailures(final Configuration config, final BlobStore blobStore) throws IOException;1495001929;A test where the BlobCache must use the BlobServer and the connection_fails too often which eventually fails the GET request.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one);private void testBlobFetchWithTooManyFailures(final Configuration config, final BlobStore blobStore) throws IOException {_		final byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }___		BlobServer server = null__		BlobCache cache = null__		try {__			server = new TestingFailingBlobServer(config, blobStore, 10)___			final InetSocketAddress_				serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress, config)___				key = blobClient.put(data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config, new VoidBlobStore())___			_			try {_				cache.getURL(key)__				fail("This should fail")__			}_			catch (IOException e) {_				_			}_		}_		finally {_			if (cache != null) {_				cache.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,too,often,which,eventually,fails,the,get,request,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one;private,void,test,blob,fetch,with,too,many,failures,final,configuration,config,final,blob,store,blob,store,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,server,new,testing,failing,blob,server,config,blob,store,10,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,config,key,blob,client,put,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,new,void,blob,store,try,cache,get,url,key,fail,this,should,fail,catch,ioexception,e,finally,if,cache,null,cache,close,if,server,null,server,close
BlobCacheRetriesTest -> private void testBlobFetchWithTooManyFailures(final Configuration config, final BlobStore blobStore) throws IOException;1502100084;A test where the BlobCache must use the BlobServer and the connection_fails too often which eventually fails the GET request.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one);private void testBlobFetchWithTooManyFailures(final Configuration config, final BlobStore blobStore) throws IOException {_		final byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }___		BlobServer server = null__		BlobCache cache = null__		try {__			server = new TestingFailingBlobServer(config, blobStore, 10)___			final InetSocketAddress_				serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress, config)___				key = blobClient.put(data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config, new VoidBlobStore())___			_			try {_				cache.getURL(key)__				fail("This should fail")__			}_			catch (IOException e) {_				_			}_		}_		finally {_			if (cache != null) {_				cache.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,too,often,which,eventually,fails,the,get,request,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one;private,void,test,blob,fetch,with,too,many,failures,final,configuration,config,final,blob,store,blob,store,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,server,new,testing,failing,blob,server,config,blob,store,10,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,config,key,blob,client,put,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,new,void,blob,store,try,cache,get,url,key,fail,this,should,fail,catch,ioexception,e,finally,if,cache,null,cache,close,if,server,null,server,close
BlobCacheRetriesTest -> private void testBlobFetchWithTooManyFailures(final Configuration config, final BlobStore blobStore) throws IOException;1502692653;A test where the BlobCache must use the BlobServer and the connection_fails too often which eventually fails the GET request.__@param config_configuration to use (the BlobCache will get some additional settings_set compared to this one);private void testBlobFetchWithTooManyFailures(final Configuration config, final BlobStore blobStore) throws IOException {_		final byte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }___		BlobServer server = null__		BlobCache cache = null__		try {__			server = new TestingFailingBlobServer(config, blobStore, 10)___			final InetSocketAddress_				serverAddress = new InetSocketAddress("localhost", server.getPort())___			_			BlobClient blobClient = null__			BlobKey key__			try {_				blobClient = new BlobClient(serverAddress, config)___				key = blobClient.put(data)__			}_			finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			cache = new BlobCache(serverAddress, config, new VoidBlobStore())___			_			try {_				cache.getFile(key)__				fail("This should fail")__			}_			catch (IOException e) {_				_			}_		}_		finally {_			if (cache != null) {_				cache.close()__			}_			if (server != null) {_				server.close()__			}_		}_	};a,test,where,the,blob,cache,must,use,the,blob,server,and,the,connection,fails,too,often,which,eventually,fails,the,get,request,param,config,configuration,to,use,the,blob,cache,will,get,some,additional,settings,set,compared,to,this,one;private,void,test,blob,fetch,with,too,many,failures,final,configuration,config,final,blob,store,blob,store,throws,ioexception,final,byte,data,new,byte,1,2,3,4,5,6,7,8,9,0,blob,server,server,null,blob,cache,cache,null,try,server,new,testing,failing,blob,server,config,blob,store,10,final,inet,socket,address,server,address,new,inet,socket,address,localhost,server,get,port,blob,client,blob,client,null,blob,key,key,try,blob,client,new,blob,client,server,address,config,key,blob,client,put,data,finally,if,blob,client,null,blob,client,close,cache,new,blob,cache,server,address,config,new,void,blob,store,try,cache,get,file,key,fail,this,should,fail,catch,ioexception,e,finally,if,cache,null,cache,close,if,server,null,server,close
