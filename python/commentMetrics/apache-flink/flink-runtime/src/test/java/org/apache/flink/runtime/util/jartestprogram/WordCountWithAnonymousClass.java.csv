commented;modifiers;parameterAmount;loc;comment;code
false;public;2;12;;@Override public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception {     // normalize and split the line     String[] tokens = value.toLowerCase().split("\\W+").     // emit the pairs     for (String token : tokens) {         if (token.length() > 0) {             out.collect(new Tuple2<String, Integer>(token, 1)).         }     } }
false;public,static;1;33;;public static void main(String[] args) throws Exception {     // set up the execution environment     final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment().     // get input data     DataSet<String> text = StaticData.getDefaultTextLineDataSet(env).     DataSet<Tuple2<String, Integer>> counts = // split up the lines in pairs (2-tuples) containing: (word,1)     text.flatMap(new FlatMapFunction<String, Tuple2<String, Integer>>() {          @Override         public void flatMap(String value, Collector<Tuple2<String, Integer>> out) throws Exception {             // normalize and split the line             String[] tokens = value.toLowerCase().split("\\W+").             // emit the pairs             for (String token : tokens) {                 if (token.length() > 0) {                     out.collect(new Tuple2<String, Integer>(token, 1)).                 }             }         }     }).groupBy(0).sum(1).     // emit result     counts.print().     // execute program     env.execute("WordCount Example"). }
