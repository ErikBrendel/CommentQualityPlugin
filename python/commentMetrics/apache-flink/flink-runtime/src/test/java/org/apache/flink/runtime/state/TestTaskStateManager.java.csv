commented;modifiers;parameterAmount;loc;comment;code
false;public;4;31;;@Override public void reportTaskStateSnapshots(@Nonnull CheckpointMetaData checkpointMetaData, @Nonnull CheckpointMetrics checkpointMetrics, @Nullable TaskStateSnapshot acknowledgedState, @Nullable TaskStateSnapshot localState) {     jobManagerTaskStateSnapshotsByCheckpointId.put(checkpointMetaData.getCheckpointId(), acknowledgedState).     taskManagerTaskStateSnapshotsByCheckpointId.put(checkpointMetaData.getCheckpointId(), localState).     if (checkpointResponder != null) {         checkpointResponder.acknowledgeCheckpoint(jobId, executionAttemptID, checkpointMetaData.getCheckpointId(), checkpointMetrics, acknowledgedState).     }     this.reportedCheckpointId = checkpointMetaData.getCheckpointId().     if (waitForReportLatch != null) {         waitForReportLatch.trigger().     } }
false;public;1;32;;@Nonnull @Override public PrioritizedOperatorSubtaskState prioritizedOperatorState(OperatorID operatorID) {     TaskStateSnapshot jmTaskStateSnapshot = getLastJobManagerTaskStateSnapshot().     TaskStateSnapshot tmTaskStateSnapshot = getLastTaskManagerTaskStateSnapshot().     if (jmTaskStateSnapshot == null) {         return PrioritizedOperatorSubtaskState.emptyNotRestored().     } else {         OperatorSubtaskState jmOpState = jmTaskStateSnapshot.getSubtaskStateByOperatorID(operatorID).         if (jmOpState == null) {             return PrioritizedOperatorSubtaskState.emptyNotRestored().         } else {             List<OperatorSubtaskState> tmStateCollection = Collections.emptyList().             if (tmTaskStateSnapshot != null) {                 OperatorSubtaskState tmOpState = tmTaskStateSnapshot.getSubtaskStateByOperatorID(operatorID).                 if (tmOpState != null) {                     tmStateCollection = Collections.singletonList(tmOpState).                 }             }             PrioritizedOperatorSubtaskState.Builder builder = new PrioritizedOperatorSubtaskState.Builder(jmOpState, tmStateCollection).             return builder.build().         }     } }
false;public;0;6;;@Nonnull @Override public LocalRecoveryConfig createLocalRecoveryConfig() {     return Preconditions.checkNotNull(localRecoveryDirectoryProvider, "Local state directory was never set for this test object!"). }
false;public;1;3;;public void setLocalRecoveryConfig(LocalRecoveryConfig recoveryDirectoryProvider) {     this.localRecoveryDirectoryProvider = recoveryDirectoryProvider. }
false;public;1;4;;@Override public void notifyCheckpointComplete(long checkpointId) throws Exception { }
false;public;0;3;;public JobID getJobId() {     return jobId. }
false;public;1;3;;public void setJobId(JobID jobId) {     this.jobId = jobId. }
false;public;0;3;;public ExecutionAttemptID getExecutionAttemptID() {     return executionAttemptID. }
false;public;1;3;;public void setExecutionAttemptID(ExecutionAttemptID executionAttemptID) {     this.executionAttemptID = executionAttemptID. }
false;public;0;3;;public CheckpointResponder getCheckpointResponder() {     return checkpointResponder. }
false;public;1;3;;public void setCheckpointResponder(CheckpointResponder checkpointResponder) {     this.checkpointResponder = checkpointResponder. }
false;public;0;3;;public Map<Long, TaskStateSnapshot> getJobManagerTaskStateSnapshotsByCheckpointId() {     return jobManagerTaskStateSnapshotsByCheckpointId. }
false;public;1;5;;public void setJobManagerTaskStateSnapshotsByCheckpointId(Map<Long, TaskStateSnapshot> jobManagerTaskStateSnapshotsByCheckpointId) {     this.jobManagerTaskStateSnapshotsByCheckpointId.clear().     this.jobManagerTaskStateSnapshotsByCheckpointId.putAll(jobManagerTaskStateSnapshotsByCheckpointId). }
false;public;0;3;;public Map<Long, TaskStateSnapshot> getTaskManagerTaskStateSnapshotsByCheckpointId() {     return taskManagerTaskStateSnapshotsByCheckpointId. }
false;public;1;5;;public void setTaskManagerTaskStateSnapshotsByCheckpointId(Map<Long, TaskStateSnapshot> taskManagerTaskStateSnapshotsByCheckpointId) {     this.taskManagerTaskStateSnapshotsByCheckpointId.clear().     this.taskManagerTaskStateSnapshotsByCheckpointId.putAll(taskManagerTaskStateSnapshotsByCheckpointId). }
false;public;0;3;;public long getReportedCheckpointId() {     return reportedCheckpointId. }
false;public;1;3;;public void setReportedCheckpointId(long reportedCheckpointId) {     this.reportedCheckpointId = reportedCheckpointId. }
false;public;0;5;;public TaskStateSnapshot getLastJobManagerTaskStateSnapshot() {     return jobManagerTaskStateSnapshotsByCheckpointId != null ? jobManagerTaskStateSnapshotsByCheckpointId.get(reportedCheckpointId) : null. }
false;public;0;5;;public TaskStateSnapshot getLastTaskManagerTaskStateSnapshot() {     return taskManagerTaskStateSnapshotsByCheckpointId != null ? taskManagerTaskStateSnapshotsByCheckpointId.get(reportedCheckpointId) : null. }
false;public;0;3;;public OneShotLatch getWaitForReportLatch() {     return waitForReportLatch. }
false;public;1;3;;public void setWaitForReportLatch(OneShotLatch waitForReportLatch) {     this.waitForReportLatch = waitForReportLatch. }
false;public;1;18;;public void restoreLatestCheckpointState(Map<Long, TaskStateSnapshot> taskStateSnapshotsByCheckpointId) {     if (taskStateSnapshotsByCheckpointId == null || taskStateSnapshotsByCheckpointId.isEmpty()) {         return.     }     long latestId = -1.     for (long id : taskStateSnapshotsByCheckpointId.keySet()) {         if (id > latestId) {             latestId = id.         }     }     setReportedCheckpointId(latestId).     setJobManagerTaskStateSnapshotsByCheckpointId(taskStateSnapshotsByCheckpointId). }
