commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void before() {     this.innerDelegate = new TestFuture().     this.objectUnderTest = new ScheduledFutureAdapter<>(innerDelegate, 4200000321L, TimeUnit.NANOSECONDS). }
false;public;0;30;;@Test public void testForwardedMethods() throws Exception {     Assert.assertEquals((Integer) 4711, objectUnderTest.get()).     Assert.assertEquals(1, innerDelegate.getGetInvocationCount()).     Assert.assertEquals((Integer) 4711, objectUnderTest.get(42L, TimeUnit.SECONDS)).     Assert.assertEquals(1, innerDelegate.getGetTimeoutInvocationCount()).     Assert.assertEquals(innerDelegate.isCancelExpected(), objectUnderTest.cancel(true)).     Assert.assertEquals(1, innerDelegate.getCancelInvocationCount()).     innerDelegate.setCancelResult(!innerDelegate.isCancelExpected()).     Assert.assertEquals(innerDelegate.isCancelExpected(), objectUnderTest.cancel(true)).     Assert.assertEquals(2, innerDelegate.getCancelInvocationCount()).     Assert.assertEquals(innerDelegate.isCancelledExpected(), objectUnderTest.isCancelled()).     Assert.assertEquals(1, innerDelegate.getIsCancelledInvocationCount()).     innerDelegate.setIsCancelledResult(!innerDelegate.isCancelledExpected()).     Assert.assertEquals(innerDelegate.isCancelledExpected(), objectUnderTest.isCancelled()).     Assert.assertEquals(2, innerDelegate.getIsCancelledInvocationCount()).     Assert.assertEquals(innerDelegate.isDoneExpected(), objectUnderTest.isDone()).     Assert.assertEquals(1, innerDelegate.getIsDoneInvocationCount()).     innerDelegate.setIsDoneExpected(!innerDelegate.isDoneExpected()).     Assert.assertEquals(innerDelegate.isDoneExpected(), objectUnderTest.isDone()).     Assert.assertEquals(2, innerDelegate.getIsDoneInvocationCount()). }
false;public;0;28;;@Test public void testCompareToEqualsHashCode() {     Assert.assertEquals(0, objectUnderTest.compareTo(objectUnderTest)).     Assert.assertEquals(objectUnderTest, objectUnderTest).     ScheduledFutureAdapter<?> other = getDeepCopyWithAdjustedTime(0L, objectUnderTest.getTieBreakerUid()).     Assert.assertEquals(0, objectUnderTest.compareTo(other)).     Assert.assertEquals(0, other.compareTo(objectUnderTest)).     Assert.assertEquals(objectUnderTest, other).     Assert.assertEquals(objectUnderTest.hashCode(), other.hashCode()).     other = getDeepCopyWithAdjustedTime(0L, objectUnderTest.getTieBreakerUid() + 1L).     Assert.assertEquals(-1, Integer.signum(objectUnderTest.compareTo(other))).     Assert.assertEquals(+1, Integer.signum(other.compareTo(objectUnderTest))).     Assert.assertNotEquals(objectUnderTest, other).     other = getDeepCopyWithAdjustedTime(+1L, objectUnderTest.getTieBreakerUid()).     Assert.assertEquals(-1, Integer.signum(objectUnderTest.compareTo(other))).     Assert.assertEquals(+1, Integer.signum(other.compareTo(objectUnderTest))).     Assert.assertNotEquals(objectUnderTest, other).     other = getDeepCopyWithAdjustedTime(-1L, objectUnderTest.getTieBreakerUid()).     Assert.assertEquals(+1, Integer.signum(objectUnderTest.compareTo(other))).     Assert.assertEquals(-1, Integer.signum(other.compareTo(objectUnderTest))).     Assert.assertNotEquals(objectUnderTest, other). }
false;private;2;6;;private ScheduledFutureAdapter<Integer> getDeepCopyWithAdjustedTime(long nanoAdjust, long uid) {     return new ScheduledFutureAdapter<>(innerDelegate, objectUnderTest.getScheduleTimeNanos() + nanoAdjust, uid). }
false;public;1;5;;@Override public boolean cancel(boolean mayInterruptIfRunning) {     ++cancelInvocationCount.     return cancelExpected. }
false;public;0;5;;@Override public boolean isCancelled() {     ++isCancelledInvocationCount.     return isCancelledExpected. }
false;public;0;5;;@Override public boolean isDone() {     ++isDoneInvocationCount.     return isDoneExpected. }
false;public;0;5;;@Override public Integer get() {     ++getInvocationCount.     return 4711. }
false;public;2;5;;@Override public Integer get(long timeout, @Nonnull TimeUnit unit) {     ++getTimeoutInvocationCount.     return 4711. }
false;;0;3;;boolean isCancelExpected() {     return cancelExpected. }
false;;0;3;;boolean isCancelledExpected() {     return isCancelledExpected. }
false;;0;3;;boolean isDoneExpected() {     return isDoneExpected. }
false;;1;3;;void setCancelResult(boolean resultCancel) {     this.cancelExpected = resultCancel. }
false;;1;3;;void setIsCancelledResult(boolean resultIsCancelled) {     this.isCancelledExpected = resultIsCancelled. }
false;;1;3;;void setIsDoneExpected(boolean resultIsDone) {     this.isDoneExpected = resultIsDone. }
false;;0;3;;int getCancelInvocationCount() {     return cancelInvocationCount. }
false;;0;3;;int getIsCancelledInvocationCount() {     return isCancelledInvocationCount. }
false;;0;3;;int getIsDoneInvocationCount() {     return isDoneInvocationCount. }
false;;0;3;;int getGetInvocationCount() {     return getInvocationCount. }
false;;0;3;;int getGetTimeoutInvocationCount() {     return getTimeoutInvocationCount. }
