commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSortBoth1OuterJoinTask() throws Exception {     final int keyCnt1 = 20.     final int valCnt1 = 1.     final int keyCnt2 = 10.     final int valCnt2 = 2.     testSortBothOuterJoinTask(keyCnt1, valCnt1, keyCnt2, valCnt2). }
false;public;0;10;;@Test public void testSortBoth2OuterJoinTask() throws Exception {     final int keyCnt1 = 20.     final int valCnt1 = 1.     final int keyCnt2 = 20.     final int valCnt2 = 1.     testSortBothOuterJoinTask(keyCnt1, valCnt1, keyCnt2, valCnt2). }
false;public;0;10;;@Test public void testSortBoth3OuterJoinTask() throws Exception {     int keyCnt1 = 20.     int valCnt1 = 1.     int keyCnt2 = 20.     int valCnt2 = 20.     testSortBothOuterJoinTask(keyCnt1, valCnt1, keyCnt2, valCnt2). }
false;public;0;10;;@Test public void testSortBoth4OuterJoinTask() throws Exception {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 1.     testSortBothOuterJoinTask(keyCnt1, valCnt1, keyCnt2, valCnt2). }
false;public;0;10;;@Test public void testSortBoth5OuterJoinTask() throws Exception {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     testSortBothOuterJoinTask(keyCnt1, valCnt1, keyCnt2, valCnt2). }
false;public;0;10;;@Test public void testSortBoth6OuterJoinTask() throws Exception {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 20.     int valCnt2 = 2.     testSortBothOuterJoinTask(keyCnt1, valCnt1, keyCnt2, valCnt2). }
false;private;4;21;;private void testSortBothOuterJoinTask(int keyCnt1, int valCnt1, int keyCnt2, int valCnt2) throws Exception {     setOutput(this.outList, this.serializer).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(this.getSortDriverStrategy()).     getTaskConfig().setRelativeMemoryDriver(this.bnljn_frac).     setNumFileHandlesForSort(4).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInputSorted(new UniformIntTupleGenerator(keyCnt1, valCnt1, false), this.serializer, this.comparator1.duplicate()).     addInputSorted(new UniformIntTupleGenerator(keyCnt2, valCnt2, false), this.serializer, this.comparator2.duplicate()).     testDriver(testTask, MockJoinStub.class).     final int expCnt = calculateExpectedCount(keyCnt1, valCnt1, keyCnt2, valCnt2).     Assert.assertTrue("Result set size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;28;;@Test public void testSortFirstOuterJoinTask() throws Exception {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     setOutput(this.outList, this.serializer).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(this.getSortDriverStrategy()).     getTaskConfig().setRelativeMemoryDriver(this.bnljn_frac).     setNumFileHandlesForSort(4).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInputSorted(new UniformIntTupleGenerator(keyCnt1, valCnt1, false), this.serializer, this.comparator1.duplicate()).     addInput(new UniformIntTupleGenerator(keyCnt2, valCnt2, true), this.serializer).     testDriver(testTask, MockJoinStub.class).     final int expCnt = calculateExpectedCount(keyCnt1, valCnt1, keyCnt2, valCnt2).     Assert.assertTrue("Result set size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;28;;@Test public void testSortSecondOuterJoinTask() throws Exception {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     setOutput(this.outList, this.serializer).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(this.getSortDriverStrategy()).     getTaskConfig().setRelativeMemoryDriver(this.bnljn_frac).     setNumFileHandlesForSort(4).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInput(new UniformIntTupleGenerator(keyCnt1, valCnt1, true), this.serializer).     addInputSorted(new UniformIntTupleGenerator(keyCnt2, valCnt2, false), this.serializer, this.comparator2.duplicate()).     testDriver(testTask, MockJoinStub.class).     final int expCnt = calculateExpectedCount(keyCnt1, valCnt1, keyCnt2, valCnt2).     Assert.assertTrue("Result set size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;29;;@Test public void testMergeOuterJoinTask() throws Exception {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     setOutput(this.outList, this.serializer).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(this.getSortDriverStrategy()).     getTaskConfig().setRelativeMemoryDriver(this.bnljn_frac).     setNumFileHandlesForSort(4).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInput(new UniformIntTupleGenerator(keyCnt1, valCnt1, true), this.serializer).     addInput(new UniformIntTupleGenerator(keyCnt2, valCnt2, true), this.serializer).     testDriver(testTask, MockJoinStub.class).     final int expCnt = calculateExpectedCount(keyCnt1, valCnt1, keyCnt2, valCnt2).     Assert.assertTrue("Result set size was " + this.outList.size() + ". Expected was " + expCnt, this.outList.size() == expCnt).     this.outList.clear(). }
false;public;0;23;;@Test(expected = ExpectedTestException.class) public void testFailingOuterJoinTask() throws Exception {     int keyCnt1 = 20.     int valCnt1 = 20.     int keyCnt2 = 20.     int valCnt2 = 20.     setOutput(new DiscardingOutputCollector<Tuple2<Integer, Integer>>()).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(this.getSortDriverStrategy()).     getTaskConfig().setRelativeMemoryDriver(this.bnljn_frac).     setNumFileHandlesForSort(4).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInput(new UniformIntTupleGenerator(keyCnt1, valCnt1, true), this.serializer).     addInput(new UniformIntTupleGenerator(keyCnt2, valCnt2, true), this.serializer).     testDriver(testTask, MockFailingJoinStub.class). }
false;public;0;8;;@Override public void run() {     try {         testDriver(testTask, MockJoinStub.class).     } catch (Throwable t) {         error.set(t).     } }
false;public;0;43;;@Test public void testCancelOuterJoinTaskWhileSort1() throws Exception {     setOutput(new DiscardingOutputCollector<Tuple2<Integer, Integer>>()).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(this.getSortDriverStrategy()).     getTaskConfig().setRelativeMemoryDriver(this.bnljn_frac).     setNumFileHandlesForSort(4).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInputSorted(new DelayingIterator<>(new InfiniteIntTupleIterator(), 100), this.serializer, this.comparator1.duplicate()).     addInput(new DelayingIterator<>(new InfiniteIntTupleIterator(), 100), this.serializer).     final AtomicReference<Throwable> error = new AtomicReference<>().     final Thread taskRunner = new Thread("Task runner for testCancelOuterJoinTaskWhileSort1()") {          @Override         public void run() {             try {                 testDriver(testTask, MockJoinStub.class).             } catch (Throwable t) {                 error.set(t).             }         }     }.     taskRunner.start().     Thread.sleep(1000).     cancel().     taskRunner.interrupt().     taskRunner.join(60000).     assertFalse("Task thread did not finish within 60 seconds", taskRunner.isAlive()).     final Throwable taskError = error.get().     if (taskError != null) {         fail("Error in task while canceling:\n" + Throwables.getStackTraceAsString(taskError)).     } }
false;public;0;8;;@Override public void run() {     try {         testDriver(testTask, MockJoinStub.class).     } catch (Throwable t) {         error.set(t).     } }
false;public;0;43;;@Test public void testCancelOuterJoinTaskWhileSort2() throws Exception {     setOutput(new DiscardingOutputCollector<Tuple2<Integer, Integer>>()).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(this.getSortDriverStrategy()).     getTaskConfig().setRelativeMemoryDriver(this.bnljn_frac).     setNumFileHandlesForSort(4).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInput(new DelayingIterator<>(new InfiniteIntTupleIterator(), 1), this.serializer).     addInputSorted(new DelayingIterator<>(new InfiniteIntTupleIterator(), 1), this.serializer, this.comparator2.duplicate()).     final AtomicReference<Throwable> error = new AtomicReference<>().     final Thread taskRunner = new Thread("Task runner for testCancelOuterJoinTaskWhileSort2()") {          @Override         public void run() {             try {                 testDriver(testTask, MockJoinStub.class).             } catch (Throwable t) {                 error.set(t).             }         }     }.     taskRunner.start().     Thread.sleep(1000).     cancel().     taskRunner.interrupt().     taskRunner.join(60000).     assertFalse("Task thread did not finish within 60 seconds", taskRunner.isAlive()).     final Throwable taskError = error.get().     if (taskError != null) {         fail("Error in task while canceling:\n" + Throwables.getStackTraceAsString(taskError)).     } }
false;public;0;8;;@Override public void run() {     try {         testDriver(testTask, MockJoinStub.class).     } catch (Throwable t) {         error.set(t).     } }
false;public;0;43;;@Test public void testCancelOuterJoinTaskWhileRunning() throws Exception {     setOutput(new DiscardingOutputCollector<Tuple2<Integer, Integer>>()).     addDriverComparator(this.comparator1).     addDriverComparator(this.comparator2).     getTaskConfig().setDriverPairComparator(new RuntimePairComparatorFactory()).     getTaskConfig().setDriverStrategy(this.getSortDriverStrategy()).     getTaskConfig().setRelativeMemoryDriver(bnljn_frac).     setNumFileHandlesForSort(4).     final AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> testTask = getOuterJoinDriver().     addInput(new DelayingIterator<>(new InfiniteIntTupleIterator(), 100), this.serializer).     addInput(new DelayingIterator<>(new InfiniteIntTupleIterator(), 100), this.serializer).     final AtomicReference<Throwable> error = new AtomicReference<>().     final Thread taskRunner = new Thread("Task runner for testCancelOuterJoinTaskWhileRunning()") {          @Override         public void run() {             try {                 testDriver(testTask, MockJoinStub.class).             } catch (Throwable t) {                 error.set(t).             }         }     }.     taskRunner.start().     Thread.sleep(1000).     cancel().     taskRunner.interrupt().     taskRunner.join(60000).     assertFalse("Task thread did not finish within 60 seconds", taskRunner.isAlive()).     final Throwable taskError = error.get().     if (taskError != null) {         fail("Error in task while canceling:\n" + Throwables.getStackTraceAsString(taskError)).     } }
false;protected,abstract;0;1;;protected abstract AbstractOuterJoinDriver<Tuple2<Integer, Integer>, Tuple2<Integer, Integer>, Tuple2<Integer, Integer>> getOuterJoinDriver().
false;protected,abstract;4;1;;protected abstract int calculateExpectedCount(int keyCnt1, int valCnt1, int keyCnt2, int valCnt2).
false;protected,abstract;0;1;;protected abstract DriverStrategy getSortDriverStrategy().
false;public;3;4;;@Override public void join(Tuple2<Integer, Integer> first, Tuple2<Integer, Integer> second, Collector<Tuple2<Integer, Integer>> out) throws Exception {     out.collect(first != null ? first : second). }
false;public;3;7;;@Override public void join(Tuple2<Integer, Integer> first, Tuple2<Integer, Integer> second, Collector<Tuple2<Integer, Integer>> out) throws Exception {     if (++this.cnt >= 10) {         throw new ExpectedTestException().     }     out.collect(first != null ? first : second). }
