commented;modifiers;parameterAmount;loc;comment;code
false;public;0;38;;@Test public void testFileCleanup() throws Exception {     final Path dir = temporaryFolder.newFolder().toPath().     final Path file = dir.resolve("file").     Files.createFile(file).     RestfulGateway mockRestfulGateway = TestingRestfulGateway.newBuilder().build().     final GatewayRetriever<RestfulGateway> mockGatewayRetriever = () -> CompletableFuture.completedFuture(mockRestfulGateway).     CompletableFuture<Void> requestProcessingCompleteFuture = new CompletableFuture<>().     TestHandler handler = new TestHandler(requestProcessingCompleteFuture, mockGatewayRetriever).     RouteResult<?> routeResult = new RouteResult<>("", "", Collections.emptyMap(), Collections.emptyMap(), "").     HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, TestHandler.TestHeaders.INSTANCE.getTargetRestEndpointURL(), Unpooled.wrappedBuffer(new byte[0])).     RoutedRequest<?> routerRequest = new RoutedRequest<>(routeResult, request).     Attribute<FileUploads> attribute = new SimpleAttribute().     attribute.set(new FileUploads(dir)).     Channel channel = mock(Channel.class).     when(channel.attr(any(AttributeKey.class))).thenReturn(attribute).     ChannelHandlerContext context = mock(ChannelHandlerContext.class).     when(context.channel()).thenReturn(channel).     handler.respondAsLeader(context, routerRequest, mockRestfulGateway).     // the (asynchronous) request processing is not yet complete so the files should still exist     Assert.assertTrue(Files.exists(file)).     requestProcessingCompleteFuture.complete(null).     Assert.assertFalse(Files.exists(file)). }
false;public;0;4;;@Override public AttributeKey<FileUploads> key() {     return KEY. }
false;public;0;4;;@Override public FileUploads get() {     return container.get(). }
false;public;1;4;;@Override public void set(FileUploads value) {     container.set(value). }
false;public;1;4;;@Override public FileUploads getAndSet(FileUploads value) {     return container.getAndSet(value). }
false;public;1;8;;@Override public FileUploads setIfAbsent(FileUploads value) {     if (container.compareAndSet(null, value)) {         return value.     } else {         return container.get().     } }
false;public;0;4;;@Override public FileUploads getAndRemove() {     return container.getAndSet(null). }
false;public;2;4;;@Override public boolean compareAndSet(FileUploads oldValue, FileUploads newValue) {     return container.compareAndSet(oldValue, newValue). }
false;public;0;4;;@Override public void remove() {     set(null). }
false;protected;4;4;;@Override protected CompletableFuture<Void> respondToRequest(ChannelHandlerContext ctx, HttpRequest httpRequest, HandlerRequest<EmptyRequestBody, EmptyMessageParameters> handlerRequest, RestfulGateway gateway) throws RestHandlerException {     return completionFuture. }
false;public;0;4;;@Override public Class<EmptyRequestBody> getRequestClass() {     return EmptyRequestBody.class. }
false;public;0;4;;@Override public EmptyMessageParameters getUnresolvedMessageParameters() {     return EmptyMessageParameters.getInstance(). }
false;public;0;4;;@Override public HttpMethodWrapper getHttpMethod() {     return HttpMethodWrapper.POST. }
false;public;0;4;;@Override public String getTargetRestEndpointURL() {     return "/test". }
false;public;0;4;;@Override public boolean acceptsFileUploads() {     return true. }
