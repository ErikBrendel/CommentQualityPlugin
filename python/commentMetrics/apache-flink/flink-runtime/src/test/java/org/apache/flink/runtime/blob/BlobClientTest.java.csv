# id;timestamp;commentText;codeText;commentWords;codeWords
BlobClientTest -> private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException;1412605211;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param inputStream_the input stream returned from the GET operation_@param buf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException {__		int bytesReceived = 0___		while (true) {__			final int read = inputStream.read(buf, bytesReceived, buf.length - bytesReceived)__			if (read < 0) {_				throw new EOFException()__			}_			bytesReceived += read___			if (bytesReceived == buf.length) {_				assertEquals(-1, inputStream.read())__				return__			}_		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,input,stream,the,input,stream,returned,from,the,get,operation,param,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;private,static,void,validate,get,final,input,stream,input,stream,final,byte,buf,throws,ioexception,int,bytes,received,0,while,true,final,int,read,input,stream,read,buf,bytes,received,buf,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,buf,length,assert,equals,1,input,stream,read,return
BlobClientTest -> private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException;1423683763;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param inputStream_the input stream returned from the GET operation_@param buf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException {__		int bytesReceived = 0___		while (true) {__			final int read = inputStream.read(buf, bytesReceived, buf.length - bytesReceived)__			if (read < 0) {_				throw new EOFException()__			}_			bytesReceived += read___			if (bytesReceived == buf.length) {_				assertEquals(-1, inputStream.read())__				return__			}_		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,input,stream,the,input,stream,returned,from,the,get,operation,param,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;private,static,void,validate,get,final,input,stream,input,stream,final,byte,buf,throws,ioexception,int,bytes,received,0,while,true,final,int,read,input,stream,read,buf,bytes,received,buf,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,buf,length,assert,equals,1,input,stream,read,return
BlobClientTest -> private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException;1424264340;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param inputStream_the input stream returned from the GET operation_@param buf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException {__		int bytesReceived = 0___		while (true) {__			final int read = inputStream.read(buf, bytesReceived, buf.length - bytesReceived)__			if (read < 0) {_				throw new EOFException()__			}_			bytesReceived += read___			if (bytesReceived == buf.length) {_				assertEquals(-1, inputStream.read())__				return__			}_		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,input,stream,the,input,stream,returned,from,the,get,operation,param,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;private,static,void,validate,get,final,input,stream,input,stream,final,byte,buf,throws,ioexception,int,bytes,received,0,while,true,final,int,read,input,stream,read,buf,bytes,received,buf,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,buf,length,assert,equals,1,input,stream,read,return
BlobClientTest -> private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException;1427784999;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param inputStream_the input stream returned from the GET operation_@param buf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException {__		int bytesReceived = 0___		while (true) {__			final int read = inputStream.read(buf, bytesReceived, buf.length - bytesReceived)__			if (read < 0) {_				throw new EOFException()__			}_			bytesReceived += read___			if (bytesReceived == buf.length) {_				assertEquals(-1, inputStream.read())__				return__			}_		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,input,stream,the,input,stream,returned,from,the,get,operation,param,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;private,static,void,validate,get,final,input,stream,input,stream,final,byte,buf,throws,ioexception,int,bytes,received,0,while,true,final,int,read,input,stream,read,buf,bytes,received,buf,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,buf,length,assert,equals,1,input,stream,read,return
BlobClientTest -> private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException;1468854249;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param inputStream_the input stream returned from the GET operation_@param buf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException {__		int bytesReceived = 0___		while (true) {__			final int read = inputStream.read(buf, bytesReceived, buf.length - bytesReceived)__			if (read < 0) {_				throw new EOFException()__			}_			bytesReceived += read___			if (bytesReceived == buf.length) {_				assertEquals(-1, inputStream.read())__				return__			}_		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,input,stream,the,input,stream,returned,from,the,get,operation,param,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;private,static,void,validate,get,final,input,stream,input,stream,final,byte,buf,throws,ioexception,int,bytes,received,0,while,true,final,int,read,input,stream,read,buf,bytes,received,buf,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,buf,length,assert,equals,1,input,stream,read,return
BlobClientTest -> private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException;1476696544;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param inputStream_the input stream returned from the GET operation_@param buf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException {__		int bytesReceived = 0___		while (true) {__			final int read = inputStream.read(buf, bytesReceived, buf.length - bytesReceived)__			if (read < 0) {_				throw new EOFException()__			}_			bytesReceived += read___			if (bytesReceived == buf.length) {_				assertEquals(-1, inputStream.read())__				return__			}_		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,input,stream,the,input,stream,returned,from,the,get,operation,param,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;private,static,void,validate,get,final,input,stream,input,stream,final,byte,buf,throws,ioexception,int,bytes,received,0,while,true,final,int,read,input,stream,read,buf,bytes,received,buf,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,buf,length,assert,equals,1,input,stream,read,return
BlobClientTest -> private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException;1495001929;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param inputStream_the input stream returned from the GET operation_@param buf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException {__		int bytesReceived = 0___		while (true) {__			final int read = inputStream.read(buf, bytesReceived, buf.length - bytesReceived)__			if (read < 0) {_				throw new EOFException()__			}_			bytesReceived += read___			if (bytesReceived == buf.length) {_				assertEquals(-1, inputStream.read())__				return__			}_		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,input,stream,the,input,stream,returned,from,the,get,operation,param,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;private,static,void,validate,get,final,input,stream,input,stream,final,byte,buf,throws,ioexception,int,bytes,received,0,while,true,final,int,read,input,stream,read,buf,bytes,received,buf,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,buf,length,assert,equals,1,input,stream,read,return
BlobClientTest -> private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException;1499789965;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param inputStream_the input stream returned from the GET operation_@param buf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException {__		int bytesReceived = 0___		while (true) {__			final int read = inputStream.read(buf, bytesReceived, buf.length - bytesReceived)__			if (read < 0) {_				throw new EOFException()__			}_			bytesReceived += read___			if (bytesReceived == buf.length) {_				assertEquals(-1, inputStream.read())__				return__			}_		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,input,stream,the,input,stream,returned,from,the,get,operation,param,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;private,static,void,validate,get,final,input,stream,input,stream,final,byte,buf,throws,ioexception,int,bytes,received,0,while,true,final,int,read,input,stream,read,buf,bytes,received,buf,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,buf,length,assert,equals,1,input,stream,read,return
BlobClientTest -> private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException;1502100084;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param inputStream_the input stream returned from the GET operation_@param buf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;private static void validateGet(final InputStream inputStream, final byte[] buf) throws IOException {_		byte[] receivedBuffer = new byte[buf.length]___		int bytesReceived = 0___		while (true) {__			final int read = inputStream.read(receivedBuffer, bytesReceived, receivedBuffer.length - bytesReceived)__			if (read < 0) {_				throw new EOFException()__			}_			bytesReceived += read___			if (bytesReceived == receivedBuffer.length) {_				assertEquals(-1, inputStream.read())__				assertArrayEquals(buf, receivedBuffer)__				return__			}_		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,input,stream,the,input,stream,returned,from,the,get,operation,param,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;private,static,void,validate,get,final,input,stream,input,stream,final,byte,buf,throws,ioexception,byte,received,buffer,new,byte,buf,length,int,bytes,received,0,while,true,final,int,read,input,stream,read,received,buffer,bytes,received,received,buffer,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,received,buffer,length,assert,equals,1,input,stream,read,assert,array,equals,buf,received,buffer,return
BlobClientTest -> static void validateGetAndClose(final InputStream actualInputStream, final byte[] expectedBuf) throws IOException;1507212387;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param actualInputStream_the input stream returned from the GET operation (will be closed by this method)_@param expectedBuf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;static void validateGetAndClose(final InputStream actualInputStream, final byte[] expectedBuf) throws IOException {_		try {_			byte[] receivedBuffer = new byte[expectedBuf.length]___			int bytesReceived = 0___			while (true) {__				final int read = actualInputStream.read(receivedBuffer, bytesReceived, receivedBuffer.length - bytesReceived)__				if (read < 0) {_					throw new EOFException()__				}_				bytesReceived += read___				if (bytesReceived == receivedBuffer.length) {_					assertEquals(-1, actualInputStream.read())__					assertArrayEquals(expectedBuf, receivedBuffer)__					return__				}_			}_		} finally {_			actualInputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,expected,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;static,void,validate,get,and,close,final,input,stream,actual,input,stream,final,byte,expected,buf,throws,ioexception,try,byte,received,buffer,new,byte,expected,buf,length,int,bytes,received,0,while,true,final,int,read,actual,input,stream,read,received,buffer,bytes,received,received,buffer,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,received,buffer,length,assert,equals,1,actual,input,stream,read,assert,array,equals,expected,buf,received,buffer,return,finally,actual,input,stream,close
BlobClientTest -> static void validateGetAndClose(final InputStream actualInputStream, final byte[] expectedBuf) throws IOException;1507212387;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param actualInputStream_the input stream returned from the GET operation (will be closed by this method)_@param expectedBuf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;static void validateGetAndClose(final InputStream actualInputStream, final byte[] expectedBuf) throws IOException {_		try {_			byte[] receivedBuffer = new byte[expectedBuf.length]___			int bytesReceived = 0___			while (true) {__				final int read = actualInputStream.read(receivedBuffer, bytesReceived, receivedBuffer.length - bytesReceived)__				if (read < 0) {_					throw new EOFException()__				}_				bytesReceived += read___				if (bytesReceived == receivedBuffer.length) {_					assertEquals(-1, actualInputStream.read())__					assertArrayEquals(expectedBuf, receivedBuffer)__					return__				}_			}_		} finally {_			actualInputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,expected,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;static,void,validate,get,and,close,final,input,stream,actual,input,stream,final,byte,expected,buf,throws,ioexception,try,byte,received,buffer,new,byte,expected,buf,length,int,bytes,received,0,while,true,final,int,read,actual,input,stream,read,received,buffer,bytes,received,received,buffer,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,received,buffer,length,assert,equals,1,actual,input,stream,read,assert,array,equals,expected,buf,received,buffer,return,finally,actual,input,stream,close
BlobClientTest -> static void validateGetAndClose(final InputStream actualInputStream, final byte[] expectedBuf) throws IOException;1508138617;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param actualInputStream_the input stream returned from the GET operation (will be closed by this method)_@param expectedBuf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;static void validateGetAndClose(final InputStream actualInputStream, final byte[] expectedBuf) throws IOException {_		try {_			byte[] receivedBuffer = new byte[expectedBuf.length]___			int bytesReceived = 0___			while (true) {__				final int read = actualInputStream.read(receivedBuffer, bytesReceived, receivedBuffer.length - bytesReceived)__				if (read < 0) {_					throw new EOFException()__				}_				bytesReceived += read___				if (bytesReceived == receivedBuffer.length) {_					assertEquals(-1, actualInputStream.read())__					assertArrayEquals(expectedBuf, receivedBuffer)__					return__				}_			}_		} finally {_			actualInputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,expected,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;static,void,validate,get,and,close,final,input,stream,actual,input,stream,final,byte,expected,buf,throws,ioexception,try,byte,received,buffer,new,byte,expected,buf,length,int,bytes,received,0,while,true,final,int,read,actual,input,stream,read,received,buffer,bytes,received,received,buffer,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,received,buffer,length,assert,equals,1,actual,input,stream,read,assert,array,equals,expected,buf,received,buffer,return,finally,actual,input,stream,close
BlobClientTest -> static void validateGetAndClose(final InputStream actualInputStream, final byte[] expectedBuf) throws IOException;1515428991;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param actualInputStream_the input stream returned from the GET operation (will be closed by this method)_@param expectedBuf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;static void validateGetAndClose(final InputStream actualInputStream, final byte[] expectedBuf) throws IOException {_		try {_			byte[] receivedBuffer = new byte[expectedBuf.length]___			int bytesReceived = 0___			while (true) {__				final int read = actualInputStream.read(receivedBuffer, bytesReceived, receivedBuffer.length - bytesReceived)__				if (read < 0) {_					throw new EOFException()__				}_				bytesReceived += read___				if (bytesReceived == receivedBuffer.length) {_					assertEquals(-1, actualInputStream.read())__					assertArrayEquals(expectedBuf, receivedBuffer)__					return__				}_			}_		} finally {_			actualInputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,expected,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;static,void,validate,get,and,close,final,input,stream,actual,input,stream,final,byte,expected,buf,throws,ioexception,try,byte,received,buffer,new,byte,expected,buf,length,int,bytes,received,0,while,true,final,int,read,actual,input,stream,read,received,buffer,bytes,received,received,buffer,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,received,buffer,length,assert,equals,1,actual,input,stream,read,assert,array,equals,expected,buf,received,buffer,return,finally,actual,input,stream,close
BlobClientTest -> static void validateGetAndClose(final InputStream actualInputStream, final byte[] expectedBuf) throws IOException;1525420604;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param actualInputStream_the input stream returned from the GET operation (will be closed by this method)_@param expectedBuf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;static void validateGetAndClose(final InputStream actualInputStream, final byte[] expectedBuf) throws IOException {_		try {_			byte[] receivedBuffer = new byte[expectedBuf.length]___			int bytesReceived = 0___			while (true) {__				final int read = actualInputStream.read(receivedBuffer, bytesReceived, receivedBuffer.length - bytesReceived)__				if (read < 0) {_					throw new EOFException()__				}_				bytesReceived += read___				if (bytesReceived == receivedBuffer.length) {_					assertEquals(-1, actualInputStream.read())__					assertArrayEquals(expectedBuf, receivedBuffer)__					return__				}_			}_		} finally {_			actualInputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,expected,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;static,void,validate,get,and,close,final,input,stream,actual,input,stream,final,byte,expected,buf,throws,ioexception,try,byte,received,buffer,new,byte,expected,buf,length,int,bytes,received,0,while,true,final,int,read,actual,input,stream,read,received,buffer,bytes,received,received,buffer,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,received,buffer,length,assert,equals,1,actual,input,stream,read,assert,array,equals,expected,buf,received,buffer,return,finally,actual,input,stream,close
BlobClientTest -> static void validateGetAndClose(final InputStream actualInputStream, final byte[] expectedBuf) throws IOException;1529583969;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param actualInputStream_the input stream returned from the GET operation (will be closed by this method)_@param expectedBuf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;static void validateGetAndClose(final InputStream actualInputStream, final byte[] expectedBuf) throws IOException {_		try {_			byte[] receivedBuffer = new byte[expectedBuf.length]___			int bytesReceived = 0___			while (true) {__				final int read = actualInputStream.read(receivedBuffer, bytesReceived, receivedBuffer.length - bytesReceived)__				if (read < 0) {_					throw new EOFException()__				}_				bytesReceived += read___				if (bytesReceived == receivedBuffer.length) {_					assertEquals(-1, actualInputStream.read())__					assertArrayEquals(expectedBuf, receivedBuffer)__					return__				}_			}_		} finally {_			actualInputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,expected,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;static,void,validate,get,and,close,final,input,stream,actual,input,stream,final,byte,expected,buf,throws,ioexception,try,byte,received,buffer,new,byte,expected,buf,length,int,bytes,received,0,while,true,final,int,read,actual,input,stream,read,received,buffer,bytes,received,received,buffer,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,received,buffer,length,assert,equals,1,actual,input,stream,read,assert,array,equals,expected,buf,received,buffer,return,finally,actual,input,stream,close
BlobClientTest -> static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception;1502100084;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, List)} helper.;static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", blobServer.getPort())___		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(serverAddress, blobClientConfig,_			Collections.singletonList(new Path(testFile.toURI())))___		assertEquals(1, blobKeys.size())___		try (BlobClient blobClient = new BlobClient(serverAddress, blobClientConfig)) {_			InputStream is = blobClient.get(blobKeys.get(0))__			validateGet(is, testFile)__		}_	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,list,helper;static,void,upload,jar,file,blob,server,blob,server,configuration,blob,client,config,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,blob,server,get,port,list,blob,key,blob,keys,blob,client,upload,jar,files,server,address,blob,client,config,collections,singleton,list,new,path,test,file,to,uri,assert,equals,1,blob,keys,size,try,blob,client,blob,client,new,blob,client,server,address,blob,client,config,input,stream,is,blob,client,get,blob,keys,get,0,validate,get,is,test,file
BlobClientTest -> static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception;1502701584;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, List)} helper.;static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", blobServer.getPort())___		uploadJarFile(serverAddress, blobClientConfig, testFile)__		uploadJarFile(serverAddress, blobClientConfig, testFile)__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,list,helper;static,void,upload,jar,file,blob,server,blob,server,configuration,blob,client,config,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,blob,server,get,port,upload,jar,file,server,address,blob,client,config,test,file,upload,jar,file,server,address,blob,client,config,test,file
BlobClientTest -> static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception;1503041358;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, List)} helper.;static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", blobServer.getPort())___		uploadJarFile(serverAddress, blobClientConfig, testFile)__		uploadJarFile(serverAddress, blobClientConfig, testFile)__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,list,helper;static,void,upload,jar,file,blob,server,blob,server,configuration,blob,client,config,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,blob,server,get,port,upload,jar,file,server,address,blob,client,config,test,file,upload,jar,file,server,address,blob,client,config,test,file
BlobClientTest -> static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception;1503041372;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, JobID, List)}} helper.;static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", blobServer.getPort())___		uploadJarFile(serverAddress, blobClientConfig, testFile)__		uploadJarFile(serverAddress, blobClientConfig, testFile)__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,job,id,list,helper;static,void,upload,jar,file,blob,server,blob,server,configuration,blob,client,config,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,blob,server,get,port,upload,jar,file,server,address,blob,client,config,test,file,upload,jar,file,server,address,blob,client,config,test,file
BlobClientTest -> static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception;1507212387;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, JobID, List)}} helper.;static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", blobServer.getPort())___		uploadJarFile(serverAddress, blobClientConfig, testFile)__		uploadJarFile(serverAddress, blobClientConfig, testFile)__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,job,id,list,helper;static,void,upload,jar,file,blob,server,blob,server,configuration,blob,client,config,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,blob,server,get,port,upload,jar,file,server,address,blob,client,config,test,file,upload,jar,file,server,address,blob,client,config,test,file
BlobClientTest -> static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception;1507212387;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, JobID, List)}} helper.;static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile, PERMANENT_BLOB)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", blobServer.getPort())___		uploadJarFile(serverAddress, blobClientConfig, testFile)__		uploadJarFile(serverAddress, blobClientConfig, testFile)__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,job,id,list,helper;static,void,upload,jar,file,blob,server,blob,server,configuration,blob,client,config,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,blob,server,get,port,upload,jar,file,server,address,blob,client,config,test,file,upload,jar,file,server,address,blob,client,config,test,file
BlobClientTest -> static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception;1508138617;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, JobID, List)}} helper.;static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", blobServer.getPort())___		uploadJarFile(serverAddress, blobClientConfig, testFile)__		uploadJarFile(serverAddress, blobClientConfig, testFile)__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,job,id,list,helper;static,void,upload,jar,file,blob,server,blob,server,configuration,blob,client,config,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,blob,server,get,port,upload,jar,file,server,address,blob,client,config,test,file,upload,jar,file,server,address,blob,client,config,test,file
BlobClientTest -> static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception;1515428991;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, JobID, List)}} helper.;static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", blobServer.getPort())___		uploadJarFile(serverAddress, blobClientConfig, testFile)__		uploadJarFile(serverAddress, blobClientConfig, testFile)__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,job,id,list,helper;static,void,upload,jar,file,blob,server,blob,server,configuration,blob,client,config,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,blob,server,get,port,upload,jar,file,server,address,blob,client,config,test,file,upload,jar,file,server,address,blob,client,config,test,file
BlobClientTest -> static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception;1525420604;Tests the static {@link BlobClient#uploadFiles(InetSocketAddress, Configuration, JobID, List)}} helper.;static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", blobServer.getPort())___		uploadJarFile(serverAddress, blobClientConfig, testFile)__		uploadJarFile(serverAddress, blobClientConfig, testFile)__	};tests,the,static,link,blob,client,upload,files,inet,socket,address,configuration,job,id,list,helper;static,void,upload,jar,file,blob,server,blob,server,configuration,blob,client,config,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,blob,server,get,port,upload,jar,file,server,address,blob,client,config,test,file,upload,jar,file,server,address,blob,client,config,test,file
BlobClientTest -> static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception;1529583969;Tests the static {@link BlobClient#uploadFiles(InetSocketAddress, Configuration, JobID, List)}} helper.;static void uploadJarFile(BlobServer blobServer, Configuration blobClientConfig) throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", blobServer.getPort())___		uploadJarFile(serverAddress, blobClientConfig, testFile)__		uploadJarFile(serverAddress, blobClientConfig, testFile)__	};tests,the,static,link,blob,client,upload,files,inet,socket,address,configuration,job,id,list,helper;static,void,upload,jar,file,blob,server,blob,server,configuration,blob,client,config,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,blob,server,get,port,upload,jar,file,server,address,blob,client,config,test,file,upload,jar,file,server,address,blob,client,config,test,file
BlobClientTest -> private static BlobKey prepareTestFile(final File file) throws IOException;1412605211;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(final File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,final,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> private static BlobKey prepareTestFile(final File file) throws IOException;1423683763;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(final File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,final,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1468854249;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())___		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(serverAddress, Collections.singletonList(new Path(testFile.toURI())))___		assertEquals(1, blobKeys.size())___		try (BlobClient blobClient = new BlobClient(serverAddress)) {_			InputStream is = blobClient.get(blobKeys.get(0))__			validateGet(is, testFile)__		}_	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,list,blob,key,blob,keys,blob,client,upload,jar,files,server,address,collections,singleton,list,new,path,test,file,to,uri,assert,equals,1,blob,keys,size,try,blob,client,blob,client,new,blob,client,server,address,input,stream,is,blob,client,get,blob,keys,get,0,validate,get,is,test,file
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1476696544;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())___		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(serverAddress, blobServiceConfig,_			Collections.singletonList(new Path(testFile.toURI())))___		assertEquals(1, blobKeys.size())___		try (BlobClient blobClient = new BlobClient(serverAddress, blobServiceConfig)) {_			InputStream is = blobClient.get(blobKeys.get(0))__			validateGet(is, testFile)__		}_	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,list,blob,key,blob,keys,blob,client,upload,jar,files,server,address,blob,service,config,collections,singleton,list,new,path,test,file,to,uri,assert,equals,1,blob,keys,size,try,blob,client,blob,client,new,blob,client,server,address,blob,service,config,input,stream,is,blob,client,get,blob,keys,get,0,validate,get,is,test,file
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1495001929;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())___		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(serverAddress, blobServiceConfig,_			Collections.singletonList(new Path(testFile.toURI())))___		assertEquals(1, blobKeys.size())___		try (BlobClient blobClient = new BlobClient(serverAddress, blobServiceConfig)) {_			InputStream is = blobClient.get(blobKeys.get(0))__			validateGet(is, testFile)__		}_	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,list,blob,key,blob,keys,blob,client,upload,jar,files,server,address,blob,service,config,collections,singleton,list,new,path,test,file,to,uri,assert,equals,1,blob,keys,size,try,blob,client,blob,client,new,blob,client,server,address,blob,service,config,input,stream,is,blob,client,get,blob,keys,get,0,validate,get,is,test,file
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1499789965;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		final File testFile = File.createTempFile("testfile", ".dat")__		testFile.deleteOnExit()__		prepareTestFile(testFile)___		InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())___		List<BlobKey> blobKeys = BlobClient.uploadJarFiles(serverAddress, blobServiceConfig,_			Collections.singletonList(new Path(testFile.toURI())))___		assertEquals(1, blobKeys.size())___		try (BlobClient blobClient = new BlobClient(serverAddress, blobServiceConfig)) {_			InputStream is = blobClient.get(blobKeys.get(0))__			validateGet(is, testFile)__		}_	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,list,blob,key,blob,keys,blob,client,upload,jar,files,server,address,blob,service,config,collections,singleton,list,new,path,test,file,to,uri,assert,equals,1,blob,keys,size,try,blob,client,blob,client,new,blob,client,server,address,blob,service,config,input,stream,is,blob,client,get,blob,keys,get,0,validate,get,is,test,file
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1502100084;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		uploadJarFile(getBlobServer(), getBlobClientConfig())__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,upload,jar,file,get,blob,server,get,blob,client,config
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1502701584;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		uploadJarFile(getBlobServer(), getBlobClientConfig())__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,upload,jar,file,get,blob,server,get,blob,client,config
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1503041358;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		uploadJarFile(getBlobServer(), getBlobClientConfig())__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,upload,jar,file,get,blob,server,get,blob,client,config
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1503041372;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, JobID, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		uploadJarFile(getBlobServer(), getBlobClientConfig())__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,job,id,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,upload,jar,file,get,blob,server,get,blob,client,config
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1507212387;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, JobID, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		uploadJarFile(getBlobServer(), getBlobClientConfig())__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,job,id,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,upload,jar,file,get,blob,server,get,blob,client,config
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1507212387;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, JobID, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		uploadJarFile(getBlobServer(), getBlobClientConfig())__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,job,id,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,upload,jar,file,get,blob,server,get,blob,client,config
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1508138617;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, JobID, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		uploadJarFile(getBlobServer(), getBlobClientConfig())__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,job,id,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,upload,jar,file,get,blob,server,get,blob,client,config
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1515428991;Tests the static {@link BlobClient#uploadJarFiles(InetSocketAddress, Configuration, JobID, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		uploadJarFile(getBlobServer(), getBlobClientConfig())__	};tests,the,static,link,blob,client,upload,jar,files,inet,socket,address,configuration,job,id,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,upload,jar,file,get,blob,server,get,blob,client,config
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1525420604;Tests the static {@link BlobClient#uploadFiles(InetSocketAddress, Configuration, JobID, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		uploadJarFile(getBlobServer(), getBlobClientConfig())__	};tests,the,static,link,blob,client,upload,files,inet,socket,address,configuration,job,id,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,upload,jar,file,get,blob,server,get,blob,client,config
BlobClientTest -> @Test 	public void testUploadJarFilesHelper() throws Exception;1529583969;Tests the static {@link BlobClient#uploadFiles(InetSocketAddress, Configuration, JobID, List)} helper.;@Test_	public void testUploadJarFilesHelper() throws Exception {_		uploadJarFile(getBlobServer(), getBlobClientConfig())__	};tests,the,static,link,blob,client,upload,files,inet,socket,address,configuration,job,id,list,helper;test,public,void,test,upload,jar,files,helper,throws,exception,upload,jar,file,get,blob,server,get,blob,client,config
BlobClientTest -> static void validateGetAndClose(InputStream actualInputStream, InputStream expectedInputStream) 			throws IOException;1507212387;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the expected input stream.__@param actualInputStream_the input stream returned from the GET operation (will be closed by this method)_@param expectedInputStream_the input stream to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading any input stream;static void validateGetAndClose(InputStream actualInputStream, InputStream expectedInputStream)_			throws IOException {_		try {_			while (true) {_				final int r1 = actualInputStream.read()__				final int r2 = expectedInputStream.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}_		} finally {_			actualInputStream.close()__			expectedInputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,expected,input,stream,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,expected,input,stream,the,input,stream,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,any,input,stream;static,void,validate,get,and,close,input,stream,actual,input,stream,input,stream,expected,input,stream,throws,ioexception,try,while,true,final,int,r1,actual,input,stream,read,final,int,r2,expected,input,stream,read,assert,equals,r2,r1,if,r1,0,break,finally,actual,input,stream,close,expected,input,stream,close
BlobClientTest -> static void validateGetAndClose(InputStream actualInputStream, InputStream expectedInputStream) 			throws IOException;1507212387;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the expected input stream.__@param actualInputStream_the input stream returned from the GET operation (will be closed by this method)_@param expectedInputStream_the input stream to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading any input stream;static void validateGetAndClose(InputStream actualInputStream, InputStream expectedInputStream)_			throws IOException {_		try {_			while (true) {_				final int r1 = actualInputStream.read()__				final int r2 = expectedInputStream.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}_		} finally {_			actualInputStream.close()__			expectedInputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,expected,input,stream,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,expected,input,stream,the,input,stream,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,any,input,stream;static,void,validate,get,and,close,input,stream,actual,input,stream,input,stream,expected,input,stream,throws,ioexception,try,while,true,final,int,r1,actual,input,stream,read,final,int,r2,expected,input,stream,read,assert,equals,r2,r1,if,r1,0,break,finally,actual,input,stream,close,expected,input,stream,close
BlobClientTest -> static void validateGetAndClose(InputStream actualInputStream, InputStream expectedInputStream) 			throws IOException;1508138617;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the expected input stream.__@param actualInputStream_the input stream returned from the GET operation (will be closed by this method)_@param expectedInputStream_the input stream to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading any input stream;static void validateGetAndClose(InputStream actualInputStream, InputStream expectedInputStream)_			throws IOException {_		try {_			while (true) {_				final int r1 = actualInputStream.read()__				final int r2 = expectedInputStream.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}_		} finally {_			actualInputStream.close()__			expectedInputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,expected,input,stream,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,expected,input,stream,the,input,stream,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,any,input,stream;static,void,validate,get,and,close,input,stream,actual,input,stream,input,stream,expected,input,stream,throws,ioexception,try,while,true,final,int,r1,actual,input,stream,read,final,int,r2,expected,input,stream,read,assert,equals,r2,r1,if,r1,0,break,finally,actual,input,stream,close,expected,input,stream,close
BlobClientTest -> static void validateGetAndClose(InputStream actualInputStream, InputStream expectedInputStream) 			throws IOException;1515428991;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the expected input stream.__@param actualInputStream_the input stream returned from the GET operation (will be closed by this method)_@param expectedInputStream_the input stream to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading any input stream;static void validateGetAndClose(InputStream actualInputStream, InputStream expectedInputStream)_			throws IOException {_		try {_			while (true) {_				final int r1 = actualInputStream.read()__				final int r2 = expectedInputStream.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}_		} finally {_			actualInputStream.close()__			expectedInputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,expected,input,stream,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,expected,input,stream,the,input,stream,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,any,input,stream;static,void,validate,get,and,close,input,stream,actual,input,stream,input,stream,expected,input,stream,throws,ioexception,try,while,true,final,int,r1,actual,input,stream,read,final,int,r2,expected,input,stream,read,assert,equals,r2,r1,if,r1,0,break,finally,actual,input,stream,close,expected,input,stream,close
BlobClientTest -> static void validateGetAndClose(InputStream actualInputStream, InputStream expectedInputStream) 			throws IOException;1525420604;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the expected input stream.__@param actualInputStream_the input stream returned from the GET operation (will be closed by this method)_@param expectedInputStream_the input stream to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading any input stream;static void validateGetAndClose(InputStream actualInputStream, InputStream expectedInputStream)_			throws IOException {_		try {_			while (true) {_				final int r1 = actualInputStream.read()__				final int r2 = expectedInputStream.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}_		} finally {_			actualInputStream.close()__			expectedInputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,expected,input,stream,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,expected,input,stream,the,input,stream,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,any,input,stream;static,void,validate,get,and,close,input,stream,actual,input,stream,input,stream,expected,input,stream,throws,ioexception,try,while,true,final,int,r1,actual,input,stream,read,final,int,r2,expected,input,stream,read,assert,equals,r2,r1,if,r1,0,break,finally,actual,input,stream,close,expected,input,stream,close
BlobClientTest -> static void validateGetAndClose(InputStream actualInputStream, InputStream expectedInputStream) 			throws IOException;1529583969;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the expected input stream.__@param actualInputStream_the input stream returned from the GET operation (will be closed by this method)_@param expectedInputStream_the input stream to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading any input stream;static void validateGetAndClose(InputStream actualInputStream, InputStream expectedInputStream)_			throws IOException {_		try {_			while (true) {_				final int r1 = actualInputStream.read()__				final int r2 = expectedInputStream.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}_		} finally {_			actualInputStream.close()__			expectedInputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,expected,input,stream,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,expected,input,stream,the,input,stream,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,any,input,stream;static,void,validate,get,and,close,input,stream,actual,input,stream,input,stream,expected,input,stream,throws,ioexception,try,while,true,final,int,r1,actual,input,stream,read,final,int,r2,expected,input,stream,read,assert,equals,r2,r1,if,r1,0,break,finally,actual,input,stream,close,expected,input,stream,close
BlobClientTest -> @AfterClass 	public static void stopServer();1412605211;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() {__		if (BLOB_SERVER != null) {_			try {_				BLOB_SERVER.shutdown()__			} catch (IOException e) {_				e.printStackTrace()__			}_		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,if,null,try,shutdown,catch,ioexception,e,e,print,stack,trace
BlobClientTest -> @AfterClass 	public static void stopServer();1423683763;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.shutdown()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,if,null,shutdown
BlobClientTest -> @AfterClass 	public static void stopServer();1424264340;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.shutdown()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,if,null,shutdown
BlobClientTest -> @AfterClass 	public static void stopServer();1427784999;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.shutdown()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,if,null,shutdown
BlobClientTest -> @AfterClass 	public static void stopServer();1468854249;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.shutdown()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,if,null,shutdown
BlobClientTest -> @AfterClass 	public static void stopServer();1476696544;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.shutdown()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,if,null,shutdown
BlobClientTest -> private void testGetFailsDuringStreaming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1507212387;Checks the correct result if a GET operation fails during the file download.__@param jobId_job ID or <tt>null</tt> if job-unrelated_@param blobType_whether the BLOB should become permanent or transient;private void testGetFailsDuringStreaming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {__		try (BlobClient client = new BlobClient(_			new InetSocketAddress("localhost", getBlobServer().getPort()), getBlobClientConfig())) {__			byte[] data = new byte[5000000]__			Random rnd = new Random()__			rnd.nextBytes(data)___			_			BlobKey key = client.putBuffer(jobId, data, 0, data.length, blobType)__			assertNotNull(key)___			_			InputStream is = client.getInternal(jobId, key)___			byte[] receiveBuffer = new byte[data.length]__			int firstChunkLen = 50000__			BlobUtils.readFully(is, receiveBuffer, 0, firstChunkLen, null)__			BlobUtils.readFully(is, receiveBuffer, firstChunkLen, firstChunkLen, null)___			_			for (BlobServerConnection conn : getBlobServer().getCurrentActiveConnections()) {_				conn.close()__			}__			try {_				BlobUtils.readFully(is, receiveBuffer, 2 * firstChunkLen, data.length - 2 * firstChunkLen, null)__				_				_				assertArrayEquals(data, receiveBuffer)__			}_			catch (IOException e) {_				_			}_		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,file,download,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,get,fails,during,streaming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,try,blob,client,client,new,blob,client,new,inet,socket,address,localhost,get,blob,server,get,port,get,blob,client,config,byte,data,new,byte,5000000,random,rnd,new,random,rnd,next,bytes,data,blob,key,key,client,put,buffer,job,id,data,0,data,length,blob,type,assert,not,null,key,input,stream,is,client,get,internal,job,id,key,byte,receive,buffer,new,byte,data,length,int,first,chunk,len,50000,blob,utils,read,fully,is,receive,buffer,0,first,chunk,len,null,blob,utils,read,fully,is,receive,buffer,first,chunk,len,first,chunk,len,null,for,blob,server,connection,conn,get,blob,server,get,current,active,connections,conn,close,try,blob,utils,read,fully,is,receive,buffer,2,first,chunk,len,data,length,2,first,chunk,len,null,assert,array,equals,data,receive,buffer,catch,ioexception,e
BlobClientTest -> private void testGetFailsDuringStreaming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1508138617;Checks the correct result if a GET operation fails during the file download.__@param jobId_job ID or <tt>null</tt> if job-unrelated_@param blobType_whether the BLOB should become permanent or transient;private void testGetFailsDuringStreaming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {__		try (BlobClient client = new BlobClient(_			new InetSocketAddress("localhost", getBlobServer().getPort()), getBlobClientConfig())) {__			byte[] data = new byte[5000000]__			Random rnd = new Random()__			rnd.nextBytes(data)___			_			BlobKey key = client.putBuffer(jobId, data, 0, data.length, blobType)__			assertNotNull(key)___			_			InputStream is = client.getInternal(jobId, key)___			byte[] receiveBuffer = new byte[data.length]__			int firstChunkLen = 50000__			BlobUtils.readFully(is, receiveBuffer, 0, firstChunkLen, null)__			BlobUtils.readFully(is, receiveBuffer, firstChunkLen, firstChunkLen, null)___			_			for (BlobServerConnection conn : getBlobServer().getCurrentActiveConnections()) {_				conn.close()__			}__			try {_				BlobUtils.readFully(is, receiveBuffer, 2 * firstChunkLen, data.length - 2 * firstChunkLen, null)__				_				_				assertArrayEquals(data, receiveBuffer)__			}_			catch (IOException e) {_				_			}_		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,file,download,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,get,fails,during,streaming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,try,blob,client,client,new,blob,client,new,inet,socket,address,localhost,get,blob,server,get,port,get,blob,client,config,byte,data,new,byte,5000000,random,rnd,new,random,rnd,next,bytes,data,blob,key,key,client,put,buffer,job,id,data,0,data,length,blob,type,assert,not,null,key,input,stream,is,client,get,internal,job,id,key,byte,receive,buffer,new,byte,data,length,int,first,chunk,len,50000,blob,utils,read,fully,is,receive,buffer,0,first,chunk,len,null,blob,utils,read,fully,is,receive,buffer,first,chunk,len,first,chunk,len,null,for,blob,server,connection,conn,get,blob,server,get,current,active,connections,conn,close,try,blob,utils,read,fully,is,receive,buffer,2,first,chunk,len,data,length,2,first,chunk,len,null,assert,array,equals,data,receive,buffer,catch,ioexception,e
BlobClientTest -> private void testGetFailsDuringStreaming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1515428991;Checks the correct result if a GET operation fails during the file download.__@param jobId_job ID or <tt>null</tt> if job-unrelated_@param blobType_whether the BLOB should become permanent or transient;private void testGetFailsDuringStreaming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {__		try (BlobClient client = new BlobClient(_			new InetSocketAddress("localhost", getBlobServer().getPort()), getBlobClientConfig())) {__			byte[] data = new byte[5000000]__			Random rnd = new Random()__			rnd.nextBytes(data)___			_			BlobKey key = client.putBuffer(jobId, data, 0, data.length, blobType)__			assertNotNull(key)___			_			InputStream is = client.getInternal(jobId, key)___			byte[] receiveBuffer = new byte[data.length]__			int firstChunkLen = 50000__			BlobUtils.readFully(is, receiveBuffer, 0, firstChunkLen, null)__			BlobUtils.readFully(is, receiveBuffer, firstChunkLen, firstChunkLen, null)___			_			for (BlobServerConnection conn : getBlobServer().getCurrentActiveConnections()) {_				conn.close()__			}__			try {_				BlobUtils.readFully(is, receiveBuffer, 2 * firstChunkLen, data.length - 2 * firstChunkLen, null)__				_				_				assertArrayEquals(data, receiveBuffer)__			}_			catch (IOException e) {_				_			}_		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,file,download,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,get,fails,during,streaming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,try,blob,client,client,new,blob,client,new,inet,socket,address,localhost,get,blob,server,get,port,get,blob,client,config,byte,data,new,byte,5000000,random,rnd,new,random,rnd,next,bytes,data,blob,key,key,client,put,buffer,job,id,data,0,data,length,blob,type,assert,not,null,key,input,stream,is,client,get,internal,job,id,key,byte,receive,buffer,new,byte,data,length,int,first,chunk,len,50000,blob,utils,read,fully,is,receive,buffer,0,first,chunk,len,null,blob,utils,read,fully,is,receive,buffer,first,chunk,len,first,chunk,len,null,for,blob,server,connection,conn,get,blob,server,get,current,active,connections,conn,close,try,blob,utils,read,fully,is,receive,buffer,2,first,chunk,len,data,length,2,first,chunk,len,null,assert,array,equals,data,receive,buffer,catch,ioexception,e
BlobClientTest -> private void testGetFailsDuringStreaming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1525420604;Checks the correct result if a GET operation fails during the file download.__@param jobId_job ID or <tt>null</tt> if job-unrelated_@param blobType_whether the BLOB should become permanent or transient;private void testGetFailsDuringStreaming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {__		try (BlobClient client = new BlobClient(_			new InetSocketAddress("localhost", getBlobServer().getPort()), getBlobClientConfig())) {__			byte[] data = new byte[5000000]__			Random rnd = new Random()__			rnd.nextBytes(data)___			_			BlobKey key = client.putBuffer(jobId, data, 0, data.length, blobType)__			assertNotNull(key)___			_			InputStream is = client.getInternal(jobId, key)___			byte[] receiveBuffer = new byte[data.length]__			int firstChunkLen = 50000__			BlobUtils.readFully(is, receiveBuffer, 0, firstChunkLen, null)__			BlobUtils.readFully(is, receiveBuffer, firstChunkLen, firstChunkLen, null)___			_			for (BlobServerConnection conn : getBlobServer().getCurrentActiveConnections()) {_				conn.close()__			}__			try {_				BlobUtils.readFully(is, receiveBuffer, 2 * firstChunkLen, data.length - 2 * firstChunkLen, null)__				_				_				assertArrayEquals(data, receiveBuffer)__			}_			catch (IOException e) {_				_			}_		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,file,download,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,get,fails,during,streaming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,try,blob,client,client,new,blob,client,new,inet,socket,address,localhost,get,blob,server,get,port,get,blob,client,config,byte,data,new,byte,5000000,random,rnd,new,random,rnd,next,bytes,data,blob,key,key,client,put,buffer,job,id,data,0,data,length,blob,type,assert,not,null,key,input,stream,is,client,get,internal,job,id,key,byte,receive,buffer,new,byte,data,length,int,first,chunk,len,50000,blob,utils,read,fully,is,receive,buffer,0,first,chunk,len,null,blob,utils,read,fully,is,receive,buffer,first,chunk,len,first,chunk,len,null,for,blob,server,connection,conn,get,blob,server,get,current,active,connections,conn,close,try,blob,utils,read,fully,is,receive,buffer,2,first,chunk,len,data,length,2,first,chunk,len,null,assert,array,equals,data,receive,buffer,catch,ioexception,e
BlobClientTest -> private void testGetFailsDuringStreaming(@Nullable final JobID jobId, BlobKey.BlobType blobType) 			throws IOException;1529583969;Checks the correct result if a GET operation fails during the file download.__@param jobId_job ID or <tt>null</tt> if job-unrelated_@param blobType_whether the BLOB should become permanent or transient;private void testGetFailsDuringStreaming(@Nullable final JobID jobId, BlobKey.BlobType blobType)_			throws IOException {__		try (BlobClient client = new BlobClient(_			new InetSocketAddress("localhost", getBlobServer().getPort()), getBlobClientConfig())) {__			byte[] data = new byte[5000000]__			Random rnd = new Random()__			rnd.nextBytes(data)___			_			BlobKey key = client.putBuffer(jobId, data, 0, data.length, blobType)__			assertNotNull(key)___			_			InputStream is = client.getInternal(jobId, key)___			byte[] receiveBuffer = new byte[data.length]__			int firstChunkLen = 50000__			BlobUtils.readFully(is, receiveBuffer, 0, firstChunkLen, null)__			BlobUtils.readFully(is, receiveBuffer, firstChunkLen, firstChunkLen, null)___			_			for (BlobServerConnection conn : getBlobServer().getCurrentActiveConnections()) {_				conn.close()__			}__			try {_				BlobUtils.readFully(is, receiveBuffer, 2 * firstChunkLen, data.length - 2 * firstChunkLen, null)__				_				_				assertArrayEquals(data, receiveBuffer)__			}_			catch (IOException e) {_				_			}_		}_	};checks,the,correct,result,if,a,get,operation,fails,during,the,file,download,param,job,id,job,id,or,tt,null,tt,if,job,unrelated,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,get,fails,during,streaming,nullable,final,job,id,job,id,blob,key,blob,type,blob,type,throws,ioexception,try,blob,client,client,new,blob,client,new,inet,socket,address,localhost,get,blob,server,get,port,get,blob,client,config,byte,data,new,byte,5000000,random,rnd,new,random,rnd,next,bytes,data,blob,key,key,client,put,buffer,job,id,data,0,data,length,blob,type,assert,not,null,key,input,stream,is,client,get,internal,job,id,key,byte,receive,buffer,new,byte,data,length,int,first,chunk,len,50000,blob,utils,read,fully,is,receive,buffer,0,first,chunk,len,null,blob,utils,read,fully,is,receive,buffer,first,chunk,len,first,chunk,len,null,for,blob,server,connection,conn,get,blob,server,get,current,active,connections,conn,close,try,blob,utils,read,fully,is,receive,buffer,2,first,chunk,len,data,length,2,first,chunk,len,null,assert,array,equals,data,receive,buffer,catch,ioexception,e
BlobClientTest -> @AfterClass 	public static void stopServer() throws IOException;1495001929;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() throws IOException {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.close()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,throws,ioexception,if,null,close
BlobClientTest -> @AfterClass 	public static void stopServer() throws IOException;1499789965;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() throws IOException {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.close()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,throws,ioexception,if,null,close
BlobClientTest -> @AfterClass 	public static void stopServer() throws IOException;1502100084;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() throws IOException {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.close()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,throws,ioexception,if,null,close
BlobClientTest -> @AfterClass 	public static void stopServer() throws IOException;1502701584;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() throws IOException {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.close()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,throws,ioexception,if,null,close
BlobClientTest -> @AfterClass 	public static void stopServer() throws IOException;1503041358;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() throws IOException {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.close()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,throws,ioexception,if,null,close
BlobClientTest -> @AfterClass 	public static void stopServer() throws IOException;1503041372;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() throws IOException {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.close()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,throws,ioexception,if,null,close
BlobClientTest -> @AfterClass 	public static void stopServer() throws IOException;1507212387;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() throws IOException {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.close()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,throws,ioexception,if,null,close
BlobClientTest -> @AfterClass 	public static void stopServer() throws IOException;1507212387;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() throws IOException {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.close()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,throws,ioexception,if,null,close
BlobClientTest -> @AfterClass 	public static void stopServer() throws IOException;1508138617;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() throws IOException {_		if (BLOB_SERVER != null) {_			BLOB_SERVER.close()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,throws,ioexception,if,null,close
BlobClientTest -> @AfterClass 	public static void stopServer() throws IOException;1515428991;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() throws IOException {_		if (blobServer != null) {_			blobServer.close()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,throws,ioexception,if,blob,server,null,blob,server,close
BlobClientTest -> @AfterClass 	public static void stopServer() throws IOException;1525420604;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() throws IOException {_		if (blobServer != null) {_			blobServer.close()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,throws,ioexception,if,blob,server,null,blob,server,close
BlobClientTest -> @AfterClass 	public static void stopServer() throws IOException;1529583969;Shuts the BLOB server down.;@AfterClass_	public static void stopServer() throws IOException {_		if (blobServer != null) {_			blobServer.close()__		}_	};shuts,the,blob,server,down;after,class,public,static,void,stop,server,throws,ioexception,if,blob,server,null,blob,server,close
BlobClientTest -> private static byte[] prepareTestFile(File file) throws IOException;1508138617;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular_byte patterns and computes the file's BLOB key.__@param file_the file to prepare for the unit tests__@return the BLOB key of the prepared file__@throws IOException_thrown if an I/O error occurs while writing to the test file;private static byte[] prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return md.digest()__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,byte,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,md,digest
BlobClientTest -> private static byte[] prepareTestFile(File file) throws IOException;1515428991;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular_byte patterns and computes the file's BLOB key.__@param file_the file to prepare for the unit tests__@return the BLOB key of the prepared file__@throws IOException_thrown if an I/O error occurs while writing to the test file;private static byte[] prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return md.digest()__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,byte,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,md,digest
BlobClientTest -> private static byte[] prepareTestFile(File file) throws IOException;1525420604;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular_byte patterns and computes the file's BLOB key.__@param file_the file to prepare for the unit tests__@return the BLOB key of the prepared file__@throws IOException_thrown if an I/O error occurs while writing to the test file;private static byte[] prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return md.digest()__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,byte,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,md,digest
BlobClientTest -> private static byte[] prepareTestFile(File file) throws IOException;1529583969;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular_byte patterns and computes the file's BLOB key.__@param file_the file to prepare for the unit tests__@return the BLOB key of the prepared file__@throws IOException_thrown if an I/O error occurs while writing to the test file;private static byte[] prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return md.digest()__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,byte,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,md,digest
BlobClientTest -> private static BlobKey prepareTestFile(File file) throws IOException;1424264340;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> private static BlobKey prepareTestFile(File file) throws IOException;1427784999;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> private static BlobKey prepareTestFile(File file) throws IOException;1468854249;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> private static BlobKey prepareTestFile(File file) throws IOException;1476696544;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> private static BlobKey prepareTestFile(File file) throws IOException;1495001929;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> private static BlobKey prepareTestFile(File file) throws IOException;1499789965;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> private static BlobKey prepareTestFile(File file) throws IOException;1502100084;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> private static BlobKey prepareTestFile(File file) throws IOException;1502701584;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> private static BlobKey prepareTestFile(File file) throws IOException;1503041358;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> private static BlobKey prepareTestFile(File file) throws IOException;1503041372;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> private static BlobKey prepareTestFile(File file) throws IOException;1507212387;Prepares a test file for the unit tests, i.e. the methods fills the file with a particular byte patterns and_computes the file's BLOB key.__@param file_the file to prepare for the unit tests_@return the BLOB key of the prepared file_@throws IOException_thrown if an I/O error occurs while writing to the test file;private static BlobKey prepareTestFile(File file) throws IOException {__		MessageDigest md = BlobUtils.createMessageDigest()___		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		FileOutputStream fos = null__		try {_			fos = new FileOutputStream(file)___			for (int i = 0_ i < 20_ ++i) {_				fos.write(buf)__				md.update(buf)__			}__		} finally {_			if (fos != null) {_				fos.close()__			}_		}__		return new BlobKey(md.digest())__	};prepares,a,test,file,for,the,unit,tests,i,e,the,methods,fills,the,file,with,a,particular,byte,patterns,and,computes,the,file,s,blob,key,param,file,the,file,to,prepare,for,the,unit,tests,return,the,blob,key,of,the,prepared,file,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,test,file;private,static,blob,key,prepare,test,file,file,file,throws,ioexception,message,digest,md,blob,utils,create,message,digest,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,file,output,stream,fos,null,try,fos,new,file,output,stream,file,for,int,i,0,i,20,i,fos,write,buf,md,update,buf,finally,if,fos,null,fos,close,return,new,blob,key,md,digest
BlobClientTest -> static void validateGetAndClose(final InputStream inputStream, final byte[] buf) throws IOException;1503041358;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param inputStream_the input stream returned from the GET operation (will be closed by this method)_@param buf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;static void validateGetAndClose(final InputStream inputStream, final byte[] buf) throws IOException {_		try {_			byte[] receivedBuffer = new byte[buf.length]___			int bytesReceived = 0___			while (true) {__				final int read = inputStream_					.read(receivedBuffer, bytesReceived, receivedBuffer.length - bytesReceived)__				if (read < 0) {_					throw new EOFException()__				}_				bytesReceived += read___				if (bytesReceived == receivedBuffer.length) {_					assertEquals(-1, inputStream.read())__					assertArrayEquals(buf, receivedBuffer)__					return__				}_			}_		} finally {_			inputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;static,void,validate,get,and,close,final,input,stream,input,stream,final,byte,buf,throws,ioexception,try,byte,received,buffer,new,byte,buf,length,int,bytes,received,0,while,true,final,int,read,input,stream,read,received,buffer,bytes,received,received,buffer,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,received,buffer,length,assert,equals,1,input,stream,read,assert,array,equals,buf,received,buffer,return,finally,input,stream,close
BlobClientTest -> static void validateGetAndClose(final InputStream inputStream, final byte[] buf) throws IOException;1503041372;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified buffer.__@param inputStream_the input stream returned from the GET operation (will be closed by this method)_@param buf_the buffer to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream;static void validateGetAndClose(final InputStream inputStream, final byte[] buf) throws IOException {_		try {_			byte[] receivedBuffer = new byte[buf.length]___			int bytesReceived = 0___			while (true) {__				final int read = inputStream_					.read(receivedBuffer, bytesReceived, receivedBuffer.length - bytesReceived)__				if (read < 0) {_					throw new EOFException()__				}_				bytesReceived += read___				if (bytesReceived == receivedBuffer.length) {_					assertEquals(-1, inputStream.read())__					assertArrayEquals(buf, receivedBuffer)__					return__				}_			}_		} finally {_			inputStream.close()__		}_	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,buffer,param,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,buf,the,buffer,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream;static,void,validate,get,and,close,final,input,stream,input,stream,final,byte,buf,throws,ioexception,try,byte,received,buffer,new,byte,buf,length,int,bytes,received,0,while,true,final,int,read,input,stream,read,received,buffer,bytes,received,received,buffer,length,bytes,received,if,read,0,throw,new,eofexception,bytes,received,read,if,bytes,received,received,buffer,length,assert,equals,1,input,stream,read,assert,array,equals,buf,received,buffer,return,finally,input,stream,close
BlobClientTest -> @Test 	public void testContentAddressableStream();1412605211;Tests the PUT/GET operations for content-addressable streams.;@Test_	public void testContentAddressableStream() {__		try {__			final File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()__			final BlobKey origKey = prepareTestFile(testFile)___			BlobClient client = null__			InputStream is = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getServerPort())__				client = new BlobClient(serverAddress)___				_				is = new FileInputStream(testFile)__				final BlobKey receivedKey = client.put(is)__				assertEquals(origKey, receivedKey)___				is.close()__				is = null___				_				is = client.get(receivedKey)__				validateGet(is, testFile)___			} finally {_				if (is != null) {_					is.close()__				}_				if (client != null) {_					client.close()__				}_			}__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}_	};tests,the,put,get,operations,for,content,addressable,streams;test,public,void,test,content,addressable,stream,try,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,final,blob,key,orig,key,prepare,test,file,test,file,blob,client,client,null,input,stream,is,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,server,port,client,new,blob,client,server,address,is,new,file,input,stream,test,file,final,blob,key,received,key,client,put,is,assert,equals,orig,key,received,key,is,close,is,null,is,client,get,received,key,validate,get,is,test,file,finally,if,is,null,is,close,if,client,null,client,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
BlobClientTest -> @Test 	public void testContentAddressableStream();1423683763;Tests the PUT/GET operations for content-addressable streams.;@Test_	public void testContentAddressableStream() {__		try {__			final File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()__			final BlobKey origKey = prepareTestFile(testFile)___			BlobClient client = null__			InputStream is = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getServerPort())__				client = new BlobClient(serverAddress)___				_				is = new FileInputStream(testFile)__				final BlobKey receivedKey = client.put(is)__				assertEquals(origKey, receivedKey)___				is.close()__				is = null___				_				is = client.get(receivedKey)__				validateGet(is, testFile)___			} finally {_				if (is != null) {_					is.close()__				}_				if (client != null) {_					client.close()__				}_			}__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}_	};tests,the,put,get,operations,for,content,addressable,streams;test,public,void,test,content,addressable,stream,try,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,final,blob,key,orig,key,prepare,test,file,test,file,blob,client,client,null,input,stream,is,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,server,port,client,new,blob,client,server,address,is,new,file,input,stream,test,file,final,blob,key,received,key,client,put,is,assert,equals,orig,key,received,key,is,close,is,null,is,client,get,received,key,validate,get,is,test,file,finally,if,is,null,is,close,if,client,null,client,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
BlobClientTest -> @Test 	public void testContentAddressableStream();1424264340;Tests the PUT/GET operations for content-addressable streams.;@Test_	public void testContentAddressableStream() {__		BlobClient client = null__		InputStream is = null___		try {_			File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()___			BlobKey origKey = prepareTestFile(testFile)___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__			client = new BlobClient(serverAddress)___			_			is = new FileInputStream(testFile)__			BlobKey receivedKey = client.put(is)__			assertEquals(origKey, receivedKey)___			is.close()__			is = null___			_			is = client.get(receivedKey)__			validateGet(is, testFile)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable t) {}_			}_			if (client != null) {_				try {_					client.close()__				} catch (Throwable t) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams;test,public,void,test,content,addressable,stream,blob,client,client,null,input,stream,is,null,try,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,blob,key,orig,key,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,is,new,file,input,stream,test,file,blob,key,received,key,client,put,is,assert,equals,orig,key,received,key,is,close,is,null,is,client,get,received,key,validate,get,is,test,file,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,is,null,try,is,close,catch,throwable,t,if,client,null,try,client,close,catch,throwable,t
BlobClientTest -> @Test 	public void testContentAddressableStream();1427784999;Tests the PUT/GET operations for content-addressable streams.;@Test_	public void testContentAddressableStream() {__		BlobClient client = null__		InputStream is = null___		try {_			File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()___			BlobKey origKey = prepareTestFile(testFile)___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__			client = new BlobClient(serverAddress)___			_			is = new FileInputStream(testFile)__			BlobKey receivedKey = client.put(is)__			assertEquals(origKey, receivedKey)___			is.close()__			is = null___			_			is = client.get(receivedKey)__			validateGet(is, testFile)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable t) {}_			}_			if (client != null) {_				try {_					client.close()__				} catch (Throwable t) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams;test,public,void,test,content,addressable,stream,blob,client,client,null,input,stream,is,null,try,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,blob,key,orig,key,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,is,new,file,input,stream,test,file,blob,key,received,key,client,put,is,assert,equals,orig,key,received,key,is,close,is,null,is,client,get,received,key,validate,get,is,test,file,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,is,null,try,is,close,catch,throwable,t,if,client,null,try,client,close,catch,throwable,t
BlobClientTest -> @Test 	public void testContentAddressableStream();1468854249;Tests the PUT/GET operations for content-addressable streams.;@Test_	public void testContentAddressableStream() {__		BlobClient client = null__		InputStream is = null___		try {_			File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()___			BlobKey origKey = prepareTestFile(testFile)___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__			client = new BlobClient(serverAddress)___			_			is = new FileInputStream(testFile)__			BlobKey receivedKey = client.put(is)__			assertEquals(origKey, receivedKey)___			is.close()__			is = null___			_			is = client.get(receivedKey)__			validateGet(is, testFile)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable t) {}_			}_			if (client != null) {_				try {_					client.close()__				} catch (Throwable t) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams;test,public,void,test,content,addressable,stream,blob,client,client,null,input,stream,is,null,try,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,blob,key,orig,key,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,is,new,file,input,stream,test,file,blob,key,received,key,client,put,is,assert,equals,orig,key,received,key,is,close,is,null,is,client,get,received,key,validate,get,is,test,file,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,is,null,try,is,close,catch,throwable,t,if,client,null,try,client,close,catch,throwable,t
BlobClientTest -> @Test 	public void testContentAddressableStream();1476696544;Tests the PUT/GET operations for content-addressable streams.;@Test_	public void testContentAddressableStream() {__		BlobClient client = null__		InputStream is = null___		try {_			File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()___			BlobKey origKey = prepareTestFile(testFile)___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__			client = new BlobClient(serverAddress, blobServiceConfig)___			_			is = new FileInputStream(testFile)__			BlobKey receivedKey = client.put(is)__			assertEquals(origKey, receivedKey)___			is.close()__			is = null___			_			is = client.get(receivedKey)__			validateGet(is, testFile)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable t) {}_			}_			if (client != null) {_				try {_					client.close()__				} catch (Throwable t) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams;test,public,void,test,content,addressable,stream,blob,client,client,null,input,stream,is,null,try,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,blob,key,orig,key,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,service,config,is,new,file,input,stream,test,file,blob,key,received,key,client,put,is,assert,equals,orig,key,received,key,is,close,is,null,is,client,get,received,key,validate,get,is,test,file,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,is,null,try,is,close,catch,throwable,t,if,client,null,try,client,close,catch,throwable,t
BlobClientTest -> @Test 	public void testContentAddressableStream();1495001929;Tests the PUT/GET operations for content-addressable streams.;@Test_	public void testContentAddressableStream() {__		BlobClient client = null__		InputStream is = null___		try {_			File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()___			BlobKey origKey = prepareTestFile(testFile)___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__			client = new BlobClient(serverAddress, blobServiceConfig)___			_			is = new FileInputStream(testFile)__			BlobKey receivedKey = client.put(is)__			assertEquals(origKey, receivedKey)___			is.close()__			is = null___			_			is = client.get(receivedKey)__			validateGet(is, testFile)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable t) {}_			}_			if (client != null) {_				try {_					client.close()__				} catch (Throwable t) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams;test,public,void,test,content,addressable,stream,blob,client,client,null,input,stream,is,null,try,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,blob,key,orig,key,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,service,config,is,new,file,input,stream,test,file,blob,key,received,key,client,put,is,assert,equals,orig,key,received,key,is,close,is,null,is,client,get,received,key,validate,get,is,test,file,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,is,null,try,is,close,catch,throwable,t,if,client,null,try,client,close,catch,throwable,t
BlobClientTest -> @Test 	public void testContentAddressableStream();1499789965;Tests the PUT/GET operations for content-addressable streams.;@Test_	public void testContentAddressableStream() {__		BlobClient client = null__		InputStream is = null___		try {_			File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()___			BlobKey origKey = prepareTestFile(testFile)___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__			client = new BlobClient(serverAddress, blobServiceConfig)___			_			is = new FileInputStream(testFile)__			BlobKey receivedKey = client.put(is)__			assertEquals(origKey, receivedKey)___			is.close()__			is = null___			_			is = client.get(receivedKey)__			validateGet(is, testFile)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable t) {}_			}_			if (client != null) {_				try {_					client.close()__				} catch (Throwable t) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams;test,public,void,test,content,addressable,stream,blob,client,client,null,input,stream,is,null,try,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,blob,key,orig,key,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,service,config,is,new,file,input,stream,test,file,blob,key,received,key,client,put,is,assert,equals,orig,key,received,key,is,close,is,null,is,client,get,received,key,validate,get,is,test,file,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,is,null,try,is,close,catch,throwable,t,if,client,null,try,client,close,catch,throwable,t
BlobClientTest -> @Test 	public void testContentAddressableStream();1502100084;Tests the PUT/GET operations for content-addressable streams.;@Test_	public void testContentAddressableStream() {__		BlobClient client = null__		InputStream is = null___		try {_			File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()___			BlobKey origKey = prepareTestFile(testFile)___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", getBlobServer().getPort())__			client = new BlobClient(serverAddress, getBlobClientConfig())___			_			is = new FileInputStream(testFile)__			BlobKey receivedKey = client.put(is)__			assertEquals(origKey, receivedKey)___			is.close()__			is = null___			_			is = client.get(receivedKey)__			validateGet(is, testFile)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable ignored) {}_			}_			if (client != null) {_				try {_					client.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams;test,public,void,test,content,addressable,stream,blob,client,client,null,input,stream,is,null,try,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,blob,key,orig,key,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,blob,server,get,port,client,new,blob,client,server,address,get,blob,client,config,is,new,file,input,stream,test,file,blob,key,received,key,client,put,is,assert,equals,orig,key,received,key,is,close,is,null,is,client,get,received,key,validate,get,is,test,file,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,is,null,try,is,close,catch,throwable,ignored,if,client,null,try,client,close,catch,throwable,ignored
BlobClientTest -> @Test 	public void testContentAddressableStream();1502701584;Tests the PUT/GET operations for content-addressable streams.;@Test_	public void testContentAddressableStream() {__		BlobClient client = null__		InputStream is = null___		try {_			File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()___			BlobKey origKey = prepareTestFile(testFile)___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", getBlobServer().getPort())__			client = new BlobClient(serverAddress, getBlobClientConfig())___			JobID jobId = new JobID()___			_			is = new FileInputStream(testFile)__			BlobKey receivedKey = client.put(is)__			assertEquals(origKey, receivedKey)__			_			is = new FileInputStream(testFile)__			receivedKey = client.put(jobId, is)__			assertEquals(origKey, receivedKey)___			is.close()__			is = null___			_			is = client.get(receivedKey)__			validateGet(is, testFile)__			is = client.get(jobId, receivedKey)__			validateGet(is, testFile)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable ignored) {}_			}_			if (client != null) {_				try {_					client.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams;test,public,void,test,content,addressable,stream,blob,client,client,null,input,stream,is,null,try,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,blob,key,orig,key,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,blob,server,get,port,client,new,blob,client,server,address,get,blob,client,config,job,id,job,id,new,job,id,is,new,file,input,stream,test,file,blob,key,received,key,client,put,is,assert,equals,orig,key,received,key,is,new,file,input,stream,test,file,received,key,client,put,job,id,is,assert,equals,orig,key,received,key,is,close,is,null,is,client,get,received,key,validate,get,is,test,file,is,client,get,job,id,received,key,validate,get,is,test,file,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,is,null,try,is,close,catch,throwable,ignored,if,client,null,try,client,close,catch,throwable,ignored
BlobClientTest -> @Test 	public void testContentAddressableStream();1503041358;Tests the PUT/GET operations for content-addressable streams.;@Test_	public void testContentAddressableStream() {__		BlobClient client = null__		InputStream is = null___		try {_			File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()___			BlobKey origKey = prepareTestFile(testFile)___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", getBlobServer().getPort())__			client = new BlobClient(serverAddress, getBlobClientConfig())___			JobID jobId = new JobID()___			_			is = new FileInputStream(testFile)__			BlobKey receivedKey = client.put(is)__			assertEquals(origKey, receivedKey)__			_			is = new FileInputStream(testFile)__			receivedKey = client.put(jobId, is)__			assertEquals(origKey, receivedKey)___			is.close()__			is = null___			_			validateGetAndClose(client.get(receivedKey), testFile)__			validateGetAndClose(client.get(jobId, receivedKey), testFile)__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable ignored) {}_			}_			if (client != null) {_				try {_					client.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams;test,public,void,test,content,addressable,stream,blob,client,client,null,input,stream,is,null,try,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,blob,key,orig,key,prepare,test,file,test,file,inet,socket,address,server,address,new,inet,socket,address,localhost,get,blob,server,get,port,client,new,blob,client,server,address,get,blob,client,config,job,id,job,id,new,job,id,is,new,file,input,stream,test,file,blob,key,received,key,client,put,is,assert,equals,orig,key,received,key,is,new,file,input,stream,test,file,received,key,client,put,job,id,is,assert,equals,orig,key,received,key,is,close,is,null,validate,get,and,close,client,get,received,key,test,file,validate,get,and,close,client,get,job,id,received,key,test,file,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,is,null,try,is,close,catch,throwable,ignored,if,client,null,try,client,close,catch,throwable,ignored
BlobClientTest -> private void testContentAddressableStream(BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1507212387;Tests the PUT/GET operations for content-addressable streams.__@param blobType_whether the BLOB should become permanent or transient;private void testContentAddressableStream(BlobKey.BlobType blobType)_			throws IOException, InterruptedException {__		File testFile = temporaryFolder.newFile()__		BlobKey origKey = prepareTestFile(testFile, blobType)___		InputStream is = null___		try (BlobClient client = new BlobClient(new InetSocketAddress("localhost", getBlobServer().getPort()), getBlobClientConfig())) {__			JobID jobId = new JobID()__			BlobKey receivedKey___			_			if (blobType == TRANSIENT_BLOB) {_				is = new FileInputStream(testFile)__				receivedKey = client.putInputStream(null, is, blobType)__				assertEquals(origKey, receivedKey)__			}__			_			is = new FileInputStream(testFile)__			receivedKey = client.putInputStream(jobId, is, blobType)__			assertEquals(origKey, receivedKey)___			is.close()__			is = null___			_			if (blobType == TRANSIENT_BLOB) {_				validateGetAndClose(client.getInternal(null, receivedKey), testFile)__				_				verifyDeletedEventually(getBlobServer(), null, receivedKey)__			}_			_			validateGetAndClose(client.getInternal(jobId, receivedKey), testFile)__			if (blobType == TRANSIENT_BLOB) {_				_				verifyDeletedEventually(getBlobServer(), jobId, receivedKey)__			}_		} finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,content,addressable,stream,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,file,test,file,temporary,folder,new,file,blob,key,orig,key,prepare,test,file,test,file,blob,type,input,stream,is,null,try,blob,client,client,new,blob,client,new,inet,socket,address,localhost,get,blob,server,get,port,get,blob,client,config,job,id,job,id,new,job,id,blob,key,received,key,if,blob,type,is,new,file,input,stream,test,file,received,key,client,put,input,stream,null,is,blob,type,assert,equals,orig,key,received,key,is,new,file,input,stream,test,file,received,key,client,put,input,stream,job,id,is,blob,type,assert,equals,orig,key,received,key,is,close,is,null,if,blob,type,validate,get,and,close,client,get,internal,null,received,key,test,file,verify,deleted,eventually,get,blob,server,null,received,key,validate,get,and,close,client,get,internal,job,id,received,key,test,file,if,blob,type,verify,deleted,eventually,get,blob,server,job,id,received,key,finally,if,is,null,try,is,close,catch,throwable,ignored
BlobClientTest -> private void testContentAddressableStream(BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1508138617;Tests the PUT/GET operations for content-addressable streams.__@param blobType_whether the BLOB should become permanent or transient;private void testContentAddressableStream(BlobKey.BlobType blobType)_			throws IOException, InterruptedException {__		File testFile = temporaryFolder.newFile()__		byte[] digest = prepareTestFile(testFile)___		InputStream is = null___		try (BlobClient client = new BlobClient(new InetSocketAddress("localhost", getBlobServer().getPort()), getBlobClientConfig())) {__			JobID jobId = new JobID()__			BlobKey receivedKey1 = null___			_			if (blobType == TRANSIENT_BLOB) {_				is = new FileInputStream(testFile)__				receivedKey1 = client.putInputStream(null, is, blobType)__				assertArrayEquals(digest, receivedKey1.getHash())__			}__			_			is = new FileInputStream(testFile)__			BlobKey receivedKey2 = client.putInputStream(jobId, is, blobType)___			is.close()__			is = null___			_			if (blobType == TRANSIENT_BLOB) {_				verifyKeyDifferentHashEquals(receivedKey1, receivedKey2)___				validateGetAndClose(client.getInternal(null, receivedKey1), testFile)__				_				verifyDeletedEventually(getBlobServer(), null, receivedKey1)__			}_			_			validateGetAndClose(client.getInternal(jobId, receivedKey2), testFile)__			if (blobType == TRANSIENT_BLOB) {_				_				verifyDeletedEventually(getBlobServer(), jobId, receivedKey2)__			}_		} finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,content,addressable,stream,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,file,test,file,temporary,folder,new,file,byte,digest,prepare,test,file,test,file,input,stream,is,null,try,blob,client,client,new,blob,client,new,inet,socket,address,localhost,get,blob,server,get,port,get,blob,client,config,job,id,job,id,new,job,id,blob,key,received,key1,null,if,blob,type,is,new,file,input,stream,test,file,received,key1,client,put,input,stream,null,is,blob,type,assert,array,equals,digest,received,key1,get,hash,is,new,file,input,stream,test,file,blob,key,received,key2,client,put,input,stream,job,id,is,blob,type,is,close,is,null,if,blob,type,verify,key,different,hash,equals,received,key1,received,key2,validate,get,and,close,client,get,internal,null,received,key1,test,file,verify,deleted,eventually,get,blob,server,null,received,key1,validate,get,and,close,client,get,internal,job,id,received,key2,test,file,if,blob,type,verify,deleted,eventually,get,blob,server,job,id,received,key2,finally,if,is,null,try,is,close,catch,throwable,ignored
BlobClientTest -> private void testContentAddressableStream(BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1515428991;Tests the PUT/GET operations for content-addressable streams.__@param blobType_whether the BLOB should become permanent or transient;private void testContentAddressableStream(BlobKey.BlobType blobType)_			throws IOException, InterruptedException {__		File testFile = temporaryFolder.newFile()__		byte[] digest = prepareTestFile(testFile)___		InputStream is = null___		try (BlobClient client = new BlobClient(new InetSocketAddress("localhost", getBlobServer().getPort()), getBlobClientConfig())) {__			JobID jobId = new JobID()__			BlobKey receivedKey1 = null___			_			if (blobType == TRANSIENT_BLOB) {_				is = new FileInputStream(testFile)__				receivedKey1 = client.putInputStream(null, is, blobType)__				assertArrayEquals(digest, receivedKey1.getHash())__			}__			_			is = new FileInputStream(testFile)__			BlobKey receivedKey2 = client.putInputStream(jobId, is, blobType)___			is.close()__			is = null___			_			if (blobType == TRANSIENT_BLOB) {_				verifyKeyDifferentHashEquals(receivedKey1, receivedKey2)___				validateGetAndClose(client.getInternal(null, receivedKey1), testFile)__				_				verifyDeletedEventually(getBlobServer(), null, receivedKey1)__			}_			_			validateGetAndClose(client.getInternal(jobId, receivedKey2), testFile)__			if (blobType == TRANSIENT_BLOB) {_				_				verifyDeletedEventually(getBlobServer(), jobId, receivedKey2)__			}_		} finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,content,addressable,stream,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,file,test,file,temporary,folder,new,file,byte,digest,prepare,test,file,test,file,input,stream,is,null,try,blob,client,client,new,blob,client,new,inet,socket,address,localhost,get,blob,server,get,port,get,blob,client,config,job,id,job,id,new,job,id,blob,key,received,key1,null,if,blob,type,is,new,file,input,stream,test,file,received,key1,client,put,input,stream,null,is,blob,type,assert,array,equals,digest,received,key1,get,hash,is,new,file,input,stream,test,file,blob,key,received,key2,client,put,input,stream,job,id,is,blob,type,is,close,is,null,if,blob,type,verify,key,different,hash,equals,received,key1,received,key2,validate,get,and,close,client,get,internal,null,received,key1,test,file,verify,deleted,eventually,get,blob,server,null,received,key1,validate,get,and,close,client,get,internal,job,id,received,key2,test,file,if,blob,type,verify,deleted,eventually,get,blob,server,job,id,received,key2,finally,if,is,null,try,is,close,catch,throwable,ignored
BlobClientTest -> private void testContentAddressableStream(BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1525420604;Tests the PUT/GET operations for content-addressable streams.__@param blobType_whether the BLOB should become permanent or transient;private void testContentAddressableStream(BlobKey.BlobType blobType)_			throws IOException, InterruptedException {__		File testFile = temporaryFolder.newFile()__		byte[] digest = prepareTestFile(testFile)___		InputStream is = null___		try (BlobClient client = new BlobClient(new InetSocketAddress("localhost", getBlobServer().getPort()), getBlobClientConfig())) {__			JobID jobId = new JobID()__			BlobKey receivedKey1 = null___			_			if (blobType == TRANSIENT_BLOB) {_				is = new FileInputStream(testFile)__				receivedKey1 = client.putInputStream(null, is, blobType)__				assertArrayEquals(digest, receivedKey1.getHash())__			}__			_			is = new FileInputStream(testFile)__			BlobKey receivedKey2 = client.putInputStream(jobId, is, blobType)___			is.close()__			is = null___			_			if (blobType == TRANSIENT_BLOB) {_				verifyKeyDifferentHashEquals(receivedKey1, receivedKey2)___				validateGetAndClose(client.getInternal(null, receivedKey1), testFile)__				_				verifyDeletedEventually(getBlobServer(), null, receivedKey1)__			}_			_			validateGetAndClose(client.getInternal(jobId, receivedKey2), testFile)__			if (blobType == TRANSIENT_BLOB) {_				_				verifyDeletedEventually(getBlobServer(), jobId, receivedKey2)__			}_		} finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,content,addressable,stream,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,file,test,file,temporary,folder,new,file,byte,digest,prepare,test,file,test,file,input,stream,is,null,try,blob,client,client,new,blob,client,new,inet,socket,address,localhost,get,blob,server,get,port,get,blob,client,config,job,id,job,id,new,job,id,blob,key,received,key1,null,if,blob,type,is,new,file,input,stream,test,file,received,key1,client,put,input,stream,null,is,blob,type,assert,array,equals,digest,received,key1,get,hash,is,new,file,input,stream,test,file,blob,key,received,key2,client,put,input,stream,job,id,is,blob,type,is,close,is,null,if,blob,type,verify,key,different,hash,equals,received,key1,received,key2,validate,get,and,close,client,get,internal,null,received,key1,test,file,verify,deleted,eventually,get,blob,server,null,received,key1,validate,get,and,close,client,get,internal,job,id,received,key2,test,file,if,blob,type,verify,deleted,eventually,get,blob,server,job,id,received,key2,finally,if,is,null,try,is,close,catch,throwable,ignored
BlobClientTest -> private void testContentAddressableStream(BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1529583969;Tests the PUT/GET operations for content-addressable streams.__@param blobType_whether the BLOB should become permanent or transient;private void testContentAddressableStream(BlobKey.BlobType blobType)_			throws IOException, InterruptedException {__		File testFile = temporaryFolder.newFile()__		byte[] digest = prepareTestFile(testFile)___		InputStream is = null___		try (BlobClient client = new BlobClient(new InetSocketAddress("localhost", getBlobServer().getPort()), getBlobClientConfig())) {__			JobID jobId = new JobID()__			BlobKey receivedKey1 = null___			_			if (blobType == TRANSIENT_BLOB) {_				is = new FileInputStream(testFile)__				receivedKey1 = client.putInputStream(null, is, blobType)__				assertArrayEquals(digest, receivedKey1.getHash())__			}__			_			is = new FileInputStream(testFile)__			BlobKey receivedKey2 = client.putInputStream(jobId, is, blobType)___			is.close()__			is = null___			_			if (blobType == TRANSIENT_BLOB) {_				verifyKeyDifferentHashEquals(receivedKey1, receivedKey2)___				validateGetAndClose(client.getInternal(null, receivedKey1), testFile)__				_				verifyDeletedEventually(getBlobServer(), null, receivedKey1)__			}_			_			validateGetAndClose(client.getInternal(jobId, receivedKey2), testFile)__			if (blobType == TRANSIENT_BLOB) {_				_				verifyDeletedEventually(getBlobServer(), jobId, receivedKey2)__			}_		} finally {_			if (is != null) {_				try {_					is.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,streams,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,content,addressable,stream,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,file,test,file,temporary,folder,new,file,byte,digest,prepare,test,file,test,file,input,stream,is,null,try,blob,client,client,new,blob,client,new,inet,socket,address,localhost,get,blob,server,get,port,get,blob,client,config,job,id,job,id,new,job,id,blob,key,received,key1,null,if,blob,type,is,new,file,input,stream,test,file,received,key1,client,put,input,stream,null,is,blob,type,assert,array,equals,digest,received,key1,get,hash,is,new,file,input,stream,test,file,blob,key,received,key2,client,put,input,stream,job,id,is,blob,type,is,close,is,null,if,blob,type,verify,key,different,hash,equals,received,key1,received,key2,validate,get,and,close,client,get,internal,null,received,key1,test,file,verify,deleted,eventually,get,blob,server,null,received,key1,validate,get,and,close,client,get,internal,job,id,received,key2,test,file,if,blob,type,verify,deleted,eventually,get,blob,server,job,id,received,key2,finally,if,is,null,try,is,close,catch,throwable,ignored
BlobClientTest -> @Test 	public void testRegularStream();1412605211;Tests the PUT/GET operations for regular (non-content-addressable) streams.;@Test_	public void testRegularStream() {__		final JobID jobID = JobID.generate()__		final String key = "testkey3"___		try {_			final File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()__			prepareTestFile(testFile)___			BlobClient client = null__			InputStream is = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getServerPort())__				client = new BlobClient(serverAddress)___				_				is = new FileInputStream(testFile)__				client.put(jobID, key, is)___				is.close()__				is = null___				_				is = client.get(jobID, key)__				validateGet(is, testFile)___			} finally {_				if (is != null) {_					is.close()__				}_				if (client != null) {_					client.close()__				}_			}__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,streams;test,public,void,test,regular,stream,final,job,id,job,id,job,id,generate,final,string,key,testkey3,try,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,blob,client,client,null,input,stream,is,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,server,port,client,new,blob,client,server,address,is,new,file,input,stream,test,file,client,put,job,id,key,is,is,close,is,null,is,client,get,job,id,key,validate,get,is,test,file,finally,if,is,null,is,close,if,client,null,client,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
BlobClientTest -> @Test 	public void testRegularStream();1423683763;Tests the PUT/GET operations for regular (non-content-addressable) streams.;@Test_	public void testRegularStream() {__		final JobID jobID = JobID.generate()__		final String key = "testkey3"___		try {_			final File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()__			prepareTestFile(testFile)___			BlobClient client = null__			InputStream is = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getServerPort())__				client = new BlobClient(serverAddress)___				_				is = new FileInputStream(testFile)__				client.put(jobID, key, is)___				is.close()__				is = null___				_				is = client.get(jobID, key)__				validateGet(is, testFile)___			} finally {_				if (is != null) {_					is.close()__				}_				if (client != null) {_					client.close()__				}_			}__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,streams;test,public,void,test,regular,stream,final,job,id,job,id,job,id,generate,final,string,key,testkey3,try,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,blob,client,client,null,input,stream,is,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,server,port,client,new,blob,client,server,address,is,new,file,input,stream,test,file,client,put,job,id,key,is,is,close,is,null,is,client,get,job,id,key,validate,get,is,test,file,finally,if,is,null,is,close,if,client,null,client,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
BlobClientTest -> @Test 	public void testRegularStream();1424264340;Tests the PUT/GET operations for regular (non-content-addressable) streams.;@Test_	public void testRegularStream() {__		final JobID jobID = JobID.generate()__		final String key = "testkey3"___		try {_			final File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()__			prepareTestFile(testFile)___			BlobClient client = null__			InputStream is = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__				client = new BlobClient(serverAddress)___				_				is = new FileInputStream(testFile)__				client.put(jobID, key, is)___				is.close()__				is = null___				_				is = client.get(jobID, key)__				validateGet(is, testFile)___			}_			finally {_				if (is != null) {_					is.close()__				}_				if (client != null) {_					client.close()__				}_			}__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,streams;test,public,void,test,regular,stream,final,job,id,job,id,job,id,generate,final,string,key,testkey3,try,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,blob,client,client,null,input,stream,is,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,is,new,file,input,stream,test,file,client,put,job,id,key,is,is,close,is,null,is,client,get,job,id,key,validate,get,is,test,file,finally,if,is,null,is,close,if,client,null,client,close,catch,exception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> @Test 	public void testRegularStream();1427784999;Tests the PUT/GET operations for regular (non-content-addressable) streams.;@Test_	public void testRegularStream() {__		final JobID jobID = JobID.generate()__		final String key = "testkey3"___		try {_			final File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()__			prepareTestFile(testFile)___			BlobClient client = null__			InputStream is = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__				client = new BlobClient(serverAddress)___				_				is = new FileInputStream(testFile)__				client.put(jobID, key, is)___				is.close()__				is = null___				_				is = client.get(jobID, key)__				validateGet(is, testFile)___			}_			finally {_				if (is != null) {_					is.close()__				}_				if (client != null) {_					client.close()__				}_			}__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,streams;test,public,void,test,regular,stream,final,job,id,job,id,job,id,generate,final,string,key,testkey3,try,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,blob,client,client,null,input,stream,is,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,is,new,file,input,stream,test,file,client,put,job,id,key,is,is,close,is,null,is,client,get,job,id,key,validate,get,is,test,file,finally,if,is,null,is,close,if,client,null,client,close,catch,exception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> @Test 	public void testRegularStream();1468854249;Tests the PUT/GET operations for regular (non-content-addressable) streams.;@Test_	public void testRegularStream() {__		final JobID jobID = JobID.generate()__		final String key = "testkey3"___		try {_			final File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()__			prepareTestFile(testFile)___			BlobClient client = null__			InputStream is = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__				client = new BlobClient(serverAddress)___				_				is = new FileInputStream(testFile)__				client.put(jobID, key, is)___				is.close()__				is = null___				_				is = client.get(jobID, key)__				validateGet(is, testFile)___			}_			finally {_				if (is != null) {_					is.close()__				}_				if (client != null) {_					client.close()__				}_			}__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,streams;test,public,void,test,regular,stream,final,job,id,job,id,job,id,generate,final,string,key,testkey3,try,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,blob,client,client,null,input,stream,is,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,is,new,file,input,stream,test,file,client,put,job,id,key,is,is,close,is,null,is,client,get,job,id,key,validate,get,is,test,file,finally,if,is,null,is,close,if,client,null,client,close,catch,exception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> @Test 	public void testRegularStream();1476696544;Tests the PUT/GET operations for regular (non-content-addressable) streams.;@Test_	public void testRegularStream() {__		final JobID jobID = JobID.generate()__		final String key = "testkey3"___		try {_			final File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()__			prepareTestFile(testFile)___			BlobClient client = null__			InputStream is = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__				client = new BlobClient(serverAddress, blobServiceConfig)___				_				is = new FileInputStream(testFile)__				client.put(jobID, key, is)___				is.close()__				is = null___				_				is = client.get(jobID, key)__				validateGet(is, testFile)___			}_			finally {_				if (is != null) {_					is.close()__				}_				if (client != null) {_					client.close()__				}_			}__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,streams;test,public,void,test,regular,stream,final,job,id,job,id,job,id,generate,final,string,key,testkey3,try,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,blob,client,client,null,input,stream,is,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,service,config,is,new,file,input,stream,test,file,client,put,job,id,key,is,is,close,is,null,is,client,get,job,id,key,validate,get,is,test,file,finally,if,is,null,is,close,if,client,null,client,close,catch,exception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> @Test 	public void testRegularStream();1495001929;Tests the PUT/GET operations for regular (non-content-addressable) streams.;@Test_	public void testRegularStream() {__		final JobID jobID = JobID.generate()__		final String key = "testkey3"___		try {_			final File testFile = File.createTempFile("testfile", ".dat")__			testFile.deleteOnExit()__			prepareTestFile(testFile)___			BlobClient client = null__			InputStream is = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__				client = new BlobClient(serverAddress, blobServiceConfig)___				_				is = new FileInputStream(testFile)__				client.put(jobID, key, is)___				is.close()__				is = null___				_				is = client.get(jobID, key)__				validateGet(is, testFile)___			}_			finally {_				if (is != null) {_					is.close()__				}_				if (client != null) {_					client.close()__				}_			}__		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,streams;test,public,void,test,regular,stream,final,job,id,job,id,job,id,generate,final,string,key,testkey3,try,final,file,test,file,file,create,temp,file,testfile,dat,test,file,delete,on,exit,prepare,test,file,test,file,blob,client,client,null,input,stream,is,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,service,config,is,new,file,input,stream,test,file,client,put,job,id,key,is,is,close,is,null,is,client,get,job,id,key,validate,get,is,test,file,finally,if,is,null,is,close,if,client,null,client,close,catch,exception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> @BeforeClass 	public static void startServer();1412605211;Starts the BLOB server.;@BeforeClass_	public static void startServer() {__		try {_			BLOB_SERVER = new BlobServer()__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}__	};starts,the,blob,server;before,class,public,static,void,start,server,try,new,blob,server,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
BlobClientTest -> @BeforeClass 	public static void startServer();1423683763;Starts the BLOB server.;@BeforeClass_	public static void startServer() {_		try {_			BLOB_SERVER = new BlobServer(new Configuration())__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}__	};starts,the,blob,server;before,class,public,static,void,start,server,try,new,blob,server,new,configuration,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
BlobClientTest -> @BeforeClass 	public static void startServer();1424264340;Starts the BLOB server.;@BeforeClass_	public static void startServer() {_		try {_			BLOB_SERVER = new BlobServer(new Configuration())__		}_		catch (IOException e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};starts,the,blob,server;before,class,public,static,void,start,server,try,new,blob,server,new,configuration,catch,ioexception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> @BeforeClass 	public static void startServer();1427784999;Starts the BLOB server.;@BeforeClass_	public static void startServer() {_		try {_			BLOB_SERVER = new BlobServer(new Configuration())__		}_		catch (IOException e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};starts,the,blob,server;before,class,public,static,void,start,server,try,new,blob,server,new,configuration,catch,ioexception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> @BeforeClass 	public static void startServer();1468854249;Starts the BLOB server.;@BeforeClass_	public static void startServer() {_		try {_			BLOB_SERVER = new BlobServer(new Configuration())__		}_		catch (IOException e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};starts,the,blob,server;before,class,public,static,void,start,server,try,new,blob,server,new,configuration,catch,ioexception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> @BeforeClass 	public static void startServer();1476696544;Starts the BLOB server.;@BeforeClass_	public static void startServer() {_		try {_			blobServiceConfig = new Configuration()__			BLOB_SERVER = new BlobServer(blobServiceConfig)__		}_		catch (IOException e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};starts,the,blob,server;before,class,public,static,void,start,server,try,blob,service,config,new,configuration,new,blob,server,blob,service,config,catch,ioexception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> private void testContentAddressableBuffer(BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1507212387;Tests the PUT/GET operations for content-addressable buffers.__@param blobType_whether the BLOB should become permanent or transient;private void testContentAddressableBuffer(BlobKey.BlobType blobType)_			throws IOException, InterruptedException {_		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			BlobKey origKey = BlobKey.createKey(blobType, md.digest())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", getBlobServer().getPort())__			client = new BlobClient(serverAddress, getBlobClientConfig())___			JobID jobId = new JobID()__			BlobKey receivedKey___			_			if (blobType == TRANSIENT_BLOB) {_				receivedKey = client.putBuffer(null, testBuffer, 0, testBuffer.length, blobType)__				assertEquals(origKey, receivedKey)__			}__			_			receivedKey = client.putBuffer(jobId, testBuffer, 0, testBuffer.length, blobType)__			assertEquals(origKey, receivedKey)___			_			if (blobType == TRANSIENT_BLOB) {_				validateGetAndClose(client.getInternal(null, receivedKey), testBuffer)__				_				verifyDeletedEventually(getBlobServer(), null, receivedKey)__			}_			_			validateGetAndClose(client.getInternal(jobId, receivedKey), testBuffer)__			if (blobType == TRANSIENT_BLOB) {_				_				verifyDeletedEventually(getBlobServer(), jobId, receivedKey)__			}__			_			try (InputStream ignored = client.getInternal(null, BlobKey.createKey(blobType))) {_				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}__			_			_			client = new BlobClient(serverAddress, getBlobClientConfig())__			try (InputStream ignored = client.getInternal(jobId, BlobKey.createKey(blobType))) {_				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,content,addressable,buffer,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,blob,key,orig,key,blob,key,create,key,blob,type,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,blob,server,get,port,client,new,blob,client,server,address,get,blob,client,config,job,id,job,id,new,job,id,blob,key,received,key,if,blob,type,received,key,client,put,buffer,null,test,buffer,0,test,buffer,length,blob,type,assert,equals,orig,key,received,key,received,key,client,put,buffer,job,id,test,buffer,0,test,buffer,length,blob,type,assert,equals,orig,key,received,key,if,blob,type,validate,get,and,close,client,get,internal,null,received,key,test,buffer,verify,deleted,eventually,get,blob,server,null,received,key,validate,get,and,close,client,get,internal,job,id,received,key,test,buffer,if,blob,type,verify,deleted,eventually,get,blob,server,job,id,received,key,try,input,stream,ignored,client,get,internal,null,blob,key,create,key,blob,type,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,client,new,blob,client,server,address,get,blob,client,config,try,input,stream,ignored,client,get,internal,job,id,blob,key,create,key,blob,type,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,finally,if,client,null,try,client,close,catch,throwable,ignored
BlobClientTest -> private void testContentAddressableBuffer(BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1508138617;Tests the PUT/GET operations for content-addressable buffers.__@param blobType_whether the BLOB should become permanent or transient;private void testContentAddressableBuffer(BlobKey.BlobType blobType)_			throws IOException, InterruptedException {_		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			byte[] digest = md.digest()___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", getBlobServer().getPort())__			client = new BlobClient(serverAddress, getBlobClientConfig())___			JobID jobId = new JobID()___			_			BlobKey receivedKey1 = null__			if (blobType == TRANSIENT_BLOB) {_				receivedKey1 = client.putBuffer(null, testBuffer, 0, testBuffer.length, blobType)__				assertArrayEquals(digest, receivedKey1.getHash())__			}__			_			BlobKey receivedKey2 = client.putBuffer(jobId, testBuffer, 0, testBuffer.length, blobType)__			assertArrayEquals(digest, receivedKey2.getHash())__			if (blobType == TRANSIENT_BLOB) {_				verifyKeyDifferentHashEquals(receivedKey1, receivedKey2)__			}__			_			if (blobType == TRANSIENT_BLOB) {_				validateGetAndClose(client.getInternal(null, receivedKey1), testBuffer)__				_				verifyDeletedEventually(getBlobServer(), null, receivedKey1)__			}_			_			validateGetAndClose(client.getInternal(jobId, receivedKey2), testBuffer)__			if (blobType == TRANSIENT_BLOB) {_				_				verifyDeletedEventually(getBlobServer(), jobId, receivedKey2)__			}__			_			try (InputStream ignored = client.getInternal(null, BlobKey.createKey(blobType))) {_				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}__			_			_			client = new BlobClient(serverAddress, getBlobClientConfig())__			try (InputStream ignored = client.getInternal(jobId, BlobKey.createKey(blobType))) {_				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,content,addressable,buffer,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,byte,digest,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,blob,server,get,port,client,new,blob,client,server,address,get,blob,client,config,job,id,job,id,new,job,id,blob,key,received,key1,null,if,blob,type,received,key1,client,put,buffer,null,test,buffer,0,test,buffer,length,blob,type,assert,array,equals,digest,received,key1,get,hash,blob,key,received,key2,client,put,buffer,job,id,test,buffer,0,test,buffer,length,blob,type,assert,array,equals,digest,received,key2,get,hash,if,blob,type,verify,key,different,hash,equals,received,key1,received,key2,if,blob,type,validate,get,and,close,client,get,internal,null,received,key1,test,buffer,verify,deleted,eventually,get,blob,server,null,received,key1,validate,get,and,close,client,get,internal,job,id,received,key2,test,buffer,if,blob,type,verify,deleted,eventually,get,blob,server,job,id,received,key2,try,input,stream,ignored,client,get,internal,null,blob,key,create,key,blob,type,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,client,new,blob,client,server,address,get,blob,client,config,try,input,stream,ignored,client,get,internal,job,id,blob,key,create,key,blob,type,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,finally,if,client,null,try,client,close,catch,throwable,ignored
BlobClientTest -> private void testContentAddressableBuffer(BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1515428991;Tests the PUT/GET operations for content-addressable buffers.__@param blobType_whether the BLOB should become permanent or transient;private void testContentAddressableBuffer(BlobKey.BlobType blobType)_			throws IOException, InterruptedException {_		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			byte[] digest = md.digest()___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", getBlobServer().getPort())__			client = new BlobClient(serverAddress, getBlobClientConfig())___			JobID jobId = new JobID()___			_			BlobKey receivedKey1 = null__			if (blobType == TRANSIENT_BLOB) {_				receivedKey1 = client.putBuffer(null, testBuffer, 0, testBuffer.length, blobType)__				assertArrayEquals(digest, receivedKey1.getHash())__			}__			_			BlobKey receivedKey2 = client.putBuffer(jobId, testBuffer, 0, testBuffer.length, blobType)__			assertArrayEquals(digest, receivedKey2.getHash())__			if (blobType == TRANSIENT_BLOB) {_				verifyKeyDifferentHashEquals(receivedKey1, receivedKey2)__			}__			_			if (blobType == TRANSIENT_BLOB) {_				validateGetAndClose(client.getInternal(null, receivedKey1), testBuffer)__				_				verifyDeletedEventually(getBlobServer(), null, receivedKey1)__			}_			_			validateGetAndClose(client.getInternal(jobId, receivedKey2), testBuffer)__			if (blobType == TRANSIENT_BLOB) {_				_				verifyDeletedEventually(getBlobServer(), jobId, receivedKey2)__			}__			_			try (InputStream ignored = client.getInternal(null, BlobKey.createKey(blobType))) {_				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}__			_			_			client = new BlobClient(serverAddress, getBlobClientConfig())__			try (InputStream ignored = client.getInternal(jobId, BlobKey.createKey(blobType))) {_				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,content,addressable,buffer,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,byte,digest,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,blob,server,get,port,client,new,blob,client,server,address,get,blob,client,config,job,id,job,id,new,job,id,blob,key,received,key1,null,if,blob,type,received,key1,client,put,buffer,null,test,buffer,0,test,buffer,length,blob,type,assert,array,equals,digest,received,key1,get,hash,blob,key,received,key2,client,put,buffer,job,id,test,buffer,0,test,buffer,length,blob,type,assert,array,equals,digest,received,key2,get,hash,if,blob,type,verify,key,different,hash,equals,received,key1,received,key2,if,blob,type,validate,get,and,close,client,get,internal,null,received,key1,test,buffer,verify,deleted,eventually,get,blob,server,null,received,key1,validate,get,and,close,client,get,internal,job,id,received,key2,test,buffer,if,blob,type,verify,deleted,eventually,get,blob,server,job,id,received,key2,try,input,stream,ignored,client,get,internal,null,blob,key,create,key,blob,type,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,client,new,blob,client,server,address,get,blob,client,config,try,input,stream,ignored,client,get,internal,job,id,blob,key,create,key,blob,type,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,finally,if,client,null,try,client,close,catch,throwable,ignored
BlobClientTest -> private void testContentAddressableBuffer(BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1525420604;Tests the PUT/GET operations for content-addressable buffers.__@param blobType_whether the BLOB should become permanent or transient;private void testContentAddressableBuffer(BlobKey.BlobType blobType)_			throws IOException, InterruptedException {_		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			byte[] digest = md.digest()___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", getBlobServer().getPort())__			client = new BlobClient(serverAddress, getBlobClientConfig())___			JobID jobId = new JobID()___			_			BlobKey receivedKey1 = null__			if (blobType == TRANSIENT_BLOB) {_				receivedKey1 = client.putBuffer(null, testBuffer, 0, testBuffer.length, blobType)__				assertArrayEquals(digest, receivedKey1.getHash())__			}__			_			BlobKey receivedKey2 = client.putBuffer(jobId, testBuffer, 0, testBuffer.length, blobType)__			assertArrayEquals(digest, receivedKey2.getHash())__			if (blobType == TRANSIENT_BLOB) {_				verifyKeyDifferentHashEquals(receivedKey1, receivedKey2)__			}__			_			if (blobType == TRANSIENT_BLOB) {_				validateGetAndClose(client.getInternal(null, receivedKey1), testBuffer)__				_				verifyDeletedEventually(getBlobServer(), null, receivedKey1)__			}_			_			validateGetAndClose(client.getInternal(jobId, receivedKey2), testBuffer)__			if (blobType == TRANSIENT_BLOB) {_				_				verifyDeletedEventually(getBlobServer(), jobId, receivedKey2)__			}__			_			try (InputStream ignored = client.getInternal(null, BlobKey.createKey(blobType))) {_				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}__			_			_			client = new BlobClient(serverAddress, getBlobClientConfig())__			try (InputStream ignored = client.getInternal(jobId, BlobKey.createKey(blobType))) {_				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,content,addressable,buffer,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,byte,digest,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,blob,server,get,port,client,new,blob,client,server,address,get,blob,client,config,job,id,job,id,new,job,id,blob,key,received,key1,null,if,blob,type,received,key1,client,put,buffer,null,test,buffer,0,test,buffer,length,blob,type,assert,array,equals,digest,received,key1,get,hash,blob,key,received,key2,client,put,buffer,job,id,test,buffer,0,test,buffer,length,blob,type,assert,array,equals,digest,received,key2,get,hash,if,blob,type,verify,key,different,hash,equals,received,key1,received,key2,if,blob,type,validate,get,and,close,client,get,internal,null,received,key1,test,buffer,verify,deleted,eventually,get,blob,server,null,received,key1,validate,get,and,close,client,get,internal,job,id,received,key2,test,buffer,if,blob,type,verify,deleted,eventually,get,blob,server,job,id,received,key2,try,input,stream,ignored,client,get,internal,null,blob,key,create,key,blob,type,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,client,new,blob,client,server,address,get,blob,client,config,try,input,stream,ignored,client,get,internal,job,id,blob,key,create,key,blob,type,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,finally,if,client,null,try,client,close,catch,throwable,ignored
BlobClientTest -> private void testContentAddressableBuffer(BlobKey.BlobType blobType) 			throws IOException, InterruptedException;1529583969;Tests the PUT/GET operations for content-addressable buffers.__@param blobType_whether the BLOB should become permanent or transient;private void testContentAddressableBuffer(BlobKey.BlobType blobType)_			throws IOException, InterruptedException {_		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			byte[] digest = md.digest()___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", getBlobServer().getPort())__			client = new BlobClient(serverAddress, getBlobClientConfig())___			JobID jobId = new JobID()___			_			BlobKey receivedKey1 = null__			if (blobType == TRANSIENT_BLOB) {_				receivedKey1 = client.putBuffer(null, testBuffer, 0, testBuffer.length, blobType)__				assertArrayEquals(digest, receivedKey1.getHash())__			}__			_			BlobKey receivedKey2 = client.putBuffer(jobId, testBuffer, 0, testBuffer.length, blobType)__			assertArrayEquals(digest, receivedKey2.getHash())__			if (blobType == TRANSIENT_BLOB) {_				verifyKeyDifferentHashEquals(receivedKey1, receivedKey2)__			}__			_			if (blobType == TRANSIENT_BLOB) {_				validateGetAndClose(client.getInternal(null, receivedKey1), testBuffer)__				_				verifyDeletedEventually(getBlobServer(), null, receivedKey1)__			}_			_			validateGetAndClose(client.getInternal(jobId, receivedKey2), testBuffer)__			if (blobType == TRANSIENT_BLOB) {_				_				verifyDeletedEventually(getBlobServer(), jobId, receivedKey2)__			}__			_			try (InputStream ignored = client.getInternal(null, BlobKey.createKey(blobType))) {_				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}__			_			_			client = new BlobClient(serverAddress, getBlobClientConfig())__			try (InputStream ignored = client.getInternal(jobId, BlobKey.createKey(blobType))) {_				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,test,content,addressable,buffer,blob,key,blob,type,blob,type,throws,ioexception,interrupted,exception,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,byte,digest,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,blob,server,get,port,client,new,blob,client,server,address,get,blob,client,config,job,id,job,id,new,job,id,blob,key,received,key1,null,if,blob,type,received,key1,client,put,buffer,null,test,buffer,0,test,buffer,length,blob,type,assert,array,equals,digest,received,key1,get,hash,blob,key,received,key2,client,put,buffer,job,id,test,buffer,0,test,buffer,length,blob,type,assert,array,equals,digest,received,key2,get,hash,if,blob,type,verify,key,different,hash,equals,received,key1,received,key2,if,blob,type,validate,get,and,close,client,get,internal,null,received,key1,test,buffer,verify,deleted,eventually,get,blob,server,null,received,key1,validate,get,and,close,client,get,internal,job,id,received,key2,test,buffer,if,blob,type,verify,deleted,eventually,get,blob,server,job,id,received,key2,try,input,stream,ignored,client,get,internal,null,blob,key,create,key,blob,type,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,client,new,blob,client,server,address,get,blob,client,config,try,input,stream,ignored,client,get,internal,job,id,blob,key,create,key,blob,type,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,finally,if,client,null,try,client,close,catch,throwable,ignored
BlobClientTest -> @Test 	public void testRegularBuffer();1412605211;Tests the PUT/GET operations for regular (non-content-addressable) buffers.;@Test_	public void testRegularBuffer() {__		final byte[] testBuffer = createTestBuffer()__		final JobID jobID = JobID.generate()__		final String key = "testkey"___		try {__			BlobClient client = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getServerPort())__				client = new BlobClient(serverAddress)___				_				client.put(jobID, key, testBuffer)___				_				final InputStream is = client.get(jobID, key)__				validateGet(is, testBuffer)___				_				client.delete(jobID, key)__				_				_				try {_					client.get(jobID, key)__				} catch (FileNotFoundException fnfe) {_					return__				}__				fail("Expected FileNotFoundException did not occur")___			} finally {_				if (client != null) {_					client.close()__				}_			}__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,buffers;test,public,void,test,regular,buffer,final,byte,test,buffer,create,test,buffer,final,job,id,job,id,job,id,generate,final,string,key,testkey,try,blob,client,client,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,server,port,client,new,blob,client,server,address,client,put,job,id,key,test,buffer,final,input,stream,is,client,get,job,id,key,validate,get,is,test,buffer,client,delete,job,id,key,try,client,get,job,id,key,catch,file,not,found,exception,fnfe,return,fail,expected,file,not,found,exception,did,not,occur,finally,if,client,null,client,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
BlobClientTest -> @Test 	public void testRegularBuffer();1423683763;Tests the PUT/GET operations for regular (non-content-addressable) buffers.;@Test_	public void testRegularBuffer() {__		final byte[] testBuffer = createTestBuffer()__		final JobID jobID = JobID.generate()__		final String key = "testkey"___		try {__			BlobClient client = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getServerPort())__				client = new BlobClient(serverAddress)___				_				client.put(jobID, key, testBuffer)___				_				final InputStream is = client.get(jobID, key)__				validateGet(is, testBuffer)___				_				client.delete(jobID, key)__				_				_				try {_					client.get(jobID, key)__				} catch (FileNotFoundException fnfe) {_					return__				}__				fail("Expected FileNotFoundException did not occur")___			} finally {_				if (client != null) {_					client.close()__				}_			}__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,buffers;test,public,void,test,regular,buffer,final,byte,test,buffer,create,test,buffer,final,job,id,job,id,job,id,generate,final,string,key,testkey,try,blob,client,client,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,server,port,client,new,blob,client,server,address,client,put,job,id,key,test,buffer,final,input,stream,is,client,get,job,id,key,validate,get,is,test,buffer,client,delete,job,id,key,try,client,get,job,id,key,catch,file,not,found,exception,fnfe,return,fail,expected,file,not,found,exception,did,not,occur,finally,if,client,null,client,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
BlobClientTest -> @Test 	public void testRegularBuffer();1424264340;Tests the PUT/GET operations for regular (non-content-addressable) buffers.;@Test_	public void testRegularBuffer() {__		final byte[] testBuffer = createTestBuffer()__		final JobID jobID = JobID.generate()__		final String key = "testkey"___		try {_			BlobClient client = null__			try {_				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__				client = new BlobClient(serverAddress)___				_				client.put(jobID, key, testBuffer)___				_				final InputStream is = client.get(jobID, key)__				validateGet(is, testBuffer)___				_				client.delete(jobID, key)__				_				_				try {_					client.get(jobID, key)__					fail("Expected IOException did not occur")__				}_				catch (IOException e) {_					_				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,buffers;test,public,void,test,regular,buffer,final,byte,test,buffer,create,test,buffer,final,job,id,job,id,job,id,generate,final,string,key,testkey,try,blob,client,client,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,client,put,job,id,key,test,buffer,final,input,stream,is,client,get,job,id,key,validate,get,is,test,buffer,client,delete,job,id,key,try,client,get,job,id,key,fail,expected,ioexception,did,not,occur,catch,ioexception,e,finally,if,client,null,client,close,catch,exception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> @Test 	public void testRegularBuffer();1427784999;Tests the PUT/GET operations for regular (non-content-addressable) buffers.;@Test_	public void testRegularBuffer() {__		final byte[] testBuffer = createTestBuffer()__		final JobID jobID = JobID.generate()__		final String key = "testkey"___		try {_			BlobClient client = null__			try {_				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__				client = new BlobClient(serverAddress)___				_				client.put(jobID, key, testBuffer)___				_				final InputStream is = client.get(jobID, key)__				validateGet(is, testBuffer)___				_				client.delete(jobID, key)__				_				_				try {_					client.get(jobID, key)__					fail("Expected IOException did not occur")__				}_				catch (IOException e) {_					_				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,buffers;test,public,void,test,regular,buffer,final,byte,test,buffer,create,test,buffer,final,job,id,job,id,job,id,generate,final,string,key,testkey,try,blob,client,client,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,client,put,job,id,key,test,buffer,final,input,stream,is,client,get,job,id,key,validate,get,is,test,buffer,client,delete,job,id,key,try,client,get,job,id,key,fail,expected,ioexception,did,not,occur,catch,ioexception,e,finally,if,client,null,client,close,catch,exception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> @Test 	public void testRegularBuffer();1468854249;Tests the PUT/GET operations for regular (non-content-addressable) buffers.;@Test_	public void testRegularBuffer() {__		final byte[] testBuffer = createTestBuffer()__		final JobID jobID = JobID.generate()__		final String key = "testkey"___		try {_			BlobClient client = null__			try {_				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__				client = new BlobClient(serverAddress)___				_				client.put(jobID, key, testBuffer)___				_				final InputStream is = client.get(jobID, key)__				validateGet(is, testBuffer)___				_				client.delete(jobID, key)__				_				_				try {_					client.get(jobID, key)__					fail("Expected IOException did not occur")__				}_				catch (IOException e) {_					_				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,buffers;test,public,void,test,regular,buffer,final,byte,test,buffer,create,test,buffer,final,job,id,job,id,job,id,generate,final,string,key,testkey,try,blob,client,client,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,client,put,job,id,key,test,buffer,final,input,stream,is,client,get,job,id,key,validate,get,is,test,buffer,client,delete,job,id,key,try,client,get,job,id,key,fail,expected,ioexception,did,not,occur,catch,ioexception,e,finally,if,client,null,client,close,catch,exception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> @Test 	public void testRegularBuffer();1476696544;Tests the PUT/GET operations for regular (non-content-addressable) buffers.;@Test_	public void testRegularBuffer() {__		final byte[] testBuffer = createTestBuffer()__		final JobID jobID = JobID.generate()__		final String key = "testkey"___		try {_			BlobClient client = null__			try {_				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__				client = new BlobClient(serverAddress, blobServiceConfig)___				_				client.put(jobID, key, testBuffer)___				_				final InputStream is = client.get(jobID, key)__				validateGet(is, testBuffer)___				_				client.delete(jobID, key)__				_				_				try {_					client.get(jobID, key)__					fail("Expected IOException did not occur")__				}_				catch (IOException e) {_					_				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,buffers;test,public,void,test,regular,buffer,final,byte,test,buffer,create,test,buffer,final,job,id,job,id,job,id,generate,final,string,key,testkey,try,blob,client,client,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,service,config,client,put,job,id,key,test,buffer,final,input,stream,is,client,get,job,id,key,validate,get,is,test,buffer,client,delete,job,id,key,try,client,get,job,id,key,fail,expected,ioexception,did,not,occur,catch,ioexception,e,finally,if,client,null,client,close,catch,exception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> @Test 	public void testRegularBuffer();1495001929;Tests the PUT/GET operations for regular (non-content-addressable) buffers.;@Test_	public void testRegularBuffer() {__		final byte[] testBuffer = createTestBuffer()__		final JobID jobID = JobID.generate()__		final String key = "testkey"___		try {_			BlobClient client = null__			try {_				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__				client = new BlobClient(serverAddress, blobServiceConfig)___				_				client.put(jobID, key, testBuffer)___				_				final InputStream is = client.get(jobID, key)__				validateGet(is, testBuffer)___				_				client.delete(jobID, key)__				_				_				try {_					client.get(jobID, key)__					fail("Expected IOException did not occur")__				}_				catch (IOException e) {_					_				}_			}_			finally {_				if (client != null) {_					client.close()__				}_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_	};tests,the,put,get,operations,for,regular,non,content,addressable,buffers;test,public,void,test,regular,buffer,final,byte,test,buffer,create,test,buffer,final,job,id,job,id,job,id,generate,final,string,key,testkey,try,blob,client,client,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,service,config,client,put,job,id,key,test,buffer,final,input,stream,is,client,get,job,id,key,validate,get,is,test,buffer,client,delete,job,id,key,try,client,get,job,id,key,fail,expected,ioexception,did,not,occur,catch,ioexception,e,finally,if,client,null,client,close,catch,exception,e,e,print,stack,trace,fail,e,get,message
BlobClientTest -> private static void validateGetAndClose(final InputStream inputStream, final File file) throws IOException;1503041358;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param inputStream_the input stream returned from the GET operation (will be closed by this method)_@param file_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;private static void validateGetAndClose(final InputStream inputStream, final File file) throws IOException {__		InputStream inputStream2 = null__		try {__			inputStream2 = new FileInputStream(file)___			while (true) {__				final int r1 = inputStream.read()__				final int r2 = inputStream2.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}__		} finally {_			if (inputStream2 != null) {_				inputStream2.close()__			}_			inputStream.close()__		}__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;private,static,void,validate,get,and,close,final,input,stream,input,stream,final,file,file,throws,ioexception,input,stream,input,stream2,null,try,input,stream2,new,file,input,stream,file,while,true,final,int,r1,input,stream,read,final,int,r2,input,stream2,read,assert,equals,r2,r1,if,r1,0,break,finally,if,input,stream2,null,input,stream2,close,input,stream,close
BlobClientTest -> private static void validateGetAndClose(final InputStream inputStream, final File file) throws IOException;1503041372;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param inputStream_the input stream returned from the GET operation (will be closed by this method)_@param file_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;private static void validateGetAndClose(final InputStream inputStream, final File file) throws IOException {__		InputStream inputStream2 = null__		try {__			inputStream2 = new FileInputStream(file)___			while (true) {__				final int r1 = inputStream.read()__				final int r2 = inputStream2.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}__		} finally {_			if (inputStream2 != null) {_				inputStream2.close()__			}_			inputStream.close()__		}__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,input,stream,the,input,stream,returned,from,the,get,operation,will,be,closed,by,this,method,param,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;private,static,void,validate,get,and,close,final,input,stream,input,stream,final,file,file,throws,ioexception,input,stream,input,stream2,null,try,input,stream2,new,file,input,stream,file,while,true,final,int,r1,input,stream,read,final,int,r2,input,stream2,read,assert,equals,r2,r1,if,r1,0,break,finally,if,input,stream2,null,input,stream2,close,input,stream,close
BlobClientTest -> @Test 	public void testContentAddressableBuffer();1412605211;Tests the PUT/GET operations for content-addressable buffers.;@Test_	public void testContentAddressableBuffer() {__		final byte[] testBuffer = createTestBuffer()__		final MessageDigest md = BlobUtils.createMessageDigest()__		md.update(testBuffer)__		final BlobKey origKey = new BlobKey(md.digest())___		try {__			BlobClient client = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getServerPort())__				client = new BlobClient(serverAddress)___				_				final BlobKey receivedKey = client.put(testBuffer)__				assertEquals(origKey, receivedKey)___				_				final InputStream is = client.get(receivedKey)__				validateGet(is, testBuffer)___				_				try {_					client.get(new BlobKey())__				} catch (FileNotFoundException fnfe) {_					return__				}__				fail("Expected FileNotFoundException did not occur")___			} finally {_				if (client != null) {_					client.close()__				}_			}__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}_	};tests,the,put,get,operations,for,content,addressable,buffers;test,public,void,test,content,addressable,buffer,final,byte,test,buffer,create,test,buffer,final,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,final,blob,key,orig,key,new,blob,key,md,digest,try,blob,client,client,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,server,port,client,new,blob,client,server,address,final,blob,key,received,key,client,put,test,buffer,assert,equals,orig,key,received,key,final,input,stream,is,client,get,received,key,validate,get,is,test,buffer,try,client,get,new,blob,key,catch,file,not,found,exception,fnfe,return,fail,expected,file,not,found,exception,did,not,occur,finally,if,client,null,client,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
BlobClientTest -> @Test 	public void testContentAddressableBuffer();1423683763;Tests the PUT/GET operations for content-addressable buffers.;@Test_	public void testContentAddressableBuffer() {__		final byte[] testBuffer = createTestBuffer()__		final MessageDigest md = BlobUtils.createMessageDigest()__		md.update(testBuffer)__		final BlobKey origKey = new BlobKey(md.digest())___		try {__			BlobClient client = null__			try {__				final InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getServerPort())__				client = new BlobClient(serverAddress)___				_				final BlobKey receivedKey = client.put(testBuffer)__				assertEquals(origKey, receivedKey)___				_				final InputStream is = client.get(receivedKey)__				validateGet(is, testBuffer)___				_				try {_					client.get(new BlobKey())__				} catch (FileNotFoundException fnfe) {_					return__				}__				fail("Expected FileNotFoundException did not occur")___			} finally {_				if (client != null) {_					client.close()__				}_			}__		} catch (IOException ioe) {_			fail(StringUtils.stringifyException(ioe))__		}_	};tests,the,put,get,operations,for,content,addressable,buffers;test,public,void,test,content,addressable,buffer,final,byte,test,buffer,create,test,buffer,final,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,final,blob,key,orig,key,new,blob,key,md,digest,try,blob,client,client,null,try,final,inet,socket,address,server,address,new,inet,socket,address,localhost,get,server,port,client,new,blob,client,server,address,final,blob,key,received,key,client,put,test,buffer,assert,equals,orig,key,received,key,final,input,stream,is,client,get,received,key,validate,get,is,test,buffer,try,client,get,new,blob,key,catch,file,not,found,exception,fnfe,return,fail,expected,file,not,found,exception,did,not,occur,finally,if,client,null,client,close,catch,ioexception,ioe,fail,string,utils,stringify,exception,ioe
BlobClientTest -> @Test 	public void testContentAddressableBuffer();1424264340;Tests the PUT/GET operations for content-addressable buffers.;@Test_	public void testContentAddressableBuffer() {__		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			BlobKey origKey = new BlobKey(md.digest())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__			client = new BlobClient(serverAddress)___			_			BlobKey receivedKey = client.put(testBuffer)__			assertEquals(origKey, receivedKey)___			_			InputStream is = client.get(receivedKey)__			validateGet(is, testBuffer)___			_			try {_				client.get(new BlobKey())__				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable t) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers;test,public,void,test,content,addressable,buffer,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,blob,key,orig,key,new,blob,key,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,key,received,key,client,put,test,buffer,assert,equals,orig,key,received,key,input,stream,is,client,get,received,key,validate,get,is,test,buffer,try,client,get,new,blob,key,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,client,null,try,client,close,catch,throwable,t
BlobClientTest -> @Test 	public void testContentAddressableBuffer();1427784999;Tests the PUT/GET operations for content-addressable buffers.;@Test_	public void testContentAddressableBuffer() {__		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			BlobKey origKey = new BlobKey(md.digest())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__			client = new BlobClient(serverAddress)___			_			BlobKey receivedKey = client.put(testBuffer)__			assertEquals(origKey, receivedKey)___			_			InputStream is = client.get(receivedKey)__			validateGet(is, testBuffer)___			_			try {_				client.get(new BlobKey())__				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable t) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers;test,public,void,test,content,addressable,buffer,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,blob,key,orig,key,new,blob,key,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,key,received,key,client,put,test,buffer,assert,equals,orig,key,received,key,input,stream,is,client,get,received,key,validate,get,is,test,buffer,try,client,get,new,blob,key,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,client,null,try,client,close,catch,throwable,t
BlobClientTest -> @Test 	public void testContentAddressableBuffer();1468854249;Tests the PUT/GET operations for content-addressable buffers.;@Test_	public void testContentAddressableBuffer() {__		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			BlobKey origKey = new BlobKey(md.digest())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__			client = new BlobClient(serverAddress)___			_			BlobKey receivedKey = client.put(testBuffer)__			assertEquals(origKey, receivedKey)___			_			InputStream is = client.get(receivedKey)__			validateGet(is, testBuffer)___			_			try {_				client.get(new BlobKey())__				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable t) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers;test,public,void,test,content,addressable,buffer,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,blob,key,orig,key,new,blob,key,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,key,received,key,client,put,test,buffer,assert,equals,orig,key,received,key,input,stream,is,client,get,received,key,validate,get,is,test,buffer,try,client,get,new,blob,key,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,client,null,try,client,close,catch,throwable,t
BlobClientTest -> @Test 	public void testContentAddressableBuffer();1476696544;Tests the PUT/GET operations for content-addressable buffers.;@Test_	public void testContentAddressableBuffer() {__		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			BlobKey origKey = new BlobKey(md.digest())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__			client = new BlobClient(serverAddress, blobServiceConfig)___			_			BlobKey receivedKey = client.put(testBuffer)__			assertEquals(origKey, receivedKey)___			_			InputStream is = client.get(receivedKey)__			validateGet(is, testBuffer)___			_			try {_				client.get(new BlobKey())__				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable t) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers;test,public,void,test,content,addressable,buffer,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,blob,key,orig,key,new,blob,key,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,service,config,blob,key,received,key,client,put,test,buffer,assert,equals,orig,key,received,key,input,stream,is,client,get,received,key,validate,get,is,test,buffer,try,client,get,new,blob,key,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,client,null,try,client,close,catch,throwable,t
BlobClientTest -> @Test 	public void testContentAddressableBuffer();1495001929;Tests the PUT/GET operations for content-addressable buffers.;@Test_	public void testContentAddressableBuffer() {__		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			BlobKey origKey = new BlobKey(md.digest())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__			client = new BlobClient(serverAddress, blobServiceConfig)___			_			BlobKey receivedKey = client.put(testBuffer)__			assertEquals(origKey, receivedKey)___			_			InputStream is = client.get(receivedKey)__			validateGet(is, testBuffer)___			_			try {_				client.get(new BlobKey())__				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable t) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers;test,public,void,test,content,addressable,buffer,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,blob,key,orig,key,new,blob,key,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,service,config,blob,key,received,key,client,put,test,buffer,assert,equals,orig,key,received,key,input,stream,is,client,get,received,key,validate,get,is,test,buffer,try,client,get,new,blob,key,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,client,null,try,client,close,catch,throwable,t
BlobClientTest -> @Test 	public void testContentAddressableBuffer();1499789965;Tests the PUT/GET operations for content-addressable buffers.;@Test_	public void testContentAddressableBuffer() {__		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			BlobKey origKey = new BlobKey(md.digest())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", BLOB_SERVER.getPort())__			client = new BlobClient(serverAddress, blobServiceConfig)___			_			BlobKey receivedKey = client.put(testBuffer)__			assertEquals(origKey, receivedKey)___			_			InputStream is = client.get(receivedKey)__			validateGet(is, testBuffer)___			_			try {_				client.get(new BlobKey())__				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable t) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers;test,public,void,test,content,addressable,buffer,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,blob,key,orig,key,new,blob,key,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,port,client,new,blob,client,server,address,blob,service,config,blob,key,received,key,client,put,test,buffer,assert,equals,orig,key,received,key,input,stream,is,client,get,received,key,validate,get,is,test,buffer,try,client,get,new,blob,key,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,client,null,try,client,close,catch,throwable,t
BlobClientTest -> @Test 	public void testContentAddressableBuffer();1502100084;Tests the PUT/GET operations for content-addressable buffers.;@Test_	public void testContentAddressableBuffer() {__		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			BlobKey origKey = new BlobKey(md.digest())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", getBlobServer().getPort())__			client = new BlobClient(serverAddress, getBlobClientConfig())___			_			BlobKey receivedKey = client.put(testBuffer)__			assertEquals(origKey, receivedKey)___			_			InputStream is = client.get(receivedKey)__			validateGet(is, testBuffer)___			_			try {_				client.get(new BlobKey())__				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers;test,public,void,test,content,addressable,buffer,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,blob,key,orig,key,new,blob,key,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,blob,server,get,port,client,new,blob,client,server,address,get,blob,client,config,blob,key,received,key,client,put,test,buffer,assert,equals,orig,key,received,key,input,stream,is,client,get,received,key,validate,get,is,test,buffer,try,client,get,new,blob,key,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,client,null,try,client,close,catch,throwable,ignored
BlobClientTest -> @Test 	public void testContentAddressableBuffer();1502701584;Tests the PUT/GET operations for content-addressable buffers.;@Test_	public void testContentAddressableBuffer() {__		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			BlobKey origKey = new BlobKey(md.digest())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", getBlobServer().getPort())__			client = new BlobClient(serverAddress, getBlobClientConfig())___			JobID jobId = new JobID()___			_			BlobKey receivedKey = client.put(null, testBuffer)__			assertEquals(origKey, receivedKey)__			_			receivedKey = client.put(jobId, testBuffer)__			assertEquals(origKey, receivedKey)___			_			InputStream is = client.get(receivedKey)__			validateGet(is, testBuffer)__			is = client.get(jobId, receivedKey)__			validateGet(is, testBuffer)___			_			try {_				client.get(new BlobKey())__				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_			_			client = new BlobClient(serverAddress, getBlobClientConfig())__			try {_				client.get(jobId, new BlobKey())__				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers;test,public,void,test,content,addressable,buffer,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,blob,key,orig,key,new,blob,key,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,blob,server,get,port,client,new,blob,client,server,address,get,blob,client,config,job,id,job,id,new,job,id,blob,key,received,key,client,put,null,test,buffer,assert,equals,orig,key,received,key,received,key,client,put,job,id,test,buffer,assert,equals,orig,key,received,key,input,stream,is,client,get,received,key,validate,get,is,test,buffer,is,client,get,job,id,received,key,validate,get,is,test,buffer,try,client,get,new,blob,key,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,client,new,blob,client,server,address,get,blob,client,config,try,client,get,job,id,new,blob,key,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,client,null,try,client,close,catch,throwable,ignored
BlobClientTest -> @Test 	public void testContentAddressableBuffer();1503041358;Tests the PUT/GET operations for content-addressable buffers.;@Test_	public void testContentAddressableBuffer() {__		BlobClient client = null___		try {_			byte[] testBuffer = createTestBuffer()__			MessageDigest md = BlobUtils.createMessageDigest()__			md.update(testBuffer)__			BlobKey origKey = new BlobKey(md.digest())___			InetSocketAddress serverAddress = new InetSocketAddress("localhost", getBlobServer().getPort())__			client = new BlobClient(serverAddress, getBlobClientConfig())___			JobID jobId = new JobID()___			_			BlobKey receivedKey = client.put(null, testBuffer)__			assertEquals(origKey, receivedKey)__			_			receivedKey = client.put(jobId, testBuffer)__			assertEquals(origKey, receivedKey)___			_			validateGetAndClose(client.get(receivedKey), testBuffer)__			validateGetAndClose(client.get(jobId, receivedKey), testBuffer)___			_			try (InputStream ignored = client.get(new BlobKey())) {_				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_			_			client = new BlobClient(serverAddress, getBlobClientConfig())__			try (InputStream ignored = client.get(jobId, new BlobKey())) {_				fail("Expected IOException did not occur")__			}_			catch (IOException fnfe) {_				_			}_		}_		catch (Exception e) {_			e.printStackTrace()__			fail(e.getMessage())__		}_		finally {_			if (client != null) {_				try {_					client.close()__				} catch (Throwable ignored) {}_			}_		}_	};tests,the,put,get,operations,for,content,addressable,buffers;test,public,void,test,content,addressable,buffer,blob,client,client,null,try,byte,test,buffer,create,test,buffer,message,digest,md,blob,utils,create,message,digest,md,update,test,buffer,blob,key,orig,key,new,blob,key,md,digest,inet,socket,address,server,address,new,inet,socket,address,localhost,get,blob,server,get,port,client,new,blob,client,server,address,get,blob,client,config,job,id,job,id,new,job,id,blob,key,received,key,client,put,null,test,buffer,assert,equals,orig,key,received,key,received,key,client,put,job,id,test,buffer,assert,equals,orig,key,received,key,validate,get,and,close,client,get,received,key,test,buffer,validate,get,and,close,client,get,job,id,received,key,test,buffer,try,input,stream,ignored,client,get,new,blob,key,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,client,new,blob,client,server,address,get,blob,client,config,try,input,stream,ignored,client,get,job,id,new,blob,key,fail,expected,ioexception,did,not,occur,catch,ioexception,fnfe,catch,exception,e,e,print,stack,trace,fail,e,get,message,finally,if,client,null,try,client,close,catch,throwable,ignored
BlobClientTest -> private static byte[] createTestBuffer();1412605211;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {__		final byte[] buf = new byte[TEST_BUFFER_SIZE]___		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1423683763;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {__		final byte[] buf = new byte[TEST_BUFFER_SIZE]___		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}__		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1424264340;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1427784999;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1468854249;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1476696544;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1495001929;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1499789965;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1502100084;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1502701584;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1503041358;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1503041372;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1507212387;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1507212387;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1508138617;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1515428991;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1525420604;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> private static byte[] createTestBuffer();1529583969;Creates a test buffer and fills it with a specific byte pattern.__@return a test buffer filled with a specific byte pattern;private static byte[] createTestBuffer() {_		final byte[] buf = new byte[TEST_BUFFER_SIZE]__		for (int i = 0_ i < buf.length_ ++i) {_			buf[i] = (byte) (i % 128)__		}_		return buf__	};creates,a,test,buffer,and,fills,it,with,a,specific,byte,pattern,return,a,test,buffer,filled,with,a,specific,byte,pattern;private,static,byte,create,test,buffer,final,byte,buf,new,byte,for,int,i,0,i,buf,length,i,buf,i,byte,i,128,return,buf
BlobClientTest -> @BeforeClass 	public static void startServer() throws IOException;1495001929;Starts the BLOB server.;@BeforeClass_	public static void startServer() throws IOException {_		blobServiceConfig = new Configuration()__		BLOB_SERVER = new BlobServer(blobServiceConfig, new VoidBlobStore())__	};starts,the,blob,server;before,class,public,static,void,start,server,throws,ioexception,blob,service,config,new,configuration,new,blob,server,blob,service,config,new,void,blob,store
BlobClientTest -> @BeforeClass 	public static void startServer() throws IOException;1499789965;Starts the BLOB server.;@BeforeClass_	public static void startServer() throws IOException {_		blobServiceConfig = new Configuration()__		BLOB_SERVER = new BlobServer(blobServiceConfig, new VoidBlobStore())__	};starts,the,blob,server;before,class,public,static,void,start,server,throws,ioexception,blob,service,config,new,configuration,new,blob,server,blob,service,config,new,void,blob,store
BlobClientTest -> @BeforeClass 	public static void startServer() throws IOException;1502100084;Starts the BLOB server.;@BeforeClass_	public static void startServer() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		BLOB_SERVER = new BlobServer(config, new VoidBlobStore())___		clientConfig = new Configuration()__	};starts,the,blob,server;before,class,public,static,void,start,server,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,new,blob,server,config,new,void,blob,store,client,config,new,configuration
BlobClientTest -> @BeforeClass 	public static void startServer() throws IOException;1502701584;Starts the BLOB server.;@BeforeClass_	public static void startServer() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		BLOB_SERVER = new BlobServer(config, new VoidBlobStore())___		clientConfig = new Configuration()__	};starts,the,blob,server;before,class,public,static,void,start,server,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,new,blob,server,config,new,void,blob,store,client,config,new,configuration
BlobClientTest -> @BeforeClass 	public static void startServer() throws IOException;1503041358;Starts the BLOB server.;@BeforeClass_	public static void startServer() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		BLOB_SERVER = new BlobServer(config, new VoidBlobStore())___		clientConfig = new Configuration()__	};starts,the,blob,server;before,class,public,static,void,start,server,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,new,blob,server,config,new,void,blob,store,client,config,new,configuration
BlobClientTest -> @BeforeClass 	public static void startServer() throws IOException;1503041372;Starts the BLOB server.;@BeforeClass_	public static void startServer() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		BLOB_SERVER = new BlobServer(config, new VoidBlobStore())___		clientConfig = new Configuration()__	};starts,the,blob,server;before,class,public,static,void,start,server,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,new,blob,server,config,new,void,blob,store,client,config,new,configuration
BlobClientTest -> @BeforeClass 	public static void startServer() throws IOException;1507212387;Starts the BLOB server.;@BeforeClass_	public static void startServer() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		BLOB_SERVER = new BlobServer(config, new VoidBlobStore())__		BLOB_SERVER.start()___		clientConfig = new Configuration()__	};starts,the,blob,server;before,class,public,static,void,start,server,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,new,blob,server,config,new,void,blob,store,start,client,config,new,configuration
BlobClientTest -> @BeforeClass 	public static void startServer() throws IOException;1507212387;Starts the BLOB server.;@BeforeClass_	public static void startServer() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		BLOB_SERVER = new BlobServer(config, new VoidBlobStore())__		BLOB_SERVER.start()___		clientConfig = new Configuration()__	};starts,the,blob,server;before,class,public,static,void,start,server,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,new,blob,server,config,new,void,blob,store,start,client,config,new,configuration
BlobClientTest -> @BeforeClass 	public static void startServer() throws IOException;1508138617;Starts the BLOB server.;@BeforeClass_	public static void startServer() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		BLOB_SERVER = new BlobServer(config, new VoidBlobStore())__		BLOB_SERVER.start()___		clientConfig = new Configuration()__	};starts,the,blob,server;before,class,public,static,void,start,server,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,new,blob,server,config,new,void,blob,store,start,client,config,new,configuration
BlobClientTest -> @BeforeClass 	public static void startServer() throws IOException;1515428991;Starts the BLOB server.;@BeforeClass_	public static void startServer() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		blobServer = new BlobServer(config, new VoidBlobStore())__		blobServer.start()___		clientConfig = new Configuration()__	};starts,the,blob,server;before,class,public,static,void,start,server,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,blob,server,new,blob,server,config,new,void,blob,store,blob,server,start,client,config,new,configuration
BlobClientTest -> @BeforeClass 	public static void startServer() throws IOException;1525420604;Starts the BLOB server.;@BeforeClass_	public static void startServer() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		blobServer = new BlobServer(config, new VoidBlobStore())__		blobServer.start()___		clientConfig = new Configuration()__	};starts,the,blob,server;before,class,public,static,void,start,server,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,blob,server,new,blob,server,config,new,void,blob,store,blob,server,start,client,config,new,configuration
BlobClientTest -> @BeforeClass 	public static void startServer() throws IOException;1529583969;Starts the BLOB server.;@BeforeClass_	public static void startServer() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		blobServer = new BlobServer(config, new VoidBlobStore())__		blobServer.start()___		clientConfig = new Configuration()__	};starts,the,blob,server;before,class,public,static,void,start,server,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,blob,server,new,blob,server,config,new,void,blob,store,blob,server,start,client,config,new,configuration
BlobClientTest -> @SuppressWarnings("WeakerAccess") 	static void validateGetAndClose(final InputStream actualInputStream, final File expectedFile) throws IOException;1507212387;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param actualInputStream_the input stream returned from the GET operation_@param expectedFile_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;@SuppressWarnings("WeakerAccess")_	static void validateGetAndClose(final InputStream actualInputStream, final File expectedFile) throws IOException {_		validateGetAndClose(actualInputStream, new FileInputStream(expectedFile))__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,param,expected,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;suppress,warnings,weaker,access,static,void,validate,get,and,close,final,input,stream,actual,input,stream,final,file,expected,file,throws,ioexception,validate,get,and,close,actual,input,stream,new,file,input,stream,expected,file
BlobClientTest -> @SuppressWarnings("WeakerAccess") 	static void validateGetAndClose(final InputStream actualInputStream, final File expectedFile) throws IOException;1507212387;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param actualInputStream_the input stream returned from the GET operation_@param expectedFile_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;@SuppressWarnings("WeakerAccess")_	static void validateGetAndClose(final InputStream actualInputStream, final File expectedFile) throws IOException {_		validateGetAndClose(actualInputStream, new FileInputStream(expectedFile))__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,param,expected,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;suppress,warnings,weaker,access,static,void,validate,get,and,close,final,input,stream,actual,input,stream,final,file,expected,file,throws,ioexception,validate,get,and,close,actual,input,stream,new,file,input,stream,expected,file
BlobClientTest -> @SuppressWarnings("WeakerAccess") 	static void validateGetAndClose(final InputStream actualInputStream, final File expectedFile) throws IOException;1508138617;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param actualInputStream_the input stream returned from the GET operation_@param expectedFile_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;@SuppressWarnings("WeakerAccess")_	static void validateGetAndClose(final InputStream actualInputStream, final File expectedFile) throws IOException {_		validateGetAndClose(actualInputStream, new FileInputStream(expectedFile))__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,param,expected,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;suppress,warnings,weaker,access,static,void,validate,get,and,close,final,input,stream,actual,input,stream,final,file,expected,file,throws,ioexception,validate,get,and,close,actual,input,stream,new,file,input,stream,expected,file
BlobClientTest -> @SuppressWarnings("WeakerAccess") 	static void validateGetAndClose(final InputStream actualInputStream, final File expectedFile) throws IOException;1515428991;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param actualInputStream_the input stream returned from the GET operation_@param expectedFile_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;@SuppressWarnings("WeakerAccess")_	static void validateGetAndClose(final InputStream actualInputStream, final File expectedFile) throws IOException {_		validateGetAndClose(actualInputStream, new FileInputStream(expectedFile))__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,param,expected,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;suppress,warnings,weaker,access,static,void,validate,get,and,close,final,input,stream,actual,input,stream,final,file,expected,file,throws,ioexception,validate,get,and,close,actual,input,stream,new,file,input,stream,expected,file
BlobClientTest -> @SuppressWarnings("WeakerAccess") 	static void validateGetAndClose(final InputStream actualInputStream, final File expectedFile) throws IOException;1525420604;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param actualInputStream_the input stream returned from the GET operation_@param expectedFile_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;@SuppressWarnings("WeakerAccess")_	static void validateGetAndClose(final InputStream actualInputStream, final File expectedFile) throws IOException {_		validateGetAndClose(actualInputStream, new FileInputStream(expectedFile))__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,param,expected,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;suppress,warnings,weaker,access,static,void,validate,get,and,close,final,input,stream,actual,input,stream,final,file,expected,file,throws,ioexception,validate,get,and,close,actual,input,stream,new,file,input,stream,expected,file
BlobClientTest -> @SuppressWarnings("WeakerAccess") 	static void validateGetAndClose(final InputStream actualInputStream, final File expectedFile) throws IOException;1529583969;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param actualInputStream_the input stream returned from the GET operation_@param expectedFile_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;@SuppressWarnings("WeakerAccess")_	static void validateGetAndClose(final InputStream actualInputStream, final File expectedFile) throws IOException {_		validateGetAndClose(actualInputStream, new FileInputStream(expectedFile))__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,actual,input,stream,the,input,stream,returned,from,the,get,operation,param,expected,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;suppress,warnings,weaker,access,static,void,validate,get,and,close,final,input,stream,actual,input,stream,final,file,expected,file,throws,ioexception,validate,get,and,close,actual,input,stream,new,file,input,stream,expected,file
BlobClientTest -> private static void validateGet(final InputStream inputStream, final File file) throws IOException;1412605211;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param inputStream_the input stream returned from the GET operation_@param file_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;private static void validateGet(final InputStream inputStream, final File file) throws IOException {__		InputStream inputStream2 = null__		try {__			inputStream2 = new FileInputStream(file)___			while (true) {__				final int r1 = inputStream.read()__				final int r2 = inputStream2.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}__		} finally {_			if (inputStream2 != null) {_				inputStream2.close()__			}_		}__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,input,stream,the,input,stream,returned,from,the,get,operation,param,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;private,static,void,validate,get,final,input,stream,input,stream,final,file,file,throws,ioexception,input,stream,input,stream2,null,try,input,stream2,new,file,input,stream,file,while,true,final,int,r1,input,stream,read,final,int,r2,input,stream2,read,assert,equals,r2,r1,if,r1,0,break,finally,if,input,stream2,null,input,stream2,close
BlobClientTest -> private static void validateGet(final InputStream inputStream, final File file) throws IOException;1423683763;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param inputStream_the input stream returned from the GET operation_@param file_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;private static void validateGet(final InputStream inputStream, final File file) throws IOException {__		InputStream inputStream2 = null__		try {__			inputStream2 = new FileInputStream(file)___			while (true) {__				final int r1 = inputStream.read()__				final int r2 = inputStream2.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}__		} finally {_			if (inputStream2 != null) {_				inputStream2.close()__			}_		}__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,input,stream,the,input,stream,returned,from,the,get,operation,param,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;private,static,void,validate,get,final,input,stream,input,stream,final,file,file,throws,ioexception,input,stream,input,stream2,null,try,input,stream2,new,file,input,stream,file,while,true,final,int,r1,input,stream,read,final,int,r2,input,stream2,read,assert,equals,r2,r1,if,r1,0,break,finally,if,input,stream2,null,input,stream2,close
BlobClientTest -> private static void validateGet(final InputStream inputStream, final File file) throws IOException;1424264340;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param inputStream_the input stream returned from the GET operation_@param file_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;private static void validateGet(final InputStream inputStream, final File file) throws IOException {__		InputStream inputStream2 = null__		try {__			inputStream2 = new FileInputStream(file)___			while (true) {__				final int r1 = inputStream.read()__				final int r2 = inputStream2.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}__		} finally {_			if (inputStream2 != null) {_				inputStream2.close()__			}_		}__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,input,stream,the,input,stream,returned,from,the,get,operation,param,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;private,static,void,validate,get,final,input,stream,input,stream,final,file,file,throws,ioexception,input,stream,input,stream2,null,try,input,stream2,new,file,input,stream,file,while,true,final,int,r1,input,stream,read,final,int,r2,input,stream2,read,assert,equals,r2,r1,if,r1,0,break,finally,if,input,stream2,null,input,stream2,close
BlobClientTest -> private static void validateGet(final InputStream inputStream, final File file) throws IOException;1427784999;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param inputStream_the input stream returned from the GET operation_@param file_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;private static void validateGet(final InputStream inputStream, final File file) throws IOException {__		InputStream inputStream2 = null__		try {__			inputStream2 = new FileInputStream(file)___			while (true) {__				final int r1 = inputStream.read()__				final int r2 = inputStream2.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}__		} finally {_			if (inputStream2 != null) {_				inputStream2.close()__			}_		}__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,input,stream,the,input,stream,returned,from,the,get,operation,param,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;private,static,void,validate,get,final,input,stream,input,stream,final,file,file,throws,ioexception,input,stream,input,stream2,null,try,input,stream2,new,file,input,stream,file,while,true,final,int,r1,input,stream,read,final,int,r2,input,stream2,read,assert,equals,r2,r1,if,r1,0,break,finally,if,input,stream2,null,input,stream2,close
BlobClientTest -> private static void validateGet(final InputStream inputStream, final File file) throws IOException;1468854249;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param inputStream_the input stream returned from the GET operation_@param file_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;private static void validateGet(final InputStream inputStream, final File file) throws IOException {__		InputStream inputStream2 = null__		try {__			inputStream2 = new FileInputStream(file)___			while (true) {__				final int r1 = inputStream.read()__				final int r2 = inputStream2.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}__		} finally {_			if (inputStream2 != null) {_				inputStream2.close()__			}_		}__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,input,stream,the,input,stream,returned,from,the,get,operation,param,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;private,static,void,validate,get,final,input,stream,input,stream,final,file,file,throws,ioexception,input,stream,input,stream2,null,try,input,stream2,new,file,input,stream,file,while,true,final,int,r1,input,stream,read,final,int,r2,input,stream2,read,assert,equals,r2,r1,if,r1,0,break,finally,if,input,stream2,null,input,stream2,close
BlobClientTest -> private static void validateGet(final InputStream inputStream, final File file) throws IOException;1476696544;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param inputStream_the input stream returned from the GET operation_@param file_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;private static void validateGet(final InputStream inputStream, final File file) throws IOException {__		InputStream inputStream2 = null__		try {__			inputStream2 = new FileInputStream(file)___			while (true) {__				final int r1 = inputStream.read()__				final int r2 = inputStream2.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}__		} finally {_			if (inputStream2 != null) {_				inputStream2.close()__			}_		}__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,input,stream,the,input,stream,returned,from,the,get,operation,param,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;private,static,void,validate,get,final,input,stream,input,stream,final,file,file,throws,ioexception,input,stream,input,stream2,null,try,input,stream2,new,file,input,stream,file,while,true,final,int,r1,input,stream,read,final,int,r2,input,stream2,read,assert,equals,r2,r1,if,r1,0,break,finally,if,input,stream2,null,input,stream2,close
BlobClientTest -> private static void validateGet(final InputStream inputStream, final File file) throws IOException;1495001929;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param inputStream_the input stream returned from the GET operation_@param file_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;private static void validateGet(final InputStream inputStream, final File file) throws IOException {__		InputStream inputStream2 = null__		try {__			inputStream2 = new FileInputStream(file)___			while (true) {__				final int r1 = inputStream.read()__				final int r2 = inputStream2.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}__		} finally {_			if (inputStream2 != null) {_				inputStream2.close()__			}_		}__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,input,stream,the,input,stream,returned,from,the,get,operation,param,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;private,static,void,validate,get,final,input,stream,input,stream,final,file,file,throws,ioexception,input,stream,input,stream2,null,try,input,stream2,new,file,input,stream,file,while,true,final,int,r1,input,stream,read,final,int,r2,input,stream2,read,assert,equals,r2,r1,if,r1,0,break,finally,if,input,stream2,null,input,stream2,close
BlobClientTest -> private static void validateGet(final InputStream inputStream, final File file) throws IOException;1499789965;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param inputStream_the input stream returned from the GET operation_@param file_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;private static void validateGet(final InputStream inputStream, final File file) throws IOException {__		InputStream inputStream2 = null__		try {__			inputStream2 = new FileInputStream(file)___			while (true) {__				final int r1 = inputStream.read()__				final int r2 = inputStream2.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}__		} finally {_			if (inputStream2 != null) {_				inputStream2.close()__			}_		}__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,input,stream,the,input,stream,returned,from,the,get,operation,param,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;private,static,void,validate,get,final,input,stream,input,stream,final,file,file,throws,ioexception,input,stream,input,stream2,null,try,input,stream2,new,file,input,stream,file,while,true,final,int,r1,input,stream,read,final,int,r2,input,stream2,read,assert,equals,r2,r1,if,r1,0,break,finally,if,input,stream2,null,input,stream2,close
BlobClientTest -> private static void validateGet(final InputStream inputStream, final File file) throws IOException;1502100084;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param inputStream_the input stream returned from the GET operation_@param file_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;private static void validateGet(final InputStream inputStream, final File file) throws IOException {__		InputStream inputStream2 = null__		try {__			inputStream2 = new FileInputStream(file)___			while (true) {__				final int r1 = inputStream.read()__				final int r2 = inputStream2.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}__		} finally {_			if (inputStream2 != null) {_				inputStream2.close()__			}_		}__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,input,stream,the,input,stream,returned,from,the,get,operation,param,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;private,static,void,validate,get,final,input,stream,input,stream,final,file,file,throws,ioexception,input,stream,input,stream2,null,try,input,stream2,new,file,input,stream,file,while,true,final,int,r1,input,stream,read,final,int,r2,input,stream2,read,assert,equals,r2,r1,if,r1,0,break,finally,if,input,stream2,null,input,stream2,close
BlobClientTest -> private static void validateGet(final InputStream inputStream, final File file) throws IOException;1502701584;Validates the result of a GET operation by comparing the data from the retrieved input stream to the content of_the specified file.__@param inputStream_the input stream returned from the GET operation_@param file_the file to compare the input stream's data to_@throws IOException_thrown if an I/O error occurs while reading the input stream or the file;private static void validateGet(final InputStream inputStream, final File file) throws IOException {__		InputStream inputStream2 = null__		try {__			inputStream2 = new FileInputStream(file)___			while (true) {__				final int r1 = inputStream.read()__				final int r2 = inputStream2.read()___				assertEquals(r2, r1)___				if (r1 < 0) {_					break__				}_			}__		} finally {_			if (inputStream2 != null) {_				inputStream2.close()__			}_		}__	};validates,the,result,of,a,get,operation,by,comparing,the,data,from,the,retrieved,input,stream,to,the,content,of,the,specified,file,param,input,stream,the,input,stream,returned,from,the,get,operation,param,file,the,file,to,compare,the,input,stream,s,data,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,input,stream,or,the,file;private,static,void,validate,get,final,input,stream,input,stream,final,file,file,throws,ioexception,input,stream,input,stream2,null,try,input,stream2,new,file,input,stream,file,while,true,final,int,r1,input,stream,read,final,int,r2,input,stream2,read,assert,equals,r2,r1,if,r1,0,break,finally,if,input,stream2,null,input,stream2,close
