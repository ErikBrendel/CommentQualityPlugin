commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     scheduledExecutorService = Executors.newSingleThreadScheduledExecutor().     final ScheduledExecutor scheduledExecutor = new ScheduledExecutorServiceAdapter(scheduledExecutorService).     stackTraceSampleService = new StackTraceSampleService(scheduledExecutor). }
false;public;0;6;;@After public void tearDown() throws Exception {     if (scheduledExecutorService != null) {         ExecutorUtils.gracefulShutdown(10, TimeUnit.SECONDS, scheduledExecutorService).     } }
false;public;0;13;;@Test public void testShouldReturnStackTraces() throws Exception {     final int numSamples = 10.     final List<StackTraceElement[]> stackTraces = stackTraceSampleService.requestStackTraceSample(new TestTask(), numSamples, Time.milliseconds(0), -1).get().     assertThat(stackTraces, hasSize(numSamples)).     final StackTraceElement[] firstStackTrace = stackTraces.get(0).     assertThat(firstStackTrace[1].getClassName(), is(equalTo((TestTask.class.getName())))). }
false;public;0;13;;@Test public void testShouldThrowExceptionIfNumSamplesIsNegative() {     try {         stackTraceSampleService.requestStackTraceSample(new TestTask(), -1, Time.milliseconds(0), 10).         fail("Expected exception not thrown").     } catch (final IllegalArgumentException e) {         assertThat(e.getMessage(), is(equalTo("numSamples must be positive"))).     } }
false;public;0;11;;@Test public void testShouldTruncateStackTraceIfLimitIsSpecified() throws Exception {     final int maxStackTraceDepth = 1.     final List<StackTraceElement[]> stackTraces = stackTraceSampleService.requestStackTraceSample(new TestTask(), 10, Time.milliseconds(0), maxStackTraceDepth).get().     assertThat(stackTraces.get(0), is(arrayWithSize(maxStackTraceDepth))). }
false;public;0;10;;@Test public void testShouldReturnPartialResultIfTaskStopsRunningDuringSampling() throws Exception {     final List<StackTraceElement[]> stackTraces = stackTraceSampleService.requestStackTraceSample(new NotRunningAfterBeingSampledTask(), 10, Time.milliseconds(0), 1).get().     assertThat(stackTraces, hasSize(lessThan(10))). }
false;public;0;13;;@Test public void testShouldThrowExceptionIfTaskIsNotRunningBeforeSampling() {     try {         stackTraceSampleService.requestStackTraceSample(new NotRunningTask(), 10, Time.milliseconds(0), -1).         fail("Expected exception not thrown").     } catch (final IllegalStateException e) {         assertThat(e.getMessage(), containsString("Cannot sample task")).     } }
false;public;0;4;;@Override public boolean isRunning() {     return true. }
false;public;0;4;;@Override public StackTraceElement[] getStackTrace() {     return Thread.currentThread().getStackTrace(). }
false;public;0;4;;@Override public ExecutionAttemptID getExecutionId() {     return executionAttemptID. }
false;public;0;4;;@Override public boolean isRunning() {     return !stackTraceSampled. }
false;public;0;5;;@Override public StackTraceElement[] getStackTrace() {     stackTraceSampled = true.     return super.getStackTrace(). }
false;public;0;4;;@Override public boolean isRunning() {     return false. }
