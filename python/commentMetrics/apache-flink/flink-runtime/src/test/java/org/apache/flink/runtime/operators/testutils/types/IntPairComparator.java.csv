commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public int hash(IntPair object) {     return object.getKey() * 73. }
false;public;1;4;;@Override public void setReference(IntPair toCompare) {     this.reference = toCompare.getKey(). }
false;public;1;4;;@Override public boolean equalToReference(IntPair candidate) {     return candidate.getKey() == this.reference. }
false;public;1;5;;@Override public int compareToReference(TypeComparator<IntPair> referencedAccessors) {     final IntPairComparator comp = (IntPairComparator) referencedAccessors.     return comp.reference - this.reference. }
false;public;2;4;;@Override public int compare(IntPair first, IntPair second) {     return first.getKey() - second.getKey(). }
false;public;2;4;;@Override public int compareSerialized(DataInputView source1, DataInputView source2) throws IOException {     return source1.readInt() - source2.readInt(). }
false;public;0;4;;@Override public boolean supportsNormalizedKey() {     return true. }
false;public;0;4;;@Override public int getNormalizeKeyLen() {     return 4. }
false;public;1;4;;@Override public boolean isNormalizedKeyPrefixOnly(int keyBytes) {     return keyBytes < 4. }
false;public;4;22;;@Override public void putNormalizedKey(IntPair record, MemorySegment target, int offset, int len) {     // see IntValue for a documentation of the logic     final int value = record.getKey() - Integer.MIN_VALUE.     if (len == 4) {         target.putIntBigEndian(offset, value).     } else if (len <= 0) {     } else if (len < 4) {         for (int i = 0. len > 0. len--, i++) {             target.put(offset + i, (byte) ((value >>> ((3 - i) << 3)) & 0xff)).         }     } else {         target.putIntBigEndian(offset, value).         for (int i = 4. i < len. i++) {             target.put(offset + i, (byte) 0).         }     } }
false;public;0;4;;@Override public boolean invertNormalizedKey() {     return false. }
false;public;0;4;;@Override public IntPairComparator duplicate() {     return new IntPairComparator(). }
false;public;3;5;;@Override public int extractKeys(Object record, Object[] target, int index) {     target[index] = ((IntPair) record).getKey().     return 1. }
false;public;0;3;;@Override public TypeComparator[] getFlatComparators() {     return comparators. }
false;public;0;4;;@Override public boolean supportsSerializationWithKeyNormalization() {     return true. }
false;public;2;5;;@Override public void writeWithKeyNormalization(IntPair record, DataOutputView target) throws IOException {     target.writeInt(record.getKey() - Integer.MIN_VALUE).     target.writeInt(record.getValue()). }
false;public;2;6;;@Override public IntPair readWithKeyDenormalization(IntPair reuse, DataInputView source) throws IOException {     reuse.setKey(source.readInt() + Integer.MIN_VALUE).     reuse.setValue(source.readInt()).     return reuse. }
