commented;modifiers;parameterAmount;loc;comment;code
false;public;0;72;;@Test public void testOperatorIOMetricReuse() throws Exception {     // environment     initEnvironment(MEMORY_MANAGER_SIZE, NETWORK_BUFFER_SIZE).     this.mockEnv = new MockEnvironmentBuilder().setTaskName(HEAD_OPERATOR_NAME).setMemorySize(MEMORY_MANAGER_SIZE).setInputSplitProvider(this.inputSplitProvider).setBufferSize(NETWORK_BUFFER_SIZE).setMetricGroup(new TaskMetricGroup(NoOpMetricRegistry.INSTANCE, UnregisteredMetricGroups.createUnregisteredTaskManagerJobMetricGroup(), new JobVertexID(), new AbstractID(), "task", 0, 0)).build().     final int keyCnt = 100.     final int valCnt = 20.     final int numRecords = keyCnt * valCnt.     addInput(new UniformRecordGenerator(keyCnt, valCnt, false), 0).     addOutput(this.outList).     // the chained operator     addChainedOperator().     // creates the head operator and assembles the chain     registerTask(FlatMapDriver.class, DuplicatingFlatMapFunction.class).     final BatchTask<FlatMapFunction<Record, Record>, Record> testTask = new BatchTask<>(this.mockEnv).     testTask.invoke().     Assert.assertEquals(numRecords * 2 * 2, this.outList.size()).     final TaskMetricGroup taskMetricGroup = mockEnv.getMetricGroup().     // verify task-level metrics     {         final TaskIOMetricGroup ioMetricGroup = taskMetricGroup.getIOMetricGroup().         final Counter numRecordsInCounter = ioMetricGroup.getNumRecordsInCounter().         final Counter numRecordsOutCounter = ioMetricGroup.getNumRecordsOutCounter().         Assert.assertEquals(numRecords, numRecordsInCounter.getCount()).         Assert.assertEquals(numRecords * 2 * 2, numRecordsOutCounter.getCount()).     }     // verify head operator metrics     {         // this only returns the existing group and doesn't create a new one         final OperatorMetricGroup operatorMetricGroup1 = taskMetricGroup.getOrAddOperator(HEAD_OPERATOR_NAME).         final OperatorIOMetricGroup ioMetricGroup = operatorMetricGroup1.getIOMetricGroup().         final Counter numRecordsInCounter = ioMetricGroup.getNumRecordsInCounter().         final Counter numRecordsOutCounter = ioMetricGroup.getNumRecordsOutCounter().         Assert.assertEquals(numRecords, numRecordsInCounter.getCount()).         Assert.assertEquals(numRecords * 2, numRecordsOutCounter.getCount()).     }     // verify chained operator metrics     {         // this only returns the existing group and doesn't create a new one         final OperatorMetricGroup operatorMetricGroup1 = taskMetricGroup.getOrAddOperator(CHAINED_OPERATOR_NAME).         final OperatorIOMetricGroup ioMetricGroup = operatorMetricGroup1.getIOMetricGroup().         final Counter numRecordsInCounter = ioMetricGroup.getNumRecordsInCounter().         final Counter numRecordsOutCounter = ioMetricGroup.getNumRecordsOutCounter().         Assert.assertEquals(numRecords * 2, numRecordsInCounter.getCount()).         Assert.assertEquals(numRecords * 2 * 2, numRecordsOutCounter.getCount()).     } }
false;private;0;19;;private void addChainedOperator() {     final TaskConfig chainedConfig = new TaskConfig(new Configuration()).     // input     chainedConfig.addInputToGroup(0).     chainedConfig.setInputSerializer(serFact, 0).     // output     chainedConfig.addOutputShipStrategy(ShipStrategyType.FORWARD).     chainedConfig.setOutputSerializer(serFact).     // driver     chainedConfig.setDriverStrategy(DriverStrategy.FLAT_MAP).     // udf     chainedConfig.setStubWrapper(new UserCodeClassWrapper<>(DuplicatingFlatMapFunction.class)).     getTaskConfig().addChainedTask(ChainedFlatMapDriver.class, chainedConfig, CHAINED_OPERATOR_NAME). }
false;public;2;5;;@Override public void flatMap(final Record value, final Collector<Record> out) throws Exception {     out.collect(value).     out.collect(value). }
