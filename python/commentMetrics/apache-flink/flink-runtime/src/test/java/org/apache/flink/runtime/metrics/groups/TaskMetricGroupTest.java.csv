commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     registry = new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration()). }
false;public;0;6;;@After public void teardown() throws Exception {     if (registry != null) {         registry.shutdown().get().     } }
false;public;0;17;;// ------------------------------------------------------------------------ // scope tests // ----------------------------------------------------------------------- @Test public void testGenerateScopeDefault() {     JobVertexID vertexId = new JobVertexID().     AbstractID executionId = new AbstractID().     TaskManagerMetricGroup tmGroup = new TaskManagerMetricGroup(registry, "theHostName", "test-tm-id").     TaskManagerJobMetricGroup jmGroup = new TaskManagerJobMetricGroup(registry, tmGroup, new JobID(), "myJobName").     TaskMetricGroup taskGroup = new TaskMetricGroup(registry, jmGroup, vertexId, executionId, "aTaskName", 13, 2).     assertArrayEquals(new String[] { "theHostName", "taskmanager", "test-tm-id", "myJobName", "aTaskName", "13" }, taskGroup.getScopeComponents()).     assertEquals("theHostName.taskmanager.test-tm-id.myJobName.aTaskName.13.name", taskGroup.getMetricIdentifier("name")). }
false;public;0;26;;@Test public void testGenerateScopeCustom() throws Exception {     Configuration cfg = new Configuration().     cfg.setString(MetricOptions.SCOPE_NAMING_TM, "abc").     cfg.setString(MetricOptions.SCOPE_NAMING_TM_JOB, "def").     cfg.setString(MetricOptions.SCOPE_NAMING_TASK, "<tm_id>.<job_id>.<task_id>.<task_attempt_id>").     MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg)).     JobID jid = new JobID().     JobVertexID vertexId = new JobVertexID().     AbstractID executionId = new AbstractID().     TaskManagerMetricGroup tmGroup = new TaskManagerMetricGroup(registry, "theHostName", "test-tm-id").     TaskManagerJobMetricGroup jmGroup = new TaskManagerJobMetricGroup(registry, tmGroup, jid, "myJobName").     TaskMetricGroup taskGroup = new TaskMetricGroup(registry, jmGroup, vertexId, executionId, "aTaskName", 13, 2).     assertArrayEquals(new String[] { "test-tm-id", jid.toString(), vertexId.toString(), executionId.toString() }, taskGroup.getScopeComponents()).     assertEquals(String.format("test-tm-id.%s.%s.%s.name", jid, vertexId, executionId), taskGroup.getMetricIdentifier("name")).     registry.shutdown().get(). }
false;public;0;23;;@Test public void testGenerateScopeWilcard() throws Exception {     Configuration cfg = new Configuration().     cfg.setString(MetricOptions.SCOPE_NAMING_TASK, "*.<task_attempt_id>.<subtask_index>").     MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg)).     AbstractID executionId = new AbstractID().     TaskManagerMetricGroup tmGroup = new TaskManagerMetricGroup(registry, "theHostName", "test-tm-id").     TaskManagerJobMetricGroup jmGroup = new TaskManagerJobMetricGroup(registry, tmGroup, new JobID(), "myJobName").     TaskMetricGroup taskGroup = new TaskMetricGroup(registry, jmGroup, new JobVertexID(), executionId, "aTaskName", 13, 1).     assertArrayEquals(new String[] { "theHostName", "taskmanager", "test-tm-id", "myJobName", executionId.toString(), "13" }, taskGroup.getScopeComponents()).     assertEquals("theHostName.taskmanager.test-tm-id.myJobName." + executionId + ".13.name", taskGroup.getMetricIdentifier("name")).     registry.shutdown().get(). }
false;public;0;15;;@Test public void testCreateQueryServiceMetricInfo() {     JobID jid = new JobID().     JobVertexID vid = new JobVertexID().     AbstractID eid = new AbstractID().     TaskManagerMetricGroup tm = new TaskManagerMetricGroup(registry, "host", "id").     TaskManagerJobMetricGroup job = new TaskManagerJobMetricGroup(registry, tm, jid, "jobname").     TaskMetricGroup task = new TaskMetricGroup(registry, job, vid, eid, "taskName", 4, 5).     QueryScopeInfo.TaskQueryScopeInfo info = task.createQueryServiceMetricInfo(new DummyCharacterFilter()).     assertEquals("", info.scope).     assertEquals(jid.toString(), info.jobID).     assertEquals(vid.toString(), info.vertexID).     assertEquals(4, info.subtaskIndex). }
false;public;0;17;;@Test public void testTaskMetricGroupCleanup() throws Exception {     CountingMetricRegistry registry = new CountingMetricRegistry(new Configuration()).     TaskManagerMetricGroup taskManagerMetricGroup = new TaskManagerMetricGroup(registry, "localhost", "0").     TaskManagerJobMetricGroup taskManagerJobMetricGroup = new TaskManagerJobMetricGroup(registry, taskManagerMetricGroup, new JobID(), "job").     TaskMetricGroup taskMetricGroup = new TaskMetricGroup(registry, taskManagerJobMetricGroup, new JobVertexID(), new AbstractID(), "task", 0, 0).     // the io metric should have registered predefined metrics     assertTrue(registry.getNumberRegisteredMetrics() > 0).     taskMetricGroup.close().     // now all registered metrics should have been unregistered     assertEquals(0, registry.getNumberRegisteredMetrics()).     registry.shutdown().get(). }
false;public;0;17;;@Test public void testOperatorNameTruncation() throws Exception {     Configuration cfg = new Configuration().     cfg.setString(MetricOptions.SCOPE_NAMING_OPERATOR, ScopeFormat.SCOPE_OPERATOR_NAME).     MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(cfg)).     TaskManagerMetricGroup tm = new TaskManagerMetricGroup(registry, "host", "id").     TaskManagerJobMetricGroup job = new TaskManagerJobMetricGroup(registry, tm, new JobID(), "jobname").     TaskMetricGroup taskMetricGroup = new TaskMetricGroup(registry, job, new JobVertexID(), new AbstractID(), "task", 0, 0).     String originalName = new String(new char[100]).replace("\0", "-").     OperatorMetricGroup operatorMetricGroup = taskMetricGroup.getOrAddOperator(originalName).     String storedName = operatorMetricGroup.getScopeComponents()[0].     Assert.assertEquals(TaskMetricGroup.METRICS_OPERATOR_NAME_MAX_LENGTH, storedName.length()).     Assert.assertEquals(originalName.substring(0, TaskMetricGroup.METRICS_OPERATOR_NAME_MAX_LENGTH), storedName).     registry.shutdown().get(). }
false;public;3;5;;@Override public void register(Metric metric, String metricName, AbstractMetricGroup group) {     super.register(metric, metricName, group).     counter++. }
false;public;3;5;;@Override public void unregister(Metric metric, String metricName, AbstractMetricGroup group) {     super.unregister(metric, metricName, group).     counter--. }
false;;0;3;;int getNumberRegisteredMetrics() {     return counter. }
