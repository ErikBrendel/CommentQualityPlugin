commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Before public void setUp() {     restfulGateway = TestingRestfulGateway.newBuilder().setRequestOperatorBackPressureStatsFunction((jobId, jobVertexId) -> {         if (jobId.equals(TEST_JOB_ID_BACK_PRESSURE_STATS_AVAILABLE)) {             return CompletableFuture.completedFuture(OperatorBackPressureStatsResponse.of(new OperatorBackPressureStats(4711, Integer.MAX_VALUE, new double[] { 1.0, 0.5, 0.1 }))).         } else if (jobId.equals(TEST_JOB_ID_BACK_PRESSURE_STATS_ABSENT)) {             return CompletableFuture.completedFuture(OperatorBackPressureStatsResponse.of(null)).         } else {             throw new AssertionError().         }     }).build().     jobVertexBackPressureHandler = new JobVertexBackPressureHandler(() -> CompletableFuture.completedFuture(restfulGateway), Time.seconds(10), Collections.emptyMap(), JobVertexBackPressureHeaders.getInstance()). }
false;public;0;33;;@Test public void testGetBackPressure() throws Exception {     final Map<String, String> pathParameters = new HashMap<>().     pathParameters.put(JobIDPathParameter.KEY, TEST_JOB_ID_BACK_PRESSURE_STATS_AVAILABLE.toString()).     pathParameters.put(JobVertexIdPathParameter.KEY, new JobVertexID().toString()).     final HandlerRequest<EmptyRequestBody, JobVertexMessageParameters> request = new HandlerRequest<>(EmptyRequestBody.getInstance(), new JobVertexMessageParameters(), pathParameters, Collections.emptyMap()).     final CompletableFuture<JobVertexBackPressureInfo> jobVertexBackPressureInfoCompletableFuture = jobVertexBackPressureHandler.handleRequest(request, restfulGateway).     final JobVertexBackPressureInfo jobVertexBackPressureInfo = jobVertexBackPressureInfoCompletableFuture.get().     assertThat(jobVertexBackPressureInfo.getStatus(), equalTo(VertexBackPressureStatus.OK)).     assertThat(jobVertexBackPressureInfo.getBackpressureLevel(), equalTo(HIGH)).     assertThat(jobVertexBackPressureInfo.getSubtasks().stream().map(JobVertexBackPressureInfo.SubtaskBackPressureInfo::getRatio).collect(Collectors.toList()), contains(1.0, 0.5, 0.1)).     assertThat(jobVertexBackPressureInfo.getSubtasks().stream().map(JobVertexBackPressureInfo.SubtaskBackPressureInfo::getBackpressureLevel).collect(Collectors.toList()), contains(HIGH, LOW, OK)).     assertThat(jobVertexBackPressureInfo.getSubtasks().stream().map(JobVertexBackPressureInfo.SubtaskBackPressureInfo::getSubtask).collect(Collectors.toList()), contains(0, 1, 2)). }
false;public;0;17;;@Test public void testAbsentBackPressure() throws Exception {     final Map<String, String> pathParameters = new HashMap<>().     pathParameters.put(JobIDPathParameter.KEY, TEST_JOB_ID_BACK_PRESSURE_STATS_ABSENT.toString()).     pathParameters.put(JobVertexIdPathParameter.KEY, new JobVertexID().toString()).     final HandlerRequest<EmptyRequestBody, JobVertexMessageParameters> request = new HandlerRequest<>(EmptyRequestBody.getInstance(), new JobVertexMessageParameters(), pathParameters, Collections.emptyMap()).     final CompletableFuture<JobVertexBackPressureInfo> jobVertexBackPressureInfoCompletableFuture = jobVertexBackPressureHandler.handleRequest(request, restfulGateway).     final JobVertexBackPressureInfo jobVertexBackPressureInfo = jobVertexBackPressureInfoCompletableFuture.get().     assertThat(jobVertexBackPressureInfo.getStatus(), equalTo(VertexBackPressureStatus.DEPRECATED)). }
