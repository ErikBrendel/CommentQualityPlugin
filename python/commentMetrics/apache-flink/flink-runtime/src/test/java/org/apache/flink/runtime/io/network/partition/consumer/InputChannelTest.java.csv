commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testExponentialBackoff() throws Exception {     InputChannel ch = createInputChannel(500, 4000).     assertEquals(0, ch.getCurrentBackoff()).     assertTrue(ch.increaseBackoff()).     assertEquals(500, ch.getCurrentBackoff()).     assertTrue(ch.increaseBackoff()).     assertEquals(1000, ch.getCurrentBackoff()).     assertTrue(ch.increaseBackoff()).     assertEquals(2000, ch.getCurrentBackoff()).     assertTrue(ch.increaseBackoff()).     assertEquals(4000, ch.getCurrentBackoff()).     assertFalse(ch.increaseBackoff()).     assertEquals(4000, ch.getCurrentBackoff()). }
false;public;0;21;;@Test public void testExponentialBackoffCappedAtMax() throws Exception {     InputChannel ch = createInputChannel(500, 3000).     assertEquals(0, ch.getCurrentBackoff()).     assertTrue(ch.increaseBackoff()).     assertEquals(500, ch.getCurrentBackoff()).     assertTrue(ch.increaseBackoff()).     assertEquals(1000, ch.getCurrentBackoff()).     assertTrue(ch.increaseBackoff()).     assertEquals(2000, ch.getCurrentBackoff()).     assertTrue(ch.increaseBackoff()).     assertEquals(3000, ch.getCurrentBackoff()).     assertFalse(ch.increaseBackoff()).     assertEquals(3000, ch.getCurrentBackoff()). }
false;public;0;12;;@Test public void testExponentialBackoffSingle() throws Exception {     InputChannel ch = createInputChannel(500, 500).     assertEquals(0, ch.getCurrentBackoff()).     assertTrue(ch.increaseBackoff()).     assertEquals(500, ch.getCurrentBackoff()).     assertFalse(ch.increaseBackoff()).     assertEquals(500, ch.getCurrentBackoff()). }
false;public;0;9;;@Test public void testExponentialNoBackoff() throws Exception {     InputChannel ch = createInputChannel(0, 0).     assertEquals(0, ch.getCurrentBackoff()).     assertFalse(ch.increaseBackoff()).     assertEquals(0, ch.getCurrentBackoff()). }
false;private;2;8;;private InputChannel createInputChannel(int initialBackoff, int maxBackoff) {     return new MockInputChannel(mock(SingleInputGate.class), 0, new ResultPartitionID(), initialBackoff, maxBackoff). }
false;;1;3;;@Override void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException { }
false;;0;4;;@Override Optional<BufferAndAvailability> getNextBuffer() throws IOException, InterruptedException {     return Optional.empty(). }
false;;1;3;;@Override void sendTaskEvent(TaskEvent event) throws IOException { }
false;;0;4;;@Override boolean isReleased() {     return false. }
false;;0;3;;@Override void notifySubpartitionConsumed() throws IOException { }
false;;0;3;;@Override void releaseAllResources() throws IOException { }
