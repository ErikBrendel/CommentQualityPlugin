# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutionTest -> @Test 	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception;1530712207;Tests that the task restore state is nulled after the {@link Execution} has been_deployed. See FLINK-9693.;@Test_	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		final Execution execution = executionVertex.getCurrentExecutionAttempt()___		final JobManagerTaskRestore taskRestoreState = new JobManagerTaskRestore(1L, new TaskStateSnapshot())__		execution.setInitialState(taskRestoreState)___		assertThat(execution.getTaskRestore(), is(notNullValue()))___		_		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY).get()___		assertThat(execution.getTaskRestore(), is(nullValue()))__	};tests,that,the,task,restore,state,is,nulled,after,the,link,execution,has,been,deployed,see,flink,9693;test,public,void,test,task,restore,state,is,nulled,after,deployment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,final,execution,execution,execution,vertex,get,current,execution,attempt,final,job,manager,task,restore,task,restore,state,new,job,manager,task,restore,1l,new,task,state,snapshot,execution,set,initial,state,task,restore,state,assert,that,execution,get,task,restore,is,not,null,value,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,get,assert,that,execution,get,task,restore,is,null,value
ExecutionTest -> @Test 	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception;1532383539;Tests that the task restore state is nulled after the {@link Execution} has been_deployed. See FLINK-9693.;@Test_	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		final Execution execution = executionVertex.getCurrentExecutionAttempt()___		final JobManagerTaskRestore taskRestoreState = new JobManagerTaskRestore(1L, new TaskStateSnapshot())__		execution.setInitialState(taskRestoreState)___		assertThat(execution.getTaskRestore(), is(notNullValue()))___		_		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY).get()___		assertThat(execution.getTaskRestore(), is(nullValue()))__	};tests,that,the,task,restore,state,is,nulled,after,the,link,execution,has,been,deployed,see,flink,9693;test,public,void,test,task,restore,state,is,nulled,after,deployment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,final,execution,execution,execution,vertex,get,current,execution,attempt,final,job,manager,task,restore,task,restore,state,new,job,manager,task,restore,1l,new,task,state,snapshot,execution,set,initial,state,task,restore,state,assert,that,execution,get,task,restore,is,not,null,value,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,get,assert,that,execution,get,task,restore,is,null,value
ExecutionTest -> @Test 	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception;1540920690;Tests that the task restore state is nulled after the {@link Execution} has been_deployed. See FLINK-9693.;@Test_	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		final Execution execution = executionVertex.getCurrentExecutionAttempt()___		final JobManagerTaskRestore taskRestoreState = new JobManagerTaskRestore(1L, new TaskStateSnapshot())__		execution.setInitialState(taskRestoreState)___		assertThat(execution.getTaskRestore(), is(notNullValue()))___		_		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY, Collections.emptySet()).get()___		assertThat(execution.getTaskRestore(), is(nullValue()))__	};tests,that,the,task,restore,state,is,nulled,after,the,link,execution,has,been,deployed,see,flink,9693;test,public,void,test,task,restore,state,is,nulled,after,deployment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,final,execution,execution,execution,vertex,get,current,execution,attempt,final,job,manager,task,restore,task,restore,state,new,job,manager,task,restore,1l,new,task,state,snapshot,execution,set,initial,state,task,restore,state,assert,that,execution,get,task,restore,is,not,null,value,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,collections,empty,set,get,assert,that,execution,get,task,restore,is,null,value
ExecutionTest -> @Test 	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception;1549365080;Tests that the task restore state is nulled after the {@link Execution} has been_deployed. See FLINK-9693.;@Test_	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		final Execution execution = executionVertex.getCurrentExecutionAttempt()___		final JobManagerTaskRestore taskRestoreState = new JobManagerTaskRestore(1L, new TaskStateSnapshot())__		execution.setInitialState(taskRestoreState)___		assertThat(execution.getTaskRestore(), is(notNullValue()))___		_		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY, Collections.emptySet()).get()___		assertThat(execution.getTaskRestore(), is(nullValue()))__	};tests,that,the,task,restore,state,is,nulled,after,the,link,execution,has,been,deployed,see,flink,9693;test,public,void,test,task,restore,state,is,nulled,after,deployment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,final,execution,execution,execution,vertex,get,current,execution,attempt,final,job,manager,task,restore,task,restore,state,new,job,manager,task,restore,1l,new,task,state,snapshot,execution,set,initial,state,task,restore,state,assert,that,execution,get,task,restore,is,not,null,value,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,collections,empty,set,get,assert,that,execution,get,task,restore,is,null,value
ExecutionTest -> @Test 	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception;1550220073;Tests that the task restore state is nulled after the {@link Execution} has been_deployed. See FLINK-9693.;@Test_	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		final Execution execution = executionVertex.getCurrentExecutionAttempt()___		final JobManagerTaskRestore taskRestoreState = new JobManagerTaskRestore(1L, new TaskStateSnapshot())__		execution.setInitialState(taskRestoreState)___		assertThat(execution.getTaskRestore(), is(notNullValue()))___		_		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY, Collections.emptySet()).get()___		assertThat(execution.getTaskRestore(), is(nullValue()))__	};tests,that,the,task,restore,state,is,nulled,after,the,link,execution,has,been,deployed,see,flink,9693;test,public,void,test,task,restore,state,is,nulled,after,deployment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,final,execution,execution,execution,vertex,get,current,execution,attempt,final,job,manager,task,restore,task,restore,state,new,job,manager,task,restore,1l,new,task,state,snapshot,execution,set,initial,state,task,restore,state,assert,that,execution,get,task,restore,is,not,null,value,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,collections,empty,set,get,assert,that,execution,get,task,restore,is,null,value
ExecutionTest -> @Test 	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception;1550654143;Tests that the task restore state is nulled after the {@link Execution} has been_deployed. See FLINK-9693.;@Test_	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		final Execution execution = executionVertex.getCurrentExecutionAttempt()___		final JobManagerTaskRestore taskRestoreState = new JobManagerTaskRestore(1L, new TaskStateSnapshot())__		execution.setInitialState(taskRestoreState)___		assertThat(execution.getTaskRestore(), is(notNullValue()))___		_		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY, Collections.emptySet()).get()___		assertThat(execution.getTaskRestore(), is(nullValue()))__	};tests,that,the,task,restore,state,is,nulled,after,the,link,execution,has,been,deployed,see,flink,9693;test,public,void,test,task,restore,state,is,nulled,after,deployment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,final,execution,execution,execution,vertex,get,current,execution,attempt,final,job,manager,task,restore,task,restore,state,new,job,manager,task,restore,1l,new,task,state,snapshot,execution,set,initial,state,task,restore,state,assert,that,execution,get,task,restore,is,not,null,value,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,collections,empty,set,get,assert,that,execution,get,task,restore,is,null,value
ExecutionTest -> @Test 	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception;1550683188;Tests that the task restore state is nulled after the {@link Execution} has been_deployed. See FLINK-9693.;@Test_	public void testTaskRestoreStateIsNulledAfterDeployment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		final Execution execution = executionVertex.getCurrentExecutionAttempt()___		final JobManagerTaskRestore taskRestoreState = new JobManagerTaskRestore(1L, new TaskStateSnapshot())__		execution.setInitialState(taskRestoreState)___		assertThat(execution.getTaskRestore(), is(notNullValue()))___		_		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY, Collections.emptySet()).get()___		assertThat(execution.getTaskRestore(), is(nullValue()))__	};tests,that,the,task,restore,state,is,nulled,after,the,link,execution,has,been,deployed,see,flink,9693;test,public,void,test,task,restore,state,is,nulled,after,deployment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,final,execution,execution,execution,vertex,get,current,execution,attempt,final,job,manager,task,restore,task,restore,state,new,job,manager,task,restore,1l,new,task,state,snapshot,execution,set,initial,state,task,restore,state,assert,that,execution,get,task,restore,is,not,null,value,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,collections,empty,set,get,assert,that,execution,get,task,restore,is,null,value
ExecutionTest -> @Test 	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception;1519481114;Tests that a slot allocation from a {@link SlotProvider} is cancelled if the_{@link Execution} is cancelled.;@Test_	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		final ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution currentExecutionAttempt = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final CompletableFuture<Execution> allocationFuture = currentExecutionAttempt.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertThat(allocationFuture.isDone(), is(false))___		assertThat(slotProvider.getSlotRequestedFuture(jobVertexId, 0).get(), is(true))___		final Set<SlotRequestId> slotRequests = slotProvider.getSlotRequests()__		assertThat(slotRequests, hasSize(1))___		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.SCHEDULED))___		currentExecutionAttempt.cancel()__		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.CANCELED))___		assertThat(allocationFuture.isCompletedExceptionally(), is(true))___		final Set<SlotRequestId> canceledSlotRequests = slotProvider.getCanceledSlotRequests()__		assertThat(canceledSlotRequests, equalTo(slotRequests))__	};tests,that,a,slot,allocation,from,a,link,slot,provider,is,cancelled,if,the,link,execution,is,cancelled;test,public,void,test,slot,allocation,cancellation,when,execution,cancelled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,id,0,slot,future,final,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,current,execution,attempt,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,completable,future,execution,allocation,future,current,execution,attempt,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,that,allocation,future,is,done,is,false,assert,that,slot,provider,get,slot,requested,future,job,vertex,id,0,get,is,true,final,set,slot,request,id,slot,requests,slot,provider,get,slot,requests,assert,that,slot,requests,has,size,1,assert,that,current,execution,attempt,get,state,is,execution,state,scheduled,current,execution,attempt,cancel,assert,that,current,execution,attempt,get,state,is,execution,state,canceled,assert,that,allocation,future,is,completed,exceptionally,is,true,final,set,slot,request,id,canceled,slot,requests,slot,provider,get,canceled,slot,requests,assert,that,canceled,slot,requests,equal,to,slot,requests
ExecutionTest -> @Test 	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception;1530712207;Tests that a slot allocation from a {@link SlotProvider} is cancelled if the_{@link Execution} is cancelled.;@Test_	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		final ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution currentExecutionAttempt = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final CompletableFuture<Execution> allocationFuture = currentExecutionAttempt.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertThat(allocationFuture.isDone(), is(false))___		assertThat(slotProvider.getSlotRequestedFuture(jobVertexId, 0).get(), is(true))___		final Set<SlotRequestId> slotRequests = slotProvider.getSlotRequests()__		assertThat(slotRequests, hasSize(1))___		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.SCHEDULED))___		currentExecutionAttempt.cancel()__		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.CANCELED))___		assertThat(allocationFuture.isCompletedExceptionally(), is(true))___		final Set<SlotRequestId> canceledSlotRequests = slotProvider.getCanceledSlotRequests()__		assertThat(canceledSlotRequests, equalTo(slotRequests))__	};tests,that,a,slot,allocation,from,a,link,slot,provider,is,cancelled,if,the,link,execution,is,cancelled;test,public,void,test,slot,allocation,cancellation,when,execution,cancelled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,id,0,slot,future,final,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,current,execution,attempt,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,completable,future,execution,allocation,future,current,execution,attempt,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,that,allocation,future,is,done,is,false,assert,that,slot,provider,get,slot,requested,future,job,vertex,id,0,get,is,true,final,set,slot,request,id,slot,requests,slot,provider,get,slot,requests,assert,that,slot,requests,has,size,1,assert,that,current,execution,attempt,get,state,is,execution,state,scheduled,current,execution,attempt,cancel,assert,that,current,execution,attempt,get,state,is,execution,state,canceled,assert,that,allocation,future,is,completed,exceptionally,is,true,final,set,slot,request,id,canceled,slot,requests,slot,provider,get,canceled,slot,requests,assert,that,canceled,slot,requests,equal,to,slot,requests
ExecutionTest -> @Test 	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception;1532383539;Tests that a slot allocation from a {@link SlotProvider} is cancelled if the_{@link Execution} is cancelled.;@Test_	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		final ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution currentExecutionAttempt = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final CompletableFuture<Execution> allocationFuture = currentExecutionAttempt.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertThat(allocationFuture.isDone(), is(false))___		assertThat(slotProvider.getSlotRequestedFuture(jobVertexId, 0).get(), is(true))___		final Set<SlotRequestId> slotRequests = slotProvider.getSlotRequests()__		assertThat(slotRequests, hasSize(1))___		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.SCHEDULED))___		currentExecutionAttempt.cancel()__		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.CANCELED))___		assertThat(allocationFuture.isCompletedExceptionally(), is(true))___		final Set<SlotRequestId> canceledSlotRequests = slotProvider.getCanceledSlotRequests()__		assertThat(canceledSlotRequests, equalTo(slotRequests))__	};tests,that,a,slot,allocation,from,a,link,slot,provider,is,cancelled,if,the,link,execution,is,cancelled;test,public,void,test,slot,allocation,cancellation,when,execution,cancelled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,id,0,slot,future,final,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,current,execution,attempt,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,completable,future,execution,allocation,future,current,execution,attempt,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,that,allocation,future,is,done,is,false,assert,that,slot,provider,get,slot,requested,future,job,vertex,id,0,get,is,true,final,set,slot,request,id,slot,requests,slot,provider,get,slot,requests,assert,that,slot,requests,has,size,1,assert,that,current,execution,attempt,get,state,is,execution,state,scheduled,current,execution,attempt,cancel,assert,that,current,execution,attempt,get,state,is,execution,state,canceled,assert,that,allocation,future,is,completed,exceptionally,is,true,final,set,slot,request,id,canceled,slot,requests,slot,provider,get,canceled,slot,requests,assert,that,canceled,slot,requests,equal,to,slot,requests
ExecutionTest -> @Test 	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception;1540920690;Tests that a slot allocation from a {@link SlotProvider} is cancelled if the_{@link Execution} is cancelled.;@Test_	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		final ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution currentExecutionAttempt = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final CompletableFuture<Execution> allocationFuture = currentExecutionAttempt.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertThat(allocationFuture.isDone(), is(false))___		assertThat(slotProvider.getSlotRequestedFuture(jobVertexId, 0).get(), is(true))___		final Set<SlotRequestId> slotRequests = slotProvider.getSlotRequests()__		assertThat(slotRequests, hasSize(1))___		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.SCHEDULED))___		currentExecutionAttempt.cancel()__		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.CANCELED))___		assertThat(allocationFuture.isCompletedExceptionally(), is(true))___		final Set<SlotRequestId> canceledSlotRequests = slotProvider.getCanceledSlotRequests()__		assertThat(canceledSlotRequests, equalTo(slotRequests))__	};tests,that,a,slot,allocation,from,a,link,slot,provider,is,cancelled,if,the,link,execution,is,cancelled;test,public,void,test,slot,allocation,cancellation,when,execution,cancelled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,id,0,slot,future,final,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,current,execution,attempt,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,completable,future,execution,allocation,future,current,execution,attempt,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,that,allocation,future,is,done,is,false,assert,that,slot,provider,get,slot,requested,future,job,vertex,id,0,get,is,true,final,set,slot,request,id,slot,requests,slot,provider,get,slot,requests,assert,that,slot,requests,has,size,1,assert,that,current,execution,attempt,get,state,is,execution,state,scheduled,current,execution,attempt,cancel,assert,that,current,execution,attempt,get,state,is,execution,state,canceled,assert,that,allocation,future,is,completed,exceptionally,is,true,final,set,slot,request,id,canceled,slot,requests,slot,provider,get,canceled,slot,requests,assert,that,canceled,slot,requests,equal,to,slot,requests
ExecutionTest -> @Test 	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception;1549365080;Tests that a slot allocation from a {@link SlotProvider} is cancelled if the_{@link Execution} is cancelled.;@Test_	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		final ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution currentExecutionAttempt = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final CompletableFuture<Execution> allocationFuture = currentExecutionAttempt.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertThat(allocationFuture.isDone(), is(false))___		assertThat(slotProvider.getSlotRequestedFuture(jobVertexId, 0).get(), is(true))___		final Set<SlotRequestId> slotRequests = slotProvider.getSlotRequests()__		assertThat(slotRequests, hasSize(1))___		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.SCHEDULED))___		currentExecutionAttempt.cancel()__		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.CANCELED))___		assertThat(allocationFuture.isCompletedExceptionally(), is(true))___		final Set<SlotRequestId> canceledSlotRequests = slotProvider.getCanceledSlotRequests()__		assertThat(canceledSlotRequests, equalTo(slotRequests))__	};tests,that,a,slot,allocation,from,a,link,slot,provider,is,cancelled,if,the,link,execution,is,cancelled;test,public,void,test,slot,allocation,cancellation,when,execution,cancelled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,id,0,slot,future,final,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,current,execution,attempt,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,completable,future,execution,allocation,future,current,execution,attempt,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,that,allocation,future,is,done,is,false,assert,that,slot,provider,get,slot,requested,future,job,vertex,id,0,get,is,true,final,set,slot,request,id,slot,requests,slot,provider,get,slot,requests,assert,that,slot,requests,has,size,1,assert,that,current,execution,attempt,get,state,is,execution,state,scheduled,current,execution,attempt,cancel,assert,that,current,execution,attempt,get,state,is,execution,state,canceled,assert,that,allocation,future,is,completed,exceptionally,is,true,final,set,slot,request,id,canceled,slot,requests,slot,provider,get,canceled,slot,requests,assert,that,canceled,slot,requests,equal,to,slot,requests
ExecutionTest -> @Test 	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception;1550220073;Tests that a slot allocation from a {@link SlotProvider} is cancelled if the_{@link Execution} is cancelled.;@Test_	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		final ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution currentExecutionAttempt = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final CompletableFuture<Execution> allocationFuture = currentExecutionAttempt.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertThat(allocationFuture.isDone(), is(false))___		assertThat(slotProvider.getSlotRequestedFuture(jobVertexId, 0).get(), is(true))___		final Set<SlotRequestId> slotRequests = slotProvider.getSlotRequests()__		assertThat(slotRequests, hasSize(1))___		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.SCHEDULED))___		currentExecutionAttempt.cancel()__		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.CANCELED))___		assertThat(allocationFuture.isCompletedExceptionally(), is(true))___		final Set<SlotRequestId> canceledSlotRequests = slotProvider.getCanceledSlotRequests()__		assertThat(canceledSlotRequests, equalTo(slotRequests))__	};tests,that,a,slot,allocation,from,a,link,slot,provider,is,cancelled,if,the,link,execution,is,cancelled;test,public,void,test,slot,allocation,cancellation,when,execution,cancelled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,id,0,slot,future,final,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,current,execution,attempt,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,completable,future,execution,allocation,future,current,execution,attempt,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,that,allocation,future,is,done,is,false,assert,that,slot,provider,get,slot,requested,future,job,vertex,id,0,get,is,true,final,set,slot,request,id,slot,requests,slot,provider,get,slot,requests,assert,that,slot,requests,has,size,1,assert,that,current,execution,attempt,get,state,is,execution,state,scheduled,current,execution,attempt,cancel,assert,that,current,execution,attempt,get,state,is,execution,state,canceled,assert,that,allocation,future,is,completed,exceptionally,is,true,final,set,slot,request,id,canceled,slot,requests,slot,provider,get,canceled,slot,requests,assert,that,canceled,slot,requests,equal,to,slot,requests
ExecutionTest -> @Test 	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception;1550654143;Tests that a slot allocation from a {@link SlotProvider} is cancelled if the_{@link Execution} is cancelled.;@Test_	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		final ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution currentExecutionAttempt = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final CompletableFuture<Execution> allocationFuture = currentExecutionAttempt.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertThat(allocationFuture.isDone(), is(false))___		assertThat(slotProvider.getSlotRequestedFuture(jobVertexId, 0).get(), is(true))___		final Set<SlotRequestId> slotRequests = slotProvider.getSlotRequests()__		assertThat(slotRequests, hasSize(1))___		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.SCHEDULED))___		currentExecutionAttempt.cancel()__		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.CANCELED))___		assertThat(allocationFuture.isCompletedExceptionally(), is(true))___		final Set<SlotRequestId> canceledSlotRequests = slotProvider.getCanceledSlotRequests()__		assertThat(canceledSlotRequests, equalTo(slotRequests))__	};tests,that,a,slot,allocation,from,a,link,slot,provider,is,cancelled,if,the,link,execution,is,cancelled;test,public,void,test,slot,allocation,cancellation,when,execution,cancelled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,id,0,slot,future,final,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,current,execution,attempt,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,completable,future,execution,allocation,future,current,execution,attempt,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,that,allocation,future,is,done,is,false,assert,that,slot,provider,get,slot,requested,future,job,vertex,id,0,get,is,true,final,set,slot,request,id,slot,requests,slot,provider,get,slot,requests,assert,that,slot,requests,has,size,1,assert,that,current,execution,attempt,get,state,is,execution,state,scheduled,current,execution,attempt,cancel,assert,that,current,execution,attempt,get,state,is,execution,state,canceled,assert,that,allocation,future,is,completed,exceptionally,is,true,final,set,slot,request,id,canceled,slot,requests,slot,provider,get,canceled,slot,requests,assert,that,canceled,slot,requests,equal,to,slot,requests
ExecutionTest -> @Test 	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception;1550683188;Tests that a slot allocation from a {@link SlotProvider} is cancelled if the_{@link Execution} is cancelled.;@Test_	public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		final ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		final ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution currentExecutionAttempt = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final CompletableFuture<Execution> allocationFuture = currentExecutionAttempt.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertThat(allocationFuture.isDone(), is(false))___		assertThat(slotProvider.getSlotRequestedFuture(jobVertexId, 0).get(), is(true))___		final Set<SlotRequestId> slotRequests = slotProvider.getSlotRequests()__		assertThat(slotRequests, hasSize(1))___		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.SCHEDULED))___		currentExecutionAttempt.cancel()__		assertThat(currentExecutionAttempt.getState(), is(ExecutionState.CANCELED))___		assertThat(allocationFuture.isCompletedExceptionally(), is(true))___		final Set<SlotRequestId> canceledSlotRequests = slotProvider.getCanceledSlotRequests()__		assertThat(canceledSlotRequests, equalTo(slotRequests))__	};tests,that,a,slot,allocation,from,a,link,slot,provider,is,cancelled,if,the,link,execution,is,cancelled;test,public,void,test,slot,allocation,cancellation,when,execution,cancelled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,final,completable,future,logical,slot,slot,future,new,completable,future,slot,provider,add,slot,job,vertex,id,0,slot,future,final,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,final,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,current,execution,attempt,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,completable,future,execution,allocation,future,current,execution,attempt,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,that,allocation,future,is,done,is,false,assert,that,slot,provider,get,slot,requested,future,job,vertex,id,0,get,is,true,final,set,slot,request,id,slot,requests,slot,provider,get,slot,requests,assert,that,slot,requests,has,size,1,assert,that,current,execution,attempt,get,state,is,execution,state,scheduled,current,execution,attempt,cancel,assert,that,current,execution,attempt,get,state,is,execution,state,canceled,assert,that,allocation,future,is,completed,exceptionally,is,true,final,set,slot,request,id,canceled,slot,requests,slot,provider,get,canceled,slot,requests,assert,that,canceled,slot,requests,equal,to,slot,requests
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1509638685;Tests that slots are released if we cannot assign the allocated resource to the_Execution. In this case, a concurrent cancellation precedes the assignment.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final CompletableFuture<SimpleSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final TestingSlotOwner slotOwner = new TestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			new JobID(),_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		_		execution.cancel()___		assertEquals(ExecutionState.CANCELED, execution.getState())___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution,in,this,case,a,concurrent,cancellation,precedes,the,assignment;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,completable,future,simple,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,testing,slot,owner,slot,owner,new,testing,slot,owner,final,simple,slot,slot,new,simple,slot,new,job,id,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1513201052;Tests that slots are released if we cannot assign the allocated resource to the_Execution. In this case, a concurrent cancellation precedes the assignment.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final TestingSlotOwner slotOwner = new TestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			new JobID(),_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		_		execution.cancel()___		assertEquals(ExecutionState.CANCELED, execution.getState())___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution,in,this,case,a,concurrent,cancellation,precedes,the,assignment;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,testing,slot,owner,slot,owner,new,testing,slot,owner,final,simple,slot,slot,new,simple,slot,new,job,id,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1513201070;Tests that slots are released if we cannot assign the allocated resource to the_Execution. In this case, a concurrent cancellation precedes the assignment.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			new JobID(),_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		_		execution.cancel()___		assertEquals(ExecutionState.CANCELED, execution.getState())___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution,in,this,case,a,concurrent,cancellation,precedes,the,assignment;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,new,job,id,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1513258344;Tests that slots are released if we cannot assign the allocated resource to the_Execution. In this case, a concurrent cancellation precedes the assignment.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		_		execution.cancel()___		assertEquals(ExecutionState.CANCELED, execution.getState())___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution,in,this,case,a,concurrent,cancellation,precedes,the,assignment;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1513258345;Tests that slots are released if we cannot assign the allocated resource to the_Execution. In this case, a concurrent cancellation precedes the assignment.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		_		execution.cancel()___		assertEquals(ExecutionState.CANCELED, execution.getState())___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution,in,this,case,a,concurrent,cancellation,precedes,the,assignment;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1513261599;Tests that slots are released if we cannot assign the allocated resource to the_Execution. In this case, a concurrent cancellation precedes the assignment.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		_		execution.cancel()___		assertEquals(ExecutionState.CANCELED, execution.getState())___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution,in,this,case,a,concurrent,cancellation,precedes,the,assignment;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1518680774;Tests that slots are released if we cannot assign the allocated resource to the_Execution. In this case, a concurrent cancellation precedes the assignment.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		_		execution.cancel()___		assertEquals(ExecutionState.CANCELED, execution.getState())___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution,in,this,case,a,concurrent,cancellation,precedes,the,assignment;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1519316529;Tests that slots are released if we cannot assign the allocated resource to the_Execution. In this case, a concurrent cancellation precedes the assignment.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		_		execution.cancel()___		assertEquals(ExecutionState.CANCELED, execution.getState())___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution,in,this,case,a,concurrent,cancellation,precedes,the,assignment;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1519481114;Tests that slots are released if we cannot assign the allocated resource to the_Execution.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final LogicalSlot otherSlot = new TestingLogicalSlot()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		assertTrue(execution.tryAssignResource(otherSlot))___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,logical,slot,other,slot,new,testing,logical,slot,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,true,execution,try,assign,resource,other,slot,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1530712207;Tests that slots are released if we cannot assign the allocated resource to the_Execution.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final LogicalSlot otherSlot = new TestingLogicalSlot()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		assertTrue(execution.tryAssignResource(otherSlot))___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,logical,slot,other,slot,new,testing,logical,slot,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,true,execution,try,assign,resource,other,slot,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1532383539;Tests that slots are released if we cannot assign the allocated resource to the_Execution.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final LogicalSlot otherSlot = new TestingLogicalSlot()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		assertTrue(execution.tryAssignResource(otherSlot))___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,logical,slot,other,slot,new,testing,logical,slot,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,true,execution,try,assign,resource,other,slot,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1540920690;Tests that slots are released if we cannot assign the allocated resource to the_Execution.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final LogicalSlot otherSlot = new TestingLogicalSlot()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		assertTrue(execution.tryAssignResource(otherSlot))___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,logical,slot,other,slot,new,testing,logical,slot,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,true,execution,try,assign,resource,other,slot,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1549365080;Tests that slots are released if we cannot assign the allocated resource to the_Execution.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final LogicalSlot otherSlot = new TestingLogicalSlot()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		assertTrue(execution.tryAssignResource(otherSlot))___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,logical,slot,other,slot,new,testing,logical,slot,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,true,execution,try,assign,resource,other,slot,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1550220073;Tests that slots are released if we cannot assign the allocated resource to the_Execution.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final LogicalSlot otherSlot = new TestingLogicalSlot()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		assertTrue(execution.tryAssignResource(otherSlot))___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,logical,slot,other,slot,new,testing,logical,slot,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,true,execution,try,assign,resource,other,slot,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1550654143;Tests that slots are released if we cannot assign the allocated resource to the_Execution.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final LogicalSlot otherSlot = new TestingLogicalSlot()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		assertTrue(execution.tryAssignResource(otherSlot))___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,logical,slot,other,slot,new,testing,logical,slot,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,true,execution,try,assign,resource,other,slot,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnFailedResourceAssignment() throws Exception;1550683188;Tests that slots are released if we cannot assign the allocated resource to the_Execution.;@Test_	public void testSlotReleaseOnFailedResourceAssignment() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final CompletableFuture<LogicalSlot> slotFuture = new CompletableFuture<>()__		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, slotFuture)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final LogicalSlot otherSlot = new TestingLogicalSlot()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertFalse(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		_		assertTrue(execution.tryAssignResource(otherSlot))___		_		slotFuture.complete(slot)___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,slots,are,released,if,we,cannot,assign,the,allocated,resource,to,the,execution;test,public,void,test,slot,release,on,failed,resource,assignment,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,completable,future,logical,slot,slot,future,new,completable,future,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,slot,future,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,logical,slot,other,slot,new,testing,logical,slot,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,false,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,true,execution,try,assign,resource,other,slot,slot,future,complete,slot,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1509638685;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1513201052;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1513201070;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1513258344;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1513258345;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1513261599;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1518680774;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1519316529;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1519481114;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1530712207;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1532383539;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1540920690;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1549365080;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1550220073;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1550654143;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException;1550683188;Tests that all preferred locations are calculated.;@Test_	public void testAllPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>()___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture3.complete(taskManagerLocation3)___		assertFalse(preferredLocationsFuture.isDone())___		locationFuture2.complete(taskManagerLocation2)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3))__	};tests,that,all,preferred,locations,are,calculated;test,public,void,test,all,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location2,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,new,completable,future,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,all,assert,false,preferred,locations,future,is,done,location,future3,complete,task,manager,location3,assert,false,preferred,locations,future,is,done,location,future2,complete,task,manager,location2,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location2,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1509638685;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1513201052;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1513201070;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1513258344;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1513258345;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1513261599;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1518680774;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1519316529;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1519481114;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1530712207;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1532383539;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1540920690;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1549365080;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1550220073;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1550654143;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException;1550683188;Tests that any preferred locations are calculated.;@Test_	public void testAnyPreferredLocationCalculation() throws ExecutionException, InterruptedException {_		final TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation()__		final TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation()___		final CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1)__		final CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>()__		final CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3)___		final Execution execution = SchedulerTestUtils.getTestVertex(Arrays.asList(locationFuture1, locationFuture2, locationFuture3))___		CompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY)___		assertTrue(preferredLocationsFuture.isDone())___		final Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get()___		assertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3))__	};tests,that,any,preferred,locations,are,calculated;test,public,void,test,any,preferred,location,calculation,throws,execution,exception,interrupted,exception,final,task,manager,location,task,manager,location1,new,local,task,manager,location,final,task,manager,location,task,manager,location3,new,local,task,manager,location,final,completable,future,task,manager,location,location,future1,completable,future,completed,future,task,manager,location1,final,completable,future,task,manager,location,location,future2,new,completable,future,final,completable,future,task,manager,location,location,future3,completable,future,completed,future,task,manager,location3,final,execution,execution,scheduler,test,utils,get,test,vertex,arrays,as,list,location,future1,location,future2,location,future3,completable,future,collection,task,manager,location,preferred,locations,future,execution,calculate,preferred,locations,location,preference,constraint,any,assert,true,preferred,locations,future,is,done,final,collection,task,manager,location,preferred,locations,preferred,locations,future,get,assert,that,preferred,locations,contains,in,any,order,task,manager,location1,task,manager,location3
ExecutionTest -> @Test 	public void testSlotReleaseAtomicallyReleasesExecution() throws Exception;1550654143;Tests that a slot release will atomically release the assigned {@link Execution}.;@Test_	public void testSlotReleaseAtomicallyReleasesExecution() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final SingleLogicalSlot slot = ExecutionGraphSchedulingTest.createSingleLogicalSlot(_			slotOwner,_			new SimpleAckingTaskManagerGateway(),_			new SlotRequestId())__		final CompletableFuture<LogicalSlot> slotFuture = CompletableFuture.completedFuture(slot)___		final CountDownLatch slotRequestLatch = new CountDownLatch(1)__		final TestingSlotProvider slotProvider = new TestingSlotProvider(slotRequestId -> {_			slotRequestLatch.countDown()__			return slotFuture__		})__		final ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		final Execution execution = executionGraph.getJobVertex(jobVertex.getID()).getTaskVertices()[0].getCurrentExecutionAttempt()___		executionGraph.start(testMainThreadUtil.getMainThreadExecutor())__		testMainThreadUtil.execute(executionGraph::scheduleForExecution)___		_		slotRequestLatch.await()___		testMainThreadUtil.execute(() -> {_			assertThat(execution.getAssignedResource(), is(sameInstance(slot)))___			slot.release(new FlinkException("Test exception"))___			assertThat(execution.getReleaseFuture().isDone(), is(true))__		})__	};tests,that,a,slot,release,will,atomically,release,the,assigned,link,execution;test,public,void,test,slot,release,atomically,releases,execution,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,single,logical,slot,slot,execution,graph,scheduling,test,create,single,logical,slot,slot,owner,new,simple,acking,task,manager,gateway,new,slot,request,id,final,completable,future,logical,slot,slot,future,completable,future,completed,future,slot,final,count,down,latch,slot,request,latch,new,count,down,latch,1,final,testing,slot,provider,slot,provider,new,testing,slot,provider,slot,request,id,slot,request,latch,count,down,return,slot,future,final,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,final,execution,execution,execution,graph,get,job,vertex,job,vertex,get,id,get,task,vertices,0,get,current,execution,attempt,execution,graph,start,test,main,thread,util,get,main,thread,executor,test,main,thread,util,execute,execution,graph,schedule,for,execution,slot,request,latch,await,test,main,thread,util,execute,assert,that,execution,get,assigned,resource,is,same,instance,slot,slot,release,new,flink,exception,test,exception,assert,that,execution,get,release,future,is,done,is,true
ExecutionTest -> @Test 	public void testSlotReleaseAtomicallyReleasesExecution() throws Exception;1550683188;Tests that a slot release will atomically release the assigned {@link Execution}.;@Test_	public void testSlotReleaseAtomicallyReleasesExecution() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final SingleLogicalSlot slot = ExecutionGraphSchedulingTest.createSingleLogicalSlot(_			slotOwner,_			new SimpleAckingTaskManagerGateway(),_			new SlotRequestId())__		final CompletableFuture<LogicalSlot> slotFuture = CompletableFuture.completedFuture(slot)___		final CountDownLatch slotRequestLatch = new CountDownLatch(1)__		final TestingSlotProvider slotProvider = new TestingSlotProvider(slotRequestId -> {_			slotRequestLatch.countDown()__			return slotFuture__		})__		final ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		final Execution execution = executionGraph.getJobVertex(jobVertex.getID()).getTaskVertices()[0].getCurrentExecutionAttempt()___		executionGraph.start(testMainThreadUtil.getMainThreadExecutor())__		testMainThreadUtil.execute(executionGraph::scheduleForExecution)___		_		slotRequestLatch.await()___		testMainThreadUtil.execute(() -> {_			assertThat(execution.getAssignedResource(), is(sameInstance(slot)))___			slot.release(new FlinkException("Test exception"))___			assertThat(execution.getReleaseFuture().isDone(), is(true))__		})__	};tests,that,a,slot,release,will,atomically,release,the,assigned,link,execution;test,public,void,test,slot,release,atomically,releases,execution,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,single,logical,slot,slot,execution,graph,scheduling,test,create,single,logical,slot,slot,owner,new,simple,acking,task,manager,gateway,new,slot,request,id,final,completable,future,logical,slot,slot,future,completable,future,completed,future,slot,final,count,down,latch,slot,request,latch,new,count,down,latch,1,final,testing,slot,provider,slot,provider,new,testing,slot,provider,slot,request,id,slot,request,latch,count,down,return,slot,future,final,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,final,execution,execution,execution,graph,get,job,vertex,job,vertex,get,id,get,task,vertices,0,get,current,execution,attempt,execution,graph,start,test,main,thread,util,get,main,thread,executor,test,main,thread,util,execute,execution,graph,schedule,for,execution,slot,request,latch,await,test,main,thread,util,execute,assert,that,execution,get,assigned,resource,is,same,instance,slot,slot,release,new,flink,exception,test,exception,assert,that,execution,get,release,future,is,done,is,true
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1509638685;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final TestingSlotOwner slotOwner = new TestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			new JobID(),_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,testing,slot,owner,slot,owner,new,testing,slot,owner,final,simple,slot,slot,new,simple,slot,new,job,id,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1513201052;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final TestingSlotOwner slotOwner = new TestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			new JobID(),_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,testing,slot,owner,slot,owner,new,testing,slot,owner,final,simple,slot,slot,new,simple,slot,new,job,id,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1513201070;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			new JobID(),_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,new,job,id,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1513258344;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1513258345;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1513261599;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1518680774;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1519316529;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1519481114;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1530712207;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1532383539;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1540920690;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1549365080;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1550220073;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1550654143;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception;1550683188;Tests that the slot is released in case of a execution cancellation when having_a slot assigned and being in state SCHEDULED.;@Test_	public void testSlotReleaseOnExecutionCancellationInScheduled() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELED, execution.getState())___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,having,a,slot,assigned,and,being,in,state,scheduled;test,public,void,test,slot,release,on,execution,cancellation,in,scheduled,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,cancel,assert,equals,execution,state,canceled,execution,get,state,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1509638685;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final TestingSlotOwner slotOwner = new TestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			new JobID(),_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,testing,slot,owner,slot,owner,new,testing,slot,owner,final,simple,slot,slot,new,simple,slot,new,job,id,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1513201052;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final TestingSlotOwner slotOwner = new TestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			new JobID(),_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,testing,slot,owner,slot,owner,new,testing,slot,owner,final,simple,slot,slot,new,simple,slot,new,job,id,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1513201070;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			new JobID(),_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,new,job,id,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1513258344;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1513258345;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1513261599;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL)___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1518680774;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1519316529;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1519481114;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1530712207;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1532383539;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1540920690;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1549365080;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1550220073;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1550654143;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.cancelingComplete()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,canceling,complete,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception;1550683188;Tests that the slot is released in case of a execution cancellation when being in state_RUNNING.;@Test_	public void testSlotReleaseOnExecutionCancellationInRunning() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		final Execution execution = executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt()___		CompletableFuture<Execution> allocationFuture = execution.allocateAndAssignSlotForExecution(_			slotProvider,_			false,_			LocationPreferenceConstraint.ALL,_			Collections.emptySet(),_			TestingUtils.infiniteTime())___		assertTrue(allocationFuture.isDone())___		assertEquals(ExecutionState.SCHEDULED, execution.getState())___		assertEquals(slot, execution.getAssignedResource())___		execution.deploy()___		execution.switchToRunning()___		_		execution.cancel()__		assertEquals(ExecutionState.CANCELING, execution.getState())___		execution.completeCancelling()___		assertEquals(slot, slotOwner.getReturnedSlotFuture().get())__	};tests,that,the,slot,is,released,in,case,of,a,execution,cancellation,when,being,in,state,running;test,public,void,test,slot,release,on,execution,cancellation,in,running,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,final,execution,execution,execution,job,vertex,get,task,vertices,0,get,current,execution,attempt,completable,future,execution,allocation,future,execution,allocate,and,assign,slot,for,execution,slot,provider,false,location,preference,constraint,all,collections,empty,set,testing,utils,infinite,time,assert,true,allocation,future,is,done,assert,equals,execution,state,scheduled,execution,get,state,assert,equals,slot,execution,get,assigned,resource,execution,deploy,execution,switch,to,running,execution,cancel,assert,equals,execution,state,canceling,execution,get,state,execution,complete,cancelling,assert,equals,slot,slot,owner,get,returned,slot,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1513201070;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			new JobID(),_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway())___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		assertTrue(executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY))___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<Slot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		_		_		CompletableFuture.runAsync(_			() -> currentExecutionAttempt.cancelingComplete(),_			TestingUtils.defaultExecutor())___		_		Thread.yield()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})____		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,new,job,id,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,assert,true,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,completable,future,run,async,current,execution,attempt,canceling,complete,testing,utils,default,executor,thread,yield,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1513258344;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway(),_			null,_			null)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		assertTrue(executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY))___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<Slot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		_		_		CompletableFuture.runAsync(_			() -> currentExecutionAttempt.cancelingComplete(),_			TestingUtils.defaultExecutor())___		_		Thread.yield()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})____		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,null,null,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,assert,true,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,completable,future,run,async,current,execution,attempt,canceling,complete,testing,utils,default,executor,thread,yield,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1513258345;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway(),_			null,_			null)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		assertTrue(executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY))___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<LogicalSlot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		_		_		CompletableFuture.runAsync(_			() -> currentExecutionAttempt.cancelingComplete(),_			TestingUtils.defaultExecutor())___		_		Thread.yield()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})____		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,null,null,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,assert,true,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,logical,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,completable,future,run,async,current,execution,attempt,canceling,complete,testing,utils,default,executor,thread,yield,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1513261599;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway(),_			null,_			null)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		assertTrue(executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY))___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<LogicalSlot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		_		_		CompletableFuture.runAsync(_			() -> currentExecutionAttempt.cancelingComplete(),_			TestingUtils.defaultExecutor())___		_		Thread.yield()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})____		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,null,null,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,assert,true,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,logical,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,completable,future,run,async,current,execution,attempt,canceling,complete,testing,utils,default,executor,thread,yield,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1518680774;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway(),_			null,_			null)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		assertTrue(executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY))___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<LogicalSlot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		_		_		CompletableFuture.runAsync(_			() -> currentExecutionAttempt.cancelingComplete(),_			TestingUtils.defaultExecutor())___		_		Thread.yield()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})____		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,null,null,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,assert,true,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,logical,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,completable,future,run,async,current,execution,attempt,canceling,complete,testing,utils,default,executor,thread,yield,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1519316529;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway(),_			null,_			null)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY).get()___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<LogicalSlot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		_		_		CompletableFuture.runAsync(_			() -> currentExecutionAttempt.cancelingComplete(),_			TestingUtils.defaultExecutor())___		_		Thread.yield()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})____		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,null,null,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,get,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,logical,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,completable,future,run,async,current,execution,attempt,canceling,complete,testing,utils,default,executor,thread,yield,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1519481114;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertexID jobVertexId = new JobVertexID()__		final JobVertex jobVertex = new JobVertex("Test vertex", jobVertexId)__		jobVertex.setInvokableClass(NoOpInvokable.class)___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()___		final SimpleSlot slot = new SimpleSlot(_			slotOwner,_			new LocalTaskManagerLocation(),_			0,_			new SimpleAckingTaskManagerGateway(),_			null,_			null)___		final ProgrammedSlotProvider slotProvider = new ProgrammedSlotProvider(1)__		slotProvider.addSlot(jobVertexId, 0, CompletableFuture.completedFuture(slot))___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY).get()___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<LogicalSlot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		_		_		CompletableFuture.runAsync(_			() -> currentExecutionAttempt.cancelingComplete(),_			TestingUtils.defaultExecutor())___		_		Thread.yield()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})____		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,job,vertex,job,vertex,new,job,vertex,test,vertex,job,vertex,id,job,vertex,set,invokable,class,no,op,invokable,class,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,simple,slot,slot,new,simple,slot,slot,owner,new,local,task,manager,location,0,new,simple,acking,task,manager,gateway,null,null,final,programmed,slot,provider,slot,provider,new,programmed,slot,provider,1,slot,provider,add,slot,job,vertex,id,0,completable,future,completed,future,slot,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,get,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,logical,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,completable,future,run,async,current,execution,attempt,canceling,complete,testing,utils,default,executor,thread,yield,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1530712207;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY).get()___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<LogicalSlot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		_		_		CompletableFuture.runAsync(_			() -> currentExecutionAttempt.cancelingComplete(),_			TestingUtils.defaultExecutor())___		_		Thread.yield()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})____		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,get,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,logical,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,completable,future,run,async,current,execution,attempt,canceling,complete,testing,utils,default,executor,thread,yield,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1532383539;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY).get()___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<LogicalSlot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		_		_		CompletableFuture.runAsync(_			() -> currentExecutionAttempt.cancelingComplete(),_			TestingUtils.defaultExecutor())___		_		Thread.yield()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})____		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,get,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,logical,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,completable,future,run,async,current,execution,attempt,canceling,complete,testing,utils,default,executor,thread,yield,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1540920690;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY, Collections.emptySet()).get()___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<LogicalSlot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		_		_		CompletableFuture.runAsync(_			() -> currentExecutionAttempt.cancelingComplete(),_			TestingUtils.defaultExecutor())___		_		Thread.yield()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})____		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,collections,empty,set,get,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,logical,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,completable,future,run,async,current,execution,attempt,canceling,complete,testing,utils,default,executor,thread,yield,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1549365080;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY, Collections.emptySet()).get()___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<LogicalSlot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		currentExecutionAttempt.cancelingComplete()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})___		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,collections,empty,set,get,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,logical,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,current,execution,attempt,canceling,complete,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1550220073;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY, Collections.emptySet()).get()___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<LogicalSlot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		currentExecutionAttempt.cancelingComplete()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})___		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,collections,empty,set,get,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,logical,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,current,execution,attempt,canceling,complete,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1550654143;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY, Collections.emptySet()).get()___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<LogicalSlot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		currentExecutionAttempt.cancelingComplete()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})___		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,collections,empty,set,get,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,logical,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,current,execution,attempt,canceling,complete,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
ExecutionTest -> @Test 	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception;1550683188;Checks that the {@link Execution} termination future is only completed after the_assigned slot has been released.__<p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has_to execute this test multiple times to see the failure.;@Test_	public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {_		final JobVertex jobVertex = createNoOpJobVertex()__		final JobVertexID jobVertexId = jobVertex.getID()___		final SingleSlotTestingSlotOwner slotOwner = new SingleSlotTestingSlotOwner()__		final ProgrammedSlotProvider slotProvider = createProgrammedSlotProvider(_			1,_			Collections.singleton(jobVertexId),_			slotOwner)___		ExecutionGraph executionGraph = ExecutionGraphTestUtils.createSimpleTestGraph(_			new JobID(),_			slotProvider,_			new NoRestartStrategy(),_			jobVertex)___		executionGraph.start(TestingComponentMainThreadExecutorServiceAdapter.forMainThread())___		ExecutionJobVertex executionJobVertex = executionGraph.getJobVertex(jobVertexId)___		ExecutionVertex executionVertex = executionJobVertex.getTaskVertices()[0]___		executionVertex.scheduleForExecution(slotProvider, false, LocationPreferenceConstraint.ANY, Collections.emptySet()).get()___		Execution currentExecutionAttempt = executionVertex.getCurrentExecutionAttempt()___		CompletableFuture<LogicalSlot> returnedSlotFuture = slotOwner.getReturnedSlotFuture()__		CompletableFuture<?> terminationFuture = executionVertex.cancel()___		currentExecutionAttempt.completeCancelling()___		CompletableFuture<Boolean> restartFuture = terminationFuture.thenApply(_			ignored -> {_				assertTrue(returnedSlotFuture.isDone())__				return true__			})___		_		restartFuture.get()__	};checks,that,the,link,execution,termination,future,is,only,completed,after,the,assigned,slot,has,been,released,p,note,this,test,only,fails,spuriously,without,the,fix,of,this,commit,thus,one,has,to,execute,this,test,multiple,times,to,see,the,failure;test,public,void,test,termination,future,is,completed,after,slot,release,throws,exception,final,job,vertex,job,vertex,create,no,op,job,vertex,final,job,vertex,id,job,vertex,id,job,vertex,get,id,final,single,slot,testing,slot,owner,slot,owner,new,single,slot,testing,slot,owner,final,programmed,slot,provider,slot,provider,create,programmed,slot,provider,1,collections,singleton,job,vertex,id,slot,owner,execution,graph,execution,graph,execution,graph,test,utils,create,simple,test,graph,new,job,id,slot,provider,new,no,restart,strategy,job,vertex,execution,graph,start,testing,component,main,thread,executor,service,adapter,for,main,thread,execution,job,vertex,execution,job,vertex,execution,graph,get,job,vertex,job,vertex,id,execution,vertex,execution,vertex,execution,job,vertex,get,task,vertices,0,execution,vertex,schedule,for,execution,slot,provider,false,location,preference,constraint,any,collections,empty,set,get,execution,current,execution,attempt,execution,vertex,get,current,execution,attempt,completable,future,logical,slot,returned,slot,future,slot,owner,get,returned,slot,future,completable,future,termination,future,execution,vertex,cancel,current,execution,attempt,complete,cancelling,completable,future,boolean,restart,future,termination,future,then,apply,ignored,assert,true,returned,slot,future,is,done,return,true,restart,future,get
