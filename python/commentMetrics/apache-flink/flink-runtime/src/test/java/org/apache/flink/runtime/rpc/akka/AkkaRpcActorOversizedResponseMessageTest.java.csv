commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;8;;@BeforeClass public static void setupClass() throws Exception {     final Configuration configuration = new Configuration().     configuration.setString(AkkaOptions.FRAMESIZE, FRAMESIZE + " b").     rpcService1 = AkkaRpcServiceUtils.createRpcService("localhost", 0, configuration).     rpcService2 = AkkaRpcServiceUtils.createRpcService("localhost", 0, configuration). }
false;public,static;0;4;;@AfterClass public static void teardownClass() throws Exception {     RpcUtils.terminateRpcServices(TIMEOUT, rpcService1, rpcService2). }
false;public;0;10;;@Test public void testOverSizedResponseMsgAsync() throws Exception {     try {         runRemoteMessageResponseTest(OVERSIZED_PAYLOAD, this::requestMessageAsync).         fail("Expected the RPC to fail.").     } catch (ExecutionException e) {         assertThat(ExceptionUtils.findThrowable(e, AkkaRpcException.class).isPresent(), is(true)).     } }
false;public;0;5;;@Test public void testNormalSizedResponseMsgAsync() throws Exception {     final String message = runRemoteMessageResponseTest(PAYLOAD, this::requestMessageAsync).     assertThat(message, is(equalTo(PAYLOAD))). }
false;public;0;5;;@Test public void testNormalSizedResponseMsgSync() throws Exception {     final String message = runRemoteMessageResponseTest(PAYLOAD, MessageRpcGateway::messageSync).     assertThat(message, is(equalTo(PAYLOAD))). }
false;public;0;10;;@Test public void testOverSizedResponseMsgSync() throws Exception {     try {         runRemoteMessageResponseTest(OVERSIZED_PAYLOAD, MessageRpcGateway::messageSync).         fail("Expected the RPC to fail.").     } catch (RpcException e) {         assertThat(ExceptionUtils.findThrowable(e, AkkaRpcException.class).isPresent(), is(true)).     } }
true;public;0;5;/**  * Tests that we can send arbitrarily large objects when communicating locally with  * the rpc endpoint.  */ ;/**  * Tests that we can send arbitrarily large objects when communicating locally with  * the rpc endpoint.  */ @Test public void testLocalOverSizedResponseMsgSync() throws Exception {     final String message = runLocalMessageResponseTest(OVERSIZED_PAYLOAD, MessageRpcGateway::messageSync).     assertThat(message, is(equalTo(OVERSIZED_PAYLOAD))). }
true;public;0;5;/**  * Tests that we can send arbitrarily large objects when communicating locally with  * the rpc endpoint.  */ ;/**  * Tests that we can send arbitrarily large objects when communicating locally with  * the rpc endpoint.  */ @Test public void testLocalOverSizedResponseMsgAsync() throws Exception {     final String message = runLocalMessageResponseTest(OVERSIZED_PAYLOAD, this::requestMessageAsync).     assertThat(message, is(equalTo(OVERSIZED_PAYLOAD))). }
false;private;1;4;;private String requestMessageAsync(MessageRpcGateway messageRpcGateway) throws Exception {     CompletableFuture<String> messageFuture = messageRpcGateway.messageAsync().     return messageFuture.get(). }
false;private;2;13;;private <T> T runRemoteMessageResponseTest(String payload, FunctionWithException<MessageRpcGateway, T, Exception> rpcCall) throws Exception {     final MessageRpcEndpoint rpcEndpoint = new MessageRpcEndpoint(rpcService1, payload).     try {         rpcEndpoint.start().         MessageRpcGateway rpcGateway = rpcService2.connect(rpcEndpoint.getAddress(), MessageRpcGateway.class).get().         return rpcCall.apply(rpcGateway).     } finally {         RpcUtils.terminateRpcEndpoint(rpcEndpoint, TIMEOUT).     } }
false;private;2;13;;private <T> T runLocalMessageResponseTest(String payload, FunctionWithException<MessageRpcGateway, T, Exception> rpcCall) throws Exception {     final MessageRpcEndpoint rpcEndpoint = new MessageRpcEndpoint(rpcService1, payload).     try {         rpcEndpoint.start().         MessageRpcGateway rpcGateway = rpcService1.connect(rpcEndpoint.getAddress(), MessageRpcGateway.class).get().         return rpcCall.apply(rpcGateway).     } finally {         RpcUtils.terminateRpcEndpoint(rpcEndpoint, TIMEOUT).     } }
false;;0;1;;CompletableFuture<String> messageAsync().
false;;0;1;;String messageSync() throws RpcException.
false;public;0;4;;@Override public CompletableFuture<String> messageAsync() {     return CompletableFuture.completedFuture(message). }
false;public;0;4;;@Override public String messageSync() throws RpcException {     return message. }
