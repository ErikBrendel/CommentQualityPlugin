commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setupTest() {     embeddedHaServices = new EmbeddedHaServices(Executors.directExecutor()). }
false;public;0;7;;@After public void teardownTest() throws Exception {     if (embeddedHaServices != null) {         embeddedHaServices.closeAndCleanupAllData().         embeddedHaServices = null.     } }
true;public;0;26;/**  * Tests that exactly one JobManager is elected as the leader for a given job id.  */ ;/**  * Tests that exactly one JobManager is elected as the leader for a given job id.  */ @Test public void testJobManagerLeaderElection() throws Exception {     JobID jobId1 = new JobID().     JobID jobId2 = new JobID().     LeaderContender leaderContender1 = mock(LeaderContender.class).     LeaderContender leaderContender2 = mock(LeaderContender.class).     LeaderContender leaderContenderDifferentJobId = mock(LeaderContender.class).     LeaderElectionService leaderElectionService1 = embeddedHaServices.getJobManagerLeaderElectionService(jobId1).     LeaderElectionService leaderElectionService2 = embeddedHaServices.getJobManagerLeaderElectionService(jobId1).     LeaderElectionService leaderElectionServiceDifferentJobId = embeddedHaServices.getJobManagerLeaderElectionService(jobId2).     leaderElectionService1.start(leaderContender1).     leaderElectionService2.start(leaderContender2).     leaderElectionServiceDifferentJobId.start(leaderContenderDifferentJobId).     ArgumentCaptor<UUID> leaderIdArgumentCaptor1 = ArgumentCaptor.forClass(UUID.class).     ArgumentCaptor<UUID> leaderIdArgumentCaptor2 = ArgumentCaptor.forClass(UUID.class).     verify(leaderContender1, atLeast(0)).grantLeadership(leaderIdArgumentCaptor1.capture()).     verify(leaderContender2, atLeast(0)).grantLeadership(leaderIdArgumentCaptor2.capture()).     assertTrue(leaderIdArgumentCaptor1.getAllValues().isEmpty() ^ leaderIdArgumentCaptor2.getAllValues().isEmpty()).     verify(leaderContenderDifferentJobId).grantLeadership(any(UUID.class)). }
true;public;0;18;/**  * Tests that exactly one ResourceManager is elected as the leader.  */ ;/**  * Tests that exactly one ResourceManager is elected as the leader.  */ @Test public void testResourceManagerLeaderElection() throws Exception {     LeaderContender leaderContender1 = mock(LeaderContender.class).     LeaderContender leaderContender2 = mock(LeaderContender.class).     LeaderElectionService leaderElectionService1 = embeddedHaServices.getResourceManagerLeaderElectionService().     LeaderElectionService leaderElectionService2 = embeddedHaServices.getResourceManagerLeaderElectionService().     leaderElectionService1.start(leaderContender1).     leaderElectionService2.start(leaderContender2).     ArgumentCaptor<UUID> leaderIdArgumentCaptor1 = ArgumentCaptor.forClass(UUID.class).     ArgumentCaptor<UUID> leaderIdArgumentCaptor2 = ArgumentCaptor.forClass(UUID.class).     verify(leaderContender1, atLeast(0)).grantLeadership(leaderIdArgumentCaptor1.capture()).     verify(leaderContender2, atLeast(0)).grantLeadership(leaderIdArgumentCaptor2.capture()).     assertTrue(leaderIdArgumentCaptor1.getAllValues().isEmpty() ^ leaderIdArgumentCaptor2.getAllValues().isEmpty()). }
true;public;0;23;/**  * Tests the JobManager leader retrieval for a given job.  */ ;/**  * Tests the JobManager leader retrieval for a given job.  */ @Test public void testJobManagerLeaderRetrieval() throws Exception {     final String address = "foobar".     JobID jobId = new JobID().     LeaderRetrievalListener leaderRetrievalListener = mock(LeaderRetrievalListener.class).     LeaderContender leaderContender = mock(LeaderContender.class).     when(leaderContender.getAddress()).thenReturn(address).     LeaderElectionService leaderElectionService = embeddedHaServices.getJobManagerLeaderElectionService(jobId).     LeaderRetrievalService leaderRetrievalService = embeddedHaServices.getJobManagerLeaderRetriever(jobId).     leaderRetrievalService.start(leaderRetrievalListener).     leaderElectionService.start(leaderContender).     ArgumentCaptor<UUID> leaderIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class).     verify(leaderContender).grantLeadership(leaderIdArgumentCaptor.capture()).     final UUID leaderId = leaderIdArgumentCaptor.getValue().     leaderElectionService.confirmLeaderSessionID(leaderId).     verify(leaderRetrievalListener).notifyLeaderAddress(eq(address), eq(leaderId)). }
true;public;0;22;/**  * Tests the ResourceManager leader retrieval for a given job.  */ ;/**  * Tests the ResourceManager leader retrieval for a given job.  */ @Test public void testResourceManagerLeaderRetrieval() throws Exception {     final String address = "foobar".     LeaderRetrievalListener leaderRetrievalListener = mock(LeaderRetrievalListener.class).     LeaderContender leaderContender = mock(LeaderContender.class).     when(leaderContender.getAddress()).thenReturn(address).     LeaderElectionService leaderElectionService = embeddedHaServices.getResourceManagerLeaderElectionService().     LeaderRetrievalService leaderRetrievalService = embeddedHaServices.getResourceManagerLeaderRetriever().     leaderRetrievalService.start(leaderRetrievalListener).     leaderElectionService.start(leaderContender).     ArgumentCaptor<UUID> leaderIdArgumentCaptor = ArgumentCaptor.forClass(UUID.class).     verify(leaderContender).grantLeadership(leaderIdArgumentCaptor.capture()).     final UUID leaderId = leaderIdArgumentCaptor.getValue().     leaderElectionService.confirmLeaderSessionID(leaderId).     verify(leaderRetrievalListener).notifyLeaderAddress(eq(address), eq(leaderId)). }
true;public;0;27;/**  * Tests that concurrent leadership operations (granting and revoking) leadership leave the  * system in a sane state.  */ ;/**  * Tests that concurrent leadership operations (granting and revoking) leadership leave the  * system in a sane state.  */ @Test public void testConcurrentLeadershipOperations() throws Exception {     final LeaderElectionService dispatcherLeaderElectionService = embeddedHaServices.getDispatcherLeaderElectionService().     final ArrayBlockingQueue<UUID> offeredSessionIds = new ArrayBlockingQueue<>(2).     final TestingLeaderContender leaderContender = new TestingLeaderContender(offeredSessionIds).     dispatcherLeaderElectionService.start(leaderContender).     final UUID oldLeaderSessionId = offeredSessionIds.take().     assertThat(dispatcherLeaderElectionService.hasLeadership(oldLeaderSessionId), is(true)).     embeddedHaServices.getDispatcherLeaderService().revokeLeadership().get().     assertThat(dispatcherLeaderElectionService.hasLeadership(oldLeaderSessionId), is(false)).     embeddedHaServices.getDispatcherLeaderService().grantLeadership().     final UUID newLeaderSessionId = offeredSessionIds.take().     assertThat(dispatcherLeaderElectionService.hasLeadership(newLeaderSessionId), is(true)).     dispatcherLeaderElectionService.confirmLeaderSessionID(oldLeaderSessionId).     dispatcherLeaderElectionService.confirmLeaderSessionID(newLeaderSessionId).     assertThat(dispatcherLeaderElectionService.hasLeadership(newLeaderSessionId), is(true)).     leaderContender.tryRethrowException(). }
false;public;1;4;;@Override public void grantLeadership(UUID leaderSessionID) {     offeredSessionIds.offer(leaderSessionID). }
false;public;0;2;;@Override public void revokeLeadership() { }
false;public;0;4;;@Override public String getAddress() {     return "foobar". }
false;public;1;4;;@Override public void handleError(Exception exception) {     occurredException.compareAndSet(null, exception). }
false;public;0;3;;public void tryRethrowException() throws Exception {     ExceptionUtils.tryRethrowException(occurredException.get()). }
