commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setSubpartitionView(ResultSubpartitionView subpartitionView) {     this.subpartitionView = checkNotNull(subpartitionView). }
false;public;0;48;;@Override public Boolean call() throws Exception {     try {         while (true) {             if (Thread.interrupted()) {                 throw new InterruptedException().             }             synchronized (dataAvailableNotification) {                 while (!dataAvailableNotification.getAndSet(false)) {                     dataAvailableNotification.wait().                 }             }             final BufferAndBacklog bufferAndBacklog = subpartitionView.getNextBuffer().             if (isSlowConsumer) {                 Thread.sleep(random.nextInt(MAX_SLEEP_TIME_MS + 1)).             }             if (bufferAndBacklog != null) {                 if (bufferAndBacklog.isMoreAvailable()) {                     dataAvailableNotification.set(true).                 }                 if (bufferAndBacklog.buffer().isBuffer()) {                     callback.onBuffer(bufferAndBacklog.buffer()).                 } else {                     final AbstractEvent event = EventSerializer.fromBuffer(bufferAndBacklog.buffer(), getClass().getClassLoader()).                     callback.onEvent(event).                     bufferAndBacklog.buffer().recycleBuffer().                     if (event.getClass() == EndOfPartitionEvent.class) {                         subpartitionView.notifySubpartitionConsumed().                         return true.                     }                 }             } else if (subpartitionView.isReleased()) {                 return true.             }         }     } finally {         subpartitionView.releaseAllResources().     } }
false;public;0;7;;@Override public void notifyDataAvailable() {     synchronized (dataAvailableNotification) {         dataAvailableNotification.set(true).         dataAvailableNotification.notifyAll().     } }
