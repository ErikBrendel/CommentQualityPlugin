commented;modifiers;parameterAmount;loc;comment;code
false;public;0;49;;@Test public void testCreateDump() throws Exception {     ActorSystem s = AkkaUtils.createLocalActorSystem(new Configuration()).     try {         ActorRef serviceActor = MetricQueryService.startMetricQueryService(s, null, Long.MAX_VALUE).         TestActorRef testActorRef = TestActorRef.create(s, Props.create(TestActor.class)).         TestActor testActor = (TestActor) testActorRef.underlyingActor().         final Counter c = new SimpleCounter().         final Gauge<String> g = () -> "Hello".         final Histogram h = new TestHistogram().         final Meter m = new TestMeter().         final TaskManagerMetricGroup tm = UnregisteredMetricGroups.createUnregisteredTaskManagerMetricGroup().         MetricQueryService.notifyOfAddedMetric(serviceActor, c, "counter", tm).         MetricQueryService.notifyOfAddedMetric(serviceActor, g, "gauge", tm).         MetricQueryService.notifyOfAddedMetric(serviceActor, h, "histogram", tm).         MetricQueryService.notifyOfAddedMetric(serviceActor, m, "meter", tm).         serviceActor.tell(MetricQueryService.getCreateDump(), testActorRef).         testActor.waitForResult().         MetricDumpSerialization.MetricSerializationResult dump = testActor.getSerializationResult().         assertTrue(dump.serializedCounters.length > 0).         assertTrue(dump.serializedGauges.length > 0).         assertTrue(dump.serializedHistograms.length > 0).         assertTrue(dump.serializedMeters.length > 0).         MetricQueryService.notifyOfRemovedMetric(serviceActor, c).         MetricQueryService.notifyOfRemovedMetric(serviceActor, g).         MetricQueryService.notifyOfRemovedMetric(serviceActor, h).         MetricQueryService.notifyOfRemovedMetric(serviceActor, m).         serviceActor.tell(MetricQueryService.getCreateDump(), testActorRef).         testActor.waitForResult().         MetricDumpSerialization.MetricSerializationResult emptyDump = testActor.getSerializationResult().         assertEquals(0, emptyDump.serializedCounters.length).         assertEquals(0, emptyDump.serializedGauges.length).         assertEquals(0, emptyDump.serializedHistograms.length).         assertEquals(0, emptyDump.serializedMeters.length).     } finally {         s.terminate().     } }
false;public;0;61;;@Test public void testHandleOversizedMetricMessage() throws Exception {     ActorSystem s = AkkaUtils.createLocalActorSystem(new Configuration()).     try {         final long sizeLimit = 200L.         ActorRef serviceActor = MetricQueryService.startMetricQueryService(s, null, sizeLimit).         TestActorRef testActorRef = TestActorRef.create(s, Props.create(TestActor.class)).         TestActor testActor = (TestActor) testActorRef.underlyingActor().         final TaskManagerMetricGroup tm = UnregisteredMetricGroups.createUnregisteredTaskManagerMetricGroup().         final String gaugeValue = "Hello".         final long requiredGaugesToExceedLimit = sizeLimit / gaugeValue.length() + 1.         List<Tuple2<String, Gauge<String>>> gauges = LongStream.range(0, requiredGaugesToExceedLimit).mapToObj(x -> Tuple2.of("gauge" + x, (Gauge<String>) () -> "Hello" + x)).collect(Collectors.toList()).         gauges.forEach(gauge -> MetricQueryService.notifyOfAddedMetric(serviceActor, gauge.f1, gauge.f0, tm)).         MetricQueryService.notifyOfAddedMetric(serviceActor, new SimpleCounter(), "counter", tm).         MetricQueryService.notifyOfAddedMetric(serviceActor, new TestHistogram(), "histogram", tm).         MetricQueryService.notifyOfAddedMetric(serviceActor, new TestMeter(), "meter", tm).         serviceActor.tell(MetricQueryService.getCreateDump(), testActorRef).         testActor.waitForResult().         MetricDumpSerialization.MetricSerializationResult dump = testActor.getSerializationResult().         assertTrue(dump.serializedCounters.length > 0).         assertEquals(1, dump.numCounters).         assertTrue(dump.serializedMeters.length > 0).         assertEquals(1, dump.numMeters).         // gauges exceeded the size limit and will be excluded         assertEquals(0, dump.serializedGauges.length).         assertEquals(0, dump.numGauges).         assertTrue(dump.serializedHistograms.length > 0).         assertEquals(1, dump.numHistograms).         // unregister all but one gauge to ensure gauges are reported again if the remaining fit         for (int x = 1. x < gauges.size(). x++) {             MetricQueryService.notifyOfRemovedMetric(serviceActor, gauges.get(x).f1).         }         serviceActor.tell(MetricQueryService.getCreateDump(), testActorRef).         testActor.waitForResult().         MetricDumpSerialization.MetricSerializationResult recoveredDump = testActor.getSerializationResult().         assertTrue(recoveredDump.serializedCounters.length > 0).         assertEquals(1, recoveredDump.numCounters).         assertTrue(recoveredDump.serializedMeters.length > 0).         assertEquals(1, recoveredDump.numMeters).         assertTrue(recoveredDump.serializedGauges.length > 0).         assertEquals(1, recoveredDump.numGauges).         assertTrue(recoveredDump.serializedHistograms.length > 0).         assertEquals(1, recoveredDump.numHistograms).     } finally {         s.terminate().     } }
false;public;1;7;;@Override public void onReceive(Object message) throws Exception {     synchronized (lock) {         this.message = message.         lock.notifyAll().     } }
false;;0;7;;void waitForResult() throws InterruptedException {     synchronized (lock) {         if (message == null) {             lock.wait().         }     } }
false;;0;5;;MetricDumpSerialization.MetricSerializationResult getSerializationResult() {     final MetricDumpSerialization.MetricSerializationResult result = (MetricDumpSerialization.MetricSerializationResult) message.     message = null.     return result. }
