commented;modifiers;parameterAmount;loc;comment;code
true;public,static,final;0;3;/**  * Gets an instance of the comparator factory. The instance is shared, since the factory is a  * stateless class.  *  * @return An instance of the comparator factory.  */ ;/**  * Gets an instance of the comparator factory. The instance is shared, since the factory is a  * stateless class.  *  * @return An instance of the comparator factory.  */ public static final RecordPairComparatorFactory get() {     return INSTANCE. }
false;public;2;20;;@Override public TypePairComparator<Record, Record> createComparator12(TypeComparator<Record> comparator1, TypeComparator<Record> comparator2) {     if (!(comparator1 instanceof RecordComparator && comparator2 instanceof RecordComparator)) {         throw new IllegalArgumentException("Cannot instantiate pair comparator from the given comparators.").     }     final RecordComparator prc1 = (RecordComparator) comparator1.     final RecordComparator prc2 = (RecordComparator) comparator2.     final int[] pos1 = prc1.getKeyPositions().     final int[] pos2 = prc2.getKeyPositions().     final Class<? extends Value>[] types1 = prc1.getKeyTypes().     final Class<? extends Value>[] types2 = prc2.getKeyTypes().     checkComparators(pos1, pos2, types1, types2).     return new RecordPairComparator(pos1, pos2, types1). }
false;public;2;20;;@Override public TypePairComparator<Record, Record> createComparator21(TypeComparator<Record> comparator1, TypeComparator<Record> comparator2) {     if (!(comparator1 instanceof RecordComparator && comparator2 instanceof RecordComparator)) {         throw new IllegalArgumentException("Cannot instantiate pair comparator from the given comparators.").     }     final RecordComparator prc1 = (RecordComparator) comparator1.     final RecordComparator prc2 = (RecordComparator) comparator2.     final int[] pos1 = prc1.getKeyPositions().     final int[] pos2 = prc2.getKeyPositions().     final Class<? extends Value>[] types1 = prc1.getKeyTypes().     final Class<? extends Value>[] types2 = prc2.getKeyTypes().     checkComparators(pos1, pos2, types1, types2).     return new RecordPairComparator(pos2, pos1, types1). }
false;private,static,final;4;14;;// -------------------------------------------------------------------------------------------- private static final void checkComparators(int[] pos1, int[] pos2, Class<? extends Value>[] types1, Class<? extends Value>[] types2) {     if (pos1.length != pos2.length || types1.length != types2.length) {         throw new IllegalArgumentException("The given pair of RecordComparators does not operate on the same number of fields.").     }     for (int i = 0. i < types1.length. i++) {         if (!types1[i].equals(types2[i])) {             throw new IllegalArgumentException("The given pair of RecordComparators does not operates on different data types.").         }     } }
