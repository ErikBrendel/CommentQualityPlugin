# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testConcurrentCheckpointOperations() throws Exception;1495184252;FLINK-6612__Checks that a concurrent checkpoint completion won't discard a checkpoint which has been_recovered by a different completed checkpoint store.;@Test_	public void testConcurrentCheckpointOperations() throws Exception {_		final int numberOfCheckpoints = 1__		final long waitingTimeout = 50L___		ZooKeeperCompletedCheckpointStore zkCheckpointStore1 = createCompletedCheckpoints(numberOfCheckpoints)__		ZooKeeperCompletedCheckpointStore zkCheckpointStore2 = createCompletedCheckpoints(numberOfCheckpoints)___		TestCompletedCheckpoint completedCheckpoint = createCheckpoint(1)___		_		zkCheckpointStore1.addCheckpoint(completedCheckpoint)___		_		zkCheckpointStore2.recover()___		CompletedCheckpoint recoveredCheckpoint = zkCheckpointStore2.getLatestCheckpoint()__		assertTrue(recoveredCheckpoint instanceof TestCompletedCheckpoint)__		TestCompletedCheckpoint recoveredTestCheckpoint = (TestCompletedCheckpoint) recoveredCheckpoint___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		_		_		TestCompletedCheckpoint completedCheckpoint2 = createCheckpoint(2)__		zkCheckpointStore1.addCheckpoint(completedCheckpoint2)___		List<CompletedCheckpoint> allCheckpoints = zkCheckpointStore1.getAllCheckpoints()___		_		assertEquals(Collections.singletonList(completedCheckpoint2), allCheckpoints)___		_		assertFalse("The checkpoint should not have been discarded.", recoveredTestCheckpoint.awaitDiscard(waitingTimeout))___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		TestCompletedCheckpoint completedCheckpoint3 = createCheckpoint(3)___		_		zkCheckpointStore2.addCheckpoint(completedCheckpoint3)___		_		recoveredTestCheckpoint.awaitDiscard()__	};flink,6612,checks,that,a,concurrent,checkpoint,completion,won,t,discard,a,checkpoint,which,has,been,recovered,by,a,different,completed,checkpoint,store;test,public,void,test,concurrent,checkpoint,operations,throws,exception,final,int,number,of,checkpoints,1,final,long,waiting,timeout,50l,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store1,create,completed,checkpoints,number,of,checkpoints,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store2,create,completed,checkpoints,number,of,checkpoints,test,completed,checkpoint,completed,checkpoint,create,checkpoint,1,zk,checkpoint,store1,add,checkpoint,completed,checkpoint,zk,checkpoint,store2,recover,completed,checkpoint,recovered,checkpoint,zk,checkpoint,store2,get,latest,checkpoint,assert,true,recovered,checkpoint,instanceof,test,completed,checkpoint,test,completed,checkpoint,recovered,test,checkpoint,test,completed,checkpoint,recovered,checkpoint,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint2,create,checkpoint,2,zk,checkpoint,store1,add,checkpoint,completed,checkpoint2,list,completed,checkpoint,all,checkpoints,zk,checkpoint,store1,get,all,checkpoints,assert,equals,collections,singleton,list,completed,checkpoint2,all,checkpoints,assert,false,the,checkpoint,should,not,have,been,discarded,recovered,test,checkpoint,await,discard,waiting,timeout,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint3,create,checkpoint,3,zk,checkpoint,store2,add,checkpoint,completed,checkpoint3,recovered,test,checkpoint,await,discard
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testConcurrentCheckpointOperations() throws Exception;1495184252;FLINK-6612__Checks that a concurrent checkpoint completion won't discard a checkpoint which has been_recovered by a different completed checkpoint store.;@Test_	public void testConcurrentCheckpointOperations() throws Exception {_		final int numberOfCheckpoints = 1__		final long waitingTimeout = 50L___		ZooKeeperCompletedCheckpointStore zkCheckpointStore1 = createCompletedCheckpoints(numberOfCheckpoints)__		ZooKeeperCompletedCheckpointStore zkCheckpointStore2 = createCompletedCheckpoints(numberOfCheckpoints)___		TestCompletedCheckpoint completedCheckpoint = createCheckpoint(1)___		_		zkCheckpointStore1.addCheckpoint(completedCheckpoint)___		_		zkCheckpointStore2.recover()___		CompletedCheckpoint recoveredCheckpoint = zkCheckpointStore2.getLatestCheckpoint()__		assertTrue(recoveredCheckpoint instanceof TestCompletedCheckpoint)__		TestCompletedCheckpoint recoveredTestCheckpoint = (TestCompletedCheckpoint) recoveredCheckpoint___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		_		_		TestCompletedCheckpoint completedCheckpoint2 = createCheckpoint(2)__		zkCheckpointStore1.addCheckpoint(completedCheckpoint2)___		List<CompletedCheckpoint> allCheckpoints = zkCheckpointStore1.getAllCheckpoints()___		_		assertEquals(Collections.singletonList(completedCheckpoint2), allCheckpoints)___		_		assertFalse("The checkpoint should not have been discarded.", recoveredTestCheckpoint.awaitDiscard(waitingTimeout))___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		TestCompletedCheckpoint completedCheckpoint3 = createCheckpoint(3)___		_		zkCheckpointStore2.addCheckpoint(completedCheckpoint3)___		_		recoveredTestCheckpoint.awaitDiscard()__	};flink,6612,checks,that,a,concurrent,checkpoint,completion,won,t,discard,a,checkpoint,which,has,been,recovered,by,a,different,completed,checkpoint,store;test,public,void,test,concurrent,checkpoint,operations,throws,exception,final,int,number,of,checkpoints,1,final,long,waiting,timeout,50l,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store1,create,completed,checkpoints,number,of,checkpoints,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store2,create,completed,checkpoints,number,of,checkpoints,test,completed,checkpoint,completed,checkpoint,create,checkpoint,1,zk,checkpoint,store1,add,checkpoint,completed,checkpoint,zk,checkpoint,store2,recover,completed,checkpoint,recovered,checkpoint,zk,checkpoint,store2,get,latest,checkpoint,assert,true,recovered,checkpoint,instanceof,test,completed,checkpoint,test,completed,checkpoint,recovered,test,checkpoint,test,completed,checkpoint,recovered,checkpoint,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint2,create,checkpoint,2,zk,checkpoint,store1,add,checkpoint,completed,checkpoint2,list,completed,checkpoint,all,checkpoints,zk,checkpoint,store1,get,all,checkpoints,assert,equals,collections,singleton,list,completed,checkpoint2,all,checkpoints,assert,false,the,checkpoint,should,not,have,been,discarded,recovered,test,checkpoint,await,discard,waiting,timeout,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint3,create,checkpoint,3,zk,checkpoint,store2,add,checkpoint,completed,checkpoint3,recovered,test,checkpoint,await,discard
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testConcurrentCheckpointOperations() throws Exception;1495287945;FLINK-6612__Checks that a concurrent checkpoint completion won't discard a checkpoint which has been_recovered by a different completed checkpoint store.;@Test_	public void testConcurrentCheckpointOperations() throws Exception {_		final int numberOfCheckpoints = 1__		final long waitingTimeout = 50L___		ZooKeeperCompletedCheckpointStore zkCheckpointStore1 = createCompletedCheckpoints(numberOfCheckpoints)__		ZooKeeperCompletedCheckpointStore zkCheckpointStore2 = createCompletedCheckpoints(numberOfCheckpoints)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		TestCompletedCheckpoint completedCheckpoint = createCheckpoint(1, sharedStateRegistry)___		_		zkCheckpointStore1.addCheckpoint(completedCheckpoint)___		_		sharedStateRegistry.clear()__		zkCheckpointStore2.recover(sharedStateRegistry)___		CompletedCheckpoint recoveredCheckpoint = zkCheckpointStore2.getLatestCheckpoint()__		assertTrue(recoveredCheckpoint instanceof TestCompletedCheckpoint)__		TestCompletedCheckpoint recoveredTestCheckpoint = (TestCompletedCheckpoint) recoveredCheckpoint___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		_		_		TestCompletedCheckpoint completedCheckpoint2 = createCheckpoint(2, sharedStateRegistry)__		zkCheckpointStore1.addCheckpoint(completedCheckpoint2)___		List<CompletedCheckpoint> allCheckpoints = zkCheckpointStore1.getAllCheckpoints()___		_		assertEquals(Collections.singletonList(completedCheckpoint2), allCheckpoints)___		_		assertFalse("The checkpoint should not have been discarded.", recoveredTestCheckpoint.awaitDiscard(waitingTimeout))___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		TestCompletedCheckpoint completedCheckpoint3 = createCheckpoint(3, sharedStateRegistry)___		_		zkCheckpointStore2.addCheckpoint(completedCheckpoint3)___		_		recoveredTestCheckpoint.awaitDiscard()__	};flink,6612,checks,that,a,concurrent,checkpoint,completion,won,t,discard,a,checkpoint,which,has,been,recovered,by,a,different,completed,checkpoint,store;test,public,void,test,concurrent,checkpoint,operations,throws,exception,final,int,number,of,checkpoints,1,final,long,waiting,timeout,50l,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store1,create,completed,checkpoints,number,of,checkpoints,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store2,create,completed,checkpoints,number,of,checkpoints,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,completed,checkpoint,create,checkpoint,1,shared,state,registry,zk,checkpoint,store1,add,checkpoint,completed,checkpoint,shared,state,registry,clear,zk,checkpoint,store2,recover,shared,state,registry,completed,checkpoint,recovered,checkpoint,zk,checkpoint,store2,get,latest,checkpoint,assert,true,recovered,checkpoint,instanceof,test,completed,checkpoint,test,completed,checkpoint,recovered,test,checkpoint,test,completed,checkpoint,recovered,checkpoint,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint2,create,checkpoint,2,shared,state,registry,zk,checkpoint,store1,add,checkpoint,completed,checkpoint2,list,completed,checkpoint,all,checkpoints,zk,checkpoint,store1,get,all,checkpoints,assert,equals,collections,singleton,list,completed,checkpoint2,all,checkpoints,assert,false,the,checkpoint,should,not,have,been,discarded,recovered,test,checkpoint,await,discard,waiting,timeout,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint3,create,checkpoint,3,shared,state,registry,zk,checkpoint,store2,add,checkpoint,completed,checkpoint3,recovered,test,checkpoint,await,discard
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testConcurrentCheckpointOperations() throws Exception;1495563868;FLINK-6612__Checks that a concurrent checkpoint completion won't discard a checkpoint which has been_recovered by a different completed checkpoint store.;@Test_	public void testConcurrentCheckpointOperations() throws Exception {_		final int numberOfCheckpoints = 1__		final long waitingTimeout = 50L___		ZooKeeperCompletedCheckpointStore zkCheckpointStore1 = createCompletedCheckpoints(numberOfCheckpoints)__		ZooKeeperCompletedCheckpointStore zkCheckpointStore2 = createCompletedCheckpoints(numberOfCheckpoints)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		TestCompletedCheckpoint completedCheckpoint = createCheckpoint(1, sharedStateRegistry)___		_		zkCheckpointStore1.addCheckpoint(completedCheckpoint)___		_		sharedStateRegistry.clear()__		zkCheckpointStore2.recover(sharedStateRegistry)___		CompletedCheckpoint recoveredCheckpoint = zkCheckpointStore2.getLatestCheckpoint()__		assertTrue(recoveredCheckpoint instanceof TestCompletedCheckpoint)__		TestCompletedCheckpoint recoveredTestCheckpoint = (TestCompletedCheckpoint) recoveredCheckpoint___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		_		_		TestCompletedCheckpoint completedCheckpoint2 = createCheckpoint(2, sharedStateRegistry)__		zkCheckpointStore1.addCheckpoint(completedCheckpoint2)___		List<CompletedCheckpoint> allCheckpoints = zkCheckpointStore1.getAllCheckpoints()___		_		assertEquals(Collections.singletonList(completedCheckpoint2), allCheckpoints)___		_		assertFalse("The checkpoint should not have been discarded.", recoveredTestCheckpoint.awaitDiscard(waitingTimeout))___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		TestCompletedCheckpoint completedCheckpoint3 = createCheckpoint(3, sharedStateRegistry)___		_		zkCheckpointStore2.addCheckpoint(completedCheckpoint3)___		_		recoveredTestCheckpoint.awaitDiscard()__	};flink,6612,checks,that,a,concurrent,checkpoint,completion,won,t,discard,a,checkpoint,which,has,been,recovered,by,a,different,completed,checkpoint,store;test,public,void,test,concurrent,checkpoint,operations,throws,exception,final,int,number,of,checkpoints,1,final,long,waiting,timeout,50l,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store1,create,completed,checkpoints,number,of,checkpoints,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store2,create,completed,checkpoints,number,of,checkpoints,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,completed,checkpoint,create,checkpoint,1,shared,state,registry,zk,checkpoint,store1,add,checkpoint,completed,checkpoint,shared,state,registry,clear,zk,checkpoint,store2,recover,shared,state,registry,completed,checkpoint,recovered,checkpoint,zk,checkpoint,store2,get,latest,checkpoint,assert,true,recovered,checkpoint,instanceof,test,completed,checkpoint,test,completed,checkpoint,recovered,test,checkpoint,test,completed,checkpoint,recovered,checkpoint,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint2,create,checkpoint,2,shared,state,registry,zk,checkpoint,store1,add,checkpoint,completed,checkpoint2,list,completed,checkpoint,all,checkpoints,zk,checkpoint,store1,get,all,checkpoints,assert,equals,collections,singleton,list,completed,checkpoint2,all,checkpoints,assert,false,the,checkpoint,should,not,have,been,discarded,recovered,test,checkpoint,await,discard,waiting,timeout,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint3,create,checkpoint,3,shared,state,registry,zk,checkpoint,store2,add,checkpoint,completed,checkpoint3,recovered,test,checkpoint,await,discard
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testConcurrentCheckpointOperations() throws Exception;1502801814;FLINK-6612__Checks that a concurrent checkpoint completion won't discard a checkpoint which has been_recovered by a different completed checkpoint store.;@Test_	public void testConcurrentCheckpointOperations() throws Exception {_		final int numberOfCheckpoints = 1__		final long waitingTimeout = 50L___		ZooKeeperCompletedCheckpointStore zkCheckpointStore1 = createCompletedCheckpoints(numberOfCheckpoints)__		ZooKeeperCompletedCheckpointStore zkCheckpointStore2 = createCompletedCheckpoints(numberOfCheckpoints)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		TestCompletedCheckpoint completedCheckpoint = createCheckpoint(1, sharedStateRegistry)___		_		zkCheckpointStore1.addCheckpoint(completedCheckpoint)___		_		sharedStateRegistry.close()__		sharedStateRegistry = new SharedStateRegistry()__		zkCheckpointStore2.recover()___		CompletedCheckpoint recoveredCheckpoint = zkCheckpointStore2.getLatestCheckpoint()__		assertTrue(recoveredCheckpoint instanceof TestCompletedCheckpoint)__		TestCompletedCheckpoint recoveredTestCheckpoint = (TestCompletedCheckpoint) recoveredCheckpoint___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		_		_		TestCompletedCheckpoint completedCheckpoint2 = createCheckpoint(2, sharedStateRegistry)__		zkCheckpointStore1.addCheckpoint(completedCheckpoint2)___		List<CompletedCheckpoint> allCheckpoints = zkCheckpointStore1.getAllCheckpoints()___		_		assertEquals(Collections.singletonList(completedCheckpoint2), allCheckpoints)___		_		assertFalse("The checkpoint should not have been discarded.", recoveredTestCheckpoint.awaitDiscard(waitingTimeout))___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		TestCompletedCheckpoint completedCheckpoint3 = createCheckpoint(3, sharedStateRegistry)___		_		zkCheckpointStore2.addCheckpoint(completedCheckpoint3)___		_		recoveredTestCheckpoint.awaitDiscard()__	};flink,6612,checks,that,a,concurrent,checkpoint,completion,won,t,discard,a,checkpoint,which,has,been,recovered,by,a,different,completed,checkpoint,store;test,public,void,test,concurrent,checkpoint,operations,throws,exception,final,int,number,of,checkpoints,1,final,long,waiting,timeout,50l,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store1,create,completed,checkpoints,number,of,checkpoints,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store2,create,completed,checkpoints,number,of,checkpoints,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,completed,checkpoint,create,checkpoint,1,shared,state,registry,zk,checkpoint,store1,add,checkpoint,completed,checkpoint,shared,state,registry,close,shared,state,registry,new,shared,state,registry,zk,checkpoint,store2,recover,completed,checkpoint,recovered,checkpoint,zk,checkpoint,store2,get,latest,checkpoint,assert,true,recovered,checkpoint,instanceof,test,completed,checkpoint,test,completed,checkpoint,recovered,test,checkpoint,test,completed,checkpoint,recovered,checkpoint,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint2,create,checkpoint,2,shared,state,registry,zk,checkpoint,store1,add,checkpoint,completed,checkpoint2,list,completed,checkpoint,all,checkpoints,zk,checkpoint,store1,get,all,checkpoints,assert,equals,collections,singleton,list,completed,checkpoint2,all,checkpoints,assert,false,the,checkpoint,should,not,have,been,discarded,recovered,test,checkpoint,await,discard,waiting,timeout,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint3,create,checkpoint,3,shared,state,registry,zk,checkpoint,store2,add,checkpoint,completed,checkpoint3,recovered,test,checkpoint,await,discard
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testConcurrentCheckpointOperations() throws Exception;1515177485;FLINK-6612__Checks that a concurrent checkpoint completion won't discard a checkpoint which has been_recovered by a different completed checkpoint store.;@Test_	public void testConcurrentCheckpointOperations() throws Exception {_		final int numberOfCheckpoints = 1__		final long waitingTimeout = 50L___		ZooKeeperCompletedCheckpointStore zkCheckpointStore1 = createCompletedCheckpoints(numberOfCheckpoints)__		ZooKeeperCompletedCheckpointStore zkCheckpointStore2 = createCompletedCheckpoints(numberOfCheckpoints)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		TestCompletedCheckpoint completedCheckpoint = createCheckpoint(1, sharedStateRegistry)___		_		zkCheckpointStore1.addCheckpoint(completedCheckpoint)___		_		sharedStateRegistry.close()__		sharedStateRegistry = new SharedStateRegistry()__		zkCheckpointStore2.recover()___		CompletedCheckpoint recoveredCheckpoint = zkCheckpointStore2.getLatestCheckpoint()__		assertTrue(recoveredCheckpoint instanceof TestCompletedCheckpoint)__		TestCompletedCheckpoint recoveredTestCheckpoint = (TestCompletedCheckpoint) recoveredCheckpoint___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		_		_		TestCompletedCheckpoint completedCheckpoint2 = createCheckpoint(2, sharedStateRegistry)__		zkCheckpointStore1.addCheckpoint(completedCheckpoint2)___		List<CompletedCheckpoint> allCheckpoints = zkCheckpointStore1.getAllCheckpoints()___		_		assertEquals(Collections.singletonList(completedCheckpoint2), allCheckpoints)___		_		assertFalse("The checkpoint should not have been discarded.", recoveredTestCheckpoint.awaitDiscard(waitingTimeout))___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		TestCompletedCheckpoint completedCheckpoint3 = createCheckpoint(3, sharedStateRegistry)___		_		zkCheckpointStore2.addCheckpoint(completedCheckpoint3)___		_		recoveredTestCheckpoint.awaitDiscard()__	};flink,6612,checks,that,a,concurrent,checkpoint,completion,won,t,discard,a,checkpoint,which,has,been,recovered,by,a,different,completed,checkpoint,store;test,public,void,test,concurrent,checkpoint,operations,throws,exception,final,int,number,of,checkpoints,1,final,long,waiting,timeout,50l,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store1,create,completed,checkpoints,number,of,checkpoints,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store2,create,completed,checkpoints,number,of,checkpoints,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,completed,checkpoint,create,checkpoint,1,shared,state,registry,zk,checkpoint,store1,add,checkpoint,completed,checkpoint,shared,state,registry,close,shared,state,registry,new,shared,state,registry,zk,checkpoint,store2,recover,completed,checkpoint,recovered,checkpoint,zk,checkpoint,store2,get,latest,checkpoint,assert,true,recovered,checkpoint,instanceof,test,completed,checkpoint,test,completed,checkpoint,recovered,test,checkpoint,test,completed,checkpoint,recovered,checkpoint,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint2,create,checkpoint,2,shared,state,registry,zk,checkpoint,store1,add,checkpoint,completed,checkpoint2,list,completed,checkpoint,all,checkpoints,zk,checkpoint,store1,get,all,checkpoints,assert,equals,collections,singleton,list,completed,checkpoint2,all,checkpoints,assert,false,the,checkpoint,should,not,have,been,discarded,recovered,test,checkpoint,await,discard,waiting,timeout,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint3,create,checkpoint,3,shared,state,registry,zk,checkpoint,store2,add,checkpoint,completed,checkpoint3,recovered,test,checkpoint,await,discard
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testConcurrentCheckpointOperations() throws Exception;1547547304;FLINK-6612__Checks that a concurrent checkpoint completion won't discard a checkpoint which has been_recovered by a different completed checkpoint store.;@Test_	public void testConcurrentCheckpointOperations() throws Exception {_		final int numberOfCheckpoints = 1__		final long waitingTimeout = 50L___		ZooKeeperCompletedCheckpointStore zkCheckpointStore1 = createCompletedCheckpoints(numberOfCheckpoints)__		ZooKeeperCompletedCheckpointStore zkCheckpointStore2 = createCompletedCheckpoints(numberOfCheckpoints)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		TestCompletedCheckpoint completedCheckpoint = createCheckpoint(1, sharedStateRegistry)___		_		zkCheckpointStore1.addCheckpoint(completedCheckpoint)___		_		sharedStateRegistry.close()__		sharedStateRegistry = new SharedStateRegistry()__		zkCheckpointStore2.recover()___		CompletedCheckpoint recoveredCheckpoint = zkCheckpointStore2.getLatestCheckpoint()__		assertTrue(recoveredCheckpoint instanceof TestCompletedCheckpoint)__		TestCompletedCheckpoint recoveredTestCheckpoint = (TestCompletedCheckpoint) recoveredCheckpoint___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		_		_		TestCompletedCheckpoint completedCheckpoint2 = createCheckpoint(2, sharedStateRegistry)__		zkCheckpointStore1.addCheckpoint(completedCheckpoint2)___		List<CompletedCheckpoint> allCheckpoints = zkCheckpointStore1.getAllCheckpoints()___		_		assertEquals(Collections.singletonList(completedCheckpoint2), allCheckpoints)___		_		assertFalse("The checkpoint should not have been discarded.", recoveredTestCheckpoint.awaitDiscard(waitingTimeout))___		_		assertFalse(recoveredTestCheckpoint.isDiscarded())___		TestCompletedCheckpoint completedCheckpoint3 = createCheckpoint(3, sharedStateRegistry)___		_		zkCheckpointStore2.addCheckpoint(completedCheckpoint3)___		_		recoveredTestCheckpoint.awaitDiscard()__	};flink,6612,checks,that,a,concurrent,checkpoint,completion,won,t,discard,a,checkpoint,which,has,been,recovered,by,a,different,completed,checkpoint,store;test,public,void,test,concurrent,checkpoint,operations,throws,exception,final,int,number,of,checkpoints,1,final,long,waiting,timeout,50l,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store1,create,completed,checkpoints,number,of,checkpoints,zoo,keeper,completed,checkpoint,store,zk,checkpoint,store2,create,completed,checkpoints,number,of,checkpoints,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,completed,checkpoint,create,checkpoint,1,shared,state,registry,zk,checkpoint,store1,add,checkpoint,completed,checkpoint,shared,state,registry,close,shared,state,registry,new,shared,state,registry,zk,checkpoint,store2,recover,completed,checkpoint,recovered,checkpoint,zk,checkpoint,store2,get,latest,checkpoint,assert,true,recovered,checkpoint,instanceof,test,completed,checkpoint,test,completed,checkpoint,recovered,test,checkpoint,test,completed,checkpoint,recovered,checkpoint,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint2,create,checkpoint,2,shared,state,registry,zk,checkpoint,store1,add,checkpoint,completed,checkpoint2,list,completed,checkpoint,all,checkpoints,zk,checkpoint,store1,get,all,checkpoints,assert,equals,collections,singleton,list,completed,checkpoint2,all,checkpoints,assert,false,the,checkpoint,should,not,have,been,discarded,recovered,test,checkpoint,await,discard,waiting,timeout,assert,false,recovered,test,checkpoint,is,discarded,test,completed,checkpoint,completed,checkpoint3,create,checkpoint,3,shared,state,registry,zk,checkpoint,store2,add,checkpoint,completed,checkpoint3,recovered,test,checkpoint,await,discard
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testLatestCheckpointRecovery() throws Exception;1495001907;FLINK-6284__Tests that the latest recovered checkpoint is the one with the highest checkpoint id;@Test_	public void testLatestCheckpointRecovery() throws Exception {_		final int numCheckpoints = 3__		AbstractCompletedCheckpointStore checkpointStore = createCompletedCheckpoints(numCheckpoints)__		List<CompletedCheckpoint> checkpoints = new ArrayList<>(numCheckpoints)___		checkpoints.add(createCheckpoint(9))__		checkpoints.add(createCheckpoint(10))__		checkpoints.add(createCheckpoint(11))___		for (CompletedCheckpoint checkpoint : checkpoints) {_			checkpointStore.addCheckpoint(checkpoint)__		}__		checkpointStore.recover()___		CompletedCheckpoint latestCheckpoint = checkpointStore.getLatestCheckpoint()___		assertEquals(checkpoints.get(checkpoints.size() -1), latestCheckpoint)__	};flink,6284,tests,that,the,latest,recovered,checkpoint,is,the,one,with,the,highest,checkpoint,id;test,public,void,test,latest,checkpoint,recovery,throws,exception,final,int,num,checkpoints,3,abstract,completed,checkpoint,store,checkpoint,store,create,completed,checkpoints,num,checkpoints,list,completed,checkpoint,checkpoints,new,array,list,num,checkpoints,checkpoints,add,create,checkpoint,9,checkpoints,add,create,checkpoint,10,checkpoints,add,create,checkpoint,11,for,completed,checkpoint,checkpoint,checkpoints,checkpoint,store,add,checkpoint,checkpoint,checkpoint,store,recover,completed,checkpoint,latest,checkpoint,checkpoint,store,get,latest,checkpoint,assert,equals,checkpoints,get,checkpoints,size,1,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testLatestCheckpointRecovery() throws Exception;1495184252;FLINK-6284__Tests that the latest recovered checkpoint is the one with the highest checkpoint id;@Test_	public void testLatestCheckpointRecovery() throws Exception {_		final int numCheckpoints = 3__		AbstractCompletedCheckpointStore checkpointStore = createCompletedCheckpoints(numCheckpoints)__		List<CompletedCheckpoint> checkpoints = new ArrayList<>(numCheckpoints)___		checkpoints.add(createCheckpoint(9))__		checkpoints.add(createCheckpoint(10))__		checkpoints.add(createCheckpoint(11))___		for (CompletedCheckpoint checkpoint : checkpoints) {_			checkpointStore.addCheckpoint(checkpoint)__		}__		checkpointStore.recover()___		CompletedCheckpoint latestCheckpoint = checkpointStore.getLatestCheckpoint()___		assertEquals(checkpoints.get(checkpoints.size() -1), latestCheckpoint)__	};flink,6284,tests,that,the,latest,recovered,checkpoint,is,the,one,with,the,highest,checkpoint,id;test,public,void,test,latest,checkpoint,recovery,throws,exception,final,int,num,checkpoints,3,abstract,completed,checkpoint,store,checkpoint,store,create,completed,checkpoints,num,checkpoints,list,completed,checkpoint,checkpoints,new,array,list,num,checkpoints,checkpoints,add,create,checkpoint,9,checkpoints,add,create,checkpoint,10,checkpoints,add,create,checkpoint,11,for,completed,checkpoint,checkpoint,checkpoints,checkpoint,store,add,checkpoint,checkpoint,checkpoint,store,recover,completed,checkpoint,latest,checkpoint,checkpoint,store,get,latest,checkpoint,assert,equals,checkpoints,get,checkpoints,size,1,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testLatestCheckpointRecovery() throws Exception;1495184252;FLINK-6284__Tests that the latest recovered checkpoint is the one with the highest checkpoint id;@Test_	public void testLatestCheckpointRecovery() throws Exception {_		final int numCheckpoints = 3__		AbstractCompletedCheckpointStore checkpointStore = createCompletedCheckpoints(numCheckpoints)__		List<CompletedCheckpoint> checkpoints = new ArrayList<>(numCheckpoints)___		checkpoints.add(createCheckpoint(9))__		checkpoints.add(createCheckpoint(10))__		checkpoints.add(createCheckpoint(11))___		for (CompletedCheckpoint checkpoint : checkpoints) {_			checkpointStore.addCheckpoint(checkpoint)__		}__		checkpointStore.recover()___		CompletedCheckpoint latestCheckpoint = checkpointStore.getLatestCheckpoint()___		assertEquals(checkpoints.get(checkpoints.size() -1), latestCheckpoint)__	};flink,6284,tests,that,the,latest,recovered,checkpoint,is,the,one,with,the,highest,checkpoint,id;test,public,void,test,latest,checkpoint,recovery,throws,exception,final,int,num,checkpoints,3,abstract,completed,checkpoint,store,checkpoint,store,create,completed,checkpoints,num,checkpoints,list,completed,checkpoint,checkpoints,new,array,list,num,checkpoints,checkpoints,add,create,checkpoint,9,checkpoints,add,create,checkpoint,10,checkpoints,add,create,checkpoint,11,for,completed,checkpoint,checkpoint,checkpoints,checkpoint,store,add,checkpoint,checkpoint,checkpoint,store,recover,completed,checkpoint,latest,checkpoint,checkpoint,store,get,latest,checkpoint,assert,equals,checkpoints,get,checkpoints,size,1,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testLatestCheckpointRecovery() throws Exception;1495287945;FLINK-6284__Tests that the latest recovered checkpoint is the one with the highest checkpoint id;@Test_	public void testLatestCheckpointRecovery() throws Exception {_		final int numCheckpoints = 3__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpointStore = createCompletedCheckpoints(numCheckpoints)__		List<CompletedCheckpoint> checkpoints = new ArrayList<>(numCheckpoints)___		checkpoints.add(createCheckpoint(9, sharedStateRegistry))__		checkpoints.add(createCheckpoint(10, sharedStateRegistry))__		checkpoints.add(createCheckpoint(11, sharedStateRegistry))___		for (CompletedCheckpoint checkpoint : checkpoints) {_			checkpointStore.addCheckpoint(checkpoint)__		}__		sharedStateRegistry.clear()__		checkpointStore.recover(sharedStateRegistry)___		CompletedCheckpoint latestCheckpoint = checkpointStore.getLatestCheckpoint()___		assertEquals(checkpoints.get(checkpoints.size() -1), latestCheckpoint)__	};flink,6284,tests,that,the,latest,recovered,checkpoint,is,the,one,with,the,highest,checkpoint,id;test,public,void,test,latest,checkpoint,recovery,throws,exception,final,int,num,checkpoints,3,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoint,store,create,completed,checkpoints,num,checkpoints,list,completed,checkpoint,checkpoints,new,array,list,num,checkpoints,checkpoints,add,create,checkpoint,9,shared,state,registry,checkpoints,add,create,checkpoint,10,shared,state,registry,checkpoints,add,create,checkpoint,11,shared,state,registry,for,completed,checkpoint,checkpoint,checkpoints,checkpoint,store,add,checkpoint,checkpoint,shared,state,registry,clear,checkpoint,store,recover,shared,state,registry,completed,checkpoint,latest,checkpoint,checkpoint,store,get,latest,checkpoint,assert,equals,checkpoints,get,checkpoints,size,1,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testLatestCheckpointRecovery() throws Exception;1495563868;FLINK-6284__Tests that the latest recovered checkpoint is the one with the highest checkpoint id;@Test_	public void testLatestCheckpointRecovery() throws Exception {_		final int numCheckpoints = 3__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpointStore = createCompletedCheckpoints(numCheckpoints)__		List<CompletedCheckpoint> checkpoints = new ArrayList<>(numCheckpoints)___		checkpoints.add(createCheckpoint(9, sharedStateRegistry))__		checkpoints.add(createCheckpoint(10, sharedStateRegistry))__		checkpoints.add(createCheckpoint(11, sharedStateRegistry))___		for (CompletedCheckpoint checkpoint : checkpoints) {_			checkpointStore.addCheckpoint(checkpoint)__		}__		sharedStateRegistry.clear()__		checkpointStore.recover(sharedStateRegistry)___		CompletedCheckpoint latestCheckpoint = checkpointStore.getLatestCheckpoint()___		assertEquals(checkpoints.get(checkpoints.size() -1), latestCheckpoint)__	};flink,6284,tests,that,the,latest,recovered,checkpoint,is,the,one,with,the,highest,checkpoint,id;test,public,void,test,latest,checkpoint,recovery,throws,exception,final,int,num,checkpoints,3,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoint,store,create,completed,checkpoints,num,checkpoints,list,completed,checkpoint,checkpoints,new,array,list,num,checkpoints,checkpoints,add,create,checkpoint,9,shared,state,registry,checkpoints,add,create,checkpoint,10,shared,state,registry,checkpoints,add,create,checkpoint,11,shared,state,registry,for,completed,checkpoint,checkpoint,checkpoints,checkpoint,store,add,checkpoint,checkpoint,shared,state,registry,clear,checkpoint,store,recover,shared,state,registry,completed,checkpoint,latest,checkpoint,checkpoint,store,get,latest,checkpoint,assert,equals,checkpoints,get,checkpoints,size,1,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testLatestCheckpointRecovery() throws Exception;1502801814;FLINK-6284__Tests that the latest recovered checkpoint is the one with the highest checkpoint id;@Test_	public void testLatestCheckpointRecovery() throws Exception {_		final int numCheckpoints = 3__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpointStore = createCompletedCheckpoints(numCheckpoints)__		List<CompletedCheckpoint> checkpoints = new ArrayList<>(numCheckpoints)___		checkpoints.add(createCheckpoint(9, sharedStateRegistry))__		checkpoints.add(createCheckpoint(10, sharedStateRegistry))__		checkpoints.add(createCheckpoint(11, sharedStateRegistry))___		for (CompletedCheckpoint checkpoint : checkpoints) {_			checkpointStore.addCheckpoint(checkpoint)__		}__		sharedStateRegistry.close()__		checkpointStore.recover()___		CompletedCheckpoint latestCheckpoint = checkpointStore.getLatestCheckpoint()___		assertEquals(checkpoints.get(checkpoints.size() -1), latestCheckpoint)__	};flink,6284,tests,that,the,latest,recovered,checkpoint,is,the,one,with,the,highest,checkpoint,id;test,public,void,test,latest,checkpoint,recovery,throws,exception,final,int,num,checkpoints,3,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoint,store,create,completed,checkpoints,num,checkpoints,list,completed,checkpoint,checkpoints,new,array,list,num,checkpoints,checkpoints,add,create,checkpoint,9,shared,state,registry,checkpoints,add,create,checkpoint,10,shared,state,registry,checkpoints,add,create,checkpoint,11,shared,state,registry,for,completed,checkpoint,checkpoint,checkpoints,checkpoint,store,add,checkpoint,checkpoint,shared,state,registry,close,checkpoint,store,recover,completed,checkpoint,latest,checkpoint,checkpoint,store,get,latest,checkpoint,assert,equals,checkpoints,get,checkpoints,size,1,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testLatestCheckpointRecovery() throws Exception;1515177485;FLINK-6284__Tests that the latest recovered checkpoint is the one with the highest checkpoint id;@Test_	public void testLatestCheckpointRecovery() throws Exception {_		final int numCheckpoints = 3__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpointStore = createCompletedCheckpoints(numCheckpoints)__		List<CompletedCheckpoint> checkpoints = new ArrayList<>(numCheckpoints)___		checkpoints.add(createCheckpoint(9, sharedStateRegistry))__		checkpoints.add(createCheckpoint(10, sharedStateRegistry))__		checkpoints.add(createCheckpoint(11, sharedStateRegistry))___		for (CompletedCheckpoint checkpoint : checkpoints) {_			checkpointStore.addCheckpoint(checkpoint)__		}__		sharedStateRegistry.close()__		checkpointStore.recover()___		CompletedCheckpoint latestCheckpoint = checkpointStore.getLatestCheckpoint()___		assertEquals(checkpoints.get(checkpoints.size() -1), latestCheckpoint)__	};flink,6284,tests,that,the,latest,recovered,checkpoint,is,the,one,with,the,highest,checkpoint,id;test,public,void,test,latest,checkpoint,recovery,throws,exception,final,int,num,checkpoints,3,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoint,store,create,completed,checkpoints,num,checkpoints,list,completed,checkpoint,checkpoints,new,array,list,num,checkpoints,checkpoints,add,create,checkpoint,9,shared,state,registry,checkpoints,add,create,checkpoint,10,shared,state,registry,checkpoints,add,create,checkpoint,11,shared,state,registry,for,completed,checkpoint,checkpoint,checkpoints,checkpoint,store,add,checkpoint,checkpoint,shared,state,registry,close,checkpoint,store,recover,completed,checkpoint,latest,checkpoint,checkpoint,store,get,latest,checkpoint,assert,equals,checkpoints,get,checkpoints,size,1,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testLatestCheckpointRecovery() throws Exception;1547547304;FLINK-6284__Tests that the latest recovered checkpoint is the one with the highest checkpoint id;@Test_	public void testLatestCheckpointRecovery() throws Exception {_		final int numCheckpoints = 3__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpointStore = createCompletedCheckpoints(numCheckpoints)__		List<CompletedCheckpoint> checkpoints = new ArrayList<>(numCheckpoints)___		checkpoints.add(createCheckpoint(9, sharedStateRegistry))__		checkpoints.add(createCheckpoint(10, sharedStateRegistry))__		checkpoints.add(createCheckpoint(11, sharedStateRegistry))___		for (CompletedCheckpoint checkpoint : checkpoints) {_			checkpointStore.addCheckpoint(checkpoint)__		}__		sharedStateRegistry.close()__		checkpointStore.recover()___		CompletedCheckpoint latestCheckpoint = checkpointStore.getLatestCheckpoint()___		assertEquals(checkpoints.get(checkpoints.size() -1), latestCheckpoint)__	};flink,6284,tests,that,the,latest,recovered,checkpoint,is,the,one,with,the,highest,checkpoint,id;test,public,void,test,latest,checkpoint,recovery,throws,exception,final,int,num,checkpoints,3,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoint,store,create,completed,checkpoints,num,checkpoints,list,completed,checkpoint,checkpoints,new,array,list,num,checkpoints,checkpoints,add,create,checkpoint,9,shared,state,registry,checkpoints,add,create,checkpoint,10,shared,state,registry,checkpoints,add,create,checkpoint,11,shared,state,registry,for,completed,checkpoint,checkpoint,checkpoints,checkpoint,store,add,checkpoint,checkpoint,shared,state,registry,close,checkpoint,store,recover,completed,checkpoint,latest,checkpoint,checkpoint,store,get,latest,checkpoint,assert,equals,checkpoints,get,checkpoints,size,1,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1469190400;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1469525443;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1472663401;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1474891865;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1475231926;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1476432306;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.FINISHED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1479852016;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.FINISHED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1481715812;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.FINISHED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1489479789;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.FINISHED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1492867556;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint, sharedStateRegistry)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.FINISHED, sharedStateRegistry)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.recover(sharedStateRegistry)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,shared,state,registry,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,shared,state,registry,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,shared,state,registry,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1492867556;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1493403095;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1495001907;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CheckpointsPath + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,checkpoints,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1495184252;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1495184252;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1495287945;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		sharedStateRegistry.clear()__		store.recover(sharedStateRegistry)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,shared,state,registry,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,shared,state,registry,clear,store,recover,shared,state,registry,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1495563868;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		sharedStateRegistry.clear()__		store.recover(sharedStateRegistry)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,shared,state,registry,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,shared,state,registry,clear,store,recover,shared,state,registry,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1502801814;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		sharedStateRegistry.close()__		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,shared,state,registry,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,shared,state,registry,close,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1515177485;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		sharedStateRegistry.close()__		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,shared,state,registry,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,shared,state,registry,close,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1547547304;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		sharedStateRegistry.close()__		store.recover()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,shared,state,registry,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,shared,state,registry,close,store,recover,assert,equals,0,store,get,number,of,retained,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1469190400;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.suspend()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,suspend,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1469525443;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.suspend()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,suspend,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1472663401;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.suspend()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,suspend,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1474891865;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.suspend()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,suspend,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1475231926;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.suspend()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,suspend,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1476432306;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1479852016;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1481715812;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1489479789;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1492867556;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint, sharedStateRegistry)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.SUSPENDED, sharedStateRegistry)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		_		store.recover(sharedStateRegistry)___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,shared,state,registry,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,shared,state,registry,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,shared,state,registry,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1492867556;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1493403095;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + "/" + checkpoint.getCheckpointID()))___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,checkpoint,get,checkpoint,id,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1495001907;Tests that suspends keeps all checkpoints (as they can be recovered_later by the ZooKeeper store).;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZooKeeper.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CheckpointsPath + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,as,they,can,be,recovered,later,by,the,zoo,keeper,store;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zoo,keeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,checkpoints,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1495184252;Tests that suspends keeps all checkpoints (so that they can be recovered_later by the ZooKeeper store). Furthermore, suspending a job should release_all locks.;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())___		final String checkpointPath = CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())__		Stat stat = client.checkExists().forPath(checkpointPath)___		assertNotNull("The checkpoint node should exist.", stat)__		assertEquals("The checkpoint node should not be locked.", 0, stat.getNumChildren())___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,so,that,they,can,be,recovered,later,by,the,zoo,keeper,store,furthermore,suspending,a,job,should,release,all,locks;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,final,string,checkpoint,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,stat,stat,client,check,exists,for,path,checkpoint,path,assert,not,null,the,checkpoint,node,should,exist,stat,assert,equals,the,checkpoint,node,should,not,be,locked,0,stat,get,num,children,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1495184252;Tests that suspends keeps all checkpoints (so that they can be recovered_later by the ZooKeeper store). Furthermore, suspending a job should release_all locks.;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())___		final String checkpointPath = CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())__		Stat stat = client.checkExists().forPath(checkpointPath)___		assertNotNull("The checkpoint node should exist.", stat)__		assertEquals("The checkpoint node should not be locked.", 0, stat.getNumChildren())___		_		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,so,that,they,can,be,recovered,later,by,the,zoo,keeper,store,furthermore,suspending,a,job,should,release,all,locks;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,final,string,checkpoint,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,stat,stat,client,check,exists,for,path,checkpoint,path,assert,not,null,the,checkpoint,node,should,exist,stat,assert,equals,the,checkpoint,node,should,not,be,locked,0,stat,get,num,children,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1495287945;Tests that suspends keeps all checkpoints (so that they can be recovered_later by the ZooKeeper store). Furthermore, suspending a job should release_all locks.;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())___		final String checkpointPath = CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())__		Stat stat = client.checkExists().forPath(checkpointPath)___		assertNotNull("The checkpoint node should exist.", stat)__		assertEquals("The checkpoint node should not be locked.", 0, stat.getNumChildren())___		_		sharedStateRegistry.clear()__		store.recover(sharedStateRegistry)___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,so,that,they,can,be,recovered,later,by,the,zoo,keeper,store,furthermore,suspending,a,job,should,release,all,locks;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,shared,state,registry,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,final,string,checkpoint,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,stat,stat,client,check,exists,for,path,checkpoint,path,assert,not,null,the,checkpoint,node,should,exist,stat,assert,equals,the,checkpoint,node,should,not,be,locked,0,stat,get,num,children,shared,state,registry,clear,store,recover,shared,state,registry,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1495563868;Tests that suspends keeps all checkpoints (so that they can be recovered_later by the ZooKeeper store). Furthermore, suspending a job should release_all locks.;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())___		final String checkpointPath = CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())__		Stat stat = client.checkExists().forPath(checkpointPath)___		assertNotNull("The checkpoint node should exist.", stat)__		assertEquals("The checkpoint node should not be locked.", 0, stat.getNumChildren())___		_		sharedStateRegistry.clear()__		store.recover(sharedStateRegistry)___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,so,that,they,can,be,recovered,later,by,the,zoo,keeper,store,furthermore,suspending,a,job,should,release,all,locks;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,shared,state,registry,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,final,string,checkpoint,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,stat,stat,client,check,exists,for,path,checkpoint,path,assert,not,null,the,checkpoint,node,should,exist,stat,assert,equals,the,checkpoint,node,should,not,be,locked,0,stat,get,num,children,shared,state,registry,clear,store,recover,shared,state,registry,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1502801814;Tests that suspends keeps all checkpoints (so that they can be recovered_later by the ZooKeeper store). Furthermore, suspending a job should release_all locks.;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())___		final String checkpointPath = CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())__		Stat stat = client.checkExists().forPath(checkpointPath)___		assertNotNull("The checkpoint node should exist.", stat)__		assertEquals("The checkpoint node should not be locked.", 0, stat.getNumChildren())___		_		sharedStateRegistry.close()__		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,so,that,they,can,be,recovered,later,by,the,zoo,keeper,store,furthermore,suspending,a,job,should,release,all,locks;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,shared,state,registry,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,final,string,checkpoint,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,stat,stat,client,check,exists,for,path,checkpoint,path,assert,not,null,the,checkpoint,node,should,exist,stat,assert,equals,the,checkpoint,node,should,not,be,locked,0,stat,get,num,children,shared,state,registry,close,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1515177485;Tests that suspends keeps all checkpoints (so that they can be recovered_later by the ZooKeeper store). Furthermore, suspending a job should release_all locks.;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())___		final String checkpointPath = CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())__		Stat stat = client.checkExists().forPath(checkpointPath)___		assertNotNull("The checkpoint node should exist.", stat)__		assertEquals("The checkpoint node should not be locked.", 0, stat.getNumChildren())___		_		sharedStateRegistry.close()__		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,so,that,they,can,be,recovered,later,by,the,zoo,keeper,store,furthermore,suspending,a,job,should,release,all,locks;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,shared,state,registry,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,final,string,checkpoint,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,stat,stat,client,check,exists,for,path,checkpoint,path,assert,not,null,the,checkpoint,node,should,exist,stat,assert,equals,the,checkpoint,node,should,not,be,locked,0,stat,get,num,children,shared,state,registry,close,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testSuspendKeepsCheckpoints() throws Exception;1547547304;Tests that suspends keeps all checkpoints (so that they can be recovered_later by the ZooKeeper store). Furthermore, suspending a job should release_all locks.;@Test_	public void testSuspendKeepsCheckpoints() throws Exception {_		CuratorFramework client = ZOOKEEPER.getClient()___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		assertNotNull(client.checkExists().forPath(CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())))___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())___		final String checkpointPath = CHECKPOINT_PATH + ZooKeeperCompletedCheckpointStore.checkpointIdToPath(checkpoint.getCheckpointID())__		Stat stat = client.checkExists().forPath(checkpointPath)___		assertNotNull("The checkpoint node should exist.", stat)__		assertEquals("The checkpoint node should not be locked.", 0, stat.getNumChildren())___		_		sharedStateRegistry.close()__		store.recover()___		CompletedCheckpoint recovered = store.getLatestCheckpoint()__		assertEquals(checkpoint, recovered)__	};tests,that,suspends,keeps,all,checkpoints,so,that,they,can,be,recovered,later,by,the,zoo,keeper,store,furthermore,suspending,a,job,should,release,all,locks;test,public,void,test,suspend,keeps,checkpoints,throws,exception,curator,framework,client,zookeeper,get,client,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,shared,state,registry,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,assert,not,null,client,check,exists,for,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,final,string,checkpoint,path,zoo,keeper,completed,checkpoint,store,checkpoint,id,to,path,checkpoint,get,checkpoint,id,stat,stat,client,check,exists,for,path,checkpoint,path,assert,not,null,the,checkpoint,node,should,exist,stat,assert,equals,the,checkpoint,node,should,not,be,locked,0,stat,get,num,children,shared,state,registry,close,store,recover,completed,checkpoint,recovered,store,get,latest,checkpoint,assert,equals,checkpoint,recovered
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1445293011;Tests that older checkpoints are cleaned up at startup.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3, ClassLoader_				.getSystemClassLoader())___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())___		_		checkpoints.recover()___		_		Deadline deadline = new FiniteDuration(1, TimeUnit.MINUTES).fromNow()___		_		while (deadline.hasTimeLeft() && ZooKeeper.getClient()_				.getChildren().forPath(CheckpointsPath).size() != 1) {__			Thread.sleep(Math.min(100, deadline.timeLeft().toMillis()))__		}__		assertEquals(1, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())__	};tests,that,older,checkpoints,are,cleaned,up,at,startup;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,class,loader,get,system,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,checkpoints,recover,deadline,deadline,new,finite,duration,1,time,unit,minutes,from,now,while,deadline,has,time,left,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,1,thread,sleep,math,min,100,deadline,time,left,to,millis,assert,equals,1,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,expected,2,checkpoints,get,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1445327854;Tests that older checkpoints are cleaned up at startup.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3, ClassLoader_				.getSystemClassLoader())___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())___		_		checkpoints.recover()___		_		Deadline deadline = new FiniteDuration(1, TimeUnit.MINUTES).fromNow()___		_		while (deadline.hasTimeLeft() && ZooKeeper.getClient()_				.getChildren().forPath(CheckpointsPath).size() != 1) {__			Thread.sleep(Math.min(100, deadline.timeLeft().toMillis()))__		}__		assertEquals(1, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())__	};tests,that,older,checkpoints,are,cleaned,up,at,startup;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,class,loader,get,system,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,checkpoints,recover,deadline,deadline,new,finite,duration,1,time,unit,minutes,from,now,while,deadline,has,time,left,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,1,thread,sleep,math,min,100,deadline,time,left,to,millis,assert,equals,1,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,expected,2,checkpoints,get,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1456343760;Tests that older checkpoints are cleaned up at startup.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3, ClassLoader_				.getSystemClassLoader())___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		checkpoints.recover()___		_		Deadline deadline = new FiniteDuration(1, TimeUnit.MINUTES).fromNow()___		_		while (deadline.hasTimeLeft() && ZooKeeper.getClient()_				.getChildren().forPath(CheckpointsPath).size() != 1) {__			Thread.sleep(Math.min(100, deadline.timeLeft().toMillis()))__		}__		assertEquals(1, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())__	};tests,that,older,checkpoints,are,cleaned,up,at,startup;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,class,loader,get,system,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,checkpoints,recover,deadline,deadline,new,finite,duration,1,time,unit,minutes,from,now,while,deadline,has,time,left,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,1,thread,sleep,math,min,100,deadline,time,left,to,millis,assert,equals,1,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1469190400;Tests that older checkpoints are cleaned up at startup.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3, ClassLoader_				.getSystemClassLoader())___		TestCheckpoint[] expected = new TestCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		checkpoints.recover()___		_		Deadline deadline = new FiniteDuration(1, TimeUnit.MINUTES).fromNow()___		_		while (deadline.hasTimeLeft() && ZooKeeper.getClient()_				.getChildren().forPath(CheckpointsPath).size() != 1) {__			Thread.sleep(Math.min(100, deadline.timeLeft().toMillis()))__		}__		assertEquals(1, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())__	};tests,that,older,checkpoints,are,cleaned,up,at,startup;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,class,loader,get,system,class,loader,test,checkpoint,expected,new,test,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,checkpoints,recover,deadline,deadline,new,finite,duration,1,time,unit,minutes,from,now,while,deadline,has,time,left,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,1,thread,sleep,math,min,100,deadline,time,left,to,millis,assert,equals,1,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1469525443;Tests that older checkpoints are cleaned up at startup.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3, ClassLoader_				.getSystemClassLoader())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		checkpoints.recover()___		_		Deadline deadline = new FiniteDuration(1, TimeUnit.MINUTES).fromNow()___		_		while (deadline.hasTimeLeft() && ZooKeeper.getClient()_				.getChildren().forPath(CheckpointsPath).size() != 1) {__			Thread.sleep(Math.min(100, deadline.timeLeft().toMillis()))__		}__		assertEquals(1, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())__	};tests,that,older,checkpoints,are,cleaned,up,at,startup;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,class,loader,get,system,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,checkpoints,recover,deadline,deadline,new,finite,duration,1,time,unit,minutes,from,now,while,deadline,has,time,left,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,1,thread,sleep,math,min,100,deadline,time,left,to,millis,assert,equals,1,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1472663401;Tests that older checkpoints are cleaned up at startup.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3, ClassLoader_				.getSystemClassLoader())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		checkpoints.recover()___		_		Deadline deadline = new FiniteDuration(1, TimeUnit.MINUTES).fromNow()___		_		while (deadline.hasTimeLeft() && ZooKeeper.getClient()_				.getChildren().forPath(CheckpointsPath).size() != 1) {__			Thread.sleep(Math.min(100, deadline.timeLeft().toMillis()))__		}__		assertEquals(1, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())__	};tests,that,older,checkpoints,are,cleaned,up,at,startup;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,class,loader,get,system,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,checkpoints,recover,deadline,deadline,new,finite,duration,1,time,unit,minutes,from,now,while,deadline,has,time,left,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,1,thread,sleep,math,min,100,deadline,time,left,to,millis,assert,equals,1,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1474891865;Tests that older checkpoints are cleaned up at startup.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3, ClassLoader_				.getSystemClassLoader())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		checkpoints.recover()___		_		Deadline deadline = new FiniteDuration(1, TimeUnit.MINUTES).fromNow()___		_		while (deadline.hasTimeLeft() && ZooKeeper.getClient()_				.getChildren().forPath(CheckpointsPath).size() != 1) {__			Thread.sleep(Math.min(100, deadline.timeLeft().toMillis()))__		}__		assertEquals(1, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())__	};tests,that,older,checkpoints,are,cleaned,up,at,startup;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,class,loader,get,system,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,checkpoints,recover,deadline,deadline,new,finite,duration,1,time,unit,minutes,from,now,while,deadline,has,time,left,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,1,thread,sleep,math,min,100,deadline,time,left,to,millis,assert,equals,1,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1475231926;Tests that older checkpoints are cleaned up at startup.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3, ClassLoader_				.getSystemClassLoader())___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		checkpoints.recover()___		_		Deadline deadline = new FiniteDuration(1, TimeUnit.MINUTES).fromNow()___		_		while (deadline.hasTimeLeft() && ZooKeeper.getClient()_				.getChildren().forPath(CheckpointsPath).size() != 1) {__			Thread.sleep(Math.min(100, deadline.timeLeft().toMillis()))__		}__		assertEquals(1, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())__	};tests,that,older,checkpoints,are,cleaned,up,at,startup;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,class,loader,get,system,class,loader,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,checkpoints,recover,deadline,deadline,new,finite,duration,1,time,unit,minutes,from,now,while,deadline,has,time,left,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,1,thread,sleep,math,min,100,deadline,time,left,to,millis,assert,equals,1,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1476432306;Tests that older checkpoints are cleaned up at startup.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		checkpoints.recover()___		_		Deadline deadline = new FiniteDuration(1, TimeUnit.MINUTES).fromNow()___		_		while (deadline.hasTimeLeft() && ZooKeeper.getClient()_				.getChildren().forPath(CheckpointsPath).size() != 1) {__			Thread.sleep(Math.min(100, deadline.timeLeft().toMillis()))__		}__		assertEquals(1, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())__	};tests,that,older,checkpoints,are,cleaned,up,at,startup;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,checkpoints,recover,deadline,deadline,new,finite,duration,1,time,unit,minutes,from,now,while,deadline,has,time,left,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,1,thread,sleep,math,min,100,deadline,time,left,to,millis,assert,equals,1,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1479852016;Tests that older checkpoints are cleaned up at startup.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		checkpoints.recover()___		_		Deadline deadline = new FiniteDuration(1, TimeUnit.MINUTES).fromNow()___		_		while (deadline.hasTimeLeft() && ZooKeeper.getClient()_				.getChildren().forPath(CheckpointsPath).size() != 1) {__			Thread.sleep(Math.min(100, deadline.timeLeft().toMillis()))__		}__		assertEquals(1, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())__	};tests,that,older,checkpoints,are,cleaned,up,at,startup;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,checkpoints,recover,deadline,deadline,new,finite,duration,1,time,unit,minutes,from,now,while,deadline,has,time,left,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,1,thread,sleep,math,min,100,deadline,time,left,to,millis,assert,equals,1,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1481715812;Tests that older checkpoints are cleaned up at startup.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		checkpoints.recover()___		_		Deadline deadline = new FiniteDuration(1, TimeUnit.MINUTES).fromNow()___		_		while (deadline.hasTimeLeft() && ZooKeeper.getClient()_				.getChildren().forPath(CheckpointsPath).size() != 1) {__			Thread.sleep(Math.min(100, deadline.timeLeft().toMillis()))__		}__		assertEquals(1, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(1, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())__	};tests,that,older,checkpoints,are,cleaned,up,at,startup;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,checkpoints,recover,deadline,deadline,new,finite,duration,1,time,unit,minutes,from,now,while,deadline,has,time,left,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,1,thread,sleep,math,min,100,deadline,time,left,to,millis,assert,equals,1,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,1,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1489479789;Tests that older checkpoints are not cleaned up right away when recovering. Only after_another checkpointed has been completed the old checkpoints exceeding the number of_checkpoints to retain will be removed.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		checkpoints.recover()___		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())___		List<CompletedCheckpoint> expectedCheckpoints = new ArrayList<>(3)__		expectedCheckpoints.add(expected[1])__		expectedCheckpoints.add(expected[2])__		expectedCheckpoints.add(createCheckpoint(3))___		checkpoints.addCheckpoint(expectedCheckpoints.get(2))___		List<CompletedCheckpoint> actualCheckpoints = checkpoints.getAllCheckpoints()___		assertEquals(expectedCheckpoints, actualCheckpoints)__	};tests,that,older,checkpoints,are,not,cleaned,up,right,away,when,recovering,only,after,another,checkpointed,has,been,completed,the,old,checkpoints,exceeding,the,number,of,checkpoints,to,retain,will,be,removed;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,checkpoints,recover,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint,list,completed,checkpoint,expected,checkpoints,new,array,list,3,expected,checkpoints,add,expected,1,expected,checkpoints,add,expected,2,expected,checkpoints,add,create,checkpoint,3,checkpoints,add,checkpoint,expected,checkpoints,get,2,list,completed,checkpoint,actual,checkpoints,checkpoints,get,all,checkpoints,assert,equals,expected,checkpoints,actual,checkpoints
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1492867556;Tests that older checkpoints are not cleaned up right away when recovering. Only after_another checkpointed has been completed the old checkpoints exceeding the number of_checkpoints to retain will be removed.;@Test_	public void testRecover() throws Exception {_		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0], sharedStateRegistry)__		checkpoints.addCheckpoint(expected[1], sharedStateRegistry)__		checkpoints.addCheckpoint(expected[2], sharedStateRegistry)___		verifyCheckpointRegistered(expected[0].getTaskStates().values(), sharedStateRegistry)__		verifyCheckpointRegistered(expected[1].getTaskStates().values(), sharedStateRegistry)__		verifyCheckpointRegistered(expected[2].getTaskStates().values(), sharedStateRegistry)___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		resetCheckpoint(expected[0].getTaskStates().values())__		resetCheckpoint(expected[1].getTaskStates().values())__		resetCheckpoint(expected[2].getTaskStates().values())___		_		SharedStateRegistry newSharedStateRegistry = new SharedStateRegistry()__		checkpoints.recover(newSharedStateRegistry)___		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())___		List<CompletedCheckpoint> expectedCheckpoints = new ArrayList<>(3)__		expectedCheckpoints.add(expected[1])__		expectedCheckpoints.add(expected[2])__		expectedCheckpoints.add(createCheckpoint(3))___		checkpoints.addCheckpoint(expectedCheckpoints.get(2), newSharedStateRegistry)___		List<CompletedCheckpoint> actualCheckpoints = checkpoints.getAllCheckpoints()___		assertEquals(expectedCheckpoints, actualCheckpoints)___		for (CompletedCheckpoint actualCheckpoint : actualCheckpoints) {_			verifyCheckpointRegistered(actualCheckpoint.getTaskStates().values(), newSharedStateRegistry)__		}_	};tests,that,older,checkpoints,are,not,cleaned,up,right,away,when,recovering,only,after,another,checkpointed,has,been,completed,the,old,checkpoints,exceeding,the,number,of,checkpoints,to,retain,will,be,removed;test,public,void,test,recover,throws,exception,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,shared,state,registry,checkpoints,add,checkpoint,expected,1,shared,state,registry,checkpoints,add,checkpoint,expected,2,shared,state,registry,verify,checkpoint,registered,expected,0,get,task,states,values,shared,state,registry,verify,checkpoint,registered,expected,1,get,task,states,values,shared,state,registry,verify,checkpoint,registered,expected,2,get,task,states,values,shared,state,registry,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,reset,checkpoint,expected,0,get,task,states,values,reset,checkpoint,expected,1,get,task,states,values,reset,checkpoint,expected,2,get,task,states,values,shared,state,registry,new,shared,state,registry,new,shared,state,registry,checkpoints,recover,new,shared,state,registry,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint,list,completed,checkpoint,expected,checkpoints,new,array,list,3,expected,checkpoints,add,expected,1,expected,checkpoints,add,expected,2,expected,checkpoints,add,create,checkpoint,3,checkpoints,add,checkpoint,expected,checkpoints,get,2,new,shared,state,registry,list,completed,checkpoint,actual,checkpoints,checkpoints,get,all,checkpoints,assert,equals,expected,checkpoints,actual,checkpoints,for,completed,checkpoint,actual,checkpoint,actual,checkpoints,verify,checkpoint,registered,actual,checkpoint,get,task,states,values,new,shared,state,registry
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1492867556;Tests that older checkpoints are not cleaned up right away when recovering. Only after_another checkpointed has been completed the old checkpoints exceeding the number of_checkpoints to retain will be removed.;@Test_	public void testRecover() throws Exception {_		AbstractCompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		verifyCheckpointRegistered(expected[0].getTaskStates().values(), checkpoints.sharedStateRegistry)__		verifyCheckpointRegistered(expected[1].getTaskStates().values(), checkpoints.sharedStateRegistry)__		verifyCheckpointRegistered(expected[2].getTaskStates().values(), checkpoints.sharedStateRegistry)___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		resetCheckpoint(expected[0].getTaskStates().values())__		resetCheckpoint(expected[1].getTaskStates().values())__		resetCheckpoint(expected[2].getTaskStates().values())___		_		checkpoints.recover()___		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())___		List<CompletedCheckpoint> expectedCheckpoints = new ArrayList<>(3)__		expectedCheckpoints.add(expected[1])__		expectedCheckpoints.add(expected[2])__		expectedCheckpoints.add(createCheckpoint(3))___		checkpoints.addCheckpoint(expectedCheckpoints.get(2))___		List<CompletedCheckpoint> actualCheckpoints = checkpoints.getAllCheckpoints()___		assertEquals(expectedCheckpoints, actualCheckpoints)___		for (CompletedCheckpoint actualCheckpoint : actualCheckpoints) {_			verifyCheckpointRegistered(actualCheckpoint.getTaskStates().values(), checkpoints.sharedStateRegistry)__		}_	};tests,that,older,checkpoints,are,not,cleaned,up,right,away,when,recovering,only,after,another,checkpointed,has,been,completed,the,old,checkpoints,exceeding,the,number,of,checkpoints,to,retain,will,be,removed;test,public,void,test,recover,throws,exception,abstract,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,verify,checkpoint,registered,expected,0,get,task,states,values,checkpoints,shared,state,registry,verify,checkpoint,registered,expected,1,get,task,states,values,checkpoints,shared,state,registry,verify,checkpoint,registered,expected,2,get,task,states,values,checkpoints,shared,state,registry,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,reset,checkpoint,expected,0,get,task,states,values,reset,checkpoint,expected,1,get,task,states,values,reset,checkpoint,expected,2,get,task,states,values,checkpoints,recover,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint,list,completed,checkpoint,expected,checkpoints,new,array,list,3,expected,checkpoints,add,expected,1,expected,checkpoints,add,expected,2,expected,checkpoints,add,create,checkpoint,3,checkpoints,add,checkpoint,expected,checkpoints,get,2,list,completed,checkpoint,actual,checkpoints,checkpoints,get,all,checkpoints,assert,equals,expected,checkpoints,actual,checkpoints,for,completed,checkpoint,actual,checkpoint,actual,checkpoints,verify,checkpoint,registered,actual,checkpoint,get,task,states,values,checkpoints,shared,state,registry
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1493403095;Tests that older checkpoints are not cleaned up right away when recovering. Only after_another checkpointed has been completed the old checkpoints exceeding the number of_checkpoints to retain will be removed.;@Test_	public void testRecover() throws Exception {_		AbstractCompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		verifyCheckpointRegistered(expected[0].getOperatorStates().values(), checkpoints.sharedStateRegistry)__		verifyCheckpointRegistered(expected[1].getOperatorStates().values(), checkpoints.sharedStateRegistry)__		verifyCheckpointRegistered(expected[2].getOperatorStates().values(), checkpoints.sharedStateRegistry)___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		resetCheckpoint(expected[0].getOperatorStates().values())__		resetCheckpoint(expected[1].getOperatorStates().values())__		resetCheckpoint(expected[2].getOperatorStates().values())___		_		checkpoints.recover()___		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())___		List<CompletedCheckpoint> expectedCheckpoints = new ArrayList<>(3)__		expectedCheckpoints.add(expected[1])__		expectedCheckpoints.add(expected[2])__		expectedCheckpoints.add(createCheckpoint(3))___		checkpoints.addCheckpoint(expectedCheckpoints.get(2))___		List<CompletedCheckpoint> actualCheckpoints = checkpoints.getAllCheckpoints()___		assertEquals(expectedCheckpoints, actualCheckpoints)___		for (CompletedCheckpoint actualCheckpoint : actualCheckpoints) {_			verifyCheckpointRegistered(actualCheckpoint.getOperatorStates().values(), checkpoints.sharedStateRegistry)__		}_	};tests,that,older,checkpoints,are,not,cleaned,up,right,away,when,recovering,only,after,another,checkpointed,has,been,completed,the,old,checkpoints,exceeding,the,number,of,checkpoints,to,retain,will,be,removed;test,public,void,test,recover,throws,exception,abstract,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,verify,checkpoint,registered,expected,0,get,operator,states,values,checkpoints,shared,state,registry,verify,checkpoint,registered,expected,1,get,operator,states,values,checkpoints,shared,state,registry,verify,checkpoint,registered,expected,2,get,operator,states,values,checkpoints,shared,state,registry,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,reset,checkpoint,expected,0,get,operator,states,values,reset,checkpoint,expected,1,get,operator,states,values,reset,checkpoint,expected,2,get,operator,states,values,checkpoints,recover,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint,list,completed,checkpoint,expected,checkpoints,new,array,list,3,expected,checkpoints,add,expected,1,expected,checkpoints,add,expected,2,expected,checkpoints,add,create,checkpoint,3,checkpoints,add,checkpoint,expected,checkpoints,get,2,list,completed,checkpoint,actual,checkpoints,checkpoints,get,all,checkpoints,assert,equals,expected,checkpoints,actual,checkpoints,for,completed,checkpoint,actual,checkpoint,actual,checkpoints,verify,checkpoint,registered,actual,checkpoint,get,operator,states,values,checkpoints,shared,state,registry
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1495001907;Tests that older checkpoints are not cleaned up right away when recovering. Only after_another checkpointed has been completed the old checkpoints exceeding the number of_checkpoints to retain will be removed.;@Test_	public void testRecover() throws Exception {_		AbstractCompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		verifyCheckpointRegistered(expected[0].getOperatorStates().values(), checkpoints.sharedStateRegistry)__		verifyCheckpointRegistered(expected[1].getOperatorStates().values(), checkpoints.sharedStateRegistry)__		verifyCheckpointRegistered(expected[2].getOperatorStates().values(), checkpoints.sharedStateRegistry)___		_		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		resetCheckpoint(expected[0].getOperatorStates().values())__		resetCheckpoint(expected[1].getOperatorStates().values())__		resetCheckpoint(expected[2].getOperatorStates().values())___		_		checkpoints.recover()___		assertEquals(3, ZooKeeper.getClient().getChildren().forPath(CheckpointsPath).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())___		List<CompletedCheckpoint> expectedCheckpoints = new ArrayList<>(3)__		expectedCheckpoints.add(expected[1])__		expectedCheckpoints.add(expected[2])__		expectedCheckpoints.add(createCheckpoint(3))___		checkpoints.addCheckpoint(expectedCheckpoints.get(2))___		List<CompletedCheckpoint> actualCheckpoints = checkpoints.getAllCheckpoints()___		assertEquals(expectedCheckpoints, actualCheckpoints)___		for (CompletedCheckpoint actualCheckpoint : actualCheckpoints) {_			verifyCheckpointRegistered(actualCheckpoint.getOperatorStates().values(), checkpoints.sharedStateRegistry)__		}_	};tests,that,older,checkpoints,are,not,cleaned,up,right,away,when,recovering,only,after,another,checkpointed,has,been,completed,the,old,checkpoints,exceeding,the,number,of,checkpoints,to,retain,will,be,removed;test,public,void,test,recover,throws,exception,abstract,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,verify,checkpoint,registered,expected,0,get,operator,states,values,checkpoints,shared,state,registry,verify,checkpoint,registered,expected,1,get,operator,states,values,checkpoints,shared,state,registry,verify,checkpoint,registered,expected,2,get,operator,states,values,checkpoints,shared,state,registry,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,reset,checkpoint,expected,0,get,operator,states,values,reset,checkpoint,expected,1,get,operator,states,values,reset,checkpoint,expected,2,get,operator,states,values,checkpoints,recover,assert,equals,3,zoo,keeper,get,client,get,children,for,path,checkpoints,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint,list,completed,checkpoint,expected,checkpoints,new,array,list,3,expected,checkpoints,add,expected,1,expected,checkpoints,add,expected,2,expected,checkpoints,add,create,checkpoint,3,checkpoints,add,checkpoint,expected,checkpoints,get,2,list,completed,checkpoint,actual,checkpoints,checkpoints,get,all,checkpoints,assert,equals,expected,checkpoints,actual,checkpoints,for,completed,checkpoint,actual,checkpoint,actual,checkpoints,verify,checkpoint,registered,actual,checkpoint,get,operator,states,values,checkpoints,shared,state,registry
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1495184252;Tests that older checkpoints are not cleaned up right away when recovering. Only after_another checkpointed has been completed the old checkpoints exceeding the number of_checkpoints to retain will be removed.;@Test_	public void testRecover() throws Exception {_		AbstractCompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		verifyCheckpointRegistered(expected[0].getOperatorStates().values(), checkpoints.sharedStateRegistry)__		verifyCheckpointRegistered(expected[1].getOperatorStates().values(), checkpoints.sharedStateRegistry)__		verifyCheckpointRegistered(expected[2].getOperatorStates().values(), checkpoints.sharedStateRegistry)___		_		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		resetCheckpoint(expected[0].getOperatorStates().values())__		resetCheckpoint(expected[1].getOperatorStates().values())__		resetCheckpoint(expected[2].getOperatorStates().values())___		_		checkpoints.recover()___		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())___		List<CompletedCheckpoint> expectedCheckpoints = new ArrayList<>(3)__		expectedCheckpoints.add(expected[1])__		expectedCheckpoints.add(expected[2])__		expectedCheckpoints.add(createCheckpoint(3))___		checkpoints.addCheckpoint(expectedCheckpoints.get(2))___		List<CompletedCheckpoint> actualCheckpoints = checkpoints.getAllCheckpoints()___		assertEquals(expectedCheckpoints, actualCheckpoints)___		for (CompletedCheckpoint actualCheckpoint : actualCheckpoints) {_			verifyCheckpointRegistered(actualCheckpoint.getOperatorStates().values(), checkpoints.sharedStateRegistry)__		}_	};tests,that,older,checkpoints,are,not,cleaned,up,right,away,when,recovering,only,after,another,checkpointed,has,been,completed,the,old,checkpoints,exceeding,the,number,of,checkpoints,to,retain,will,be,removed;test,public,void,test,recover,throws,exception,abstract,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,verify,checkpoint,registered,expected,0,get,operator,states,values,checkpoints,shared,state,registry,verify,checkpoint,registered,expected,1,get,operator,states,values,checkpoints,shared,state,registry,verify,checkpoint,registered,expected,2,get,operator,states,values,checkpoints,shared,state,registry,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,reset,checkpoint,expected,0,get,operator,states,values,reset,checkpoint,expected,1,get,operator,states,values,reset,checkpoint,expected,2,get,operator,states,values,checkpoints,recover,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint,list,completed,checkpoint,expected,checkpoints,new,array,list,3,expected,checkpoints,add,expected,1,expected,checkpoints,add,expected,2,expected,checkpoints,add,create,checkpoint,3,checkpoints,add,checkpoint,expected,checkpoints,get,2,list,completed,checkpoint,actual,checkpoints,checkpoints,get,all,checkpoints,assert,equals,expected,checkpoints,actual,checkpoints,for,completed,checkpoint,actual,checkpoint,actual,checkpoints,verify,checkpoint,registered,actual,checkpoint,get,operator,states,values,checkpoints,shared,state,registry
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1495184252;Tests that older checkpoints are not cleaned up right away when recovering. Only after_another checkpointed has been completed the old checkpoints exceeding the number of_checkpoints to retain will be removed.;@Test_	public void testRecover() throws Exception {_		AbstractCompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[] {_				createCheckpoint(0), createCheckpoint(1), createCheckpoint(2)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		verifyCheckpointRegistered(expected[0].getOperatorStates().values(), checkpoints.sharedStateRegistry)__		verifyCheckpointRegistered(expected[1].getOperatorStates().values(), checkpoints.sharedStateRegistry)__		verifyCheckpointRegistered(expected[2].getOperatorStates().values(), checkpoints.sharedStateRegistry)___		_		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		checkpoints.recover()___		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())___		List<CompletedCheckpoint> expectedCheckpoints = new ArrayList<>(3)__		expectedCheckpoints.add(expected[1])__		expectedCheckpoints.add(expected[2])__		expectedCheckpoints.add(createCheckpoint(3))___		checkpoints.addCheckpoint(expectedCheckpoints.get(2))___		List<CompletedCheckpoint> actualCheckpoints = checkpoints.getAllCheckpoints()___		assertEquals(expectedCheckpoints, actualCheckpoints)___		for (CompletedCheckpoint actualCheckpoint : actualCheckpoints) {_			verifyCheckpointRegistered(actualCheckpoint.getOperatorStates().values(), checkpoints.sharedStateRegistry)__		}_	};tests,that,older,checkpoints,are,not,cleaned,up,right,away,when,recovering,only,after,another,checkpointed,has,been,completed,the,old,checkpoints,exceeding,the,number,of,checkpoints,to,retain,will,be,removed;test,public,void,test,recover,throws,exception,abstract,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,create,checkpoint,1,create,checkpoint,2,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,verify,checkpoint,registered,expected,0,get,operator,states,values,checkpoints,shared,state,registry,verify,checkpoint,registered,expected,1,get,operator,states,values,checkpoints,shared,state,registry,verify,checkpoint,registered,expected,2,get,operator,states,values,checkpoints,shared,state,registry,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,checkpoints,recover,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint,list,completed,checkpoint,expected,checkpoints,new,array,list,3,expected,checkpoints,add,expected,1,expected,checkpoints,add,expected,2,expected,checkpoints,add,create,checkpoint,3,checkpoints,add,checkpoint,expected,checkpoints,get,2,list,completed,checkpoint,actual,checkpoints,checkpoints,get,all,checkpoints,assert,equals,expected,checkpoints,actual,checkpoints,for,completed,checkpoint,actual,checkpoint,actual,checkpoints,verify,checkpoint,registered,actual,checkpoint,get,operator,states,values,checkpoints,shared,state,registry
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1495287945;Tests that older checkpoints are not cleaned up right away when recovering. Only after_another checkpointed has been completed the old checkpoints exceeding the number of_checkpoints to retain will be removed.;@Test_	public void testRecover() throws Exception {__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[]{_			createCheckpoint(0, sharedStateRegistry),_			createCheckpoint(1, sharedStateRegistry),_			createCheckpoint(2, sharedStateRegistry)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		verifyCheckpointRegistered(expected[0].getOperatorStates().values(), sharedStateRegistry)__		verifyCheckpointRegistered(expected[1].getOperatorStates().values(), sharedStateRegistry)__		verifyCheckpointRegistered(expected[2].getOperatorStates().values(), sharedStateRegistry)___		_		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		sharedStateRegistry.clear()__		checkpoints.recover(sharedStateRegistry)___		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())___		List<CompletedCheckpoint> expectedCheckpoints = new ArrayList<>(3)__		expectedCheckpoints.add(expected[1])__		expectedCheckpoints.add(expected[2])__		expectedCheckpoints.add(createCheckpoint(3, sharedStateRegistry))___		checkpoints.addCheckpoint(expectedCheckpoints.get(2))___		List<CompletedCheckpoint> actualCheckpoints = checkpoints.getAllCheckpoints()___		assertEquals(expectedCheckpoints, actualCheckpoints)___		for (CompletedCheckpoint actualCheckpoint : actualCheckpoints) {_			verifyCheckpointRegistered(actualCheckpoint.getOperatorStates().values(), sharedStateRegistry)__		}_	};tests,that,older,checkpoints,are,not,cleaned,up,right,away,when,recovering,only,after,another,checkpointed,has,been,completed,the,old,checkpoints,exceeding,the,number,of,checkpoints,to,retain,will,be,removed;test,public,void,test,recover,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,verify,checkpoint,registered,expected,0,get,operator,states,values,shared,state,registry,verify,checkpoint,registered,expected,1,get,operator,states,values,shared,state,registry,verify,checkpoint,registered,expected,2,get,operator,states,values,shared,state,registry,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,shared,state,registry,clear,checkpoints,recover,shared,state,registry,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint,list,completed,checkpoint,expected,checkpoints,new,array,list,3,expected,checkpoints,add,expected,1,expected,checkpoints,add,expected,2,expected,checkpoints,add,create,checkpoint,3,shared,state,registry,checkpoints,add,checkpoint,expected,checkpoints,get,2,list,completed,checkpoint,actual,checkpoints,checkpoints,get,all,checkpoints,assert,equals,expected,checkpoints,actual,checkpoints,for,completed,checkpoint,actual,checkpoint,actual,checkpoints,verify,checkpoint,registered,actual,checkpoint,get,operator,states,values,shared,state,registry
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1495563868;Tests that older checkpoints are not cleaned up right away when recovering. Only after_another checkpointed has been completed the old checkpoints exceeding the number of_checkpoints to retain will be removed.;@Test_	public void testRecover() throws Exception {__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[]{_			createCheckpoint(0, sharedStateRegistry),_			createCheckpoint(1, sharedStateRegistry),_			createCheckpoint(2, sharedStateRegistry)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		verifyCheckpointRegistered(expected[0].getOperatorStates().values(), sharedStateRegistry)__		verifyCheckpointRegistered(expected[1].getOperatorStates().values(), sharedStateRegistry)__		verifyCheckpointRegistered(expected[2].getOperatorStates().values(), sharedStateRegistry)___		_		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		sharedStateRegistry.clear()__		checkpoints.recover(sharedStateRegistry)___		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())___		List<CompletedCheckpoint> expectedCheckpoints = new ArrayList<>(3)__		expectedCheckpoints.add(expected[1])__		expectedCheckpoints.add(expected[2])__		expectedCheckpoints.add(createCheckpoint(3, sharedStateRegistry))___		checkpoints.addCheckpoint(expectedCheckpoints.get(2))___		List<CompletedCheckpoint> actualCheckpoints = checkpoints.getAllCheckpoints()___		assertEquals(expectedCheckpoints, actualCheckpoints)___		for (CompletedCheckpoint actualCheckpoint : actualCheckpoints) {_			verifyCheckpointRegistered(actualCheckpoint.getOperatorStates().values(), sharedStateRegistry)__		}_	};tests,that,older,checkpoints,are,not,cleaned,up,right,away,when,recovering,only,after,another,checkpointed,has,been,completed,the,old,checkpoints,exceeding,the,number,of,checkpoints,to,retain,will,be,removed;test,public,void,test,recover,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,verify,checkpoint,registered,expected,0,get,operator,states,values,shared,state,registry,verify,checkpoint,registered,expected,1,get,operator,states,values,shared,state,registry,verify,checkpoint,registered,expected,2,get,operator,states,values,shared,state,registry,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,shared,state,registry,clear,checkpoints,recover,shared,state,registry,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint,list,completed,checkpoint,expected,checkpoints,new,array,list,3,expected,checkpoints,add,expected,1,expected,checkpoints,add,expected,2,expected,checkpoints,add,create,checkpoint,3,shared,state,registry,checkpoints,add,checkpoint,expected,checkpoints,get,2,list,completed,checkpoint,actual,checkpoints,checkpoints,get,all,checkpoints,assert,equals,expected,checkpoints,actual,checkpoints,for,completed,checkpoint,actual,checkpoint,actual,checkpoints,verify,checkpoint,registered,actual,checkpoint,get,operator,states,values,shared,state,registry
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1502801814;Tests that older checkpoints are not cleaned up right away when recovering. Only after_another checkpointed has been completed the old checkpoints exceeding the number of_checkpoints to retain will be removed.;@Test_	public void testRecover() throws Exception {__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[]{_			createCheckpoint(0, sharedStateRegistry),_			createCheckpoint(1, sharedStateRegistry),_			createCheckpoint(2, sharedStateRegistry)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		verifyCheckpointRegistered(expected[0].getOperatorStates().values(), sharedStateRegistry)__		verifyCheckpointRegistered(expected[1].getOperatorStates().values(), sharedStateRegistry)__		verifyCheckpointRegistered(expected[2].getOperatorStates().values(), sharedStateRegistry)___		_		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		sharedStateRegistry.close()__		sharedStateRegistry = new SharedStateRegistry()__		checkpoints.recover()___		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())___		List<CompletedCheckpoint> expectedCheckpoints = new ArrayList<>(3)__		expectedCheckpoints.add(expected[1])__		expectedCheckpoints.add(expected[2])__		expectedCheckpoints.add(createCheckpoint(3, sharedStateRegistry))___		checkpoints.addCheckpoint(expectedCheckpoints.get(2))___		List<CompletedCheckpoint> actualCheckpoints = checkpoints.getAllCheckpoints()___		assertEquals(expectedCheckpoints, actualCheckpoints)___		for (CompletedCheckpoint actualCheckpoint : actualCheckpoints) {_			verifyCheckpointRegistered(actualCheckpoint.getOperatorStates().values(), sharedStateRegistry)__		}_	};tests,that,older,checkpoints,are,not,cleaned,up,right,away,when,recovering,only,after,another,checkpointed,has,been,completed,the,old,checkpoints,exceeding,the,number,of,checkpoints,to,retain,will,be,removed;test,public,void,test,recover,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,verify,checkpoint,registered,expected,0,get,operator,states,values,shared,state,registry,verify,checkpoint,registered,expected,1,get,operator,states,values,shared,state,registry,verify,checkpoint,registered,expected,2,get,operator,states,values,shared,state,registry,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,shared,state,registry,close,shared,state,registry,new,shared,state,registry,checkpoints,recover,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint,list,completed,checkpoint,expected,checkpoints,new,array,list,3,expected,checkpoints,add,expected,1,expected,checkpoints,add,expected,2,expected,checkpoints,add,create,checkpoint,3,shared,state,registry,checkpoints,add,checkpoint,expected,checkpoints,get,2,list,completed,checkpoint,actual,checkpoints,checkpoints,get,all,checkpoints,assert,equals,expected,checkpoints,actual,checkpoints,for,completed,checkpoint,actual,checkpoint,actual,checkpoints,verify,checkpoint,registered,actual,checkpoint,get,operator,states,values,shared,state,registry
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1515177485;Tests that older checkpoints are not cleaned up right away when recovering. Only after_another checkpointed has been completed the old checkpoints exceeding the number of_checkpoints to retain will be removed.;@Test_	public void testRecover() throws Exception {__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[]{_			createCheckpoint(0, sharedStateRegistry),_			createCheckpoint(1, sharedStateRegistry),_			createCheckpoint(2, sharedStateRegistry)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		verifyCheckpointRegistered(expected[0].getOperatorStates().values(), sharedStateRegistry)__		verifyCheckpointRegistered(expected[1].getOperatorStates().values(), sharedStateRegistry)__		verifyCheckpointRegistered(expected[2].getOperatorStates().values(), sharedStateRegistry)___		_		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		sharedStateRegistry.close()__		sharedStateRegistry = new SharedStateRegistry()__		checkpoints.recover()___		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())___		List<CompletedCheckpoint> expectedCheckpoints = new ArrayList<>(3)__		expectedCheckpoints.add(expected[1])__		expectedCheckpoints.add(expected[2])__		expectedCheckpoints.add(createCheckpoint(3, sharedStateRegistry))___		checkpoints.addCheckpoint(expectedCheckpoints.get(2))___		List<CompletedCheckpoint> actualCheckpoints = checkpoints.getAllCheckpoints()___		assertEquals(expectedCheckpoints, actualCheckpoints)___		for (CompletedCheckpoint actualCheckpoint : actualCheckpoints) {_			verifyCheckpointRegistered(actualCheckpoint.getOperatorStates().values(), sharedStateRegistry)__		}_	};tests,that,older,checkpoints,are,not,cleaned,up,right,away,when,recovering,only,after,another,checkpointed,has,been,completed,the,old,checkpoints,exceeding,the,number,of,checkpoints,to,retain,will,be,removed;test,public,void,test,recover,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,verify,checkpoint,registered,expected,0,get,operator,states,values,shared,state,registry,verify,checkpoint,registered,expected,1,get,operator,states,values,shared,state,registry,verify,checkpoint,registered,expected,2,get,operator,states,values,shared,state,registry,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,shared,state,registry,close,shared,state,registry,new,shared,state,registry,checkpoints,recover,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint,list,completed,checkpoint,expected,checkpoints,new,array,list,3,expected,checkpoints,add,expected,1,expected,checkpoints,add,expected,2,expected,checkpoints,add,create,checkpoint,3,shared,state,registry,checkpoints,add,checkpoint,expected,checkpoints,get,2,list,completed,checkpoint,actual,checkpoints,checkpoints,get,all,checkpoints,assert,equals,expected,checkpoints,actual,checkpoints,for,completed,checkpoint,actual,checkpoint,actual,checkpoints,verify,checkpoint,registered,actual,checkpoint,get,operator,states,values,shared,state,registry
ZooKeeperCompletedCheckpointStoreITCase -> @Test 	public void testRecover() throws Exception;1547547304;Tests that older checkpoints are not cleaned up right away when recovering. Only after_another checkpointed has been completed the old checkpoints exceeding the number of_checkpoints to retain will be removed.;@Test_	public void testRecover() throws Exception {__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore checkpoints = createCompletedCheckpoints(3)___		TestCompletedCheckpoint[] expected = new TestCompletedCheckpoint[]{_			createCheckpoint(0, sharedStateRegistry),_			createCheckpoint(1, sharedStateRegistry),_			createCheckpoint(2, sharedStateRegistry)_		}___		_		checkpoints.addCheckpoint(expected[0])__		checkpoints.addCheckpoint(expected[1])__		checkpoints.addCheckpoint(expected[2])___		verifyCheckpointRegistered(expected[0].getOperatorStates().values(), sharedStateRegistry)__		verifyCheckpointRegistered(expected[1].getOperatorStates().values(), sharedStateRegistry)__		verifyCheckpointRegistered(expected[2].getOperatorStates().values(), sharedStateRegistry)___		_		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())___		_		sharedStateRegistry.close()__		sharedStateRegistry = new SharedStateRegistry()__		checkpoints.recover()___		assertEquals(3, ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size())__		assertEquals(3, checkpoints.getNumberOfRetainedCheckpoints())__		assertEquals(expected[2], checkpoints.getLatestCheckpoint())___		List<CompletedCheckpoint> expectedCheckpoints = new ArrayList<>(3)__		expectedCheckpoints.add(expected[1])__		expectedCheckpoints.add(expected[2])__		expectedCheckpoints.add(createCheckpoint(3, sharedStateRegistry))___		checkpoints.addCheckpoint(expectedCheckpoints.get(2))___		List<CompletedCheckpoint> actualCheckpoints = checkpoints.getAllCheckpoints()___		assertEquals(expectedCheckpoints, actualCheckpoints)___		for (CompletedCheckpoint actualCheckpoint : actualCheckpoints) {_			verifyCheckpointRegistered(actualCheckpoint.getOperatorStates().values(), sharedStateRegistry)__		}_	};tests,that,older,checkpoints,are,not,cleaned,up,right,away,when,recovering,only,after,another,checkpointed,has,been,completed,the,old,checkpoints,exceeding,the,number,of,checkpoints,to,retain,will,be,removed;test,public,void,test,recover,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,checkpoints,create,completed,checkpoints,3,test,completed,checkpoint,expected,new,test,completed,checkpoint,create,checkpoint,0,shared,state,registry,create,checkpoint,1,shared,state,registry,create,checkpoint,2,shared,state,registry,checkpoints,add,checkpoint,expected,0,checkpoints,add,checkpoint,expected,1,checkpoints,add,checkpoint,expected,2,verify,checkpoint,registered,expected,0,get,operator,states,values,shared,state,registry,verify,checkpoint,registered,expected,1,get,operator,states,values,shared,state,registry,verify,checkpoint,registered,expected,2,get,operator,states,values,shared,state,registry,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,shared,state,registry,close,shared,state,registry,new,shared,state,registry,checkpoints,recover,assert,equals,3,zookeeper,get,client,get,children,for,path,size,assert,equals,3,checkpoints,get,number,of,retained,checkpoints,assert,equals,expected,2,checkpoints,get,latest,checkpoint,list,completed,checkpoint,expected,checkpoints,new,array,list,3,expected,checkpoints,add,expected,1,expected,checkpoints,add,expected,2,expected,checkpoints,add,create,checkpoint,3,shared,state,registry,checkpoints,add,checkpoint,expected,checkpoints,get,2,list,completed,checkpoint,actual,checkpoints,checkpoints,get,all,checkpoints,assert,equals,expected,checkpoints,actual,checkpoints,for,completed,checkpoint,actual,checkpoint,actual,checkpoints,verify,checkpoint,registered,actual,checkpoint,get,operator,states,values,shared,state,registry
