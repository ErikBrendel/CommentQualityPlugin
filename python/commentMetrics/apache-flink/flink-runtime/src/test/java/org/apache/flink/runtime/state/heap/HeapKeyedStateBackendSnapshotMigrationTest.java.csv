# id;timestamp;commentText;codeText;commentWords;codeWords
HeapKeyedStateBackendSnapshotMigrationTest -> @Test 	public void testRestore1_2ToMaster() throws Exception;1489685642;[FLINK-5979]__This test takes a snapshot that was created with Flink 1.2 and tries to restore it in master to check_the backwards compatibility of the serialization format of {@link StateTable}s.;@Test_	public void testRestore1_2ToMaster() throws Exception {__		ClassLoader cl = getClass().getClassLoader()__		URL resource = cl.getResource("heap_keyed_statebackend_1_2.snapshot")___		Preconditions.checkNotNull(resource, "Binary snapshot resource not found!")___		final Integer namespace1 = 1__		final Integer namespace2 = 2__		final Integer namespace3 = 3___		try (final HeapKeyedStateBackend<String> keyedBackend = createKeyedBackend()) {_			final KeyGroupsStateHandle stateHandle__			try (BufferedInputStream bis = new BufferedInputStream((new FileInputStream(resource.getFile())))) {_				stateHandle = InstantiationUtil.deserializeObject(bis, Thread.currentThread().getContextClassLoader())__			}_			keyedBackend.restore(Collections.singleton(stateHandle))__			final ListStateDescriptor<Long> stateDescr = new ListStateDescriptor<>("my-state", Long.class)__			stateDescr.initializeSerializerUnlessSet(new ExecutionConfig())___			InternalListState<Integer, Long> state = keyedBackend.createListState(IntSerializer.INSTANCE, stateDescr)___			assertEquals(7, keyedBackend.numStateEntries())___			keyedBackend.setCurrentKey("abc")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(33L, 55L), state.get())__			state.setCurrentNamespace(namespace2)__			assertEquals(asList(22L, 11L), state.get())__			state.setCurrentNamespace(namespace3)__			assertEquals(Collections.singletonList(44L), state.get())___			keyedBackend.setCurrentKey("def")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 44L), state.get())___			state.setCurrentNamespace(namespace3)__			assertEquals(asList(22L, 55L, 33L), state.get())___			keyedBackend.setCurrentKey("jkl")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())___			keyedBackend.setCurrentKey("mno")__			state.setCurrentNamespace(namespace3)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())__		}_	};flink,5979,this,test,takes,a,snapshot,that,was,created,with,flink,1,2,and,tries,to,restore,it,in,master,to,check,the,backwards,compatibility,of,the,serialization,format,of,link,state,table,s;test,public,void,throws,exception,class,loader,cl,get,class,get,class,loader,url,resource,cl,get,resource,snapshot,preconditions,check,not,null,resource,binary,snapshot,resource,not,found,final,integer,namespace1,1,final,integer,namespace2,2,final,integer,namespace3,3,try,final,heap,keyed,state,backend,string,keyed,backend,create,keyed,backend,final,key,groups,state,handle,state,handle,try,buffered,input,stream,bis,new,buffered,input,stream,new,file,input,stream,resource,get,file,state,handle,instantiation,util,deserialize,object,bis,thread,current,thread,get,context,class,loader,keyed,backend,restore,collections,singleton,state,handle,final,list,state,descriptor,long,state,descr,new,list,state,descriptor,my,state,long,class,state,descr,initialize,serializer,unless,set,new,execution,config,internal,list,state,integer,long,state,keyed,backend,create,list,state,int,serializer,instance,state,descr,assert,equals,7,keyed,backend,num,state,entries,keyed,backend,set,current,key,abc,state,set,current,namespace,namespace1,assert,equals,as,list,33l,55l,state,get,state,set,current,namespace,namespace2,assert,equals,as,list,22l,11l,state,get,state,set,current,namespace,namespace3,assert,equals,collections,singleton,list,44l,state,get,keyed,backend,set,current,key,def,state,set,current,namespace,namespace1,assert,equals,as,list,11l,44l,state,get,state,set,current,namespace,namespace3,assert,equals,as,list,22l,55l,33l,state,get,keyed,backend,set,current,key,jkl,state,set,current,namespace,namespace1,assert,equals,as,list,11l,22l,33l,44l,55l,state,get,keyed,backend,set,current,key,mno,state,set,current,namespace,namespace3,assert,equals,as,list,11l,22l,33l,44l,55l,state,get
HeapKeyedStateBackendSnapshotMigrationTest -> @Test 	public void testRestore1_2ToMaster() throws Exception;1490724328;[FLINK-5979]__This test takes a snapshot that was created with Flink 1.2 and tries to restore it in master to check_the backwards compatibility of the serialization format of {@link StateTable}s.;@Test_	public void testRestore1_2ToMaster() throws Exception {__		ClassLoader cl = getClass().getClassLoader()__		URL resource = cl.getResource("heap_keyed_statebackend_1_2.snapshot")___		Preconditions.checkNotNull(resource, "Binary snapshot resource not found!")___		final Integer namespace1 = 1__		final Integer namespace2 = 2__		final Integer namespace3 = 3___		try (final HeapKeyedStateBackend<String> keyedBackend = createKeyedBackend()) {_			final KeyGroupsStateHandle stateHandle__			try (BufferedInputStream bis = new BufferedInputStream((new FileInputStream(resource.getFile())))) {_				stateHandle = InstantiationUtil.deserializeObject(bis, Thread.currentThread().getContextClassLoader())__			}_			keyedBackend.restore(Collections.<KeyedStateHandle>singleton(stateHandle))__			final ListStateDescriptor<Long> stateDescr = new ListStateDescriptor<>("my-state", Long.class)__			stateDescr.initializeSerializerUnlessSet(new ExecutionConfig())___			InternalListState<Integer, Long> state = keyedBackend.createListState(IntSerializer.INSTANCE, stateDescr)___			assertEquals(7, keyedBackend.numStateEntries())___			keyedBackend.setCurrentKey("abc")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(33L, 55L), state.get())__			state.setCurrentNamespace(namespace2)__			assertEquals(asList(22L, 11L), state.get())__			state.setCurrentNamespace(namespace3)__			assertEquals(Collections.singletonList(44L), state.get())___			keyedBackend.setCurrentKey("def")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 44L), state.get())___			state.setCurrentNamespace(namespace3)__			assertEquals(asList(22L, 55L, 33L), state.get())___			keyedBackend.setCurrentKey("jkl")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())___			keyedBackend.setCurrentKey("mno")__			state.setCurrentNamespace(namespace3)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())__		}_	};flink,5979,this,test,takes,a,snapshot,that,was,created,with,flink,1,2,and,tries,to,restore,it,in,master,to,check,the,backwards,compatibility,of,the,serialization,format,of,link,state,table,s;test,public,void,throws,exception,class,loader,cl,get,class,get,class,loader,url,resource,cl,get,resource,snapshot,preconditions,check,not,null,resource,binary,snapshot,resource,not,found,final,integer,namespace1,1,final,integer,namespace2,2,final,integer,namespace3,3,try,final,heap,keyed,state,backend,string,keyed,backend,create,keyed,backend,final,key,groups,state,handle,state,handle,try,buffered,input,stream,bis,new,buffered,input,stream,new,file,input,stream,resource,get,file,state,handle,instantiation,util,deserialize,object,bis,thread,current,thread,get,context,class,loader,keyed,backend,restore,collections,keyed,state,handle,singleton,state,handle,final,list,state,descriptor,long,state,descr,new,list,state,descriptor,my,state,long,class,state,descr,initialize,serializer,unless,set,new,execution,config,internal,list,state,integer,long,state,keyed,backend,create,list,state,int,serializer,instance,state,descr,assert,equals,7,keyed,backend,num,state,entries,keyed,backend,set,current,key,abc,state,set,current,namespace,namespace1,assert,equals,as,list,33l,55l,state,get,state,set,current,namespace,namespace2,assert,equals,as,list,22l,11l,state,get,state,set,current,namespace,namespace3,assert,equals,collections,singleton,list,44l,state,get,keyed,backend,set,current,key,def,state,set,current,namespace,namespace1,assert,equals,as,list,11l,44l,state,get,state,set,current,namespace,namespace3,assert,equals,as,list,22l,55l,33l,state,get,keyed,backend,set,current,key,jkl,state,set,current,namespace,namespace1,assert,equals,as,list,11l,22l,33l,44l,55l,state,get,keyed,backend,set,current,key,mno,state,set,current,namespace,namespace3,assert,equals,as,list,11l,22l,33l,44l,55l,state,get
HeapKeyedStateBackendSnapshotMigrationTest -> @Test 	public void testRestore1_2ToMaster() throws Exception;1509118643;[FLINK-5979]__This test takes a snapshot that was created with Flink 1.2 and tries to restore it in master to check_the backwards compatibility of the serialization format of {@link StateTable}s.;@Test_	public void testRestore1_2ToMaster() throws Exception {__		ClassLoader cl = getClass().getClassLoader()__		URL resource = cl.getResource("heap_keyed_statebackend_1_2.snapshot")___		Preconditions.checkNotNull(resource, "Binary snapshot resource not found!")___		final Integer namespace1 = 1__		final Integer namespace2 = 2__		final Integer namespace3 = 3___		try (final HeapKeyedStateBackend<String> keyedBackend = createKeyedBackend()) {_			final KeyGroupsStateHandle stateHandle__			try (BufferedInputStream bis = new BufferedInputStream((new FileInputStream(resource.getFile())))) {_				stateHandle = InstantiationUtil.deserializeObject(bis, Thread.currentThread().getContextClassLoader())__			}_			keyedBackend.restore(Collections.<KeyedStateHandle>singleton(stateHandle))__			final ListStateDescriptor<Long> stateDescr = new ListStateDescriptor<>("my-state", Long.class)__			stateDescr.initializeSerializerUnlessSet(new ExecutionConfig())___			InternalListState<Integer, Long> state = keyedBackend.createListState(IntSerializer.INSTANCE, stateDescr)___			assertEquals(7, keyedBackend.numStateEntries())___			keyedBackend.setCurrentKey("abc")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(33L, 55L), state.get())__			state.setCurrentNamespace(namespace2)__			assertEquals(asList(22L, 11L), state.get())__			state.setCurrentNamespace(namespace3)__			assertEquals(Collections.singletonList(44L), state.get())___			keyedBackend.setCurrentKey("def")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 44L), state.get())___			state.setCurrentNamespace(namespace3)__			assertEquals(asList(22L, 55L, 33L), state.get())___			keyedBackend.setCurrentKey("jkl")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())___			keyedBackend.setCurrentKey("mno")__			state.setCurrentNamespace(namespace3)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())__		}_	};flink,5979,this,test,takes,a,snapshot,that,was,created,with,flink,1,2,and,tries,to,restore,it,in,master,to,check,the,backwards,compatibility,of,the,serialization,format,of,link,state,table,s;test,public,void,throws,exception,class,loader,cl,get,class,get,class,loader,url,resource,cl,get,resource,snapshot,preconditions,check,not,null,resource,binary,snapshot,resource,not,found,final,integer,namespace1,1,final,integer,namespace2,2,final,integer,namespace3,3,try,final,heap,keyed,state,backend,string,keyed,backend,create,keyed,backend,final,key,groups,state,handle,state,handle,try,buffered,input,stream,bis,new,buffered,input,stream,new,file,input,stream,resource,get,file,state,handle,instantiation,util,deserialize,object,bis,thread,current,thread,get,context,class,loader,keyed,backend,restore,collections,keyed,state,handle,singleton,state,handle,final,list,state,descriptor,long,state,descr,new,list,state,descriptor,my,state,long,class,state,descr,initialize,serializer,unless,set,new,execution,config,internal,list,state,integer,long,state,keyed,backend,create,list,state,int,serializer,instance,state,descr,assert,equals,7,keyed,backend,num,state,entries,keyed,backend,set,current,key,abc,state,set,current,namespace,namespace1,assert,equals,as,list,33l,55l,state,get,state,set,current,namespace,namespace2,assert,equals,as,list,22l,11l,state,get,state,set,current,namespace,namespace3,assert,equals,collections,singleton,list,44l,state,get,keyed,backend,set,current,key,def,state,set,current,namespace,namespace1,assert,equals,as,list,11l,44l,state,get,state,set,current,namespace,namespace3,assert,equals,as,list,22l,55l,33l,state,get,keyed,backend,set,current,key,jkl,state,set,current,namespace,namespace1,assert,equals,as,list,11l,22l,33l,44l,55l,state,get,keyed,backend,set,current,key,mno,state,set,current,namespace,namespace3,assert,equals,as,list,11l,22l,33l,44l,55l,state,get
HeapKeyedStateBackendSnapshotMigrationTest -> @Test 	public void testRestore1_2ToMaster() throws Exception;1517489695;[FLINK-5979]__This test takes a snapshot that was created with Flink 1.2 and tries to restore it in master to check_the backwards compatibility of the serialization format of {@link StateTable}s.;@Test_	public void testRestore1_2ToMaster() throws Exception {__		ClassLoader cl = getClass().getClassLoader()__		URL resource = cl.getResource("heap_keyed_statebackend_1_2.snapshot")___		Preconditions.checkNotNull(resource, "Binary snapshot resource not found!")___		final Integer namespace1 = 1__		final Integer namespace2 = 2__		final Integer namespace3 = 3___		try (final HeapKeyedStateBackend<String> keyedBackend = createKeyedBackend()) {_			final KeyGroupsStateHandle stateHandle__			try (BufferedInputStream bis = new BufferedInputStream((new FileInputStream(resource.getFile())))) {_				stateHandle = InstantiationUtil.deserializeObject(bis, Thread.currentThread().getContextClassLoader())__			}_			keyedBackend.restore(Collections.<KeyedStateHandle>singleton(stateHandle))__			final ListStateDescriptor<Long> stateDescr = new ListStateDescriptor<>("my-state", Long.class)__			stateDescr.initializeSerializerUnlessSet(new ExecutionConfig())___			InternalListState<Integer, Long> state = keyedBackend.createListState(IntSerializer.INSTANCE, stateDescr)___			assertEquals(7, keyedBackend.numStateEntries())___			keyedBackend.setCurrentKey("abc")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(33L, 55L), state.get())__			state.setCurrentNamespace(namespace2)__			assertEquals(asList(22L, 11L), state.get())__			state.setCurrentNamespace(namespace3)__			assertEquals(Collections.singletonList(44L), state.get())___			keyedBackend.setCurrentKey("def")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 44L), state.get())___			state.setCurrentNamespace(namespace3)__			assertEquals(asList(22L, 55L, 33L), state.get())___			keyedBackend.setCurrentKey("jkl")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())___			keyedBackend.setCurrentKey("mno")__			state.setCurrentNamespace(namespace3)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())__		}_	};flink,5979,this,test,takes,a,snapshot,that,was,created,with,flink,1,2,and,tries,to,restore,it,in,master,to,check,the,backwards,compatibility,of,the,serialization,format,of,link,state,table,s;test,public,void,throws,exception,class,loader,cl,get,class,get,class,loader,url,resource,cl,get,resource,snapshot,preconditions,check,not,null,resource,binary,snapshot,resource,not,found,final,integer,namespace1,1,final,integer,namespace2,2,final,integer,namespace3,3,try,final,heap,keyed,state,backend,string,keyed,backend,create,keyed,backend,final,key,groups,state,handle,state,handle,try,buffered,input,stream,bis,new,buffered,input,stream,new,file,input,stream,resource,get,file,state,handle,instantiation,util,deserialize,object,bis,thread,current,thread,get,context,class,loader,keyed,backend,restore,collections,keyed,state,handle,singleton,state,handle,final,list,state,descriptor,long,state,descr,new,list,state,descriptor,my,state,long,class,state,descr,initialize,serializer,unless,set,new,execution,config,internal,list,state,integer,long,state,keyed,backend,create,list,state,int,serializer,instance,state,descr,assert,equals,7,keyed,backend,num,state,entries,keyed,backend,set,current,key,abc,state,set,current,namespace,namespace1,assert,equals,as,list,33l,55l,state,get,state,set,current,namespace,namespace2,assert,equals,as,list,22l,11l,state,get,state,set,current,namespace,namespace3,assert,equals,collections,singleton,list,44l,state,get,keyed,backend,set,current,key,def,state,set,current,namespace,namespace1,assert,equals,as,list,11l,44l,state,get,state,set,current,namespace,namespace3,assert,equals,as,list,22l,55l,33l,state,get,keyed,backend,set,current,key,jkl,state,set,current,namespace,namespace1,assert,equals,as,list,11l,22l,33l,44l,55l,state,get,keyed,backend,set,current,key,mno,state,set,current,namespace,namespace3,assert,equals,as,list,11l,22l,33l,44l,55l,state,get
HeapKeyedStateBackendSnapshotMigrationTest -> @Test 	public void testRestore1_2ToMaster() throws Exception;1519568061;[FLINK-5979]__This test takes a snapshot that was created with Flink 1.2 and tries to restore it in master to check_the backwards compatibility of the serialization format of {@link StateTable}s.;@Test_	public void testRestore1_2ToMaster() throws Exception {__		ClassLoader cl = getClass().getClassLoader()__		URL resource = cl.getResource("heap_keyed_statebackend_1_2.snapshot")___		Preconditions.checkNotNull(resource, "Binary snapshot resource not found!")___		final Integer namespace1 = 1__		final Integer namespace2 = 2__		final Integer namespace3 = 3___		try (final HeapKeyedStateBackend<String> keyedBackend = createKeyedBackend()) {_			final KeyGroupsStateHandle stateHandle__			try (BufferedInputStream bis = new BufferedInputStream((new FileInputStream(resource.getFile())))) {_				stateHandle = InstantiationUtil.deserializeObject(bis, Thread.currentThread().getContextClassLoader())__			}_			keyedBackend.restore(StateObjectCollection.singleton(stateHandle))__			final ListStateDescriptor<Long> stateDescr = new ListStateDescriptor<>("my-state", Long.class)__			stateDescr.initializeSerializerUnlessSet(new ExecutionConfig())___			InternalListState<Integer, Long> state = keyedBackend.createListState(IntSerializer.INSTANCE, stateDescr)___			assertEquals(7, keyedBackend.numStateEntries())___			keyedBackend.setCurrentKey("abc")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(33L, 55L), state.get())__			state.setCurrentNamespace(namespace2)__			assertEquals(asList(22L, 11L), state.get())__			state.setCurrentNamespace(namespace3)__			assertEquals(Collections.singletonList(44L), state.get())___			keyedBackend.setCurrentKey("def")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 44L), state.get())___			state.setCurrentNamespace(namespace3)__			assertEquals(asList(22L, 55L, 33L), state.get())___			keyedBackend.setCurrentKey("jkl")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())___			keyedBackend.setCurrentKey("mno")__			state.setCurrentNamespace(namespace3)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())__		}_	};flink,5979,this,test,takes,a,snapshot,that,was,created,with,flink,1,2,and,tries,to,restore,it,in,master,to,check,the,backwards,compatibility,of,the,serialization,format,of,link,state,table,s;test,public,void,throws,exception,class,loader,cl,get,class,get,class,loader,url,resource,cl,get,resource,snapshot,preconditions,check,not,null,resource,binary,snapshot,resource,not,found,final,integer,namespace1,1,final,integer,namespace2,2,final,integer,namespace3,3,try,final,heap,keyed,state,backend,string,keyed,backend,create,keyed,backend,final,key,groups,state,handle,state,handle,try,buffered,input,stream,bis,new,buffered,input,stream,new,file,input,stream,resource,get,file,state,handle,instantiation,util,deserialize,object,bis,thread,current,thread,get,context,class,loader,keyed,backend,restore,state,object,collection,singleton,state,handle,final,list,state,descriptor,long,state,descr,new,list,state,descriptor,my,state,long,class,state,descr,initialize,serializer,unless,set,new,execution,config,internal,list,state,integer,long,state,keyed,backend,create,list,state,int,serializer,instance,state,descr,assert,equals,7,keyed,backend,num,state,entries,keyed,backend,set,current,key,abc,state,set,current,namespace,namespace1,assert,equals,as,list,33l,55l,state,get,state,set,current,namespace,namespace2,assert,equals,as,list,22l,11l,state,get,state,set,current,namespace,namespace3,assert,equals,collections,singleton,list,44l,state,get,keyed,backend,set,current,key,def,state,set,current,namespace,namespace1,assert,equals,as,list,11l,44l,state,get,state,set,current,namespace,namespace3,assert,equals,as,list,22l,55l,33l,state,get,keyed,backend,set,current,key,jkl,state,set,current,namespace,namespace1,assert,equals,as,list,11l,22l,33l,44l,55l,state,get,keyed,backend,set,current,key,mno,state,set,current,namespace,namespace3,assert,equals,as,list,11l,22l,33l,44l,55l,state,get
HeapKeyedStateBackendSnapshotMigrationTest -> @Test 	public void testRestore1_2ToMaster() throws Exception;1522337739;[FLINK-5979]__This test takes a snapshot that was created with Flink 1.2 and tries to restore it in master to check_the backwards compatibility of the serialization format of {@link StateTable}s.;@Test_	public void testRestore1_2ToMaster() throws Exception {__		ClassLoader cl = getClass().getClassLoader()__		URL resource = cl.getResource("heap_keyed_statebackend_1_2.snapshot")___		Preconditions.checkNotNull(resource, "Binary snapshot resource not found!")___		final Integer namespace1 = 1__		final Integer namespace2 = 2__		final Integer namespace3 = 3___		try (final HeapKeyedStateBackend<String> keyedBackend = createKeyedBackend()) {_			final KeyGroupsStateHandle stateHandle__			try (BufferedInputStream bis = new BufferedInputStream((new FileInputStream(resource.getFile())))) {_				stateHandle = InstantiationUtil.deserializeObject(bis, Thread.currentThread().getContextClassLoader())__			}_			keyedBackend.restore(StateObjectCollection.singleton(stateHandle))__			final ListStateDescriptor<Long> stateDescr = new ListStateDescriptor<>("my-state", Long.class)__			stateDescr.initializeSerializerUnlessSet(new ExecutionConfig())___			InternalListState<String, Integer, Long> state = keyedBackend.createListState(IntSerializer.INSTANCE, stateDescr)___			assertEquals(7, keyedBackend.numStateEntries())___			keyedBackend.setCurrentKey("abc")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(33L, 55L), state.get())__			state.setCurrentNamespace(namespace2)__			assertEquals(asList(22L, 11L), state.get())__			state.setCurrentNamespace(namespace3)__			assertEquals(Collections.singletonList(44L), state.get())___			keyedBackend.setCurrentKey("def")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 44L), state.get())___			state.setCurrentNamespace(namespace3)__			assertEquals(asList(22L, 55L, 33L), state.get())___			keyedBackend.setCurrentKey("jkl")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())___			keyedBackend.setCurrentKey("mno")__			state.setCurrentNamespace(namespace3)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())__		}_	};flink,5979,this,test,takes,a,snapshot,that,was,created,with,flink,1,2,and,tries,to,restore,it,in,master,to,check,the,backwards,compatibility,of,the,serialization,format,of,link,state,table,s;test,public,void,throws,exception,class,loader,cl,get,class,get,class,loader,url,resource,cl,get,resource,snapshot,preconditions,check,not,null,resource,binary,snapshot,resource,not,found,final,integer,namespace1,1,final,integer,namespace2,2,final,integer,namespace3,3,try,final,heap,keyed,state,backend,string,keyed,backend,create,keyed,backend,final,key,groups,state,handle,state,handle,try,buffered,input,stream,bis,new,buffered,input,stream,new,file,input,stream,resource,get,file,state,handle,instantiation,util,deserialize,object,bis,thread,current,thread,get,context,class,loader,keyed,backend,restore,state,object,collection,singleton,state,handle,final,list,state,descriptor,long,state,descr,new,list,state,descriptor,my,state,long,class,state,descr,initialize,serializer,unless,set,new,execution,config,internal,list,state,string,integer,long,state,keyed,backend,create,list,state,int,serializer,instance,state,descr,assert,equals,7,keyed,backend,num,state,entries,keyed,backend,set,current,key,abc,state,set,current,namespace,namespace1,assert,equals,as,list,33l,55l,state,get,state,set,current,namespace,namespace2,assert,equals,as,list,22l,11l,state,get,state,set,current,namespace,namespace3,assert,equals,collections,singleton,list,44l,state,get,keyed,backend,set,current,key,def,state,set,current,namespace,namespace1,assert,equals,as,list,11l,44l,state,get,state,set,current,namespace,namespace3,assert,equals,as,list,22l,55l,33l,state,get,keyed,backend,set,current,key,jkl,state,set,current,namespace,namespace1,assert,equals,as,list,11l,22l,33l,44l,55l,state,get,keyed,backend,set,current,key,mno,state,set,current,namespace,namespace3,assert,equals,as,list,11l,22l,33l,44l,55l,state,get
HeapKeyedStateBackendSnapshotMigrationTest -> @Test 	public void testRestore1_2ToMaster() throws Exception;1524760045;[FLINK-5979]__This test takes a snapshot that was created with Flink 1.2 and tries to restore it in master to check_the backwards compatibility of the serialization format of {@link StateTable}s.;@Test_	public void testRestore1_2ToMaster() throws Exception {__		ClassLoader cl = getClass().getClassLoader()__		URL resource = cl.getResource("heap_keyed_statebackend_1_2.snapshot")___		Preconditions.checkNotNull(resource, "Binary snapshot resource not found!")___		final Integer namespace1 = 1__		final Integer namespace2 = 2__		final Integer namespace3 = 3___		try (final HeapKeyedStateBackend<String> keyedBackend = createKeyedBackend()) {_			final KeyGroupsStateHandle stateHandle__			try (BufferedInputStream bis = new BufferedInputStream((new FileInputStream(resource.getFile())))) {_				stateHandle = InstantiationUtil.deserializeObject(bis, Thread.currentThread().getContextClassLoader())__			}_			keyedBackend.restore(StateObjectCollection.singleton(stateHandle))__			final ListStateDescriptor<Long> stateDescr = new ListStateDescriptor<>("my-state", Long.class)__			stateDescr.initializeSerializerUnlessSet(new ExecutionConfig())___			InternalListState<String, Integer, Long> state = keyedBackend.createListState(IntSerializer.INSTANCE, stateDescr)___			assertEquals(7, keyedBackend.numStateEntries())___			keyedBackend.setCurrentKey("abc")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(33L, 55L), state.get())__			state.setCurrentNamespace(namespace2)__			assertEquals(asList(22L, 11L), state.get())__			state.setCurrentNamespace(namespace3)__			assertEquals(Collections.singletonList(44L), state.get())___			keyedBackend.setCurrentKey("def")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 44L), state.get())___			state.setCurrentNamespace(namespace3)__			assertEquals(asList(22L, 55L, 33L), state.get())___			keyedBackend.setCurrentKey("jkl")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())___			keyedBackend.setCurrentKey("mno")__			state.setCurrentNamespace(namespace3)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())__		}_	};flink,5979,this,test,takes,a,snapshot,that,was,created,with,flink,1,2,and,tries,to,restore,it,in,master,to,check,the,backwards,compatibility,of,the,serialization,format,of,link,state,table,s;test,public,void,throws,exception,class,loader,cl,get,class,get,class,loader,url,resource,cl,get,resource,snapshot,preconditions,check,not,null,resource,binary,snapshot,resource,not,found,final,integer,namespace1,1,final,integer,namespace2,2,final,integer,namespace3,3,try,final,heap,keyed,state,backend,string,keyed,backend,create,keyed,backend,final,key,groups,state,handle,state,handle,try,buffered,input,stream,bis,new,buffered,input,stream,new,file,input,stream,resource,get,file,state,handle,instantiation,util,deserialize,object,bis,thread,current,thread,get,context,class,loader,keyed,backend,restore,state,object,collection,singleton,state,handle,final,list,state,descriptor,long,state,descr,new,list,state,descriptor,my,state,long,class,state,descr,initialize,serializer,unless,set,new,execution,config,internal,list,state,string,integer,long,state,keyed,backend,create,list,state,int,serializer,instance,state,descr,assert,equals,7,keyed,backend,num,state,entries,keyed,backend,set,current,key,abc,state,set,current,namespace,namespace1,assert,equals,as,list,33l,55l,state,get,state,set,current,namespace,namespace2,assert,equals,as,list,22l,11l,state,get,state,set,current,namespace,namespace3,assert,equals,collections,singleton,list,44l,state,get,keyed,backend,set,current,key,def,state,set,current,namespace,namespace1,assert,equals,as,list,11l,44l,state,get,state,set,current,namespace,namespace3,assert,equals,as,list,22l,55l,33l,state,get,keyed,backend,set,current,key,jkl,state,set,current,namespace,namespace1,assert,equals,as,list,11l,22l,33l,44l,55l,state,get,keyed,backend,set,current,key,mno,state,set,current,namespace,namespace3,assert,equals,as,list,11l,22l,33l,44l,55l,state,get
HeapKeyedStateBackendSnapshotMigrationTest -> @Test 	public void testRestore1_2ToMaster() throws Exception;1529325710;[FLINK-5979]__<p>This test takes a snapshot that was created with Flink 1.2 and tries to restore it in master to check_the backwards compatibility of the serialization format of {@link StateTable}s.;@Test_	public void testRestore1_2ToMaster() throws Exception {__		ClassLoader cl = getClass().getClassLoader()__		URL resource = cl.getResource("heap_keyed_statebackend_1_2.snapshot")___		Preconditions.checkNotNull(resource, "Binary snapshot resource not found!")___		final Integer namespace1 = 1__		final Integer namespace2 = 2__		final Integer namespace3 = 3___		try (final HeapKeyedStateBackend<String> keyedBackend = createKeyedBackend()) {_			final KeyGroupsStateHandle stateHandle__			try (BufferedInputStream bis = new BufferedInputStream((new FileInputStream(resource.getFile())))) {_				stateHandle = InstantiationUtil.deserializeObject(bis, Thread.currentThread().getContextClassLoader())__			}_			keyedBackend.restore(StateObjectCollection.singleton(stateHandle))__			final ListStateDescriptor<Long> stateDescr = new ListStateDescriptor<>("my-state", Long.class)__			stateDescr.initializeSerializerUnlessSet(new ExecutionConfig())___			InternalListState<String, Integer, Long> state = keyedBackend.createState(IntSerializer.INSTANCE, stateDescr)___			assertEquals(7, keyedBackend.numStateEntries())___			keyedBackend.setCurrentKey("abc")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(33L, 55L), state.get())__			state.setCurrentNamespace(namespace2)__			assertEquals(asList(22L, 11L), state.get())__			state.setCurrentNamespace(namespace3)__			assertEquals(Collections.singletonList(44L), state.get())___			keyedBackend.setCurrentKey("def")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 44L), state.get())___			state.setCurrentNamespace(namespace3)__			assertEquals(asList(22L, 55L, 33L), state.get())___			keyedBackend.setCurrentKey("jkl")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())___			keyedBackend.setCurrentKey("mno")__			state.setCurrentNamespace(namespace3)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())__		}_	};flink,5979,p,this,test,takes,a,snapshot,that,was,created,with,flink,1,2,and,tries,to,restore,it,in,master,to,check,the,backwards,compatibility,of,the,serialization,format,of,link,state,table,s;test,public,void,throws,exception,class,loader,cl,get,class,get,class,loader,url,resource,cl,get,resource,snapshot,preconditions,check,not,null,resource,binary,snapshot,resource,not,found,final,integer,namespace1,1,final,integer,namespace2,2,final,integer,namespace3,3,try,final,heap,keyed,state,backend,string,keyed,backend,create,keyed,backend,final,key,groups,state,handle,state,handle,try,buffered,input,stream,bis,new,buffered,input,stream,new,file,input,stream,resource,get,file,state,handle,instantiation,util,deserialize,object,bis,thread,current,thread,get,context,class,loader,keyed,backend,restore,state,object,collection,singleton,state,handle,final,list,state,descriptor,long,state,descr,new,list,state,descriptor,my,state,long,class,state,descr,initialize,serializer,unless,set,new,execution,config,internal,list,state,string,integer,long,state,keyed,backend,create,state,int,serializer,instance,state,descr,assert,equals,7,keyed,backend,num,state,entries,keyed,backend,set,current,key,abc,state,set,current,namespace,namespace1,assert,equals,as,list,33l,55l,state,get,state,set,current,namespace,namespace2,assert,equals,as,list,22l,11l,state,get,state,set,current,namespace,namespace3,assert,equals,collections,singleton,list,44l,state,get,keyed,backend,set,current,key,def,state,set,current,namespace,namespace1,assert,equals,as,list,11l,44l,state,get,state,set,current,namespace,namespace3,assert,equals,as,list,22l,55l,33l,state,get,keyed,backend,set,current,key,jkl,state,set,current,namespace,namespace1,assert,equals,as,list,11l,22l,33l,44l,55l,state,get,keyed,backend,set,current,key,mno,state,set,current,namespace,namespace3,assert,equals,as,list,11l,22l,33l,44l,55l,state,get
HeapKeyedStateBackendSnapshotMigrationTest -> @Test 	public void testRestore1_2ToMaster() throws Exception;1531419503;[FLINK-5979]__<p>This test takes a snapshot that was created with Flink 1.2 and tries to restore it in master to check_the backwards compatibility of the serialization format of {@link StateTable}s.;@Test_	public void testRestore1_2ToMaster() throws Exception {__		ClassLoader cl = getClass().getClassLoader()__		URL resource = cl.getResource("heap_keyed_statebackend_1_2.snapshot")___		Preconditions.checkNotNull(resource, "Binary snapshot resource not found!")___		final Integer namespace1 = 1__		final Integer namespace2 = 2__		final Integer namespace3 = 3___		try (final HeapKeyedStateBackend<String> keyedBackend = createKeyedBackend()) {_			final KeyGroupsStateHandle stateHandle__			try (BufferedInputStream bis = new BufferedInputStream((new FileInputStream(resource.getFile())))) {_				stateHandle = InstantiationUtil.deserializeObject(bis, Thread.currentThread().getContextClassLoader())__			}_			keyedBackend.restore(StateObjectCollection.singleton(stateHandle))__			final ListStateDescriptor<Long> stateDescr = new ListStateDescriptor<>("my-state", Long.class)__			stateDescr.initializeSerializerUnlessSet(new ExecutionConfig())___			InternalListState<String, Integer, Long> state = keyedBackend.createInternalState(IntSerializer.INSTANCE, stateDescr)___			assertEquals(7, keyedBackend.numStateEntries())___			keyedBackend.setCurrentKey("abc")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(33L, 55L), state.get())__			state.setCurrentNamespace(namespace2)__			assertEquals(asList(22L, 11L), state.get())__			state.setCurrentNamespace(namespace3)__			assertEquals(Collections.singletonList(44L), state.get())___			keyedBackend.setCurrentKey("def")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 44L), state.get())___			state.setCurrentNamespace(namespace3)__			assertEquals(asList(22L, 55L, 33L), state.get())___			keyedBackend.setCurrentKey("jkl")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())___			keyedBackend.setCurrentKey("mno")__			state.setCurrentNamespace(namespace3)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())__		}_	};flink,5979,p,this,test,takes,a,snapshot,that,was,created,with,flink,1,2,and,tries,to,restore,it,in,master,to,check,the,backwards,compatibility,of,the,serialization,format,of,link,state,table,s;test,public,void,throws,exception,class,loader,cl,get,class,get,class,loader,url,resource,cl,get,resource,snapshot,preconditions,check,not,null,resource,binary,snapshot,resource,not,found,final,integer,namespace1,1,final,integer,namespace2,2,final,integer,namespace3,3,try,final,heap,keyed,state,backend,string,keyed,backend,create,keyed,backend,final,key,groups,state,handle,state,handle,try,buffered,input,stream,bis,new,buffered,input,stream,new,file,input,stream,resource,get,file,state,handle,instantiation,util,deserialize,object,bis,thread,current,thread,get,context,class,loader,keyed,backend,restore,state,object,collection,singleton,state,handle,final,list,state,descriptor,long,state,descr,new,list,state,descriptor,my,state,long,class,state,descr,initialize,serializer,unless,set,new,execution,config,internal,list,state,string,integer,long,state,keyed,backend,create,internal,state,int,serializer,instance,state,descr,assert,equals,7,keyed,backend,num,state,entries,keyed,backend,set,current,key,abc,state,set,current,namespace,namespace1,assert,equals,as,list,33l,55l,state,get,state,set,current,namespace,namespace2,assert,equals,as,list,22l,11l,state,get,state,set,current,namespace,namespace3,assert,equals,collections,singleton,list,44l,state,get,keyed,backend,set,current,key,def,state,set,current,namespace,namespace1,assert,equals,as,list,11l,44l,state,get,state,set,current,namespace,namespace3,assert,equals,as,list,22l,55l,33l,state,get,keyed,backend,set,current,key,jkl,state,set,current,namespace,namespace1,assert,equals,as,list,11l,22l,33l,44l,55l,state,get,keyed,backend,set,current,key,mno,state,set,current,namespace,namespace3,assert,equals,as,list,11l,22l,33l,44l,55l,state,get
HeapKeyedStateBackendSnapshotMigrationTest -> @Test 	public void testRestore1_2ToMaster() throws Exception;1533224436;[FLINK-5979]__<p>This test takes a snapshot that was created with Flink 1.2 and tries to restore it in master to check_the backwards compatibility of the serialization format of {@link StateTable}s.;@Test_	public void testRestore1_2ToMaster() throws Exception {__		ClassLoader cl = getClass().getClassLoader()__		URL resource = cl.getResource("heap_keyed_statebackend_1_2.snapshot")___		Preconditions.checkNotNull(resource, "Binary snapshot resource not found!")___		final Integer namespace1 = 1__		final Integer namespace2 = 2__		final Integer namespace3 = 3___		try (final HeapKeyedStateBackend<String> keyedBackend = createKeyedBackend()) {_			final KeyGroupsStateHandle stateHandle__			try (BufferedInputStream bis = new BufferedInputStream((new FileInputStream(resource.getFile())))) {_				stateHandle = InstantiationUtil.deserializeObject(bis, Thread.currentThread().getContextClassLoader())__			}_			keyedBackend.restore(StateObjectCollection.singleton(stateHandle))__			final ListStateDescriptor<Long> stateDescr = new ListStateDescriptor<>("my-state", Long.class)__			stateDescr.initializeSerializerUnlessSet(new ExecutionConfig())___			InternalListState<String, Integer, Long> state = keyedBackend.createInternalState(IntSerializer.INSTANCE, stateDescr)___			assertEquals(7, keyedBackend.numKeyValueStateEntries())___			keyedBackend.setCurrentKey("abc")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(33L, 55L), state.get())__			state.setCurrentNamespace(namespace2)__			assertEquals(asList(22L, 11L), state.get())__			state.setCurrentNamespace(namespace3)__			assertEquals(Collections.singletonList(44L), state.get())___			keyedBackend.setCurrentKey("def")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 44L), state.get())___			state.setCurrentNamespace(namespace3)__			assertEquals(asList(22L, 55L, 33L), state.get())___			keyedBackend.setCurrentKey("jkl")__			state.setCurrentNamespace(namespace1)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())___			keyedBackend.setCurrentKey("mno")__			state.setCurrentNamespace(namespace3)__			assertEquals(asList(11L, 22L, 33L, 44L, 55L), state.get())__		}_	};flink,5979,p,this,test,takes,a,snapshot,that,was,created,with,flink,1,2,and,tries,to,restore,it,in,master,to,check,the,backwards,compatibility,of,the,serialization,format,of,link,state,table,s;test,public,void,throws,exception,class,loader,cl,get,class,get,class,loader,url,resource,cl,get,resource,snapshot,preconditions,check,not,null,resource,binary,snapshot,resource,not,found,final,integer,namespace1,1,final,integer,namespace2,2,final,integer,namespace3,3,try,final,heap,keyed,state,backend,string,keyed,backend,create,keyed,backend,final,key,groups,state,handle,state,handle,try,buffered,input,stream,bis,new,buffered,input,stream,new,file,input,stream,resource,get,file,state,handle,instantiation,util,deserialize,object,bis,thread,current,thread,get,context,class,loader,keyed,backend,restore,state,object,collection,singleton,state,handle,final,list,state,descriptor,long,state,descr,new,list,state,descriptor,my,state,long,class,state,descr,initialize,serializer,unless,set,new,execution,config,internal,list,state,string,integer,long,state,keyed,backend,create,internal,state,int,serializer,instance,state,descr,assert,equals,7,keyed,backend,num,key,value,state,entries,keyed,backend,set,current,key,abc,state,set,current,namespace,namespace1,assert,equals,as,list,33l,55l,state,get,state,set,current,namespace,namespace2,assert,equals,as,list,22l,11l,state,get,state,set,current,namespace,namespace3,assert,equals,collections,singleton,list,44l,state,get,keyed,backend,set,current,key,def,state,set,current,namespace,namespace1,assert,equals,as,list,11l,44l,state,get,state,set,current,namespace,namespace3,assert,equals,as,list,22l,55l,33l,state,get,keyed,backend,set,current,key,jkl,state,set,current,namespace,namespace1,assert,equals,as,list,11l,22l,33l,44l,55l,state,get,keyed,backend,set,current,key,mno,state,set,current,namespace,namespace3,assert,equals,as,list,11l,22l,33l,44l,55l,state,get
