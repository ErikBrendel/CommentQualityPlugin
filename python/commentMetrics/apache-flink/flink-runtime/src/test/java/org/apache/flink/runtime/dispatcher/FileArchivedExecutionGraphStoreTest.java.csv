# id;timestamp;commentText;codeText;commentWords;codeWords
FileArchivedExecutionGraphStoreTest -> @Test 	public void testExecutionGraphExpiration() throws Exception;1516971011;Tests that an expired execution graph is removed from the execution graph store.;@Test_	public void testExecutionGraphExpiration() throws Exception {_		final File rootDir = temporaryFolder.newFolder()___		final Time expirationTime = Time.milliseconds(1L)___		final ManuallyTriggeredScheduledExecutor scheduledExecutor = new ManuallyTriggeredScheduledExecutor()___		final ManualTicker manualTicker = new ManualTicker()___		try (final FileArchivedExecutionGraphStore executionGraphStore = new FileArchivedExecutionGraphStore(_			rootDir,_			expirationTime,_			10000L,_			scheduledExecutor,_			manualTicker)) {__			final ArchivedExecutionGraph executionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build()___			executionGraphStore.put(executionGraph)___			_			assertThat(executionGraphStore.size(), Matchers.equalTo(1))___			manualTicker.advanceTime(expirationTime.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			scheduledExecutor.triggerScheduledTasks()___			assertThat(executionGraphStore.size(), Matchers.equalTo(0))___			assertThat(executionGraphStore.get(executionGraph.getJobID()), Matchers.nullValue())___			final File storageDirectory = executionGraphStore.getStorageDir()___			_			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(0))__		}_	};tests,that,an,expired,execution,graph,is,removed,from,the,execution,graph,store;test,public,void,test,execution,graph,expiration,throws,exception,final,file,root,dir,temporary,folder,new,folder,final,time,expiration,time,time,milliseconds,1l,final,manually,triggered,scheduled,executor,scheduled,executor,new,manually,triggered,scheduled,executor,final,manual,ticker,manual,ticker,new,manual,ticker,try,final,file,archived,execution,graph,store,execution,graph,store,new,file,archived,execution,graph,store,root,dir,expiration,time,10000l,scheduled,executor,manual,ticker,final,archived,execution,graph,execution,graph,new,archived,execution,graph,builder,set,state,job,status,finished,build,execution,graph,store,put,execution,graph,assert,that,execution,graph,store,size,matchers,equal,to,1,manual,ticker,advance,time,expiration,time,to,milliseconds,time,unit,milliseconds,scheduled,executor,trigger,scheduled,tasks,assert,that,execution,graph,store,size,matchers,equal,to,0,assert,that,execution,graph,store,get,execution,graph,get,job,id,matchers,null,value,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,0
FileArchivedExecutionGraphStoreTest -> @Test 	public void testExecutionGraphExpiration() throws Exception;1522681180;Tests that an expired execution graph is removed from the execution graph store.;@Test_	public void testExecutionGraphExpiration() throws Exception {_		final File rootDir = temporaryFolder.newFolder()___		final Time expirationTime = Time.milliseconds(1L)___		final ManuallyTriggeredScheduledExecutor scheduledExecutor = new ManuallyTriggeredScheduledExecutor()___		final ManualTicker manualTicker = new ManualTicker()___		try (final FileArchivedExecutionGraphStore executionGraphStore = new FileArchivedExecutionGraphStore(_			rootDir,_			expirationTime,_			10000L,_			scheduledExecutor,_			manualTicker)) {__			final ArchivedExecutionGraph executionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build()___			executionGraphStore.put(executionGraph)___			_			assertThat(executionGraphStore.size(), Matchers.equalTo(1))___			manualTicker.advanceTime(expirationTime.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			scheduledExecutor.triggerScheduledTasks()___			assertThat(executionGraphStore.size(), Matchers.equalTo(0))___			assertThat(executionGraphStore.get(executionGraph.getJobID()), Matchers.nullValue())___			final File storageDirectory = executionGraphStore.getStorageDir()___			_			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(0))__		}_	};tests,that,an,expired,execution,graph,is,removed,from,the,execution,graph,store;test,public,void,test,execution,graph,expiration,throws,exception,final,file,root,dir,temporary,folder,new,folder,final,time,expiration,time,time,milliseconds,1l,final,manually,triggered,scheduled,executor,scheduled,executor,new,manually,triggered,scheduled,executor,final,manual,ticker,manual,ticker,new,manual,ticker,try,final,file,archived,execution,graph,store,execution,graph,store,new,file,archived,execution,graph,store,root,dir,expiration,time,10000l,scheduled,executor,manual,ticker,final,archived,execution,graph,execution,graph,new,archived,execution,graph,builder,set,state,job,status,finished,build,execution,graph,store,put,execution,graph,assert,that,execution,graph,store,size,matchers,equal,to,1,manual,ticker,advance,time,expiration,time,to,milliseconds,time,unit,milliseconds,scheduled,executor,trigger,scheduled,tasks,assert,that,execution,graph,store,size,matchers,equal,to,0,assert,that,execution,graph,store,get,execution,graph,get,job,id,matchers,null,value,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,0
FileArchivedExecutionGraphStoreTest -> @Test 	public void testExecutionGraphExpiration() throws Exception;1526494919;Tests that an expired execution graph is removed from the execution graph store.;@Test_	public void testExecutionGraphExpiration() throws Exception {_		final File rootDir = temporaryFolder.newFolder()___		final Time expirationTime = Time.milliseconds(1L)___		final ManuallyTriggeredScheduledExecutor scheduledExecutor = new ManuallyTriggeredScheduledExecutor()___		final ManualTicker manualTicker = new ManualTicker()___		try (final FileArchivedExecutionGraphStore executionGraphStore = new FileArchivedExecutionGraphStore(_			rootDir,_			expirationTime,_			10000L,_			scheduledExecutor,_			manualTicker)) {__			final ArchivedExecutionGraph executionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build()___			executionGraphStore.put(executionGraph)___			_			assertThat(executionGraphStore.size(), Matchers.equalTo(1))___			manualTicker.advanceTime(expirationTime.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			scheduledExecutor.triggerScheduledTasks()___			assertThat(executionGraphStore.size(), Matchers.equalTo(0))___			assertThat(executionGraphStore.get(executionGraph.getJobID()), Matchers.nullValue())___			final File storageDirectory = executionGraphStore.getStorageDir()___			_			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(0))__		}_	};tests,that,an,expired,execution,graph,is,removed,from,the,execution,graph,store;test,public,void,test,execution,graph,expiration,throws,exception,final,file,root,dir,temporary,folder,new,folder,final,time,expiration,time,time,milliseconds,1l,final,manually,triggered,scheduled,executor,scheduled,executor,new,manually,triggered,scheduled,executor,final,manual,ticker,manual,ticker,new,manual,ticker,try,final,file,archived,execution,graph,store,execution,graph,store,new,file,archived,execution,graph,store,root,dir,expiration,time,10000l,scheduled,executor,manual,ticker,final,archived,execution,graph,execution,graph,new,archived,execution,graph,builder,set,state,job,status,finished,build,execution,graph,store,put,execution,graph,assert,that,execution,graph,store,size,matchers,equal,to,1,manual,ticker,advance,time,expiration,time,to,milliseconds,time,unit,milliseconds,scheduled,executor,trigger,scheduled,tasks,assert,that,execution,graph,store,size,matchers,equal,to,0,assert,that,execution,graph,store,get,execution,graph,get,job,id,matchers,null,value,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,0
FileArchivedExecutionGraphStoreTest -> @Test 	public void testExecutionGraphExpiration() throws Exception;1539934386;Tests that an expired execution graph is removed from the execution graph store.;@Test_	public void testExecutionGraphExpiration() throws Exception {_		final File rootDir = temporaryFolder.newFolder()___		final Time expirationTime = Time.milliseconds(1L)___		final ManuallyTriggeredScheduledExecutor scheduledExecutor = new ManuallyTriggeredScheduledExecutor()___		final ManualTicker manualTicker = new ManualTicker()___		try (final FileArchivedExecutionGraphStore executionGraphStore = new FileArchivedExecutionGraphStore(_			rootDir,_			expirationTime,_			10000L,_			scheduledExecutor,_			manualTicker)) {__			final ArchivedExecutionGraph executionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build()___			executionGraphStore.put(executionGraph)___			_			assertThat(executionGraphStore.size(), Matchers.equalTo(1))___			manualTicker.advanceTime(expirationTime.toMilliseconds(), TimeUnit.MILLISECONDS)___			_			scheduledExecutor.triggerScheduledTasks()___			assertThat(executionGraphStore.size(), Matchers.equalTo(0))___			assertThat(executionGraphStore.get(executionGraph.getJobID()), Matchers.nullValue())___			final File storageDirectory = executionGraphStore.getStorageDir()___			_			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(0))__		}_	};tests,that,an,expired,execution,graph,is,removed,from,the,execution,graph,store;test,public,void,test,execution,graph,expiration,throws,exception,final,file,root,dir,temporary,folder,new,folder,final,time,expiration,time,time,milliseconds,1l,final,manually,triggered,scheduled,executor,scheduled,executor,new,manually,triggered,scheduled,executor,final,manual,ticker,manual,ticker,new,manual,ticker,try,final,file,archived,execution,graph,store,execution,graph,store,new,file,archived,execution,graph,store,root,dir,expiration,time,10000l,scheduled,executor,manual,ticker,final,archived,execution,graph,execution,graph,new,archived,execution,graph,builder,set,state,job,status,finished,build,execution,graph,store,put,execution,graph,assert,that,execution,graph,store,size,matchers,equal,to,1,manual,ticker,advance,time,expiration,time,to,milliseconds,time,unit,milliseconds,scheduled,executor,trigger,scheduled,tasks,assert,that,execution,graph,store,size,matchers,equal,to,0,assert,that,execution,graph,store,get,execution,graph,get,job,id,matchers,null,value,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,0
FileArchivedExecutionGraphStoreTest -> @Test 	public void testStoredJobsOverview() throws IOException;1516971011;Tests that we obtain the correct jobs overview.;@Test_	public void testStoredJobsOverview() throws IOException {_		final int numberExecutionGraphs = 10__		final Collection<ArchivedExecutionGraph> executionGraphs = generateTerminalExecutionGraphs(numberExecutionGraphs)___		final List<JobStatus> jobStatuses = executionGraphs.stream().map(ArchivedExecutionGraph::getState).collect(Collectors.toList())___		final JobsOverview expectedJobsOverview = JobsOverview.create(jobStatuses)___		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {_			for (ArchivedExecutionGraph executionGraph : executionGraphs) {_				executionGraphStore.put(executionGraph)__			}__			assertThat(executionGraphStore.getStoredJobsOverview(), Matchers.equalTo(expectedJobsOverview))__		}_	};tests,that,we,obtain,the,correct,jobs,overview;test,public,void,test,stored,jobs,overview,throws,ioexception,final,int,number,execution,graphs,10,final,collection,archived,execution,graph,execution,graphs,generate,terminal,execution,graphs,number,execution,graphs,final,list,job,status,job,statuses,execution,graphs,stream,map,archived,execution,graph,get,state,collect,collectors,to,list,final,jobs,overview,expected,jobs,overview,jobs,overview,create,job,statuses,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,for,archived,execution,graph,execution,graph,execution,graphs,execution,graph,store,put,execution,graph,assert,that,execution,graph,store,get,stored,jobs,overview,matchers,equal,to,expected,jobs,overview
FileArchivedExecutionGraphStoreTest -> @Test 	public void testStoredJobsOverview() throws IOException;1522681180;Tests that we obtain the correct jobs overview.;@Test_	public void testStoredJobsOverview() throws IOException {_		final int numberExecutionGraphs = 10__		final Collection<ArchivedExecutionGraph> executionGraphs = generateTerminalExecutionGraphs(numberExecutionGraphs)___		final List<JobStatus> jobStatuses = executionGraphs.stream().map(ArchivedExecutionGraph::getState).collect(Collectors.toList())___		final JobsOverview expectedJobsOverview = JobsOverview.create(jobStatuses)___		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {_			for (ArchivedExecutionGraph executionGraph : executionGraphs) {_				executionGraphStore.put(executionGraph)__			}__			assertThat(executionGraphStore.getStoredJobsOverview(), Matchers.equalTo(expectedJobsOverview))__		}_	};tests,that,we,obtain,the,correct,jobs,overview;test,public,void,test,stored,jobs,overview,throws,ioexception,final,int,number,execution,graphs,10,final,collection,archived,execution,graph,execution,graphs,generate,terminal,execution,graphs,number,execution,graphs,final,list,job,status,job,statuses,execution,graphs,stream,map,archived,execution,graph,get,state,collect,collectors,to,list,final,jobs,overview,expected,jobs,overview,jobs,overview,create,job,statuses,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,for,archived,execution,graph,execution,graph,execution,graphs,execution,graph,store,put,execution,graph,assert,that,execution,graph,store,get,stored,jobs,overview,matchers,equal,to,expected,jobs,overview
FileArchivedExecutionGraphStoreTest -> @Test 	public void testStoredJobsOverview() throws IOException;1526494919;Tests that we obtain the correct jobs overview.;@Test_	public void testStoredJobsOverview() throws IOException {_		final int numberExecutionGraphs = 10__		final Collection<ArchivedExecutionGraph> executionGraphs = generateTerminalExecutionGraphs(numberExecutionGraphs)___		final List<JobStatus> jobStatuses = executionGraphs.stream().map(ArchivedExecutionGraph::getState).collect(Collectors.toList())___		final JobsOverview expectedJobsOverview = JobsOverview.create(jobStatuses)___		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {_			for (ArchivedExecutionGraph executionGraph : executionGraphs) {_				executionGraphStore.put(executionGraph)__			}__			assertThat(executionGraphStore.getStoredJobsOverview(), Matchers.equalTo(expectedJobsOverview))__		}_	};tests,that,we,obtain,the,correct,jobs,overview;test,public,void,test,stored,jobs,overview,throws,ioexception,final,int,number,execution,graphs,10,final,collection,archived,execution,graph,execution,graphs,generate,terminal,execution,graphs,number,execution,graphs,final,list,job,status,job,statuses,execution,graphs,stream,map,archived,execution,graph,get,state,collect,collectors,to,list,final,jobs,overview,expected,jobs,overview,jobs,overview,create,job,statuses,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,for,archived,execution,graph,execution,graph,execution,graphs,execution,graph,store,put,execution,graph,assert,that,execution,graph,store,get,stored,jobs,overview,matchers,equal,to,expected,jobs,overview
FileArchivedExecutionGraphStoreTest -> @Test 	public void testStoredJobsOverview() throws IOException;1539934386;Tests that we obtain the correct jobs overview.;@Test_	public void testStoredJobsOverview() throws IOException {_		final int numberExecutionGraphs = 10__		final Collection<ArchivedExecutionGraph> executionGraphs = generateTerminalExecutionGraphs(numberExecutionGraphs)___		final List<JobStatus> jobStatuses = executionGraphs.stream().map(ArchivedExecutionGraph::getState).collect(Collectors.toList())___		final JobsOverview expectedJobsOverview = JobsOverview.create(jobStatuses)___		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {_			for (ArchivedExecutionGraph executionGraph : executionGraphs) {_				executionGraphStore.put(executionGraph)__			}__			assertThat(executionGraphStore.getStoredJobsOverview(), Matchers.equalTo(expectedJobsOverview))__		}_	};tests,that,we,obtain,the,correct,jobs,overview;test,public,void,test,stored,jobs,overview,throws,ioexception,final,int,number,execution,graphs,10,final,collection,archived,execution,graph,execution,graphs,generate,terminal,execution,graphs,number,execution,graphs,final,list,job,status,job,statuses,execution,graphs,stream,map,archived,execution,graph,get,state,collect,collectors,to,list,final,jobs,overview,expected,jobs,overview,jobs,overview,create,job,statuses,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,for,archived,execution,graph,execution,graph,execution,graphs,execution,graph,store,put,execution,graph,assert,that,execution,graph,store,get,stored,jobs,overview,matchers,equal,to,expected,jobs,overview
FileArchivedExecutionGraphStoreTest -> @Test 	public void testUnknownGet() throws IOException;1516971011;Tests that null is returned if we request an unknown JobID.;@Test_	public void testUnknownGet() throws IOException {_		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {_			assertThat(executionGraphStore.get(new JobID()), Matchers.nullValue())__		}_	};tests,that,null,is,returned,if,we,request,an,unknown,job,id;test,public,void,test,unknown,get,throws,ioexception,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,assert,that,execution,graph,store,get,new,job,id,matchers,null,value
FileArchivedExecutionGraphStoreTest -> @Test 	public void testUnknownGet() throws IOException;1522681180;Tests that null is returned if we request an unknown JobID.;@Test_	public void testUnknownGet() throws IOException {_		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {_			assertThat(executionGraphStore.get(new JobID()), Matchers.nullValue())__		}_	};tests,that,null,is,returned,if,we,request,an,unknown,job,id;test,public,void,test,unknown,get,throws,ioexception,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,assert,that,execution,graph,store,get,new,job,id,matchers,null,value
FileArchivedExecutionGraphStoreTest -> @Test 	public void testUnknownGet() throws IOException;1526494919;Tests that null is returned if we request an unknown JobID.;@Test_	public void testUnknownGet() throws IOException {_		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {_			assertThat(executionGraphStore.get(new JobID()), Matchers.nullValue())__		}_	};tests,that,null,is,returned,if,we,request,an,unknown,job,id;test,public,void,test,unknown,get,throws,ioexception,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,assert,that,execution,graph,store,get,new,job,id,matchers,null,value
FileArchivedExecutionGraphStoreTest -> @Test 	public void testUnknownGet() throws IOException;1539934386;Tests that null is returned if we request an unknown JobID.;@Test_	public void testUnknownGet() throws IOException {_		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {_			assertThat(executionGraphStore.get(new JobID()), Matchers.nullValue())__		}_	};tests,that,null,is,returned,if,we,request,an,unknown,job,id;test,public,void,test,unknown,get,throws,ioexception,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,assert,that,execution,graph,store,get,new,job,id,matchers,null,value
FileArchivedExecutionGraphStoreTest -> @Test 	public void testCacheLoading() throws IOException;1516971011;Tests that evicted {@link ArchivedExecutionGraph} are loaded from disk again.;@Test_	public void testCacheLoading() throws IOException {_		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = new FileArchivedExecutionGraphStore(_			rootDir,_			Time.hours(1L),_			100L << 10,_			TestingUtils.defaultScheduledExecutor(),_			Ticker.systemTicker())) {__			final LoadingCache<JobID, ArchivedExecutionGraph> executionGraphCache = executionGraphStore.getArchivedExecutionGraphCache()___			Collection<ArchivedExecutionGraph> executionGraphs = new ArrayList<>(64)___			boolean continueInserting = true___			_			while (continueInserting) {_				_				final ArchivedExecutionGraph executionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build()___				executionGraphStore.put(executionGraph)___				executionGraphs.add(executionGraph)___				continueInserting = executionGraphCache.size() == executionGraphs.size()__			}__			final File storageDirectory = executionGraphStore.getStorageDir()___			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(executionGraphs.size()))___			for (ArchivedExecutionGraph executionGraph : executionGraphs) {_				assertThat(executionGraphStore.get(executionGraph.getJobID()), matchesPartiallyWith(executionGraph))__			}_		}_	};tests,that,evicted,link,archived,execution,graph,are,loaded,from,disk,again;test,public,void,test,cache,loading,throws,ioexception,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,new,file,archived,execution,graph,store,root,dir,time,hours,1l,100l,10,testing,utils,default,scheduled,executor,ticker,system,ticker,final,loading,cache,job,id,archived,execution,graph,execution,graph,cache,execution,graph,store,get,archived,execution,graph,cache,collection,archived,execution,graph,execution,graphs,new,array,list,64,boolean,continue,inserting,true,while,continue,inserting,final,archived,execution,graph,execution,graph,new,archived,execution,graph,builder,set,state,job,status,finished,build,execution,graph,store,put,execution,graph,execution,graphs,add,execution,graph,continue,inserting,execution,graph,cache,size,execution,graphs,size,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,execution,graphs,size,for,archived,execution,graph,execution,graph,execution,graphs,assert,that,execution,graph,store,get,execution,graph,get,job,id,matches,partially,with,execution,graph
FileArchivedExecutionGraphStoreTest -> @Test 	public void testCacheLoading() throws IOException;1522681180;Tests that evicted {@link ArchivedExecutionGraph} are loaded from disk again.;@Test_	public void testCacheLoading() throws IOException {_		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = new FileArchivedExecutionGraphStore(_			rootDir,_			Time.hours(1L),_			100L << 10,_			TestingUtils.defaultScheduledExecutor(),_			Ticker.systemTicker())) {__			final LoadingCache<JobID, ArchivedExecutionGraph> executionGraphCache = executionGraphStore.getArchivedExecutionGraphCache()___			Collection<ArchivedExecutionGraph> executionGraphs = new ArrayList<>(64)___			boolean continueInserting = true___			_			while (continueInserting) {_				_				final ArchivedExecutionGraph executionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build()___				executionGraphStore.put(executionGraph)___				executionGraphs.add(executionGraph)___				continueInserting = executionGraphCache.size() == executionGraphs.size()__			}__			final File storageDirectory = executionGraphStore.getStorageDir()___			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(executionGraphs.size()))___			for (ArchivedExecutionGraph executionGraph : executionGraphs) {_				assertThat(executionGraphStore.get(executionGraph.getJobID()), matchesPartiallyWith(executionGraph))__			}_		}_	};tests,that,evicted,link,archived,execution,graph,are,loaded,from,disk,again;test,public,void,test,cache,loading,throws,ioexception,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,new,file,archived,execution,graph,store,root,dir,time,hours,1l,100l,10,testing,utils,default,scheduled,executor,ticker,system,ticker,final,loading,cache,job,id,archived,execution,graph,execution,graph,cache,execution,graph,store,get,archived,execution,graph,cache,collection,archived,execution,graph,execution,graphs,new,array,list,64,boolean,continue,inserting,true,while,continue,inserting,final,archived,execution,graph,execution,graph,new,archived,execution,graph,builder,set,state,job,status,finished,build,execution,graph,store,put,execution,graph,execution,graphs,add,execution,graph,continue,inserting,execution,graph,cache,size,execution,graphs,size,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,execution,graphs,size,for,archived,execution,graph,execution,graph,execution,graphs,assert,that,execution,graph,store,get,execution,graph,get,job,id,matches,partially,with,execution,graph
FileArchivedExecutionGraphStoreTest -> @Test 	public void testCacheLoading() throws IOException;1526494919;Tests that evicted {@link ArchivedExecutionGraph} are loaded from disk again.;@Test_	public void testCacheLoading() throws IOException {_		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = new FileArchivedExecutionGraphStore(_			rootDir,_			Time.hours(1L),_			100L << 10,_			TestingUtils.defaultScheduledExecutor(),_			Ticker.systemTicker())) {__			final LoadingCache<JobID, ArchivedExecutionGraph> executionGraphCache = executionGraphStore.getArchivedExecutionGraphCache()___			Collection<ArchivedExecutionGraph> executionGraphs = new ArrayList<>(64)___			boolean continueInserting = true___			_			while (continueInserting) {_				_				final ArchivedExecutionGraph executionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build()___				executionGraphStore.put(executionGraph)___				executionGraphs.add(executionGraph)___				continueInserting = executionGraphCache.size() == executionGraphs.size()__			}__			final File storageDirectory = executionGraphStore.getStorageDir()___			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(executionGraphs.size()))___			for (ArchivedExecutionGraph executionGraph : executionGraphs) {_				assertThat(executionGraphStore.get(executionGraph.getJobID()), matchesPartiallyWith(executionGraph))__			}_		}_	};tests,that,evicted,link,archived,execution,graph,are,loaded,from,disk,again;test,public,void,test,cache,loading,throws,ioexception,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,new,file,archived,execution,graph,store,root,dir,time,hours,1l,100l,10,testing,utils,default,scheduled,executor,ticker,system,ticker,final,loading,cache,job,id,archived,execution,graph,execution,graph,cache,execution,graph,store,get,archived,execution,graph,cache,collection,archived,execution,graph,execution,graphs,new,array,list,64,boolean,continue,inserting,true,while,continue,inserting,final,archived,execution,graph,execution,graph,new,archived,execution,graph,builder,set,state,job,status,finished,build,execution,graph,store,put,execution,graph,execution,graphs,add,execution,graph,continue,inserting,execution,graph,cache,size,execution,graphs,size,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,execution,graphs,size,for,archived,execution,graph,execution,graph,execution,graphs,assert,that,execution,graph,store,get,execution,graph,get,job,id,matches,partially,with,execution,graph
FileArchivedExecutionGraphStoreTest -> @Test 	public void testCacheLoading() throws IOException;1539934386;Tests that evicted {@link ArchivedExecutionGraph} are loaded from disk again.;@Test_	public void testCacheLoading() throws IOException {_		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = new FileArchivedExecutionGraphStore(_			rootDir,_			Time.hours(1L),_			100L << 10,_			TestingUtils.defaultScheduledExecutor(),_			Ticker.systemTicker())) {__			final LoadingCache<JobID, ArchivedExecutionGraph> executionGraphCache = executionGraphStore.getArchivedExecutionGraphCache()___			Collection<ArchivedExecutionGraph> executionGraphs = new ArrayList<>(64)___			boolean continueInserting = true___			_			while (continueInserting) {_				_				final ArchivedExecutionGraph executionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build()___				executionGraphStore.put(executionGraph)___				executionGraphs.add(executionGraph)___				continueInserting = executionGraphCache.size() == executionGraphs.size()__			}__			final File storageDirectory = executionGraphStore.getStorageDir()___			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(executionGraphs.size()))___			for (ArchivedExecutionGraph executionGraph : executionGraphs) {_				assertThat(executionGraphStore.get(executionGraph.getJobID()), matchesPartiallyWith(executionGraph))__			}_		}_	};tests,that,evicted,link,archived,execution,graph,are,loaded,from,disk,again;test,public,void,test,cache,loading,throws,ioexception,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,new,file,archived,execution,graph,store,root,dir,time,hours,1l,100l,10,testing,utils,default,scheduled,executor,ticker,system,ticker,final,loading,cache,job,id,archived,execution,graph,execution,graph,cache,execution,graph,store,get,archived,execution,graph,cache,collection,archived,execution,graph,execution,graphs,new,array,list,64,boolean,continue,inserting,true,while,continue,inserting,final,archived,execution,graph,execution,graph,new,archived,execution,graph,builder,set,state,job,status,finished,build,execution,graph,store,put,execution,graph,execution,graphs,add,execution,graph,continue,inserting,execution,graph,cache,size,execution,graphs,size,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,execution,graphs,size,for,archived,execution,graph,execution,graph,execution,graphs,assert,that,execution,graph,store,get,execution,graph,get,job,id,matches,partially,with,execution,graph
FileArchivedExecutionGraphStoreTest -> @Test 	public void testPut() throws IOException;1516971011;Tests that we can put {@link ArchivedExecutionGraph} into the_{@link FileArchivedExecutionGraphStore} and that the graph is persisted.;@Test_	public void testPut() throws IOException {_		final ArchivedExecutionGraph dummyExecutionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build()__		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {__			final File storageDirectory = executionGraphStore.getStorageDir()___			_			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(0))___			executionGraphStore.put(dummyExecutionGraph)___			_			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(1))___			assertThat(executionGraphStore.get(dummyExecutionGraph.getJobID()), new PartialArchivedExecutionGraphMatcher(dummyExecutionGraph))__		}_	};tests,that,we,can,put,link,archived,execution,graph,into,the,link,file,archived,execution,graph,store,and,that,the,graph,is,persisted;test,public,void,test,put,throws,ioexception,final,archived,execution,graph,dummy,execution,graph,new,archived,execution,graph,builder,set,state,job,status,finished,build,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,0,execution,graph,store,put,dummy,execution,graph,assert,that,storage,directory,list,files,length,matchers,equal,to,1,assert,that,execution,graph,store,get,dummy,execution,graph,get,job,id,new,partial,archived,execution,graph,matcher,dummy,execution,graph
FileArchivedExecutionGraphStoreTest -> @Test 	public void testPut() throws IOException;1522681180;Tests that we can put {@link ArchivedExecutionGraph} into the_{@link FileArchivedExecutionGraphStore} and that the graph is persisted.;@Test_	public void testPut() throws IOException {_		final ArchivedExecutionGraph dummyExecutionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build()__		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {__			final File storageDirectory = executionGraphStore.getStorageDir()___			_			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(0))___			executionGraphStore.put(dummyExecutionGraph)___			_			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(1))___			assertThat(executionGraphStore.get(dummyExecutionGraph.getJobID()), new PartialArchivedExecutionGraphMatcher(dummyExecutionGraph))__		}_	};tests,that,we,can,put,link,archived,execution,graph,into,the,link,file,archived,execution,graph,store,and,that,the,graph,is,persisted;test,public,void,test,put,throws,ioexception,final,archived,execution,graph,dummy,execution,graph,new,archived,execution,graph,builder,set,state,job,status,finished,build,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,0,execution,graph,store,put,dummy,execution,graph,assert,that,storage,directory,list,files,length,matchers,equal,to,1,assert,that,execution,graph,store,get,dummy,execution,graph,get,job,id,new,partial,archived,execution,graph,matcher,dummy,execution,graph
FileArchivedExecutionGraphStoreTest -> @Test 	public void testPut() throws IOException;1526494919;Tests that we can put {@link ArchivedExecutionGraph} into the_{@link FileArchivedExecutionGraphStore} and that the graph is persisted.;@Test_	public void testPut() throws IOException {_		final ArchivedExecutionGraph dummyExecutionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build()__		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {__			final File storageDirectory = executionGraphStore.getStorageDir()___			_			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(0))___			executionGraphStore.put(dummyExecutionGraph)___			_			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(1))___			assertThat(executionGraphStore.get(dummyExecutionGraph.getJobID()), new PartialArchivedExecutionGraphMatcher(dummyExecutionGraph))__		}_	};tests,that,we,can,put,link,archived,execution,graph,into,the,link,file,archived,execution,graph,store,and,that,the,graph,is,persisted;test,public,void,test,put,throws,ioexception,final,archived,execution,graph,dummy,execution,graph,new,archived,execution,graph,builder,set,state,job,status,finished,build,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,0,execution,graph,store,put,dummy,execution,graph,assert,that,storage,directory,list,files,length,matchers,equal,to,1,assert,that,execution,graph,store,get,dummy,execution,graph,get,job,id,new,partial,archived,execution,graph,matcher,dummy,execution,graph
FileArchivedExecutionGraphStoreTest -> @Test 	public void testPut() throws IOException;1539934386;Tests that we can put {@link ArchivedExecutionGraph} into the_{@link FileArchivedExecutionGraphStore} and that the graph is persisted.;@Test_	public void testPut() throws IOException {_		final ArchivedExecutionGraph dummyExecutionGraph = new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build()__		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {__			final File storageDirectory = executionGraphStore.getStorageDir()___			_			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(0))___			executionGraphStore.put(dummyExecutionGraph)___			_			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(1))___			assertThat(executionGraphStore.get(dummyExecutionGraph.getJobID()), new PartialArchivedExecutionGraphMatcher(dummyExecutionGraph))__		}_	};tests,that,we,can,put,link,archived,execution,graph,into,the,link,file,archived,execution,graph,store,and,that,the,graph,is,persisted;test,public,void,test,put,throws,ioexception,final,archived,execution,graph,dummy,execution,graph,new,archived,execution,graph,builder,set,state,job,status,finished,build,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,0,execution,graph,store,put,dummy,execution,graph,assert,that,storage,directory,list,files,length,matchers,equal,to,1,assert,that,execution,graph,store,get,dummy,execution,graph,get,job,id,new,partial,archived,execution,graph,matcher,dummy,execution,graph
FileArchivedExecutionGraphStoreTest -> @Test 	public void testAvailableJobDetails() throws IOException;1516971011;Tests that we obtain the correct collection of available job details.;@Test_	public void testAvailableJobDetails() throws IOException {_		final int numberExecutionGraphs = 10__		final Collection<ArchivedExecutionGraph> executionGraphs = generateTerminalExecutionGraphs(numberExecutionGraphs)___		final Collection<JobDetails> jobDetails = executionGraphs.stream().map(WebMonitorUtils::createDetailsForJob).collect(Collectors.toList())___		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {_			for (ArchivedExecutionGraph executionGraph : executionGraphs) {_				executionGraphStore.put(executionGraph)__			}__			assertThat(executionGraphStore.getAvailableJobDetails(), Matchers.containsInAnyOrder(jobDetails.toArray()))__		}_	};tests,that,we,obtain,the,correct,collection,of,available,job,details;test,public,void,test,available,job,details,throws,ioexception,final,int,number,execution,graphs,10,final,collection,archived,execution,graph,execution,graphs,generate,terminal,execution,graphs,number,execution,graphs,final,collection,job,details,job,details,execution,graphs,stream,map,web,monitor,utils,create,details,for,job,collect,collectors,to,list,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,for,archived,execution,graph,execution,graph,execution,graphs,execution,graph,store,put,execution,graph,assert,that,execution,graph,store,get,available,job,details,matchers,contains,in,any,order,job,details,to,array
FileArchivedExecutionGraphStoreTest -> @Test 	public void testAvailableJobDetails() throws IOException;1522681180;Tests that we obtain the correct collection of available job details.;@Test_	public void testAvailableJobDetails() throws IOException {_		final int numberExecutionGraphs = 10__		final Collection<ArchivedExecutionGraph> executionGraphs = generateTerminalExecutionGraphs(numberExecutionGraphs)___		final Collection<JobDetails> jobDetails = executionGraphs.stream().map(WebMonitorUtils::createDetailsForJob).collect(Collectors.toList())___		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {_			for (ArchivedExecutionGraph executionGraph : executionGraphs) {_				executionGraphStore.put(executionGraph)__			}__			assertThat(executionGraphStore.getAvailableJobDetails(), Matchers.containsInAnyOrder(jobDetails.toArray()))__		}_	};tests,that,we,obtain,the,correct,collection,of,available,job,details;test,public,void,test,available,job,details,throws,ioexception,final,int,number,execution,graphs,10,final,collection,archived,execution,graph,execution,graphs,generate,terminal,execution,graphs,number,execution,graphs,final,collection,job,details,job,details,execution,graphs,stream,map,web,monitor,utils,create,details,for,job,collect,collectors,to,list,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,for,archived,execution,graph,execution,graph,execution,graphs,execution,graph,store,put,execution,graph,assert,that,execution,graph,store,get,available,job,details,matchers,contains,in,any,order,job,details,to,array
FileArchivedExecutionGraphStoreTest -> @Test 	public void testAvailableJobDetails() throws IOException;1526494919;Tests that we obtain the correct collection of available job details.;@Test_	public void testAvailableJobDetails() throws IOException {_		final int numberExecutionGraphs = 10__		final Collection<ArchivedExecutionGraph> executionGraphs = generateTerminalExecutionGraphs(numberExecutionGraphs)___		final Collection<JobDetails> jobDetails = executionGraphs.stream().map(WebMonitorUtils::createDetailsForJob).collect(Collectors.toList())___		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {_			for (ArchivedExecutionGraph executionGraph : executionGraphs) {_				executionGraphStore.put(executionGraph)__			}__			assertThat(executionGraphStore.getAvailableJobDetails(), Matchers.containsInAnyOrder(jobDetails.toArray()))__		}_	};tests,that,we,obtain,the,correct,collection,of,available,job,details;test,public,void,test,available,job,details,throws,ioexception,final,int,number,execution,graphs,10,final,collection,archived,execution,graph,execution,graphs,generate,terminal,execution,graphs,number,execution,graphs,final,collection,job,details,job,details,execution,graphs,stream,map,web,monitor,utils,create,details,for,job,collect,collectors,to,list,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,for,archived,execution,graph,execution,graph,execution,graphs,execution,graph,store,put,execution,graph,assert,that,execution,graph,store,get,available,job,details,matchers,contains,in,any,order,job,details,to,array
FileArchivedExecutionGraphStoreTest -> @Test 	public void testAvailableJobDetails() throws IOException;1539934386;Tests that we obtain the correct collection of available job details.;@Test_	public void testAvailableJobDetails() throws IOException {_		final int numberExecutionGraphs = 10__		final Collection<ArchivedExecutionGraph> executionGraphs = generateTerminalExecutionGraphs(numberExecutionGraphs)___		final Collection<JobDetails> jobDetails = executionGraphs.stream().map(WebMonitorUtils::createDetailsForJob).collect(Collectors.toList())___		final File rootDir = temporaryFolder.newFolder()___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {_			for (ArchivedExecutionGraph executionGraph : executionGraphs) {_				executionGraphStore.put(executionGraph)__			}__			assertThat(executionGraphStore.getAvailableJobDetails(), Matchers.containsInAnyOrder(jobDetails.toArray()))__		}_	};tests,that,we,obtain,the,correct,collection,of,available,job,details;test,public,void,test,available,job,details,throws,ioexception,final,int,number,execution,graphs,10,final,collection,archived,execution,graph,execution,graphs,generate,terminal,execution,graphs,number,execution,graphs,final,collection,job,details,job,details,execution,graphs,stream,map,web,monitor,utils,create,details,for,job,collect,collectors,to,list,final,file,root,dir,temporary,folder,new,folder,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,for,archived,execution,graph,execution,graph,execution,graphs,execution,graph,store,put,execution,graph,assert,that,execution,graph,store,get,available,job,details,matchers,contains,in,any,order,job,details,to,array
FileArchivedExecutionGraphStoreTest -> @Test 	public void testCloseCleansUp() throws IOException;1516971011;Tests that all persisted files are cleaned up after closing the store.;@Test_	public void testCloseCleansUp() throws IOException {_		final File rootDir = temporaryFolder.newFolder()___		assertThat(rootDir.listFiles().length, Matchers.equalTo(0))___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {__			assertThat(rootDir.listFiles().length, Matchers.equalTo(1))___			final File storageDirectory = executionGraphStore.getStorageDir()___			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(0))___			executionGraphStore.put(new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build())___			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(1))__		}__		assertThat(rootDir.listFiles().length, Matchers.equalTo(0))__	};tests,that,all,persisted,files,are,cleaned,up,after,closing,the,store;test,public,void,test,close,cleans,up,throws,ioexception,final,file,root,dir,temporary,folder,new,folder,assert,that,root,dir,list,files,length,matchers,equal,to,0,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,assert,that,root,dir,list,files,length,matchers,equal,to,1,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,0,execution,graph,store,put,new,archived,execution,graph,builder,set,state,job,status,finished,build,assert,that,storage,directory,list,files,length,matchers,equal,to,1,assert,that,root,dir,list,files,length,matchers,equal,to,0
FileArchivedExecutionGraphStoreTest -> @Test 	public void testCloseCleansUp() throws IOException;1522681180;Tests that all persisted files are cleaned up after closing the store.;@Test_	public void testCloseCleansUp() throws IOException {_		final File rootDir = temporaryFolder.newFolder()___		assertThat(rootDir.listFiles().length, Matchers.equalTo(0))___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {__			assertThat(rootDir.listFiles().length, Matchers.equalTo(1))___			final File storageDirectory = executionGraphStore.getStorageDir()___			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(0))___			executionGraphStore.put(new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build())___			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(1))__		}__		assertThat(rootDir.listFiles().length, Matchers.equalTo(0))__	};tests,that,all,persisted,files,are,cleaned,up,after,closing,the,store;test,public,void,test,close,cleans,up,throws,ioexception,final,file,root,dir,temporary,folder,new,folder,assert,that,root,dir,list,files,length,matchers,equal,to,0,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,assert,that,root,dir,list,files,length,matchers,equal,to,1,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,0,execution,graph,store,put,new,archived,execution,graph,builder,set,state,job,status,finished,build,assert,that,storage,directory,list,files,length,matchers,equal,to,1,assert,that,root,dir,list,files,length,matchers,equal,to,0
FileArchivedExecutionGraphStoreTest -> @Test 	public void testCloseCleansUp() throws IOException;1526494919;Tests that all persisted files are cleaned up after closing the store.;@Test_	public void testCloseCleansUp() throws IOException {_		final File rootDir = temporaryFolder.newFolder()___		assertThat(rootDir.listFiles().length, Matchers.equalTo(0))___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {__			assertThat(rootDir.listFiles().length, Matchers.equalTo(1))___			final File storageDirectory = executionGraphStore.getStorageDir()___			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(0))___			executionGraphStore.put(new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build())___			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(1))__		}__		assertThat(rootDir.listFiles().length, Matchers.equalTo(0))__	};tests,that,all,persisted,files,are,cleaned,up,after,closing,the,store;test,public,void,test,close,cleans,up,throws,ioexception,final,file,root,dir,temporary,folder,new,folder,assert,that,root,dir,list,files,length,matchers,equal,to,0,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,assert,that,root,dir,list,files,length,matchers,equal,to,1,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,0,execution,graph,store,put,new,archived,execution,graph,builder,set,state,job,status,finished,build,assert,that,storage,directory,list,files,length,matchers,equal,to,1,assert,that,root,dir,list,files,length,matchers,equal,to,0
FileArchivedExecutionGraphStoreTest -> @Test 	public void testCloseCleansUp() throws IOException;1539934386;Tests that all persisted files are cleaned up after closing the store.;@Test_	public void testCloseCleansUp() throws IOException {_		final File rootDir = temporaryFolder.newFolder()___		assertThat(rootDir.listFiles().length, Matchers.equalTo(0))___		try (final FileArchivedExecutionGraphStore executionGraphStore = createDefaultExecutionGraphStore(rootDir)) {__			assertThat(rootDir.listFiles().length, Matchers.equalTo(1))___			final File storageDirectory = executionGraphStore.getStorageDir()___			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(0))___			executionGraphStore.put(new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).build())___			assertThat(storageDirectory.listFiles().length, Matchers.equalTo(1))__		}__		assertThat(rootDir.listFiles().length, Matchers.equalTo(0))__	};tests,that,all,persisted,files,are,cleaned,up,after,closing,the,store;test,public,void,test,close,cleans,up,throws,ioexception,final,file,root,dir,temporary,folder,new,folder,assert,that,root,dir,list,files,length,matchers,equal,to,0,try,final,file,archived,execution,graph,store,execution,graph,store,create,default,execution,graph,store,root,dir,assert,that,root,dir,list,files,length,matchers,equal,to,1,final,file,storage,directory,execution,graph,store,get,storage,dir,assert,that,storage,directory,list,files,length,matchers,equal,to,0,execution,graph,store,put,new,archived,execution,graph,builder,set,state,job,status,finished,build,assert,that,storage,directory,list,files,length,matchers,equal,to,1,assert,that,root,dir,list,files,length,matchers,equal,to,0
