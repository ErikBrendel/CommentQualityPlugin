commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testConfigure() throws Exception {     File confDir = tempFolder.newFolder().     initConfDir(confDir).     HadoopConfOverlay overlay = new HadoopConfOverlay(confDir).     ContainerSpecification spec = new ContainerSpecification().     overlay.configure(spec).     assertEquals(TARGET_CONF_DIR.getPath(), spec.getEnvironmentVariables().get("HADOOP_CONF_DIR")).     assertEquals(TARGET_CONF_DIR.getPath(), spec.getDynamicConfiguration().getString(ConfigConstants.PATH_HADOOP_CONFIG, null)).     checkArtifact(spec, new Path(TARGET_CONF_DIR, "core-site.xml")).     checkArtifact(spec, new Path(TARGET_CONF_DIR, "hdfs-site.xml")). }
false;public;0;7;;@Test public void testNoConf() throws Exception {     HadoopConfOverlay overlay = new HadoopConfOverlay(null).     ContainerSpecification containerSpecification = new ContainerSpecification().     overlay.configure(containerSpecification). }
false;public;0;43;;@Test public void testBuilderFromEnvironment() throws Exception {     // verify that the builder picks up various environment locations     HadoopConfOverlay.Builder builder.     Map<String, String> env.     // fs.hdfs.hadoopconf     File confDir = tempFolder.newFolder().     initConfDir(confDir).     Configuration conf = new Configuration().     conf.setString(ConfigConstants.PATH_HADOOP_CONFIG, confDir.getAbsolutePath()).     builder = HadoopConfOverlay.newBuilder().fromEnvironment(conf).     assertEquals(confDir, builder.hadoopConfDir).     // HADOOP_CONF_DIR     env = new HashMap<String, String>(System.getenv()).     env.remove("HADOOP_HOME").     env.put("HADOOP_CONF_DIR", confDir.getAbsolutePath()).     CommonTestUtils.setEnv(env).     builder = HadoopConfOverlay.newBuilder().fromEnvironment(new Configuration()).     assertEquals(confDir, builder.hadoopConfDir).     // HADOOP_HOME/conf     File homeDir = tempFolder.newFolder().     confDir = initConfDir(new File(homeDir, "conf")).     env = new HashMap<String, String>(System.getenv()).     env.remove("HADOOP_CONF_DIR").     env.put("HADOOP_HOME", homeDir.getAbsolutePath()).     CommonTestUtils.setEnv(env).     builder = HadoopConfOverlay.newBuilder().fromEnvironment(new Configuration()).     assertEquals(confDir, builder.hadoopConfDir).     // HADOOP_HOME/etc/hadoop     homeDir = tempFolder.newFolder().     confDir = initConfDir(new File(homeDir, "etc/hadoop")).     env = new HashMap<String, String>(System.getenv()).     env.remove("HADOOP_CONF_DIR").     env.put("HADOOP_HOME", homeDir.getAbsolutePath()).     CommonTestUtils.setEnv(env).     builder = HadoopConfOverlay.newBuilder().fromEnvironment(new Configuration()).     assertEquals(confDir, builder.hadoopConfDir). }
false;private;1;6;;private File initConfDir(File confDir) throws Exception {     confDir.mkdirs().     new File(confDir, "core-site.xml").createNewFile().     new File(confDir, "hdfs-site.xml").createNewFile().     return confDir. }
