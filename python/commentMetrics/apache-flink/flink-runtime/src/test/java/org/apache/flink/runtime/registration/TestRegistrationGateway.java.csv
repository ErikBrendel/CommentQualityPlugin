commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;// ------------------------------------------------------------------------ public CompletableFuture<RegistrationResponse> registrationCall(UUID leaderId, long timeout) {     invocations.add(new RegistrationCall(leaderId, timeout)).     RegistrationResponse response = responses[pos].     if (pos < responses.length - 1) {         pos++.     }     // return a completed future (for a proper value), or one that never completes and will time out (for null)     return response != null ? CompletableFuture.completedFuture(response) : futureWithTimeout(timeout). }
false;public;0;3;;public BlockingQueue<RegistrationCall> getInvocations() {     return invocations. }
false;public;0;3;;public UUID leaderId() {     return leaderId. }
false;public;0;3;;public long timeout() {     return timeout. }
