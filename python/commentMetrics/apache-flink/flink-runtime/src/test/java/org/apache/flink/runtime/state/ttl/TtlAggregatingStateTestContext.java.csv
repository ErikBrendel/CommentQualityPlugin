commented;modifiers;parameterAmount;loc;comment;code
false;;0;10;;@Override void initTestValues() {     updateEmpty = 5.     updateUnexpired = 7.     updateExpired = 6.     getUpdateEmpty = "8".     getUnexpired = "15".     getUpdateExpired = "9". }
false;public;0;6;;@SuppressWarnings("unchecked") @Override public <US extends State, SV> StateDescriptor<US, SV> createStateDescriptor() {     return (StateDescriptor<US, SV>) new AggregatingStateDescriptor<>(getName(), AGGREGATE, LongSerializer.INSTANCE). }
false;public;1;4;;@Override public void update(Integer value) throws Exception {     ttlState.add(value). }
false;public;0;4;;@Override public String get() throws Exception {     return ttlState.get(). }
false;public;0;4;;@Override public Object getOriginal() throws Exception {     return ttlState.original.get(). }
false;;2;10;;@Override String getMergeResult(List<Tuple2<String, Integer>> unexpiredUpdatesToMerge, List<Tuple2<String, Integer>> finalUpdatesToMerge) {     Set<String> namespaces = new HashSet<>().     unexpiredUpdatesToMerge.forEach(t -> namespaces.add(t.f0)).     finalUpdatesToMerge.forEach(t -> namespaces.add(t.f0)).     return Integer.toString(getIntegerMergeResult(unexpiredUpdatesToMerge, finalUpdatesToMerge) + namespaces.size() * (int) DEFAULT_ACCUMULATOR). }
false;public;0;4;;@Override public Long createAccumulator() {     return DEFAULT_ACCUMULATOR. }
false;public;2;4;;@Override public Long add(Integer value, Long accumulator) {     return accumulator + value. }
false;public;1;4;;@Override public String getResult(Long accumulator) {     return accumulator.toString(). }
false;public;2;4;;@Override public Long merge(Long a, Long b) {     return a + b. }
