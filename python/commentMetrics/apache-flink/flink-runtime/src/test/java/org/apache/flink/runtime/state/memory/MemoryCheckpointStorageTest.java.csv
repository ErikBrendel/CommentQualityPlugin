commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;// ------------------------------------------------------------------------ // General Fs-based checkpoint storage tests, inherited // ------------------------------------------------------------------------ @Override protected CheckpointStorage createCheckpointStorage(Path checkpointDir) throws Exception {     return new MemoryBackendCheckpointStorage(new JobID(), checkpointDir, null, DEFAULT_MAX_STATE_SIZE). }
false;protected;2;4;;@Override protected CheckpointStorage createCheckpointStorageWithSavepointDir(Path checkpointDir, Path savepointDir) throws Exception {     return new MemoryBackendCheckpointStorage(new JobID(), checkpointDir, savepointDir, DEFAULT_MAX_STATE_SIZE). }
false;public;0;14;;// ------------------------------------------------------------------------ // MemoryCheckpointStorage-specific tests // ------------------------------------------------------------------------ @Test public void testParametrizationDefault() throws Exception {     final JobID jid = new JobID().     MemoryStateBackend backend = new MemoryStateBackend().     MemoryBackendCheckpointStorage storage = (MemoryBackendCheckpointStorage) backend.createCheckpointStorage(jid).     assertFalse(storage.supportsHighlyAvailableStorage()).     assertFalse(storage.hasDefaultSavepointLocation()).     assertNull(storage.getDefaultSavepointDirectory()).     assertEquals(MemoryStateBackend.DEFAULT_MAX_STATE_SIZE, storage.getMaxStateSize()). }
false;public;0;18;;@Test public void testParametrizationDirectories() throws Exception {     final JobID jid = new JobID().     final Path checkpointPath = new Path(tmp.newFolder().toURI().toString()).     final Path savepointPath = new Path(tmp.newFolder().toURI().toString()).     MemoryStateBackend backend = new MemoryStateBackend(checkpointPath.toString(), savepointPath.toString()).     MemoryBackendCheckpointStorage storage = (MemoryBackendCheckpointStorage) backend.createCheckpointStorage(jid).     assertTrue(storage.supportsHighlyAvailableStorage()).     assertTrue(storage.hasDefaultSavepointLocation()).     assertNotNull(storage.getDefaultSavepointDirectory()).     assertEquals(savepointPath, storage.getDefaultSavepointDirectory()). }
false;public;0;10;;@Test public void testParametrizationStateSize() throws Exception {     final int maxSize = 17.     MemoryStateBackend backend = new MemoryStateBackend(maxSize).     MemoryBackendCheckpointStorage storage = (MemoryBackendCheckpointStorage) backend.createCheckpointStorage(new JobID()).     assertEquals(maxSize, storage.getMaxStateSize()). }
false;public;0;22;;@Test public void testNonPersistentCheckpointLocation() throws Exception {     MemoryBackendCheckpointStorage storage = new MemoryBackendCheckpointStorage(new JobID(), null, null, DEFAULT_MAX_STATE_SIZE).     CheckpointStorageLocation location = storage.initializeLocationForCheckpoint(9).     CheckpointMetadataOutputStream stream = location.createMetadataOutputStream().     stream.write(99).     CompletedCheckpointStorageLocation completed = stream.closeAndFinalizeCheckpoint().     StreamStateHandle handle = completed.getMetadataHandle().     assertTrue(handle instanceof ByteStreamStateHandle).     // the reference is not valid in that case     try {         storage.resolveCheckpoint(completed.getExternalPointer()).         fail("should fail with an exception").     } catch (Exception e) {     // expected     } }
false;public;0;27;;@Test public void testLocationReference() throws Exception {     // non persistent memory state backend for checkpoint     {         MemoryBackendCheckpointStorage storage = new MemoryBackendCheckpointStorage(new JobID(), null, null, DEFAULT_MAX_STATE_SIZE).         CheckpointStorageLocation location = storage.initializeLocationForCheckpoint(42).         assertTrue(location.getLocationReference().isDefaultReference()).     }     // non persistent memory state backend for checkpoint     {         MemoryBackendCheckpointStorage storage = new MemoryBackendCheckpointStorage(new JobID(), randomTempPath(), null, DEFAULT_MAX_STATE_SIZE).         CheckpointStorageLocation location = storage.initializeLocationForCheckpoint(42).         assertTrue(location.getLocationReference().isDefaultReference()).     }     // memory state backend for savepoint     {         MemoryBackendCheckpointStorage storage = new MemoryBackendCheckpointStorage(new JobID(), null, null, DEFAULT_MAX_STATE_SIZE).         CheckpointStorageLocation location = storage.initializeLocationForSavepoint(1337, randomTempPath().toString()).         assertTrue(location.getLocationReference().isDefaultReference()).     } }
false;public;0;20;;@Test public void testTaskOwnedStateStream() throws Exception {     final List<String> state = Arrays.asList("Flopsy", "Mopsy", "Cotton Tail", "Peter").     final MemoryBackendCheckpointStorage storage = new MemoryBackendCheckpointStorage(new JobID(), null, null, DEFAULT_MAX_STATE_SIZE).     StreamStateHandle stateHandle.     try (CheckpointStateOutputStream stream = storage.createTaskOwnedStateStream()) {         assertTrue(stream instanceof MemoryCheckpointOutputStream).         new ObjectOutputStream(stream).writeObject(state).         stateHandle = stream.closeAndGetHandle().     }     try (ObjectInputStream in = new ObjectInputStream(stateHandle.openInputStream())) {         assertEquals(state, in.readObject()).     } }
