commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean canRestart() {     return maxRestarts < 0 || maxRestarts - restartAttempts > 0. }
false;public;2;13;;@Override public void restart(RestartCallback restarter, ScheduledExecutor executor) {     ++restartAttempts.     ExecutorAction executorAction = new ExecutorAction(restarter::triggerFullRecovery, executor).     if (manuallyTriggeredExecution) {         synchronized (actionsQueue) {             actionsQueue.add(executorAction).         }     } else {         executorAction.trigger().     } }
false;public;0;5;;public int getNumberOfQueuedActions() {     synchronized (actionsQueue) {         return actionsQueue.size().     } }
false;public;0;5;;public CompletableFuture<Void> triggerNextAction() {     synchronized (actionsQueue) {         return actionsQueue.remove().trigger().     } }
false;public;0;15;;public CompletableFuture<Void> triggerAll() {     synchronized (actionsQueue) {         if (actionsQueue.isEmpty()) {             return CompletableFuture.completedFuture(null).         }         CompletableFuture<?>[] completableFutures = new CompletableFuture[actionsQueue.size()].         for (int i = 0. i < completableFutures.length. ++i) {             completableFutures[i] = triggerNextAction().         }         return CompletableFuture.allOf(completableFutures).     } }
false;public;0;3;;public boolean isManuallyTriggeredExecution() {     return manuallyTriggeredExecution. }
false;public;1;3;;public void setManuallyTriggeredExecution(boolean manuallyTriggeredExecution) {     this.manuallyTriggeredExecution = manuallyTriggeredExecution. }
false;public,static;0;3;;public static TestRestartStrategy manuallyTriggered() {     return new TestRestartStrategy(true). }
false;public,static;0;3;;public static TestRestartStrategy directExecuting() {     return new TestRestartStrategy(false). }
false;public;0;3;;public CompletableFuture<Void> trigger() {     return CompletableFuture.runAsync(runnable, executor). }
