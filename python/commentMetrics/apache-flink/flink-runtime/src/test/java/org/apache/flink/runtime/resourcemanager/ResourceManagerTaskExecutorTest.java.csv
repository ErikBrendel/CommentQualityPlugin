# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1482522859;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		String taskExecutorAddress = "/taskExecutor1"__		ResourceID taskExecutorResourceID = mockTaskExecutor(taskExecutorAddress)__		TestingLeaderElectionService rmLeaderElectionService = new TestingLeaderElectionService()__		final ResourceManager resourceManager = createAndStartResourceManager(rmLeaderElectionService)__		final UUID leaderSessionId = grantLeadership(rmLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID)__		RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof TaskExecutorRegistrationSuccess)___		_		Future<RegistrationResponse> duplicateFuture = resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID)__		RegistrationResponse duplicateResponse = duplicateFuture.get()__		assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__		assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,string,task,executor,address,task,executor1,resource,id,task,executor,resource,id,mock,task,executor,task,executor,address,testing,leader,election,service,rm,leader,election,service,new,testing,leader,election,service,final,resource,manager,resource,manager,create,and,start,resource,manager,rm,leader,election,service,final,uuid,leader,session,id,grant,leadership,rm,leader,election,service,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1482522860;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		String taskExecutorAddress = "/taskExecutor1"__		ResourceID taskExecutorResourceID = mockTaskExecutor(taskExecutorAddress)__		TestingLeaderElectionService rmLeaderElectionService = new TestingLeaderElectionService()__		final ResourceManager resourceManager = createAndStartResourceManager(rmLeaderElectionService)__		final UUID leaderSessionId = grantLeadership(rmLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID)__		RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof TaskExecutorRegistrationSuccess)___		_		Future<RegistrationResponse> duplicateFuture = resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID)__		RegistrationResponse duplicateResponse = duplicateFuture.get()__		assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__		assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,string,task,executor,address,task,executor1,resource,id,task,executor,resource,id,mock,task,executor,task,executor,address,testing,leader,election,service,rm,leader,election,service,new,testing,leader,election,service,final,resource,manager,resource,manager,create,and,start,resource,manager,rm,leader,election,service,final,uuid,leader,session,id,grant,leadership,rm,leader,election,service,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1482522861;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		_		Future<RegistrationResponse> successfulFuture =_			resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__		RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof TaskExecutorRegistrationSuccess)___		_		Future<RegistrationResponse> duplicateFuture =_			resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__		RegistrationResponse duplicateResponse = duplicateFuture.get()__		assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__		assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1482522864;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			Future<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			Future<RegistrationResponse> duplicateFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1482522864;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			Future<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			Future<RegistrationResponse> duplicateFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1489413798;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			Future<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			Future<RegistrationResponse> duplicateFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1490031358;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			Future<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			Future<RegistrationResponse> duplicateFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1490273924;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			Future<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			Future<RegistrationResponse> duplicateFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1490273924;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			Future<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			Future<RegistrationResponse> duplicateFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1493146240;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			Future<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			Future<RegistrationResponse> duplicateFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1493386068;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			Future<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			Future<RegistrationResponse> duplicateFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1501760738;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,completable,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1502452184;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport, Time.milliseconds(0L))__			RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport, Time.milliseconds(0L))__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,time,milliseconds,0l,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,task,executor,registration,success,completable,future,registration,response,duplicate,future,resource,manager,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,time,milliseconds,0l,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1502706197;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(leaderSessionId, taskExecutorAddress, taskExecutorResourceID, slotReport, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1504525441;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1506034747;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1509547920;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1510063662;Test receive normal registration from task executor and receive duplicate registration from task executor;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1511963573;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_				taskExecutorResourceID,_				timeout).get()__			assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1515481550;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_				taskExecutorResourceID,_				timeout).get()__			assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1517915730;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_				taskExecutorResourceID,_				timeout).get()__			assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1519406526;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_				taskExecutorResourceID,_				timeout).get()__			assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1522268075;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_				taskExecutorResourceID,_				timeout).get()__			assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1522681180;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_				taskExecutorResourceID,_				timeout).get()__			assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1526494919;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_				taskExecutorResourceID,_				timeout).get()__			assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1527173115;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_				taskExecutorResourceID,_				timeout).get()__			assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,data,port,hardware,description,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1532290976;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_				taskExecutorResourceID,_				timeout).get()__			assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,data,port,hardware,description,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1539582211;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> successfulFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__			assertTrue(response instanceof TaskExecutorRegistrationSuccess)__			final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_				taskExecutorResourceID,_				timeout).get()__			assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___			_			CompletableFuture<RegistrationResponse> duplicateFuture =_				rmGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, dataPort, hardwareDescription, timeout)__			RegistrationResponse duplicateResponse = duplicateFuture.get()__			assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__			assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,try,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,address,task,executor,resource,id,data,port,hardware,description,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1550238837;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerTaskExecutor(_			taskExecutorGateway.getAddress(),_			taskExecutorResourceID,_			dataPort,_			hardwareDescription,_			TIMEOUT)__		RegistrationResponse response = successfulFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof TaskExecutorRegistrationSuccess)__		final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_			taskExecutorResourceID,_			TIMEOUT).get()__		assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___		_		CompletableFuture<RegistrationResponse> duplicateFuture =_			rmGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskExecutorResourceID,_				dataPort,_				hardwareDescription,_				TIMEOUT)__		RegistrationResponse duplicateResponse = duplicateFuture.get()__		assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__		assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())___		assertThat(rmGateway.requestResourceOverview(TIMEOUT).get().getNumberTaskManagers(), is(1))__	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,completable,future,registration,response,successful,future,rm,gateway,register,task,executor,task,executor,gateway,get,address,task,executor,resource,id,data,port,hardware,description,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,rm,gateway,register,task,executor,task,executor,gateway,get,address,task,executor,resource,id,data,port,hardware,description,timeout,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,assert,that,rm,gateway,request,resource,overview,timeout,get,get,number,task,managers,is,1
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1550238838;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		_		CompletableFuture<RegistrationResponse> successfulFuture = registerTaskExecutor(rmGateway, taskExecutorGateway.getAddress())___		RegistrationResponse response = successfulFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof TaskExecutorRegistrationSuccess)__		final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_			taskExecutorResourceID,_			TIMEOUT).get()__		assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___		_		CompletableFuture<RegistrationResponse> duplicateFuture = registerTaskExecutor(rmGateway, taskExecutorGateway.getAddress())___		RegistrationResponse duplicateResponse = duplicateFuture.get()__		assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__		assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())___		assertThat(rmGateway.requestResourceOverview(TIMEOUT).get().getNumberTaskManagers(), is(1))__	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,completable,future,registration,response,successful,future,register,task,executor,rm,gateway,task,executor,gateway,get,address,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,register,task,executor,rm,gateway,task,executor,gateway,get,address,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,assert,that,rm,gateway,request,resource,overview,timeout,get,get,number,task,managers,is,1
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutor() throws Exception;1550568581;Test receive normal registration from task executor and receive duplicate registration_from task executor.;@Test_	public void testRegisterTaskExecutor() throws Exception {_		_		CompletableFuture<RegistrationResponse> successfulFuture = registerTaskExecutor(rmGateway, taskExecutorGateway.getAddress())___		RegistrationResponse response = successfulFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof TaskExecutorRegistrationSuccess)__		final TaskManagerInfo taskManagerInfo = rmGateway.requestTaskManagerInfo(_			taskExecutorResourceID,_			TIMEOUT).get()__		assertThat(taskManagerInfo.getResourceId(), equalTo(taskExecutorResourceID))___		_		CompletableFuture<RegistrationResponse> duplicateFuture = registerTaskExecutor(rmGateway, taskExecutorGateway.getAddress())___		RegistrationResponse duplicateResponse = duplicateFuture.get()__		assertTrue(duplicateResponse instanceof TaskExecutorRegistrationSuccess)__		assertNotEquals(((TaskExecutorRegistrationSuccess) response).getRegistrationId(), ((TaskExecutorRegistrationSuccess) duplicateResponse).getRegistrationId())___		assertThat(rmGateway.requestResourceOverview(TIMEOUT).get().getNumberTaskManagers(), is(1))__	};test,receive,normal,registration,from,task,executor,and,receive,duplicate,registration,from,task,executor;test,public,void,test,register,task,executor,throws,exception,completable,future,registration,response,successful,future,register,task,executor,rm,gateway,task,executor,gateway,get,address,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,task,executor,registration,success,final,task,manager,info,task,manager,info,rm,gateway,request,task,manager,info,task,executor,resource,id,timeout,get,assert,that,task,manager,info,get,resource,id,equal,to,task,executor,resource,id,completable,future,registration,response,duplicate,future,register,task,executor,rm,gateway,task,executor,gateway,get,address,registration,response,duplicate,response,duplicate,future,get,assert,true,duplicate,response,instanceof,task,executor,registration,success,assert,not,equals,task,executor,registration,success,response,get,registration,id,task,executor,registration,success,duplicate,response,get,registration,id,assert,that,rm,gateway,request,resource,overview,timeout,get,get,number,task,managers,is,1
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1482522859;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		String taskExecutorAddress = "/taskExecutor1"__		ResourceID taskExecutorResourceID = mockTaskExecutor(taskExecutorAddress)__		TestingLeaderElectionService rmLeaderElectionService = new TestingLeaderElectionService()__		final ResourceManager resourceManager = createAndStartResourceManager(rmLeaderElectionService)__		final UUID leaderSessionId = grantLeadership(rmLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,string,task,executor,address,task,executor1,resource,id,task,executor,resource,id,mock,task,executor,task,executor,address,testing,leader,election,service,rm,leader,election,service,new,testing,leader,election,service,final,resource,manager,resource,manager,create,and,start,resource,manager,rm,leader,election,service,final,uuid,leader,session,id,grant,leadership,rm,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1482522860;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		String taskExecutorAddress = "/taskExecutor1"__		ResourceID taskExecutorResourceID = mockTaskExecutor(taskExecutorAddress)__		TestingLeaderElectionService rmLeaderElectionService = new TestingLeaderElectionService()__		final ResourceManager resourceManager = createAndStartResourceManager(rmLeaderElectionService)__		final UUID leaderSessionId = grantLeadership(rmLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,string,task,executor,address,task,executor1,resource,id,task,executor,resource,id,mock,task,executor,task,executor,address,testing,leader,election,service,rm,leader,election,service,new,testing,leader,election,service,final,resource,manager,resource,manager,create,and,start,resource,manager,rm,leader,election,service,final,uuid,leader,session,id,grant,leadership,rm,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1482522861;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture =_			resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID, slotReport)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1482522864;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			UUID differentLeaderSessionID = UUID.randomUUID()__			Future<RegistrationResponse> unMatchedLeaderFuture =_				resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID, slotReport)__			assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1482522864;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			UUID differentLeaderSessionID = UUID.randomUUID()__			Future<RegistrationResponse> unMatchedLeaderFuture =_				resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID, slotReport)__			assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1489413798;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			UUID differentLeaderSessionID = UUID.randomUUID()__			Future<RegistrationResponse> unMatchedLeaderFuture =_				resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID, slotReport)__			assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1490031358;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			UUID differentLeaderSessionID = UUID.randomUUID()__			Future<RegistrationResponse> unMatchedLeaderFuture =_				resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID, slotReport)__			assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1490273924;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			UUID differentLeaderSessionID = UUID.randomUUID()__			Future<RegistrationResponse> unMatchedLeaderFuture =_				resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID, slotReport)__			assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1490273924;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			UUID differentLeaderSessionID = UUID.randomUUID()__			Future<RegistrationResponse> unMatchedLeaderFuture =_				resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID, slotReport)__			assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1493146240;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			UUID differentLeaderSessionID = UUID.randomUUID()__			Future<RegistrationResponse> unMatchedLeaderFuture =_				resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID, slotReport)__			assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1493386068;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			UUID differentLeaderSessionID = UUID.randomUUID()__			Future<RegistrationResponse> unMatchedLeaderFuture =_				resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID, slotReport)__			assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1501760738;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			UUID differentLeaderSessionID = UUID.randomUUID()__			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID, slotReport)__			assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,uuid,different,leader,session,id,uuid,random,uuid,completable,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1502452184;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			UUID differentLeaderSessionID = UUID.randomUUID()__			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				resourceManager.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID, slotReport, Time.milliseconds(0L))__			assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,uuid,different,leader,session,id,uuid,random,uuid,completable,future,registration,response,un,matched,leader,future,resource,manager,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,time,milliseconds,0l,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1502706197;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			UUID differentLeaderSessionID = UUID.randomUUID()__			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				rmGateway.registerTaskExecutor(differentLeaderSessionID, taskExecutorAddress, taskExecutorResourceID, slotReport, timeout)__			assertTrue(unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,uuid,different,leader,session,id,uuid,random,uuid,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,task,executor,different,leader,session,id,task,executor,address,task,executor,resource,id,slot,report,timeout,assert,true,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1504525441;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenMismatchException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,mismatch,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1506034747;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1509547920;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1510063662;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1511963573;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1515481550;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1517915730;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1519406526;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1522268075;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1522681180;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1526494919;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1527173115;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, dataPort, hardwareDescription, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,data,port,hardware,description,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1532290976;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, dataPort, hardwareDescription, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,data,port,hardware,description,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1539582211;Test receive registration with unmatched leadershipId from task executor;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		try {_			_			CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_				wronglyFencedGateway.registerTaskExecutor(taskExecutorAddress, taskExecutorResourceID, dataPort, hardwareDescription, timeout)___			try {_				unMatchedLeaderFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__				fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__			} catch (ExecutionException e) {_				assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__			}_		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,try,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,address,task,executor,resource,id,data,port,hardware,description,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1550238837;Test receive registration with unmatched leadershipId from task executor.;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture =_			wronglyFencedGateway.registerTaskExecutor(_				taskExecutorGateway.getAddress(),_				taskExecutorResourceID,_				dataPort,_				hardwareDescription,_				TIMEOUT)___		try {_			unMatchedLeaderFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__			fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,task,executor,task,executor,gateway,get,address,task,executor,resource,id,data,port,hardware,description,timeout,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1550238838;Test receive registration with unmatched leadershipId from task executor.;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = registerTaskExecutor(wronglyFencedGateway, taskExecutorGateway.getAddress())___		try {_			unMatchedLeaderFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__			fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,completable,future,registration,response,un,matched,leader,future,register,task,executor,wrongly,fenced,gateway,task,executor,gateway,get,address,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception;1550568581;Test receive registration with unmatched leadershipId from task executor.;@Test_	public void testRegisterTaskExecutorWithUnmatchedLeaderSessionId() throws Exception {_		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = registerTaskExecutor(wronglyFencedGateway, taskExecutorGateway.getAddress())___		try {_			unMatchedLeaderFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__			fail("Should have failed because we are using a wrongly fenced ResourceManagerGateway.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};test,receive,registration,with,unmatched,leadership,id,from,task,executor;test,public,void,test,register,task,executor,with,unmatched,leader,session,id,throws,exception,completable,future,registration,response,un,matched,leader,future,register,task,executor,wrongly,fenced,gateway,task,executor,gateway,get,address,try,un,matched,leader,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,should,have,failed,because,we,are,using,a,wrongly,fenced,resource,manager,gateway,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
ResourceManagerTaskExecutorTest -> @Test 	public void testDisconnectTaskExecutor() throws Exception;1550238838;Tests that a TaskExecutor can disconnect from the {@link ResourceManager}.;@Test_	public void testDisconnectTaskExecutor() throws Exception {_		final RegistrationResponse registrationResponse = registerTaskExecutor(rmGateway, taskExecutorGateway.getAddress()).get()__		assertThat(registrationResponse, instanceOf(TaskExecutorRegistrationSuccess.class))___		final InstanceID registrationId = ((TaskExecutorRegistrationSuccess) registrationResponse).getRegistrationId()__		final int numberSlots = 10__		final Collection<SlotStatus> slots = createSlots(numberSlots)__		final SlotReport slotReport = new SlotReport(slots)__		rmGateway.sendSlotReport(taskExecutorResourceID, registrationId, slotReport, TIMEOUT).get()___		final ResourceOverview resourceOverview = rmGateway.requestResourceOverview(TIMEOUT).get()__		assertThat(resourceOverview.getNumberTaskManagers(), is(1))__		assertThat(resourceOverview.getNumberRegisteredSlots(), is(numberSlots))___		rmGateway.disconnectTaskManager(taskExecutorResourceID, new FlinkException("testDisconnectTaskExecutor"))___		final ResourceOverview afterDisconnectResourceOverview = rmGateway.requestResourceOverview(TIMEOUT).get()__		assertThat(afterDisconnectResourceOverview.getNumberTaskManagers(), is(0))__		assertThat(afterDisconnectResourceOverview.getNumberRegisteredSlots(), is(0))__	};tests,that,a,task,executor,can,disconnect,from,the,link,resource,manager;test,public,void,test,disconnect,task,executor,throws,exception,final,registration,response,registration,response,register,task,executor,rm,gateway,task,executor,gateway,get,address,get,assert,that,registration,response,instance,of,task,executor,registration,success,class,final,instance,id,registration,id,task,executor,registration,success,registration,response,get,registration,id,final,int,number,slots,10,final,collection,slot,status,slots,create,slots,number,slots,final,slot,report,slot,report,new,slot,report,slots,rm,gateway,send,slot,report,task,executor,resource,id,registration,id,slot,report,timeout,get,final,resource,overview,resource,overview,rm,gateway,request,resource,overview,timeout,get,assert,that,resource,overview,get,number,task,managers,is,1,assert,that,resource,overview,get,number,registered,slots,is,number,slots,rm,gateway,disconnect,task,manager,task,executor,resource,id,new,flink,exception,test,disconnect,task,executor,final,resource,overview,after,disconnect,resource,overview,rm,gateway,request,resource,overview,timeout,get,assert,that,after,disconnect,resource,overview,get,number,task,managers,is,0,assert,that,after,disconnect,resource,overview,get,number,registered,slots,is,0
ResourceManagerTaskExecutorTest -> @Test 	public void testDisconnectTaskExecutor() throws Exception;1550568581;Tests that a TaskExecutor can disconnect from the {@link ResourceManager}.;@Test_	public void testDisconnectTaskExecutor() throws Exception {_		final RegistrationResponse registrationResponse = registerTaskExecutor(rmGateway, taskExecutorGateway.getAddress()).get()__		assertThat(registrationResponse, instanceOf(TaskExecutorRegistrationSuccess.class))___		final InstanceID registrationId = ((TaskExecutorRegistrationSuccess) registrationResponse).getRegistrationId()__		final int numberSlots = 10__		final Collection<SlotStatus> slots = createSlots(numberSlots)__		final SlotReport slotReport = new SlotReport(slots)__		rmGateway.sendSlotReport(taskExecutorResourceID, registrationId, slotReport, TIMEOUT).get()___		final ResourceOverview resourceOverview = rmGateway.requestResourceOverview(TIMEOUT).get()__		assertThat(resourceOverview.getNumberTaskManagers(), is(1))__		assertThat(resourceOverview.getNumberRegisteredSlots(), is(numberSlots))___		rmGateway.disconnectTaskManager(taskExecutorResourceID, new FlinkException("testDisconnectTaskExecutor"))___		final ResourceOverview afterDisconnectResourceOverview = rmGateway.requestResourceOverview(TIMEOUT).get()__		assertThat(afterDisconnectResourceOverview.getNumberTaskManagers(), is(0))__		assertThat(afterDisconnectResourceOverview.getNumberRegisteredSlots(), is(0))__	};tests,that,a,task,executor,can,disconnect,from,the,link,resource,manager;test,public,void,test,disconnect,task,executor,throws,exception,final,registration,response,registration,response,register,task,executor,rm,gateway,task,executor,gateway,get,address,get,assert,that,registration,response,instance,of,task,executor,registration,success,class,final,instance,id,registration,id,task,executor,registration,success,registration,response,get,registration,id,final,int,number,slots,10,final,collection,slot,status,slots,create,slots,number,slots,final,slot,report,slot,report,new,slot,report,slots,rm,gateway,send,slot,report,task,executor,resource,id,registration,id,slot,report,timeout,get,final,resource,overview,resource,overview,rm,gateway,request,resource,overview,timeout,get,assert,that,resource,overview,get,number,task,managers,is,1,assert,that,resource,overview,get,number,registered,slots,is,number,slots,rm,gateway,disconnect,task,manager,task,executor,resource,id,new,flink,exception,test,disconnect,task,executor,final,resource,overview,after,disconnect,resource,overview,rm,gateway,request,resource,overview,timeout,get,assert,that,after,disconnect,resource,overview,get,number,task,managers,is,0,assert,that,after,disconnect,resource,overview,get,number,registered,slots,is,0
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1482522859;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		String taskExecutorAddress = "/taskExecutor1"__		ResourceID taskExecutorResourceID = mockTaskExecutor(taskExecutorAddress)__		TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__		final ResourceManager resourceManager = createAndStartResourceManager(leaderElectionService)__		final UUID leaderSessionId = grantLeadership(leaderElectionService)___		_		String invalidAddress = "/taskExecutor2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,string,task,executor,address,task,executor1,resource,id,task,executor,resource,id,mock,task,executor,task,executor,address,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,final,resource,manager,resource,manager,create,and,start,resource,manager,leader,election,service,final,uuid,leader,session,id,grant,leadership,leader,election,service,string,invalid,address,task,executor2,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1482522860;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		String taskExecutorAddress = "/taskExecutor1"__		ResourceID taskExecutorResourceID = mockTaskExecutor(taskExecutorAddress)__		TestingLeaderElectionService leaderElectionService = new TestingLeaderElectionService()__		final ResourceManager resourceManager = createAndStartResourceManager(leaderElectionService)__		final UUID leaderSessionId = grantLeadership(leaderElectionService)___		_		String invalidAddress = "/taskExecutor2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,string,task,executor,address,task,executor1,resource,id,task,executor,resource,id,mock,task,executor,task,executor,address,testing,leader,election,service,leader,election,service,new,testing,leader,election,service,final,resource,manager,resource,manager,create,and,start,resource,manager,leader,election,service,final,uuid,leader,session,id,grant,leadership,leader,election,service,string,invalid,address,task,executor2,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1482522861;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		_		String invalidAddress = "/taskExecutor2"__		Future<RegistrationResponse> invalidAddressFuture =_			resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID, slotReport)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,string,invalid,address,task,executor2,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,slot,report,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1482522864;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			Future<RegistrationResponse> invalidAddressFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID, slotReport)__			assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,slot,report,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1482522864;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			Future<RegistrationResponse> invalidAddressFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID, slotReport)__			assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,slot,report,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1489413798;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			Future<RegistrationResponse> invalidAddressFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID, slotReport)__			assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,slot,report,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1490031358;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			Future<RegistrationResponse> invalidAddressFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID, slotReport)__			assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,slot,report,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1490273924;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			Future<RegistrationResponse> invalidAddressFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID, slotReport)__			assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,slot,report,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1490273924;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			Future<RegistrationResponse> invalidAddressFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID, slotReport)__			assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,slot,report,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1493146240;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			Future<RegistrationResponse> invalidAddressFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID, slotReport)__			assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,slot,report,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1493386068;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			Future<RegistrationResponse> invalidAddressFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID, slotReport)__			assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,slot,report,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1501760738;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID, slotReport)__			assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,slot,report,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1502452184;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				resourceManager.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID, slotReport, Time.milliseconds(0L))__			assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,resource,manager,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,slot,report,time,milliseconds,0l,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1502706197;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(leaderSessionId, invalidAddress, taskExecutorResourceID, slotReport, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,leader,session,id,invalid,address,task,executor,resource,id,slot,report,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1504525441;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, slotReport, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,slot,report,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1506034747;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, slotReport, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,slot,report,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1509547920;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, slotReport, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,slot,report,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1510063662;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1511963573;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1515481550;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1517915730;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1519406526;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1522268075;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1522681180;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1526494919;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, slotReport, dataPort, hardwareDescription, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,slot,report,data,port,hardware,description,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1527173115;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, dataPort, hardwareDescription, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,data,port,hardware,description,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1532290976;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, dataPort, hardwareDescription, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,data,port,hardware,description,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1539582211;Test receive registration with invalid address from task executor;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		try {_			_			String invalidAddress = "/taskExecutor2"__			CompletableFuture<RegistrationResponse> invalidAddressFuture =_				rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, dataPort, hardwareDescription, timeout)__			assertTrue(invalidAddressFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__		} finally {_			if (testingFatalErrorHandler.hasExceptionOccurred()) {_				testingFatalErrorHandler.rethrowError()__			}_		}_	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,try,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,data,port,hardware,description,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline,finally,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1550238837;Test receive registration with invalid address from task executor.;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		_		String invalidAddress = "/taskExecutor2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture =_			rmGateway.registerTaskExecutor(invalidAddress, taskExecutorResourceID, dataPort, hardwareDescription, TIMEOUT)__		assertTrue(invalidAddressFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,rm,gateway,register,task,executor,invalid,address,task,executor,resource,id,data,port,hardware,description,timeout,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1550238838;Test receive registration with invalid address from task executor.;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		_		String invalidAddress = "/taskExecutor2"___		CompletableFuture<RegistrationResponse> invalidAddressFuture = registerTaskExecutor(rmGateway, invalidAddress)__		assertTrue(invalidAddressFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,register,task,executor,rm,gateway,invalid,address,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline
ResourceManagerTaskExecutorTest -> @Test 	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception;1550568581;Test receive registration with invalid address from task executor.;@Test_	public void testRegisterTaskExecutorFromInvalidAddress() throws Exception {_		_		String invalidAddress = "/taskExecutor2"___		CompletableFuture<RegistrationResponse> invalidAddressFuture = registerTaskExecutor(rmGateway, invalidAddress)__		assertTrue(invalidAddressFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,invalid,address,from,task,executor;test,public,void,test,register,task,executor,from,invalid,address,throws,exception,string,invalid,address,task,executor2,completable,future,registration,response,invalid,address,future,register,task,executor,rm,gateway,invalid,address,assert,true,invalid,address,future,get,timeout,to,milliseconds,time,unit,milliseconds,instanceof,registration,response,decline
