commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ResourceID getOwnResourceId() {     return ownResourceId. }
false;public;1;3;;public void setRequestSlotFuture(CompletableFuture<Acknowledge> slotFuture) {     this.slotFutureReference.set(slotFuture). }
false;public;1;3;;public void setCancelSlotConsumer(Consumer<AllocationID> cancelSlotConsumer) {     this.cancelSlotConsumer = cancelSlotConsumer. }
false;public;1;3;;public void setRequestSlotConsumer(Consumer<SlotRequest> slotRequestConsumer) {     this.requestSlotConsumer = slotRequestConsumer. }
false;public;1;3;;public void setRegisterJobManagerConsumer(Consumer<Tuple4<JobMasterId, ResourceID, String, JobID>> registerJobManagerConsumer) {     this.registerJobManagerConsumer = registerJobManagerConsumer. }
false;public;1;3;;public void setDisconnectJobManagerConsumer(Consumer<Tuple2<JobID, Throwable>> disconnectJobManagerConsumer) {     this.disconnectJobManagerConsumer = disconnectJobManagerConsumer. }
false;public;1;3;;public void setRegisterTaskExecutorFunction(Function<Tuple4<String, ResourceID, Integer, HardwareDescription>, CompletableFuture<RegistrationResponse>> registerTaskExecutorFunction) {     this.registerTaskExecutorFunction = registerTaskExecutorFunction. }
false;public;1;3;;public void setRequestTaskManagerFileUploadFunction(Function<Tuple2<ResourceID, FileType>, CompletableFuture<TransientBlobKey>> requestTaskManagerFileUploadFunction) {     this.requestTaskManagerFileUploadFunction = requestTaskManagerFileUploadFunction. }
false;public;1;3;;public void setDisconnectTaskExecutorConsumer(Consumer<Tuple2<ResourceID, Throwable>> disconnectTaskExecutorConsumer) {     this.disconnectTaskExecutorConsumer = disconnectTaskExecutorConsumer. }
false;public;1;3;;public void setSendSlotReportFunction(Function<Tuple3<ResourceID, InstanceID, SlotReport>, CompletableFuture<Acknowledge>> sendSlotReportFunction) {     this.sendSlotReportFunction = sendSlotReportFunction. }
false;public;1;3;;public void setTaskExecutorHeartbeatConsumer(BiConsumer<ResourceID, SlotReport> taskExecutorHeartbeatConsumer) {     this.taskExecutorHeartbeatConsumer = taskExecutorHeartbeatConsumer. }
false;public;1;3;;public void setNotifySlotAvailableConsumer(Consumer<Tuple3<InstanceID, SlotID, AllocationID>> notifySlotAvailableConsumer) {     this.notifySlotAvailableConsumer = notifySlotAvailableConsumer. }
false;public;5;13;;@Override public CompletableFuture<RegistrationResponse> registerJobManager(JobMasterId jobMasterId, ResourceID jobMasterResourceId, String jobMasterAddress, JobID jobId, Time timeout) {     final Consumer<Tuple4<JobMasterId, ResourceID, String, JobID>> currentConsumer = registerJobManagerConsumer.     if (currentConsumer != null) {         currentConsumer.accept(Tuple4.of(jobMasterId, jobMasterResourceId, jobMasterAddress, jobId)).     }     return CompletableFuture.completedFuture(new JobMasterRegistrationSuccess(resourceManagerId, ownResourceId)). }
false;public;3;16;;@Override public CompletableFuture<Acknowledge> requestSlot(JobMasterId jobMasterId, SlotRequest slotRequest, Time timeout) {     Consumer<SlotRequest> currentRequestSlotConsumer = requestSlotConsumer.     if (currentRequestSlotConsumer != null) {         currentRequestSlotConsumer.accept(slotRequest).     }     CompletableFuture<Acknowledge> slotFuture = slotFutureReference.getAndSet(null).     if (slotFuture != null) {         return slotFuture.     } else {         return CompletableFuture.completedFuture(Acknowledge.get()).     } }
false;public;1;8;;@Override public void cancelSlotRequest(AllocationID allocationID) {     Consumer<AllocationID> currentCancelSlotConsumer = cancelSlotConsumer.     if (currentCancelSlotConsumer != null) {         currentCancelSlotConsumer.accept(allocationID).     } }
false;public;4;10;;@Override public CompletableFuture<Acknowledge> sendSlotReport(ResourceID taskManagerResourceId, InstanceID taskManagerRegistrationId, SlotReport slotReport, Time timeout) {     final Function<Tuple3<ResourceID, InstanceID, SlotReport>, CompletableFuture<Acknowledge>> currentSendSlotReportFunction = sendSlotReportFunction.     if (currentSendSlotReportFunction != null) {         return currentSendSlotReportFunction.apply(Tuple3.of(taskManagerResourceId, taskManagerRegistrationId, slotReport)).     } else {         return CompletableFuture.completedFuture(Acknowledge.get()).     } }
false;public;5;14;;@Override public CompletableFuture<RegistrationResponse> registerTaskExecutor(String taskExecutorAddress, ResourceID resourceId, int dataPort, HardwareDescription hardwareDescription, Time timeout) {     final Function<Tuple4<String, ResourceID, Integer, HardwareDescription>, CompletableFuture<RegistrationResponse>> currentFunction = registerTaskExecutorFunction.     if (currentFunction != null) {         return currentFunction.apply(Tuple4.of(taskExecutorAddress, resourceId, dataPort, hardwareDescription)).     } else {         return CompletableFuture.completedFuture(new TaskExecutorRegistrationSuccess(new InstanceID(), ownResourceId, new ClusterInformation("localhost", 1234))).     } }
false;public;3;8;;@Override public void notifySlotAvailable(InstanceID instanceId, SlotID slotID, AllocationID oldAllocationId) {     final Consumer<Tuple3<InstanceID, SlotID, AllocationID>> currentNotifySlotAvailableConsumer = notifySlotAvailableConsumer.     if (currentNotifySlotAvailableConsumer != null) {         currentNotifySlotAvailableConsumer.accept(Tuple3.of(instanceId, slotID, oldAllocationId)).     } }
false;public;1;4;;@Override public void registerInfoMessageListener(String infoMessageListenerAddress) { }
false;public;1;4;;@Override public void unRegisterInfoMessageListener(String infoMessageListenerAddress) { }
false;public;2;4;;@Override public CompletableFuture<Acknowledge> deregisterApplication(ApplicationStatus finalStatus, String diagnostics) {     return CompletableFuture.completedFuture(Acknowledge.get()). }
false;public;0;4;;@Override public CompletableFuture<Integer> getNumberOfRegisteredTaskManagers() {     return CompletableFuture.completedFuture(0). }
false;public;2;8;;@Override public void heartbeatFromTaskManager(ResourceID heartbeatOrigin, SlotReport slotReport) {     final BiConsumer<ResourceID, SlotReport> currentTaskExecutorHeartbeatConsumer = taskExecutorHeartbeatConsumer.     if (currentTaskExecutorHeartbeatConsumer != null) {         currentTaskExecutorHeartbeatConsumer.accept(heartbeatOrigin, slotReport).     } }
false;public;1;4;;@Override public void heartbeatFromJobManager(ResourceID heartbeatOrigin) { }
false;public;2;8;;@Override public void disconnectTaskManager(ResourceID resourceID, Exception cause) {     final Consumer<Tuple2<ResourceID, Throwable>> currentConsumer = disconnectTaskExecutorConsumer.     if (currentConsumer != null) {         currentConsumer.accept(Tuple2.of(resourceID, cause)).     } }
false;public;2;8;;@Override public void disconnectJobManager(JobID jobId, Exception cause) {     final Consumer<Tuple2<JobID, Throwable>> currentConsumer = disconnectJobManagerConsumer.     if (currentConsumer != null) {         currentConsumer.accept(Tuple2.of(jobId, cause)).     } }
false;public;1;4;;@Override public CompletableFuture<Collection<TaskManagerInfo>> requestTaskManagerInfo(Time timeout) {     return CompletableFuture.completedFuture(Collections.emptyList()). }
false;public;2;4;;@Override public CompletableFuture<TaskManagerInfo> requestTaskManagerInfo(ResourceID resourceId, Time timeout) {     return FutureUtils.completedExceptionally(new UnsupportedOperationException("Not yet implemented")). }
false;public;1;4;;@Override public CompletableFuture<ResourceOverview> requestResourceOverview(Time timeout) {     return CompletableFuture.completedFuture(new ResourceOverview(1, 1, 1)). }
false;public;1;4;;@Override public CompletableFuture<Collection<Tuple2<ResourceID, String>>> requestTaskManagerMetricQueryServicePaths(Time timeout) {     return CompletableFuture.completedFuture(Collections.emptyList()). }
false;public;3;10;;@Override public CompletableFuture<TransientBlobKey> requestTaskManagerFileUpload(ResourceID taskManagerId, FileType fileType, Time timeout) {     final Function<Tuple2<ResourceID, FileType>, CompletableFuture<TransientBlobKey>> function = requestTaskManagerFileUploadFunction.     if (function != null) {         return function.apply(Tuple2.of(taskManagerId, fileType)).     } else {         return CompletableFuture.completedFuture(new TransientBlobKey()).     } }
false;public;0;4;;@Override public ResourceManagerId getFencingToken() {     return resourceManagerId. }
false;public;0;4;;@Override public String getAddress() {     return address. }
false;public;0;4;;@Override public String getHostname() {     return hostname. }
