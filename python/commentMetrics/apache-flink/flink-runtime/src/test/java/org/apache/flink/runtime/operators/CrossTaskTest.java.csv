commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;@Test public void testBlock1CrossTask() {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 100.     int valCnt2 = 4.     final int expCnt = keyCnt1 * valCnt1 * keyCnt2 * valCnt2.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_BLOCKED_OUTER_FIRST).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     try {         testDriver(testTask, MockCrossStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test failed due to an exception.").     }     Assert.assertEquals("Wrong result size.", expCnt, this.output.getNumberOfRecords()). }
false;public;0;28;;@Test public void testBlock2CrossTask() {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 100.     int valCnt2 = 4.     final int expCnt = keyCnt1 * valCnt1 * keyCnt2 * valCnt2.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_BLOCKED_OUTER_SECOND).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     try {         testDriver(testTask, MockCrossStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test failed due to an exception.").     }     Assert.assertEquals("Wrong result size.", expCnt, this.output.getNumberOfRecords()). }
false;public;0;29;;@Test public void testFailingBlockCrossTask() {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 100.     int valCnt2 = 4.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_BLOCKED_OUTER_FIRST).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     try {         testDriver(testTask, MockFailingCrossStub.class).         Assert.fail("Exception not forwarded.").     } catch (ExpectedTestException etex) {     // good!     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test failed due to an exception.").     } }
false;public;0;29;;@Test public void testFailingBlockCrossTask2() {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 100.     int valCnt2 = 4.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_BLOCKED_OUTER_SECOND).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     try {         testDriver(testTask, MockFailingCrossStub.class).         Assert.fail("Exception not forwarded.").     } catch (ExpectedTestException etex) {     // good!     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test failed due to an exception.").     } }
false;public;0;30;;@Test public void testStream1CrossTask() {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 100.     int valCnt2 = 4.     final int expCnt = keyCnt1 * valCnt1 * keyCnt2 * valCnt2.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_STREAMED_OUTER_FIRST).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     try {         testDriver(testTask, MockCrossStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test failed due to an exception.").     }     Assert.assertEquals("Wrong result size.", expCnt, this.output.getNumberOfRecords()). }
false;public;0;29;;@Test public void testStream2CrossTask() {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 100.     int valCnt2 = 4.     final int expCnt = keyCnt1 * valCnt1 * keyCnt2 * valCnt2.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_STREAMED_OUTER_SECOND).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     try {         testDriver(testTask, MockCrossStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test failed due to an exception.").     }     Assert.assertEquals("Wrong result size.", expCnt, this.output.getNumberOfRecords()). }
false;public;0;28;;@Test public void testFailingStreamCrossTask() {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 100.     int valCnt2 = 4.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_STREAMED_OUTER_FIRST).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     try {         testDriver(testTask, MockFailingCrossStub.class).         Assert.fail("Exception not forwarded.").     } catch (ExpectedTestException etex) {     // good!     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test failed due to an exception.").     } }
false;public;0;28;;@Test public void testFailingStreamCrossTask2() {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 100.     int valCnt2 = 4.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_STREAMED_OUTER_SECOND).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     try {         testDriver(testTask, MockFailingCrossStub.class).         Assert.fail("Exception not forwarded.").     } catch (ExpectedTestException etex) {     // good!     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test failed due to an exception.").     } }
false;public;0;29;;@Test public void testStreamEmptyInnerCrossTask() {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 0.     int valCnt2 = 0.     final int expCnt = keyCnt1 * valCnt1 * keyCnt2 * valCnt2.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_STREAMED_OUTER_FIRST).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     try {         testDriver(testTask, MockCrossStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test failed due to an exception.").     }     Assert.assertEquals("Wrong result size.", expCnt, this.output.getNumberOfRecords()). }
false;public;0;29;;@Test public void testStreamEmptyOuterCrossTask() {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 0.     int valCnt2 = 0.     final int expCnt = keyCnt1 * valCnt1 * keyCnt2 * valCnt2.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_STREAMED_OUTER_SECOND).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     try {         testDriver(testTask, MockCrossStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test failed due to an exception.").     }     Assert.assertEquals("Wrong result size.", expCnt, this.output.getNumberOfRecords()). }
false;public;0;29;;@Test public void testBlockEmptyInnerCrossTask() {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 0.     int valCnt2 = 0.     final int expCnt = keyCnt1 * valCnt1 * keyCnt2 * valCnt2.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_BLOCKED_OUTER_FIRST).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     try {         testDriver(testTask, MockCrossStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test failed due to an exception.").     }     Assert.assertEquals("Wrong result size.", expCnt, this.output.getNumberOfRecords()). }
false;public;0;29;;@Test public void testBlockEmptyOuterCrossTask() {     int keyCnt1 = 10.     int valCnt1 = 1.     int keyCnt2 = 0.     int valCnt2 = 0.     final int expCnt = keyCnt1 * valCnt1 * keyCnt2 * valCnt2.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt1, valCnt1, false)).     addInput(new UniformRecordGenerator(keyCnt2, valCnt2, false)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_BLOCKED_OUTER_SECOND).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     try {         testDriver(testTask, MockCrossStub.class).     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Test failed due to an exception.").     }     Assert.assertEquals("Wrong result size.", expCnt, this.output.getNumberOfRecords()). }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockCrossStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;42;;@Test public void testCancelBlockCrossTaskInit() {     int keyCnt = 10.     int valCnt = 1.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addInput(new DelayingInfinitiveInputIterator(100)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_BLOCKED_OUTER_FIRST).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     final AtomicBoolean success = new AtomicBoolean(false).     Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockCrossStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(1, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     }     Assert.assertTrue("Exception was thrown despite proper canceling.", success.get()). }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockCrossStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;42;;@Test public void testCancelBlockCrossTaskCrossing() {     int keyCnt = 10.     int valCnt = 1.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addInput(new DelayingInfinitiveInputIterator(100)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_BLOCKED_OUTER_SECOND).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     final AtomicBoolean success = new AtomicBoolean(false).     Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockCrossStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(1, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     }     Assert.assertTrue("Exception was thrown despite proper canceling.", success.get()). }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockCrossStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;42;;@Test public void testCancelStreamCrossTaskInit() {     int keyCnt = 10.     int valCnt = 1.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addInput(new DelayingInfinitiveInputIterator(100)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_STREAMED_OUTER_FIRST).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     final AtomicBoolean success = new AtomicBoolean(false).     Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockCrossStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(1, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     }     Assert.assertTrue("Exception was thrown despite proper canceling.", success.get()). }
false;public;0;9;;@Override public void run() {     try {         testDriver(testTask, MockCrossStub.class).         success.set(true).     } catch (Exception ie) {         ie.printStackTrace().     } }
false;public;0;42;;@Test public void testCancelStreamCrossTaskCrossing() {     int keyCnt = 10.     int valCnt = 1.     setOutput(this.output).     addInput(new UniformRecordGenerator(keyCnt, valCnt, false)).     addInput(new DelayingInfinitiveInputIterator(100)).     getTaskConfig().setDriverStrategy(DriverStrategy.NESTEDLOOP_STREAMED_OUTER_SECOND).     getTaskConfig().setRelativeMemoryDriver(cross_frac).     final CrossDriver<Record, Record, Record> testTask = new CrossDriver<>().     final AtomicBoolean success = new AtomicBoolean(false).     Thread taskRunner = new Thread() {          @Override         public void run() {             try {                 testDriver(testTask, MockCrossStub.class).                 success.set(true).             } catch (Exception ie) {                 ie.printStackTrace().             }         }     }.     taskRunner.start().     TaskCancelThread tct = new TaskCancelThread(1, taskRunner, this).     tct.start().     try {         tct.join().         taskRunner.join().     } catch (InterruptedException ie) {         Assert.fail("Joining threads failed").     }     Assert.assertTrue("Exception was thrown despite proper canceling.", success.get()). }
false;public;2;4;;@Override public Record cross(Record record1, Record record2) throws Exception {     return record1. }
false;public;2;7;;@Override public Record cross(Record record1, Record record2) {     if (++this.cnt >= 10) {         throw new ExpectedTestException().     }     return record1. }
