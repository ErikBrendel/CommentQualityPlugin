commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setJobIdsFunction(FunctionWithException<Collection<JobID>, Collection<JobID>, ? extends Exception> jobIdsFunction) {     this.jobIdsFunction = Preconditions.checkNotNull(jobIdsFunction). }
false;public;1;3;;public void setRecoverJobGraphFunction(BiFunctionWithException<JobID, Map<JobID, SubmittedJobGraph>, SubmittedJobGraph, ? extends Exception> recoverJobGraphFunction) {     this.recoverJobGraphFunction = Preconditions.checkNotNull(recoverJobGraphFunction). }
false;public,synchronized;1;4;;@Override public synchronized void start(@Nullable SubmittedJobGraphListener jobGraphListener) throws Exception {     started = true. }
false;public,synchronized;0;4;;@Override public synchronized void stop() throws Exception {     started = false. }
false;public,synchronized;1;12;;@Override public synchronized SubmittedJobGraph recoverJobGraph(JobID jobId) throws Exception {     verifyIsStarted().     if (recoverJobGraphFunction != null) {         return recoverJobGraphFunction.apply(jobId, storedJobs).     } else {         return requireNonNull(storedJobs.get(jobId), "Job graph for job " + jobId + " does not exist").     } }
false;public,synchronized;1;5;;@Override public synchronized void putJobGraph(SubmittedJobGraph jobGraph) throws Exception {     verifyIsStarted().     storedJobs.put(jobGraph.getJobId(), jobGraph). }
false;public,synchronized;1;5;;@Override public synchronized void removeJobGraph(JobID jobId) throws Exception {     verifyIsStarted().     storedJobs.remove(jobId). }
false;public;1;4;;@Override public void releaseJobGraph(JobID jobId) {     verifyIsStarted(). }
false;public,synchronized;0;10;;@Override public synchronized Collection<JobID> getJobIds() throws Exception {     verifyIsStarted().     if (jobIdsFunction != null) {         return jobIdsFunction.apply(storedJobs.keySet()).     } else {         return Collections.unmodifiableSet(new HashSet<>(storedJobs.keySet())).     } }
false;public,synchronized;1;3;;public synchronized boolean contains(JobID jobId) {     return storedJobs.containsKey(jobId). }
false;private;0;3;;private void verifyIsStarted() {     Preconditions.checkState(started, "Not running. Forgot to call start()?"). }
