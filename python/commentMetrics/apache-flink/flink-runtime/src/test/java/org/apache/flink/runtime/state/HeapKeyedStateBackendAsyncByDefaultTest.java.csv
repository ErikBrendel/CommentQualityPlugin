commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testConfigOptionDefaultsToAsync() {     assertTrue(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue()). }
false;public;0;7;;@Test public void testFsStateBackendDefaultsToAsync() throws Exception {     FsStateBackend backend = new FsStateBackend(tmpFolder.newFolder().toURI()).     assertTrue(backend.isUsingAsynchronousSnapshots()).     validateSupportForAsyncSnapshots(backend). }
false;public;0;7;;@Test public void testMemoryStateBackendDefaultsToAsync() throws Exception {     MemoryStateBackend backend = new MemoryStateBackend().     assertTrue(backend.isUsingAsynchronousSnapshots()).     validateSupportForAsyncSnapshots(backend). }
false;private;1;18;;private void validateSupportForAsyncSnapshots(StateBackend backend) throws Exception {     AbstractKeyedStateBackend<Integer> keyedStateBackend = backend.createKeyedStateBackend(new DummyEnvironment("Test", 1, 0), new JobID(), "testOperator", IntSerializer.INSTANCE, 1, new KeyGroupRange(0, 0), null, TtlTimeProvider.DEFAULT).     assertTrue(keyedStateBackend.supportsAsynchronousSnapshots()).     IOUtils.closeQuietly(keyedStateBackend).     keyedStateBackend.dispose(). }
