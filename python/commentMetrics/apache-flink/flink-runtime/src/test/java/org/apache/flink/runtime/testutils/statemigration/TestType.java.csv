commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getKey() {     return key. }
false;public;0;3;;public int getValue() {     return value. }
false;public;1;4;;@Override public int comparePriorityTo(@Nonnull TestType other) {     return Integer.compare(value, other.value). }
false;public;0;4;;@Override public int getInternalIndex() {     return index. }
false;public;1;4;;@Override public void setInternalIndex(int newIndex) {     this.index = newIndex. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == null || !(obj instanceof TestType)) {         return false.     }     if (obj == this) {         return true.     }     TestType other = (TestType) obj.     return Objects.equals(key, other.key) && value == other.value. }
false;public;0;4;;@Override public int hashCode() {     return 31 * key.hashCode() + value. }
false;public;2;5;;@Override public void serialize(TestType record, DataOutputView target) throws IOException {     target.writeUTF(record.getKey()).     target.writeInt(record.getValue()). }
false;public;1;4;;@Override public TestType deserialize(DataInputView source) throws IOException {     return new TestType(source.readUTF(), source.readInt()). }
false;public;0;4;;@Override public TypeSerializerSnapshot<TestType> snapshotConfiguration() {     return new V1TestTypeSerializerSnapshot(). }
false;public;2;7;;@Override public void serialize(TestType record, DataOutputView target) throws IOException {     target.writeUTF(record.getKey()).     target.writeUTF(RANDOM_PAYLOAD).     target.writeInt(record.getValue()).     target.writeBoolean(true). }
false;public;1;9;;@Override public TestType deserialize(DataInputView source) throws IOException {     String key = source.readUTF().     Assert.assertEquals(RANDOM_PAYLOAD, source.readUTF()).     int value = source.readInt().     Assert.assertTrue(source.readBoolean()).     return new TestType(key, value). }
false;public;0;4;;@Override public TypeSerializerSnapshot<TestType> snapshotConfiguration() {     return new V1TestTypeSerializerSnapshot(). }
false;public;2;4;;@Override public void serialize(TestType record, DataOutputView target) throws IOException {     throw new UnsupportedOperationException("The serializer should have been reconfigured as a new instance. shouldn't be used."). }
false;public;1;4;;@Override public TestType deserialize(DataInputView source) throws IOException {     throw new UnsupportedOperationException("The serializer should have been reconfigured as a new instance. shouldn't be used."). }
false;public;0;4;;@Override public TypeSerializerSnapshot<TestType> snapshotConfiguration() {     throw new UnsupportedOperationException("The serializer should have been reconfigured as a new instance. shouldn't be used."). }
false;public;2;4;;@Override public void serialize(TestType record, DataOutputView target) throws IOException {     throw new UnsupportedOperationException("This is an incompatible serializer. shouldn't be used."). }
false;public;1;4;;@Override public TestType deserialize(DataInputView source) throws IOException {     throw new UnsupportedOperationException("This is an incompatible serializer. shouldn't be used."). }
false;public;0;4;;@Override public TypeSerializerSnapshot<TestType> snapshotConfiguration() {     throw new UnsupportedOperationException("This is an incompatible serializer. shouldn't be used."). }
false;public;1;4;;// -------------------------------------------------------------------------------- // Miscellaneous serializer methods // -------------------------------------------------------------------------------- @Override public TestType copy(TestType from) {     return new TestType(from.getKey(), from.getValue()). }
false;public;2;4;;@Override public void copy(DataInputView source, DataOutputView target) throws IOException {     serialize(deserialize(source), target). }
false;public;2;4;;@Override public TestType deserialize(TestType reuse, DataInputView source) throws IOException {     return deserialize(source). }
false;public;2;4;;@Override public TestType copy(TestType from, TestType reuse) {     return copy(from). }
false;public;0;4;;@Override public TestType createInstance() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public TypeSerializer<TestType> duplicate() {     return this. }
false;public;0;4;;@Override public boolean isImmutableType() {     return false. }
false;public;0;4;;@Override public int getLength() {     return -1. }
false;public;0;4;;@Override public int hashCode() {     return getClass().hashCode(). }
false;public;1;4;;@Override public boolean equals(Object obj) {     return obj == this. }
