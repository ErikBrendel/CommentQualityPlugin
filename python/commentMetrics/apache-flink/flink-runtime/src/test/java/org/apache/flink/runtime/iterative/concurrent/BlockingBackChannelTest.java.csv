commented;modifiers;parameterAmount;loc;comment;code
false;public;0;38;;@Test public void multiThreaded() throws InterruptedException {     BlockingQueue<Integer> dataChannel = new ArrayBlockingQueue<Integer>(1).     List<String> actionLog = new ArrayList<>().     SerializedUpdateBuffer buffer = Mockito.mock(SerializedUpdateBuffer.class).     BlockingBackChannel channel = new BlockingBackChannel(buffer).     Thread head = new Thread(new IterationHead(channel, dataChannel, actionLog)).     Thread tail = new Thread(new IterationTail(channel, dataChannel, actionLog)).     tail.start().     head.start().     head.join().     tail.join().     // int action = 0.     // for (String log : actionLog) {     // System.out.println("ACTION " + (++action) + ": " + log).     // }     assertEquals(12, actionLog.size()).     assertEquals("head sends data", actionLog.get(0)).     assertEquals("tail receives data", actionLog.get(1)).     assertEquals("tail writes in iteration 0", actionLog.get(2)).     assertEquals("head reads in iteration 0", actionLog.get(3)).     assertEquals("head sends data", actionLog.get(4)).     assertEquals("tail receives data", actionLog.get(5)).     assertEquals("tail writes in iteration 1", actionLog.get(6)).     assertEquals("head reads in iteration 1", actionLog.get(7)).     assertEquals("head sends data", actionLog.get(8)).     assertEquals("tail receives data", actionLog.get(9)).     assertEquals("tail writes in iteration 2", actionLog.get(10)).     assertEquals("head reads in iteration 2", actionLog.get(11)). }
false;public;0;17;;@Override public void run() {     processInputAndSendMessageThroughDataChannel().     for (int n = 0. n < NUM_ITERATIONS. n++) {         try {             backChannel.getReadEndAfterSuperstepEnded().             actionLog.add("head reads in iteration " + n).             Thread.sleep(random.nextInt(100)).             // we don't send through the data channel in the last iteration, we would send to the output task             if (n != NUM_ITERATIONS - 1) {                 processInputAndSendMessageThroughDataChannel().             }         } catch (InterruptedException e) {             throw new RuntimeException(e).         }     } }
false;;0;4;;void processInputAndSendMessageThroughDataChannel() {     actionLog.add("head sends data").     dataChannel.offer(INPUT_COMPLETELY_PROCESSED_MESSAGE). }
false;public;0;16;;@Override public void run() {     try {         for (int n = 0. n < NUM_ITERATIONS. n++) {             DataOutputView writeEnd = backChannel.getWriteEnd().             readInputFromDataChannel().             Thread.sleep(random.nextInt(10)).             DataInputView inputView = Mockito.mock(DataInputView.class).             actionLog.add("tail writes in iteration " + n).             writeEnd.write(inputView, 1).             backChannel.notifyOfEndOfSuperstep().         }     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;;0;4;;void readInputFromDataChannel() throws InterruptedException {     dataChannel.take().     actionLog.add("tail receives data"). }
