commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;5;/**  * Creates a configuration to operate in {@link HighAvailabilityMode#ZOOKEEPER}.  *  * @param zooKeeperQuorum   ZooKeeper quorum to connect to  * @param fsStateHandlePath Base path for file system state backend (for checkpoints and  *                          recovery)  * @return A new configuration to operate in {@link HighAvailabilityMode#ZOOKEEPER}.  */ ;/**  * Creates a configuration to operate in {@link HighAvailabilityMode#ZOOKEEPER}.  *  * @param zooKeeperQuorum   ZooKeeper quorum to connect to  * @param fsStateHandlePath Base path for file system state backend (for checkpoints and  *                          recovery)  * @return A new configuration to operate in {@link HighAvailabilityMode#ZOOKEEPER}.  */ public static Configuration createZooKeeperHAConfig(String zooKeeperQuorum, String fsStateHandlePath) {     return configureZooKeeperHA(new Configuration(), zooKeeperQuorum, fsStateHandlePath). }
true;public,static;3;36;/**  * Sets all necessary configuration keys to operate in {@link HighAvailabilityMode#ZOOKEEPER}.  *  * @param config            Configuration to use  * @param zooKeeperQuorum   ZooKeeper quorum to connect to  * @param fsStateHandlePath Base path for file system state backend (for checkpoints and  *                          recovery)  * @return The modified configuration to operate in {@link HighAvailabilityMode#ZOOKEEPER}.  */ ;/**  * Sets all necessary configuration keys to operate in {@link HighAvailabilityMode#ZOOKEEPER}.  *  * @param config            Configuration to use  * @param zooKeeperQuorum   ZooKeeper quorum to connect to  * @param fsStateHandlePath Base path for file system state backend (for checkpoints and  *                          recovery)  * @return The modified configuration to operate in {@link HighAvailabilityMode#ZOOKEEPER}.  */ public static Configuration configureZooKeeperHA(Configuration config, String zooKeeperQuorum, String fsStateHandlePath) {     checkNotNull(config, "Configuration").     checkNotNull(zooKeeperQuorum, "ZooKeeper quorum").     checkNotNull(fsStateHandlePath, "File state handle backend path").     // ZooKeeper recovery mode     config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER").     config.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM, zooKeeperQuorum).     int connTimeout = 5000.     if (System.getenv().containsKey("CI")) {         // The regular timeout is to aggressive for Travis and connections are often lost.         connTimeout = 30000.     }     config.setInteger(HighAvailabilityOptions.ZOOKEEPER_CONNECTION_TIMEOUT, connTimeout).     config.setInteger(HighAvailabilityOptions.ZOOKEEPER_SESSION_TIMEOUT, connTimeout).     // File system state backend     config.setString(CheckpointingOptions.STATE_BACKEND, "FILESYSTEM").     config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY, fsStateHandlePath + "/checkpoints").     config.setString(HighAvailabilityOptions.HA_STORAGE_PATH, fsStateHandlePath + "/recovery").     // Akka failure detection and execution retries     config.setString(AkkaOptions.WATCH_HEARTBEAT_INTERVAL, "1000 ms").     config.setString(AkkaOptions.WATCH_HEARTBEAT_PAUSE, "6 s").     config.setInteger(AkkaOptions.WATCH_THRESHOLD, 9).     config.setString(AkkaOptions.ASK_TIMEOUT, "100 s").     config.setString(HighAvailabilityOptions.HA_JOB_DELAY, "10 s").     return config. }
