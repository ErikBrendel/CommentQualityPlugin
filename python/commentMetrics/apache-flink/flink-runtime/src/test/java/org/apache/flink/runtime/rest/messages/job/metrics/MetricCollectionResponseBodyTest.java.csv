commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected Class<MetricCollectionResponseBody> getTestResponseClass() {     return MetricCollectionResponseBody.class. }
false;protected;0;6;;@Override protected MetricCollectionResponseBody getTestResponseInstance() {     return new MetricCollectionResponseBody(Collections.singleton(new Metric(TEST_METRIC_NAME, TEST_METRIC_VALUE))). }
false;protected;2;11;;@Override protected void assertOriginalEqualsToUnmarshalled(MetricCollectionResponseBody expected, MetricCollectionResponseBody actual) {     assertThat(actual.getMetrics(), hasSize(1)).     final Metric metric = actual.getMetrics().iterator().next().     assertThat(metric.getId(), equalTo(TEST_METRIC_NAME)).     assertThat(metric.getValue(), equalTo(TEST_METRIC_VALUE)). }
false;public;0;10;;@Test public void testNullValueNotSerialized() throws Exception {     final String json = RestMapperUtils.getStrictObjectMapper().writeValueAsString(new MetricCollectionResponseBody(Collections.singleton(new Metric(TEST_METRIC_NAME)))).     assertThat(json, not(containsString("\"value\""))).     assertThat(json, not(containsString("\"metrics\""))). }
