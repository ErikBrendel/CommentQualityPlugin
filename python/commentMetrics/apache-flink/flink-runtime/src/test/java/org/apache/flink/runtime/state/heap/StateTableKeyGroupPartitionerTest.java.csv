commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;27;;@SuppressWarnings("unchecked") @Override protected StateTableEntry<Integer, VoidNamespace, Integer>[] generateTestInput(Random random, int numElementsToGenerate, Set<StateTableEntry<Integer, VoidNamespace, Integer>> allElementsIdentitySet) {     // we let the array size differ a bit from the test size to check this works     final int arraySize = numElementsToGenerate > 1 ? numElementsToGenerate + 5 : numElementsToGenerate.     final StateTableEntry<Integer, VoidNamespace, Integer>[] data = new StateTableEntry[arraySize].     while (numElementsToGenerate > 0) {         final int generateAsChainCount = Math.min(1 + random.nextInt(3), numElementsToGenerate).         StateTableEntry<Integer, VoidNamespace, Integer> element = null.         for (int i = 0. i < generateAsChainCount. ++i) {             element = generateElement(random, element).             allElementsIdentitySet.add(element).         }         data[data.length - numElementsToGenerate + random.nextInt(generateAsChainCount)] = element.         numElementsToGenerate -= generateAsChainCount.     }     return data. }
false;protected;5;16;;@Override protected KeyGroupPartitioner<StateTableEntry<Integer, VoidNamespace, Integer>> createPartitioner(StateTableEntry<Integer, VoidNamespace, Integer>[] data, int numElements, KeyGroupRange keyGroupRange, int totalKeyGroups, KeyGroupPartitioner.ElementWriterFunction<StateTableEntry<Integer, VoidNamespace, Integer>> elementWriterFunction) {     return new CopyOnWriteStateTableSnapshot.StateTableKeyGroupPartitioner<>(data, numElements, keyGroupRange, totalKeyGroups, elementWriterFunction). }
false;private,static;2;14;;private static StateTableEntry<Integer, VoidNamespace, Integer> generateElement(@Nonnull Random random, @Nullable StateTableEntry<Integer, VoidNamespace, Integer> next) {     Integer generatedKey = random.nextInt() & Integer.MAX_VALUE.     return new StateTableEntry<>(generatedKey, VoidNamespace.INSTANCE, random.nextInt(), generatedKey.hashCode(), next, 0, 0). }
