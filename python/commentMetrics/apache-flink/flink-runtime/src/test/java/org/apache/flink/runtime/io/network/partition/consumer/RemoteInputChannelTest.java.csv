# id;timestamp;commentText;codeText;commentWords;codeWords
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1515408360;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycle()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1515408360;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycle()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1516285456;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycle()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1516285878;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1518785736;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1519834967;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1519834986;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1525116906;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1530785917;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1531388775;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1532012479;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1535633547;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1537385496;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception;1543328832;Requests the floating buffers from pool first and then recycles them by a callable task.__@param bufferPool The buffer pool that floating buffers request from._@param numFloatingBuffers The number of floating buffers to request._@return The callable task to recycle floating buffers.;private Callable<Void> recycleFloatingBufferTask(BufferPool bufferPool, int numFloatingBuffers) throws Exception {_		final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__		_		for (int i = 0_ i < numFloatingBuffers_ i++) {_			Buffer buffer = bufferPool.requestBuffer()__			assertNotNull(buffer)__			floatingBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : floatingBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,floating,buffers,from,pool,first,and,then,recycles,them,by,a,callable,task,param,buffer,pool,the,buffer,pool,that,floating,buffers,request,from,param,num,floating,buffers,the,number,of,floating,buffers,to,request,return,the,callable,task,to,recycle,floating,buffers;private,callable,void,recycle,floating,buffer,task,buffer,pool,buffer,pool,int,num,floating,buffers,throws,exception,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1515408360;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1515408360;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1516285456;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1516285878;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1518785736;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1519834967;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1519834986;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1525116906;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1530785917;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1531388775;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1532012479;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1535633547;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1537385496;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRelease() throws Exception;1543328832;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread releasing_the input channel.;@Test_	public void testConcurrentOnSenderBacklogAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(130, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					while (true) {_						for (int j = 1_ j <= numFloatingBuffers_ j++) {_							inputChannel.onSenderBacklog(j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}_			}___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{requestBufferTask, releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 130 buffers available in local pool.",_				130, bufferPool.getNumberOfAvailableMemorySegments() + networkBufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,on,sender,backlog,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,130,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,while,true,for,int,j,1,j,num,floating,buffers,j,input,channel,on,sender,backlog,j,if,input,channel,is,released,return,null,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,request,buffer,task,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,130,buffers,available,in,local,pool,130,buffer,pool,get,number,of,available,memory,segments,network,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testReleaseExclusiveBuffers() throws Exception;1507647199;Tests {@link RemoteInputChannel#releaseAllResources()}, verifying the exclusive segments are_recycled to global pool via input gate and no resource leak.;@Test_	public void testReleaseExclusiveBuffers() throws Exception {_		_		final SingleInputGate inputGate = mock(SingleInputGate.class)__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)___		_		final List<MemorySegment> exclusiveSegments = new ArrayList<>()__		final int numExclusiveBuffers = 2__		for (int i = 0_ i < numExclusiveBuffers_ i++) {_			exclusiveSegments.add(MemorySegmentFactory.allocateUnpooledSegment(1024, inputChannel))__		}_		inputChannel.assignExclusiveSegments(exclusiveSegments)___		assertEquals("The number of available buffers is not equal to the assigned amount.",_			numExclusiveBuffers, inputChannel.getNumberOfAvailableBuffers())___		_		inputChannel.releaseAllResources()___		assertEquals("Resource leak after channel is released.",_			0, inputChannel.getNumberOfAvailableBuffers())__		verify(inputGate, times(1)).returnExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,link,remote,input,channel,release,all,resources,verifying,the,exclusive,segments,are,recycled,to,global,pool,via,input,gate,and,no,resource,leak;test,public,void,test,release,exclusive,buffers,throws,exception,final,single,input,gate,input,gate,mock,single,input,gate,class,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,final,list,memory,segment,exclusive,segments,new,array,list,final,int,num,exclusive,buffers,2,for,int,i,0,i,num,exclusive,buffers,i,exclusive,segments,add,memory,segment,factory,allocate,unpooled,segment,1024,input,channel,input,channel,assign,exclusive,segments,exclusive,segments,assert,equals,the,number,of,available,buffers,is,not,equal,to,the,assigned,amount,num,exclusive,buffers,input,channel,get,number,of,available,buffers,input,channel,release,all,resources,assert,equals,resource,leak,after,channel,is,released,0,input,channel,get,number,of,available,buffers,verify,input,gate,times,1,return,exclusive,segments,any,list,of,memory,segment,class
RemoteInputChannelTest -> @Test 	public void testReleaseExclusiveBuffers() throws Exception;1513102156;Tests {@link RemoteInputChannel#releaseAllResources()}, verifying the exclusive segments are_recycled to global pool via input gate and no resource leak.;@Test_	public void testReleaseExclusiveBuffers() throws Exception {_		_		final SingleInputGate inputGate = mock(SingleInputGate.class)__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)___		_		final List<MemorySegment> exclusiveSegments = new ArrayList<>()__		final int numExclusiveBuffers = 2__		for (int i = 0_ i < numExclusiveBuffers_ i++) {_			exclusiveSegments.add(MemorySegmentFactory.allocateUnpooledSegment(1024, inputChannel))__		}_		inputChannel.assignExclusiveSegments(exclusiveSegments)___		assertEquals("The number of available buffers is not equal to the assigned amount.",_			numExclusiveBuffers, inputChannel.getNumberOfAvailableBuffers())___		_		inputChannel.releaseAllResources()___		assertEquals("Resource leak after channel is released.",_			0, inputChannel.getNumberOfAvailableBuffers())__		verify(inputGate, times(1)).returnExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,link,remote,input,channel,release,all,resources,verifying,the,exclusive,segments,are,recycled,to,global,pool,via,input,gate,and,no,resource,leak;test,public,void,test,release,exclusive,buffers,throws,exception,final,single,input,gate,input,gate,mock,single,input,gate,class,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,final,list,memory,segment,exclusive,segments,new,array,list,final,int,num,exclusive,buffers,2,for,int,i,0,i,num,exclusive,buffers,i,exclusive,segments,add,memory,segment,factory,allocate,unpooled,segment,1024,input,channel,input,channel,assign,exclusive,segments,exclusive,segments,assert,equals,the,number,of,available,buffers,is,not,equal,to,the,assigned,amount,num,exclusive,buffers,input,channel,get,number,of,available,buffers,input,channel,release,all,resources,assert,equals,resource,leak,after,channel,is,released,0,input,channel,get,number,of,available,buffers,verify,input,gate,times,1,return,exclusive,segments,any,list,of,memory,segment,class
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1515408360;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycle()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycle()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1515408360;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycle()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycle()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1516285456;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycle()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycle()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1516285878;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1518785736;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1519834967;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1519834986;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1525116906;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1530785917;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1531388775;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1532012479;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1535633547;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1537385496;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception;1543328832;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers equals to required buffers.;@Test_	public void testAvailableBuffersEqualToRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)__			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)__			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,equals,to,required,buffers;test,public,void,test,available,buffers,equal,to,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease2() throws Exception;1530785917;Tests to verify that there is no race condition with two things running in parallel:_recycling exclusive buffers and recycling external buffers to the buffer pool while the_recycling of the exclusive buffer triggers recycling a floating buffer (FLINK-9676).;@Test_	public void testConcurrentRecycleAndRelease2() throws Exception {_		_		final int retries = 1_000__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 2__		final int numTotalBuffers = numExclusiveBuffers + numFloatingBuffers__		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			numTotalBuffers, 32)___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> bufferPoolInteractionsTask = () -> {_				for (int i = 0_ i < retries_ ++i) {_					Buffer buffer = bufferPool.requestBufferBlocking()__					buffer.recycleBuffer()__				}_				return null__			}___			final Callable<Void> channelInteractionsTask = () -> {_				ArrayList<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveBuffers)__				ArrayList<Buffer> floatingBuffers = new ArrayList<>(numExclusiveBuffers)__				try {_					for (int i = 0_ i < retries_ ++i) {_						_						_						for (int j = 0_ j < numTotalBuffers_ ++j) {_							Buffer buffer = inputChannel.requestBuffer()__							if (buffer == null) {_								break__							} else {_								_								if (buffer.getRecycler() == inputChannel) {_									exclusiveBuffers.add(buffer)__								} else {_									floatingBuffers.add(buffer)__								}_							}_						}_						_						floatingBuffers.forEach(Buffer::recycleBuffer)__						floatingBuffers.clear()___						assertEquals(numExclusiveBuffers, exclusiveBuffers.size())__						inputChannel.onSenderBacklog(0)_ _						_						exclusiveBuffers.forEach(Buffer::recycleBuffer)__						exclusiveBuffers.clear()__					}_				} finally {_					inputChannel.releaseAllResources()__				}__				return null__			}___			_			submitTasksAndWaitForResults(executor,_				new Callable[] {bufferPoolInteractionsTask, channelInteractionsTask})__		} catch (Throwable t) {_			inputChannel.releaseAllResources()___			try {_				networkBufferPool.destroyAllBufferPools()__			} catch (Throwable tInner) {_				t.addSuppressed(tInner)__			}__			networkBufferPool.destroy()__			executor.shutdown()__			ExceptionUtils.rethrowException(t)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,exclusive,buffers,and,recycling,external,buffers,to,the,buffer,pool,while,the,recycling,of,the,exclusive,buffer,triggers,recycling,a,floating,buffer,flink,9676;test,public,void,test,concurrent,recycle,and,release2,throws,exception,final,int,retries,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,2,final,int,num,total,buffers,num,exclusive,buffers,num,floating,buffers,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,total,buffers,32,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,buffer,pool,interactions,task,for,int,i,0,i,retries,i,buffer,buffer,buffer,pool,request,buffer,blocking,buffer,recycle,buffer,return,null,final,callable,void,channel,interactions,task,array,list,buffer,exclusive,buffers,new,array,list,num,exclusive,buffers,array,list,buffer,floating,buffers,new,array,list,num,exclusive,buffers,try,for,int,i,0,i,retries,i,for,int,j,0,j,num,total,buffers,j,buffer,buffer,input,channel,request,buffer,if,buffer,null,break,else,if,buffer,get,recycler,input,channel,exclusive,buffers,add,buffer,else,floating,buffers,add,buffer,floating,buffers,for,each,buffer,recycle,buffer,floating,buffers,clear,assert,equals,num,exclusive,buffers,exclusive,buffers,size,input,channel,on,sender,backlog,0,exclusive,buffers,for,each,buffer,recycle,buffer,exclusive,buffers,clear,finally,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,buffer,pool,interactions,task,channel,interactions,task,catch,throwable,t,input,channel,release,all,resources,try,network,buffer,pool,destroy,all,buffer,pools,catch,throwable,t,inner,t,add,suppressed,t,inner,network,buffer,pool,destroy,executor,shutdown,exception,utils,rethrow,exception,t
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease2() throws Exception;1531388775;Tests to verify that there is no race condition with two things running in parallel:_recycling exclusive buffers and recycling external buffers to the buffer pool while the_recycling of the exclusive buffer triggers recycling a floating buffer (FLINK-9676).;@Test_	public void testConcurrentRecycleAndRelease2() throws Exception {_		_		final int retries = 1_000__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 2__		final int numTotalBuffers = numExclusiveBuffers + numFloatingBuffers__		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			numTotalBuffers, 32)___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> bufferPoolInteractionsTask = () -> {_				for (int i = 0_ i < retries_ ++i) {_					Buffer buffer = bufferPool.requestBufferBlocking()__					buffer.recycleBuffer()__				}_				return null__			}___			final Callable<Void> channelInteractionsTask = () -> {_				ArrayList<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveBuffers)__				ArrayList<Buffer> floatingBuffers = new ArrayList<>(numExclusiveBuffers)__				try {_					for (int i = 0_ i < retries_ ++i) {_						_						_						for (int j = 0_ j < numTotalBuffers_ ++j) {_							Buffer buffer = inputChannel.requestBuffer()__							if (buffer == null) {_								break__							} else {_								_								if (buffer.getRecycler() == inputChannel) {_									exclusiveBuffers.add(buffer)__								} else {_									floatingBuffers.add(buffer)__								}_							}_						}_						_						floatingBuffers.forEach(Buffer::recycleBuffer)__						floatingBuffers.clear()___						assertEquals(numExclusiveBuffers, exclusiveBuffers.size())__						inputChannel.onSenderBacklog(0)_ _						_						exclusiveBuffers.forEach(Buffer::recycleBuffer)__						exclusiveBuffers.clear()__					}_				} finally {_					inputChannel.releaseAllResources()__				}__				return null__			}___			_			submitTasksAndWaitForResults(executor,_				new Callable[] {bufferPoolInteractionsTask, channelInteractionsTask})__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,exclusive,buffers,and,recycling,external,buffers,to,the,buffer,pool,while,the,recycling,of,the,exclusive,buffer,triggers,recycling,a,floating,buffer,flink,9676;test,public,void,test,concurrent,recycle,and,release2,throws,exception,final,int,retries,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,2,final,int,num,total,buffers,num,exclusive,buffers,num,floating,buffers,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,total,buffers,32,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,buffer,pool,interactions,task,for,int,i,0,i,retries,i,buffer,buffer,buffer,pool,request,buffer,blocking,buffer,recycle,buffer,return,null,final,callable,void,channel,interactions,task,array,list,buffer,exclusive,buffers,new,array,list,num,exclusive,buffers,array,list,buffer,floating,buffers,new,array,list,num,exclusive,buffers,try,for,int,i,0,i,retries,i,for,int,j,0,j,num,total,buffers,j,buffer,buffer,input,channel,request,buffer,if,buffer,null,break,else,if,buffer,get,recycler,input,channel,exclusive,buffers,add,buffer,else,floating,buffers,add,buffer,floating,buffers,for,each,buffer,recycle,buffer,floating,buffers,clear,assert,equals,num,exclusive,buffers,exclusive,buffers,size,input,channel,on,sender,backlog,0,exclusive,buffers,for,each,buffer,recycle,buffer,exclusive,buffers,clear,finally,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,buffer,pool,interactions,task,channel,interactions,task,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease2() throws Exception;1532012479;Tests to verify that there is no race condition with two things running in parallel:_recycling exclusive buffers and recycling external buffers to the buffer pool while the_recycling of the exclusive buffer triggers recycling a floating buffer (FLINK-9676).;@Test_	public void testConcurrentRecycleAndRelease2() throws Exception {_		_		final int retries = 1_000__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 2__		final int numTotalBuffers = numExclusiveBuffers + numFloatingBuffers__		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			numTotalBuffers, 32)___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> bufferPoolInteractionsTask = () -> {_				for (int i = 0_ i < retries_ ++i) {_					Buffer buffer = bufferPool.requestBufferBlocking()__					buffer.recycleBuffer()__				}_				return null__			}___			final Callable<Void> channelInteractionsTask = () -> {_				ArrayList<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveBuffers)__				ArrayList<Buffer> floatingBuffers = new ArrayList<>(numExclusiveBuffers)__				try {_					for (int i = 0_ i < retries_ ++i) {_						_						_						for (int j = 0_ j < numTotalBuffers_ ++j) {_							Buffer buffer = inputChannel.requestBuffer()__							if (buffer == null) {_								break__							} else {_								_								if (buffer.getRecycler() == inputChannel) {_									exclusiveBuffers.add(buffer)__								} else {_									floatingBuffers.add(buffer)__								}_							}_						}_						_						floatingBuffers.forEach(Buffer::recycleBuffer)__						floatingBuffers.clear()___						assertEquals(numExclusiveBuffers, exclusiveBuffers.size())__						inputChannel.onSenderBacklog(0)_ _						_						exclusiveBuffers.forEach(Buffer::recycleBuffer)__						exclusiveBuffers.clear()__					}_				} finally {_					inputChannel.releaseAllResources()__				}__				return null__			}___			_			submitTasksAndWaitForResults(executor,_				new Callable[] {bufferPoolInteractionsTask, channelInteractionsTask})__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,exclusive,buffers,and,recycling,external,buffers,to,the,buffer,pool,while,the,recycling,of,the,exclusive,buffer,triggers,recycling,a,floating,buffer,flink,9676;test,public,void,test,concurrent,recycle,and,release2,throws,exception,final,int,retries,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,2,final,int,num,total,buffers,num,exclusive,buffers,num,floating,buffers,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,total,buffers,32,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,buffer,pool,interactions,task,for,int,i,0,i,retries,i,buffer,buffer,buffer,pool,request,buffer,blocking,buffer,recycle,buffer,return,null,final,callable,void,channel,interactions,task,array,list,buffer,exclusive,buffers,new,array,list,num,exclusive,buffers,array,list,buffer,floating,buffers,new,array,list,num,exclusive,buffers,try,for,int,i,0,i,retries,i,for,int,j,0,j,num,total,buffers,j,buffer,buffer,input,channel,request,buffer,if,buffer,null,break,else,if,buffer,get,recycler,input,channel,exclusive,buffers,add,buffer,else,floating,buffers,add,buffer,floating,buffers,for,each,buffer,recycle,buffer,floating,buffers,clear,assert,equals,num,exclusive,buffers,exclusive,buffers,size,input,channel,on,sender,backlog,0,exclusive,buffers,for,each,buffer,recycle,buffer,exclusive,buffers,clear,finally,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,buffer,pool,interactions,task,channel,interactions,task,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease2() throws Exception;1535633547;Tests to verify that there is no race condition with two things running in parallel:_recycling exclusive buffers and recycling external buffers to the buffer pool while the_recycling of the exclusive buffer triggers recycling a floating buffer (FLINK-9676).;@Test_	public void testConcurrentRecycleAndRelease2() throws Exception {_		_		final int retries = 1_000__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 2__		final int numTotalBuffers = numExclusiveBuffers + numFloatingBuffers__		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			numTotalBuffers, 32)___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> bufferPoolInteractionsTask = () -> {_				for (int i = 0_ i < retries_ ++i) {_					Buffer buffer = bufferPool.requestBufferBlocking()__					buffer.recycleBuffer()__				}_				return null__			}___			final Callable<Void> channelInteractionsTask = () -> {_				ArrayList<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveBuffers)__				ArrayList<Buffer> floatingBuffers = new ArrayList<>(numExclusiveBuffers)__				try {_					for (int i = 0_ i < retries_ ++i) {_						_						_						for (int j = 0_ j < numTotalBuffers_ ++j) {_							Buffer buffer = inputChannel.requestBuffer()__							if (buffer == null) {_								break__							} else {_								_								if (buffer.getRecycler() == inputChannel) {_									exclusiveBuffers.add(buffer)__								} else {_									floatingBuffers.add(buffer)__								}_							}_						}_						_						floatingBuffers.forEach(Buffer::recycleBuffer)__						floatingBuffers.clear()___						assertEquals(numExclusiveBuffers, exclusiveBuffers.size())__						inputChannel.onSenderBacklog(0)_ _						_						exclusiveBuffers.forEach(Buffer::recycleBuffer)__						exclusiveBuffers.clear()__					}_				} finally {_					inputChannel.releaseAllResources()__				}__				return null__			}___			_			submitTasksAndWaitForResults(executor,_				new Callable[] {bufferPoolInteractionsTask, channelInteractionsTask})__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,exclusive,buffers,and,recycling,external,buffers,to,the,buffer,pool,while,the,recycling,of,the,exclusive,buffer,triggers,recycling,a,floating,buffer,flink,9676;test,public,void,test,concurrent,recycle,and,release2,throws,exception,final,int,retries,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,2,final,int,num,total,buffers,num,exclusive,buffers,num,floating,buffers,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,total,buffers,32,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,buffer,pool,interactions,task,for,int,i,0,i,retries,i,buffer,buffer,buffer,pool,request,buffer,blocking,buffer,recycle,buffer,return,null,final,callable,void,channel,interactions,task,array,list,buffer,exclusive,buffers,new,array,list,num,exclusive,buffers,array,list,buffer,floating,buffers,new,array,list,num,exclusive,buffers,try,for,int,i,0,i,retries,i,for,int,j,0,j,num,total,buffers,j,buffer,buffer,input,channel,request,buffer,if,buffer,null,break,else,if,buffer,get,recycler,input,channel,exclusive,buffers,add,buffer,else,floating,buffers,add,buffer,floating,buffers,for,each,buffer,recycle,buffer,floating,buffers,clear,assert,equals,num,exclusive,buffers,exclusive,buffers,size,input,channel,on,sender,backlog,0,exclusive,buffers,for,each,buffer,recycle,buffer,exclusive,buffers,clear,finally,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,buffer,pool,interactions,task,channel,interactions,task,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease2() throws Exception;1537385496;Tests to verify that there is no race condition with two things running in parallel:_recycling exclusive buffers and recycling external buffers to the buffer pool while the_recycling of the exclusive buffer triggers recycling a floating buffer (FLINK-9676).;@Test_	public void testConcurrentRecycleAndRelease2() throws Exception {_		_		final int retries = 1_000__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 2__		final int numTotalBuffers = numExclusiveBuffers + numFloatingBuffers__		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			numTotalBuffers, 32)___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> bufferPoolInteractionsTask = () -> {_				for (int i = 0_ i < retries_ ++i) {_					Buffer buffer = bufferPool.requestBufferBlocking()__					buffer.recycleBuffer()__				}_				return null__			}___			final Callable<Void> channelInteractionsTask = () -> {_				ArrayList<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveBuffers)__				ArrayList<Buffer> floatingBuffers = new ArrayList<>(numExclusiveBuffers)__				try {_					for (int i = 0_ i < retries_ ++i) {_						_						_						for (int j = 0_ j < numTotalBuffers_ ++j) {_							Buffer buffer = inputChannel.requestBuffer()__							if (buffer == null) {_								break__							} else {_								_								if (buffer.getRecycler() == inputChannel) {_									exclusiveBuffers.add(buffer)__								} else {_									floatingBuffers.add(buffer)__								}_							}_						}_						_						floatingBuffers.forEach(Buffer::recycleBuffer)__						floatingBuffers.clear()___						assertEquals(numExclusiveBuffers, exclusiveBuffers.size())__						inputChannel.onSenderBacklog(0)_ _						_						exclusiveBuffers.forEach(Buffer::recycleBuffer)__						exclusiveBuffers.clear()__					}_				} finally {_					inputChannel.releaseAllResources()__				}__				return null__			}___			_			submitTasksAndWaitForResults(executor,_				new Callable[] {bufferPoolInteractionsTask, channelInteractionsTask})__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,exclusive,buffers,and,recycling,external,buffers,to,the,buffer,pool,while,the,recycling,of,the,exclusive,buffer,triggers,recycling,a,floating,buffer,flink,9676;test,public,void,test,concurrent,recycle,and,release2,throws,exception,final,int,retries,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,2,final,int,num,total,buffers,num,exclusive,buffers,num,floating,buffers,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,total,buffers,32,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,buffer,pool,interactions,task,for,int,i,0,i,retries,i,buffer,buffer,buffer,pool,request,buffer,blocking,buffer,recycle,buffer,return,null,final,callable,void,channel,interactions,task,array,list,buffer,exclusive,buffers,new,array,list,num,exclusive,buffers,array,list,buffer,floating,buffers,new,array,list,num,exclusive,buffers,try,for,int,i,0,i,retries,i,for,int,j,0,j,num,total,buffers,j,buffer,buffer,input,channel,request,buffer,if,buffer,null,break,else,if,buffer,get,recycler,input,channel,exclusive,buffers,add,buffer,else,floating,buffers,add,buffer,floating,buffers,for,each,buffer,recycle,buffer,floating,buffers,clear,assert,equals,num,exclusive,buffers,exclusive,buffers,size,input,channel,on,sender,backlog,0,exclusive,buffers,for,each,buffer,recycle,buffer,exclusive,buffers,clear,finally,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,buffer,pool,interactions,task,channel,interactions,task,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease2() throws Exception;1543328832;Tests to verify that there is no race condition with two things running in parallel:_recycling exclusive buffers and recycling external buffers to the buffer pool while the_recycling of the exclusive buffer triggers recycling a floating buffer (FLINK-9676).;@Test_	public void testConcurrentRecycleAndRelease2() throws Exception {_		_		final int retries = 1_000__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 2__		final int numTotalBuffers = numExclusiveBuffers + numFloatingBuffers__		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			numTotalBuffers, 32)___		final ExecutorService executor = Executors.newFixedThreadPool(2)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			final Callable<Void> bufferPoolInteractionsTask = () -> {_				for (int i = 0_ i < retries_ ++i) {_					Buffer buffer = bufferPool.requestBufferBlocking()__					buffer.recycleBuffer()__				}_				return null__			}___			final Callable<Void> channelInteractionsTask = () -> {_				ArrayList<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveBuffers)__				ArrayList<Buffer> floatingBuffers = new ArrayList<>(numExclusiveBuffers)__				try {_					for (int i = 0_ i < retries_ ++i) {_						_						_						for (int j = 0_ j < numTotalBuffers_ ++j) {_							Buffer buffer = inputChannel.requestBuffer()__							if (buffer == null) {_								break__							} else {_								_								if (buffer.getRecycler() == inputChannel) {_									exclusiveBuffers.add(buffer)__								} else {_									floatingBuffers.add(buffer)__								}_							}_						}_						_						floatingBuffers.forEach(Buffer::recycleBuffer)__						floatingBuffers.clear()___						assertEquals(numExclusiveBuffers, exclusiveBuffers.size())__						inputChannel.onSenderBacklog(0)_ _						_						exclusiveBuffers.forEach(Buffer::recycleBuffer)__						exclusiveBuffers.clear()__					}_				} finally {_					inputChannel.releaseAllResources()__				}__				return null__			}___			_			submitTasksAndWaitForResults(executor,_				new Callable[] {bufferPoolInteractionsTask, channelInteractionsTask})__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,exclusive,buffers,and,recycling,external,buffers,to,the,buffer,pool,while,the,recycling,of,the,exclusive,buffer,triggers,recycling,a,floating,buffer,flink,9676;test,public,void,test,concurrent,recycle,and,release2,throws,exception,final,int,retries,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,2,final,int,num,total,buffers,num,exclusive,buffers,num,floating,buffers,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,total,buffers,32,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,callable,void,buffer,pool,interactions,task,for,int,i,0,i,retries,i,buffer,buffer,buffer,pool,request,buffer,blocking,buffer,recycle,buffer,return,null,final,callable,void,channel,interactions,task,array,list,buffer,exclusive,buffers,new,array,list,num,exclusive,buffers,array,list,buffer,floating,buffers,new,array,list,num,exclusive,buffers,try,for,int,i,0,i,retries,i,for,int,j,0,j,num,total,buffers,j,buffer,buffer,input,channel,request,buffer,if,buffer,null,break,else,if,buffer,get,recycler,input,channel,exclusive,buffers,add,buffer,else,floating,buffers,add,buffer,floating,buffers,for,each,buffer,recycle,buffer,floating,buffers,clear,assert,equals,num,exclusive,buffers,exclusive,buffers,size,input,channel,on,sender,backlog,0,exclusive,buffers,for,each,buffer,recycle,buffer,exclusive,buffers,clear,finally,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,buffer,pool,interactions,task,channel,interactions,task,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> private void cleanup( 			NetworkBufferPool networkBufferPool, 			@Nullable ExecutorService executor, 			@Nullable Buffer buffer, 			@Nullable Throwable throwable, 			InputChannel... inputChannels) throws Exception;1532012479;Helper code to ease cleanup handling with suppressed exceptions.;private void cleanup(_			NetworkBufferPool networkBufferPool,_			@Nullable ExecutorService executor,_			@Nullable Buffer buffer,_			@Nullable Throwable throwable,_			InputChannel... inputChannels) throws Exception {_		for (InputChannel inputChannel : inputChannels) {_			try {_				inputChannel.releaseAllResources()__			} catch (Throwable tInner) {_				throwable = ExceptionUtils.firstOrSuppressed(tInner, throwable)__			}_		}__		if (buffer != null && !buffer.isRecycled()) {_			buffer.recycleBuffer()__		}__		try {_			networkBufferPool.destroyAllBufferPools()__		} catch (Throwable tInner) {_			throwable = ExceptionUtils.firstOrSuppressed(tInner, throwable)__		}__		try {_			networkBufferPool.destroy()__		} catch (Throwable tInner) {_			throwable = ExceptionUtils.firstOrSuppressed(tInner, throwable)__		}__		if (executor != null) {_			executor.shutdown()__		}_		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable)__		}_	};helper,code,to,ease,cleanup,handling,with,suppressed,exceptions;private,void,cleanup,network,buffer,pool,network,buffer,pool,nullable,executor,service,executor,nullable,buffer,buffer,nullable,throwable,throwable,input,channel,input,channels,throws,exception,for,input,channel,input,channel,input,channels,try,input,channel,release,all,resources,catch,throwable,t,inner,throwable,exception,utils,first,or,suppressed,t,inner,throwable,if,buffer,null,buffer,is,recycled,buffer,recycle,buffer,try,network,buffer,pool,destroy,all,buffer,pools,catch,throwable,t,inner,throwable,exception,utils,first,or,suppressed,t,inner,throwable,try,network,buffer,pool,destroy,catch,throwable,t,inner,throwable,exception,utils,first,or,suppressed,t,inner,throwable,if,executor,null,executor,shutdown,if,throwable,null,exception,utils,rethrow,exception,throwable
RemoteInputChannelTest -> private void cleanup( 			NetworkBufferPool networkBufferPool, 			@Nullable ExecutorService executor, 			@Nullable Buffer buffer, 			@Nullable Throwable throwable, 			InputChannel... inputChannels) throws Exception;1535633547;Helper code to ease cleanup handling with suppressed exceptions.;private void cleanup(_			NetworkBufferPool networkBufferPool,_			@Nullable ExecutorService executor,_			@Nullable Buffer buffer,_			@Nullable Throwable throwable,_			InputChannel... inputChannels) throws Exception {_		for (InputChannel inputChannel : inputChannels) {_			try {_				inputChannel.releaseAllResources()__			} catch (Throwable tInner) {_				throwable = ExceptionUtils.firstOrSuppressed(tInner, throwable)__			}_		}__		if (buffer != null && !buffer.isRecycled()) {_			buffer.recycleBuffer()__		}__		try {_			networkBufferPool.destroyAllBufferPools()__		} catch (Throwable tInner) {_			throwable = ExceptionUtils.firstOrSuppressed(tInner, throwable)__		}__		try {_			networkBufferPool.destroy()__		} catch (Throwable tInner) {_			throwable = ExceptionUtils.firstOrSuppressed(tInner, throwable)__		}__		if (executor != null) {_			executor.shutdown()__		}_		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable)__		}_	};helper,code,to,ease,cleanup,handling,with,suppressed,exceptions;private,void,cleanup,network,buffer,pool,network,buffer,pool,nullable,executor,service,executor,nullable,buffer,buffer,nullable,throwable,throwable,input,channel,input,channels,throws,exception,for,input,channel,input,channel,input,channels,try,input,channel,release,all,resources,catch,throwable,t,inner,throwable,exception,utils,first,or,suppressed,t,inner,throwable,if,buffer,null,buffer,is,recycled,buffer,recycle,buffer,try,network,buffer,pool,destroy,all,buffer,pools,catch,throwable,t,inner,throwable,exception,utils,first,or,suppressed,t,inner,throwable,try,network,buffer,pool,destroy,catch,throwable,t,inner,throwable,exception,utils,first,or,suppressed,t,inner,throwable,if,executor,null,executor,shutdown,if,throwable,null,exception,utils,rethrow,exception,throwable
RemoteInputChannelTest -> private void cleanup( 			NetworkBufferPool networkBufferPool, 			@Nullable ExecutorService executor, 			@Nullable Buffer buffer, 			@Nullable Throwable throwable, 			InputChannel... inputChannels) throws Exception;1537385496;Helper code to ease cleanup handling with suppressed exceptions.;private void cleanup(_			NetworkBufferPool networkBufferPool,_			@Nullable ExecutorService executor,_			@Nullable Buffer buffer,_			@Nullable Throwable throwable,_			InputChannel... inputChannels) throws Exception {_		for (InputChannel inputChannel : inputChannels) {_			try {_				inputChannel.releaseAllResources()__			} catch (Throwable tInner) {_				throwable = ExceptionUtils.firstOrSuppressed(tInner, throwable)__			}_		}__		if (buffer != null && !buffer.isRecycled()) {_			buffer.recycleBuffer()__		}__		try {_			networkBufferPool.destroyAllBufferPools()__		} catch (Throwable tInner) {_			throwable = ExceptionUtils.firstOrSuppressed(tInner, throwable)__		}__		try {_			networkBufferPool.destroy()__		} catch (Throwable tInner) {_			throwable = ExceptionUtils.firstOrSuppressed(tInner, throwable)__		}__		if (executor != null) {_			executor.shutdown()__		}_		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable)__		}_	};helper,code,to,ease,cleanup,handling,with,suppressed,exceptions;private,void,cleanup,network,buffer,pool,network,buffer,pool,nullable,executor,service,executor,nullable,buffer,buffer,nullable,throwable,throwable,input,channel,input,channels,throws,exception,for,input,channel,input,channel,input,channels,try,input,channel,release,all,resources,catch,throwable,t,inner,throwable,exception,utils,first,or,suppressed,t,inner,throwable,if,buffer,null,buffer,is,recycled,buffer,recycle,buffer,try,network,buffer,pool,destroy,all,buffer,pools,catch,throwable,t,inner,throwable,exception,utils,first,or,suppressed,t,inner,throwable,try,network,buffer,pool,destroy,catch,throwable,t,inner,throwable,exception,utils,first,or,suppressed,t,inner,throwable,if,executor,null,executor,shutdown,if,throwable,null,exception,utils,rethrow,exception,throwable
RemoteInputChannelTest -> private void cleanup( 			NetworkBufferPool networkBufferPool, 			@Nullable ExecutorService executor, 			@Nullable Buffer buffer, 			@Nullable Throwable throwable, 			InputChannel... inputChannels) throws Exception;1543328832;Helper code to ease cleanup handling with suppressed exceptions.;private void cleanup(_			NetworkBufferPool networkBufferPool,_			@Nullable ExecutorService executor,_			@Nullable Buffer buffer,_			@Nullable Throwable throwable,_			InputChannel... inputChannels) throws Exception {_		for (InputChannel inputChannel : inputChannels) {_			try {_				inputChannel.releaseAllResources()__			} catch (Throwable tInner) {_				throwable = ExceptionUtils.firstOrSuppressed(tInner, throwable)__			}_		}__		if (buffer != null && !buffer.isRecycled()) {_			buffer.recycleBuffer()__		}__		try {_			networkBufferPool.destroyAllBufferPools()__		} catch (Throwable tInner) {_			throwable = ExceptionUtils.firstOrSuppressed(tInner, throwable)__		}__		try {_			networkBufferPool.destroy()__		} catch (Throwable tInner) {_			throwable = ExceptionUtils.firstOrSuppressed(tInner, throwable)__		}__		if (executor != null) {_			executor.shutdown()__		}_		if (throwable != null) {_			ExceptionUtils.rethrowException(throwable)__		}_	};helper,code,to,ease,cleanup,handling,with,suppressed,exceptions;private,void,cleanup,network,buffer,pool,network,buffer,pool,nullable,executor,service,executor,nullable,buffer,buffer,nullable,throwable,throwable,input,channel,input,channels,throws,exception,for,input,channel,input,channel,input,channels,try,input,channel,release,all,resources,catch,throwable,t,inner,throwable,exception,utils,first,or,suppressed,t,inner,throwable,if,buffer,null,buffer,is,recycled,buffer,recycle,buffer,try,network,buffer,pool,destroy,all,buffer,pools,catch,throwable,t,inner,throwable,exception,utils,first,or,suppressed,t,inner,throwable,try,network,buffer,pool,destroy,catch,throwable,t,inner,throwable,exception,utils,first,or,suppressed,t,inner,throwable,if,executor,null,executor,shutdown,if,throwable,null,exception,utils,rethrow,exception,throwable
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1515408360;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_					recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_					recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_					requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() +" buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1515408360;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() +" buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1516285456;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() +" buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1516285878;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() +" buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1518785736;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() +" buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1519834967;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() +" buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1519834986;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() +" buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1525116906;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() +" buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1530785917;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() + " buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1531388775;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() + " buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1532012479;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() + " buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1535633547;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() + " buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1537385496;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() + " buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception;1543328832;Tests to verify that there is no race condition with two things running in parallel:_requesting floating buffers on sender backlog and some other thread recycling_floating or exclusive buffers.;@Test_	public void testConcurrentOnSenderBacklogAndRecycle() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128__		final int backlog = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> requestBufferTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					for (int j = 1_ j <= backlog_ j++) {_						inputChannel.onSenderBacklog(j)__					}__					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				requestBufferTask})___			assertEquals("There should be " + inputChannel.getNumberOfRequiredBuffers() + " buffers available in channel.",_				inputChannel.getNumberOfRequiredBuffers(), inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be no buffers available in local pool.",_				0, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,requesting,floating,buffers,on,sender,backlog,and,some,other,thread,recycling,floating,or,exclusive,buffers;test,public,void,test,concurrent,on,sender,backlog,and,recycle,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,int,backlog,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,request,buffer,task,new,callable,void,override,public,void,call,throws,exception,for,int,j,1,j,backlog,j,input,channel,on,sender,backlog,j,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,request,buffer,task,assert,equals,there,should,be,input,channel,get,number,of,required,buffers,buffers,available,in,channel,input,channel,get,number,of,required,buffers,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,no,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testRecycleExclusiveBufferAfterReleased() throws Exception;1507647199;Tests {@link RemoteInputChannel#recycle(MemorySegment)}, verifying the exclusive segment is_recycled to global pool via input gate when channel is released.;@Test_	public void testRecycleExclusiveBufferAfterReleased() throws Exception {_		_		final SingleInputGate inputGate = mock(SingleInputGate.class)__		final RemoteInputChannel inputChannel = spy(createRemoteInputChannel(inputGate))___		inputChannel.releaseAllResources()___		_		inputChannel.recycle(MemorySegmentFactory.allocateUnpooledSegment(1024, inputChannel))___		assertEquals("Resource leak during recycling buffer after channel is released.",_			0, inputChannel.getNumberOfAvailableBuffers())__		verify(inputChannel, times(0)).notifyCreditAvailable()__		verify(inputGate, times(1)).returnExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,link,remote,input,channel,recycle,memory,segment,verifying,the,exclusive,segment,is,recycled,to,global,pool,via,input,gate,when,channel,is,released;test,public,void,test,recycle,exclusive,buffer,after,released,throws,exception,final,single,input,gate,input,gate,mock,single,input,gate,class,final,remote,input,channel,input,channel,spy,create,remote,input,channel,input,gate,input,channel,release,all,resources,input,channel,recycle,memory,segment,factory,allocate,unpooled,segment,1024,input,channel,assert,equals,resource,leak,during,recycling,buffer,after,channel,is,released,0,input,channel,get,number,of,available,buffers,verify,input,channel,times,0,notify,credit,available,verify,input,gate,times,1,return,exclusive,segments,any,list,of,memory,segment,class
RemoteInputChannelTest -> @Test 	public void testRecycleExclusiveBufferAfterReleased() throws Exception;1513102156;Tests {@link RemoteInputChannel#recycle(MemorySegment)}, verifying the exclusive segment is_recycled to global pool via input gate when channel is released.;@Test_	public void testRecycleExclusiveBufferAfterReleased() throws Exception {_		_		final SingleInputGate inputGate = mock(SingleInputGate.class)__		final RemoteInputChannel inputChannel = spy(createRemoteInputChannel(inputGate))___		inputChannel.releaseAllResources()___		_		inputChannel.recycle(MemorySegmentFactory.allocateUnpooledSegment(1024, inputChannel))___		assertEquals("Resource leak during recycling buffer after channel is released.",_			0, inputChannel.getNumberOfAvailableBuffers())__		verify(inputChannel, times(0)).notifyCreditAvailable()__		verify(inputGate, times(1)).returnExclusiveSegments(anyListOf(MemorySegment.class))__	};tests,link,remote,input,channel,recycle,memory,segment,verifying,the,exclusive,segment,is,recycled,to,global,pool,via,input,gate,when,channel,is,released;test,public,void,test,recycle,exclusive,buffer,after,released,throws,exception,final,single,input,gate,input,gate,mock,single,input,gate,class,final,remote,input,channel,input,channel,spy,create,remote,input,channel,input,gate,input,channel,release,all,resources,input,channel,recycle,memory,segment,factory,allocate,unpooled,segment,1024,input,channel,assert,equals,resource,leak,during,recycling,buffer,after,channel,is,released,0,input,channel,get,number,of,available,buffers,verify,input,channel,times,0,notify,credit,available,verify,input,gate,times,1,return,exclusive,segments,any,list,of,memory,segment,class
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1515408360;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__1. Recycle the floating buffer_2. Recycle the exclusive buffer_3. Decrease the sender's backlog;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBufferQueue.poll().recycle()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBufferQueue.poll().recycle()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycle()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,1,recycle,the,floating,buffer,2,recycle,the,exclusive,buffer,3,decrease,the,sender,s,backlog;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,queue,poll,recycle,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,queue,poll,recycle,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,15,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1515408360;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__1. Recycle the floating buffer_2. Recycle the exclusive buffer_3. Decrease the sender's backlog;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBufferQueue.poll().recycle()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBufferQueue.poll().recycle()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycle()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,1,recycle,the,floating,buffer,2,recycle,the,exclusive,buffer,3,decrease,the,sender,s,backlog;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,queue,poll,recycle,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,queue,poll,recycle,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,15,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1516285456;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__1. Recycle the floating buffer_2. Recycle the exclusive buffer_3. Decrease the sender's backlog;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBufferQueue.poll().recycle()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBufferQueue.poll().recycle()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycle()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,1,recycle,the,floating,buffer,2,recycle,the,exclusive,buffer,3,decrease,the,sender,s,backlog;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,queue,poll,recycle,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,queue,poll,recycle,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,15,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1516285878;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__1. Recycle the floating buffer_2. Recycle the exclusive buffer_3. Decrease the sender's backlog;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,1,recycle,the,floating,buffer,2,recycle,the,exclusive,buffer,3,decrease,the,sender,s,backlog;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,15,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1518785736;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__1. Recycle the floating buffer_2. Recycle the exclusive buffer_3. Decrease the sender's backlog;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,1,recycle,the,floating,buffer,2,recycle,the,exclusive,buffer,3,decrease,the,sender,s,backlog;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,15,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1519834967;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__1. Recycle the floating buffer_2. Recycle the exclusive buffer_3. Decrease the sender's backlog;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			exclusiveBuffer.recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(13)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffers available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())__			assertFalse(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(17)).requestBuffer()__			verify(bufferPool, times(2)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,1,recycle,the,floating,buffer,2,recycle,the,exclusive,buffer,3,decrease,the,sender,s,backlog;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,13,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffers,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,assert,false,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,15,verify,buffer,pool,times,17,request,buffer,verify,buffer,pool,times,2,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1519834986;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__1. Recycle the floating buffer_2. Recycle the exclusive buffer_3. Decrease the sender's backlog;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			exclusiveBuffer.recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(13)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffers available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())__			assertFalse(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(17)).requestBuffer()__			verify(bufferPool, times(2)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,1,recycle,the,floating,buffer,2,recycle,the,exclusive,buffer,3,decrease,the,sender,s,backlog;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,13,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffers,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,assert,false,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,15,verify,buffer,pool,times,17,request,buffer,verify,buffer,pool,times,2,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1525116906;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__1. Recycle the floating buffer_2. Recycle the exclusive buffer_3. Decrease the sender's backlog;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			exclusiveBuffer.recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(13)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffers available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())__			assertFalse(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(17)).requestBuffer()__			verify(bufferPool, times(2)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,1,recycle,the,floating,buffer,2,recycle,the,exclusive,buffer,3,decrease,the,sender,s,backlog;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,13,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffers,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,assert,false,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,15,verify,buffer,pool,times,17,request,buffer,verify,buffer,pool,times,2,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1530785917;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__1. Recycle the floating buffer_2. Recycle the exclusive buffer_3. Decrease the sender's backlog;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			exclusiveBuffer.recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(13)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffers available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())__			assertFalse(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(17)).requestBuffer()__			verify(bufferPool, times(2)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,1,recycle,the,floating,buffer,2,recycle,the,exclusive,buffer,3,decrease,the,sender,s,backlog;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,13,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffers,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,assert,false,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,15,verify,buffer,pool,times,17,request,buffer,verify,buffer,pool,times,2,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1531388775;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__1. Recycle the floating buffer_2. Recycle the exclusive buffer_3. Decrease the sender's backlog;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			exclusiveBuffer.recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(13)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffers available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())__			assertFalse(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(17)).requestBuffer()__			verify(bufferPool, times(2)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,1,recycle,the,floating,buffer,2,recycle,the,exclusive,buffer,3,decrease,the,sender,s,backlog;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,13,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffers,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,assert,false,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,15,verify,buffer,pool,times,17,request,buffer,verify,buffer,pool,times,2,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1532012479;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__1. Recycle the floating buffer_2. Recycle the exclusive buffer_3. Decrease the sender's backlog;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			exclusiveBuffer.recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(13)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffers available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())__			assertFalse(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(17)).requestBuffer()__			verify(bufferPool, times(2)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,1,recycle,the,floating,buffer,2,recycle,the,exclusive,buffer,3,decrease,the,sender,s,backlog;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,13,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffers,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,assert,false,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,15,verify,buffer,pool,times,17,request,buffer,verify,buffer,pool,times,2,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1535633547;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__1. Recycle the floating buffer_2. Recycle the exclusive buffer_3. Decrease the sender's backlog;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			exclusiveBuffer.recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(13)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffers available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())__			assertFalse(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(17)).requestBuffer()__			verify(bufferPool, times(2)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,1,recycle,the,floating,buffer,2,recycle,the,exclusive,buffer,3,decrease,the,sender,s,backlog;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,13,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffers,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,assert,false,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,15,verify,buffer,pool,times,17,request,buffer,verify,buffer,pool,times,2,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1537385496;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__<ol>_<li>Recycle the floating buffer</li>_<li>Recycle the exclusive buffer</li>_<li>Decrease the sender's backlog</li>_</ol>;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			exclusiveBuffer.recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(13)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffers available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())__			assertFalse(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(17)).requestBuffer()__			verify(bufferPool, times(2)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,ol,li,recycle,the,floating,buffer,li,li,recycle,the,exclusive,buffer,li,li,decrease,the,sender,s,backlog,li,ol;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,13,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffers,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,assert,false,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,15,verify,buffer,pool,times,17,request,buffer,verify,buffer,pool,times,2,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception;1543328832;Tests to verify the behaviours of three different processes if the number of available_buffers is less than required buffers.__<ol>_<li>Recycle the floating buffer</li>_<li>Recycle the exclusive buffer</li>_<li>Decrease the sender's backlog</li>_</ol>;@Test_	public void testAvailableBuffersLessThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final int numRecycleFloatingBuffers = 2__			final ArrayDeque<Buffer> floatingBufferQueue = new ArrayDeque<>(numRecycleFloatingBuffers)__			for (int i = 0_ i < numRecycleFloatingBuffers_ i++) {_				Buffer floatingBuffer = bufferPool.requestBuffer()__				assertNotNull(floatingBuffer)__				floatingBufferQueue.add(floatingBuffer)__			}__			verify(bufferPool, times(numRecycleFloatingBuffers)).requestBuffer()___			_			inputChannel.onSenderBacklog(14)___			_			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 16 buffers required in the channel",_				16, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(16)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 13 buffers available in the channel",_				13, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			exclusiveBuffer.recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 18 buffers required in the channel",_				18, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(13)___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())___			_			floatingBufferQueue.poll().recycleBuffer()___			_			verify(bufferPool, times(15)).requestBuffer()__			verify(bufferPool, times(1)).addBufferListener(inputChannel)__			assertEquals("There should be 15 buffers available in the channel",_				15, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 15 buffers required in the channel",_				15, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffers available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())__			assertFalse(inputChannel.isWaitingForFloatingBuffers())___			_			inputChannel.onSenderBacklog(15)___			_			verify(bufferPool, times(17)).requestBuffer()__			verify(bufferPool, times(2)).addBufferListener(inputChannel)__			assertEquals("There should be 16 buffers available in the channel",_				16, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 17 buffers required in the channel",_				17, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())__			assertTrue(inputChannel.isWaitingForFloatingBuffers())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,three,different,processes,if,the,number,of,available,buffers,is,less,than,required,buffers,ol,li,recycle,the,floating,buffer,li,li,recycle,the,exclusive,buffer,li,li,decrease,the,sender,s,backlog,li,ol;test,public,void,test,available,buffers,less,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,int,num,recycle,floating,buffers,2,final,array,deque,buffer,floating,buffer,queue,new,array,deque,num,recycle,floating,buffers,for,int,i,0,i,num,recycle,floating,buffers,i,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,floating,buffer,queue,add,floating,buffer,verify,buffer,pool,times,num,recycle,floating,buffers,request,buffer,input,channel,on,sender,backlog,14,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,16,buffers,required,in,the,channel,16,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,16,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,13,buffers,available,in,the,channel,13,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,18,buffers,required,in,the,channel,18,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,13,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,floating,buffer,queue,poll,recycle,buffer,verify,buffer,pool,times,15,request,buffer,verify,buffer,pool,times,1,add,buffer,listener,input,channel,assert,equals,there,should,be,15,buffers,available,in,the,channel,15,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,15,buffers,required,in,the,channel,15,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffers,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,assert,false,input,channel,is,waiting,for,floating,buffers,input,channel,on,sender,backlog,15,verify,buffer,pool,times,17,request,buffer,verify,buffer,pool,times,2,add,buffer,listener,input,channel,assert,equals,there,should,be,16,buffers,available,in,the,channel,16,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,17,buffers,required,in,the,channel,17,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,assert,true,input,channel,is,waiting,for,floating,buffers,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1515408360;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_					recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_					recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_					releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1515408360;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1516285456;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1516285878;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1518785736;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1519834967;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1519834986;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1525116906;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1530785917;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			if (!inputChannel.isReleased()) {_				inputChannel.releaseAllResources()__			}__			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()___			executor.shutdown()__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,finally,if,input,channel,is,released,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy,executor,shutdown
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1531388775;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1532012479;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1535633547;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1537385496;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testConcurrentRecycleAndRelease() throws Exception;1543328832;Tests to verify that there is no race condition with two things running in parallel:_recycling the exclusive or floating buffers and some other thread releasing the_input channel.;@Test_	public void testConcurrentRecycleAndRelease() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(248, 32)__		final int numExclusiveSegments = 120__		final int numFloatingBuffers = 128___		final ExecutorService executor = Executors.newFixedThreadPool(3)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel  = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveSegments)__			inputChannel.requestSubpartition(0)___			final Callable<Void> releaseTask = new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					inputChannel.releaseAllResources()___					return null__				}_			}___			_			submitTasksAndWaitForResults(executor, new Callable[]{_				recycleExclusiveBufferTask(inputChannel, numExclusiveSegments),_				recycleFloatingBufferTask(bufferPool, numFloatingBuffers),_				releaseTask})___			assertEquals("There should be no buffers available in the channel.",_				0, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numFloatingBuffers + " buffers available in local pool.",_				numFloatingBuffers, bufferPool.getNumberOfAvailableMemorySegments())__			assertEquals("There should be " + numExclusiveSegments + " buffers available in global pool.",_				numExclusiveSegments, networkBufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, executor, null, thrown, inputChannel)__		}_	};tests,to,verify,that,there,is,no,race,condition,with,two,things,running,in,parallel,recycling,the,exclusive,or,floating,buffers,and,some,other,thread,releasing,the,input,channel;test,public,void,test,concurrent,recycle,and,release,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,248,32,final,int,num,exclusive,segments,120,final,int,num,floating,buffers,128,final,executor,service,executor,executors,new,fixed,thread,pool,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,segments,input,channel,request,subpartition,0,final,callable,void,release,task,new,callable,void,override,public,void,call,throws,exception,input,channel,release,all,resources,return,null,submit,tasks,and,wait,for,results,executor,new,callable,recycle,exclusive,buffer,task,input,channel,num,exclusive,segments,recycle,floating,buffer,task,buffer,pool,num,floating,buffers,release,task,assert,equals,there,should,be,no,buffers,available,in,the,channel,0,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,num,floating,buffers,buffers,available,in,local,pool,num,floating,buffers,buffer,pool,get,number,of,available,memory,segments,assert,equals,there,should,be,num,exclusive,segments,buffers,available,in,global,pool,num,exclusive,segments,network,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,executor,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testFailureInNotifyBufferAvailable() throws Exception;1532012479;Tests that failures are propagated correctly if_{@link RemoteInputChannel#notifyBufferAvailable(Buffer)} throws an exception. Also tests that_a second listener will be notified in this case.;@Test_	public void testFailureInNotifyBufferAvailable() throws Exception {_		_		final int numExclusiveBuffers = 0__		final int numFloatingBuffers = 1__		final int numTotalBuffers = numExclusiveBuffers + numFloatingBuffers__		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			numTotalBuffers, 32)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel successfulRemoteIC = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(successfulRemoteIC.partitionId.getPartitionId(), successfulRemoteIC)___		successfulRemoteIC.requestSubpartition(0)___		_		_		final RemoteInputChannel failingRemoteIC = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(failingRemoteIC.partitionId.getPartitionId(), failingRemoteIC)___		Buffer buffer = null__		Throwable thrown = null__		try {_			final BufferPool bufferPool =_				networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)___			buffer = bufferPool.requestBufferBlocking()___			_			failingRemoteIC.onSenderBacklog(1)__			successfulRemoteIC.onSenderBacklog(numExclusiveBuffers + 1)__			_			_			buffer.recycleBuffer()__			buffer = null__			try {_				failingRemoteIC.checkError()__				fail("The input channel should have an error based on the failure in RemoteInputChannel#notifyBufferAvailable()")__			} catch (IOException e) {_				assertThat(e, hasProperty("cause", isA(IllegalStateException.class)))__			}_			_			assertEquals(0, bufferPool.getNumberOfAvailableMemorySegments())__			buffer = successfulRemoteIC.requestBuffer()__			assertNull("buffer should still remain in failingRemoteIC", buffer)___			_			_			failingRemoteIC.releaseAllResources()__			assertEquals(0, bufferPool.getNumberOfAvailableMemorySegments())__			buffer = successfulRemoteIC.requestBuffer()__			assertNotNull("no buffer given to successfulRemoteIC", buffer)__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, buffer, thrown, failingRemoteIC, successfulRemoteIC)__		}_	};tests,that,failures,are,propagated,correctly,if,link,remote,input,channel,notify,buffer,available,buffer,throws,an,exception,also,tests,that,a,second,listener,will,be,notified,in,this,case;test,public,void,test,failure,in,notify,buffer,available,throws,exception,final,int,num,exclusive,buffers,0,final,int,num,floating,buffers,1,final,int,num,total,buffers,num,exclusive,buffers,num,floating,buffers,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,total,buffers,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,successful,remote,ic,create,remote,input,channel,input,gate,input,gate,set,input,channel,successful,remote,ic,partition,id,get,partition,id,successful,remote,ic,successful,remote,ic,request,subpartition,0,final,remote,input,channel,failing,remote,ic,create,remote,input,channel,input,gate,input,gate,set,input,channel,failing,remote,ic,partition,id,get,partition,id,failing,remote,ic,buffer,buffer,null,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,buffer,buffer,pool,request,buffer,blocking,failing,remote,ic,on,sender,backlog,1,successful,remote,ic,on,sender,backlog,num,exclusive,buffers,1,buffer,recycle,buffer,buffer,null,try,failing,remote,ic,check,error,fail,the,input,channel,should,have,an,error,based,on,the,failure,in,remote,input,channel,notify,buffer,available,catch,ioexception,e,assert,that,e,has,property,cause,is,a,illegal,state,exception,class,assert,equals,0,buffer,pool,get,number,of,available,memory,segments,buffer,successful,remote,ic,request,buffer,assert,null,buffer,should,still,remain,in,failing,remote,ic,buffer,failing,remote,ic,release,all,resources,assert,equals,0,buffer,pool,get,number,of,available,memory,segments,buffer,successful,remote,ic,request,buffer,assert,not,null,no,buffer,given,to,successful,remote,ic,buffer,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,buffer,thrown,failing,remote,ic,successful,remote,ic
RemoteInputChannelTest -> @Test 	public void testFailureInNotifyBufferAvailable() throws Exception;1535633547;Tests that failures are propagated correctly if_{@link RemoteInputChannel#notifyBufferAvailable(Buffer)} throws an exception. Also tests that_a second listener will be notified in this case.;@Test_	public void testFailureInNotifyBufferAvailable() throws Exception {_		_		final int numExclusiveBuffers = 0__		final int numFloatingBuffers = 1__		final int numTotalBuffers = numExclusiveBuffers + numFloatingBuffers__		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			numTotalBuffers, 32)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel successfulRemoteIC = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(successfulRemoteIC.partitionId.getPartitionId(), successfulRemoteIC)___		successfulRemoteIC.requestSubpartition(0)___		_		_		final RemoteInputChannel failingRemoteIC = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(failingRemoteIC.partitionId.getPartitionId(), failingRemoteIC)___		Buffer buffer = null__		Throwable thrown = null__		try {_			final BufferPool bufferPool =_				networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)___			buffer = bufferPool.requestBufferBlocking()___			_			failingRemoteIC.onSenderBacklog(1)__			successfulRemoteIC.onSenderBacklog(numExclusiveBuffers + 1)__			_			_			buffer.recycleBuffer()__			buffer = null__			try {_				failingRemoteIC.checkError()__				fail("The input channel should have an error based on the failure in RemoteInputChannel#notifyBufferAvailable()")__			} catch (IOException e) {_				assertThat(e, hasProperty("cause", isA(IllegalStateException.class)))__			}_			_			assertEquals(0, bufferPool.getNumberOfAvailableMemorySegments())__			buffer = successfulRemoteIC.requestBuffer()__			assertNull("buffer should still remain in failingRemoteIC", buffer)___			_			_			failingRemoteIC.releaseAllResources()__			assertEquals(0, bufferPool.getNumberOfAvailableMemorySegments())__			buffer = successfulRemoteIC.requestBuffer()__			assertNotNull("no buffer given to successfulRemoteIC", buffer)__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, buffer, thrown, failingRemoteIC, successfulRemoteIC)__		}_	};tests,that,failures,are,propagated,correctly,if,link,remote,input,channel,notify,buffer,available,buffer,throws,an,exception,also,tests,that,a,second,listener,will,be,notified,in,this,case;test,public,void,test,failure,in,notify,buffer,available,throws,exception,final,int,num,exclusive,buffers,0,final,int,num,floating,buffers,1,final,int,num,total,buffers,num,exclusive,buffers,num,floating,buffers,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,total,buffers,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,successful,remote,ic,create,remote,input,channel,input,gate,input,gate,set,input,channel,successful,remote,ic,partition,id,get,partition,id,successful,remote,ic,successful,remote,ic,request,subpartition,0,final,remote,input,channel,failing,remote,ic,create,remote,input,channel,input,gate,input,gate,set,input,channel,failing,remote,ic,partition,id,get,partition,id,failing,remote,ic,buffer,buffer,null,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,buffer,buffer,pool,request,buffer,blocking,failing,remote,ic,on,sender,backlog,1,successful,remote,ic,on,sender,backlog,num,exclusive,buffers,1,buffer,recycle,buffer,buffer,null,try,failing,remote,ic,check,error,fail,the,input,channel,should,have,an,error,based,on,the,failure,in,remote,input,channel,notify,buffer,available,catch,ioexception,e,assert,that,e,has,property,cause,is,a,illegal,state,exception,class,assert,equals,0,buffer,pool,get,number,of,available,memory,segments,buffer,successful,remote,ic,request,buffer,assert,null,buffer,should,still,remain,in,failing,remote,ic,buffer,failing,remote,ic,release,all,resources,assert,equals,0,buffer,pool,get,number,of,available,memory,segments,buffer,successful,remote,ic,request,buffer,assert,not,null,no,buffer,given,to,successful,remote,ic,buffer,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,buffer,thrown,failing,remote,ic,successful,remote,ic
RemoteInputChannelTest -> @Test 	public void testFailureInNotifyBufferAvailable() throws Exception;1537385496;Tests that failures are propagated correctly if_{@link RemoteInputChannel#notifyBufferAvailable(Buffer)} throws an exception. Also tests that_a second listener will be notified in this case.;@Test_	public void testFailureInNotifyBufferAvailable() throws Exception {_		_		final int numExclusiveBuffers = 0__		final int numFloatingBuffers = 1__		final int numTotalBuffers = numExclusiveBuffers + numFloatingBuffers__		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			numTotalBuffers, 32)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel successfulRemoteIC = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(successfulRemoteIC.partitionId.getPartitionId(), successfulRemoteIC)___		successfulRemoteIC.requestSubpartition(0)___		_		_		final RemoteInputChannel failingRemoteIC = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(failingRemoteIC.partitionId.getPartitionId(), failingRemoteIC)___		Buffer buffer = null__		Throwable thrown = null__		try {_			final BufferPool bufferPool =_				networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)___			buffer = bufferPool.requestBufferBlocking()___			_			failingRemoteIC.onSenderBacklog(1)__			successfulRemoteIC.onSenderBacklog(numExclusiveBuffers + 1)__			_			_			buffer.recycleBuffer()__			buffer = null__			try {_				failingRemoteIC.checkError()__				fail("The input channel should have an error based on the failure in RemoteInputChannel#notifyBufferAvailable()")__			} catch (IOException e) {_				assertThat(e, hasProperty("cause", isA(IllegalStateException.class)))__			}_			_			assertEquals(0, bufferPool.getNumberOfAvailableMemorySegments())__			buffer = successfulRemoteIC.requestBuffer()__			assertNull("buffer should still remain in failingRemoteIC", buffer)___			_			_			failingRemoteIC.releaseAllResources()__			assertEquals(0, bufferPool.getNumberOfAvailableMemorySegments())__			buffer = successfulRemoteIC.requestBuffer()__			assertNotNull("no buffer given to successfulRemoteIC", buffer)__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, buffer, thrown, failingRemoteIC, successfulRemoteIC)__		}_	};tests,that,failures,are,propagated,correctly,if,link,remote,input,channel,notify,buffer,available,buffer,throws,an,exception,also,tests,that,a,second,listener,will,be,notified,in,this,case;test,public,void,test,failure,in,notify,buffer,available,throws,exception,final,int,num,exclusive,buffers,0,final,int,num,floating,buffers,1,final,int,num,total,buffers,num,exclusive,buffers,num,floating,buffers,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,total,buffers,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,successful,remote,ic,create,remote,input,channel,input,gate,input,gate,set,input,channel,successful,remote,ic,partition,id,get,partition,id,successful,remote,ic,successful,remote,ic,request,subpartition,0,final,remote,input,channel,failing,remote,ic,create,remote,input,channel,input,gate,input,gate,set,input,channel,failing,remote,ic,partition,id,get,partition,id,failing,remote,ic,buffer,buffer,null,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,buffer,buffer,pool,request,buffer,blocking,failing,remote,ic,on,sender,backlog,1,successful,remote,ic,on,sender,backlog,num,exclusive,buffers,1,buffer,recycle,buffer,buffer,null,try,failing,remote,ic,check,error,fail,the,input,channel,should,have,an,error,based,on,the,failure,in,remote,input,channel,notify,buffer,available,catch,ioexception,e,assert,that,e,has,property,cause,is,a,illegal,state,exception,class,assert,equals,0,buffer,pool,get,number,of,available,memory,segments,buffer,successful,remote,ic,request,buffer,assert,null,buffer,should,still,remain,in,failing,remote,ic,buffer,failing,remote,ic,release,all,resources,assert,equals,0,buffer,pool,get,number,of,available,memory,segments,buffer,successful,remote,ic,request,buffer,assert,not,null,no,buffer,given,to,successful,remote,ic,buffer,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,buffer,thrown,failing,remote,ic,successful,remote,ic
RemoteInputChannelTest -> @Test 	public void testFailureInNotifyBufferAvailable() throws Exception;1543328832;Tests that failures are propagated correctly if_{@link RemoteInputChannel#notifyBufferAvailable(Buffer)} throws an exception. Also tests that_a second listener will be notified in this case.;@Test_	public void testFailureInNotifyBufferAvailable() throws Exception {_		_		final int numExclusiveBuffers = 0__		final int numFloatingBuffers = 1__		final int numTotalBuffers = numExclusiveBuffers + numFloatingBuffers__		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(_			numTotalBuffers, 32)___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel successfulRemoteIC = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(successfulRemoteIC.partitionId.getPartitionId(), successfulRemoteIC)___		successfulRemoteIC.requestSubpartition(0)___		_		_		final RemoteInputChannel failingRemoteIC = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(failingRemoteIC.partitionId.getPartitionId(), failingRemoteIC)___		Buffer buffer = null__		Throwable thrown = null__		try {_			final BufferPool bufferPool =_				networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers)__			inputGate.setBufferPool(bufferPool)___			buffer = bufferPool.requestBufferBlocking()___			_			failingRemoteIC.onSenderBacklog(1)__			successfulRemoteIC.onSenderBacklog(numExclusiveBuffers + 1)__			_			_			buffer.recycleBuffer()__			buffer = null__			try {_				failingRemoteIC.checkError()__				fail("The input channel should have an error based on the failure in RemoteInputChannel#notifyBufferAvailable()")__			} catch (IOException e) {_				assertThat(e, hasProperty("cause", isA(IllegalStateException.class)))__			}_			_			assertEquals(0, bufferPool.getNumberOfAvailableMemorySegments())__			buffer = successfulRemoteIC.requestBuffer()__			assertNull("buffer should still remain in failingRemoteIC", buffer)___			_			_			failingRemoteIC.releaseAllResources()__			assertEquals(0, bufferPool.getNumberOfAvailableMemorySegments())__			buffer = successfulRemoteIC.requestBuffer()__			assertNotNull("no buffer given to successfulRemoteIC", buffer)__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, buffer, thrown, failingRemoteIC, successfulRemoteIC)__		}_	};tests,that,failures,are,propagated,correctly,if,link,remote,input,channel,notify,buffer,available,buffer,throws,an,exception,also,tests,that,a,second,listener,will,be,notified,in,this,case;test,public,void,test,failure,in,notify,buffer,available,throws,exception,final,int,num,exclusive,buffers,0,final,int,num,floating,buffers,1,final,int,num,total,buffers,num,exclusive,buffers,num,floating,buffers,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,total,buffers,32,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,successful,remote,ic,create,remote,input,channel,input,gate,input,gate,set,input,channel,successful,remote,ic,partition,id,get,partition,id,successful,remote,ic,successful,remote,ic,request,subpartition,0,final,remote,input,channel,failing,remote,ic,create,remote,input,channel,input,gate,input,gate,set,input,channel,failing,remote,ic,partition,id,get,partition,id,failing,remote,ic,buffer,buffer,null,throwable,thrown,null,try,final,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,buffer,buffer,pool,request,buffer,blocking,failing,remote,ic,on,sender,backlog,1,successful,remote,ic,on,sender,backlog,num,exclusive,buffers,1,buffer,recycle,buffer,buffer,null,try,failing,remote,ic,check,error,fail,the,input,channel,should,have,an,error,based,on,the,failure,in,remote,input,channel,notify,buffer,available,catch,ioexception,e,assert,that,e,has,property,cause,is,a,illegal,state,exception,class,assert,equals,0,buffer,pool,get,number,of,available,memory,segments,buffer,successful,remote,ic,request,buffer,assert,null,buffer,should,still,remain,in,failing,remote,ic,buffer,failing,remote,ic,release,all,resources,assert,equals,0,buffer,pool,get,number,of,available,memory,segments,buffer,successful,remote,ic,request,buffer,assert,not,null,no,buffer,given,to,successful,remote,ic,buffer,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,buffer,thrown,failing,remote,ic,successful,remote,ic
RemoteInputChannelTest -> private void testConcurrentReleaseAndSomething( 			final int numberOfRepetitions, 			TriFunction<RemoteInputChannel, Buffer, Integer, Object> function) throws Exception;1535633547;Repeatedly spawns two tasks: one to call <tt>function</tt> and the other to release the_channel concurrently. We do this repeatedly to provoke races.__@param numberOfRepetitions how often to repeat the test_@param function function to call concurrently to {@link RemoteInputChannel#releaseAllResources()};private void testConcurrentReleaseAndSomething(_			final int numberOfRepetitions,_			TriFunction<RemoteInputChannel, Buffer, Integer, Object> function) throws Exception {__		_		final ExecutorService executor = Executors.newFixedThreadPool(2)__		final Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)___		try {_			_			final SingleInputGate inputGate = mock(SingleInputGate.class)___			for (int i = 0_ i < numberOfRepetitions_ i++) {_				final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)___				final Callable<Void> enqueueTask = () -> {_					while (true) {_						for (int j = 0_ j < 128_ j++) {_							_							_							function.apply(inputChannel, buffer.retainBuffer(), j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}___				final Callable<Void> releaseTask = () -> {_					inputChannel.releaseAllResources()__					return null__				}___				_				List<Future<Void>> results = Lists.newArrayListWithCapacity(2)___				results.add(executor.submit(enqueueTask))__				results.add(executor.submit(releaseTask))___				for (Future<Void> result : results) {_					result.get()__				}__				assertEquals("Resource leak during concurrent release and notifyBufferAvailable.",_					0, inputChannel.getNumberOfQueuedBuffers())__			}_		}_		finally {_			executor.shutdown()__			assertFalse(buffer.isRecycled())__			buffer.recycleBuffer()__			assertTrue(buffer.isRecycled())__		}_	};repeatedly,spawns,two,tasks,one,to,call,tt,function,tt,and,the,other,to,release,the,channel,concurrently,we,do,this,repeatedly,to,provoke,races,param,number,of,repetitions,how,often,to,repeat,the,test,param,function,function,to,call,concurrently,to,link,remote,input,channel,release,all,resources;private,void,test,concurrent,release,and,something,final,int,number,of,repetitions,tri,function,remote,input,channel,buffer,integer,object,function,throws,exception,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,try,final,single,input,gate,input,gate,mock,single,input,gate,class,for,int,i,0,i,number,of,repetitions,i,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,final,callable,void,enqueue,task,while,true,for,int,j,0,j,128,j,function,apply,input,channel,buffer,retain,buffer,j,if,input,channel,is,released,return,null,final,callable,void,release,task,input,channel,release,all,resources,return,null,list,future,void,results,lists,new,array,list,with,capacity,2,results,add,executor,submit,enqueue,task,results,add,executor,submit,release,task,for,future,void,result,results,result,get,assert,equals,resource,leak,during,concurrent,release,and,notify,buffer,available,0,input,channel,get,number,of,queued,buffers,finally,executor,shutdown,assert,false,buffer,is,recycled,buffer,recycle,buffer,assert,true,buffer,is,recycled
RemoteInputChannelTest -> private void testConcurrentReleaseAndSomething( 			final int numberOfRepetitions, 			TriFunction<RemoteInputChannel, Buffer, Integer, Object> function) throws Exception;1537385496;Repeatedly spawns two tasks: one to call <tt>function</tt> and the other to release the_channel concurrently. We do this repeatedly to provoke races.__@param numberOfRepetitions how often to repeat the test_@param function function to call concurrently to {@link RemoteInputChannel#releaseAllResources()};private void testConcurrentReleaseAndSomething(_			final int numberOfRepetitions,_			TriFunction<RemoteInputChannel, Buffer, Integer, Object> function) throws Exception {__		_		final ExecutorService executor = Executors.newFixedThreadPool(2)__		final Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)___		try {_			_			final SingleInputGate inputGate = mock(SingleInputGate.class)___			for (int i = 0_ i < numberOfRepetitions_ i++) {_				final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)___				final Callable<Void> enqueueTask = () -> {_					while (true) {_						for (int j = 0_ j < 128_ j++) {_							_							_							function.apply(inputChannel, buffer.retainBuffer(), j)__						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}___				final Callable<Void> releaseTask = () -> {_					inputChannel.releaseAllResources()__					return null__				}___				_				List<Future<Void>> results = Lists.newArrayListWithCapacity(2)___				results.add(executor.submit(enqueueTask))__				results.add(executor.submit(releaseTask))___				for (Future<Void> result : results) {_					result.get()__				}__				assertEquals("Resource leak during concurrent release and notifyBufferAvailable.",_					0, inputChannel.getNumberOfQueuedBuffers())__			}_		}_		finally {_			executor.shutdown()__			assertFalse(buffer.isRecycled())__			buffer.recycleBuffer()__			assertTrue(buffer.isRecycled())__		}_	};repeatedly,spawns,two,tasks,one,to,call,tt,function,tt,and,the,other,to,release,the,channel,concurrently,we,do,this,repeatedly,to,provoke,races,param,number,of,repetitions,how,often,to,repeat,the,test,param,function,function,to,call,concurrently,to,link,remote,input,channel,release,all,resources;private,void,test,concurrent,release,and,something,final,int,number,of,repetitions,tri,function,remote,input,channel,buffer,integer,object,function,throws,exception,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,try,final,single,input,gate,input,gate,mock,single,input,gate,class,for,int,i,0,i,number,of,repetitions,i,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,final,callable,void,enqueue,task,while,true,for,int,j,0,j,128,j,function,apply,input,channel,buffer,retain,buffer,j,if,input,channel,is,released,return,null,final,callable,void,release,task,input,channel,release,all,resources,return,null,list,future,void,results,lists,new,array,list,with,capacity,2,results,add,executor,submit,enqueue,task,results,add,executor,submit,release,task,for,future,void,result,results,result,get,assert,equals,resource,leak,during,concurrent,release,and,notify,buffer,available,0,input,channel,get,number,of,queued,buffers,finally,executor,shutdown,assert,false,buffer,is,recycled,buffer,recycle,buffer,assert,true,buffer,is,recycled
RemoteInputChannelTest -> private void testConcurrentReleaseAndSomething( 			final int numberOfRepetitions, 			TriFunction<RemoteInputChannel, Buffer, Integer, Object> function) throws Exception;1543328832;Repeatedly spawns two tasks: one to call <tt>function</tt> and the other to release the_channel concurrently. We do this repeatedly to provoke races.__@param numberOfRepetitions how often to repeat the test_@param function function to call concurrently to {@link RemoteInputChannel#releaseAllResources()};private void testConcurrentReleaseAndSomething(_			final int numberOfRepetitions,_			TriFunction<RemoteInputChannel, Buffer, Integer, Object> function) throws Exception {__		_		final ExecutorService executor = Executors.newFixedThreadPool(2)__		final Buffer buffer = TestBufferFactory.createBuffer(TestBufferFactory.BUFFER_SIZE)___		try {_			_			final SingleInputGate inputGate = mock(SingleInputGate.class)___			for (int i = 0_ i < numberOfRepetitions_ i++) {_				final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)___				final Callable<Void> enqueueTask = () -> {_					while (true) {_						for (int j = 0_ j < 128_ j++) {_							_							_							Object obj = function.apply(inputChannel, buffer.retainBuffer(), j)__							if (obj instanceof NotificationResult && obj == NotificationResult.BUFFER_NOT_USED) {_								buffer.recycleBuffer()__							}_						}__						if (inputChannel.isReleased()) {_							return null__						}_					}_				}___				final Callable<Void> releaseTask = () -> {_					inputChannel.releaseAllResources()__					return null__				}___				_				List<Future<Void>> results = Lists.newArrayListWithCapacity(2)___				results.add(executor.submit(enqueueTask))__				results.add(executor.submit(releaseTask))___				for (Future<Void> result : results) {_					result.get()__				}__				assertEquals("Resource leak during concurrent release and notifyBufferAvailable.",_					0, inputChannel.getNumberOfQueuedBuffers())__			}_		}_		finally {_			executor.shutdown()__			assertFalse(buffer.isRecycled())__			buffer.recycleBuffer()__			assertTrue(buffer.isRecycled())__		}_	};repeatedly,spawns,two,tasks,one,to,call,tt,function,tt,and,the,other,to,release,the,channel,concurrently,we,do,this,repeatedly,to,provoke,races,param,number,of,repetitions,how,often,to,repeat,the,test,param,function,function,to,call,concurrently,to,link,remote,input,channel,release,all,resources;private,void,test,concurrent,release,and,something,final,int,number,of,repetitions,tri,function,remote,input,channel,buffer,integer,object,function,throws,exception,final,executor,service,executor,executors,new,fixed,thread,pool,2,final,buffer,buffer,test,buffer,factory,create,buffer,test,buffer,factory,try,final,single,input,gate,input,gate,mock,single,input,gate,class,for,int,i,0,i,number,of,repetitions,i,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,final,callable,void,enqueue,task,while,true,for,int,j,0,j,128,j,object,obj,function,apply,input,channel,buffer,retain,buffer,j,if,obj,instanceof,notification,result,obj,notification,result,buffer,recycle,buffer,if,input,channel,is,released,return,null,final,callable,void,release,task,input,channel,release,all,resources,return,null,list,future,void,results,lists,new,array,list,with,capacity,2,results,add,executor,submit,enqueue,task,results,add,executor,submit,release,task,for,future,void,result,results,result,get,assert,equals,resource,leak,during,concurrent,release,and,notify,buffer,available,0,input,channel,get,number,of,queued,buffers,finally,executor,shutdown,assert,false,buffer,is,recycled,buffer,recycle,buffer,assert,true,buffer,is,recycled
RemoteInputChannelTest -> @Test 	public void testRecycleExclusiveBufferBeforeReleased() throws Exception;1507647199;Tests {@link RemoteInputChannel#recycle(MemorySegment)}, verifying the exclusive segment is_recycled to available buffers directly and it triggers notify of announced credit.;@Test_	public void testRecycleExclusiveBufferBeforeReleased() throws Exception {_		final SingleInputGate inputGate = mock(SingleInputGate.class)__		final RemoteInputChannel inputChannel = spy(createRemoteInputChannel(inputGate))___		_		inputChannel.recycle(MemorySegmentFactory.allocateUnpooledSegment(1024, inputChannel))___		assertEquals("There should be one buffer available after recycle.",_			1, inputChannel.getNumberOfAvailableBuffers())__		verify(inputChannel, times(1)).notifyCreditAvailable()___		inputChannel.recycle(MemorySegmentFactory.allocateUnpooledSegment(1024, inputChannel))___		assertEquals("There should be two buffers available after recycle.",_			2, inputChannel.getNumberOfAvailableBuffers())__		_		verify(inputChannel, times(1)).notifyCreditAvailable()__	};tests,link,remote,input,channel,recycle,memory,segment,verifying,the,exclusive,segment,is,recycled,to,available,buffers,directly,and,it,triggers,notify,of,announced,credit;test,public,void,test,recycle,exclusive,buffer,before,released,throws,exception,final,single,input,gate,input,gate,mock,single,input,gate,class,final,remote,input,channel,input,channel,spy,create,remote,input,channel,input,gate,input,channel,recycle,memory,segment,factory,allocate,unpooled,segment,1024,input,channel,assert,equals,there,should,be,one,buffer,available,after,recycle,1,input,channel,get,number,of,available,buffers,verify,input,channel,times,1,notify,credit,available,input,channel,recycle,memory,segment,factory,allocate,unpooled,segment,1024,input,channel,assert,equals,there,should,be,two,buffers,available,after,recycle,2,input,channel,get,number,of,available,buffers,verify,input,channel,times,1,notify,credit,available
RemoteInputChannelTest -> @Test 	public void testRecycleExclusiveBufferBeforeReleased() throws Exception;1513102156;Tests {@link RemoteInputChannel#recycle(MemorySegment)}, verifying the exclusive segment is_recycled to available buffers directly and it triggers notify of announced credit.;@Test_	public void testRecycleExclusiveBufferBeforeReleased() throws Exception {_		final SingleInputGate inputGate = mock(SingleInputGate.class)__		final RemoteInputChannel inputChannel = spy(createRemoteInputChannel(inputGate))___		_		inputChannel.recycle(MemorySegmentFactory.allocateUnpooledSegment(1024, inputChannel))___		assertEquals("There should be one buffer available after recycle.",_			1, inputChannel.getNumberOfAvailableBuffers())__		verify(inputChannel, times(1)).notifyCreditAvailable()___		inputChannel.recycle(MemorySegmentFactory.allocateUnpooledSegment(1024, inputChannel))___		assertEquals("There should be two buffers available after recycle.",_			2, inputChannel.getNumberOfAvailableBuffers())__		_		verify(inputChannel, times(1)).notifyCreditAvailable()__	};tests,link,remote,input,channel,recycle,memory,segment,verifying,the,exclusive,segment,is,recycled,to,available,buffers,directly,and,it,triggers,notify,of,announced,credit;test,public,void,test,recycle,exclusive,buffer,before,released,throws,exception,final,single,input,gate,input,gate,mock,single,input,gate,class,final,remote,input,channel,input,channel,spy,create,remote,input,channel,input,gate,input,channel,recycle,memory,segment,factory,allocate,unpooled,segment,1024,input,channel,assert,equals,there,should,be,one,buffer,available,after,recycle,1,input,channel,get,number,of,available,buffers,verify,input,channel,times,1,notify,credit,available,input,channel,recycle,memory,segment,factory,allocate,unpooled,segment,1024,input,channel,assert,equals,there,should,be,two,buffers,available,after,recycle,2,input,channel,get,number,of,available,buffers,verify,input,channel,times,1,notify,credit,available
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1515408360;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycle()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycle()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1515408360;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycle()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycle()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1516285456;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycle()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycle()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1516285878;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1518785736;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1519834967;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffer available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffer,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1519834986;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1525116906;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1530785917;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())___		} finally {_			_			inputChannel.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,finally,input,channel,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1531388775;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1532012479;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1535633547;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1537385496;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,input,channel
RemoteInputChannelTest -> @Test 	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception;1543328832;Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available_buffers is more than required buffers by decreasing the sender's backlog.;@Test_	public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(16, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 14___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate)__		inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(), inputChannel)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			inputChannel.requestSubpartition(0)___			_			final Buffer exclusiveBuffer = inputChannel.requestBuffer()__			assertNotNull(exclusiveBuffer)___			final Buffer floatingBuffer = bufferPool.requestBuffer()__			assertNotNull(floatingBuffer)___			verify(bufferPool, times(1)).requestBuffer()___			_			inputChannel.onSenderBacklog(12)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 14 buffers required in the channel",_				14, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			inputChannel.onSenderBacklog(10)___			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 0 buffers available in local pool",_				0, bufferPool.getNumberOfAvailableMemorySegments())___			_			exclusiveBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 1 buffer available in local pool",_				1, bufferPool.getNumberOfAvailableMemorySegments())___			_			floatingBuffer.recycleBuffer()___			_			_			verify(bufferPool, times(14)).requestBuffer()__			verify(bufferPool, times(0)).addBufferListener(inputChannel)__			assertEquals("There should be 14 buffers available in the channel",_				14, inputChannel.getNumberOfAvailableBuffers())__			assertEquals("There should be 12 buffers required in the channel",_				12, inputChannel.getNumberOfRequiredBuffers())__			assertEquals("There should be 2 buffers available in local pool",_				2, bufferPool.getNumberOfAvailableMemorySegments())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, inputChannel)__		}_	};tests,to,verify,the,behaviours,of,recycling,floating,and,exclusive,buffers,if,the,number,of,available,buffers,is,more,than,required,buffers,by,decreasing,the,sender,s,backlog;test,public,void,test,available,buffers,more,than,required,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,16,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,14,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,input,channel,create,remote,input,channel,input,gate,input,gate,set,input,channel,input,channel,partition,id,get,partition,id,input,channel,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,input,channel,request,subpartition,0,final,buffer,exclusive,buffer,input,channel,request,buffer,assert,not,null,exclusive,buffer,final,buffer,floating,buffer,buffer,pool,request,buffer,assert,not,null,floating,buffer,verify,buffer,pool,times,1,request,buffer,input,channel,on,sender,backlog,12,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,14,buffers,required,in,the,channel,14,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,input,channel,on,sender,backlog,10,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,0,buffers,available,in,local,pool,0,buffer,pool,get,number,of,available,memory,segments,exclusive,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,1,buffer,available,in,local,pool,1,buffer,pool,get,number,of,available,memory,segments,floating,buffer,recycle,buffer,verify,buffer,pool,times,14,request,buffer,verify,buffer,pool,times,0,add,buffer,listener,input,channel,assert,equals,there,should,be,14,buffers,available,in,the,channel,14,input,channel,get,number,of,available,buffers,assert,equals,there,should,be,12,buffers,required,in,the,channel,12,input,channel,get,number,of,required,buffers,assert,equals,there,should,be,2,buffers,available,in,local,pool,2,buffer,pool,get,number,of,available,memory,segments,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,input,channel
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1515408360;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for(Callable task : tasks) {_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1515408360;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for(Callable task : tasks) {_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1516285456;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for(Callable task : tasks) {_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1516285878;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for(Callable task : tasks) {_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1518785736;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for(Callable task : tasks) {_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1519834967;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for(Callable task : tasks) {_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1519834986;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for(Callable task : tasks) {_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1525116906;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for(Callable task : tasks) {_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1530785917;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for (Callable task : tasks) {_			_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1531388775;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for (Callable task : tasks) {_			_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1532012479;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for (Callable task : tasks) {_			_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1535633547;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for (Callable task : tasks) {_			_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1537385496;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for (Callable task : tasks) {_			_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception;1543328832;Submits all the callable tasks to the executor and waits for the results.__@param executor The executor service for running tasks._@param tasks The callable tasks to be submitted and executed.;private void submitTasksAndWaitForResults(ExecutorService executor, Callable[] tasks) throws Exception {_		final List<Future> results = Lists.newArrayListWithCapacity(tasks.length)___		for (Callable task : tasks) {_			_			results.add(executor.submit(task))__		}__		for (Future result : results) {_			result.get()__		}_	};submits,all,the,callable,tasks,to,the,executor,and,waits,for,the,results,param,executor,the,executor,service,for,running,tasks,param,tasks,the,callable,tasks,to,be,submitted,and,executed;private,void,submit,tasks,and,wait,for,results,executor,service,executor,callable,tasks,throws,exception,final,list,future,results,lists,new,array,list,with,capacity,tasks,length,for,callable,task,tasks,results,add,executor,submit,task,for,future,result,results,result,get
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1515408360;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycle()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())___		} finally {_			_			channel1.releaseAllResources()__			channel2.releaseAllResources()__			channel3.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,finally,channel1,release,all,resources,channel2,release,all,resources,channel3,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1515408360;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycle()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())___		} finally {_			_			channel1.releaseAllResources()__			channel2.releaseAllResources()__			channel3.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,finally,channel1,release,all,resources,channel2,release,all,resources,channel3,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1516285456;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycle()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())___		} finally {_			_			channel1.releaseAllResources()__			channel2.releaseAllResources()__			channel3.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,finally,channel1,release,all,resources,channel2,release,all,resources,channel3,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1516285878;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycleBuffer()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())___		} finally {_			_			channel1.releaseAllResources()__			channel2.releaseAllResources()__			channel3.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,finally,channel1,release,all,resources,channel2,release,all,resources,channel3,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1518785736;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycleBuffer()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())___		} finally {_			_			channel1.releaseAllResources()__			channel2.releaseAllResources()__			channel3.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,finally,channel1,release,all,resources,channel2,release,all,resources,channel3,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1519834967;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycleBuffer()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())___		} finally {_			_			channel1.releaseAllResources()__			channel2.releaseAllResources()__			channel3.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,finally,channel1,release,all,resources,channel2,release,all,resources,channel3,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1519834986;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycleBuffer()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())___		} finally {_			_			channel1.releaseAllResources()__			channel2.releaseAllResources()__			channel3.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,finally,channel1,release,all,resources,channel2,release,all,resources,channel3,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1525116906;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycleBuffer()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())___		} finally {_			_			channel1.releaseAllResources()__			channel2.releaseAllResources()__			channel3.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,finally,channel1,release,all,resources,channel2,release,all,resources,channel3,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1530785917;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycleBuffer()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())___		} finally {_			_			channel1.releaseAllResources()__			channel2.releaseAllResources()__			channel3.releaseAllResources()___			networkBufferPool.destroyAllBufferPools()__			networkBufferPool.destroy()__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,finally,channel1,release,all,resources,channel2,release,all,resources,channel3,release,all,resources,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1531388775;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycleBuffer()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, thrown, channel1, channel2, channel3)__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,thrown,channel1,channel2,channel3
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1532012479;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycleBuffer()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, channel1, channel2, channel3)__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,channel1,channel2,channel3
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1535633547;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycleBuffer()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, channel1, channel2, channel3)__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,channel1,channel2,channel3
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1537385496;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycleBuffer()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, channel1, channel2, channel3)__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,channel1,channel2,channel3
RemoteInputChannelTest -> @Test 	public void testFairDistributionFloatingBuffers() throws Exception;1543328832;Tests to verify that the buffer pool will distribute available floating buffers among_all the channel listeners in a fair way.;@Test_	public void testFairDistributionFloatingBuffers() throws Exception {_		_		final NetworkBufferPool networkBufferPool = new NetworkBufferPool(12, 32)__		final int numExclusiveBuffers = 2__		final int numFloatingBuffers = 3___		final SingleInputGate inputGate = createSingleInputGate()__		final RemoteInputChannel channel1 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel2 = spy(createRemoteInputChannel(inputGate))__		final RemoteInputChannel channel3 = spy(createRemoteInputChannel(inputGate))__		inputGate.setInputChannel(channel1.partitionId.getPartitionId(), channel1)__		inputGate.setInputChannel(channel2.partitionId.getPartitionId(), channel2)__		inputGate.setInputChannel(channel3.partitionId.getPartitionId(), channel3)__		Throwable thrown = null__		try {_			final BufferPool bufferPool = spy(networkBufferPool.createBufferPool(numFloatingBuffers, numFloatingBuffers))__			inputGate.setBufferPool(bufferPool)__			inputGate.assignExclusiveSegments(networkBufferPool, numExclusiveBuffers)__			channel1.requestSubpartition(0)__			channel2.requestSubpartition(0)__			channel3.requestSubpartition(0)___			_			final List<Buffer> floatingBuffers = new ArrayList<>(numFloatingBuffers)__			for (int i = 0_ i < numFloatingBuffers_ i++) {_				Buffer buffer = bufferPool.requestBuffer()__				assertNotNull(buffer)__				floatingBuffers.add(buffer)__			}__			_			_			channel1.onSenderBacklog(8)__			channel2.onSenderBacklog(8)__			channel3.onSenderBacklog(8)___			verify(bufferPool, times(1)).addBufferListener(channel1)__			verify(bufferPool, times(1)).addBufferListener(channel2)__			verify(bufferPool, times(1)).addBufferListener(channel3)__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be " + numExclusiveBuffers + " buffers available in the channel",_				numExclusiveBuffers, channel3.getNumberOfAvailableBuffers())___			_			for (Buffer buffer : floatingBuffers) {_				buffer.recycleBuffer()__			}__			verify(channel1, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel2, times(1)).notifyBufferAvailable(any(Buffer.class))__			verify(channel3, times(1)).notifyBufferAvailable(any(Buffer.class))__			assertEquals("There should be 3 buffers available in the channel", 3, channel1.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel2.getNumberOfAvailableBuffers())__			assertEquals("There should be 3 buffers available in the channel", 3, channel3.getNumberOfAvailableBuffers())__		} catch (Throwable t) {_			thrown = t__		} finally {_			cleanup(networkBufferPool, null, null, thrown, channel1, channel2, channel3)__		}_	};tests,to,verify,that,the,buffer,pool,will,distribute,available,floating,buffers,among,all,the,channel,listeners,in,a,fair,way;test,public,void,test,fair,distribution,floating,buffers,throws,exception,final,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,12,32,final,int,num,exclusive,buffers,2,final,int,num,floating,buffers,3,final,single,input,gate,input,gate,create,single,input,gate,final,remote,input,channel,channel1,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel2,spy,create,remote,input,channel,input,gate,final,remote,input,channel,channel3,spy,create,remote,input,channel,input,gate,input,gate,set,input,channel,channel1,partition,id,get,partition,id,channel1,input,gate,set,input,channel,channel2,partition,id,get,partition,id,channel2,input,gate,set,input,channel,channel3,partition,id,get,partition,id,channel3,throwable,thrown,null,try,final,buffer,pool,buffer,pool,spy,network,buffer,pool,create,buffer,pool,num,floating,buffers,num,floating,buffers,input,gate,set,buffer,pool,buffer,pool,input,gate,assign,exclusive,segments,network,buffer,pool,num,exclusive,buffers,channel1,request,subpartition,0,channel2,request,subpartition,0,channel3,request,subpartition,0,final,list,buffer,floating,buffers,new,array,list,num,floating,buffers,for,int,i,0,i,num,floating,buffers,i,buffer,buffer,buffer,pool,request,buffer,assert,not,null,buffer,floating,buffers,add,buffer,channel1,on,sender,backlog,8,channel2,on,sender,backlog,8,channel3,on,sender,backlog,8,verify,buffer,pool,times,1,add,buffer,listener,channel1,verify,buffer,pool,times,1,add,buffer,listener,channel2,verify,buffer,pool,times,1,add,buffer,listener,channel3,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel1,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel2,get,number,of,available,buffers,assert,equals,there,should,be,num,exclusive,buffers,buffers,available,in,the,channel,num,exclusive,buffers,channel3,get,number,of,available,buffers,for,buffer,buffer,floating,buffers,buffer,recycle,buffer,verify,channel1,times,1,notify,buffer,available,any,buffer,class,verify,channel2,times,1,notify,buffer,available,any,buffer,class,verify,channel3,times,1,notify,buffer,available,any,buffer,class,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel1,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel2,get,number,of,available,buffers,assert,equals,there,should,be,3,buffers,available,in,the,channel,3,channel3,get,number,of,available,buffers,catch,throwable,t,thrown,t,finally,cleanup,network,buffer,pool,null,null,thrown,channel1,channel2,channel3
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1515408360;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycle()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1515408360;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycle()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1516285456;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycle()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1516285878;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1518785736;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1519834967;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1519834986;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1525116906;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1530785917;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1531388775;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1532012479;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1535633547;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1537385496;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,buffer,return,null
RemoteInputChannelTest -> private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments);1543328832;Requests the exclusive buffers from input channel first and then recycles them by a callable task.__@param inputChannel The input channel that exclusive buffers request from._@param numExclusiveSegments The number of exclusive buffers to request._@return The callable task to recycle exclusive buffers.;private Callable<Void> recycleExclusiveBufferTask(RemoteInputChannel inputChannel, int numExclusiveSegments) {_		final List<Buffer> exclusiveBuffers = new ArrayList<>(numExclusiveSegments)__		_		for (int i = 0_ i < numExclusiveSegments_ i++) {_			Buffer buffer = inputChannel.requestBuffer()__			assertNotNull(buffer)__			exclusiveBuffers.add(buffer)__		}__		return new Callable<Void>() {_			@Override_			public Void call() throws Exception {_				for (Buffer buffer : exclusiveBuffers) {_					buffer.recycleBuffer()__				}__				return null__			}_		}__	};requests,the,exclusive,buffers,from,input,channel,first,and,then,recycles,them,by,a,callable,task,param,input,channel,the,input,channel,that,exclusive,buffers,request,from,param,num,exclusive,segments,the,number,of,exclusive,buffers,to,request,return,the,callable,task,to,recycle,exclusive,buffers;private,callable,void,recycle,exclusive,buffer,task,remote,input,channel,input,channel,int,num,exclusive,segments,final,list,buffer,exclusive,buffers,new,array,list,num,exclusive,segments,for,int,i,0,i,num,exclusive,segments,i,buffer,buffer,input,channel,request,buffer,assert,not,null,buffer,exclusive,buffers,add,buffer,return,new,callable,void,override,public,void,call,throws,exception,for,buffer,buffer,exclusive,buffers,buffer,recycle,buffer,return,null
