commented;modifiers;parameterAmount;loc;comment;code
true;public;0;46;/**  * This tests that the creation of {@link TaskManagerServices} correctly creates the local state root directory  * for the {@link TaskExecutorLocalStateStoresManager} with the configured root directory.  */ ;/**  * This tests that the creation of {@link TaskManagerServices} correctly creates the local state root directory  * for the {@link TaskExecutorLocalStateStoresManager} with the configured root directory.  */ @Test public void testCreationFromConfig() throws Exception {     final Configuration config = new Configuration().     File newFolder = temporaryFolder.newFolder().     String tmpDir = newFolder.getAbsolutePath() + File.separator.     final String rootDirString = "__localStateRoot1,__localStateRoot2,__localStateRoot3".replaceAll("__", tmpDir).     // test configuration of the local state directories     config.setString(CheckpointingOptions.LOCAL_RECOVERY_TASK_MANAGER_STATE_ROOT_DIRS, rootDirString).     // test configuration of the local state mode     config.setBoolean(CheckpointingOptions.LOCAL_RECOVERY, true).     final ResourceID tmResourceID = ResourceID.generate().     TaskManagerServicesConfiguration taskManagerServicesConfiguration = TaskManagerServicesConfiguration.fromConfiguration(config, InetAddress.getLocalHost(), true).     TaskManagerServices taskManagerServices = TaskManagerServices.fromConfiguration(taskManagerServicesConfiguration, tmResourceID, Executors.directExecutor(), MEM_SIZE_PARAM, MEM_SIZE_PARAM).     TaskExecutorLocalStateStoresManager taskStateManager = taskManagerServices.getTaskManagerStateStore().     // verify configured directories for local state     String[] split = rootDirString.split(",").     File[] rootDirectories = taskStateManager.getLocalStateRootDirectories().     for (int i = 0. i < split.length. ++i) {         Assert.assertEquals(new File(split[i], TaskManagerServices.LOCAL_STATE_SUB_DIRECTORY_ROOT), rootDirectories[i]).     }     // verify local recovery mode     Assert.assertTrue(taskStateManager.isLocalRecoveryEnabled()).     Assert.assertEquals("localState", TaskManagerServices.LOCAL_STATE_SUB_DIRECTORY_ROOT).     for (File rootDirectory : rootDirectories) {         FileUtils.deleteFileOrDirectory(rootDirectory).     } }
true;public;0;30;/**  * This tests that the creation of {@link TaskManagerServices} correctly falls back to the first tmp directory of  * the IOManager as default for the local state root directory.  */ ;/**  * This tests that the creation of {@link TaskManagerServices} correctly falls back to the first tmp directory of  * the IOManager as default for the local state root directory.  */ @Test public void testCreationFromConfigDefault() throws Exception {     final Configuration config = new Configuration().     final ResourceID tmResourceID = ResourceID.generate().     TaskManagerServicesConfiguration taskManagerServicesConfiguration = TaskManagerServicesConfiguration.fromConfiguration(config, InetAddress.getLocalHost(), true).     TaskManagerServices taskManagerServices = TaskManagerServices.fromConfiguration(taskManagerServicesConfiguration, tmResourceID, Executors.directExecutor(), MEM_SIZE_PARAM, MEM_SIZE_PARAM).     TaskExecutorLocalStateStoresManager taskStateManager = taskManagerServices.getTaskManagerStateStore().     String[] tmpDirPaths = taskManagerServicesConfiguration.getTmpDirPaths().     File[] localStateRootDirectories = taskStateManager.getLocalStateRootDirectories().     for (int i = 0. i < tmpDirPaths.length. ++i) {         Assert.assertEquals(new File(tmpDirPaths[i], TaskManagerServices.LOCAL_STATE_SUB_DIRECTORY_ROOT), localStateRootDirectories[i]).     }     Assert.assertFalse(taskStateManager.isLocalRecoveryEnabled()). }
true;public;0;72;/**  * This tests that the {@link TaskExecutorLocalStateStoresManager} creates {@link TaskLocalStateStoreImpl} that have  * a properly initialized local state base directory. It also checks that subdirectories are correctly deleted on  * shutdown.  */ ;/**  * This tests that the {@link TaskExecutorLocalStateStoresManager} creates {@link TaskLocalStateStoreImpl} that have  * a properly initialized local state base directory. It also checks that subdirectories are correctly deleted on  * shutdown.  */ @Test public void testSubtaskStateStoreDirectoryCreateAndDelete() throws Exception {     JobID jobID = new JobID().     JobVertexID jobVertexID = new JobVertexID().     AllocationID allocationID = new AllocationID().     int subtaskIdx = 23.     File[] rootDirs = { temporaryFolder.newFolder(), temporaryFolder.newFolder(), temporaryFolder.newFolder() }.     TaskExecutorLocalStateStoresManager storesManager = new TaskExecutorLocalStateStoresManager(true, rootDirs, Executors.directExecutor()).     TaskLocalStateStore taskLocalStateStore = storesManager.localStateStoreForSubtask(jobID, allocationID, jobVertexID, subtaskIdx).     LocalRecoveryDirectoryProvider directoryProvider = taskLocalStateStore.getLocalRecoveryConfig().getLocalStateDirectoryProvider().     for (int i = 0. i < 10. ++i) {         Assert.assertEquals(new File(rootDirs[(i & Integer.MAX_VALUE) % rootDirs.length], storesManager.allocationSubDirString(allocationID)), directoryProvider.allocationBaseDirectory(i)).     }     long chkId = 42L.     File allocBaseDirChk42 = directoryProvider.allocationBaseDirectory(chkId).     File subtaskSpecificCheckpointDirectory = directoryProvider.subtaskSpecificCheckpointDirectory(chkId).     Assert.assertEquals(new File(allocBaseDirChk42, "jid_" + jobID + File.separator + "vtx_" + jobVertexID + "_" + "sti_" + subtaskIdx + File.separator + "chk_" + chkId), subtaskSpecificCheckpointDirectory).     Assert.assertTrue(subtaskSpecificCheckpointDirectory.mkdirs()).     File testFile = new File(subtaskSpecificCheckpointDirectory, "test").     Assert.assertTrue(testFile.createNewFile()).     // test that local recovery mode is forwarded to the created store     Assert.assertEquals(storesManager.isLocalRecoveryEnabled(), taskLocalStateStore.getLocalRecoveryConfig().isLocalRecoveryEnabled()).     Assert.assertTrue(testFile.exists()).     // check cleanup after releasing allocation id     storesManager.releaseLocalStateForAllocationId(allocationID).     checkRootDirsClean(rootDirs).     AllocationID otherAllocationID = new AllocationID().     taskLocalStateStore = storesManager.localStateStoreForSubtask(jobID, otherAllocationID, jobVertexID, subtaskIdx).     directoryProvider = taskLocalStateStore.getLocalRecoveryConfig().getLocalStateDirectoryProvider().     File chkDir = directoryProvider.subtaskSpecificCheckpointDirectory(23L).     Assert.assertTrue(chkDir.mkdirs()).     testFile = new File(chkDir, "test").     Assert.assertTrue(testFile.createNewFile()).     // check cleanup after shutdown     storesManager.shutdown().     checkRootDirsClean(rootDirs). }
false;private;1;8;;private void checkRootDirsClean(File[] rootDirs) {     for (File rootDir : rootDirs) {         File[] files = rootDir.listFiles().         if (files != null) {             Assert.assertArrayEquals(new File[0], files).         }     } }
