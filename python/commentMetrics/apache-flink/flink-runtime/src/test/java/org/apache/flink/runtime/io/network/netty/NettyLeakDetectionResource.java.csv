commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;14;;@Override protected void before() {     synchronized (refCountLock) {         if (refCount == 0) {             previousLeakDetector = ResourceLeakDetectorFactory.instance().             previousLeakDetectorLevel = ResourceLeakDetector.getLevel().             ++refCount.             ResourceLeakDetector.setLevel(ResourceLeakDetector.Level.PARANOID).             ResourceLeakDetectorFactory.setResourceLeakDetectorFactory(new FailingResourceLeakDetectorFactory()).         }     } }
false;protected,synchronized;0;10;;@Override protected synchronized void after() {     synchronized (refCountLock) {         --refCount.         if (refCount == 0) {             ResourceLeakDetectorFactory.setResourceLeakDetectorFactory(previousLeakDetector).             ResourceLeakDetector.setLevel(previousLeakDetectorLevel).         }     } }
false;public;3;4;;public <T> ResourceLeakDetector<T> newResourceLeakDetector(Class<T> resource, int samplingInterval, long maxActive) {     return new FailingResourceLeakDetector<T>(resource, samplingInterval, maxActive). }
false;protected;2;6;;@Override protected void reportTracedLeak(String resourceType, String records) {     super.reportTracedLeak(resourceType, records).     fail(String.format("LEAK: %s.release() was not called before it's garbage-collected.%s", resourceType, records)). }
false;protected;1;6;;@Override protected void reportUntracedLeak(String resourceType) {     super.reportUntracedLeak(resourceType).     fail(String.format("LEAK: %s.release() was not called before it's garbage-collected.", resourceType)). }
