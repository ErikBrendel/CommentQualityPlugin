commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;@Test public void testWaitFromOne() {     try {         SuperstepKickoffLatch latch = new SuperstepKickoffLatch().         Waiter w = new Waiter(latch, 2).         Thread waiter = new Thread(w).         waiter.setDaemon(true).         waiter.start().         WatchDog wd = new WatchDog(waiter, 2000).         wd.start().         Thread.sleep(100).         latch.triggerNextSuperstep().         wd.join().         if (wd.getError() != null) {             throw wd.getError().         }         if (w.getError() != null) {             throw w.getError().         }     } catch (Throwable t) {         t.printStackTrace().         Assert.fail("Error: " + t.getMessage()).     } }
false;public;0;30;;@Test public void testWaitAlreadyFulfilled() {     try {         SuperstepKickoffLatch latch = new SuperstepKickoffLatch().         latch.triggerNextSuperstep().         Waiter w = new Waiter(latch, 2).         Thread waiter = new Thread(w).         waiter.setDaemon(true).         waiter.start().         WatchDog wd = new WatchDog(waiter, 2000).         wd.start().         Thread.sleep(100).         wd.join().         if (wd.getError() != null) {             throw wd.getError().         }         if (w.getError() != null) {             throw w.getError().         }     } catch (Throwable t) {         t.printStackTrace().         Assert.fail("Error: " + t.getMessage()).     } }
false;public;0;20;;@Test public void testWaitIncorrect() {     try {         SuperstepKickoffLatch latch = new SuperstepKickoffLatch().         latch.triggerNextSuperstep().         latch.triggerNextSuperstep().         try {             latch.awaitStartOfSuperstepOrTermination(2).             Assert.fail("should throw exception").         } catch (IllegalStateException e) {         // good         }     } catch (Exception e) {         e.printStackTrace().         Assert.fail("Error: " + e.getMessage()).     } }
false;public;0;35;;@Test public void testWaitIncorrectAsync() {     try {         SuperstepKickoffLatch latch = new SuperstepKickoffLatch().         latch.triggerNextSuperstep().         latch.triggerNextSuperstep().         Waiter w = new Waiter(latch, 2).         Thread waiter = new Thread(w).         waiter.setDaemon(true).         waiter.start().         WatchDog wd = new WatchDog(waiter, 2000).         wd.start().         Thread.sleep(100).         wd.join().         if (wd.getError() != null) {             throw wd.getError().         }         if (w.getError() != null) {             if (!(w.getError() instanceof IllegalStateException)) {                 throw new Exception("wrong exception type " + w.getError()).             }         } else {             Assert.fail("should cause exception").         }     } catch (Throwable t) {         t.printStackTrace().         Assert.fail("Error: " + t.getMessage()).     } }
false;public;0;31;;@Test public void testWaitForTermination() {     try {         SuperstepKickoffLatch latch = new SuperstepKickoffLatch().         latch.triggerNextSuperstep().         latch.triggerNextSuperstep().         Waiter w = new Waiter(latch, 4).         Thread waiter = new Thread(w).         waiter.setDaemon(true).         waiter.start().         WatchDog wd = new WatchDog(waiter, 2000).         wd.start().         latch.signalTermination().         wd.join().         if (wd.getError() != null) {             throw wd.getError().         }         if (w.getError() != null) {             throw w.getError().         }     } catch (Throwable t) {         t.printStackTrace().         Assert.fail("Error: " + t.getMessage()).     } }
false;public;0;9;;@Override public void run() {     try {         latch.awaitStartOfSuperstepOrTermination(waitFor).     } catch (Throwable t) {         this.error = t.     } }
false;public;0;3;;public Throwable getError() {     return error. }
false;public;0;20;;@SuppressWarnings("deprecation") @Override public void run() {     try {         toWatch.join(timeOut).         if (toWatch.isAlive()) {             this.failed = new Exception("timed out").             toWatch.interrupt().             toWatch.join(2000).             if (toWatch.isAlive()) {                 toWatch.stop().             }         }     } catch (Throwable t) {         failed = t.     } }
false;public;0;3;;public Throwable getError() {     return failed. }
