# id;timestamp;commentText;codeText;commentWords;codeWords
AsyncCallsTest -> @Test 	public void testCallAsyncWithoutFencing() throws Exception;1504474506;Tests that async callables can be executed in the main thread without checking the fencing token.;@Test_	public void testCallAsyncWithoutFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsyncWithoutFencing(() -> true, timeout),_			newFencingToken)___		assertTrue(resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,async,callables,can,be,executed,in,the,main,thread,without,checking,the,fencing,token;test,public,void,test,call,async,without,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,without,fencing,true,timeout,new,fencing,token,assert,true,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testCallAsyncWithoutFencing() throws Exception;1506034747;Tests that async callables can be executed in the main thread without checking the fencing token.;@Test_	public void testCallAsyncWithoutFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsyncWithoutFencing(() -> true, timeout),_			newFencingToken)___		assertTrue(resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,async,callables,can,be,executed,in,the,main,thread,without,checking,the,fencing,token;test,public,void,test,call,async,without,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,without,fencing,true,timeout,new,fencing,token,assert,true,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testCallAsyncWithoutFencing() throws Exception;1515481550;Tests that async callables can be executed in the main thread without checking the fencing token.;@Test_	public void testCallAsyncWithoutFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsyncWithoutFencing(() -> true, timeout),_			newFencingToken)___		assertTrue(resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,async,callables,can,be,executed,in,the,main,thread,without,checking,the,fencing,token;test,public,void,test,call,async,without,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,without,fencing,true,timeout,new,fencing,token,assert,true,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testCallAsyncWithoutFencing() throws Exception;1519406526;Tests that async callables can be executed in the main thread without checking the fencing token.;@Test_	public void testCallAsyncWithoutFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsyncWithoutFencing(() -> true, timeout),_			newFencingToken)___		assertTrue(resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,async,callables,can,be,executed,in,the,main,thread,without,checking,the,fencing,token;test,public,void,test,call,async,without,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,without,fencing,true,timeout,new,fencing,token,assert,true,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testCallAsyncWithoutFencing() throws Exception;1519406528;Tests that async callables can be executed in the main thread without checking the fencing token.;@Test_	public void testCallAsyncWithoutFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsyncWithoutFencing(() -> true, timeout),_			newFencingToken)___		assertTrue(resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,async,callables,can,be,executed,in,the,main,thread,without,checking,the,fencing,token;test,public,void,test,call,async,without,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,without,fencing,true,timeout,new,fencing,token,assert,true,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testCallAsyncWithoutFencing() throws Exception;1522339661;Tests that async callables can be executed in the main thread without checking the fencing token.;@Test_	public void testCallAsyncWithoutFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsyncWithoutFencing(() -> true, timeout),_			newFencingToken)___		assertTrue(resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,async,callables,can,be,executed,in,the,main,thread,without,checking,the,fencing,token;test,public,void,test,call,async,without,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,without,fencing,true,timeout,new,fencing,token,assert,true,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testCallAsyncWithoutFencing() throws Exception;1522681180;Tests that async callables can be executed in the main thread without checking the fencing token.;@Test_	public void testCallAsyncWithoutFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsyncWithoutFencing(() -> true, timeout),_			newFencingToken)___		assertTrue(resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,async,callables,can,be,executed,in,the,main,thread,without,checking,the,fencing,token;test,public,void,test,call,async,without,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,without,fencing,true,timeout,new,fencing,token,assert,true,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testCallAsyncWithoutFencing() throws Exception;1522849792;Tests that async callables can be executed in the main thread without checking the fencing token.;@Test_	public void testCallAsyncWithoutFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsyncWithoutFencing(() -> true, timeout),_			newFencingToken)___		assertTrue(resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,async,callables,can,be,executed,in,the,main,thread,without,checking,the,fencing,token;test,public,void,test,call,async,without,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,without,fencing,true,timeout,new,fencing,token,assert,true,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testCallAsyncWithoutFencing() throws Exception;1526494919;Tests that async callables can be executed in the main thread without checking the fencing token.;@Test_	public void testCallAsyncWithoutFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsyncWithoutFencing(() -> true, timeout),_			newFencingToken)___		assertTrue(resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,async,callables,can,be,executed,in,the,main,thread,without,checking,the,fencing,token;test,public,void,test,call,async,without,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,without,fencing,true,timeout,new,fencing,token,assert,true,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testCallAsyncWithoutFencing() throws Exception;1548326020;Tests that async callables can be executed in the main thread without checking the fencing token.;@Test_	public void testCallAsyncWithoutFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsyncWithoutFencing(() -> true, timeout),_			newFencingToken)___		assertTrue(resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,async,callables,can,be,executed,in,the,main,thread,without,checking,the,fencing,token;test,public,void,test,call,async,without,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,without,fencing,true,timeout,new,fencing,token,assert,true,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testCallAsyncWithoutFencing() throws Exception;1550005039;Tests that async callables can be executed in the main thread without checking the fencing token.;@Test_	public void testCallAsyncWithoutFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsyncWithoutFencing(() -> true, timeout),_			newFencingToken)___		assertTrue(resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,async,callables,can,be,executed,in,the,main,thread,without,checking,the,fencing,token;test,public,void,test,call,async,without,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,without,fencing,true,timeout,new,fencing,token,assert,true,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testCallAsyncWithoutFencing() throws Exception;1550005040;Tests that async callables can be executed in the main thread without checking the fencing token.;@Test_	public void testCallAsyncWithoutFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsyncWithoutFencing(() -> true, timeout),_			newFencingToken)___		assertTrue(resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,async,callables,can,be,executed,in,the,main,thread,without,checking,the,fencing,token;test,public,void,test,call,async,without,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,without,fencing,true,timeout,new,fencing,token,assert,true,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testRunAsyncWithFencing() throws Exception;1504474506;Tests that async code is not executed if the fencing token changes.;@Test_	public void testRunAsyncWithFencing() throws Exception {_		final Time shortTimeout = Time.milliseconds(100L)__		final UUID newFencingToken = UUID.randomUUID()__		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()___		testRunAsync(_			endpoint -> {_				endpoint.runAsync(_					() -> resultFuture.complete(endpoint.getFencingToken()))___				return resultFuture__			},_			newFencingToken)___		try {_			resultFuture.get(shortTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async run operation should not complete since it is filtered out due to the changed fencing token.")__		} catch (TimeoutException ignored) {}_	};tests,that,async,code,is,not,executed,if,the,fencing,token,changes;test,public,void,test,run,async,with,fencing,throws,exception,final,time,short,timeout,time,milliseconds,100l,final,uuid,new,fencing,token,uuid,random,uuid,final,completable,future,uuid,result,future,new,completable,future,test,run,async,endpoint,endpoint,run,async,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,try,result,future,get,short,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,run,operation,should,not,complete,since,it,is,filtered,out,due,to,the,changed,fencing,token,catch,timeout,exception,ignored
AsyncCallsTest -> @Test 	public void testRunAsyncWithFencing() throws Exception;1506034747;Tests that async code is not executed if the fencing token changes.;@Test_	public void testRunAsyncWithFencing() throws Exception {_		final Time shortTimeout = Time.milliseconds(100L)__		final UUID newFencingToken = UUID.randomUUID()__		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()___		testRunAsync(_			endpoint -> {_				endpoint.runAsync(_					() -> resultFuture.complete(endpoint.getFencingToken()))___				return resultFuture__			},_			newFencingToken)___		try {_			resultFuture.get(shortTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async run operation should not complete since it is filtered out due to the changed fencing token.")__		} catch (TimeoutException ignored) {}_	};tests,that,async,code,is,not,executed,if,the,fencing,token,changes;test,public,void,test,run,async,with,fencing,throws,exception,final,time,short,timeout,time,milliseconds,100l,final,uuid,new,fencing,token,uuid,random,uuid,final,completable,future,uuid,result,future,new,completable,future,test,run,async,endpoint,endpoint,run,async,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,try,result,future,get,short,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,run,operation,should,not,complete,since,it,is,filtered,out,due,to,the,changed,fencing,token,catch,timeout,exception,ignored
AsyncCallsTest -> @Test 	public void testRunAsyncWithFencing() throws Exception;1515481550;Tests that async code is not executed if the fencing token changes.;@Test_	public void testRunAsyncWithFencing() throws Exception {_		final Time shortTimeout = Time.milliseconds(100L)__		final UUID newFencingToken = UUID.randomUUID()__		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()___		testRunAsync(_			endpoint -> {_				endpoint.runAsync(_					() -> resultFuture.complete(endpoint.getFencingToken()))___				return resultFuture__			},_			newFencingToken)___		try {_			resultFuture.get(shortTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async run operation should not complete since it is filtered out due to the changed fencing token.")__		} catch (TimeoutException ignored) {}_	};tests,that,async,code,is,not,executed,if,the,fencing,token,changes;test,public,void,test,run,async,with,fencing,throws,exception,final,time,short,timeout,time,milliseconds,100l,final,uuid,new,fencing,token,uuid,random,uuid,final,completable,future,uuid,result,future,new,completable,future,test,run,async,endpoint,endpoint,run,async,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,try,result,future,get,short,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,run,operation,should,not,complete,since,it,is,filtered,out,due,to,the,changed,fencing,token,catch,timeout,exception,ignored
AsyncCallsTest -> @Test 	public void testRunAsyncWithFencing() throws Exception;1519406526;Tests that async code is not executed if the fencing token changes.;@Test_	public void testRunAsyncWithFencing() throws Exception {_		final Time shortTimeout = Time.milliseconds(100L)__		final UUID newFencingToken = UUID.randomUUID()__		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()___		testRunAsync(_			endpoint -> {_				endpoint.runAsync(_					() -> resultFuture.complete(endpoint.getFencingToken()))___				return resultFuture__			},_			newFencingToken)___		try {_			resultFuture.get(shortTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async run operation should not complete since it is filtered out due to the changed fencing token.")__		} catch (TimeoutException ignored) {}_	};tests,that,async,code,is,not,executed,if,the,fencing,token,changes;test,public,void,test,run,async,with,fencing,throws,exception,final,time,short,timeout,time,milliseconds,100l,final,uuid,new,fencing,token,uuid,random,uuid,final,completable,future,uuid,result,future,new,completable,future,test,run,async,endpoint,endpoint,run,async,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,try,result,future,get,short,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,run,operation,should,not,complete,since,it,is,filtered,out,due,to,the,changed,fencing,token,catch,timeout,exception,ignored
AsyncCallsTest -> @Test 	public void testRunAsyncWithFencing() throws Exception;1519406528;Tests that async code is not executed if the fencing token changes.;@Test_	public void testRunAsyncWithFencing() throws Exception {_		final Time shortTimeout = Time.milliseconds(100L)__		final UUID newFencingToken = UUID.randomUUID()__		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()___		testRunAsync(_			endpoint -> {_				endpoint.runAsync(_					() -> resultFuture.complete(endpoint.getFencingToken()))___				return resultFuture__			},_			newFencingToken)___		try {_			resultFuture.get(shortTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async run operation should not complete since it is filtered out due to the changed fencing token.")__		} catch (TimeoutException ignored) {}_	};tests,that,async,code,is,not,executed,if,the,fencing,token,changes;test,public,void,test,run,async,with,fencing,throws,exception,final,time,short,timeout,time,milliseconds,100l,final,uuid,new,fencing,token,uuid,random,uuid,final,completable,future,uuid,result,future,new,completable,future,test,run,async,endpoint,endpoint,run,async,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,try,result,future,get,short,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,run,operation,should,not,complete,since,it,is,filtered,out,due,to,the,changed,fencing,token,catch,timeout,exception,ignored
AsyncCallsTest -> @Test 	public void testRunAsyncWithFencing() throws Exception;1522339661;Tests that async code is not executed if the fencing token changes.;@Test_	public void testRunAsyncWithFencing() throws Exception {_		final Time shortTimeout = Time.milliseconds(100L)__		final UUID newFencingToken = UUID.randomUUID()__		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()___		testRunAsync(_			endpoint -> {_				endpoint.runAsync(_					() -> resultFuture.complete(endpoint.getFencingToken()))___				return resultFuture__			},_			newFencingToken)___		try {_			resultFuture.get(shortTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async run operation should not complete since it is filtered out due to the changed fencing token.")__		} catch (TimeoutException ignored) {}_	};tests,that,async,code,is,not,executed,if,the,fencing,token,changes;test,public,void,test,run,async,with,fencing,throws,exception,final,time,short,timeout,time,milliseconds,100l,final,uuid,new,fencing,token,uuid,random,uuid,final,completable,future,uuid,result,future,new,completable,future,test,run,async,endpoint,endpoint,run,async,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,try,result,future,get,short,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,run,operation,should,not,complete,since,it,is,filtered,out,due,to,the,changed,fencing,token,catch,timeout,exception,ignored
AsyncCallsTest -> @Test 	public void testRunAsyncWithFencing() throws Exception;1522681180;Tests that async code is not executed if the fencing token changes.;@Test_	public void testRunAsyncWithFencing() throws Exception {_		final Time shortTimeout = Time.milliseconds(100L)__		final UUID newFencingToken = UUID.randomUUID()__		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()___		testRunAsync(_			endpoint -> {_				endpoint.runAsync(_					() -> resultFuture.complete(endpoint.getFencingToken()))___				return resultFuture__			},_			newFencingToken)___		try {_			resultFuture.get(shortTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async run operation should not complete since it is filtered out due to the changed fencing token.")__		} catch (TimeoutException ignored) {}_	};tests,that,async,code,is,not,executed,if,the,fencing,token,changes;test,public,void,test,run,async,with,fencing,throws,exception,final,time,short,timeout,time,milliseconds,100l,final,uuid,new,fencing,token,uuid,random,uuid,final,completable,future,uuid,result,future,new,completable,future,test,run,async,endpoint,endpoint,run,async,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,try,result,future,get,short,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,run,operation,should,not,complete,since,it,is,filtered,out,due,to,the,changed,fencing,token,catch,timeout,exception,ignored
AsyncCallsTest -> @Test 	public void testRunAsyncWithFencing() throws Exception;1522849792;Tests that async code is not executed if the fencing token changes.;@Test_	public void testRunAsyncWithFencing() throws Exception {_		final Time shortTimeout = Time.milliseconds(100L)__		final UUID newFencingToken = UUID.randomUUID()__		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()___		testRunAsync(_			endpoint -> {_				endpoint.runAsync(_					() -> resultFuture.complete(endpoint.getFencingToken()))___				return resultFuture__			},_			newFencingToken)___		try {_			resultFuture.get(shortTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async run operation should not complete since it is filtered out due to the changed fencing token.")__		} catch (TimeoutException ignored) {}_	};tests,that,async,code,is,not,executed,if,the,fencing,token,changes;test,public,void,test,run,async,with,fencing,throws,exception,final,time,short,timeout,time,milliseconds,100l,final,uuid,new,fencing,token,uuid,random,uuid,final,completable,future,uuid,result,future,new,completable,future,test,run,async,endpoint,endpoint,run,async,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,try,result,future,get,short,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,run,operation,should,not,complete,since,it,is,filtered,out,due,to,the,changed,fencing,token,catch,timeout,exception,ignored
AsyncCallsTest -> @Test 	public void testRunAsyncWithFencing() throws Exception;1526494919;Tests that async code is not executed if the fencing token changes.;@Test_	public void testRunAsyncWithFencing() throws Exception {_		final Time shortTimeout = Time.milliseconds(100L)__		final UUID newFencingToken = UUID.randomUUID()__		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()___		testRunAsync(_			endpoint -> {_				endpoint.runAsync(_					() -> resultFuture.complete(endpoint.getFencingToken()))___				return resultFuture__			},_			newFencingToken)___		try {_			resultFuture.get(shortTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async run operation should not complete since it is filtered out due to the changed fencing token.")__		} catch (TimeoutException ignored) {}_	};tests,that,async,code,is,not,executed,if,the,fencing,token,changes;test,public,void,test,run,async,with,fencing,throws,exception,final,time,short,timeout,time,milliseconds,100l,final,uuid,new,fencing,token,uuid,random,uuid,final,completable,future,uuid,result,future,new,completable,future,test,run,async,endpoint,endpoint,run,async,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,try,result,future,get,short,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,run,operation,should,not,complete,since,it,is,filtered,out,due,to,the,changed,fencing,token,catch,timeout,exception,ignored
AsyncCallsTest -> @Test 	public void testRunAsyncWithFencing() throws Exception;1548326020;Tests that async code is not executed if the fencing token changes.;@Test_	public void testRunAsyncWithFencing() throws Exception {_		final Time shortTimeout = Time.milliseconds(100L)__		final UUID newFencingToken = UUID.randomUUID()__		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()___		testRunAsync(_			endpoint -> {_				endpoint.runAsync(_					() -> resultFuture.complete(endpoint.getFencingToken()))___				return resultFuture__			},_			newFencingToken)___		try {_			resultFuture.get(shortTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async run operation should not complete since it is filtered out due to the changed fencing token.")__		} catch (TimeoutException ignored) {}_	};tests,that,async,code,is,not,executed,if,the,fencing,token,changes;test,public,void,test,run,async,with,fencing,throws,exception,final,time,short,timeout,time,milliseconds,100l,final,uuid,new,fencing,token,uuid,random,uuid,final,completable,future,uuid,result,future,new,completable,future,test,run,async,endpoint,endpoint,run,async,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,try,result,future,get,short,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,run,operation,should,not,complete,since,it,is,filtered,out,due,to,the,changed,fencing,token,catch,timeout,exception,ignored
AsyncCallsTest -> @Test 	public void testRunAsyncWithFencing() throws Exception;1550005039;Tests that async code is not executed if the fencing token changes.;@Test_	public void testRunAsyncWithFencing() throws Exception {_		final Time shortTimeout = Time.milliseconds(100L)__		final UUID newFencingToken = UUID.randomUUID()__		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()___		testRunAsync(_			endpoint -> {_				endpoint.runAsync(_					() -> resultFuture.complete(endpoint.getFencingToken()))___				return resultFuture__			},_			newFencingToken)___		try {_			resultFuture.get(shortTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async run operation should not complete since it is filtered out due to the changed fencing token.")__		} catch (TimeoutException ignored) {}_	};tests,that,async,code,is,not,executed,if,the,fencing,token,changes;test,public,void,test,run,async,with,fencing,throws,exception,final,time,short,timeout,time,milliseconds,100l,final,uuid,new,fencing,token,uuid,random,uuid,final,completable,future,uuid,result,future,new,completable,future,test,run,async,endpoint,endpoint,run,async,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,try,result,future,get,short,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,run,operation,should,not,complete,since,it,is,filtered,out,due,to,the,changed,fencing,token,catch,timeout,exception,ignored
AsyncCallsTest -> @Test 	public void testRunAsyncWithFencing() throws Exception;1550005040;Tests that async code is not executed if the fencing token changes.;@Test_	public void testRunAsyncWithFencing() throws Exception {_		final Time shortTimeout = Time.milliseconds(100L)__		final UUID newFencingToken = UUID.randomUUID()__		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()___		testRunAsync(_			endpoint -> {_				endpoint.runAsync(_					() -> resultFuture.complete(endpoint.getFencingToken()))___				return resultFuture__			},_			newFencingToken)___		try {_			resultFuture.get(shortTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async run operation should not complete since it is filtered out due to the changed fencing token.")__		} catch (TimeoutException ignored) {}_	};tests,that,async,code,is,not,executed,if,the,fencing,token,changes;test,public,void,test,run,async,with,fencing,throws,exception,final,time,short,timeout,time,milliseconds,100l,final,uuid,new,fencing,token,uuid,random,uuid,final,completable,future,uuid,result,future,new,completable,future,test,run,async,endpoint,endpoint,run,async,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,try,result,future,get,short,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,run,operation,should,not,complete,since,it,is,filtered,out,due,to,the,changed,fencing,token,catch,timeout,exception,ignored
AsyncCallsTest -> @Test 	public void testRunAsyncWithoutFencing() throws Exception;1504474506;Tests that code can be executed in the main thread without respecting the fencing token.;@Test_	public void testRunAsyncWithoutFencing() throws Exception {_		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()__		final UUID newFencingToken = UUID.randomUUID()___		testRunAsync(_			endpoint -> {_				endpoint.runAsyncWithoutFencing(_					() -> resultFuture.complete(endpoint.getFencingToken()))__				return resultFuture__			},_			newFencingToken)___		assertEquals(newFencingToken, resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,code,can,be,executed,in,the,main,thread,without,respecting,the,fencing,token;test,public,void,test,run,async,without,fencing,throws,exception,final,completable,future,uuid,result,future,new,completable,future,final,uuid,new,fencing,token,uuid,random,uuid,test,run,async,endpoint,endpoint,run,async,without,fencing,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,assert,equals,new,fencing,token,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testRunAsyncWithoutFencing() throws Exception;1506034747;Tests that code can be executed in the main thread without respecting the fencing token.;@Test_	public void testRunAsyncWithoutFencing() throws Exception {_		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()__		final UUID newFencingToken = UUID.randomUUID()___		testRunAsync(_			endpoint -> {_				endpoint.runAsyncWithoutFencing(_					() -> resultFuture.complete(endpoint.getFencingToken()))__				return resultFuture__			},_			newFencingToken)___		assertEquals(newFencingToken, resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,code,can,be,executed,in,the,main,thread,without,respecting,the,fencing,token;test,public,void,test,run,async,without,fencing,throws,exception,final,completable,future,uuid,result,future,new,completable,future,final,uuid,new,fencing,token,uuid,random,uuid,test,run,async,endpoint,endpoint,run,async,without,fencing,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,assert,equals,new,fencing,token,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testRunAsyncWithoutFencing() throws Exception;1515481550;Tests that code can be executed in the main thread without respecting the fencing token.;@Test_	public void testRunAsyncWithoutFencing() throws Exception {_		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()__		final UUID newFencingToken = UUID.randomUUID()___		testRunAsync(_			endpoint -> {_				endpoint.runAsyncWithoutFencing(_					() -> resultFuture.complete(endpoint.getFencingToken()))__				return resultFuture__			},_			newFencingToken)___		assertEquals(newFencingToken, resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,code,can,be,executed,in,the,main,thread,without,respecting,the,fencing,token;test,public,void,test,run,async,without,fencing,throws,exception,final,completable,future,uuid,result,future,new,completable,future,final,uuid,new,fencing,token,uuid,random,uuid,test,run,async,endpoint,endpoint,run,async,without,fencing,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,assert,equals,new,fencing,token,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testRunAsyncWithoutFencing() throws Exception;1519406526;Tests that code can be executed in the main thread without respecting the fencing token.;@Test_	public void testRunAsyncWithoutFencing() throws Exception {_		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()__		final UUID newFencingToken = UUID.randomUUID()___		testRunAsync(_			endpoint -> {_				endpoint.runAsyncWithoutFencing(_					() -> resultFuture.complete(endpoint.getFencingToken()))__				return resultFuture__			},_			newFencingToken)___		assertEquals(newFencingToken, resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,code,can,be,executed,in,the,main,thread,without,respecting,the,fencing,token;test,public,void,test,run,async,without,fencing,throws,exception,final,completable,future,uuid,result,future,new,completable,future,final,uuid,new,fencing,token,uuid,random,uuid,test,run,async,endpoint,endpoint,run,async,without,fencing,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,assert,equals,new,fencing,token,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testRunAsyncWithoutFencing() throws Exception;1519406528;Tests that code can be executed in the main thread without respecting the fencing token.;@Test_	public void testRunAsyncWithoutFencing() throws Exception {_		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()__		final UUID newFencingToken = UUID.randomUUID()___		testRunAsync(_			endpoint -> {_				endpoint.runAsyncWithoutFencing(_					() -> resultFuture.complete(endpoint.getFencingToken()))__				return resultFuture__			},_			newFencingToken)___		assertEquals(newFencingToken, resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,code,can,be,executed,in,the,main,thread,without,respecting,the,fencing,token;test,public,void,test,run,async,without,fencing,throws,exception,final,completable,future,uuid,result,future,new,completable,future,final,uuid,new,fencing,token,uuid,random,uuid,test,run,async,endpoint,endpoint,run,async,without,fencing,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,assert,equals,new,fencing,token,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testRunAsyncWithoutFencing() throws Exception;1522339661;Tests that code can be executed in the main thread without respecting the fencing token.;@Test_	public void testRunAsyncWithoutFencing() throws Exception {_		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()__		final UUID newFencingToken = UUID.randomUUID()___		testRunAsync(_			endpoint -> {_				endpoint.runAsyncWithoutFencing(_					() -> resultFuture.complete(endpoint.getFencingToken()))__				return resultFuture__			},_			newFencingToken)___		assertEquals(newFencingToken, resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,code,can,be,executed,in,the,main,thread,without,respecting,the,fencing,token;test,public,void,test,run,async,without,fencing,throws,exception,final,completable,future,uuid,result,future,new,completable,future,final,uuid,new,fencing,token,uuid,random,uuid,test,run,async,endpoint,endpoint,run,async,without,fencing,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,assert,equals,new,fencing,token,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testRunAsyncWithoutFencing() throws Exception;1522681180;Tests that code can be executed in the main thread without respecting the fencing token.;@Test_	public void testRunAsyncWithoutFencing() throws Exception {_		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()__		final UUID newFencingToken = UUID.randomUUID()___		testRunAsync(_			endpoint -> {_				endpoint.runAsyncWithoutFencing(_					() -> resultFuture.complete(endpoint.getFencingToken()))__				return resultFuture__			},_			newFencingToken)___		assertEquals(newFencingToken, resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,code,can,be,executed,in,the,main,thread,without,respecting,the,fencing,token;test,public,void,test,run,async,without,fencing,throws,exception,final,completable,future,uuid,result,future,new,completable,future,final,uuid,new,fencing,token,uuid,random,uuid,test,run,async,endpoint,endpoint,run,async,without,fencing,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,assert,equals,new,fencing,token,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testRunAsyncWithoutFencing() throws Exception;1522849792;Tests that code can be executed in the main thread without respecting the fencing token.;@Test_	public void testRunAsyncWithoutFencing() throws Exception {_		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()__		final UUID newFencingToken = UUID.randomUUID()___		testRunAsync(_			endpoint -> {_				endpoint.runAsyncWithoutFencing(_					() -> resultFuture.complete(endpoint.getFencingToken()))__				return resultFuture__			},_			newFencingToken)___		assertEquals(newFencingToken, resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,code,can,be,executed,in,the,main,thread,without,respecting,the,fencing,token;test,public,void,test,run,async,without,fencing,throws,exception,final,completable,future,uuid,result,future,new,completable,future,final,uuid,new,fencing,token,uuid,random,uuid,test,run,async,endpoint,endpoint,run,async,without,fencing,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,assert,equals,new,fencing,token,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testRunAsyncWithoutFencing() throws Exception;1526494919;Tests that code can be executed in the main thread without respecting the fencing token.;@Test_	public void testRunAsyncWithoutFencing() throws Exception {_		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()__		final UUID newFencingToken = UUID.randomUUID()___		testRunAsync(_			endpoint -> {_				endpoint.runAsyncWithoutFencing(_					() -> resultFuture.complete(endpoint.getFencingToken()))__				return resultFuture__			},_			newFencingToken)___		assertEquals(newFencingToken, resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,code,can,be,executed,in,the,main,thread,without,respecting,the,fencing,token;test,public,void,test,run,async,without,fencing,throws,exception,final,completable,future,uuid,result,future,new,completable,future,final,uuid,new,fencing,token,uuid,random,uuid,test,run,async,endpoint,endpoint,run,async,without,fencing,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,assert,equals,new,fencing,token,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testRunAsyncWithoutFencing() throws Exception;1548326020;Tests that code can be executed in the main thread without respecting the fencing token.;@Test_	public void testRunAsyncWithoutFencing() throws Exception {_		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()__		final UUID newFencingToken = UUID.randomUUID()___		testRunAsync(_			endpoint -> {_				endpoint.runAsyncWithoutFencing(_					() -> resultFuture.complete(endpoint.getFencingToken()))__				return resultFuture__			},_			newFencingToken)___		assertEquals(newFencingToken, resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,code,can,be,executed,in,the,main,thread,without,respecting,the,fencing,token;test,public,void,test,run,async,without,fencing,throws,exception,final,completable,future,uuid,result,future,new,completable,future,final,uuid,new,fencing,token,uuid,random,uuid,test,run,async,endpoint,endpoint,run,async,without,fencing,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,assert,equals,new,fencing,token,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testRunAsyncWithoutFencing() throws Exception;1550005039;Tests that code can be executed in the main thread without respecting the fencing token.;@Test_	public void testRunAsyncWithoutFencing() throws Exception {_		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()__		final UUID newFencingToken = UUID.randomUUID()___		testRunAsync(_			endpoint -> {_				endpoint.runAsyncWithoutFencing(_					() -> resultFuture.complete(endpoint.getFencingToken()))__				return resultFuture__			},_			newFencingToken)___		assertEquals(newFencingToken, resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,code,can,be,executed,in,the,main,thread,without,respecting,the,fencing,token;test,public,void,test,run,async,without,fencing,throws,exception,final,completable,future,uuid,result,future,new,completable,future,final,uuid,new,fencing,token,uuid,random,uuid,test,run,async,endpoint,endpoint,run,async,without,fencing,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,assert,equals,new,fencing,token,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testRunAsyncWithoutFencing() throws Exception;1550005040;Tests that code can be executed in the main thread without respecting the fencing token.;@Test_	public void testRunAsyncWithoutFencing() throws Exception {_		final CompletableFuture<UUID> resultFuture = new CompletableFuture<>()__		final UUID newFencingToken = UUID.randomUUID()___		testRunAsync(_			endpoint -> {_				endpoint.runAsyncWithoutFencing(_					() -> resultFuture.complete(endpoint.getFencingToken()))__				return resultFuture__			},_			newFencingToken)___		assertEquals(newFencingToken, resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS))__	};tests,that,code,can,be,executed,in,the,main,thread,without,respecting,the,fencing,token;test,public,void,test,run,async,without,fencing,throws,exception,final,completable,future,uuid,result,future,new,completable,future,final,uuid,new,fencing,token,uuid,random,uuid,test,run,async,endpoint,endpoint,run,async,without,fencing,result,future,complete,endpoint,get,fencing,token,return,result,future,new,fencing,token,assert,equals,new,fencing,token,result,future,get,timeout,to,milliseconds,time,unit,milliseconds
AsyncCallsTest -> @Test 	public void testCallAsyncWithFencing() throws Exception;1504474506;Tests that async callables are not executed if the fencing token changes.;@Test_	public void testCallAsyncWithFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsync(() -> true, timeout),_			newFencingToken)___		try {_			resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async call operation should fail due to the changed fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenMismatchException)__		}_	};tests,that,async,callables,are,not,executed,if,the,fencing,token,changes;test,public,void,test,call,async,with,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,true,timeout,new,fencing,token,try,result,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,call,operation,should,fail,due,to,the,changed,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,mismatch,exception
AsyncCallsTest -> @Test 	public void testCallAsyncWithFencing() throws Exception;1506034747;Tests that async callables are not executed if the fencing token changes.;@Test_	public void testCallAsyncWithFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsync(() -> true, timeout),_			newFencingToken)___		try {_			resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async call operation should fail due to the changed fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};tests,that,async,callables,are,not,executed,if,the,fencing,token,changes;test,public,void,test,call,async,with,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,true,timeout,new,fencing,token,try,result,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,call,operation,should,fail,due,to,the,changed,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
AsyncCallsTest -> @Test 	public void testCallAsyncWithFencing() throws Exception;1515481550;Tests that async callables are not executed if the fencing token changes.;@Test_	public void testCallAsyncWithFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsync(() -> true, timeout),_			newFencingToken)___		try {_			resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async call operation should fail due to the changed fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};tests,that,async,callables,are,not,executed,if,the,fencing,token,changes;test,public,void,test,call,async,with,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,true,timeout,new,fencing,token,try,result,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,call,operation,should,fail,due,to,the,changed,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
AsyncCallsTest -> @Test 	public void testCallAsyncWithFencing() throws Exception;1519406526;Tests that async callables are not executed if the fencing token changes.;@Test_	public void testCallAsyncWithFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsync(() -> true, timeout),_			newFencingToken)___		try {_			resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async call operation should fail due to the changed fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};tests,that,async,callables,are,not,executed,if,the,fencing,token,changes;test,public,void,test,call,async,with,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,true,timeout,new,fencing,token,try,result,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,call,operation,should,fail,due,to,the,changed,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
AsyncCallsTest -> @Test 	public void testCallAsyncWithFencing() throws Exception;1519406528;Tests that async callables are not executed if the fencing token changes.;@Test_	public void testCallAsyncWithFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsync(() -> true, timeout),_			newFencingToken)___		try {_			resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async call operation should fail due to the changed fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};tests,that,async,callables,are,not,executed,if,the,fencing,token,changes;test,public,void,test,call,async,with,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,true,timeout,new,fencing,token,try,result,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,call,operation,should,fail,due,to,the,changed,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
AsyncCallsTest -> @Test 	public void testCallAsyncWithFencing() throws Exception;1522339661;Tests that async callables are not executed if the fencing token changes.;@Test_	public void testCallAsyncWithFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsync(() -> true, timeout),_			newFencingToken)___		try {_			resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async call operation should fail due to the changed fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};tests,that,async,callables,are,not,executed,if,the,fencing,token,changes;test,public,void,test,call,async,with,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,true,timeout,new,fencing,token,try,result,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,call,operation,should,fail,due,to,the,changed,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
AsyncCallsTest -> @Test 	public void testCallAsyncWithFencing() throws Exception;1522681180;Tests that async callables are not executed if the fencing token changes.;@Test_	public void testCallAsyncWithFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsync(() -> true, timeout),_			newFencingToken)___		try {_			resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async call operation should fail due to the changed fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};tests,that,async,callables,are,not,executed,if,the,fencing,token,changes;test,public,void,test,call,async,with,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,true,timeout,new,fencing,token,try,result,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,call,operation,should,fail,due,to,the,changed,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
AsyncCallsTest -> @Test 	public void testCallAsyncWithFencing() throws Exception;1522849792;Tests that async callables are not executed if the fencing token changes.;@Test_	public void testCallAsyncWithFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsync(() -> true, timeout),_			newFencingToken)___		try {_			resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async call operation should fail due to the changed fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};tests,that,async,callables,are,not,executed,if,the,fencing,token,changes;test,public,void,test,call,async,with,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,true,timeout,new,fencing,token,try,result,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,call,operation,should,fail,due,to,the,changed,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
AsyncCallsTest -> @Test 	public void testCallAsyncWithFencing() throws Exception;1526494919;Tests that async callables are not executed if the fencing token changes.;@Test_	public void testCallAsyncWithFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsync(() -> true, timeout),_			newFencingToken)___		try {_			resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async call operation should fail due to the changed fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};tests,that,async,callables,are,not,executed,if,the,fencing,token,changes;test,public,void,test,call,async,with,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,true,timeout,new,fencing,token,try,result,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,call,operation,should,fail,due,to,the,changed,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
AsyncCallsTest -> @Test 	public void testCallAsyncWithFencing() throws Exception;1548326020;Tests that async callables are not executed if the fencing token changes.;@Test_	public void testCallAsyncWithFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsync(() -> true, timeout),_			newFencingToken)___		try {_			resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async call operation should fail due to the changed fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};tests,that,async,callables,are,not,executed,if,the,fencing,token,changes;test,public,void,test,call,async,with,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,true,timeout,new,fencing,token,try,result,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,call,operation,should,fail,due,to,the,changed,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
AsyncCallsTest -> @Test 	public void testCallAsyncWithFencing() throws Exception;1550005039;Tests that async callables are not executed if the fencing token changes.;@Test_	public void testCallAsyncWithFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsync(() -> true, timeout),_			newFencingToken)___		try {_			resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async call operation should fail due to the changed fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};tests,that,async,callables,are,not,executed,if,the,fencing,token,changes;test,public,void,test,call,async,with,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,true,timeout,new,fencing,token,try,result,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,call,operation,should,fail,due,to,the,changed,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
AsyncCallsTest -> @Test 	public void testCallAsyncWithFencing() throws Exception;1550005040;Tests that async callables are not executed if the fencing token changes.;@Test_	public void testCallAsyncWithFencing() throws Exception {_		final UUID newFencingToken = UUID.randomUUID()___		CompletableFuture<Boolean> resultFuture = testRunAsync(_			endpoint -> endpoint.callAsync(() -> true, timeout),_			newFencingToken)___		try {_			resultFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			fail("The async call operation should fail due to the changed fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};tests,that,async,callables,are,not,executed,if,the,fencing,token,changes;test,public,void,test,call,async,with,fencing,throws,exception,final,uuid,new,fencing,token,uuid,random,uuid,completable,future,boolean,result,future,test,run,async,endpoint,endpoint,call,async,true,timeout,new,fencing,token,try,result,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,the,async,call,operation,should,fail,due,to,the,changed,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
