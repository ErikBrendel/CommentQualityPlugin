commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public RetrievableStateHandle<SubmittedJobGraph> store(SubmittedJobGraph state) throws IOException {     ByteStreamStateHandle byteStreamStateHandle = new ByteStreamStateHandle(String.valueOf(UUID.randomUUID()), InstantiationUtil.serializeObject(state)).     return new RetrievableStreamStateHandle<>(byteStreamStateHandle). }
false;public,static;0;4;;@AfterClass public static void tearDown() throws Exception {     ZooKeeper.shutdown(). }
false;public;0;4;;@Before public void cleanUp() throws Exception {     ZooKeeper.deleteAll(). }
false;public;0;54;;@Test public void testPutAndRemoveJobGraph() throws Exception {     ZooKeeperSubmittedJobGraphStore jobGraphs = createZooKeeperSubmittedJobGraphStore("/testPutAndRemoveJobGraph").     try {         SubmittedJobGraphListener listener = mock(SubmittedJobGraphListener.class).         jobGraphs.start(listener).         SubmittedJobGraph jobGraph = createSubmittedJobGraph(new JobID(), "JobName").         // Empty state         assertEquals(0, jobGraphs.getJobIds().size()).         // Add initial         jobGraphs.putJobGraph(jobGraph).         // Verify initial job graph         Collection<JobID> jobIds = jobGraphs.getJobIds().         assertEquals(1, jobIds.size()).         JobID jobId = jobIds.iterator().next().         verifyJobGraphs(jobGraph, jobGraphs.recoverJobGraph(jobId)).         // Update (same ID)         jobGraph = createSubmittedJobGraph(jobGraph.getJobId(), "Updated JobName").         jobGraphs.putJobGraph(jobGraph).         // Verify updated         jobIds = jobGraphs.getJobIds().         assertEquals(1, jobIds.size()).         jobId = jobIds.iterator().next().         verifyJobGraphs(jobGraph, jobGraphs.recoverJobGraph(jobId)).         // Remove         jobGraphs.removeJobGraph(jobGraph.getJobId()).         // Empty state         assertEquals(0, jobGraphs.getJobIds().size()).         // Nothing should have been notified         verify(listener, atMost(1)).onAddedJobGraph(any(JobID.class)).         verify(listener, never()).onRemovedJobGraph(any(JobID.class)).         // Don't fail if called again         jobGraphs.removeJobGraph(jobGraph.getJobId()).     } finally {         jobGraphs.stop().     } }
false;private;1;15;;@Nonnull private ZooKeeperSubmittedJobGraphStore createZooKeeperSubmittedJobGraphStore(String fullPath) throws Exception {     final CuratorFramework client = ZooKeeper.getClient().     // Ensure that the job graphs path exists     client.newNamespaceAwareEnsurePath(fullPath).ensure(client.getZookeeperClient()).     // All operations will have the path as root     CuratorFramework facade = client.usingNamespace(client.getNamespace() + fullPath).     return new ZooKeeperSubmittedJobGraphStore(fullPath, new ZooKeeperStateHandleStore<>(facade, localStateStorage), new PathChildrenCache(facade, "/", false)). }
false;public;0;45;;@Test public void testRecoverJobGraphs() throws Exception {     ZooKeeperSubmittedJobGraphStore jobGraphs = createZooKeeperSubmittedJobGraphStore("/testRecoverJobGraphs").     try {         SubmittedJobGraphListener listener = mock(SubmittedJobGraphListener.class).         jobGraphs.start(listener).         HashMap<JobID, SubmittedJobGraph> expected = new HashMap<>().         JobID[] jobIds = new JobID[] { new JobID(), new JobID(), new JobID() }.         expected.put(jobIds[0], createSubmittedJobGraph(jobIds[0])).         expected.put(jobIds[1], createSubmittedJobGraph(jobIds[1])).         expected.put(jobIds[2], createSubmittedJobGraph(jobIds[2])).         // Add all         for (SubmittedJobGraph jobGraph : expected.values()) {             jobGraphs.putJobGraph(jobGraph).         }         Collection<JobID> actual = jobGraphs.getJobIds().         assertEquals(expected.size(), actual.size()).         for (JobID jobId : actual) {             SubmittedJobGraph jobGraph = jobGraphs.recoverJobGraph(jobId).             assertTrue(expected.containsKey(jobGraph.getJobId())).             verifyJobGraphs(expected.get(jobGraph.getJobId()), jobGraph).             jobGraphs.removeJobGraph(jobGraph.getJobId()).         }         // Empty state         assertEquals(0, jobGraphs.getJobIds().size()).         // Nothing should have been notified         verify(listener, atMost(expected.size())).onAddedJobGraph(any(JobID.class)).         verify(listener, never()).onRemovedJobGraph(any(JobID.class)).     } finally {         jobGraphs.stop().     } }
false;public;1;7;;@Override public Void answer(InvocationOnMock invocation) throws Throwable {     actualOtherJobId[0] = (JobID) invocation.getArguments()[0].     sync.countDown().     return null. }
false;public;0;59;;@Test public void testConcurrentAddJobGraph() throws Exception {     ZooKeeperSubmittedJobGraphStore jobGraphs = null.     ZooKeeperSubmittedJobGraphStore otherJobGraphs = null.     try {         jobGraphs = createZooKeeperSubmittedJobGraphStore("/testConcurrentAddJobGraph").         otherJobGraphs = createZooKeeperSubmittedJobGraphStore("/testConcurrentAddJobGraph").         SubmittedJobGraph jobGraph = createSubmittedJobGraph(new JobID()).         SubmittedJobGraph otherJobGraph = createSubmittedJobGraph(new JobID()).         SubmittedJobGraphListener listener = mock(SubmittedJobGraphListener.class).         final JobID[] actualOtherJobId = new JobID[1].         final CountDownLatch sync = new CountDownLatch(1).         doAnswer(new Answer<Void>() {              @Override             public Void answer(InvocationOnMock invocation) throws Throwable {                 actualOtherJobId[0] = (JobID) invocation.getArguments()[0].                 sync.countDown().                 return null.             }         }).when(listener).onAddedJobGraph(any(JobID.class)).         // Test         jobGraphs.start(listener).         otherJobGraphs.start(null).         jobGraphs.putJobGraph(jobGraph).         // Everything is cool... not much happening .)         verify(listener, never()).onAddedJobGraph(any(JobID.class)).         verify(listener, never()).onRemovedJobGraph(any(JobID.class)).         // This bad boy adds the other job graph         otherJobGraphs.putJobGraph(otherJobGraph).         // Wait for the cache to call back         sync.await().         verify(listener, times(1)).onAddedJobGraph(any(JobID.class)).         verify(listener, never()).onRemovedJobGraph(any(JobID.class)).         assertEquals(otherJobGraph.getJobId(), actualOtherJobId[0]).     } finally {         if (jobGraphs != null) {             jobGraphs.stop().         }         if (otherJobGraphs != null) {             otherJobGraphs.stop().         }     } }
false;public;0;15;;@Test(expected = IllegalStateException.class) public void testUpdateJobGraphYouDidNotGetOrAdd() throws Exception {     ZooKeeperSubmittedJobGraphStore jobGraphs = createZooKeeperSubmittedJobGraphStore("/testUpdateJobGraphYouDidNotGetOrAdd").     ZooKeeperSubmittedJobGraphStore otherJobGraphs = createZooKeeperSubmittedJobGraphStore("/testUpdateJobGraphYouDidNotGetOrAdd").     jobGraphs.start(null).     otherJobGraphs.start(null).     SubmittedJobGraph jobGraph = createSubmittedJobGraph(new JobID()).     jobGraphs.putJobGraph(jobGraph).     otherJobGraphs.putJobGraph(jobGraph). }
false;private;1;3;;// --------------------------------------------------------------------------------------------- private SubmittedJobGraph createSubmittedJobGraph(JobID jobId) {     return createSubmittedJobGraph(jobId, "Test JobGraph"). }
false;private;2;10;;private SubmittedJobGraph createSubmittedJobGraph(JobID jobId, String jobName) {     final JobGraph jobGraph = new JobGraph(jobId, jobName).     final JobVertex jobVertex = new JobVertex("Test JobVertex").     jobVertex.setParallelism(1).     jobGraph.addVertex(jobVertex).     return new SubmittedJobGraph(jobGraph). }
false;private;2;8;;private void verifyJobGraphs(SubmittedJobGraph expected, SubmittedJobGraph actual) {     JobGraph expectedJobGraph = expected.getJobGraph().     JobGraph actualJobGraph = actual.getJobGraph().     assertEquals(expectedJobGraph.getName(), actualJobGraph.getName()).     assertEquals(expectedJobGraph.getJobID(), actualJobGraph.getJobID()). }
