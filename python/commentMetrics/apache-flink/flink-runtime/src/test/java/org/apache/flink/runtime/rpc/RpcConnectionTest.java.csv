commented;modifiers;parameterAmount;loc;comment;code
false;public;0;52;;@Test public void testConnectFailure() throws Exception {     ActorSystem actorSystem = null.     RpcService rpcService = null.     try {         actorSystem = AkkaUtils.createActorSystem(new Configuration(), Option.<Tuple2<String, Object>>apply(new Tuple2<>("localhost", 0))).         // we start the RPC service with a very long timeout to ensure that the test         // can only pass if the connection problem is not recognized merely via a timeout         Configuration configuration = new Configuration().         configuration.setString(AkkaOptions.ASK_TIMEOUT, "10000000 s").         rpcService = new AkkaRpcService(actorSystem, AkkaRpcServiceConfiguration.fromConfiguration(configuration)).         CompletableFuture<TaskExecutorGateway> future = rpcService.connect("foo.bar.com.test.invalid", TaskExecutorGateway.class).         future.get(10000000, TimeUnit.SECONDS).         fail("should never complete normally").     } catch (TimeoutException e) {         fail("should not fail with a generic timeout exception").     } catch (ExecutionException e) {         // that is what we want         assertTrue(e.getCause() instanceof RpcConnectionException).         assertTrue("wrong error message", e.getCause().getMessage().contains("foo.bar.com.test.invalid")).     } catch (Throwable t) {         fail("wrong exception: " + t).     } finally {         final CompletableFuture<Void> rpcTerminationFuture.         if (rpcService != null) {             rpcTerminationFuture = rpcService.stopService().         } else {             rpcTerminationFuture = CompletableFuture.completedFuture(null).         }         final CompletableFuture<Terminated> actorSystemTerminationFuture.         if (actorSystem != null) {             actorSystemTerminationFuture = FutureUtils.toJava(actorSystem.terminate()).         } else {             actorSystemTerminationFuture = CompletableFuture.completedFuture(null).         }         FutureUtils.waitForAll(Arrays.asList(rpcTerminationFuture, actorSystemTerminationFuture)).get().     } }
