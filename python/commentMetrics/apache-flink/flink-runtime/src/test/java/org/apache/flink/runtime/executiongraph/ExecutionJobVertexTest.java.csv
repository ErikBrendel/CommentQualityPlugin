commented;modifiers;parameterAmount;loc;comment;code
false;public;0;85;;@Test public void testMaxParallelismDefaulting() throws Exception {     // default minimum     ExecutionJobVertex executionJobVertex = createExecutionJobVertex(1, NOT_CONFIGURED).     Assert.assertEquals(128, executionJobVertex.getMaxParallelism()).     // test round up part 1     executionJobVertex = createExecutionJobVertex(171, NOT_CONFIGURED).     Assert.assertEquals(256, executionJobVertex.getMaxParallelism()).     // test round up part 2     executionJobVertex = createExecutionJobVertex(172, NOT_CONFIGURED).     Assert.assertEquals(512, executionJobVertex.getMaxParallelism()).     // test round up limit     executionJobVertex = createExecutionJobVertex(1 << 15, NOT_CONFIGURED).     Assert.assertEquals(1 << 15, executionJobVertex.getMaxParallelism()).     // test upper bound     try {         executionJobVertex = createExecutionJobVertex(1 + (1 << 15), NOT_CONFIGURED).         executionJobVertex.getMaxParallelism().         Assert.fail().     } catch (IllegalArgumentException ignore) {     }     // parallelism must be smaller than the max parallelism     try {         createExecutionJobVertex(172, 4).         Assert.fail("We should not be able to create an ExecutionJobVertex which " + "has a smaller max parallelism than parallelism.").     } catch (JobException ignored) {     // expected     }     // test configured / trumps computed default     executionJobVertex = createExecutionJobVertex(4, 1 << 15).     Assert.assertEquals(1 << 15, executionJobVertex.getMaxParallelism()).     // test upper bound configured     try {         executionJobVertex = createExecutionJobVertex(4, 1 + (1 << 15)).         Assert.fail(String.valueOf(executionJobVertex.getMaxParallelism())).     } catch (IllegalArgumentException ignore) {     }     // test lower bound configured     try {         executionJobVertex = createExecutionJobVertex(4, 0).         Assert.fail(String.valueOf(executionJobVertex.getMaxParallelism())).     } catch (IllegalArgumentException ignore) {     }     // test override trumps test configured 2     executionJobVertex = createExecutionJobVertex(4, NOT_CONFIGURED).     executionJobVertex.setMaxParallelism(7).     Assert.assertEquals(7, executionJobVertex.getMaxParallelism()).     // test lower bound with derived value     executionJobVertex = createExecutionJobVertex(4, NOT_CONFIGURED).     try {         executionJobVertex.setMaxParallelism(0).         Assert.fail(String.valueOf(executionJobVertex.getMaxParallelism())).     } catch (IllegalArgumentException ignore) {     }     // test upper bound with derived value     executionJobVertex = createExecutionJobVertex(4, NOT_CONFIGURED).     try {         executionJobVertex.setMaxParallelism(1 + (1 << 15)).         Assert.fail(String.valueOf(executionJobVertex.getMaxParallelism())).     } catch (IllegalArgumentException ignore) {     }     // test complain on setting derived value in presence of a configured value     executionJobVertex = createExecutionJobVertex(4, 16).     try {         executionJobVertex.setMaxParallelism(7).         Assert.fail(String.valueOf(executionJobVertex.getMaxParallelism())).     } catch (IllegalStateException ignore) {     } }
false;private,static;2;19;;// ------------------------------------------------------------------------------------------------------ private static ExecutionJobVertex createExecutionJobVertex(int parallelism, int preconfiguredMaxParallelism) throws JobException {     JobVertex jobVertex = new JobVertex("testVertex").     jobVertex.setInvokableClass(AbstractInvokable.class).     jobVertex.setParallelism(parallelism).     if (NOT_CONFIGURED != preconfiguredMaxParallelism) {         jobVertex.setMaxParallelism(preconfiguredMaxParallelism).     }     ExecutionGraph executionGraphMock = mock(ExecutionGraph.class).     when(executionGraphMock.getFutureExecutor()).thenReturn(Executors.directExecutor()).     ExecutionJobVertex executionJobVertex = new ExecutionJobVertex(executionGraphMock, jobVertex, 1, Time.seconds(10)).     return executionJobVertex. }
