commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;@Override public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {     sync.countDown().     if (sync.getCount() == 1) {         return new BufferBuilder(memorySegment, recycler).     }     final Object o = new Object().     synchronized (o) {         while (true) {             o.wait().         }     } }
false;public;0;16;;@Override public Void call() throws Exception {     IntValue val = new IntValue(0).     try {         recordWriter.emit(val).         recordWriter.flushAll().         recordWriter.emit(val).     } catch (InterruptedException e) {         recordWriter.clearBuffers().     }     return null. }
true;public;0;83;/**  * Tests a fix for FLINK-2089.  *  * @see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>  */ ;// --------------------------------------------------------------------------------------------- // Resource release tests // --------------------------------------------------------------------------------------------- /**  * Tests a fix for FLINK-2089.  *  * @see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>  */ @Test public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {     ExecutorService executor = null.     try {         executor = Executors.newSingleThreadExecutor().         final CountDownLatch sync = new CountDownLatch(2).         final TrackingBufferRecycler recycler = new TrackingBufferRecycler().         final MemorySegment memorySegment = MemorySegmentFactory.allocateUnpooledSegment(4).         // Return buffer for first request, but block for all following requests.         Answer<BufferBuilder> request = new Answer<BufferBuilder>() {              @Override             public BufferBuilder answer(InvocationOnMock invocation) throws Throwable {                 sync.countDown().                 if (sync.getCount() == 1) {                     return new BufferBuilder(memorySegment, recycler).                 }                 final Object o = new Object().                 synchronized (o) {                     while (true) {                         o.wait().                     }                 }             }         }.         BufferProvider bufferProvider = mock(BufferProvider.class).         when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request).         ResultPartitionWriter partitionWriter = new RecyclingPartitionWriter(bufferProvider).         final RecordWriter<IntValue> recordWriter = new RecordWriter<IntValue>(partitionWriter).         Future<?> result = executor.submit(new Callable<Void>() {              @Override             public Void call() throws Exception {                 IntValue val = new IntValue(0).                 try {                     recordWriter.emit(val).                     recordWriter.flushAll().                     recordWriter.emit(val).                 } catch (InterruptedException e) {                     recordWriter.clearBuffers().                 }                 return null.             }         }).         sync.await().         // Interrupt the Thread.         //          // The second emit call requests a new buffer and blocks the thread.         // When interrupting the thread at this point, clearing the buffers         // should not recycle any buffer.         result.cancel(true).         recordWriter.clearBuffers().         // Verify that buffer have been requested twice         verify(bufferProvider, times(2)).requestBufferBuilderBlocking().         // Verify that the written out buffer has only been recycled once         // (by the partition writer).         assertEquals(1, recycler.getRecycledMemorySegments().size()).         assertEquals(memorySegment, recycler.getRecycledMemorySegments().get(0)).     } finally {         if (executor != null) {             executor.shutdown().         }     } }
false;public;0;17;;@Test public void testSerializerClearedAfterClearBuffers() throws Exception {     ResultPartitionWriter partitionWriter = spy(new RecyclingPartitionWriter(new TestPooledBufferProvider(1, 16))).     RecordWriter<IntValue> recordWriter = new RecordWriter<>(partitionWriter).     // Fill a buffer, but don't write it out.     recordWriter.emit(new IntValue(0)).     // Clear all buffers.     recordWriter.clearBuffers().     // This should not throw an Exception iff the serializer state     // has been cleared as expected.     recordWriter.flushAll(). }
true;public;0;30;/**  * Tests broadcasting events when no records have been emitted yet.  */ ;/**  * Tests broadcasting events when no records have been emitted yet.  */ @Test public void testBroadcastEventNoRecords() throws Exception {     int numberOfChannels = 4.     int bufferSize = 32.     @SuppressWarnings("unchecked")     Queue<BufferConsumer>[] queues = new Queue[numberOfChannels].     for (int i = 0. i < numberOfChannels. i++) {         queues[i] = new ArrayDeque<>().     }     TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize).     ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider).     RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter).     CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 919192L, Integer.MAX_VALUE + 18828228L, CheckpointOptions.forCheckpointWithDefaultLocation()).     // No records emitted yet, broadcast should not request a buffer     writer.broadcastEvent(barrier).     assertEquals(0, bufferProvider.getNumberOfCreatedBuffers()).     for (int i = 0. i < numberOfChannels. i++) {         assertEquals(1, queues[i].size()).         BufferOrEvent boe = parseBuffer(queues[i].remove(), i).         assertTrue(boe.isEvent()).         assertEquals(barrier, boe.getEvent()).         assertEquals(0, queues[i].size()).     } }
true;public;0;65;/**  * Tests broadcasting events when records have been emitted. The emitted  * records cover all three {@link SerializationResult} types.  */ ;/**  * Tests broadcasting events when records have been emitted. The emitted  * records cover all three {@link SerializationResult} types.  */ @Test public void testBroadcastEventMixedRecords() throws Exception {     Random rand = new XORShiftRandom().     int numberOfChannels = 4.     int bufferSize = 32.     // serialized length     int lenBytes = 4.     @SuppressWarnings("unchecked")     Queue<BufferConsumer>[] queues = new Queue[numberOfChannels].     for (int i = 0. i < numberOfChannels. i++) {         queues[i] = new ArrayDeque<>().     }     TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize).     ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider).     RecordWriter<ByteArrayIO> writer = new RecordWriter<>(partitionWriter).     CheckpointBarrier barrier = new CheckpointBarrier(Integer.MAX_VALUE + 1292L, Integer.MAX_VALUE + 199L, CheckpointOptions.forCheckpointWithDefaultLocation()).     // Emit records on some channels first (requesting buffers), then     // broadcast the event. The record buffers should be emitted first, then     // the event. After the event, no new buffer should be requested.     // (i) Smaller than the buffer size (single buffer request => 1)     byte[] bytes = new byte[bufferSize / 2].     rand.nextBytes(bytes).     writer.emit(new ByteArrayIO(bytes)).     // (ii) Larger than the buffer size (two buffer requests => 1 + 2)     bytes = new byte[bufferSize + 1].     rand.nextBytes(bytes).     writer.emit(new ByteArrayIO(bytes)).     // (iii) Exactly the buffer size (single buffer request => 1 + 2 + 1)     bytes = new byte[bufferSize - lenBytes].     rand.nextBytes(bytes).     writer.emit(new ByteArrayIO(bytes)).     // (iv) Nothing on the 4th channel (no buffer request => 1 + 2 + 1 + 0 = 4)     // (v) Broadcast the event     writer.broadcastEvent(barrier).     assertEquals(4, bufferProvider.getNumberOfCreatedBuffers()).     BufferOrEvent boe.     // 1 buffer + 1 event     assertEquals(2, queues[0].size()).     assertTrue(parseBuffer(queues[0].remove(), 0).isBuffer()).     // 2 buffers + 1 event     assertEquals(3, queues[1].size()).     assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer()).     assertTrue(parseBuffer(queues[1].remove(), 1).isBuffer()).     // 1 buffer + 1 event     assertEquals(2, queues[2].size()).     assertTrue(parseBuffer(queues[2].remove(), 2).isBuffer()).     // 0 buffers + 1 event     assertEquals(1, queues[3].size()).     // every queue's last element should be the event     for (int i = 0. i < numberOfChannels. i++) {         boe = parseBuffer(queues[i].remove(), i).         assertTrue(boe.isEvent()).         assertEquals(barrier, boe.getEvent()).     } }
true;public;0;28;/**  * Tests that event buffers are properly recycled when broadcasting events  * to multiple channels.  */ ;/**  * Tests that event buffers are properly recycled when broadcasting events  * to multiple channels.  */ @Test public void testBroadcastEventBufferReferenceCounting() throws Exception {     @SuppressWarnings("unchecked")     ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }.     ResultPartitionWriter partition = new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE)).     RecordWriter<?> writer = new RecordWriter<>(partition).     writer.broadcastEvent(EndOfPartitionEvent.INSTANCE).     // Verify added to all queues     assertEquals(1, queues[0].size()).     assertEquals(1, queues[1].size()).     // get references to buffer consumers (copies from the original event buffer consumer)     BufferConsumer bufferConsumer1 = queues[0].getFirst().     BufferConsumer bufferConsumer2 = queues[1].getFirst().     // process all collected events (recycles the buffer)     for (int i = 0. i < queues.length. i++) {         assertTrue(parseBuffer(queues[i].remove(), i).isEvent()).     }     assertTrue(bufferConsumer1.isRecycled()).     assertTrue(bufferConsumer2.isRecycled()). }
true;public;0;24;/**  * Tests that broadcasted events' buffers are independent (in their (reader) indices) once they  * are put into the queue for Netty when broadcasting events to multiple channels.  */ ;/**  * Tests that broadcasted events' buffers are independent (in their (reader) indices) once they  * are put into the queue for Netty when broadcasting events to multiple channels.  */ @Test public void testBroadcastEventBufferIndependence() throws Exception {     @SuppressWarnings("unchecked")     ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }.     ResultPartitionWriter partition = new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE)).     RecordWriter<?> writer = new RecordWriter<>(partition).     writer.broadcastEvent(EndOfPartitionEvent.INSTANCE).     // Verify added to all queues     assertEquals(1, queues[0].size()).     assertEquals(1, queues[1].size()).     // these two buffers may share the memory but not the indices!     Buffer buffer1 = buildSingleBuffer(queues[0].remove()).     Buffer buffer2 = buildSingleBuffer(queues[1].remove()).     assertEquals(0, buffer1.getReaderIndex()).     assertEquals(0, buffer2.getReaderIndex()).     buffer1.setReaderIndex(1).     assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex()). }
true;public;0;25;/**  * Tests that broadcasted records' buffers are independent (in their (reader) indices) once they  * are put into the queue for Netty when broadcasting events to multiple channels.  */ ;/**  * Tests that broadcasted records' buffers are independent (in their (reader) indices) once they  * are put into the queue for Netty when broadcasting events to multiple channels.  */ @Test public void testBroadcastEmitBufferIndependence() throws Exception {     @SuppressWarnings("unchecked")     ArrayDeque<BufferConsumer>[] queues = new ArrayDeque[] { new ArrayDeque(), new ArrayDeque() }.     ResultPartitionWriter partition = new CollectingPartitionWriter(queues, new TestPooledBufferProvider(Integer.MAX_VALUE)).     RecordWriter<IntValue> writer = new RecordWriter<>(partition).     writer.broadcastEmit(new IntValue(0)).     writer.flushAll().     // Verify added to all queues     assertEquals(1, queues[0].size()).     assertEquals(1, queues[1].size()).     // these two buffers may share the memory but not the indices!     Buffer buffer1 = buildSingleBuffer(queues[0].remove()).     Buffer buffer2 = buildSingleBuffer(queues[1].remove()).     assertEquals(0, buffer1.getReaderIndex()).     assertEquals(0, buffer2.getReaderIndex()).     buffer1.setReaderIndex(1).     assertEquals("Buffer 2 shares the same reader index as buffer 1", 0, buffer2.getReaderIndex()). }
true;public;0;4;/**  * Tests that records are broadcast via {@link ChannelSelector} and  * {@link RecordWriter#emit(IOReadableWritable)}.  */ ;/**  * Tests that records are broadcast via {@link ChannelSelector} and  * {@link RecordWriter#emit(IOReadableWritable)}.  */ @Test public void testEmitRecordWithBroadcastPartitioner() throws Exception {     emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(false). }
true;public;0;4;/**  * Tests that records are broadcast via {@link RecordWriter#broadcastEmit(IOReadableWritable)}.  */ ;/**  * Tests that records are broadcast via {@link RecordWriter#broadcastEmit(IOReadableWritable)}.  */ @Test public void testBroadcastEmitRecord() throws Exception {     emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(true). }
true;private;1;46;/**  * The results of emitting records via BroadcastPartitioner or broadcasting records directly are the same,  * that is all the target channels can receive the whole outputs.  *  * @param isBroadcastEmit whether using {@link RecordWriter#broadcastEmit(IOReadableWritable)} or not  */ ;/**  * The results of emitting records via BroadcastPartitioner or broadcasting records directly are the same,  * that is all the target channels can receive the whole outputs.  *  * @param isBroadcastEmit whether using {@link RecordWriter#broadcastEmit(IOReadableWritable)} or not  */ private void emitRecordWithBroadcastPartitionerOrBroadcastEmitRecord(boolean isBroadcastEmit) throws Exception {     final int numberOfChannels = 4.     final int bufferSize = 32.     final int numValues = 8.     final int serializationLength = 4.     @SuppressWarnings("unchecked")     final Queue<BufferConsumer>[] queues = new Queue[numberOfChannels].     for (int i = 0. i < numberOfChannels. i++) {         queues[i] = new ArrayDeque<>().     }     final TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, bufferSize).     final ResultPartitionWriter partitionWriter = new CollectingPartitionWriter(queues, bufferProvider).     final ChannelSelector selector = new OutputEmitter(ShipStrategyType.BROADCAST, 0).     final RecordWriter<SerializationTestType> writer = RecordWriter.createRecordWriter(partitionWriter, selector, 0, "test").     final RecordDeserializer<SerializationTestType> deserializer = new SpillingAdaptiveSpanningRecordDeserializer<>(new String[] { tempFolder.getRoot().getAbsolutePath() }).     final ArrayDeque<SerializationTestType> serializedRecords = new ArrayDeque<>().     final Iterable<SerializationTestType> records = Util.randomRecords(numValues, SerializationTestTypeFactory.INT).     for (SerializationTestType record : records) {         serializedRecords.add(record).         if (isBroadcastEmit) {             writer.broadcastEmit(record).         } else {             writer.emit(record).         }     }     final int requiredBuffers = numValues / (bufferSize / (4 + serializationLength)).     for (int i = 0. i < numberOfChannels. i++) {         assertEquals(requiredBuffers, queues[i].size()).         final ArrayDeque<SerializationTestType> expectedRecords = serializedRecords.clone().         int assertRecords = 0.         for (int j = 0. j < requiredBuffers. j++) {             Buffer buffer = buildSingleBuffer(queues[i].remove()).             deserializer.setNextBuffer(buffer).             assertRecords += DeserializationUtils.deserializeRecords(expectedRecords, deserializer).         }         Assert.assertEquals(numValues, assertRecords).     } }
false;public;0;4;;@Override public BufferProvider getBufferProvider() {     return bufferProvider. }
false;public;0;4;;@Override public ResultPartitionID getPartitionId() {     return partitionId. }
false;public;0;4;;@Override public int getNumberOfSubpartitions() {     return queues.length. }
false;public;0;4;;@Override public int getNumTargetKeyGroups() {     return 1. }
false;public;2;4;;@Override public void addBufferConsumer(BufferConsumer buffer, int targetChannel) throws IOException {     queues[targetChannel].add(buffer). }
false;public;0;3;;@Override public void flushAll() { }
false;public;1;3;;@Override public void flush(int subpartitionIndex) { }
false;private,static;2;11;;private static BufferOrEvent parseBuffer(BufferConsumer bufferConsumer, int targetChannel) throws IOException {     Buffer buffer = buildSingleBuffer(bufferConsumer).     if (buffer.isBuffer()) {         return new BufferOrEvent(buffer, targetChannel).     } else {         // is event:         AbstractEvent event = EventSerializer.fromBuffer(buffer, RecordWriterTest.class.getClassLoader()).         // the buffer is not needed anymore         buffer.recycleBuffer().         return new BufferOrEvent(event, targetChannel).     } }
false;public;0;4;;@Override public BufferProvider getBufferProvider() {     return bufferProvider. }
false;public;0;4;;@Override public ResultPartitionID getPartitionId() {     return partitionId. }
false;public;0;4;;@Override public int getNumberOfSubpartitions() {     return 1. }
false;public;0;4;;@Override public int getNumTargetKeyGroups() {     return 1. }
false;public;2;4;;@Override public void addBufferConsumer(BufferConsumer bufferConsumer, int targetChannel) throws IOException {     bufferConsumer.close(). }
false;public;0;3;;@Override public void flushAll() { }
false;public;1;3;;@Override public void flush(int subpartitionIndex) { }
false;public;1;4;;@Override public void write(DataOutputView out) throws IOException {     out.write(bytes). }
false;public;1;4;;@Override public void read(DataInputView in) throws IOException {     in.readFully(bytes). }
false;public,synchronized;1;4;;@Override public synchronized void recycle(MemorySegment memorySegment) {     recycledMemorySegments.add(memorySegment). }
false;public,synchronized;0;3;;public synchronized List<MemorySegment> getRecycledMemorySegments() {     return recycledMemorySegments. }
